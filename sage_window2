Last login: Thu Aug 29 12:40:26 on ttys008

The default interactive shell is now zsh.
To update your account to use zsh, please run `chsh -s /bin/zsh`.
For more details, please visit https://support.apple.com/kb/HT208050.
clear ; /Applications/SageMath-10-2.app/Contents/Frameworks/Sage.framework/Versions/Current/venv/bin/sage ; exit
MA-C02K804RDR53:~ reading$ clear ; /Applications/SageMath-10-2.app/Contents/Frameworks/Sage.framework/Versions/Current/venv/bin/sage ; exit















┌────────────────────────────────────────────────────────────────────┐
│ SageMath version 10.2, Release Date: 2023-12-03                    │
│ Using Python 3.11.1. Type "help()" for help.                       │
└────────────────────────────────────────────────────────────────────┘
....:             else:
....:                 out=out+[[v[0]]+k]
....:     return out
....: 
....: # An experiment (a pretty dumb one... yields the list [v])
....: def K(c,v):  # A set of sequences depending on a sortable element v, given
....:  by its c-sorting word
....:     out = []
....:     if c==[]:   # The terminal case (empty sequence for the rank-0 Coxeter
....:  group)
....:         out=[[]]
....:     elif v==[] or c[0]!=v[0]:  # The "induction on rank" case.
....:         out=K(c[1:],v)
....:     else:  # The "induction on length" case.  This is provably the right t
....: hing to do.
....:         for k in K(c[1:]+[c[0]],v[1:]):
....:             if k!=[] and k[0]==v[0]:
....:                 out=out+[k[1:]]
....:             else:
....:                 out=out+[[v[0]]+k]
....:     return out
....: 
....: '''
....: 
'\n#This was just a test of how python works\ndef even(n):\n    for i in range(n):\n        if i==(i//2)*2:\n            yield(i)\n'
'\n# An old version (failed in B3):\ndef K(c,v):  # A set of sequences depending on a sortable element v, given by its c-sorting word\n    out = []\n    if c==[]:   # The terminal case (empty sequence for the rank-0 Coxeter group)\n        out=[[]]\n    elif v==[] or c[0]!=v[0]:  # The "induction on rank" case.\n        oldK=K(c[1:],v)\n        #print([c],oldK)\n        for k in oldK:\n            out=out+[[c[0]]+k]\n        out=oldK+out\n    else:  # The "induction on length" case.  This is provably the right thing to do.\n        for k in K(c[1:]+[c[0]],v[1:]):\n            if k!=[] and k[0]==v[0]:\n                out=out+[k[1:]]\n            else:\n                out=out+[[v[0]]+k]\n    return out\n\n# Another old version (also failed in B3)\ndef K(c,v):  # A set of sequences depending on a sortable element v, given by its c-sorting word\n    out = []\n    if c==[]:   \n        out=[[]]\n    elif v==[] or c[0]!=v[0]:\n        oldK=K(c[1:],v)\n        for k in oldK:\n            out=out+[k+[c[0]]]\n        out=oldK+out\n    else:\n        for k in K(c[1:]+[c[0]],v[1:]):\n            if k!=[] and k[0]==v[0]:\n                out=out+[k[1:]]\n            else:\n                out=out+[[v[0]]+k]\n    return out\n\n# An experiment (a pretty dumb one... yields the list [v])\ndef K(c,v):  # A set of sequences depending on a sortable element v, given by its c-sorting word\n    out = []\n    if c==[]:   # The terminal case (empty sequence for the rank-0 Coxeter group)\n        out=[[]]\n    elif v==[] or c[0]!=v[0]:  # The "induction on rank" case.\n        out=K(c[1:],v)\n    else:  # The "induction on length" case.  This is provably the right thing to do.\n        for k in K(c[1:]+[c[0]],v[1:]):\n            if k!=[] and k[0]==v[0]:\n                out=out+[k[1:]]\n            else:\n                out=out+[[v[0]]+k]\n    return out\n\n'
sage: 
sage: A=CartanMatrix(['E',6])
sage: coxeter_number(A)
12
sage: cplus=[0,3,5]
sage: cminus=[1,2,4]
sage: Kbip(cplus,cminus)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In [6], line 1
----> 1 Kbip(cplus,cminus)

TypeError: Kbip() missing 1 required positional argument: 'Coxnum'
sage: Kbip(cplus,cminus,coxeter_number(A))
[[0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5],
 [0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4],
 [0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5],
 [0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4],
 [0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5],
 [0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4],
 [0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5],
 [0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4],
 [0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5],
 [0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4],
 [0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5],
 [0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4],
 [0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5],
 [0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4],
 [0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5,
  1,
  2,
  4,
  0,
  3,
  5],
 [0, 3, 5, 1, 2, 4, 0, 3, 5, 1, 2, 4, 0, 3, 5, 1, 2, 4, 0, 3, 5, 1, 2, 4],
 [0, 3, 5, 1, 2, 4, 0, 3, 5, 1, 2, 4, 0, 3, 5, 1, 2, 4, 0, 3, 5],
 [0, 3, 5, 1, 2, 4, 0, 3, 5, 1, 2, 4, 0, 3, 5, 1, 2, 4],
 [0, 3, 5, 1, 2, 4, 0, 3, 5, 1, 2, 4, 0, 3, 5],
 [0, 3, 5, 1, 2, 4, 0, 3, 5, 1, 2, 4],
 [0, 3, 5, 1, 2, 4, 0, 3, 5],
 [0, 3, 5, 1, 2, 4],
 [0, 3, 5],
 []]
sage: A=CartanMatrix(['A',4])
sage: cplus=[0,2]]
  Cell In [9], line 1
    cplus=[Integer(0),Integer(2)]]
                                 ^
SyntaxError: unmatched ']'

sage: cplus=[0,2]
sage: cminus=[1,3]
sage: Kbip(cplus,cminus,coxeter_number(A))
[[0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2],
 [0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3],
 [0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2],
 [0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3],
 [0, 2, 1, 3, 0, 2, 1, 3, 0, 2],
 [0, 2, 1, 3, 0, 2, 1, 3],
 [0, 2, 1, 3, 0, 2],
 [0, 2, 1, 3],
 [0, 2],
 []]
sage: A=CartanMatrix(['A',2])
sage: cplus=[0]
sage: cminus=[1]
sage: Kbip(cplus,cminus,coxeter_number(A))
[[0, 1, 0, 1, 0], [0, 1, 0, 1], [0, 1, 0], [0, 1], [0], []]
sage: def Kbip(cplus,cminus,Coxnum):
....:     c = cplus+cminus
....:     out = [cplus,[],cminus]
....:     for i in range(Coxnum-1):
....:         out=out+[out[-1]+c,out[-2]+c]
....:     return out
....: 
sage: Kbip(cplus,cminus,coxeter_number(A))
[[0], [], [1], [1, 0, 1], [0, 1], [0, 1, 0, 1], [1, 0, 1, 0, 1]]
sage: A=CartanMatrix(['A',3])
sage: cplus=[0,2]
sage: Kbip(cplus,cminus,coxeter_number(A))
[[0, 2],
 [],
 [1],
 [1, 0, 2, 1],
 [0, 2, 1],
 [0, 2, 1, 0, 2, 1],
 [1, 0, 2, 1, 0, 2, 1],
 [1, 0, 2, 1, 0, 2, 1, 0, 2, 1],
 [0, 2, 1, 0, 2, 1, 0, 2, 1]]
sage: def Kbip(cplus,cminus,Coxnum):
....:     out = [cminus+cplus,cminus,[]]
....:     for i in range(Coxnum-1):
....:         if (i//2)*2=i:  #even
....:             out=out+[out[-1]+cplus]
....:         else:
....:             out=out+[out[-1]+cminus]
....:     return out
....: 
  Cell In [22], line 4
    if (i//Integer(2))*Integer(2)=i:  #even
       ^
SyntaxError: cannot assign to expression here. Maybe you meant '==' instead of '='?

sage: def Kbip(cplus,cminus,Coxnum):
....:     out = [cminus+cplus,cminus,[]]
....:     for i in range(Coxnum-1):
....:         if (i//2)*2==i:  #even
....:             out=out+[out[-1]+cplus]
....:         else:
....:             out=out+[out[-1]+cminus]
....:     return out
....: 
sage: Kbip(cplus,cminus,coxeter_number(A))
[[1, 0, 2], [1], [], [0, 2], [0, 2, 1], [0, 2, 1, 0, 2]]
sage: coxeter_number(A)
4
sage: A
[ 2 -1  0]
[-1  2 -1]
[ 0 -1  2]
sage: cplus=[0,2]
sage: cminus=[1]
sage: A
[ 2 -1  0]
[-1  2 -1]
[ 0 -1  2]
sage: p_lambda_int(B(A,c),(1,1,1),[cplus,[],cminus])
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
Cell In [30], line 1
----> 1 p_lambda_int(B(A,c),(Integer(1),Integer(1),Integer(1)),[cplus,[],cminus])

NameError: name 'c' is not defined
sage: p_lambda_int(B(A,cplus+cminus),(1,1,1),[cplus,[],cminus])
A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray
sage: p_lambda_int(B(A,cplus+cminus),(1,1,1),[cplus,[],cminus,cplus+cminus])
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: p_lambda_int(B(A,cplus+cminus),(1,1,1),[cplus,[],cplus+cminus])
A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray
sage: p_lambda_int(B(A,cplus+cminus),(1,1,1),[cminus+cplus,[],cplus+cminus])
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices
sage: p_lambda_int(B(A,cplus+cminus),(1,1,1),[cplus,[],cplus+cminus])
A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray
sage: p_lambda_int(B(A,cplus+cminus),(1,1,1),[cplus,[],cminus])
A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray
sage: p_lambda_int(B(A,cplus+cminus),(1,1,1),[cplus,[],cminus+cplus])
A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray
sage: p_lambda_int(B(A,cplus+cminus),(1,1,1),[cplus,[],cminus,cminus+cplus])
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['A',3])
sage: cplus=[0,2]
sage: cminus=[1]
sage: c=cplus+cminus
sage: p_lambda_int(B(A,cplus+cminus),(1,1,1),[cplus,[],cminus,cminus+cplus])
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: p_lambda_int(B(A,cplus+cminus),(1,1,1),[[],cminus,cminus+cplus])
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray
sage: p_lambda_int(B(A,cplus+cminus),(1,1,1),[cplus,[],cminus,cminus+cplus])
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: p_lambda_int(B(A,cplus+cminus),(1,1,1),[cplus+cminus,cplus,[],cminus])
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: p_lambda_int(B(A,cplus+cminus),(1,1,1),[cplus+cminus+cplus,cplus+cminus,cp
....: lus,[]])
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[cplus+cminus+cplus,cplus+cminus,
....: cplus,[]])
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[cplus+cminus+cplus,cplus+cminus,
....: cplus])
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray
sage: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[cplus+cminus+cplus,cplus+cminus,
....: cplus,[]])
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[cplus+cminus+cplus,cplus+cminus,
....: []])
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray
sage: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[cplus+cminus+cplus,cplus+cminus,
....: cplus,[]])
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[cplus+cminus+cplus,cplus,[]])
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[cplus+cminus+cplus,cplus])
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays
sage: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[cplus+cminus+cplus,cplus,[]])
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[cplus+cminus+cplus,cplus,cminus]
....: )
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+c,c,[]])
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices
sage: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[cplus+cminus+cplus,cplus,cminus]
....: )
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[cplus+cminus+cplus,cplus,cminus]
....: )
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[cplus+cminus+cplus,cplus+cminus,
....: cplus,[]])
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+cplus,cplus+cminus,cplus,[]])
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+cplus,c,cplus,[]])
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+c,cplus,cplus,[]])
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+c,c,cplus,cminus])
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+c+cplus,c+cplus,[],c])
A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices
sage: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+c,c,cplus,cminus])
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+cplus,c,cplus,[]])
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c,cplus,[]])
A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray
sage: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+cplus,c,cplus,[]])
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['A',4])
sage: cplus=[0,2]
sage: cminus=[1,3]
sage: c=cplus+cminus
sage: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+cplus,c,cplus,[]])
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
sage: 
sage: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+c\,cplus,c,cminus])
  Cell In [75], line 1
    p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+c * BackslashOperator() * ,cplus,c,cminus])
                                                                          ^
SyntaxError: invalid syntax

sage: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+c,cplus,c,cminus])
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
sage: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+cplus,c,cplus,[]])
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
sage: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+c,c+cminus,c,cplus])
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
sage: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+c,c+cminus,c,cplus])
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
sage: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+cplus,c,cplus,[]])
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
sage: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+c,c+cplus,c,cplus])
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 9 vertices
sage: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+cplus,c,cplus,[]])
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
sage: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c,cplus,[],minus])
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
Cell In [83], line 1
----> 1 p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c,cplus,[],minus])

NameError: name 'minus' is not defined
sage: 
sage: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c,cplus,[],cminus])
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
sage: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[cplus,[],cminus,cminus+cplus])
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
sage: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[[],cminus,cminus+cplus,cminus+cp
....: lus+cminus])
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 8 vertices
sage: A=CartanMatrix(['A',3])
....: cplus=[0,2]
....: cminus=[1]
....: c=cplus+cminus
....: 
sage: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+c,c+cplus,c,cplus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+cplus,c,cplus,[]])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c,cplus,[],cminus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[cplus,[],cminus,cminus+cplus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[[],cminus,cminus+cplus,cminus+cp
....: lus+cminus])
....: 
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices
sage: A=CartanMatrix(['A',5])
....: cplus=[0,2,4]
....: cminus=[1,3]
....: c=cplus+cminus
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+c,c+cplus,c,cplus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+cplus,c,cplus,[]])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c,cplus,[],cminus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[cplus,[],cminus,cminus+cplus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[[],cminus,cminus+cplus,cminus+cp
....: lus+cminus])
....: 
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 15 vertices
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 15 vertices
sage: A=CartanMatrix(['A',6])
....: cplus=[0,2,4]
....: cminus=[1,3,6]
....: c=cplus+cminus
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+c,c+cplus,c,cplus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+cplus,c,cplus,[]])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c,cplus,[],cminus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[cplus,[],cminus,cminus+cplus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[[],cminus,cminus+cplus,cminus+cp
....: lus+cminus])
....: 
---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
Cell In [90], line 5
      3 cminus=[Integer(1),Integer(3),Integer(6)]
      4 c=cplus+cminus
----> 5 p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+c,c+cplus,c,cplus])
      6 p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+cplus,c,cplus,[]])
      7 p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c,cplus,[],cminus])

Cell In [1], line 173, in B(A, c)
    171     out[i,i]=Integer(0)
    172     for j in range(i+Integer(1),n):
--> 173         out[c[i],c[j]]=-A[c[i],c[j]]
    174         out[c[j],c[i]]=A[c[j],c[i]]
    175 return out

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/matrix0.pyx:1009, in sage.matrix.matrix0.Matrix.__getitem__ (build/cythonized/sage/matrix/matrix0.c:12110)()
   1007     col += ncols
   1008 if col < 0 or col >= ncols:
-> 1009     raise IndexError("matrix index out of range")
   1010 single_col = 1
   1011 

IndexError: matrix index out of range
sage: A=CartanMatrix(['A',6])
....: cplus=[0,2,4]
....: cminus=[1,3,5]
....: c=cplus+cminus
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+c,c+cplus,c,cplus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+cplus,c,cplus,[]])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c,cplus,[],cminus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[cplus,[],cminus,cminus+cplus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[[],cminus,cminus+cplus,cminus+cp
....: lus+cminus])
....: 
A 6-dimensional polyhedron in QQ^6 defined as the convex hull of 31 vertices
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
A 6-dimensional polyhedron in QQ^6 defined as the convex hull of 26 vertices
sage: A=CartanMatrix(['A',7])
....: cplus=[0,2,4,6]
....: cminus=[1,3,5]
....: c=cplus+cminus
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+c,c+cplus,c,cplus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+cplus,c,cplus,[]])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c,cplus,[],cminus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[cplus,[],cminus,cminus+cplus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[[],cminus,cminus+cplus,cminus+cp
....: lus+cminus])
....: 
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 65 vertices
A 0-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 52 vertices
sage: A=CartanMatrix(['A',8])
....: cplus=[0,2,4,6]
....: cminus=[1,3,5,7]
....: c=cplus+cminus
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+c,c+cplus,c,cplus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+cplus,c,cplus,[]])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c,cplus,[],cminus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[cplus,[],cminus,cminus+cplus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[[],cminus,cminus+cplus,cminus+cp
....: lus+cminus])
....: 
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [93], line 5
      3 cminus=[Integer(1),Integer(3),Integer(5),Integer(7)]
      4 c=cplus+cminus
----> 5 p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+c,c+cplus,c,cplus])
      6 p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+cplus,c,cplus,[]])
      7 p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c,cplus,[],cminus])

Cell In [1], line 125, in p_lambda_int(B, la, seqs)
    124 def p_lambda_int(B, la, seqs):
--> 125     P = p_lambda_faster(B, la, seqs[Integer(0)])
    126     for i in range(Integer(1),len(seqs)-Integer(1)):
    127         P = P.intersection(p_lambda_seq_convexhull(B, la, seqs[i]))

Cell In [1], line 159, in p_lambda_faster(B, la, seq)
    155         P=Ep*Pp
    156     else:
    157         #print("Pp:   ",Pp,Pp.vertices(),Pp.rays(),Pp.lines(),"\n")
    158         #print("Pm:   ",Pm,Pm.vertices(),Pm.rays(),Pm.lines(),"\n\n")
--> 159         P=(Ep*Pp).convex_hull(Em*Pm)
    160     B.mutate(k)
    161 return P

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1312, in Polyhedron_base5.convex_hull(self, other)
   1310 hull_rays = self.rays() + other.rays()
   1311 hull_lines = self.lines() + other.lines()
-> 1312 return self.parent().element_class(self.parent(), [hull_vertices, hull_rays, hull_lines], None)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:70, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
---> 70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:189, in Polyhedron_ppl.set_immutable(self)
    187 if not hasattr(self, '_Vrepresentation'):
    188     try:
--> 189         self._init_Vrepresentation_from_ppl(True)
    190     except TypeError as e:
    191         # Apparently the polyhedron is (no longer) integral.
    192         self._clear_cache()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:300, in Polyhedron_ppl._init_Vrepresentation_from_ppl(self, minimize)
    298     raise TypeError("Vrepresentation of mutable polyhedra cannot be recomputed")
    299 self._Vrepresentation = []
--> 300 gs = self._ppl_polyhedron.minimized_generators()
    301 parent = self.parent()
    302 for g in gs:

File ppl/polyhedron.pyx:340, in ppl.polyhedron.Polyhedron.minimized_generators()

KeyboardInterrupt: 
sage: A=CartanMatrix(['B',2])
....: cplus=[0]
....: cminus=[1]
....: c=cplus+cminus
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+c,c+cplus,c,cplus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+cplus,c,cplus,[]])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c,cplus,[],cminus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[cplus,[],cminus,cminus+cplus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[[],cminus,cminus+cplus,cminus+cp
....: lus+cminus])
....: 
A 2-dimensional polyhedron in QQ^2 defined as the convex hull of 3 vertices
A 0-dimensional polyhedron in QQ^2 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^2 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^2 defined as the convex hull of 1 vertex
A 2-dimensional polyhedron in QQ^2 defined as the convex hull of 3 vertices
sage: A=CartanMatrix(['B',3])
....: cplus=[0,2]
....: cminus=[1]
....: c=cplus+cminus
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+c,c+cplus,c,cplus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+cplus,c,cplus,[]])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c,cplus,[],cminus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[cplus,[],cminus,cminus+cplus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[[],cminus,cminus+cplus,cminus+cp
....: lus+cminus])
....: 
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 4 vertices
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices
sage: A=CartanMatrix(['B',4])
....: cplus=[0,2]
....: cminus=[1,3]
....: c=cplus+cminus
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+c,c+cplus,c,cplus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+cplus,c,cplus,[]])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c,cplus,[],cminus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[cplus,[],cminus,cminus+cplus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[[],cminus,cminus+cplus,cminus+cp
....: lus+cminus])
....: 
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 10 vertices
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 11 vertices
sage: A=CartanMatrix(['B',5])
....: cplus=[0,2,4]
....: cminus=[1,3]
....: c=cplus+cminus
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+c,c+cplus,c,cplus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+cplus,c,cplus,[]])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c,cplus,[],cminus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[cplus,[],cminus,cminus+cplus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[[],cminus,cminus+cplus,cminus+cp
....: lus+cminus])
....: 
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 19 vertices
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 15 vertices
sage: A=CartanMatrix(['B',6])
....: cplus=[0,2,4]
....: cminus=[1,3,5]
....: c=cplus+cminus
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+c,c+cplus,c,cplus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+cplus,c,cplus,[]])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c,cplus,[],cminus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[cplus,[],cminus,cminus+cplus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[[],cminus,cminus+cplus,cminus+cp
....: lus+cminus])
....: 
A 6-dimensional polyhedron in QQ^6 defined as the convex hull of 36 vertices
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
A 6-dimensional polyhedron in QQ^6 defined as the convex hull of 45 vertices
sage: A=CartanMatrix(['B',7])
....: cplus=[0,2,4,6]
....: cminus=[1,3,5]
....: c=cplus+cminus
....: 
sage: A=CartanMatrix(['B',7])
....: cplus=[0,2,4,6]
....: cminus=[1,3,5]
....: c=cplus+cminus
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+c,c+cplus,c,cplus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+cplus,c,cplus,[]])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c,cplus,[],cminus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[cplus,[],cminus,cminus+cplus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[[],cminus,cminus+cplus,cminus+cp
....: lus+cminus])
....: 
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 85 vertices
A 0-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 68 vertices
sage: A=CartanMatrix(['D',4])
....: A
[ 2 -1  0  0]
[-1  2 -1 -1]
[ 0 -1  2  0]
[ 0 -1  0  2]
sage: A=CartanMatrix(['D',4])
....: cplus=[0,2,3]
....: cminus=[1]
....: c=cplus+cminus
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+c,c+cplus,c,cplus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+cplus,c,cplus,[]])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c,cplus,[],cminus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[cplus,[],cminus,cminus+cplus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[[],cminus,cminus+cplus,cminus+cp
....: lus+cminus])
....: 
A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices
sage: A=CartanMatrix(['D',5])
....: 
sage: A
[ 2 -1  0  0  0]
[-1  2 -1  0  0]
[ 0 -1  2 -1 -1]
[ 0  0 -1  2  0]
[ 0  0 -1  0  2]
sage: A=CartanMatrix(['D',5])
....: cplus=[1,3,4]
....: cminus=[0,2]
....: c=cplus+cminus
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+c,c+cplus,c,cplus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+cplus,c,cplus,[]])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c,cplus,[],cminus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[cplus,[],cminus,cminus+cplus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[[],cminus,cminus+cplus,cminus+cp
....: lus+cminus])
....: 
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 10 vertices
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 9 vertices
sage: A=CartanMatrix(['D',6])
....: cplus=[0,2,4,5]
....: cminus=[1,3]
....: c=cplus+cminus
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+c,c+cplus,c,cplus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+cplus,c,cplus,[]])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c,cplus,[],cminus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[cplus,[],cminus,cminus+cplus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[[],cminus,cminus+cplus,cminus+cp
....: lus+cminus])
....: 
A 4-dimensional polyhedron in QQ^6 defined as the convex hull of 15 vertices
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
A 4-dimensional polyhedron in QQ^6 defined as the convex hull of 15 vertices
sage: A=CartanMatrix(['D',7])
....: cplus=[1,3,5,6]
....: cminus=[0,2,4]
....: c=cplus+cminus
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+c,c+cplus,c,cplus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+cplus,c,cplus,[]])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c,cplus,[],cminus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[cplus,[],cminus,cminus+cplus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[[],cminus,cminus+cplus,cminus+cp
....: lus+cminus])
....: 
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 35 vertices
A 0-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 30 vertices
sage: A=CartanMatrix(['E',6])
....: cplus=[0,3,5]
....: cminus=[1,2,4]
....: c=cplus+cminus
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+c,c+cplus,c,cplus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+cplus,c,cplus,[]])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c,cplus,[],cminus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[cplus,[],cminus,cminus+cplus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[[],cminus,cminus+cplus,cminus+cp
....: lus+cminus])
....: 
A 6-dimensional polyhedron in QQ^6 defined as the convex hull of 35 vertices
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
A 6-dimensional polyhedron in QQ^6 defined as the convex hull of 32 vertices
sage: A=CartanMatrix(['E',7])
....: 
sage: A
[ 2  0 -1  0  0  0  0]
[ 0  2  0 -1  0  0  0]
[-1  0  2 -1  0  0  0]
[ 0 -1 -1  2 -1  0  0]
[ 0  0  0 -1  2 -1  0]
[ 0  0  0  0 -1  2 -1]
[ 0  0  0  0  0 -1  2]
sage: A=CartanMatrix(['E',7])
....: cplus=[0,3,5]
....: cminus=[1,2,4,6]
....: c=cplus+cminus
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+c,c+cplus,c,cplus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+cplus,c,cplus,[]])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c,cplus,[],cminus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[cplus,[],cminus,cminus+cplus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[[],cminus,cminus+cplus,cminus+cp
....: lus+cminus])
....: 
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 42 vertices
A 0-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 48 vertices
sage: A=CartanMatrix(['E',8])
....: cplus=[0,3,5,7]
....: cminus=[1,2,4,6]
....: c=cplus+cminus
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+c,c+cplus,c,cplus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+cplus,c,cplus,[]])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c,cplus,[],cminus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[cplus,[],cminus,cminus+cplus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[[],cminus,cminus+cplus,cminus+cp
....: lus+cminus])
....: 
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [112], line 5
      3 cminus=[Integer(1),Integer(2),Integer(4),Integer(6)]
      4 c=cplus+cminus
----> 5 p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+c,c+cplus,c,cplus])
      6 p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+cplus,c,cplus,[]])
      7 p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c,cplus,[],cminus])

Cell In [1], line 125, in p_lambda_int(B, la, seqs)
    124 def p_lambda_int(B, la, seqs):
--> 125     P = p_lambda_faster(B, la, seqs[Integer(0)])
    126     for i in range(Integer(1),len(seqs)-Integer(1)):
    127         P = P.intersection(p_lambda_seq_convexhull(B, la, seqs[i]))

Cell In [1], line 159, in p_lambda_faster(B, la, seq)
    155         P=Ep*Pp
    156     else:
    157         #print("Pp:   ",Pp,Pp.vertices(),Pp.rays(),Pp.lines(),"\n")
    158         #print("Pm:   ",Pm,Pm.vertices(),Pm.rays(),Pm.lines(),"\n\n")
--> 159         P=(Ep*Pp).convex_hull(Em*Pm)
    160     B.mutate(k)
    161 return P

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1312, in Polyhedron_base5.convex_hull(self, other)
   1310 hull_rays = self.rays() + other.rays()
   1311 hull_lines = self.lines() + other.lines()
-> 1312 return self.parent().element_class(self.parent(), [hull_vertices, hull_rays, hull_lines], None)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:70, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
---> 70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:189, in Polyhedron_ppl.set_immutable(self)
    187 if not hasattr(self, '_Vrepresentation'):
    188     try:
--> 189         self._init_Vrepresentation_from_ppl(True)
    190     except TypeError as e:
    191         # Apparently the polyhedron is (no longer) integral.
    192         self._clear_cache()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:300, in Polyhedron_ppl._init_Vrepresentation_from_ppl(self, minimize)
    298     raise TypeError("Vrepresentation of mutable polyhedra cannot be recomputed")
    299 self._Vrepresentation = []
--> 300 gs = self._ppl_polyhedron.minimized_generators()
    301 parent = self.parent()
    302 for g in gs:

File ppl/polyhedron.pyx:340, in ppl.polyhedron.Polyhedron.minimized_generators()

KeyboardInterrupt: 
sage: A=CartanMatrix(['F',4])
....: cplus=[0,2]
....: cminus=[1,3]
....: c=cplus+cminus
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+c,c+cplus,c,cplus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+cplus,c,cplus,[]])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c,cplus,[],cminus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[cplus,[],cminus,cminus+cplus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[[],cminus,cminus+cplus,cminus+cp
....: lus+cminus])
....: 
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 11 vertices
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 12 vertices
sage: A=CartanMatrix(['G',2])
....: cplus=[0]
....: cminus=[1]
....: c=cplus+cminus
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+c,c+cplus,c,cplus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+cplus,c,cplus,[]])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c,cplus,[],cminus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[cplus,[],cminus,cminus+cplus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[[],cminus,cminus+cplus,cminus+cp
....: lus+cminus])
....: 
A 2-dimensional polyhedron in QQ^2 defined as the convex hull of 3 vertices
A 0-dimensional polyhedron in QQ^2 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^2 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^2 defined as the convex hull of 1 vertex
A 2-dimensional polyhedron in QQ^2 defined as the convex hull of 3 vertices
sage: A=CartanMatrix(['E',8])
....: A
[ 2  0 -1  0  0  0  0  0]
[ 0  2  0 -1  0  0  0  0]
[-1  0  2 -1  0  0  0  0]
[ 0 -1 -1  2 -1  0  0  0]
[ 0  0  0 -1  2 -1  0  0]
[ 0  0  0  0 -1  2 -1  0]
[ 0  0  0  0  0 -1  2 -1]
[ 0  0  0  0  0  0 -1  2]
sage: A=CartanMatrix(['E',8])
....: cplus=[0,3,5,7]
....: cminus=[1,2,4,6]
....: c=cplus+cminus
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+c,c+cplus,c,cplus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+cplus,c,cplus,[]])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c,cplus,[],cminus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[cplus,[],cminus,cminus+cplus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[[],cminus,cminus+cplus,cminus+cp
....: lus+cminus])
....: 
A 8-dimensional polyhedron in QQ^8 defined as the convex hull of 112 vertices
A 0-dimensional polyhedron in QQ^8 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^8 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^8 defined as the convex hull of 1 vertex
A 8-dimensional polyhedron in QQ^8 defined as the convex hull of 106 vertices
sage: Determinant(A)
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
Cell In [117], line 1
----> 1 Determinant(A)

NameError: name 'Determinant' is not defined
sage: determinant(A)
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
Cell In [118], line 1
----> 1 determinant(A)

NameError: name 'determinant' is not defined
sage: A.determinant()
1
sage: CartanMatrix(['E',7]).determinant()
2
sage: CartanMatrix(['E',6]).determinant()
3
sage: CartanMatrix(['F',4]).determinant()
1
sage: A=CartanMatrix(['E',8]); B(A,list(range(A.nrows()))).determinant()
....: 
1
sage: A=CartanMatrix(['E',7]); B(A,list(range(A.nrows()))).determinant()
0
sage: A=CartanMatrix(['E',6]); B(A,list(range(A.nrows()))).determinant()
1
sage: A=CartanMatrix(['G',6]); B(A,list(range(A.nrows()))).determinant()
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In [126], line 1
----> 1 A=CartanMatrix(['G',Integer(6)]); B(A,list(range(A.nrows()))).determinant()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/misc/classcall_metaclass.pyx:320, in sage.misc.classcall_metaclass.ClasscallMetaclass.__call__ (build/cythonized/sage/misc/classcall_metaclass.c:3156)()
    318 """
    319 if cls.classcall is not None:
--> 320     return cls.classcall(cls, *args, **kwds)
    321 else:
    322     # Fast version of type.__call__(cls, *args, **kwds)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/combinat/root_system/cartan_matrix.py:318, in CartanMatrix.__classcall_private__(cls, data, index_set, cartan_type, cartan_type_check, borcherds)
    316         data[(reverse[j], reverse[i])] = -l
    317 else:
--> 318     M = matrix(data)
    319     if borcherds:
    320         if not is_borcherds_cartan_matrix(M):

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/constructor.pyx:648, in sage.matrix.constructor.matrix (build/cythonized/sage/matrix/constructor.c:5336)()
    646 """
    647 immutable = kwds.pop('immutable', False)
--> 648 M = MatrixArgs(*args, **kwds).matrix()
    649 if immutable:
    650     M.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/args.pyx:678, in sage.matrix.args.MatrixArgs.matrix (build/cythonized/sage/matrix/args.c:12864)()
    676     True
    677 """
--> 678 self.finalize()
    679 
    680 cdef Matrix M

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/args.pyx:902, in sage.matrix.args.MatrixArgs.finalize (build/cythonized/sage/matrix/args.c:14844)()
    900     self.typ = self.get_type()
    901     if self.typ == MA_ENTRIES_UNKNOWN:
--> 902         raise TypeError(f"unable to convert {self.entries!r} to a matrix")
    903 
    904 # Can we assume a square matrix?

TypeError: unable to convert ['G', 6] to a matrix
sage: A=CartanMatrix(['G',2]); B(A,list(range(A.nrows()))).determinant()
3
sage: A=CartanMatrix(['F',4]); B(A,list(range(A.nrows()))).determinant()
1
sage: A=CartanMatrix(['D',4]); B(A,list(range(A.nrows()))).determinant()
0
sage: A=CartanMatrix(['D',5]); B(A,list(range(A.nrows()))).determinant()
0
sage: A=CartanMatrix(['D',6]); B(A,list(range(A.nrows()))).determinant()
0
sage: A=CartanMatrix(['A',8])
....: cplus=[0,2,4,6]
....: cminus=[1,3,5,7]
....: c=cplus+cminus
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+c,c+cplus,c,cplus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+cplus,c,cplus,[]])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c,cplus,[],cminus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[cplus,[],cminus,cminus+cplus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[[],cminus,cminus+cplus,cminus+cp
....: lus+cminus])
....: 
A 8-dimensional polyhedron in QQ^8 defined as the convex hull of 109 vertices
A 0-dimensional polyhedron in QQ^8 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^8 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^8 defined as the convex hull of 1 vertex
A 8-dimensional polyhedron in QQ^8 defined as the convex hull of 92 vertices
sage: A=CartanMatrix(['B',8])
....: cplus=[0,2,4,6]
....: cminus=[1,3,5,7]
....: c=cplus+cminus
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+c,c+cplus,c,cplus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+cplus,c,cplus,[]])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c,cplus,[],cminus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[cplus,[],cminus,cminus+cplus])
....: p_lambda_int(B(A,cplus+cminus),lam(A,[]),[[],cminus,cminus+cplus,cminus+cp
....: lus+cminus])

^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [133], line 5
      3 cminus=[Integer(1),Integer(3),Integer(5),Integer(7)]
      4 c=cplus+cminus
----> 5 p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+c,c+cplus,c,cplus])
      6 p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c+cplus,c,cplus,[]])
      7 p_lambda_int(B(A,cplus+cminus),lam(A,[]),[c,cplus,[],cminus])

Cell In [1], line 125, in p_lambda_int(B, la, seqs)
    124 def p_lambda_int(B, la, seqs):
--> 125     P = p_lambda_faster(B, la, seqs[Integer(0)])
    126     for i in range(Integer(1),len(seqs)-Integer(1)):
    127         P = P.intersection(p_lambda_seq_convexhull(B, la, seqs[i]))

Cell In [1], line 159, in p_lambda_faster(B, la, seq)
    155         P=Ep*Pp
    156     else:
    157         #print("Pp:   ",Pp,Pp.vertices(),Pp.rays(),Pp.lines(),"\n")
    158         #print("Pm:   ",Pm,Pm.vertices(),Pm.rays(),Pm.lines(),"\n\n")
--> 159         P=(Ep*Pp).convex_hull(Em*Pm)
    160     B.mutate(k)
    161 return P

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1312, in Polyhedron_base5.convex_hull(self, other)
   1310 hull_rays = self.rays() + other.rays()
   1311 hull_lines = self.lines() + other.lines()
-> 1312 return self.parent().element_class(self.parent(), [hull_vertices, hull_rays, hull_lines], None)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:70, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
---> 70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:189, in Polyhedron_ppl.set_immutable(self)
    187 if not hasattr(self, '_Vrepresentation'):
    188     try:
--> 189         self._init_Vrepresentation_from_ppl(True)
    190     except TypeError as e:
    191         # Apparently the polyhedron is (no longer) integral.
    192         self._clear_cache()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:300, in Polyhedron_ppl._init_Vrepresentation_from_ppl(self, minimize)
    298     raise TypeError("Vrepresentation of mutable polyhedra cannot be recomputed")
    299 self._Vrepresentation = []
--> 300 gs = self._ppl_polyhedron.minimized_generators()
    301 parent = self.parent()
    302 for g in gs:

File ppl/polyhedron.pyx:340, in ppl.polyhedron.Polyhedron.minimized_generators()

KeyboardInterrupt: 
sage: A
[ 2 -1  0  0  0  0  0  0]
[-1  2 -1  0  0  0  0  0]
[ 0 -1  2 -1  0  0  0  0]
[ 0  0 -1  2 -1  0  0  0]
[ 0  0  0 -1  2 -1  0  0]
[ 0  0  0  0 -1  2 -1  0]
[ 0  0  0  0  0 -1  2 -1]
[ 0  0  0  0  0  0 -2  2]
sage: list(range(-3,3))
[-3, -2, -1, 0, 1, 2]
sage: 3/2
3/2
sage: 3/2>0
True
sage: 2/3>0
True
sage: reverse([1,2,3])
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
Cell In [139], line 1
----> 1 reverse([Integer(1),Integer(2),Integer(3)])

NameError: name 'reverse' is not defined
sage: reversed([1,2,3])
<list_reverseiterator object at 0x14aac34f0>
sage: list(reversed([1,2,3]))
[3, 2, 1]
sage: [1,2,3].reverse()
sage: _
[3, 2, 1]
sage: def p_lambda_int(B, la, seqs):
....:     P = p_lambda_seq_convexhull(B, la, seqs[0])
....:     for s in seqs:
....:         P = P.intersection(p_lambda_seq_convexhull(B, la, s))
....:         if P.dimension()==0:
....:             break
....:     return P
....: 
sage: A
[ 2 -1  0  0  0  0  0  0]
[-1  2 -1  0  0  0  0  0]
[ 0 -1  2 -1  0  0  0  0]
[ 0  0 -1  2 -1  0  0  0]
[ 0  0  0 -1  2 -1  0  0]
[ 0  0  0  0 -1  2 -1  0]
[ 0  0  0  0  0 -1  2 -1]
[ 0  0  0  0  0  0 -2  2]
sage: c
[0, 2, 4, 6, 1, 3, 5, 7]
sage: p_lambda_int(B(A,c),lam(A,[]),[plusminus(cplus,cminus,5)])
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
Cell In [147], line 1
----> 1 p_lambda_int(B(A,c),lam(A,[]),[plusminus(cplus,cminus,Integer(5))])

NameError: name 'plusminus' is not defined
....:             else:
....:                 out=out+[[v[0]]+k]
....:     return out
....: 
....: # An experiment (a pretty dumb one... yields the list [v])
....: def K(c,v):  # A set of sequences depending on a sortable element v, given
....:  by its c-sorting word
....:     out = []
....:     if c==[]:   # The terminal case (empty sequence for the rank-0 Coxeter
....:  group)
....:         out=[[]]
....:     elif v==[] or c[0]!=v[0]:  # The "induction on rank" case.
....:         out=K(c[1:],v)
....:     else:  # The "induction on length" case.  This is provably the right t
....: hing to do.
....:         for k in K(c[1:]+[c[0]],v[1:]):
....:             if k!=[] and k[0]==v[0]:
....:                 out=out+[k[1:]]
....:             else:
....:                 out=out+[[v[0]]+k]
....:     return out
....: 
....: '''
....: 
'\n#This was just a test of how python works\ndef even(n):\n    for i in range(n):\n        if i==(i//2)*2:\n            yield(i)\n'
'\n# An old version (failed in B3):\ndef K(c,v):  # A set of sequences depending on a sortable element v, given by its c-sorting word\n    out = []\n    if c==[]:   # The terminal case (empty sequence for the rank-0 Coxeter group)\n        out=[[]]\n    elif v==[] or c[0]!=v[0]:  # The "induction on rank" case.\n        oldK=K(c[1:],v)\n        #print([c],oldK)\n        for k in oldK:\n            out=out+[[c[0]]+k]\n        out=oldK+out\n    else:  # The "induction on length" case.  This is provably the right thing to do.\n        for k in K(c[1:]+[c[0]],v[1:]):\n            if k!=[] and k[0]==v[0]:\n                out=out+[k[1:]]\n            else:\n                out=out+[[v[0]]+k]\n    return out\n\n# Another old version (also failed in B3)\ndef K(c,v):  # A set of sequences depending on a sortable element v, given by its c-sorting word\n    out = []\n    if c==[]:   \n        out=[[]]\n    elif v==[] or c[0]!=v[0]:\n        oldK=K(c[1:],v)\n        for k in oldK:\n            out=out+[k+[c[0]]]\n        out=oldK+out\n    else:\n        for k in K(c[1:]+[c[0]],v[1:]):\n            if k!=[] and k[0]==v[0]:\n                out=out+[k[1:]]\n            else:\n                out=out+[[v[0]]+k]\n    return out\n\n# An experiment (a pretty dumb one... yields the list [v])\ndef K(c,v):  # A set of sequences depending on a sortable element v, given by its c-sorting word\n    out = []\n    if c==[]:   # The terminal case (empty sequence for the rank-0 Coxeter group)\n        out=[[]]\n    elif v==[] or c[0]!=v[0]:  # The "induction on rank" case.\n        out=K(c[1:],v)\n    else:  # The "induction on length" case.  This is provably the right thing to do.\n        for k in K(c[1:]+[c[0]],v[1:]):\n            if k!=[] and k[0]==v[0]:\n                out=out+[k[1:]]\n            else:\n                out=out+[[v[0]]+k]\n    return out\n\n'
sage: p_lambda_int(B(A,c),lam(A,[]),[plusminus(cplus,cminus,5)])
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [149], line 1
----> 1 p_lambda_int(B(A,c),lam(A,[]),[plusminus(cplus,cminus,Integer(5))])

Cell In [148], line 125, in p_lambda_int(B, la, seqs)
    124 def p_lambda_int(B, la, seqs):
--> 125     P = p_lambda_seq_convexhull(B, la, seqs[Integer(0)])
    126     for s in seqs:
    127         P = P.intersection(p_lambda_seq_convexhull(B, la, s))

Cell In [148], line 75, in p_lambda_seq_convexhull(B, la, seq)
     73 Pp = P.intersection(Hp)
     74 if Pp.dimension() == rk:
---> 75     new_Ps.append(Ep*Pp)
     76 Pm = P.intersection(Hm)
     77 if Pm.dimension() == rk:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4099, in sage.structure.element.Matrix.__mul__ (build/cythonized/sage/structure/element.c:35219)()
   4097 
   4098         if BOTH_ARE_ELEMENT(cl):
-> 4099             return coercion_model.bin_op(left, right, mul)
   4100 
   4101         cdef long value

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1222, in sage.structure.coerce.CoercionModel.bin_op (build/cythonized/sage/structure/coerce.c:15809)()
   1220 if action is not None:
   1221     if (<Action>action)._is_left:
-> 1222         return (<Action>action)._act_(x, y)
   1223     else:
   1224         return (<Action>action)._act_(y, x)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_actions.pyx:157, in sage.structure.coerce_actions.ActedUponAction._act_ (build/cythonized/sage/structure/coerce_actions.c:8579)()
    155     <... 'sage.structure.coerce_actions.ActedUponAction'>
    156 """
--> 157 return (<Element>x)._acted_upon_(g, not self._is_left)
    158 
    159 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:949, in sage.structure.element.Element._acted_upon_ (build/cythonized/sage/structure/element.c:16495)()
    947     return None
    948 
--> 949 cpdef _acted_upon_(self, x, bint self_on_left) noexcept:
    950     """
    951     Use this method to implement ``self`` acted on by x.

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1450, in Polyhedron_base5._acted_upon_(self, actor, self_on_left)
   1448         raise ValueError("matrices should act on the left")
   1449     else:
-> 1450         return self.linear_transformation(actor)
   1451 else:
   1452     return self.dilation(actor)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1879, in Polyhedron_base5.linear_transformation(self, linear_transf, new_base_ring)
   1873     pref_rep = 'Vrep' if self.n_vertices() <= self.n_inequalities() else 'Hrep'
   1875     return new_parent.element_class(new_parent, [new_vertices, new_rays, new_lines],
   1876                                     [new_inequalities, new_equations],
   1877                                     Vrep_minimal=True, Hrep_minimal=True, pref_rep=pref_rep)
-> 1879 return new_parent.element_class(new_parent, [tuple(new_vertices), tuple(new_rays), tuple(new_lines)], None)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:70, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
---> 70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:189, in Polyhedron_ppl.set_immutable(self)
    187 if not hasattr(self, '_Vrepresentation'):
    188     try:
--> 189         self._init_Vrepresentation_from_ppl(True)
    190     except TypeError as e:
    191         # Apparently the polyhedron is (no longer) integral.
    192         self._clear_cache()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:300, in Polyhedron_ppl._init_Vrepresentation_from_ppl(self, minimize)
    298     raise TypeError("Vrepresentation of mutable polyhedra cannot be recomputed")
    299 self._Vrepresentation = []
--> 300 gs = self._ppl_polyhedron.minimized_generators()
    301 parent = self.parent()
    302 for g in gs:

File ppl/polyhedron.pyx:340, in ppl.polyhedron.Polyhedron.minimized_generators()

KeyboardInterrupt: 
sage: p_lambda_seq_convexhull(B(A,c),lam(A,[]),plusminus(cplus,cminus,1))
A 8-dimensional polyhedron in QQ^8 defined as the convex hull of 11 vertices and 8 rays
sage: p_lambda_seq_convexhull(B(A,c),lam(A,[]),plusminus(cplus,cminus,2))
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [151], line 1
----> 1 p_lambda_seq_convexhull(B(A,c),lam(A,[]),plusminus(cplus,cminus,Integer(2)))

Cell In [148], line 75, in p_lambda_seq_convexhull(B, la, seq)
     73 Pp = P.intersection(Hp)
     74 if Pp.dimension() == rk:
---> 75     new_Ps.append(Ep*Pp)
     76 Pm = P.intersection(Hm)
     77 if Pm.dimension() == rk:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4099, in sage.structure.element.Matrix.__mul__ (build/cythonized/sage/structure/element.c:35219)()
   4097 
   4098         if BOTH_ARE_ELEMENT(cl):
-> 4099             return coercion_model.bin_op(left, right, mul)
   4100 
   4101         cdef long value

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1222, in sage.structure.coerce.CoercionModel.bin_op (build/cythonized/sage/structure/coerce.c:15809)()
   1220 if action is not None:
   1221     if (<Action>action)._is_left:
-> 1222         return (<Action>action)._act_(x, y)
   1223     else:
   1224         return (<Action>action)._act_(y, x)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_actions.pyx:157, in sage.structure.coerce_actions.ActedUponAction._act_ (build/cythonized/sage/structure/coerce_actions.c:8579)()
    155     <... 'sage.structure.coerce_actions.ActedUponAction'>
    156 """
--> 157 return (<Element>x)._acted_upon_(g, not self._is_left)
    158 
    159 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:949, in sage.structure.element.Element._acted_upon_ (build/cythonized/sage/structure/element.c:16495)()
    947     return None
    948 
--> 949 cpdef _acted_upon_(self, x, bint self_on_left) noexcept:
    950     """
    951     Use this method to implement ``self`` acted on by x.

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1450, in Polyhedron_base5._acted_upon_(self, actor, self_on_left)
   1448         raise ValueError("matrices should act on the left")
   1449     else:
-> 1450         return self.linear_transformation(actor)
   1451 else:
   1452     return self.dilation(actor)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1879, in Polyhedron_base5.linear_transformation(self, linear_transf, new_base_ring)
   1873     pref_rep = 'Vrep' if self.n_vertices() <= self.n_inequalities() else 'Hrep'
   1875     return new_parent.element_class(new_parent, [new_vertices, new_rays, new_lines],
   1876                                     [new_inequalities, new_equations],
   1877                                     Vrep_minimal=True, Hrep_minimal=True, pref_rep=pref_rep)
-> 1879 return new_parent.element_class(new_parent, [tuple(new_vertices), tuple(new_rays), tuple(new_lines)], None)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:70, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
---> 70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:189, in Polyhedron_ppl.set_immutable(self)
    187 if not hasattr(self, '_Vrepresentation'):
    188     try:
--> 189         self._init_Vrepresentation_from_ppl(True)
    190     except TypeError as e:
    191         # Apparently the polyhedron is (no longer) integral.
    192         self._clear_cache()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:300, in Polyhedron_ppl._init_Vrepresentation_from_ppl(self, minimize)
    298     raise TypeError("Vrepresentation of mutable polyhedra cannot be recomputed")
    299 self._Vrepresentation = []
--> 300 gs = self._ppl_polyhedron.minimized_generators()
    301 parent = self.parent()
    302 for g in gs:

File ppl/polyhedron.pyx:340, in ppl.polyhedron.Polyhedron.minimized_generators()

KeyboardInterrupt: 
sage: p_lambda_seq_convexhull(B(A,c),lam(A,[]),plusminus(cplus,cminus,1.5))
^C---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:1066, in Polyhedra_base._make_Inequality(self, polyhedron, data)
   1065 try:
-> 1066     obj = self._Inequality_pool.pop()
   1067 except IndexError:

IndexError: pop from empty list

During handling of the above exception, another exception occurred:

KeyboardInterrupt                         Traceback (most recent call last)
Cell In [152], line 1
----> 1 p_lambda_seq_convexhull(B(A,c),lam(A,[]),plusminus(cplus,cminus,RealNumber('1.5')))

Cell In [148], line 83, in p_lambda_seq_convexhull(B, la, seq)
     81 P = Ps[Integer(0)]
     82 for Q in Ps:
---> 83     P = P.convex_hull(Q)
     84 return P

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1312, in Polyhedron_base5.convex_hull(self, other)
   1310 hull_rays = self.rays() + other.rays()
   1311 hull_lines = self.lines() + other.lines()
-> 1312 return self.parent().element_class(self.parent(), [hull_vertices, hull_rays, hull_lines], None)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:70, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
---> 70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:195, in Polyhedron_ppl.set_immutable(self)
    193         raise e
    194 if not hasattr(self, '_Hrepresentation'):
--> 195     self._init_Hrepresentation_from_ppl(True)
    196 self._is_mutable = False

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:344, in Polyhedron_ppl._init_Hrepresentation_from_ppl(self, minimize)
    342 for c in cs:
    343     if c.is_inequality():
--> 344         parent._make_Inequality(self, (c.inhomogeneous_term(),) + c.coefficients())
    345     elif c.is_equality():
    346         parent._make_Equation(self, (c.inhomogeneous_term(),) + c.coefficients())

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:1068, in Polyhedra_base._make_Inequality(self, polyhedron, data)
   1066     obj = self._Inequality_pool.pop()
   1067 except IndexError:
-> 1068     obj = Inequality(self)
   1069 obj._set_data(polyhedron, data)
   1070 return obj

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/representation.py:408, in Hrepresentation.__init__(self, polyhedron_parent)
    396 """
    397 Initializes the PolyhedronRepresentation object.
    398 
   (...)
    405     sage: TestSuite(pr).run(skip='_test_pickling')
    406 """
    407 self._polyhedron_parent = polyhedron_parent
--> 408 self._base_ring = polyhedron_parent.base_ring()
    409 self._vector = polyhedron_parent.Hrepresentation_space()(0)
    410 self._A = polyhedron_parent.ambient_space()(0)

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: p_lambda_seq_convexhull(B(A,c),lam(A,[]),plusminus(cplus,cminus,1))
A 8-dimensional polyhedron in QQ^8 defined as the convex hull of 11 vertices and 8 rays
sage: p_lambda_seq_convexhull(B(A,c),lam(A,[]),plusminus(cplus,cminus,-1))
^C^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [154], line 1
----> 1 p_lambda_seq_convexhull(B(A,c),lam(A,[]),plusminus(cplus,cminus,-Integer(1)))

Cell In [148], line 83, in p_lambda_seq_convexhull(B, la, seq)
     81 P = Ps[Integer(0)]
     82 for Q in Ps:
---> 83     P = P.convex_hull(Q)
     84 return P

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1312, in Polyhedron_base5.convex_hull(self, other)
   1310 hull_rays = self.rays() + other.rays()
   1311 hull_lines = self.lines() + other.lines()
-> 1312 return self.parent().element_class(self.parent(), [hull_vertices, hull_rays, hull_lines], None)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:70, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
---> 70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:189, in Polyhedron_ppl.set_immutable(self)
    187 if not hasattr(self, '_Vrepresentation'):
    188     try:
--> 189         self._init_Vrepresentation_from_ppl(True)
    190     except TypeError as e:
    191         # Apparently the polyhedron is (no longer) integral.
    192         self._clear_cache()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:300, in Polyhedron_ppl._init_Vrepresentation_from_ppl(self, minimize)
    298     raise TypeError("Vrepresentation of mutable polyhedra cannot be recomputed")
    299 self._Vrepresentation = []
--> 300 gs = self._ppl_polyhedron.minimized_generators()
    301 parent = self.parent()
    302 for g in gs:

File ppl/polyhedron.pyx:340, in ppl.polyhedron.Polyhedron.minimized_generators()

KeyboardInterrupt: 
sage: plusminus(cplus,cminus,-1)
[1, 3, 5, 7, 0, 2, 4, 6]
sage: plusminus(cplus,cminus,-0.5)
[1, 3, 5, 7]
sage: p_lambda_seq_convexhull(B(A,c),lam(A,[]),plusminus(cplus,cminus,-0.5))
A 8-dimensional polyhedron in QQ^8 defined as the convex hull of 19 vertices and 8 rays
sage: p_lambda_seq_convexhull(B(A,c),lam(A,[]),plusminus(cplus,cminus,0))
A 8-dimensional polyhedron in QQ^8 defined as the convex hull of 1 vertex and 8 rays
sage: p_lambda_seq_convexhull(B(A,c),lam(A,[]),plusminus(cplus,cminus,0.5))
A 8-dimensional polyhedron in QQ^8 defined as the convex hull of 1 vertex and 8 rays
sage: p_lambda_seq_convexhull(B(A,c),lam(A,[]),plusminus(cplus,cminus,1))
A 8-dimensional polyhedron in QQ^8 defined as the convex hull of 11 vertices and 8 rays
sage: p_lambda_seq_convexhull(B(A,c),lam(A,[]),plusminus(cplus,cminus,1.5))
A 8-dimensional polyhedron in QQ^8 defined as the convex hull of 233 vertices and 8 rays
sage: B(A,c)
[ 0  1  0  0  0  0  0  0]
[-1  0 -1  0  0  0  0  0]
[ 0  1  0  1  0  0  0  0]
[ 0  0 -1  0 -1  0  0  0]
[ 0  0  0  1  0  1  0  0]
[ 0  0  0  0 -1  0 -1  0]
[ 0  0  0  0  0  1  0  1]
[ 0  0  0  0  0  0 -2  0]
sage: A=CartanMatrix(['A',4])
sage: c=[0,2,1,3]
sage: cminus=[1,3]
....: cplus=[0,2]
....: 
sage: c=cplus+cminus
....: 
sage: for v in sortables(A,c):
....:     for seq in Kbip(cplus,cminus,5)
  Cell In [167], line 2
    for seq in Kbip(cplus,cminus,Integer(5))
                                            ^
SyntaxError: expected ':'

sage: for v in sortables(A,c):
....:     P=p_lambda_faster(B(A,c),lam(A,v),[])
....:     for seq in Kbip(cplus,cminus,5):
....:         P.intersection(p_lambda_faster(B(A,c),lam(A,v),seq))
....: 
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 5 vertices and 2 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 8 vertices
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 6 vertices
A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices and 2 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 5 vertices and 2 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 12 vertices
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 8 vertices
A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices and 2 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 7 vertices and 2 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 14 vertices
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 6 vertices
A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 5 vertices and 2 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 7 vertices and 2 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 21 vertices
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 13 vertices
A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices
A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices and 2 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 7 vertices and 2 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 16 vertices
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 8 vertices
A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 7 vertices and 2 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 7 vertices and 2 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 20 vertices
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 9 vertices
A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 4 vertices
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 5 vertices and 2 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 5 vertices and 2 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 16 vertices
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 7 vertices
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 9 vertices
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 7 vertices and 2 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 7 vertices and 2 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 17 vertices
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 5 vertices
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 15 vertices
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 5 vertices and 2 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 7 vertices and 2 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 13 vertices
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices
A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices and 2 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 6 vertices and 2 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 11 vertices
A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 6 vertices
A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices and 2 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 6 vertices and 2 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 9 vertices
A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 6 vertices
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 7 vertices and 2 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 6 vertices and 2 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 14 vertices
A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 13 vertices
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 7 vertices and 2 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 5 vertices and 2 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 15 vertices
A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 17 vertices
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 7 vertices and 2 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 7 vertices and 2 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 9 vertices
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 5 vertices
A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices and 2 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 5 vertices and 2 rays
A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 4 vertices
A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 6 vertices
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 6 vertices and 2 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 5 vertices and 2 rays
A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 6 vertices
A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 14 vertices
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 6 vertices and 2 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 7 vertices and 2 rays
A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 6 vertices
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices
A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 8 vertices
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 6 vertices and 2 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 6 vertices and 2 rays
A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 6 vertices
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 16 vertices
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 5 vertices and 2 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 5 vertices and 2 rays
A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 4 vertices
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 7 vertices
A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 8 vertices
A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices and 2 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 5 vertices and 2 rays
A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 20 vertices
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 7 vertices and 2 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 7 vertices and 2 rays
A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 9 vertices
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 21 vertices
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 7 vertices and 2 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 5 vertices and 2 rays
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 13 vertices
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 4 rays
A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices and 2 rays
A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices and 2 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 4 rays
A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices and 2 rays
A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices and 2 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 4 rays
A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices and 2 rays
A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 4 vertices
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 5 vertices and 2 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 4 rays
A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices and 2 rays
A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 5 vertices
A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices and 2 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 4 rays
A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices and 2 rays
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 14 vertices
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 7 vertices and 2 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 4 rays
A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices and 2 rays
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 6 vertices
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 4 rays
A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices and 2 rays
A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 5 vertices
A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices
A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices and 2 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 4 rays
A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices and 2 rays
A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 5 vertices
A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices
A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices and 2 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 4 rays
A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices and 2 rays
A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 5 vertices
A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices
A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 5 vertices and 2 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 4 rays
A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices and 2 rays
A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 8 vertices
A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices
A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 9 vertices
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 5 vertices and 2 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 4 rays
A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices and 2 rays
A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 5 vertices
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices
A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices and 2 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 4 rays
A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices and 2 rays
A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 11 vertices
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 6 vertices and 2 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 4 rays
A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices and 2 rays
A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices
A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 7 vertices
A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices and 2 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 4 rays
A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices and 2 rays
A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 16 vertices
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 7 vertices and 2 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 4 rays
A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices and 2 rays
A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 8 vertices
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 12 vertices
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 5 vertices and 2 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 4 rays
A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices and 2 rays
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 8 vertices
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 4 rays
A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices and 2 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 4 rays
A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 5 vertices
A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices and 2 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 4 rays
A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 8 vertices
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 5 vertices and 2 rays
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 4 rays
A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 6 vertices
sage: for v in sortables(A,c):
....:     print(v)
....:     P=p_lambda_faster(B(A,c),lam(A,v),[])
....:     for seq in Kbip(cplus,cminus,5):
....:         if (P.intersection(p_lambda_faster(B(A,c),lam(A,v),seq))).dimensio
....: n()==0:
....:             print("yes")
....:         else:
....:             print("no)
  Cell In [169], line 8
    print("no)
          ^
SyntaxError: unterminated string literal (detected at line 8)

sage: for v in sortables(A,c):
....:     print(v)
....:     P=p_lambda_faster(B(A,c),lam(A,v),[])
....:     for seq in Kbip(cplus,cminus,5):
....:         if (P.intersection(p_lambda_faster(B(A,c),lam(A,v),seq))).dimensio
....: n()==0:
....:             print("yes")
....:         else:
....:             print("no")
....: 
[0, 2, 1, 3, 0, 2, 1, 3, 0, 2]
yes
no
no
no
no
no
no
[0, 2, 1, 3, 0, 2, 1, 3, 0]
yes
no
no
no
no
no
no
[0, 2, 1, 3, 0, 2, 1, 3, 2]
yes
no
no
no
no
no
no
[0, 2, 1, 3, 0, 2, 1, 3]
yes
no
no
no
no
no
no
[0, 2, 1, 3, 0, 2, 1, 0]
no
no
no
no
no
no
no
[0, 2, 1, 3, 0, 2, 1]
no
no
no
no
no
no
no
[0, 2, 1, 3, 0, 2, 3]
no
no
no
no
no
no
yes
[0, 2, 1, 3, 0, 2]
no
no
no
no
no
no
yes
[0, 2, 1, 3, 0]
no
no
no
no
no
yes
no
[0, 2, 1, 3, 2, 1, 3]
no
no
no
no
no
no
yes
[0, 2, 1, 3, 2, 1]
no
no
no
no
no
no
yes
[0, 2, 1, 3, 2, 3]
no
no
no
no
no
no
yes
[0, 2, 1, 3, 2]
no
no
no
no
no
no
yes
[0, 2, 1, 3]
no
no
no
no
no
yes
no
[0, 2, 1, 0, 2, 1]
no
no
no
no
no
no
yes
[0, 2, 1, 0, 2]
no
no
no
no
no
no
yes
[0, 2, 1, 0]
no
no
no
no
no
yes
no
[0, 2, 1, 2]
no
no
no
no
no
yes
no
[0, 2, 1]
no
no
no
no
no
yes
no
[0, 2, 3, 2]
no
no
no
no
no
no
no
[0, 2, 3]
no
no
no
no
no
no
no
[0, 2]
no
no
no
no
yes
no
no
[0, 1, 3, 0]
yes
no
no
no
no
yes
yes
[0, 1, 3]
no
no
no
no
no
yes
yes
[0, 1, 0]
no
no
no
no
no
yes
yes
[0, 1]
no
no
no
no
no
yes
no
[0, 3]
no
no
no
no
yes
no
no
[0]
no
no
no
no
yes
no
no
[2, 1, 3, 2, 1, 3]
yes
no
no
no
no
no
no
[2, 1, 3, 2, 1]
no
no
no
no
no
no
no
[2, 1, 3, 2, 3]
yes
no
no
no
no
no
no
[2, 1, 3, 2]
no
no
no
no
no
no
no
[2, 1, 3]
no
no
no
no
no
yes
no
[2, 1, 2]
no
no
no
no
no
yes
yes
[2, 1]
no
no
no
no
no
yes
no
[2, 3, 2]
no
no
no
no
no
no
no
[2, 3]
no
no
no
no
no
no
no
[2]
no
no
no
no
yes
no
no
[1, 3]
yes
no
no
no
yes
yes
yes
[1]
no
no
no
no
yes
yes
yes
[3]
no
no
no
no
yes
no
no
[]
no
no
no
no
yes
no
no
sage: for v in sortables(A,c):
....:     print(v)
....:     P=p_lambda_faster(B(A,c),lam(A,v),[])
....:     for seq in Kbip(cplus,cminus,5):
....:         if (P.intersection(p_lambda_faster(B(A,c),lam(A,v),seq))).dimensio
....: n()==0:
....:             print(seq)
....: 
[0, 2, 1, 3, 0, 2, 1, 3, 0, 2]
[1, 3, 0, 2]
[0, 2, 1, 3, 0, 2, 1, 3, 0]
[1, 3, 0, 2]
[0, 2, 1, 3, 0, 2, 1, 3, 2]
[1, 3, 0, 2]
[0, 2, 1, 3, 0, 2, 1, 3]
[1, 3, 0, 2]
[0, 2, 1, 3, 0, 2, 1, 0]
[0, 2, 1, 3, 0, 2, 1]
[0, 2, 1, 3, 0, 2, 3]
[0, 2, 1, 3, 0, 2, 1, 3]
[0, 2, 1, 3, 0, 2]
[0, 2, 1, 3, 0, 2, 1, 3]
[0, 2, 1, 3, 0]
[0, 2, 1, 3, 0, 2]
[0, 2, 1, 3, 2, 1, 3]
[0, 2, 1, 3, 0, 2, 1, 3]
[0, 2, 1, 3, 2, 1]
[0, 2, 1, 3, 0, 2, 1, 3]
[0, 2, 1, 3, 2, 3]
[0, 2, 1, 3, 0, 2, 1, 3]
[0, 2, 1, 3, 2]
[0, 2, 1, 3, 0, 2, 1, 3]
[0, 2, 1, 3]
[0, 2, 1, 3, 0, 2]
[0, 2, 1, 0, 2, 1]
[0, 2, 1, 3, 0, 2, 1, 3]
[0, 2, 1, 0, 2]
[0, 2, 1, 3, 0, 2, 1, 3]
[0, 2, 1, 0]
[0, 2, 1, 3, 0, 2]
[0, 2, 1, 2]
[0, 2, 1, 3, 0, 2]
[0, 2, 1]
[0, 2, 1, 3, 0, 2]
[0, 2, 3, 2]
[0, 2, 3]
[0, 2]
[0, 2, 1, 3]
[0, 1, 3, 0]
[1, 3, 0, 2]
[0, 2, 1, 3, 0, 2]
[0, 2, 1, 3, 0, 2, 1, 3]
[0, 1, 3]
[0, 2, 1, 3, 0, 2]
[0, 2, 1, 3, 0, 2, 1, 3]
[0, 1, 0]
[0, 2, 1, 3, 0, 2]
[0, 2, 1, 3, 0, 2, 1, 3]
[0, 1]
[0, 2, 1, 3, 0, 2]
[0, 3]
[0, 2, 1, 3]
[0]
[0, 2, 1, 3]
[2, 1, 3, 2, 1, 3]
[1, 3, 0, 2]
[2, 1, 3, 2, 1]
[2, 1, 3, 2, 3]
[1, 3, 0, 2]
[2, 1, 3, 2]
[2, 1, 3]
[0, 2, 1, 3, 0, 2]
[2, 1, 2]
[0, 2, 1, 3, 0, 2]
[0, 2, 1, 3, 0, 2, 1, 3]
[2, 1]
[0, 2, 1, 3, 0, 2]
[2, 3, 2]
[2, 3]
[2]
[0, 2, 1, 3]
[1, 3]
[1, 3, 0, 2]
[0, 2, 1, 3]
[0, 2, 1, 3, 0, 2]
[0, 2, 1, 3, 0, 2, 1, 3]
[1]
[0, 2, 1, 3]
[0, 2, 1, 3, 0, 2]
[0, 2, 1, 3, 0, 2, 1, 3]
[3]
[0, 2, 1, 3]
[]
[0, 2, 1, 3]
sage: for v in sortables(A,c):
....:     print("\n\n",v)
....:     P=p_lambda_faster(B(A,c),lam(A,v),[])
....:     for seq in Kbip(cplus,cminus,5):
....:         if (P.intersection(p_lambda_faster(B(A,c),lam(A,v),seq))).dimensio
....: n()==0:
....:             print(seq)
....: 


 [0, 2, 1, 3, 0, 2, 1, 3, 0, 2]
[1, 3, 0, 2]


 [0, 2, 1, 3, 0, 2, 1, 3, 0]
[1, 3, 0, 2]


 [0, 2, 1, 3, 0, 2, 1, 3, 2]
[1, 3, 0, 2]


 [0, 2, 1, 3, 0, 2, 1, 3]
[1, 3, 0, 2]


 [0, 2, 1, 3, 0, 2, 1, 0]


 [0, 2, 1, 3, 0, 2, 1]


 [0, 2, 1, 3, 0, 2, 3]
[0, 2, 1, 3, 0, 2, 1, 3]


 [0, 2, 1, 3, 0, 2]
[0, 2, 1, 3, 0, 2, 1, 3]


 [0, 2, 1, 3, 0]
[0, 2, 1, 3, 0, 2]


 [0, 2, 1, 3, 2, 1, 3]
[0, 2, 1, 3, 0, 2, 1, 3]


 [0, 2, 1, 3, 2, 1]
[0, 2, 1, 3, 0, 2, 1, 3]


 [0, 2, 1, 3, 2, 3]
[0, 2, 1, 3, 0, 2, 1, 3]


 [0, 2, 1, 3, 2]
[0, 2, 1, 3, 0, 2, 1, 3]


 [0, 2, 1, 3]
[0, 2, 1, 3, 0, 2]


 [0, 2, 1, 0, 2, 1]
[0, 2, 1, 3, 0, 2, 1, 3]


 [0, 2, 1, 0, 2]
[0, 2, 1, 3, 0, 2, 1, 3]


 [0, 2, 1, 0]
[0, 2, 1, 3, 0, 2]


 [0, 2, 1, 2]
[0, 2, 1, 3, 0, 2]


 [0, 2, 1]
[0, 2, 1, 3, 0, 2]


 [0, 2, 3, 2]


 [0, 2, 3]


 [0, 2]
[0, 2, 1, 3]


 [0, 1, 3, 0]
[1, 3, 0, 2]
[0, 2, 1, 3, 0, 2]
[0, 2, 1, 3, 0, 2, 1, 3]


 [0, 1, 3]
[0, 2, 1, 3, 0, 2]
[0, 2, 1, 3, 0, 2, 1, 3]


 [0, 1, 0]
[0, 2, 1, 3, 0, 2]
[0, 2, 1, 3, 0, 2, 1, 3]


 [0, 1]
[0, 2, 1, 3, 0, 2]


 [0, 3]
[0, 2, 1, 3]


 [0]
[0, 2, 1, 3]


 [2, 1, 3, 2, 1, 3]
[1, 3, 0, 2]


 [2, 1, 3, 2, 1]


 [2, 1, 3, 2, 3]
[1, 3, 0, 2]


 [2, 1, 3, 2]


 [2, 1, 3]
[0, 2, 1, 3, 0, 2]


 [2, 1, 2]
[0, 2, 1, 3, 0, 2]
[0, 2, 1, 3, 0, 2, 1, 3]


 [2, 1]
[0, 2, 1, 3, 0, 2]


 [2, 3, 2]


 [2, 3]


 [2]
[0, 2, 1, 3]


 [1, 3]
[1, 3, 0, 2]
[0, 2, 1, 3]
[0, 2, 1, 3, 0, 2]
[0, 2, 1, 3, 0, 2, 1, 3]


 [1]
[0, 2, 1, 3]
[0, 2, 1, 3, 0, 2]
[0, 2, 1, 3, 0, 2, 1, 3]


 [3]
[0, 2, 1, 3]


 []
[0, 2, 1, 3]
sage: for v in sortables(A,c):
....:     print("\n\n",v)
....:     P=p_lambda_faster(B(A,c),lam(A,v),v)
....:     for seq in Kbip(cplus,cminus,5):
....:         if (P.intersection(p_lambda_faster(B(A,c),lam(A,v),v+seq))).dimens
....: ion()==0:
....:             print(seq)
....: 


 [0, 2, 1, 3, 0, 2, 1, 3, 0, 2]
[1, 3, 0, 2]


 [0, 2, 1, 3, 0, 2, 1, 3, 0]


 [0, 2, 1, 3, 0, 2, 1, 3, 2]


 [0, 2, 1, 3, 0, 2, 1, 3]
[0, 2, 1, 3]


 [0, 2, 1, 3, 0, 2, 1, 0]


 [0, 2, 1, 3, 0, 2, 1]


 [0, 2, 1, 3, 0, 2, 3]


 [0, 2, 1, 3, 0, 2]
[1, 3, 0, 2]


 [0, 2, 1, 3, 0]


 [0, 2, 1, 3, 2, 1, 3]


 [0, 2, 1, 3, 2, 1]
[0, 2, 1, 3, 0, 2]


 [0, 2, 1, 3, 2, 3]


 [0, 2, 1, 3, 2]


 [0, 2, 1, 3]
[0, 2, 1, 3]
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [173], line 5
      3 P=p_lambda_faster(B(A,c),lam(A,v),v)
      4 for seq in Kbip(cplus,cminus,Integer(5)):
----> 5     if (P.intersection(p_lambda_faster(B(A,c),lam(A,v),v+seq))).dimension()==Integer(0):
      6         print(seq)

Cell In [148], line 159, in p_lambda_faster(B, la, seq)
    155         P=Ep*Pp
    156     else:
    157         #print("Pp:   ",Pp,Pp.vertices(),Pp.rays(),Pp.lines(),"\n")
    158         #print("Pm:   ",Pm,Pm.vertices(),Pm.rays(),Pm.lines(),"\n\n")
--> 159         P=(Ep*Pp).convex_hull(Em*Pm)
    160     B.mutate(k)
    161 return P

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4099, in sage.structure.element.Matrix.__mul__ (build/cythonized/sage/structure/element.c:35219)()
   4097 
   4098         if BOTH_ARE_ELEMENT(cl):
-> 4099             return coercion_model.bin_op(left, right, mul)
   4100 
   4101         cdef long value

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1222, in sage.structure.coerce.CoercionModel.bin_op (build/cythonized/sage/structure/coerce.c:15809)()
   1220 if action is not None:
   1221     if (<Action>action)._is_left:
-> 1222         return (<Action>action)._act_(x, y)
   1223     else:
   1224         return (<Action>action)._act_(y, x)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_actions.pyx:157, in sage.structure.coerce_actions.ActedUponAction._act_ (build/cythonized/sage/structure/coerce_actions.c:8579)()
    155     <... 'sage.structure.coerce_actions.ActedUponAction'>
    156 """
--> 157 return (<Element>x)._acted_upon_(g, not self._is_left)
    158 
    159 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:949, in sage.structure.element.Element._acted_upon_ (build/cythonized/sage/structure/element.c:16495)()
    947     return None
    948 
--> 949 cpdef _acted_upon_(self, x, bint self_on_left) noexcept:
    950     """
    951     Use this method to implement ``self`` acted on by x.

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1450, in Polyhedron_base5._acted_upon_(self, actor, self_on_left)
   1448         raise ValueError("matrices should act on the left")
   1449     else:
-> 1450         return self.linear_transformation(actor)
   1451 else:
   1452     return self.dilation(actor)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1879, in Polyhedron_base5.linear_transformation(self, linear_transf, new_base_ring)
   1873     pref_rep = 'Vrep' if self.n_vertices() <= self.n_inequalities() else 'Hrep'
   1875     return new_parent.element_class(new_parent, [new_vertices, new_rays, new_lines],
   1876                                     [new_inequalities, new_equations],
   1877                                     Vrep_minimal=True, Hrep_minimal=True, pref_rep=pref_rep)
-> 1879 return new_parent.element_class(new_parent, [tuple(new_vertices), tuple(new_rays), tuple(new_lines)], None)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:70, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
---> 70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:195, in Polyhedron_ppl.set_immutable(self)
    193         raise e
    194 if not hasattr(self, '_Hrepresentation'):
--> 195     self._init_Hrepresentation_from_ppl(True)
    196 self._is_mutable = False

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:344, in Polyhedron_ppl._init_Hrepresentation_from_ppl(self, minimize)
    342 for c in cs:
    343     if c.is_inequality():
--> 344         parent._make_Inequality(self, (c.inhomogeneous_term(),) + c.coefficients())
    345     elif c.is_equality():
    346         parent._make_Equation(self, (c.inhomogeneous_term(),) + c.coefficients())

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:1069, in Polyhedra_base._make_Inequality(self, polyhedron, data)
   1067 except IndexError:
   1068     obj = Inequality(self)
-> 1069 obj._set_data(polyhedron, data)
   1070 return obj

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/representation.py:439, in Hrepresentation._set_data(self, polyhedron, data)
    436 if len(data) != self._vector.degree():
    437     raise ValueError('H-representation data requires a list of length ambient_dim+1')
--> 439 self._vector[:] = data
    440 self._A[:] = data[1:]
    441 self._b = self._base_ring(data[0])

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/modules/free_module_element.pyx:1893, in sage.modules.free_module_element.FreeModuleElement.__setitem__ (build/cythonized/sage/modules/free_module_element.c:20047)()
   1891 if isinstance(i, slice):
   1892     PySlice_GetIndicesEx(i, d, &start, &stop, &step, &slicelength)
-> 1893     values = [R(x) for x in value]
   1894     if len(values) != slicelength:
   1895         raise IndexError("slice assignment would change dimension")

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/parent.pyx:901, in sage.structure.parent.Parent.__call__ (build/cythonized/sage/structure/parent.c:12658)()
    899 if mor is not None:
    900     if no_extra_args:
--> 901         return mor._call_(x)
    902     else:
    903         return mor._call_with_args(x, args, kwds)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:158, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_ (build/cythonized/sage/structure/coerce_maps.c:6834)()
    156 cdef Parent C = self._codomain
    157 try:
--> 158     return C._element_constructor(x)
    159 except Exception:
    160     if print_warnings:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/rings/rational.pyx:536, in sage.rings.rational.Rational.__init__ (build/cythonized/sage/rings/rational.cpp:14305)()
    534     """
    535     if x is not None:
--> 536         self.__set_value(x, base)
    537 
    538 def __reduce__(self):

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/rings/rational.pyx:670, in sage.rings.rational.Rational._Rational__set_value (build/cythonized/sage/rings/rational.cpp:16246)()
    668         raise TypeError("unable to convert {!r} to a rational".format(x))
    669 
--> 670 elif isinstance(x, fractions.Fraction):
    671     mpz_set(mpq_numref(self.value), (<integer.Integer> integer.Integer(x.numerator)).value)
    672     mpz_set(mpq_denref(self.value), (<integer.Integer> integer.Integer(x.denominator)).value)

File <frozen abc>:117, in __instancecheck__(cls, instance)

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: for v in sortables(A,c):
....:     print("\n\n",v)
....:     P=p_lambda_faster(B(A,c),lam(A,v),v)
....:     for seq in Kbip(cplus,cminus,5):
....:         if (P.intersection(p_lambda_faster(B(A,c),lam(A,v),seq+v))).dimens
....: ion()==0:
....:             print(seq)
....: 


 [0, 2, 1, 3, 0, 2, 1, 3, 0, 2]
[0, 2, 1, 3]


 [0, 2, 1, 3, 0, 2, 1, 3, 0]
[0, 2, 1, 3]


 [0, 2, 1, 3, 0, 2, 1, 3, 2]
[0, 2, 1, 3]


 [0, 2, 1, 3, 0, 2, 1, 3]
[0, 2, 1, 3]
[0, 2, 1, 3, 0, 2]


 [0, 2, 1, 3, 0, 2, 1, 0]
[0, 2, 1, 3]
[0, 2, 1, 3, 0, 2]


 [0, 2, 1, 3, 0, 2, 1]
[0, 2, 1, 3]


 [0, 2, 1, 3, 0, 2, 3]
[0, 2, 1, 3]


 [0, 2, 1, 3, 0, 2]
[0, 2]
[0, 2, 1, 3]


 [0, 2, 1, 3, 0]
[0, 2, 1, 3]


 [0, 2, 1, 3, 2, 1, 3]
[0, 2, 1, 3]


 [0, 2, 1, 3, 2, 1]
[0, 2, 1, 3]


 [0, 2, 1, 3, 2, 3]
[0, 2]
[0, 2, 1, 3]


 [0, 2, 1, 3, 2]
[0, 2, 1, 3]


 [0, 2, 1, 3]
[1, 3]
[0, 2, 1, 3]


 [0, 2, 1, 0, 2, 1]
[0, 2, 1, 3]


 [0, 2, 1, 0, 2]
[0, 2, 1, 3]


 [0, 2, 1, 0]
[1, 3]
[0, 2, 1, 3]


 [0, 2, 1, 2]
[0, 2, 1, 3]


 [0, 2, 1]
[0, 2, 1, 3]


 [0, 2, 3, 2]
[0, 2, 1, 3]


 [0, 2, 3]
[0, 2, 1, 3]


 [0, 2]
[0, 2, 1, 3]


 [0, 1, 3, 0]
[0, 2, 1, 3]


 [0, 1, 3]
[0, 2, 1, 3]


 [0, 1, 0]
[0, 2, 1, 3]


 [0, 1]
[0, 2, 1, 3]


 [0, 3]
[0, 2, 1, 3]


 [0]
[0, 2, 1, 3]


 [2, 1, 3, 2, 1, 3]
[0, 2, 1, 3]


 [2, 1, 3, 2, 1]
[0, 2, 1, 3]


 [2, 1, 3, 2, 3]
[0, 2, 1, 3]


 [2, 1, 3, 2]
[0, 2, 1, 3]


 [2, 1, 3]
[0, 2, 1, 3]


 [2, 1, 2]
[0, 2, 1, 3]


 [2, 1]
[0, 2, 1, 3]


 [2, 3, 2]
[0, 2, 1, 3]


 [2, 3]
[0, 2, 1, 3]


 [2]
[0, 2, 1, 3]


 [1, 3]
[0, 2, 1, 3]


 [1]
[0, 2, 1, 3]


 [3]
[0, 2, 1, 3]


 []
[0, 2, 1, 3]
sage: A=CartanMatrix(['A',5])
sage: cplus=[0,2,4]
sage: cminus=[1,3]
sage: c=cplus+cminus
sage: for v in sortables(A,c):
....:     print("\n\n",v)
....:     P=p_lambda_faster(B(A,c),lam(A,v),v)
....:     for seq in Kbip(cplus,cminus,5):
....:         if (P.intersection(p_lambda_faster(B(A,c),lam(A,v),seq+v))).dimens
....: ion()==0:
....:             print(seq)
....: 


 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
[0, 2, 4, 1, 3]


 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1]
[0, 2, 4, 1, 3]


 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 3]
[0, 2, 4, 1, 3]


 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[0, 2, 4, 1, 3]


 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 1]
[0, 2, 4, 1, 3]


 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2]
[0, 2, 4, 1, 3]


 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 4]


 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0]
[0, 2, 4, 1, 3]


 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 3]
[0, 2, 4, 1, 3]


 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4]
[0, 2, 4, 1, 3]


 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2]


 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 4]
[0, 2, 4, 1, 3]


 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
[0, 2, 4, 1, 3]


 [0, 2, 4, 1, 3, 0, 2, 4, 1, 0]
[0, 2, 4, 1, 3]


 [0, 2, 4, 1, 3, 0, 2, 4, 1]
[0, 2, 4]
[0, 2, 4, 1, 3]


 [0, 2, 4, 1, 3, 0, 2, 4, 3, 4]
[0, 2, 4, 1, 3]


 [0, 2, 4, 1, 3, 0, 2, 4, 3]
[0, 2, 4]
[0, 2, 4, 1, 3]


 [0, 2, 4, 1, 3, 0, 2, 4]
[0, 2, 4, 1, 3]


 [0, 2, 4, 1, 3, 0, 2, 1, 3, 0, 2]


 [0, 2, 4, 1, 3, 0, 2, 1, 3, 0]


 [0, 2, 4, 1, 3, 0, 2, 1, 3, 2]
[0, 2, 4, 1, 3]


 [0, 2, 4, 1, 3, 0, 2, 1, 3]
[0, 2, 4, 1, 3]


 [0, 2, 4, 1, 3, 0, 2, 1, 0]


 [0, 2, 4, 1, 3, 0, 2, 1]
[0, 2, 4, 1, 3]


 [0, 2, 4, 1, 3, 0, 2, 3]
[0, 2, 4, 1, 3]


 [0, 2, 4, 1, 3, 0, 2]
[0, 2, 4, 1, 3]


 [0, 2, 4, 1, 3, 0, 4]


 [0, 2, 4, 1, 3, 0]
[0, 2, 4, 1, 3]


 [0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4]


 [0, 2, 4, 1, 3, 2, 4, 1, 3, 2]
[0, 2, 4, 1, 3]


 [0, 2, 4, 1, 3, 2, 4, 1, 3, 4]


 [0, 2, 4, 1, 3, 2, 4, 1, 3]
[0, 2, 4, 1, 3]


 [0, 2, 4, 1, 3, 2, 4, 1]
[0, 2, 4, 1, 3]


 [0, 2, 4, 1, 3, 2, 4, 3, 4]


 [0, 2, 4, 1, 3, 2, 4, 3]
[0, 2, 4, 1, 3]


 [0, 2, 4, 1, 3, 2, 4]
[0, 2, 4, 1, 3]


 [0, 2, 4, 1, 3, 2, 1, 3]


 [0, 2, 4, 1, 3, 2, 1]


 [0, 2, 4, 1, 3, 2, 3]


 [0, 2, 4, 1, 3, 2]


 [0, 2, 4, 1, 3, 4]
[0, 2, 4, 1, 3]


 [0, 2, 4, 1, 3]
[0, 2, 4, 1, 3]


 [0, 2, 4, 1, 0, 2, 1]
[0, 2, 4, 1, 3]


 [0, 2, 4, 1, 0, 2]
[0, 2, 4, 1, 3]


 [0, 2, 4, 1, 0]
[0, 2, 4, 1, 3]


 [0, 2, 4, 1, 2]


 [0, 2, 4, 1]
[0, 2, 4, 1, 3]


 [0, 2, 4, 3, 2, 4, 3]
[0, 2, 4, 1, 3]


 [0, 2, 4, 3, 2, 4]
[0, 2, 4, 1, 3]


 [0, 2, 4, 3, 2]


 [0, 2, 4, 3, 4]
[0, 2, 4, 1, 3]


 [0, 2, 4, 3]
[0, 2, 4, 1, 3]


 [0, 2, 4]
[0, 2, 4, 1, 3]


 [0, 2, 1, 3, 0, 2, 1, 3, 0, 2]
[0, 2, 4, 1, 3]


 [0, 2, 1, 3, 0, 2, 1, 3, 0]
[0, 2, 4, 1, 3]


 [0, 2, 1, 3, 0, 2, 1, 3, 2]
[0, 2, 4, 1, 3]


 [0, 2, 1, 3, 0, 2, 1, 3]
[0, 2, 4, 1, 3]


 [0, 2, 1, 3, 0, 2, 1, 0]


 [0, 2, 1, 3, 0, 2, 1]


 [0, 2, 1, 3, 0, 2, 3]
[0, 2, 4, 1, 3]


 [0, 2, 1, 3, 0, 2]


 [0, 2, 1, 3, 0]


 [0, 2, 1, 3, 2, 1, 3]
[0, 2, 4, 1, 3]


 [0, 2, 1, 3, 2, 1]
[0, 2, 4, 1, 3]


 [0, 2, 1, 3, 2, 3]
[0, 2, 4]
[0, 2, 4, 1, 3]


 [0, 2, 1, 3, 2]
[0, 2, 4, 1, 3]


 [0, 2, 1, 3]
[0, 2, 4, 1, 3]


 [0, 2, 1, 0, 2, 1]
[0, 2, 4, 1, 3]


 [0, 2, 1, 0, 2]
[0, 2, 4, 1, 3]


 [0, 2, 1, 0]


 [0, 2, 1, 2]
[0, 2, 4, 1, 3]


 [0, 2, 1]
[0, 2, 4, 1, 3]


 [0, 2, 3, 2]
[0, 2, 4, 1, 3]


 [0, 2, 3]
[0, 2, 4, 1, 3]


 [0, 2]
[0, 2, 4, 1, 3]


 [0, 4, 1, 3, 0, 4]


 [0, 4, 1, 3, 0]


 [0, 4, 1, 3, 4]


 [0, 4, 1, 3]


 [0, 4, 1, 0]


 [0, 4, 1]


 [0, 4, 3, 4]


 [0, 4, 3]


 [0, 4]


 [0, 1, 3, 0]
[0, 2, 4, 1, 3]


 [0, 1, 3]
[0, 2, 4, 1, 3]


 [0, 1, 0]
[0, 2, 4, 1, 3]


 [0, 1]
[0, 2, 4, 1, 3]


 [0, 3]
[0, 2, 4, 1, 3]


 [0]
[0, 2, 4, 1, 3]


 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4]
[0, 2, 4, 1, 3]


 [2, 4, 1, 3, 2, 4, 1, 3, 2]
[0, 2, 4, 1, 3]


 [2, 4, 1, 3, 2, 4, 1, 3, 4]
[0, 2, 4, 1, 3]


 [2, 4, 1, 3, 2, 4, 1, 3]
[0, 2, 4, 1, 3]


 [2, 4, 1, 3, 2, 4, 1]
[0, 2, 4, 1, 3]


 [2, 4, 1, 3, 2, 4, 3, 4]


 [2, 4, 1, 3, 2, 4, 3]


 [2, 4, 1, 3, 2, 4]


 [2, 4, 1, 3, 2, 1, 3]
[0, 2, 4, 1, 3]


 [2, 4, 1, 3, 2, 1]
[0, 2, 4]
[0, 2, 4, 1, 3]


 [2, 4, 1, 3, 2, 3]
[0, 2, 4, 1, 3]


 [2, 4, 1, 3, 2]
[0, 2, 4, 1, 3]


 [2, 4, 1, 3, 4]


 [2, 4, 1, 3]
[0, 2, 4, 1, 3]


 [2, 4, 1, 2]
[0, 2, 4, 1, 3]


 [2, 4, 1]
[0, 2, 4, 1, 3]


 [2, 4, 3, 2, 4, 3]
[0, 2, 4, 1, 3]


 [2, 4, 3, 2, 4]
[0, 2, 4, 1, 3]


 [2, 4, 3, 2]
[0, 2, 4, 1, 3]


 [2, 4, 3, 4]


 [2, 4, 3]
[0, 2, 4, 1, 3]


 [2, 4]
[0, 2, 4, 1, 3]


 [2, 1, 3, 2, 1, 3]


 [2, 1, 3, 2, 1]


 [2, 1, 3, 2, 3]


 [2, 1, 3, 2]


 [2, 1, 3]


 [2, 1, 2]


 [2, 1]


 [2, 3, 2]


 [2, 3]


 [2]


 [4, 1, 3, 4]
[0, 2, 4, 1, 3]


 [4, 1, 3]
[0, 2, 4, 1, 3]


 [4, 1]
[0, 2, 4, 1, 3]


 [4, 3, 4]
[0, 2, 4, 1, 3]


 [4, 3]
[0, 2, 4, 1, 3]


 [4]
[0, 2, 4, 1, 3]


 [1, 3]
[0, 2, 4, 1, 3]


 [1]
[0, 2, 4, 1, 3]


 [3]
[0, 2, 4, 1, 3]


 []
[0, 2, 4, 1, 3]
sage: B=Matrix([[0,-2,2],[2,0,-2],[-2,2,0]])
sage: B
[ 0 -2  2]
[ 2  0 -2]
[-2  2  0]
sage: B.mutate(1)
sage: B
[ 0  2 -2]
[-2  0  2]
[ 2 -2  0]
sage: B.mutate(1)
sage: B
[ 0 -2  2]
[ 2  0 -2]
[-2  2  0]
sage: p_lambda_int(B,(1,1,1),[[]])
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 lines
sage: p_lambda_int(B,(1,1,1),[[]]).vertices()
(A vertex at (0, 0, 3),)
sage: p_lambda_int(B,(1,1,1),[[]]).lines()
(A line in the direction (0, 1, -1), A line in the direction (1, 0, -1))
sage: p_lambda_int(B,(1,1,1),[[],[1],[2],[3]]).lines()
---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
Cell In [189], line 1
----> 1 p_lambda_int(B,(Integer(1),Integer(1),Integer(1)),[[],[Integer(1)],[Integer(2)],[Integer(3)]]).lines()

Cell In [148], line 127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_seq_convexhull(B, la, seqs[Integer(0)])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_seq_convexhull(B, la, s))
    128     if P.dimension()==Integer(0):
    129         break

Cell In [148], line 63, in p_lambda_seq_convexhull(B, la, seq)
     61 B = block_matrix([[B,matrix(la).transpose()]])
     62 for k in seq:
---> 63     B.mutate(k)
     64 B, la  = B[:,:-Integer(1)], B[:,-Integer(1)] 
     65 Ps = [Polyhedron(rays=B.columns(),base_ring=QQ).translation(la)]

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/matrix0.pyx:3643, in sage.matrix.matrix0.Matrix.mutate (build/cythonized/sage/matrix/matrix0.c:33715)()
   3641 
   3642         if k < 0 or k >= self._nrows or k >= self._ncols:
-> 3643             raise IndexError("The mutation index is invalid")
   3644 
   3645         pairs = self.nonzero_positions()

IndexError: The mutation index is invalid
sage: p_lambda_int(B,(1,1,1),[[],[0],[1],[2]]).lines()
(A line in the direction (0, 1, -1), A line in the direction (1, 0, -1))
sage: p_lambda_int(B,(1,1,1),[[],[0],[1],[2]])
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 lines
sage: p_lambda_int(B,(1,1,1),[[],[0],[1],[2],[0,1],[0,2],[1,0],[1,2],[2,0],[2,1]
....: ])
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 lines
sage: print("  %r.2  " % (0,49375))
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In [193], line 1
----> 1 print("  %r.2  " % (Integer(0),Integer(49375)))  

TypeError: not all arguments converted during string formatting
sage: print("  %r.2  " % (0.49375))
  0.493750000000000.2  
sage: print("  %.2f  " % (0.49375))
  0.49  
sage: print("  %.2f  " % (0.49775))
  0.50  
sage: print("  %2.2f  " % (0.49775))
  0.50  
sage: print("  %2.2f  " % (30.49775))
  30.50  
sage: print("  %2.2f  " % (300.49775))
  300.50  
sage: A=CartanMatrix(['D',5])
....: 
sage: A
[ 2 -1  0  0  0]
[-1  2 -1  0  0]
[ 0 -1  2 -1 -1]
[ 0  0 -1  2  0]
[ 0  0 -1  0  2]
sage: A=CartanMatrix(['D',5])
....: cplus=[0,2]
....: cminus=[1,3,4]
....: c=cplus+cminus
....: from time import perf_counter
....: num=0
....: first=perf_counter()
....: for v in parasortables(A,c):
....:     num+=1
....:     start=perf_counter()
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbip(cplus,cminus,14))
....:     end=perf_counter()
....:     if P.dimension()!=0:
....:         print("ALERT: FAILURE")
....:     else:
....:         print(num," Time for this step: ",end-start," Time in all: ",end-f
....: irst)
....: 
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In [202], line 11
      9 num+=Integer(1)
     10 start=perf_counter()
---> 11 P=p_lambda_int(B(A,c),lam(A,v),Kbip(cplus,cminus,Integer(14)))
     12 end=perf_counter()
     13 if P.dimension()!=Integer(0):

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/matrix0.pyx:2379, in sage.matrix.matrix0.Matrix.__call__ (build/cythonized/sage/matrix/matrix0.c:22895)()
   2377     """
   2378     from sage.matrix.constructor import matrix
-> 2379     return matrix(self.nrows(), self.ncols(), [e(*args, **kwargs) for e in self.list()])
   2380 
   2381 ###################################################

TypeError: 'sage.rings.integer.Integer' object is not callable
sage: def B(A,c):  # Cartan matrix (assumes nonpositive off-diagonal entries) an
....: d Coxeter element (a list)
....:     n=A.nrows()
....:     out=Matrix([[0]*n]*n)
....:     #print(out)
....:     for i in range(n):
....:         out[i,i]=0
....:         for j in range(i+1,n):
....:             out[c[i],c[j]]=-A[c[i],c[j]]
....:             out[c[j],c[i]]=A[c[j],c[i]]
....:     return out
....: 
sage: A=CartanMatrix(['D',5])
....: cplus=[0,2]
....: cminus=[1,3,4]
....: c=cplus+cminus
....: from time import perf_counter
....: num=0
....: first=perf_counter()
....: for v in parasortables(A,c):
....:     num+=1
....:     start=perf_counter()
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbip(cplus,cminus,14))
....:     end=perf_counter()
....:     if P.dimension()!=0:
....:         print("ALERT: FAILURE")
....:     else:
....:         print(num," Time for this step: ",end-start," Time in all: ",end-f
....: irst)
....: 
1  Time for this step:  0.11302633304148912  Time in all:  0.11436808301368728
2  Time for this step:  0.588790790992789  Time in all:  0.7032018330064602
3  Time for this step:  0.188698582991492  Time in all:  0.8921382499975152
4  Time for this step:  0.5436134159681387  Time in all:  1.4357838329742663
5  Time for this step:  0.3699931249720976  Time in all:  1.8058759999694303
6  Time for this step:  0.4522904159966856  Time in all:  2.2581998329842463
7  Time for this step:  0.47955624997848645  Time in all:  2.7378785829641856
8  Time for this step:  0.4830848749843426  Time in all:  3.2210092499735765
9  Time for this step:  0.39580333401681855  Time in all:  3.616860167006962
10  Time for this step:  0.30438191699795425  Time in all:  3.9213604999822564
11  Time for this step:  0.37277316697873175  Time in all:  4.294192041968927
12  Time for this step:  0.2889383330475539  Time in all:  4.583209083008114
13  Time for this step:  0.3756850830395706  Time in all:  4.958932458015624
14  Time for this step:  0.3225680000032298  Time in all:  5.281538208015263
15  Time for this step:  0.10920466698007658  Time in all:  5.390896166965831
16  Time for this step:  0.47555345797445625  Time in all:  5.866482957964763
17  Time for this step:  0.20557500002905726  Time in all:  6.072177833004389
18  Time for this step:  0.5611404579831287  Time in all:  6.633350332966074
19  Time for this step:  0.37724533397704363  Time in all:  7.010682416963391
20  Time for this step:  0.5235057909740135  Time in all:  7.534229457960464
21  Time for this step:  0.5933549999608658  Time in all:  8.127680166973732
22  Time for this step:  0.4847569999983534  Time in all:  8.612472541979514
23  Time for this step:  0.39047225000103936  Time in all:  9.00298795796698
24  Time for this step:  0.29711333400337026  Time in all:  9.300220542005263
25  Time for this step:  0.36767458298709244  Time in all:  9.667937457968947
26  Time for this step:  0.292211166000925  Time in all:  9.960298207995947
27  Time for this step:  0.36971520801307634  Time in all:  10.330050332995597
28  Time for this step:  0.31581200001528487  Time in all:  10.645903832977638
29  Time for this step:  0.16388416703557596  Time in all:  10.809896624996327
30  Time for this step:  0.2387873330153525  Time in all:  11.048719957994763
31  Time for this step:  0.2918408749974333  Time in all:  11.340599332994316
32  Time for this step:  0.2203173330053687  Time in all:  11.560995583015028
33  Time for this step:  0.26576174999354407  Time in all:  11.826793042011559
34  Time for this step:  0.17088254203554243  Time in all:  11.997808250016533
35  Time for this step:  0.2074375000083819  Time in all:  12.205283624993172
36  Time for this step:  0.20794975000899285  Time in all:  12.413320833002217
37  Time for this step:  0.22819737502140924  Time in all:  12.641562125005294
38  Time for this step:  0.27935141703346744  Time in all:  12.92094854201423
39  Time for this step:  0.29792687500594184  Time in all:  13.218955957971048
40  Time for this step:  0.2967301669996232  Time in all:  13.515728416969068
41  Time for this step:  0.30321016698144376  Time in all:  13.81904749997193
42  Time for this step:  0.29473837499972433  Time in all:  14.113823124964256
43  Time for this step:  0.2363092919695191  Time in all:  14.350173999962863
44  Time for this step:  0.0955987079651095  Time in all:  14.44589808298042
45  Time for this step:  0.10851754195755348  Time in all:  14.554454666969832
46  Time for this step:  0.14571741700638086  Time in all:  14.700259000004735
47  Time for this step:  0.13299308402929455  Time in all:  14.833286417007912
48  Time for this step:  0.14371229195967317  Time in all:  14.977123499964364
49  Time for this step:  0.12653208302799612  Time in all:  15.103696500009391
50  Time for this step:  0.1278279999969527  Time in all:  15.231601457984652
51  Time for this step:  0.1128440840402618  Time in all:  15.344482042011805
52  Time for this step:  0.18438733305083588  Time in all:  15.528962875017896
53  Time for this step:  0.2241924999980256  Time in all:  15.753195333003532
54  Time for this step:  0.2245747089618817  Time in all:  15.977847791975364
55  Time for this step:  0.18418824998661876  Time in all:  16.162077999964822
56  Time for this step:  0.09102720796363428  Time in all:  16.253358832967933
57  Time for this step:  0.17850799998268485  Time in all:  16.431903499993496
58  Time for this step:  0.0901551250135526  Time in all:  16.522134792001452
59  Time for this step:  0.06303370802197605  Time in all:  16.58520520798629
60  Time for this step:  0.10095708299195394  Time in all:  16.686258999980055
61  Time for this step:  0.09754170797532424  Time in all:  16.783836374990642
62  Time for this step:  0.10246775002451614  Time in all:  16.88639170798706
63  Time for this step:  0.07381450000684708  Time in all:  16.960243083012756
64  Time for this step:  1.0412591669592075  Time in all:  18.001539999968372
65  Time for this step:  0.19749358296394348  Time in all:  18.199144749960396
66  Time for this step:  1.0797172919847071  Time in all:  19.27889866696205
67  Time for this step:  0.19071329198777676  Time in all:  19.469725249975454
68  Time for this step:  1.0932880829786882  Time in all:  20.563050957978703
69  Time for this step:  0.6566535419551656  Time in all:  21.21974454197334
70  Time for this step:  0.17297887499444187  Time in all:  21.39287279197015
71  Time for this step:  0.6593713330221362  Time in all:  22.0522823749925
72  Time for this step:  0.6941657080315053  Time in all:  22.746496625011787
73  Time for this step:  0.7880408329656348  Time in all:  23.53464049997274
74  Time for this step:  0.44637162500293925  Time in all:  23.981049082998652
75  Time for this step:  0.23098120803479105  Time in all:  24.212067125015892
76  Time for this step:  0.13716158299939707  Time in all:  24.3493684999994
77  Time for this step:  0.18151158397085965  Time in all:  24.530915541981813
78  Time for this step:  0.2154781250283122  Time in all:  24.746475749998353
79  Time for this step:  0.30322308297036216  Time in all:  25.049734624975827
80  Time for this step:  0.39906166697619483  Time in all:  25.448833916976582
81  Time for this step:  0.14851529098814353  Time in all:  25.597466957988217
82  Time for this step:  0.19486704200971872  Time in all:  25.792366417008452
83  Time for this step:  0.22900787502294406  Time in all:  26.0214754579938
84  Time for this step:  0.31862991699017584  Time in all:  26.34014229197055
85  Time for this step:  0.40482154197525233  Time in all:  26.744998249982018
86  Time for this step:  0.2543481249595061  Time in all:  26.999443291977514
87  Time for this step:  0.24524799996288493  Time in all:  27.244733457977418
88  Time for this step:  0.13792995898984373  Time in all:  27.382790167001076
89  Time for this step:  0.2266189999645576  Time in all:  27.60944995796308
90  Time for this step:  0.2271528749843128  Time in all:  27.83668620797107
91  Time for this step:  0.2606594999670051  Time in all:  28.097378416976426
92  Time for this step:  0.22970029199495912  Time in all:  28.327116124972235
93  Time for this step:  0.2888449170277454  Time in all:  28.616038292006124
94  Time for this step:  0.3341614590026438  Time in all:  28.950232166971546
95  Time for this step:  0.28930037503596395  Time in all:  29.239629000017885
96  Time for this step:  0.33580304199131206  Time in all:  29.57546474999981
97  Time for this step:  0.2343142080353573  Time in all:  29.80981583299581
98  Time for this step:  0.20038020802894607  Time in all:  30.010300624999218
99  Time for this step:  0.2923487080261111  Time in all:  30.30268658301793
100  Time for this step:  0.2925607500365004  Time in all:  30.595331999997143
101  Time for this step:  0.22348375001456589  Time in all:  30.818851292016916
102  Time for this step:  0.1784139999654144  Time in all:  30.997357041982468
103  Time for this step:  0.34095899999374524  Time in all:  31.338349332974758
104  Time for this step:  0.2496814169571735  Time in all:  31.588124041969422
105  Time for this step:  0.217211417038925  Time in all:  31.805369000008795
sage: A=CartanMatrix(['D',4])
....: cplus=[0,2]
....: cminus=[1,3]
....: c=cplus+cminus
....: from time import perf_counter
....: num=0
....: first=perf_counter()
....: for v in parasortables(A,c):
....:     num+=1
....:     start=perf_counter()
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbip(cplus,cminus,14))
....:     end=perf_counter()
....:     if P.dimension()!=0:
....:         print("ALERT: FAILURE")
....:     else:
....:         print(num," Time for this step: ",end-start," Time in all: ",end-f
....: irst)
....: 
1  Time for this step:  0.10710504098096862  Time in all:  0.10823220800375566
2  Time for this step:  0.09425433300202712  Time in all:  0.20252008299576119
3  Time for this step:  0.10736495803575963  Time in all:  0.3099222500459291
4  Time for this step:  0.11258174997055903  Time in all:  0.4225847920170054
5  Time for this step:  0.08057674998417497  Time in all:  0.5031994170276448
6  Time for this step:  0.08671079197665676  Time in all:  0.5899852919974364
7  Time for this step:  0.07142383296741173  Time in all:  0.6614473329973407
8  Time for this step:  0.6234979589935392  Time in all:  1.2850725420285016
9  Time for this step:  0.4150322080240585  Time in all:  1.7001390830264427
10  Time for this step:  0.05378716700943187  Time in all:  1.753971750033088
11  Time for this step:  0.06227204203605652  Time in all:  1.8163257500273176
12  Time for this step:  0.0869059159886092  Time in all:  1.9032678329967894
13  Time for this step:  0.07771162502467632  Time in all:  1.981064375024289
14  Time for this step:  0.07889879099093378  Time in all:  2.059994083014317
15  Time for this step:  0.08058170898584649  Time in all:  2.1406514170230366
16  Time for this step:  0.09217583399731666  Time in all:  2.232866417034529
17  Time for this step:  0.6159924579551443  Time in all:  2.848993249994237
18  Time for this step:  0.39880749996518716  Time in all:  3.247839957999531
19  Time for this step:  0.05369466700358316  Time in all:  3.3015970420092344
20  Time for this step:  0.06284116598544642  Time in all:  3.3645115830004215
21  Time for this step:  0.07973754202248529  Time in all:  3.444288292026613
22  Time for this step:  0.08058862498728558  Time in all:  3.524959000002127
23  Time for this step:  0.07759691699175164  Time in all:  3.602593249990605
24  Time for this step:  0.08185883401893079  Time in all:  3.684542292030528
25  Time for this step:  0.09266612498322502  Time in all:  3.7772434999933466
26  Time for this step:  0.5959381670108996  Time in all:  4.373286292015109
27  Time for this step:  0.44851145800203085  Time in all:  4.821842833014671
28  Time for this step:  0.051287083013448864  Time in all:  4.873166750010569
29  Time for this step:  0.05741416598903015  Time in all:  4.930655708012637
30  Time for this step:  0.061720124969724566  Time in all:  4.992417166999076
sage: A
[ 2 -1  0  0]
[-1  2 -1 -1]
[ 0 -1  2  0]
[ 0 -1  0  2]
sage: A=CartanMatrix(['D',4])
....: cplus=[0,2,3]
....: cminus=[1]
....: c=cplus+cminus
....: from time import perf_counter
....: num=0
....: first=perf_counter()
....: for v in parasortables(A,c):
....:     num+=1
....:     start=perf_counter()
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbip(cplus,cminus,14))
....:     end=perf_counter()
....:     if P.dimension()!=0:
....:         print("ALERT: FAILURE")
....:     else:
....:         print(num," Time for this step: ",end-start," Time in all: ",end-f
....: irst)
....: 
1  Time for this step:  0.05844766699010506  Time in all:  0.058955791988410056
2  Time for this step:  0.036287874972913414  Time in all:  0.0953711670008488
3  Time for this step:  0.04755399998975918  Time in all:  0.14295304199913517
4  Time for this step:  0.0768361670197919  Time in all:  0.21983204199932516
5  Time for this step:  0.083487875002902  Time in all:  0.30339920899132267
6  Time for this step:  0.0766341250273399  Time in all:  0.380073334032204
7  Time for this step:  0.0694217499694787  Time in all:  0.4495321669965051
8  Time for this step:  0.03298408299451694  Time in all:  0.4826502500218339
9  Time for this step:  0.04530212498502806  Time in all:  0.5279836669797078
10  Time for this step:  0.07149945897981524  Time in all:  0.5995247089886107
11  Time for this step:  0.08530354197137058  Time in all:  0.6849210420041345
12  Time for this step:  0.0732393329963088  Time in all:  0.7581957500078715
13  Time for this step:  0.06884825002634898  Time in all:  0.8270810840185732
14  Time for this step:  0.036343917017802596  Time in all:  0.863511459028814
15  Time for this step:  0.04546300001675263  Time in all:  0.9090025000041351
16  Time for this step:  0.05347704200539738  Time in all:  0.9625146670150571
17  Time for this step:  0.03187633299967274  Time in all:  0.9945699999807402
18  Time for this step:  0.04149699996924028  Time in all:  1.0360932920011692
19  Time for this step:  0.07473950000712648  Time in all:  1.110870334028732
20  Time for this step:  0.07930341601604596  Time in all:  1.1902591250254773
21  Time for this step:  0.06751583301229402  Time in all:  1.2578077500220388
22  Time for this step:  0.06285179196856916  Time in all:  1.3206934169866145
23  Time for this step:  0.0376635420252569  Time in all:  1.3584512090310454
24  Time for this step:  0.045849707967136055  Time in all:  1.404342624999117
25  Time for this step:  0.05849454097915441  Time in all:  1.4628758750041015
26  Time for this step:  0.03326195798581466  Time in all:  1.4962438750080764
27  Time for this step:  0.04564979096176103  Time in all:  1.5419199999887496
28  Time for this step:  0.05793329200241715  Time in all:  1.5998845840222202
29  Time for this step:  0.0375047919806093  Time in all:  1.637485041981563
30  Time for this step:  0.043052916997112334  Time in all:  1.6805690419860184
sage: A=CartanMatrix(['D',5])
sage: A
[ 2 -1  0  0  0]
[-1  2 -1  0  0]
[ 0 -1  2 -1 -1]
[ 0  0 -1  2  0]
[ 0  0 -1  0  2]
sage: A=CartanMatrix(['D',4])
....: cplus=[0,2]
....: cminus=[1,3,4]
....: c=cplus+cminus
....: from time import perf_counter
....: num=0
....: first=perf_counter()
....: for v in parasortables(A,c):
....:     num+=1
....:     start=perf_counter()
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbip(cplus,cminus,14))
....:     end=perf_counter()
....:     if P.dimension()!=0:
....:         print("ALERT: FAILURE")
....:     else:
....:         print(num," Time for this step: ",end-start," Time in all: ",end-f
....: irst)
....: 
---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
Cell In [210], line 8
      6 num=Integer(0)
      7 first=perf_counter()
----> 8 for v in parasortables(A,c):
      9     num+=Integer(1)
     10     start=perf_counter()

Cell In [148], line 271, in parasortables(A, c)
    270 def parasortables(A,c):  # c-sortable elements not starting with c, i.e. in some proper parabolic
--> 271     for v in sortables(A,c):
    272         if len(v)<len(c) or v[Integer(0):len(c)]!=c:
    273             yield v

Cell In [148], line 260, in sortables(A, c)
    259 def sortables(A,c):
--> 260     yield from sortables_remaining(A,c,[],vector([Integer(1)]*A.nrows()))

Cell In [148], line 267, in sortables_remaining(A, c, sort, vec)
    265 else:
    266     if vec[c[Integer(0)]]>Integer(0):
--> 267         yield from sortables_remaining(A,c[Integer(1):]+[c[Integer(0)]],sort+[c[Integer(0)]],reflect(A,vec,c[Integer(0)]))
    268     yield from sortables_remaining(A,c[Integer(1):],sort,vec)

Cell In [148], line 267, in sortables_remaining(A, c, sort, vec)
    265 else:
    266     if vec[c[Integer(0)]]>Integer(0):
--> 267         yield from sortables_remaining(A,c[Integer(1):]+[c[Integer(0)]],sort+[c[Integer(0)]],reflect(A,vec,c[Integer(0)]))
    268     yield from sortables_remaining(A,c[Integer(1):],sort,vec)

    [... skipping similar frames: sortables_remaining at line 267 (1 times)]

Cell In [148], line 267, in sortables_remaining(A, c, sort, vec)
    265 else:
    266     if vec[c[Integer(0)]]>Integer(0):
--> 267         yield from sortables_remaining(A,c[Integer(1):]+[c[Integer(0)]],sort+[c[Integer(0)]],reflect(A,vec,c[Integer(0)]))
    268     yield from sortables_remaining(A,c[Integer(1):],sort,vec)

Cell In [148], line 266, in sortables_remaining(A, c, sort, vec)
    264     yield sort
    265 else:
--> 266     if vec[c[Integer(0)]]>Integer(0):
    267         yield from sortables_remaining(A,c[Integer(1):]+[c[Integer(0)]],sort+[c[Integer(0)]],reflect(A,vec,c[Integer(0)]))
    268     yield from sortables_remaining(A,c[Integer(1):],sort,vec)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/modules/free_module_element.pyx:1842, in sage.modules.free_module_element.FreeModuleElement.__getitem__ (build/cythonized/sage/modules/free_module_element.c:19571)()
   1840     n += d
   1841 if n < 0 or n >= d:
-> 1842     raise IndexError("vector index out of range")
   1843 return self.get_unsafe(n)
   1844 

IndexError: vector index out of range
sage: A=CartanMatrix(['D',5])
....: cplus=[0,2]
....: cminus=[1,3,4]
....: c=cplus+cminus
....: from time import perf_counter
....: num=0
....: first=perf_counter()
....: for v in parasortables(A,c):
....:     num+=1
....:     start=perf_counter()
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbip(cplus,cminus,14))
....:     end=perf_counter()
....:     if P.dimension()!=0:
....:         print("ALERT: FAILURE")
....:     else:
....:         print(num," Time for this step: ",end-start," Time in all: ",end-f
....: irst)
....: 
1  Time for this step:  0.10562574997311458  Time in all:  0.10697020799852908
2  Time for this step:  0.460238458996173  Time in all:  0.5672452500439249
3  Time for this step:  0.19215120800072327  Time in all:  0.7595005829934962
4  Time for this step:  0.5528110830346122  Time in all:  1.312350916035939
5  Time for this step:  0.37235245801275596  Time in all:  1.6847895830287598
6  Time for this step:  0.4387767920270562  Time in all:  2.123602958046831
7  Time for this step:  0.481378416006919  Time in all:  2.6050896660308354
8  Time for this step:  0.49634958402020857  Time in all:  3.1014761250116862
9  Time for this step:  0.4825488330097869  Time in all:  3.5840664580464363
10  Time for this step:  0.2924497090280056  Time in all:  3.87662887503393
11  Time for this step:  0.37028199998894706  Time in all:  4.246948915999383
12  Time for this step:  0.2832163330167532  Time in all:  4.530256458034273
13  Time for this step:  0.36515725002391264  Time in all:  4.8954573750379495
14  Time for this step:  0.3178237919928506  Time in all:  5.213319958013017
15  Time for this step:  0.10874920897185802  Time in all:  5.322231250000186
16  Time for this step:  0.4669737499789335  Time in all:  5.789245749998372
17  Time for this step:  0.20723470899974927  Time in all:  5.9965911250328645
18  Time for this step:  0.5618077500257641  Time in all:  6.55844450002769
19  Time for this step:  0.376446875045076  Time in all:  6.934994125040248
20  Time for this step:  0.4488592919660732  Time in all:  7.383894375001546
21  Time for this step:  0.48888970899861306  Time in all:  7.872878250025678
22  Time for this step:  0.4797867080196738  Time in all:  8.352703208045568
23  Time for this step:  0.39347279199864715  Time in all:  8.746217625041027
24  Time for this step:  0.29843170900130644  Time in all:  9.0447547500371
25  Time for this step:  0.3692269579623826  Time in all:  9.414016916009132
26  Time for this step:  0.2928874579956755  Time in all:  9.707000333000906
27  Time for this step:  0.36421541700838134  Time in all:  10.07125558302505
28  Time for this step:  0.31582658301340416  Time in all:  10.387113416043576
29  Time for this step:  0.2655285419896245  Time in all:  10.652754458016716
30  Time for this step:  0.23542462498880923  Time in all:  10.88823537499411
31  Time for this step:  0.2923352500074543  Time in all:  11.180607916030567
32  Time for this step:  0.21631725004408509  Time in all:  11.397012416040525
33  Time for this step:  0.2692397499922663  Time in all:  11.666286375024356
34  Time for this step:  0.16199000005144626  Time in all:  11.82842083304422
35  Time for this step:  0.20115737500600517  Time in all:  12.029615541046951
36  Time for this step:  0.20262395904865116  Time in all:  12.232317000045441
37  Time for this step:  0.22372862504562363  Time in all:  12.45608016604092
38  Time for this step:  0.2714901249855757  Time in all:  12.727608749992214
39  Time for this step:  0.28997679200256243  Time in all:  13.017663333041128
40  Time for this step:  0.2881092909956351  Time in all:  13.305804916017223
41  Time for this step:  0.29270454100333154  Time in all:  13.598604791040998
42  Time for this step:  0.2965291250147857  Time in all:  13.89517470804276
43  Time for this step:  0.23720783303724602  Time in all:  14.132417916029226
44  Time for this step:  0.09413891599979252  Time in all:  14.226678916020319
45  Time for this step:  0.10598954104352742  Time in all:  14.332699916034471
46  Time for this step:  0.14454524999018759  Time in all:  14.477332541020587
47  Time for this step:  0.1309150829911232  Time in all:  14.608284707996063
48  Time for this step:  0.14484233397524804  Time in all:  14.753223625011742
49  Time for this step:  0.12924433400621638  Time in all:  14.882508375041652
50  Time for this step:  0.1322572500212118  Time in all:  15.01484633301152
51  Time for this step:  0.11479512497317046  Time in all:  15.129714415990748
52  Time for this step:  0.18376120901666582  Time in all:  15.313557750021573
53  Time for this step:  0.22218345804139972  Time in all:  15.535778666031547
54  Time for this step:  0.2227022080332972  Time in all:  15.75856070802547
55  Time for this step:  0.190398707985878  Time in all:  15.948996708029881
56  Time for this step:  0.09177983400877565  Time in all:  16.041005000006407
57  Time for this step:  0.08739358297316357  Time in all:  16.128440333006438
58  Time for this step:  0.09212295804172754  Time in all:  16.220643583044875
59  Time for this step:  0.06567179196281359  Time in all:  16.286351207992993
60  Time for this step:  0.10636099998373538  Time in all:  16.39281754102558
61  Time for this step:  0.10030441702110693  Time in all:  16.493163875013124
62  Time for this step:  0.10403391602449119  Time in all:  16.597285416035447
63  Time for this step:  0.07479600002989173  Time in all:  16.672116583038587
64  Time for this step:  1.0475075420108624  Time in all:  17.719665083044674
65  Time for this step:  0.2025469170184806  Time in all:  17.922323458013125
66  Time for this step:  1.1697277500061318  Time in all:  19.092098125023767
67  Time for this step:  0.18613112502498552  Time in all:  19.278335458016954
68  Time for this step:  1.0719751669676043  Time in all:  20.350351625005715
69  Time for this step:  0.6594908749684691  Time in all:  21.00988712499384
70  Time for this step:  0.17560341698117554  Time in all:  21.185611249995418
71  Time for this step:  0.6501884579774924  Time in all:  21.835835541016422
72  Time for this step:  0.6984103749855421  Time in all:  22.534289541014004
73  Time for this step:  0.6930152499699034  Time in all:  23.227399791008793
74  Time for this step:  0.45886270800838247  Time in all:  23.686299541033804
75  Time for this step:  0.23405262496089563  Time in all:  23.920390415994916
76  Time for this step:  0.14245545800076798  Time in all:  24.06295604101615
77  Time for this step:  0.1865824589622207  Time in all:  24.24957662500674
78  Time for this step:  0.21935991704231128  Time in all:  24.469037583039608
79  Time for this step:  0.314396083005704  Time in all:  24.78347233304521
80  Time for this step:  0.41900504200020805  Time in all:  25.202517083031125
81  Time for this step:  0.15222912497119978  Time in all:  25.35489304101793
82  Time for this step:  0.20181604201206937  Time in all:  25.55674887500936
83  Time for this step:  0.23144533403683454  Time in all:  25.78829262504587
84  Time for this step:  0.3231358749908395  Time in all:  26.11146408302011
85  Time for this step:  0.40853620902635157  Time in all:  26.520046750025358
86  Time for this step:  0.25744658295297995  Time in all:  26.777578665991314
87  Time for this step:  0.3371108330320567  Time in all:  27.114724291022867
88  Time for this step:  0.13978466700064018  Time in all:  27.254677875025664
89  Time for this step:  0.22608520899666473  Time in all:  27.480803000042215
90  Time for this step:  0.22694404097273946  Time in all:  27.7078356660204
91  Time for this step:  0.263410416955594  Time in all:  27.971282957994845
92  Time for this step:  0.2319366250303574  Time in all:  28.203257583023515
93  Time for this step:  0.29123566701309755  Time in all:  28.49458408303326
94  Time for this step:  0.32323137496132404  Time in all:  28.817855125002097
95  Time for this step:  0.28607770800590515  Time in all:  29.10406891599996
96  Time for this step:  0.325466625043191  Time in all:  29.429573208035436
97  Time for this step:  0.23580229200888425  Time in all:  29.665415708033834
98  Time for this step:  0.1969898750539869  Time in all:  29.86251887504477
99  Time for this step:  0.29257229098584503  Time in all:  30.155126416007988
100  Time for this step:  0.2968269999837503  Time in all:  30.45204995799577
101  Time for this step:  0.22240004199557006  Time in all:  30.674490125034936
102  Time for this step:  0.1775988339795731  Time in all:  30.852178875007667
103  Time for this step:  0.25199745898135006  Time in all:  31.104211000027135
104  Time for this step:  0.24994916695868596  Time in all:  31.35423733299831
105  Time for this step:  0.21936754195485264  Time in all:  31.573640874994453
sage: A=CartanMatrix(['D',6])
sage: A
[ 2 -1  0  0  0  0]
[-1  2 -1  0  0  0]
[ 0 -1  2 -1  0  0]
[ 0  0 -1  2 -1 -1]
[ 0  0  0 -1  2  0]
[ 0  0  0 -1  0  2]
sage: A=CartanMatrix(['D',6])
....: cplus=[0,2,4,5]
....: cminus=[1,3]
....: c=cplus+cminus
....: from time import perf_counter
....: num=0
....: first=perf_counter()
....: for v in parasortables(A,c):
....:     num+=1
....:     start=perf_counter()
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbip(cplus,cminus,14))
....:     end=perf_counter()
....:     if P.dimension()!=0:
....:         print("ALERT: FAILURE")
....:     else:
....:         print(num," Time for this step: ",end-start," Time in all: ",end-f
....: irst)
....: 
1  Time for this step:  0.24156137503450736  Time in all:  0.24679137498605996
2  Time for this step:  0.35773658304242417  Time in all:  0.6045716250082478
3  Time for this step:  0.4457041670102626  Time in all:  1.0503199999802746
4  Time for this step:  0.3874543749843724  Time in all:  1.4378650419530459
5  Time for this step:  0.4999180830200203  Time in all:  1.9378202499938197
6  Time for this step:  0.2366817079600878  Time in all:  2.174725207965821
7  Time for this step:  9.301326749962755  Time in all:  11.476095291960519
8  Time for this step:  10.228993665950838  Time in all:  21.705132957955357
9  Time for this step:  10.197875166952144  Time in all:  31.90312641696073
10  Time for this step:  5.13076958298916  Time in all:  37.033938082982786
11  Time for this step:  6.3506402500206605  Time in all:  43.38469974999316
12  Time for this step:  6.580546582990792  Time in all:  49.96528783295071
13  Time for this step:  6.558420166024007  Time in all:  56.523841582995374
14  Time for this step:  3.119285667024087  Time in all:  59.643167999980506
15  Time for this step:  0.7418290839996189  Time in all:  60.385042166977655
16  Time for this step:  1.6733885830035433  Time in all:  62.05853420798667
17  Time for this step:  1.0542759159579873  Time in all:  63.112846832955256
18  Time for this step:  1.6047971660154872  Time in all:  64.71776183298789
19  Time for this step:  1.0713179999729618  Time in all:  65.78912412497448
20  Time for this step:  0.643598957976792  Time in all:  66.4327637499664
21  Time for this step:  1.0656505419756286  Time in all:  67.49855949997436
22  Time for this step:  0.6984749579569325  Time in all:  68.19707283296157
23  Time for this step:  0.7275442910031416  Time in all:  68.92466195800807
24  Time for this step:  0.7451295829960145  Time in all:  69.66989858297165
25  Time for this step:  0.4971821670187637  Time in all:  70.16712075000396
26  Time for this step:  0.43508737499359995  Time in all:  70.60225583298597
27  Time for this step:  0.11188924999441952  Time in all:  70.71442108298652
28  Time for this step:  0.09366979100741446  Time in all:  70.80813458299963
29  Time for this step:  0.14524808299029246  Time in all:  70.95346699998481
30  Time for this step:  0.13219208404188976  Time in all:  71.08569704199908
31  Time for this step:  0.17684433300746605  Time in all:  71.26261350000277
32  Time for this step:  0.1820960000040941  Time in all:  71.4447519579553
33  Time for this step:  3.3472017500316724  Time in all:  74.79205016698688
34  Time for this step:  6.299673375033308  Time in all:  81.09176495799329
35  Time for this step:  0.40391004201956093  Time in all:  81.49581887497334
36  Time for this step:  0.408177292032633  Time in all:  81.90403562498977
37  Time for this step:  0.4074615000281483  Time in all:  82.31154162500752
38  Time for this step:  2.4171069160220213  Time in all:  84.72875045798719
39  Time for this step:  3.362996125011705  Time in all:  88.09180391696282
40  Time for this step:  4.21178620896535  Time in all:  92.3037002919591
41  Time for this step:  2.327402249968145  Time in all:  94.63114983297419
42  Time for this step:  1.2073837499483489  Time in all:  95.83865595795214
43  Time for this step:  2.320276125043165  Time in all:  98.15898649999872
44  Time for this step:  1.7271141660166904  Time in all:  99.88613270799397
45  Time for this step:  0.36646729201311246  Time in all:  100.25273974996526
46  Time for this step:  2.914397459011525  Time in all:  103.16717754199635
47  Time for this step:  0.3985316250473261  Time in all:  103.56581000000006
48  Time for this step:  1.8660247499938123  Time in all:  105.43186991696712
49  Time for this step:  2.207132207986433  Time in all:  107.63910120795481
50  Time for this step:  1.4047027500346303  Time in all:  109.04384970798856
51  Time for this step:  1.0499446659814566  Time in all:  110.09389283298515
52  Time for this step:  1.0263672079890966  Time in all:  111.12031587498495
53  Time for this step:  0.7604371670167893  Time in all:  111.88084887497826
54  Time for this step:  0.7939708749763668  Time in all:  112.67486295796698
55  Time for this step:  0.15577025001402944  Time in all:  112.83081591699738
56  Time for this step:  0.3881454580114223  Time in all:  113.21899145800853
57  Time for this step:  1.0557712909649126  Time in all:  114.27485258295201
58  Time for this step:  5.355981333006639  Time in all:  119.6308652079897
59  Time for this step:  3.7677286250400357  Time in all:  123.3986322080018
60  Time for this step:  0.6800238749710843  Time in all:  124.0787872079527
61  Time for this step:  3.742200499982573  Time in all:  127.82102995796595
62  Time for this step:  2.990809166978579  Time in all:  130.81188391696196
63  Time for this step:  0.6324715000228025  Time in all:  131.44448524998734
64  Time for this step:  1.6691072499961592  Time in all:  133.11363679199712
65  Time for this step:  0.5898481250042096  Time in all:  133.70358274999307
66  Time for this step:  1.0223849999601953  Time in all:  134.7260115419631
67  Time for this step:  0.7520885420381092  Time in all:  135.47818687499966
68  Time for this step:  0.8194659170112573  Time in all:  136.29769741697237
69  Time for this step:  0.31163375003961846  Time in all:  136.60948983300477
70  Time for this step:  0.5129811660153791  Time in all:  137.1225187079981
71  Time for this step:  0.6521955420030281  Time in all:  137.77475462498842
72  Time for this step:  0.4875473330030218  Time in all:  138.2624017079943
73  Time for this step:  0.6221087499870919  Time in all:  138.8845462499885
74  Time for this step:  0.3368873749859631  Time in all:  139.2215829169727
75  Time for this step:  0.6185123749892227  Time in all:  139.840131999983
76  Time for this step:  0.6090495839598589  Time in all:  140.4492177919601
77  Time for this step:  0.7111746660084464  Time in all:  141.16051920800237
78  Time for this step:  0.6900355410180055  Time in all:  141.85059233300854
79  Time for this step:  0.6099923750152811  Time in all:  142.4606282080058
80  Time for this step:  0.10357958299573511  Time in all:  142.5644414999988
81  Time for this step:  0.08855333301471546  Time in all:  142.6530383329955
82  Time for this step:  0.14009441604139283  Time in all:  142.7932118329918
83  Time for this step:  0.1321071669808589  Time in all:  142.9253657499794
84  Time for this step:  0.2736982910428196  Time in all:  143.1991653330042
85  Time for this step:  0.17903429100988433  Time in all:  143.37824783299584
86  Time for this step:  3.187023832986597  Time in all:  146.56536249996861
87  Time for this step:  6.205084124987479  Time in all:  152.77049295796314
88  Time for this step:  0.4096445000031963  Time in all:  153.1802902079653
89  Time for this step:  0.41224558296380565  Time in all:  153.59257424995303
90  Time for this step:  0.4080955420504324  Time in all:  154.0007073750021
91  Time for this step:  2.381404875020962  Time in all:  156.3822407919797
92  Time for this step:  3.422381874988787  Time in all:  159.80466741696
93  Time for this step:  4.087134584027808  Time in all:  163.89191404200392
94  Time for this step:  2.1799095420283265  Time in all:  166.07186566700693
95  Time for this step:  1.1962190420017578  Time in all:  167.2681991669815
96  Time for this step:  2.293090499995742  Time in all:  169.5613357499824
97  Time for this step:  1.7274994580075145  Time in all:  171.2888763329829
98  Time for this step:  0.34903129102895036  Time in all:  171.63805633300217
99  Time for this step:  2.810524542001076  Time in all:  174.4486226249719
100  Time for this step:  0.3909297499922104  Time in all:  174.8396677079727
101  Time for this step:  1.8191388749983162  Time in all:  176.6588513329625
102  Time for this step:  2.114770459011197  Time in all:  178.77371841698186
103  Time for this step:  1.3731820420362055  Time in all:  180.1469431250007
104  Time for this step:  1.0215254169888794  Time in all:  181.16857062495546
105  Time for this step:  1.015159707982093  Time in all:  182.18376970797544
106  Time for this step:  0.7548594170366414  Time in all:  182.9387258749921
107  Time for this step:  0.8693524579866789  Time in all:  183.80813058296917
108  Time for this step:  0.1501859580166638  Time in all:  183.95862175000366
109  Time for this step:  0.38505454099504277  Time in all:  184.34371745795943
110  Time for this step:  0.9288722080527805  Time in all:  185.27268470800482
111  Time for this step:  5.276670708961319  Time in all:  190.54939216695493
112  Time for this step:  3.6936133329872973  Time in all:  194.2430446249782
113  Time for this step:  0.6738794170087203  Time in all:  194.91703679197235
114  Time for this step:  3.6860427500214428  Time in all:  198.6031216669944
115  Time for this step:  2.9505392920109443  Time in all:  201.5537121669622
116  Time for this step:  0.6073079160414636  Time in all:  202.1611377079971
117  Time for this step:  1.6109204579843208  Time in all:  203.77209720795508
118  Time for this step:  0.571954499988351  Time in all:  204.3441819169675
119  Time for this step:  0.9967941250069998  Time in all:  205.34101562498836
120  Time for this step:  0.8520547919906676  Time in all:  206.19319437496597
121  Time for this step:  0.6887832919601351  Time in all:  206.88201579195447
122  Time for this step:  0.3110504589858465  Time in all:  207.19320254196646
123  Time for this step:  0.4963516659918241  Time in all:  207.68959283299046
124  Time for this step:  0.6343467499827966  Time in all:  208.32398541696602
125  Time for this step:  0.4776725000119768  Time in all:  208.80174908298068
126  Time for this step:  0.6078363749547862  Time in all:  209.40963058295893
127  Time for this step:  0.33880620903801173  Time in all:  209.7485636670026
128  Time for this step:  0.5930772080319002  Time in all:  210.34167774999514
129  Time for this step:  0.5817766250111163  Time in all:  210.92349612497492
130  Time for this step:  0.7026672920328565  Time in all:  211.62625604198547
131  Time for this step:  0.6772329999948852  Time in all:  212.3035368329729
132  Time for this step:  0.6985237500048243  Time in all:  213.00210091698682
133  Time for this step:  0.10807474999455735  Time in all:  213.11036283295834
134  Time for this step:  0.09179579099873081  Time in all:  213.20220308296848
135  Time for this step:  0.13433224998880178  Time in all:  213.33661379199475
136  Time for this step:  0.1190109999733977  Time in all:  213.45566137495916
137  Time for this step:  0.16109337500529364  Time in all:  213.61684308300028
138  Time for this step:  0.1677299999864772  Time in all:  213.784615499957
139  Time for this step:  0.5816058749915101  Time in all:  214.3663188329665
140  Time for this step:  0.5668731250334531  Time in all:  214.93323129200144
141  Time for this step:  0.5597410830087028  Time in all:  215.4930143749807
142  Time for this step:  0.14428687503095716  Time in all:  215.6374197920086
143  Time for this step:  0.3480532920220867  Time in all:  215.98551779199624
144  Time for this step:  0.4261992090032436  Time in all:  216.4118152919691
145  Time for this step:  0.49876416695769876  Time in all:  216.91061749996152
146  Time for this step:  0.5066215840051882  Time in all:  217.4172806669958
147  Time for this step:  0.19075562502257526  Time in all:  217.60818141698837
148  Time for this step:  0.46647308400133625  Time in all:  218.07469316700008
149  Time for this step:  0.559763541969005  Time in all:  218.6345001249574
150  Time for this step:  0.38268333300948143  Time in all:  219.01727912499337
151  Time for this step:  0.46671849995618686  Time in all:  219.48403779196087
152  Time for this step:  0.3166395839652978  Time in all:  219.8007759169559
153  Time for this step:  0.3141202079714276  Time in all:  220.1149414999527
154  Time for this step:  0.5030344999977387  Time in all:  220.61801312497118
155  Time for this step:  0.11518874997273088  Time in all:  220.7333788749529
156  Time for this step:  0.14763612498063594  Time in all:  220.88105545798317
157  Time for this step:  0.44101737497840077  Time in all:  221.32211083295988
158  Time for this step:  0.4653312920127064  Time in all:  221.78753724996932
159  Time for this step:  0.3560390830389224  Time in all:  222.14362470799824
160  Time for this step:  0.14652800001204014  Time in all:  222.29027104197303
161  Time for this step:  0.15211633301805705  Time in all:  222.44243150000693
162  Time for this step:  0.39985612500458956  Time in all:  222.8423328329809
163  Time for this step:  0.4098232500255108  Time in all:  223.2522520420025
164  Time for this step:  0.33416741696419194  Time in all:  223.58645779197104
165  Time for this step:  0.30466291698394343  Time in all:  223.89120404195273
166  Time for this step:  0.2963293750071898  Time in all:  224.18757216696395
167  Time for this step:  0.22716025001136586  Time in all:  224.41485608299263
168  Time for this step:  0.23269904201151803  Time in all:  224.64759179198882
169  Time for this step:  0.47967299999436364  Time in all:  225.127304041991
170  Time for this step:  0.4896835419931449  Time in all:  225.6170815419755
171  Time for this step:  0.4521036250516772  Time in all:  226.06922412500717
172  Time for this step:  0.42400204204022884  Time in all:  226.49326304200804
173  Time for this step:  0.21924795798258856  Time in all:  226.71266624995042
174  Time for this step:  0.25329420901834965  Time in all:  226.96599504200276
175  Time for this step:  0.24673045799136162  Time in all:  227.2128132499638
176  Time for this step:  0.2563381250365637  Time in all:  227.46918979199836
177  Time for this step:  0.35257758299121633  Time in all:  227.8218537499779
178  Time for this step:  0.4505862499936484  Time in all:  228.2724827079801
179  Time for this step:  0.3798208750085905  Time in all:  228.65241066698218
180  Time for this step:  0.3903855829848908  Time in all:  229.04283308296
181  Time for this step:  0.5738134999992326  Time in all:  229.61668479198124
182  Time for this step:  0.21444920799694955  Time in all:  229.83127995795803
183  Time for this step:  0.24876595800742507  Time in all:  230.0800814999966
184  Time for this step:  0.24515950004570186  Time in all:  230.32532437500777
185  Time for this step:  0.25350312498630956  Time in all:  230.57886687497376
186  Time for this step:  0.3571669170050882  Time in all:  230.9361226669862
187  Time for this step:  0.35761379200266674  Time in all:  231.29377374995966
188  Time for this step:  0.38774008298059925  Time in all:  231.68163383298088
189  Time for this step:  0.39905520796310157  Time in all:  232.0807294579572
190  Time for this step:  0.574924334010575  Time in all:  232.6556876669638
191  Time for this step:  0.2181586250080727  Time in all:  232.87395683297655
192  Time for this step:  0.23844991700025275  Time in all:  233.11244549998082
193  Time for this step:  0.24196841701632366  Time in all:  233.3544907500036
194  Time for this step:  0.2459131660289131  Time in all:  233.60044458298944
195  Time for this step:  0.45658220804762095  Time in all:  234.0571103330003
196  Time for this step:  0.36915104096988216  Time in all:  234.42629820795264
197  Time for this step:  0.09444216697011143  Time in all:  234.52105337497778
198  Time for this step:  0.07037699996726587  Time in all:  234.5914667499601
199  Time for this step:  0.1282987499726005  Time in all:  234.71986074995948
200  Time for this step:  0.10673858399968594  Time in all:  234.82664429198485
201  Time for this step:  0.1530498749925755  Time in all:  234.97979266697075
202  Time for this step:  0.1609491659910418  Time in all:  235.14077508298215
203  Time for this step:  0.15712108399020508  Time in all:  235.29801691696048
204  Time for this step:  0.16555450001033023  Time in all:  235.46361212496413
205  Time for this step:  5.139564000011887  Time in all:  240.60327387496363
206  Time for this step:  5.22939887503162  Time in all:  245.83271141699515
207  Time for this step:  8.723535165947396  Time in all:  254.55638195795473
208  Time for this step:  12.70454599999357  Time in all:  267.2609675829881
209  Time for this step:  12.830750082968734  Time in all:  280.09186037495965
210  Time for this step:  7.31358029099647  Time in all:  287.40548758296063
211  Time for this step:  5.793201166961808  Time in all:  293.19873662496684
212  Time for this step:  0.12603066698648036  Time in all:  293.32492962497054
213  Time for this step:  8.366850792022888  Time in all:  301.69181991700316
214  Time for this step:  8.282489333010744  Time in all:  309.9744344999781
215  Time for this step:  6.0951369169633836  Time in all:  316.06961249996675
216  Time for this step:  6.351085708010942  Time in all:  322.4208198330016
217  Time for this step:  10.497935624967795  Time in all:  332.91879816696746
218  Time for this step:  10.666865540959407  Time in all:  343.5857682079659
219  Time for this step:  6.233349375019316  Time in all:  349.819158874976
220  Time for this step:  5.704448874981608  Time in all:  355.5236582919606
221  Time for this step:  7.489107749948744  Time in all:  363.0129054999561
222  Time for this step:  6.428358707984444  Time in all:  369.4413039579522
223  Time for this step:  6.08886600000551  Time in all:  375.5302765420056
224  Time for this step:  5.956371042004321  Time in all:  381.4866908749682
225  Time for this step:  7.298819958989043  Time in all:  388.7856380419689
226  Time for this step:  6.3276487499824725  Time in all:  395.11333270795876
227  Time for this step:  5.986203457985539  Time in all:  401.09963849995984
228  Time for this step:  5.86993500002427  Time in all:  406.96961333299987
229  Time for this step:  3.5819796670111828  Time in all:  410.55170937499497
230  Time for this step:  3.1634048339910805  Time in all:  413.7151587919798
231  Time for this step:  3.730348583019804  Time in all:  417.4456449999707
232  Time for this step:  3.4751290830317885  Time in all:  420.9208135000081
233  Time for this step:  3.6676550839911215  Time in all:  424.5885059169959
234  Time for this step:  3.496672875015065  Time in all:  428.08528320799815
235  Time for this step:  2.2202660830225796  Time in all:  430.30559408297995
236  Time for this step:  1.2143862909870222  Time in all:  431.5200253329822
237  Time for this step:  3.033329333004076  Time in all:  434.55351808300475
238  Time for this step:  2.73820462502772  Time in all:  437.2917655420024
239  Time for this step:  3.516226249979809  Time in all:  440.8080303329625
240  Time for this step:  3.977223792055156  Time in all:  444.78529129200615
241  Time for this step:  3.9670019579934888  Time in all:  448.75240820797626
242  Time for this step:  2.1061885000090115  Time in all:  450.8586517079966
243  Time for this step:  2.2777904589893296  Time in all:  453.13657766696997
244  Time for this step:  2.46339466702193  Time in all:  455.60000924998894
245  Time for this step:  2.766938874963671  Time in all:  458.36699191696243
246  Time for this step:  2.6226127500412986  Time in all:  460.98972566699376
247  Time for this step:  1.5525363750057295  Time in all:  462.5423111249693
248  Time for this step:  0.9011472080019303  Time in all:  463.44349058298394
249  Time for this step:  6.921730791975278  Time in all:  470.36535979196196
250  Time for this step:  4.213813208974898  Time in all:  474.5792195419781
251  Time for this step:  4.228325208008755  Time in all:  478.80766883300385
252  Time for this step:  2.894810583034996  Time in all:  481.70252024999354
253  Time for this step:  1.9140067910193466  Time in all:  483.61657670798013
254  Time for this step:  2.922857791010756  Time in all:  486.5395945829805
255  Time for this step:  1.9635257499758154  Time in all:  488.50315958296414
256  Time for this step:  1.2614549580030143  Time in all:  489.7646574579994
257  Time for this step:  7.115236958023161  Time in all:  496.8800796249998
258  Time for this step:  4.372026124969125  Time in all:  501.2521490419749
259  Time for this step:  4.442063249996863  Time in all:  505.69431504199747
260  Time for this step:  2.9855601669987664  Time in all:  508.6799206249998
261  Time for this step:  1.8956337500130758  Time in all:  510.57559762499295
262  Time for this step:  2.9294828749843873  Time in all:  513.5052279169904
263  Time for this step:  1.951183666009456  Time in all:  515.4564490829944
264  Time for this step:  1.2788449159706943  Time in all:  516.7353335829685
265  Time for this step:  2.8529315409832634  Time in all:  519.5883738329867
266  Time for this step:  1.570098500000313  Time in all:  521.1585164999706
267  Time for this step:  1.807359041995369  Time in all:  522.9659920419799
268  Time for this step:  1.0820382079691626  Time in all:  524.0480713329744
269  Time for this step:  0.9782261670334265  Time in all:  525.0264261669945
270  Time for this step:  0.7153970409999602  Time in all:  525.7418617079966
271  Time for this step:  0.7175133749842644  Time in all:  526.4594109999598
272  Time for this step:  0.7171410419978201  Time in all:  527.1766516249627
273  Time for this step:  0.5522273750393651  Time in all:  527.7289251670009
274  Time for this step:  0.3725315419724211  Time in all:  528.1015528749558
275  Time for this step:  0.37052195804426447  Time in all:  528.472113833006
276  Time for this step:  0.1805104169761762  Time in all:  528.6528465419542
277  Time for this step:  9.16131650004536  Time in all:  537.8142007080023
278  Time for this step:  10.393968958000187  Time in all:  548.2082089579781
279  Time for this step:  10.405678625043947  Time in all:  558.6139932500082
280  Time for this step:  5.8702735410188325  Time in all:  564.4843067079782
281  Time for this step:  6.037571292021312  Time in all:  570.5220111249946
282  Time for this step:  6.17412429198157  Time in all:  576.6961775419768
283  Time for this step:  6.215702541987412  Time in all:  582.9119760419708
284  Time for this step:  3.3159828749485314  Time in all:  586.2280016669538
285  Time for this step:  0.822427292005159  Time in all:  587.0504718750017
286  Time for this step:  2.038425291015301  Time in all:  589.0890013329918
287  Time for this step:  1.1573210839997046  Time in all:  590.246364416962
288  Time for this step:  2.002965666993987  Time in all:  592.2494619169738
289  Time for this step:  1.2608809579978697  Time in all:  593.5103827499552
290  Time for this step:  0.56329508300405  Time in all:  594.0737266250071
291  Time for this step:  1.2835827500093728  Time in all:  595.3574320829939
292  Time for this step:  0.7773944580112584  Time in all:  596.1348657499766
293  Time for this step:  0.7713250420056283  Time in all:  596.9062701669754
294  Time for this step:  0.7996098750154488  Time in all:  597.705974749988
295  Time for this step:  0.6330353330122307  Time in all:  598.3390544999857
296  Time for this step:  0.4343820000067353  Time in all:  598.77348587499
297  Time for this step:  0.18803874996956438  Time in all:  598.961692791956
298  Time for this step:  0.22230112500255927  Time in all:  599.1840379579808
299  Time for this step:  0.2154232919565402  Time in all:  599.3995602919604
300  Time for this step:  0.22851308400277048  Time in all:  599.6281144169625
301  Time for this step:  1.2027528330218047  Time in all:  600.8309115829761
302  Time for this step:  0.49045670800842345  Time in all:  601.3214619579958
303  Time for this step:  0.4579637920251116  Time in all:  601.7794682499953
304  Time for this step:  0.9780205420101993  Time in all:  602.7575357499882
305  Time for this step:  0.42926050000824034  Time in all:  603.1869216249906
306  Time for this step:  1.0581228749942966  Time in all:  604.2450887499726
307  Time for this step:  0.4922478329972364  Time in all:  604.7374313749606
308  Time for this step:  0.874377416970674  Time in all:  605.6118503749603
309  Time for this step:  1.0036214999854565  Time in all:  606.6155539579922
310  Time for this step:  0.8980793340015225  Time in all:  607.5136710419902
311  Time for this step:  0.42764558299677446  Time in all:  607.9414204999921
312  Time for this step:  0.4321330829989165  Time in all:  608.3735974999727
313  Time for this step:  0.2716018749633804  Time in all:  608.6453739999561
314  Time for this step:  0.9936335000093095  Time in all:  609.6390502499999
315  Time for this step:  0.767500874993857  Time in all:  610.4065887079923
316  Time for this step:  0.9874031250365078  Time in all:  611.3941217079991
317  Time for this step:  0.8326192080276087  Time in all:  612.2267819999834
318  Time for this step:  0.5040953750140034  Time in all:  612.7309180829907
319  Time for this step:  0.18486620899057016  Time in all:  612.9159734169953
320  Time for this step:  0.21726800000760704  Time in all:  613.1332830419997
321  Time for this step:  0.21155775000806898  Time in all:  613.3449277919717
322  Time for this step:  0.22420654102461413  Time in all:  613.5691738330061
323  Time for this step:  1.2601543340133503  Time in all:  614.8293691669824
324  Time for this step:  0.4928272080142051  Time in all:  615.3223233330064
325  Time for this step:  0.4598047500476241  Time in all:  615.7821753330063
326  Time for this step:  0.9600954999914393  Time in all:  616.7423116669524
327  Time for this step:  0.42175966600188985  Time in all:  617.1641968329786
328  Time for this step:  0.9524929999606684  Time in all:  618.1167318329681
329  Time for this step:  0.4887491670087911  Time in all:  618.6055858749896
330  Time for this step:  0.9546834579668939  Time in all:  619.5603061249712
331  Time for this step:  0.9822862080181949  Time in all:  620.5426772499923
332  Time for this step:  0.8816156669636257  Time in all:  621.4243459999561
333  Time for this step:  0.41922824998619035  Time in all:  621.8436789169791
334  Time for this step:  0.4229133750195615  Time in all:  622.2666302080033
335  Time for this step:  0.2679340420290828  Time in all:  622.5346913749818
336  Time for this step:  0.8622447089874186  Time in all:  623.396973541996
337  Time for this step:  0.7416027080034837  Time in all:  624.1386218749685
338  Time for this step:  1.0489425419946201  Time in all:  625.1876456669997
339  Time for this step:  0.8118906249874271  Time in all:  625.9995764999767
340  Time for this step:  0.5077524579828605  Time in all:  626.507368874969
341  Time for this step:  0.18957708298694342  Time in all:  626.6970813329681
342  Time for this step:  0.20651158300461248  Time in all:  626.903632749978
343  Time for this step:  0.21117016597418115  Time in all:  627.1148929579649
344  Time for this step:  0.21786925004562363  Time in all:  627.3328077080077
345  Time for this step:  0.38188937498489395  Time in all:  627.714736874972
346  Time for this step:  0.27846850000787526  Time in all:  627.9933009169763
347  Time for this step:  0.33810570801142603  Time in all:  628.3314464999712
348  Time for this step:  0.2695617079734802  Time in all:  628.601111957978
349  Time for this step:  0.3355551669956185  Time in all:  628.9367081669625
350  Time for this step:  0.29886145796626806  Time in all:  629.2356108749518
351  Time for this step:  0.2025309579912573  Time in all:  629.4383134999662
352  Time for this step:  0.23578149999957532  Time in all:  629.6741322079906
353  Time for this step:  0.5746219159918837  Time in all:  630.2487953329692
354  Time for this step:  0.6844911249936558  Time in all:  630.9334076669766
355  Time for this step:  0.4917487920029089  Time in all:  631.4251882919925
356  Time for this step:  0.43924979196162894  Time in all:  631.8644772499683
357  Time for this step:  0.2305661670397967  Time in all:  632.0951726670028
358  Time for this step:  0.23341924999840558  Time in all:  632.3286380829522
359  Time for this step:  0.46697983297053725  Time in all:  632.7956588749657
360  Time for this step:  0.4768445839872584  Time in all:  633.2725794169819
361  Time for this step:  0.445917124976404  Time in all:  633.7185375419795
362  Time for this step:  0.4265953750000335  Time in all:  634.1451654169941
363  Time for this step:  0.36699837498599663  Time in all:  634.5122848749743
364  Time for this step:  0.3919734170194715  Time in all:  634.9043052920024
365  Time for this step:  0.5537534159957431  Time in all:  635.458095207985
366  Time for this step:  0.38856691698310897  Time in all:  635.8467620419688
367  Time for this step:  0.49408991599921137  Time in all:  636.3408920829534
368  Time for this step:  0.5543252910138108  Time in all:  636.8952572079725
369  Time for this step:  0.35380654101027176  Time in all:  637.2492475829786
370  Time for this step:  0.38481058401521295  Time in all:  637.6341020420077
371  Time for this step:  0.5587443329859525  Time in all:  638.1928843329661
372  Time for this step:  0.3858693329966627  Time in all:  638.5788607079885
373  Time for this step:  0.39246179099427536  Time in all:  638.9713637079694
374  Time for this step:  0.5533483329927549  Time in all:  639.5247513749637
375  Time for this step:  0.36280150001402944  Time in all:  639.8876527919783
376  Time for this step:  0.38436945795547217  Time in all:  640.2720603749622
377  Time for this step:  0.4762785829952918  Time in all:  640.748422249977
378  Time for this step:  0.3885587499826215  Time in all:  641.1370227499865
sage: A=CartanMatrix(['D',7])
sage: A
[ 2 -1  0  0  0  0  0]
[-1  2 -1  0  0  0  0]
[ 0 -1  2 -1  0  0  0]
[ 0  0 -1  2 -1  0  0]
[ 0  0  0 -1  2 -1 -1]
[ 0  0  0  0 -1  2  0]
[ 0  0  0  0 -1  0  2]
sage: A=CartanMatrix(['D',7])
....: cplus=[0,2,4]
....: cminus=[1,3,5,6]
....: c=cplus+cminus
....: from time import perf_counter
....: num=0
....: first=perf_counter()
....: for v in parasortables(A,c):
....:     num+=1
....:     start=perf_counter()
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbip(cplus,cminus,14))
....:     end=perf_counter()
....:     if P.dimension()!=0:
....:         print("ALERT: FAILURE")
....:     else:
....:         print(num," Time for this step: ",end-start," Time in all: ",end-f
....: irst)
....: 
1  Time for this step:  0.30835024995030835  Time in all:  0.32576612499542534
2  Time for this step:  0.24709383299341425  Time in all:  0.5729130420368165
3  Time for this step:  85.6976419579587  Time in all:  86.27064741699724
4  Time for this step:  114.29959537502145  Time in all:  200.57028758403612
5  Time for this step:  1.0250890419702046  Time in all:  201.5956409170176
6  Time for this step:  1.1425872499821708  Time in all:  202.73826858401299
7  Time for this step:  87.69110841699876  Time in all:  290.42948441702174
8  Time for this step:  100.07938941702014  Time in all:  390.50892195903
9  Time for this step:  0.4074308339622803  Time in all:  390.9165858339984
10  Time for this step:  126.71409074997064  Time in all:  517.6307230420061
11  Time for this step:  1.3401704999851063  Time in all:  518.9711093340302
12  Time for this step:  99.1727161249728  Time in all:  618.143867250008
13  Time for this step:  51.10482133296318  Time in all:  669.2489263750031
14  Time for this step:  40.62070708302781  Time in all:  709.8696789170499
15  Time for this step:  90.09703562495997  Time in all:  799.9669233339955
16  Time for this step:  55.3265147919883  Time in all:  855.2934850840247
17  Time for this step:  47.22224316600477  Time in all:  902.5159767500008
18  Time for this step:  45.19247562496457  Time in all:  947.7084954589955
19  Time for this step:  34.20567462500185  Time in all:  981.9142167090322
20  Time for this step:  19.756894540973008  Time in all:  1001.6713366250042
21  Time for this step:  25.09228704200359  Time in all:  1026.7636656670365
22  Time for this step:  39.51130137499422  Time in all:  1066.2751974170096
23  Time for this step:  23.367225416994188  Time in all:  1089.6424659170443
24  Time for this step:  18.296082874992862  Time in all:  1107.9385900000343
25  Time for this step:  9.131099666003138  Time in all:  1117.0699192500324
26  Time for this step:  11.080330332973972  Time in all:  1128.1502905000234
27  Time for this step:  9.864843917021062  Time in all:  1138.0151810420211
28  Time for this step:  15.949282500019763  Time in all:  1153.9646239590365
29  Time for this step:  16.08375591604272  Time in all:  1170.0484281250392
30  Time for this step:  20.776568249973934  Time in all:  1190.8250400840188
31  Time for this step:  14.76082895800937  Time in all:  1205.586085750023
32  Time for this step:  30.56506041699322  Time in all:  1236.1511950840359
33  Time for this step:  12.112303833011538  Time in all:  1248.263735000044
34  Time for this step:  16.865540667029563  Time in all:  1265.1293151670252
35  Time for this step:  9.120793082984164  Time in all:  1274.2501497500343
36  Time for this step:  12.364270000020042  Time in all:  1286.6146611670265
37  Time for this step:  20.339941709011327  Time in all:  1306.9546525840415
38  Time for this step:  21.28304966603173  Time in all:  1328.2379335000296
39  Time for this step:  11.770314832974691  Time in all:  1340.0082862499985
40  Time for this step:  7.211050209007226  Time in all:  1347.219564209052
41  Time for this step:  10.863266957981978  Time in all:  1358.0828832500265
42  Time for this step:  9.342682874994352  Time in all:  1367.4256163340178
43  Time for this step:  41.08077108400175  Time in all:  1408.5065584590193
44  Time for this step:  39.666723583010025  Time in all:  1448.1733256670414
45  Time for this step:  34.06115795799997  Time in all:  1482.2347958750324
46  Time for this step:  24.750800791021902  Time in all:  1506.9856468750513
47  Time for this step:  16.816789874981623  Time in all:  1523.8026803749963
48  Time for this step:  11.534095916023944  Time in all:  1535.3368231250206
49  Time for this step:  19.373402416997124  Time in all:  1554.710454459011
50  Time for this step:  16.96419958403567  Time in all:  1571.6746909590438
51  Time for this step:  11.897136999992654  Time in all:  1583.5718721669982
52  Time for this step:  6.615306542022154  Time in all:  1590.18739270902
53  Time for this step:  7.667264541960321  Time in all:  1597.8547053340008
54  Time for this step:  10.621766457974445  Time in all:  1608.4766121249995
55  Time for this step:  10.045025250001345  Time in all:  1618.5216730840039
56  Time for this step:  6.552997916995082  Time in all:  1625.074797917041
57  Time for this step:  7.660235874995124  Time in all:  1632.735073042044
58  Time for this step:  8.876187457994092  Time in all:  1641.611383667041
59  Time for this step:  7.5093559580272995  Time in all:  1649.1207772500347
60  Time for this step:  4.5632556669879705  Time in all:  1653.6841270840378
61  Time for this step:  6.797804666974116  Time in all:  1660.4819749590242
62  Time for this step:  5.980690957978368  Time in all:  1666.4628802500083
63  Time for this step:  4.898152374953497  Time in all:  1671.3610800000024
64  Time for this step:  7.088304959004745  Time in all:  1678.4494807090377
65  Time for this step:  6.591262166039087  Time in all:  1685.0407843750436
66  Time for this step:  4.3100195830338635  Time in all:  1689.3509559170343
67  Time for this step:  30.59677433304023  Time in all:  1719.9477710000356
68  Time for this step:  22.187450334022287  Time in all:  1742.1352633340284
69  Time for this step:  3.386009167006705  Time in all:  1745.5215130420402
70  Time for this step:  17.001893749984447  Time in all:  1762.5234428750118
71  Time for this step:  13.526200457999948  Time in all:  1776.0496852920041
72  Time for this step:  3.252138832991477  Time in all:  1779.3019676250406
73  Time for this step:  7.461158667050768  Time in all:  1786.7631667920505
74  Time for this step:  2.6780023330356926  Time in all:  1789.441285042034
75  Time for this step:  5.506664166983683  Time in all:  1794.947989667009
76  Time for this step:  5.50436974997865  Time in all:  1800.4524581250153
77  Time for this step:  5.216522499977145  Time in all:  1805.6690242500044
78  Time for this step:  9.990806874993723  Time in all:  1815.6599765000283
79  Time for this step:  4.978007874975447  Time in all:  1820.6380253750249
80  Time for this step:  6.513176708016545  Time in all:  1827.1512975420337
81  Time for this step:  3.7042981249978766  Time in all:  1830.8556322090444
82  Time for this step:  6.5372987909941  Time in all:  1837.3930178750306
83  Time for this step:  5.465517083008308  Time in all:  1842.8585748750484
84  Time for this step:  2.677899583010003  Time in all:  1845.5367035420495
85  Time for this step:  5.106156750000082  Time in all:  1850.6429068750003
86  Time for this step:  3.0932215839857236  Time in all:  1853.7362508340157
87  Time for this step:  4.336337167012971  Time in all:  1858.0726385840098
88  Time for this step:  2.8026371249579825  Time in all:  1860.8753701249952
89  Time for this step:  4.045305084029678  Time in all:  1864.920716459048
90  Time for this step:  6.020719708001707  Time in all:  1870.9414836250362
91  Time for this step:  0.5227272920310497  Time in all:  1871.4644115420524
92  Time for this step:  1.4449662090046331  Time in all:  1872.909416959039
93  Time for this step:  9.368524833989795  Time in all:  1882.2780790840043
94  Time for this step:  67.7582255830057  Time in all:  1950.036346375011
95  Time for this step:  0.981738124974072  Time in all:  1951.0183131250087
96  Time for this step:  1.4774447079980746  Time in all:  1952.495800667035
97  Time for this step:  18.605056209024042  Time in all:  1971.1009527090355
98  Time for this step:  31.07014083303511  Time in all:  2002.171130917035
99  Time for this step:  27.052842875011265  Time in all:  2029.2241814590525
100  Time for this step:  17.16609975002939  Time in all:  2046.390336542041
101  Time for this step:  10.177273667010013  Time in all:  2056.5678410840337
102  Time for this step:  16.362262209004257  Time in all:  2072.930144959013
103  Time for this step:  13.048877499997616  Time in all:  2085.979068167042
104  Time for this step:  5.234185333945788  Time in all:  2091.2133802089957
105  Time for this step:  13.121387124992907  Time in all:  2104.3348122920142
106  Time for this step:  13.075606792001054  Time in all:  2117.41061679204
107  Time for this step:  10.126119833032135  Time in all:  2127.536784875032
108  Time for this step:  8.108028416987509  Time in all:  2135.6450138340006
109  Time for this step:  8.82866645802278  Time in all:  2144.4737229170278
110  Time for this step:  5.121231416007504  Time in all:  2149.595056000049
111  Time for this step:  6.045003916020505  Time in all:  2155.640099875047
112  Time for this step:  3.7518763749976642  Time in all:  2159.3921285840333
113  Time for this step:  40.77003445796436  Time in all:  2200.1622103750124
114  Time for this step:  20.646544917020947  Time in all:  2220.8087929590256
115  Time for this step:  3.3542162089725025  Time in all:  2224.1632395840134
116  Time for this step:  21.38559066702146  Time in all:  2245.548866584024
117  Time for this step:  16.172402083000634  Time in all:  2261.721319125034
118  Time for this step:  2.7411737919901498  Time in all:  2264.4626167090028
119  Time for this step:  9.821225874999072  Time in all:  2274.2838749590446
120  Time for this step:  2.7510458329925314  Time in all:  2277.0351377920015
121  Time for this step:  7.092036916001234  Time in all:  2284.127214750042
122  Time for this step:  4.520123291993514  Time in all:  2288.6474369590287
123  Time for this step:  4.701150791021064  Time in all:  2293.3486325000413
124  Time for this step:  3.2246667920262553  Time in all:  2296.573410959041
125  Time for this step:  4.879342416999862  Time in all:  2301.45279566705
126  Time for this step:  2.4570495830266736  Time in all:  2303.909952792048
127  Time for this step:  4.685204834036995  Time in all:  2308.595196459035
128  Time for this step:  4.613550374982879  Time in all:  2313.2088667500066
129  Time for this step:  4.260782291996293  Time in all:  2317.469687334029
130  Time for this step:  5.332628707983531  Time in all:  2322.802412250021
131  Time for this step:  5.705135791969951  Time in all:  2328.5075900420197
132  Time for this step:  4.53589566698065  Time in all:  2333.043530541996
133  Time for this step:  0.31717129197204486  Time in all:  2333.361104334006
134  Time for this step:  0.25453312502941117  Time in all:  2333.615680417046
135  Time for this step:  84.67934112501098  Time in all:  2418.2950974170235
136  Time for this step:  112.78392541699577  Time in all:  2531.0790629590047
137  Time for this step:  1.030896042007953  Time in all:  2532.1101885420503
138  Time for this step:  1.0199025410111062  Time in all:  2533.1301386250416
139  Time for this step:  84.64311979204649  Time in all:  2617.773360167048
140  Time for this step:  96.49814233399229  Time in all:  2714.2715404590126
141  Time for this step:  0.42668341705575585  Time in all:  2714.698462084052
142  Time for this step:  122.67399229196599  Time in all:  2837.372495834017
143  Time for this step:  1.1941704169730656  Time in all:  2838.566890834016
144  Time for this step:  95.7684047910152  Time in all:  2934.3353356250445
145  Time for this step:  49.198428833973594  Time in all:  2983.533978459018
146  Time for this step:  39.18145849998109  Time in all:  3022.7154826670303
147  Time for this step:  88.92785012495006  Time in all:  3111.6435338750016
148  Time for this step:  53.61767970799701  Time in all:  3165.2612542920397
149  Time for this step:  45.77687070798129  Time in all:  3211.038379292004
150  Time for this step:  43.82934425002895  Time in all:  3254.8677731670323
151  Time for this step:  32.736088958045  Time in all:  3287.603903625044
152  Time for this step:  19.02745904098265  Time in all:  3306.631571375008
153  Time for this step:  24.167687791981734  Time in all:  3330.799295792007
154  Time for this step:  37.49953500000993  Time in all:  3368.2990515420097
155  Time for this step:  22.1078299159999  Time in all:  3390.4069247500156
156  Time for this step:  17.36004550004145  Time in all:  3407.767017792037
157  Time for this step:  8.70123483298812  Time in all:  3416.4684604170034
158  Time for this step:  10.568273416953161  Time in all:  3427.0367737920024
159  Time for this step:  9.358370125002693  Time in all:  3436.395182584005
160  Time for this step:  15.185720334004145  Time in all:  3451.581063834019
161  Time for this step:  15.194159791979473  Time in all:  3466.77526420902
162  Time for this step:  19.774617000017315  Time in all:  3486.5499232500442
163  Time for this step:  13.953428249980789  Time in all:  3500.503559834033
164  Time for this step:  29.02590800001053  Time in all:  3529.5295059590135
165  Time for this step:  11.500912917021196  Time in all:  3541.030650917033
166  Time for this step:  15.937617207993753  Time in all:  3556.968310541997
167  Time for this step:  8.789719625026919  Time in all:  3565.758068834024
168  Time for this step:  11.705886833020486  Time in all:  3577.4641401670524
169  Time for this step:  19.172126332996413  Time in all:  3596.63630725001
170  Time for this step:  20.14401450002333  Time in all:  3616.780531709024
171  Time for this step:  11.192520582990255  Time in all:  3627.9730935000116
172  Time for this step:  7.010126666980796  Time in all:  3634.9834277090267
173  Time for this step:  10.426835208956618  Time in all:  3645.4102994590066
174  Time for this step:  8.764304708049167  Time in all:  3654.174652875052
175  Time for this step:  39.091733083012514  Time in all:  3693.2665446250467
176  Time for this step:  38.00866325001698  Time in all:  3731.2752562920214
177  Time for this step:  32.94239162502345  Time in all:  3764.217882042052
178  Time for this step:  24.11308995797299  Time in all:  3788.3310175000224
179  Time for this step:  16.40869341598591  Time in all:  3804.739929125004
180  Time for this step:  11.177328417019453  Time in all:  3815.917299209046
181  Time for this step:  18.77146429097047  Time in all:  3834.688985250017
182  Time for this step:  16.744640457967762  Time in all:  3851.4336822920013
183  Time for this step:  11.705890125012957  Time in all:  3863.1396203340264
184  Time for this step:  6.470491542015225  Time in all:  3869.610329334042
185  Time for this step:  7.484063790994696  Time in all:  3877.0944378750282
186  Time for this step:  10.353239334013779  Time in all:  3887.447827709024
187  Time for this step:  9.652528042031918  Time in all:  3897.1004053340293
188  Time for this step:  6.31967362499563  Time in all:  3903.4201872090343
189  Time for this step:  7.553994957997929  Time in all:  3910.9742255000165
190  Time for this step:  8.64887724997243  Time in all:  3919.6232081250055
191  Time for this step:  7.255575832969043  Time in all:  3926.878821125021
192  Time for this step:  4.465735667035915  Time in all:  3931.3446575840353
193  Time for this step:  6.591691957961302  Time in all:  3937.936397292011
194  Time for this step:  5.9470707919681445  Time in all:  3943.8836926670047
195  Time for this step:  4.736043124983553  Time in all:  3948.6197790000006
196  Time for this step:  6.734562334022485  Time in all:  3955.3544443340506
197  Time for this step:  6.328309333010111  Time in all:  3961.6828001250396
198  Time for this step:  4.179388541961089  Time in all:  3965.8623345840024
199  Time for this step:  29.473782791988924  Time in all:  3995.336160084
200  Time for this step:  21.23762741597602  Time in all:  4016.573831250018
201  Time for this step:  3.243802457989659  Time in all:  4019.817867542035
202  Time for this step:  16.378547250002157  Time in all:  4036.1964554170263
203  Time for this step:  13.049181417038199  Time in all:  4049.245691042044
204  Time for this step:  3.1355734590324573  Time in all:  4052.3813883340335
205  Time for this step:  7.193074000009801  Time in all:  4059.5745010840474
206  Time for this step:  2.5607009580126032  Time in all:  4062.135313875042
207  Time for this step:  5.315531458996702  Time in all:  4067.4508869590354
208  Time for this step:  5.355404833040666  Time in all:  4072.8063899170374
209  Time for this step:  5.048507624946069  Time in all:  4077.854937541997
210  Time for this step:  9.647285041981377  Time in all:  4087.5023682090105
211  Time for this step:  4.771185165969655  Time in all:  4092.273592500016
212  Time for this step:  6.272878457966726  Time in all:  4098.546571250015
213  Time for this step:  3.56227300001774  Time in all:  4102.108885375026
214  Time for this step:  6.290388333029114  Time in all:  4108.3993739170255
215  Time for this step:  5.266129791038111  Time in all:  4113.665542500035
216  Time for this step:  2.587598291982431  Time in all:  4116.25334920903
217  Time for this step:  4.922193458012771  Time in all:  4121.175583500008
218  Time for this step:  2.9072390000219457  Time in all:  4124.0829776250175
219  Time for this step:  4.250709332991391  Time in all:  4128.33373225003
220  Time for this step:  2.6919505419791676  Time in all:  4131.025785209029
221  Time for this step:  3.8438773750094697  Time in all:  4134.86970733403
222  Time for this step:  5.816391625034157  Time in all:  4140.686138417048
223  Time for this step:  0.5281167080393061  Time in all:  4141.214559250046
224  Time for this step:  1.584799959033262  Time in all:  4142.799396584043
225  Time for this step:  9.002782957977615  Time in all:  4151.8022872500005
226  Time for this step:  65.53834466601256  Time in all:  4217.340671125043
227  Time for this step:  0.9859050410450436  Time in all:  4218.32681162504
228  Time for this step:  1.5962760000256822  Time in all:  4219.923128334049
229  Time for this step:  17.903902209014632  Time in all:  4237.82712208404
230  Time for this step:  30.20899279101286  Time in all:  4268.036156750051
231  Time for this step:  25.94879079196835  Time in all:  4293.985175709007
232  Time for this step:  16.56156895897584  Time in all:  4310.5467837090255
233  Time for this step:  9.653320916986559  Time in all:  4320.200309959007
234  Time for this step:  15.790467875020113  Time in all:  4335.990815417026
235  Time for this step:  12.520171667041723  Time in all:  4348.51102629205
236  Time for this step:  4.982560959004331  Time in all:  4353.493708334048
237  Time for this step:  12.631890541990288  Time in all:  4366.1256429590285
238  Time for this step:  12.391354958002921  Time in all:  4378.5172161250375
239  Time for this step:  9.74928774998989  Time in all:  4388.2665417090175
240  Time for this step:  7.710721333976835  Time in all:  4395.977455459011
241  Time for this step:  8.43774637504248  Time in all:  4404.415245917044
242  Time for this step:  4.928789041994605  Time in all:  4409.344122834038
243  Time for this step:  5.822562415967695  Time in all:  4415.166728375014
244  Time for this step:  3.6238298329990357  Time in all:  4418.790698166995
245  Time for this step:  39.32622370804893  Time in all:  4458.116960792046
246  Time for this step:  19.81230454199249  Time in all:  4477.929305917001
247  Time for this step:  3.196913541003596  Time in all:  4481.126431625045
248  Time for this step:  20.56383212498622  Time in all:  4501.690299084003
249  Time for this step:  15.541083958989475  Time in all:  4517.231425209029
250  Time for this step:  2.7151703749550506  Time in all:  4519.946716125007
251  Time for this step:  9.38013999996474  Time in all:  4529.326910834003
252  Time for this step:  2.6230295000132173  Time in all:  4531.950042750046
253  Time for this step:  6.815724624961149  Time in all:  4538.765802000009
254  Time for this step:  4.345753124973271  Time in all:  4543.11173975002
255  Time for this step:  4.544079041981604  Time in all:  4547.655857792008
256  Time for this step:  2.9726669999654405  Time in all:  4550.628628792008
257  Time for this step:  4.6967952090199105  Time in all:  4555.325460959051
258  Time for this step:  2.4538366670021787  Time in all:  4557.77939304203
259  Time for this step:  4.433840208046604  Time in all:  4562.213272042049
260  Time for this step:  4.402210125001147  Time in all:  4566.615594709001
261  Time for this step:  4.183818707999308  Time in all:  4570.7994545420515
262  Time for this step:  5.148591207980644  Time in all:  4575.948241750011
263  Time for this step:  5.519787582976278  Time in all:  4581.468067375012
264  Time for this step:  4.396798542002216  Time in all:  4585.864908459014
265  Time for this step:  0.6794311249977909  Time in all:  4586.544545667013
266  Time for this step:  0.6673374999663793  Time in all:  4587.2119177500135
267  Time for this step:  15.496019959042314  Time in all:  4602.708015584038
268  Time for this step:  9.347726417006925  Time in all:  4612.05578366702
269  Time for this step:  0.9305324999731965  Time in all:  4612.986499042017
270  Time for this step:  9.97771291603567  Time in all:  4622.964247875032
271  Time for this step:  5.022043999982998  Time in all:  4627.986477625032
272  Time for this step:  5.448899290990084  Time in all:  4633.43541575002
273  Time for this step:  5.524397749977652  Time in all:  4638.959929834004
274  Time for this step:  6.875585000030696  Time in all:  4645.835555875034
275  Time for this step:  5.534242416964844  Time in all:  4651.369844041998
276  Time for this step:  3.6623917919932865  Time in all:  4655.032321542036
277  Time for this step:  4.186555166961625  Time in all:  4659.218915709003
278  Time for this step:  4.474661999964155  Time in all:  4663.693767459015
279  Time for this step:  3.1694378330139443  Time in all:  4666.863244875043
280  Time for this step:  1.779801500029862  Time in all:  4668.643157125043
281  Time for this step:  2.5458308330271393  Time in all:  4671.1890302920365
282  Time for this step:  2.4593895000289194  Time in all:  4673.648464917031
283  Time for this step:  9.218325291993096  Time in all:  4682.8669072090415
284  Time for this step:  3.942679667030461  Time in all:  4686.809628709045
285  Time for this step:  5.471471290977206  Time in all:  4692.281192000024
286  Time for this step:  2.6213547499501146  Time in all:  4694.902584625001
287  Time for this step:  4.8189584169886075  Time in all:  4699.721632042027
288  Time for this step:  3.2502953340299428  Time in all:  4702.971967084042
289  Time for this step:  1.6225349170272239  Time in all:  4704.59458379203
290  Time for this step:  2.6074972079950385  Time in all:  4707.202119917027
291  Time for this step:  1.5666611669585109  Time in all:  4708.768868084007
292  Time for this step:  2.7879796660272405  Time in all:  4711.556885500031
293  Time for this step:  0.8872591669787653  Time in all:  4712.444290417014
294  Time for this step:  1.2883425829932094  Time in all:  4713.732666875003
295  Time for this step:  3.084864333970472  Time in all:  4716.817613209016
296  Time for this step:  3.505659584014211  Time in all:  4720.323311584012
297  Time for this step:  3.2943861670210026  Time in all:  4723.617738459026
298  Time for this step:  1.8359732499811798  Time in all:  4725.453813042026
299  Time for this step:  2.1691229160060175  Time in all:  4727.622976625047
300  Time for this step:  2.6789890410145745  Time in all:  4730.30200312502
301  Time for this step:  2.4713700839783996  Time in all:  4732.773476459028
302  Time for this step:  3.134758582978975  Time in all:  4735.908270500018
303  Time for this step:  1.6717376669985242  Time in all:  4737.5801884170505
304  Time for this step:  2.5497824160265736  Time in all:  4740.130006625026
305  Time for this step:  2.1605806250008754  Time in all:  4742.290671917028
306  Time for this step:  2.122749333968386  Time in all:  4744.413457709015
307  Time for this step:  1.0054874169873074  Time in all:  4745.419109709037
308  Time for this step:  1.1402848750003614  Time in all:  4746.559434292023
309  Time for this step:  1.1508460830082186  Time in all:  4747.710356875032
310  Time for this step:  1.697705332946498  Time in all:  4749.408096041996
311  Time for this step:  1.6504141250043176  Time in all:  4751.058614834037
312  Time for this step:  1.7498794590355828  Time in all:  4752.808530584036
313  Time for this step:  1.8482337500317954  Time in all:  4754.656852417043
314  Time for this step:  1.1620155000127852  Time in all:  4755.818908542045
315  Time for this step:  1.4178817920037545  Time in all:  4757.236864584032
316  Time for this step:  1.5173549170140177  Time in all:  4758.754260709044
317  Time for this step:  2.003389707999304  Time in all:  4760.757762124995
318  Time for this step:  2.5683330000028946  Time in all:  4763.326136042015
319  Time for this step:  2.484046416997444  Time in all:  4765.810369667015
320  Time for this step:  1.6812311250250787  Time in all:  4767.491644292022
321  Time for this step:  2.796225374971982  Time in all:  4770.287908500002
322  Time for this step:  1.461626290983986  Time in all:  4771.749652000028
323  Time for this step:  2.160326916957274  Time in all:  4773.910022958997
324  Time for this step:  2.068713624961674  Time in all:  4775.978823459009
325  Time for this step:  1.4969018330448307  Time in all:  4777.47576179204
326  Time for this step:  1.2908786250045523  Time in all:  4778.766675709048
327  Time for this step:  1.5796600420144387  Time in all:  4780.346447084041
328  Time for this step:  3.0382667499943636  Time in all:  4783.384756250016
329  Time for this step:  3.1810189170064405  Time in all:  4786.5658692920115
330  Time for this step:  2.3742874580202624  Time in all:  4788.9401986250305
331  Time for this step:  2.835283874999732  Time in all:  4791.775528167025
332  Time for this step:  1.7812304580002092  Time in all:  4793.556874750007
333  Time for this step:  2.4703383750165813  Time in all:  4796.027249834035
334  Time for this step:  1.5515419589937665  Time in all:  4797.578883334005
335  Time for this step:  1.8534651250229217  Time in all:  4799.4323855420225
336  Time for this step:  4.160272667009849  Time in all:  4803.592751042044
337  Time for this step:  3.7502213749685325  Time in all:  4807.3430121249985
338  Time for this step:  1.717144374968484  Time in all:  4809.060345500009
339  Time for this step:  2.108152417000383  Time in all:  4811.168540667044
340  Time for this step:  3.099687207955867  Time in all:  4814.268312875007
341  Time for this step:  4.586841041978914  Time in all:  4818.855194917007
342  Time for this step:  1.7464664590079337  Time in all:  4820.6017934590345
343  Time for this step:  2.4456334579735994  Time in all:  4823.047461792012
344  Time for this step:  1.5635340840090066  Time in all:  4824.611094459018
345  Time for this step:  1.850251458992716  Time in all:  4826.46138708404
346  Time for this step:  4.122820375021547  Time in all:  4830.584292917047
347  Time for this step:  3.7640471669728868  Time in all:  4834.348377584014
348  Time for this step:  1.7136905000079423  Time in all:  4836.062172000005
349  Time for this step:  2.1071904589771293  Time in all:  4838.169402334024
350  Time for this step:  3.0777723340434022  Time in all:  4841.247258959047
351  Time for this step:  4.6084309160360135  Time in all:  4845.855723625049
352  Time for this step:  1.1830936249461956  Time in all:  4847.038924499997
353  Time for this step:  1.4607870409963652  Time in all:  4848.499752625008
354  Time for this step:  2.7446896249894053  Time in all:  4851.244479959016
355  Time for this step:  1.1037671670201235  Time in all:  4852.348328584048
356  Time for this step:  2.140467917022761  Time in all:  4854.488832209026
357  Time for this step:  0.639454709016718  Time in all:  4855.128576209012
358  Time for this step:  0.7560421249945648  Time in all:  4855.884664750018
359  Time for this step:  0.8386095000314526  Time in all:  4856.723353542038
360  Time for this step:  0.4908896250417456  Time in all:  4857.2142802920425
361  Time for this step:  392.7681503749918  Time in all:  5249.982513834024
362  Time for this step:  829.5188531669555  Time in all:  6079.501415167004
363  Time for this step:  831.3174157080357  Time in all:  6910.819030042039
364  Time for this step:  215.0579339999822  Time in all:  7125.877007000032
365  Time for this step:  81.99397583300015  Time in all:  7207.871026875044
366  Time for this step:  266.21733004198177  Time in all:  7474.088589709019
367  Time for this step:  1044.8051083750324  Time in all:  8518.893740500032
368  Time for this step:  1046.0114844590425  Time in all:  9564.905443209049
369  Time for this step:  255.8965828329674  Time in all:  9820.802068167017
370  Time for this step:  139.09885299997404  Time in all:  9959.900967792026
371  Time for this step:  117.22801512497244  Time in all:  10077.129222000018
372  Time for this step:  65.12931820802623  Time in all:  10142.258580000023
373  Time for this step:  112.28892675001407  Time in all:  10254.547734250023
374  Time for this step:  90.9995404590154  Time in all:  10345.547310084046
375  Time for this step:  116.90534570801537  Time in all:  10462.452874875045
376  Time for this step:  64.68077425000956  Time in all:  10527.133688875008
377  Time for this step:  111.78809412498958  Time in all:  10638.921973999997
378  Time for this step:  90.50453716702759  Time in all:  10729.426554709033
379  Time for this step:  27.182393875031266  Time in all:  10756.60913658404
380  Time for this step:  30.373791875026654  Time in all:  10786.982971709047
381  Time for this step:  80.4646720829769  Time in all:  10867.447834916995
382  Time for this step:  49.99455479095923  Time in all:  10917.442426875
383  Time for this step:  49.81182949995855  Time in all:  10967.254476875009
384  Time for this step:  21.170133874984458  Time in all:  10988.424662250036
385  Time for this step:  15.086111499986146  Time in all:  11003.510817500006
386  Time for this step:  0.8247582080075517  Time in all:  11004.335827750037
387  Time for this step:  41.809833624982275  Time in all:  11046.145700249996
388  Time for this step:  43.357497499964666  Time in all:  11089.503245625005
389  Time for this step:  43.14657733304193  Time in all:  11132.650029875047
390  Time for this step:  17.930339541984722  Time in all:  11150.580410916999
391  Time for this step:  54.47215099999448  Time in all:  11205.052764000022
392  Time for this step:  32.50743133301148  Time in all:  11237.560237042024
393  Time for this step:  32.22077066602651  Time in all:  11269.78120950004
394  Time for this step:  14.865171082958113  Time in all:  11284.646419416997
395  Time for this step:  8.438446582993492  Time in all:  11293.084907500015
396  Time for this step:  7.6110847080126405  Time in all:  11300.696118125052
397  Time for this step:  53.16192745801527  Time in all:  11353.858089875022
398  Time for this step:  36.375735375040676  Time in all:  11390.233866709052
399  Time for this step:  25.394149792031385  Time in all:  11415.628220542043
400  Time for this step:  18.44756558397785  Time in all:  11434.075828959001
401  Time for this step:  7.761620500008576  Time in all:  11441.837696959032
402  Time for this step:  53.33128320798278  Time in all:  11495.169019417022
403  Time for this step:  36.48613162501715  Time in all:  11531.655195875035
404  Time for this step:  25.517595208017156  Time in all:  11557.172990875028
405  Time for this step:  18.454251583956648  Time in all:  11575.627287084004
406  Time for this step:  53.00124866596889  Time in all:  11628.62873687502
407  Time for this step:  16.488371999992523  Time in all:  11645.117159334011
408  Time for this step:  5.6571243749931455  Time in all:  11650.774513917044
409  Time for this step:  4.229248458985239  Time in all:  11655.00380283402
410  Time for this step:  5.696926249947865  Time in all:  11660.700775209
411  Time for this step:  5.750225625000894  Time in all:  11666.451085500012
412  Time for this step:  2.675590666010976  Time in all:  11669.126716000028
413  Time for this step:  2.131788416998461  Time in all:  11671.258555542037
414  Time for this step:  340.0812866250053  Time in all:  12011.340008167026
415  Time for this step:  414.4694092909922  Time in all:  12425.809459250013
416  Time for this step:  414.51992620900273  Time in all:  12840.329600209021
417  Time for this step:  82.8175492080045  Time in all:  12923.147187417024
418  Time for this step:  199.60825958300848  Time in all:  13122.755673292035
419  Time for this step:  165.6478220000281  Time in all:  13288.403536959027
420  Time for this step:  165.4531898330315  Time in all:  13453.856924042047
421  Time for this step:  47.63399295898853  Time in all:  13501.490957959031
422  Time for this step:  5.378418417007197  Time in all:  13506.869414792047
423  Time for this step:  8.525465874990914  Time in all:  13515.394980250043
424  Time for this step:  6.513968375045806  Time in all:  13521.908989625052
425  Time for this step:  8.57603083300637  Time in all:  13530.485217625042
426  Time for this step:  6.496818874962628  Time in all:  13536.98207204201
427  Time for this step:  3.588024291966576  Time in all:  13540.570141459
428  Time for this step:  5.401381125033367  Time in all:  13545.97164737503
429  Time for this step:  4.417684374959208  Time in all:  13550.38936970901
430  Time for this step:  7.199444999976549  Time in all:  13557.588851834007
431  Time for this step:  7.256758917006664  Time in all:  13564.84569741704
432  Time for this step:  3.4120918750413693  Time in all:  13568.25783491705
433  Time for this step:  2.6663560000015423  Time in all:  13570.924229959026
434  Time for this step:  1.256671791023109  Time in all:  13572.181150500022
435  Time for this step:  8.76744212495396  Time in all:  13580.948630416999
436  Time for this step:  1.450434333004523  Time in all:  13582.39925716701
437  Time for this step:  5.719091291015502  Time in all:  13588.118386000046
438  Time for this step:  6.937256499950308  Time in all:  13595.055743167002
439  Time for this step:  5.064543791988399  Time in all:  13600.120326917036
440  Time for this step:  4.994556125020608  Time in all:  13605.114977417048
441  Time for this step:  5.53397666598903  Time in all:  13610.648998000019
442  Time for this step:  3.829410999955144  Time in all:  13614.478451167
443  Time for this step:  6.614114249998238  Time in all:  13621.092691625003
444  Time for this step:  7.640518166997936  Time in all:  13628.733251209022
445  Time for this step:  4.781363415997475  Time in all:  13633.51471537503
446  Time for this step:  7.158719667000696  Time in all:  13640.673474167008
447  Time for this step:  4.71447383397026  Time in all:  13645.387985709007
448  Time for this step:  1.3954277919838205  Time in all:  13646.783573209017
449  Time for this step:  8.643924792006146  Time in all:  13655.427533917013
450  Time for this step:  1.3984455000027083  Time in all:  13656.82619737502
451  Time for this step:  5.732697291998193  Time in all:  13662.558931042033
452  Time for this step:  6.905473583959974  Time in all:  13669.464509334008
453  Time for this step:  5.055484290991444  Time in all:  13674.520031624998
454  Time for this step:  4.9225254590273835  Time in all:  13679.44270308403
455  Time for this step:  5.615918292023707  Time in all:  13685.058667667035
456  Time for this step:  3.738016375049483  Time in all:  13688.796720750048
457  Time for this step:  6.453554707986768  Time in all:  13695.250393541995
458  Time for this step:  7.550458666984923  Time in all:  13702.800889834005
459  Time for this step:  4.725316791969817  Time in all:  13707.526298417011
460  Time for this step:  7.124453833035659  Time in all:  13714.650792625034
461  Time for this step:  4.812783750006929  Time in all:  13719.46361741703
462  Time for this step:  1.2552376249805093  Time in all:  13720.719083292002
463  Time for this step:  1.6790996250347234  Time in all:  13722.398221750045
464  Time for this step:  2.5515777080436237  Time in all:  13724.949836250045
465  Time for this step:  1.4899025000049733  Time in all:  13726.439828875009
466  Time for this step:  2.183813750045374  Time in all:  13728.623676250048
467  Time for this step:  1.8416210410068743  Time in all:  13730.465444500034
468  Time for this step:  3.5947629580041394  Time in all:  13734.060247250018
469  Time for this step:  3.688131333037745  Time in all:  13737.748456875037
470  Time for this step:  2.2024918330134824  Time in all:  13739.950985125033
471  Time for this step:  2.9398084170534275  Time in all:  13742.890835209051
472  Time for this step:  4.161587000009604  Time in all:  13747.052499875019
473  Time for this step:  4.05164129199693  Time in all:  13751.104178834008
474  Time for this step:  4.187316833005752  Time in all:  13755.291592542024
475  Time for this step:  4.154950625030324  Time in all:  13759.446580500051
476  Time for this step:  2.1802738750120625  Time in all:  13761.626897500013
477  Time for this step:  0.26236620900454  Time in all:  13761.889473834017
478  Time for this step:  0.19847116601886228  Time in all:  13762.087977625022
479  Time for this step:  0.3033534580026753  Time in all:  13762.391404792026
480  Time for this step:  0.23239241598639637  Time in all:  13762.623825000017
481  Time for this step:  0.3882233750191517  Time in all:  13763.012110625044
482  Time for this step:  0.41010241699405015  Time in all:  13763.422240709013
483  Time for this step:  2.3080653750221245  Time in all:  13765.730380334018
484  Time for this step:  1.765886541979853  Time in all:  13767.496306709014
485  Time for this step:  1.589827875024639  Time in all:  13769.086173334043
486  Time for this step:  0.49616895901272073  Time in all:  13769.582459459023
487  Time for this step:  1.5125864580040798  Time in all:  13771.095073167002
488  Time for this step:  1.3420808330411091  Time in all:  13772.437238917046
489  Time for this step:  1.6269404999911785  Time in all:  13774.06421737501
490  Time for this step:  1.7071632079896517  Time in all:  13775.771420542034
491  Time for this step:  0.41808025003410876  Time in all:  13776.189652750036
492  Time for this step:  0.3078061669948511  Time in all:  13776.497493959032
493  Time for this step:  0.3799171250429936  Time in all:  13776.87746841705
494  Time for this step:  0.28253512497758493  Time in all:  13777.16002983402
495  Time for this step:  0.5972183340345509  Time in all:  13777.757303209044
496  Time for this step:  0.5106325409724377  Time in all:  13778.267970375018
497  Time for this step:  2.7144005420268513  Time in all:  13780.98244583403
498  Time for this step:  2.1504871250363067  Time in all:  13783.132970667037
499  Time for this step:  2.1560932499705814  Time in all:  13785.289105208998
500  Time for this step:  0.7227007500478067  Time in all:  13786.011931000045
501  Time for this step:  1.9204654159839265  Time in all:  13787.932432000001
502  Time for this step:  1.7501654999796301  Time in all:  13789.682674542011
503  Time for this step:  2.2051328329835087  Time in all:  13791.887846000027
504  Time for this step:  2.723813707998488  Time in all:  13794.611713625025
505  Time for this step:  0.4151248749694787  Time in all:  13795.027101667016
506  Time for this step:  0.3046124579850584  Time in all:  13795.331752875005
507  Time for this step:  0.37719237501733005  Time in all:  13795.709022209048
508  Time for this step:  0.27853545802645385  Time in all:  13795.987591667043
509  Time for this step:  0.5900573330000043  Time in all:  13796.577707750024
510  Time for this step:  0.5013507500407286  Time in all:  13797.079095334047
511  Time for this step:  2.729958000010811  Time in all:  13799.809138250013
512  Time for this step:  2.1272664589923806  Time in all:  13801.936443334038
513  Time for this step:  2.161180208029691  Time in all:  13804.097664042027
514  Time for this step:  0.7293382500065491  Time in all:  13804.827121084032
515  Time for this step:  1.9056108329677954  Time in all:  13806.732771167008
516  Time for this step:  1.7379794999724254  Time in all:  13808.470836042019
517  Time for this step:  2.20857595896814  Time in all:  13810.679450833995
518  Time for this step:  2.7278545829467475  Time in all:  13813.407346374996
519  Time for this step:  0.3466522080125287  Time in all:  13813.754144750012
520  Time for this step:  0.27056166698457673  Time in all:  13814.02473283402
521  Time for this step:  0.3104620419908315  Time in all:  13814.335254084028
522  Time for this step:  0.24871329200686887  Time in all:  13814.584001584037
523  Time for this step:  0.5179456250043586  Time in all:  13815.102020167047
524  Time for this step:  0.4229626660235226  Time in all:  13815.525018500048
525  Time for this step:  1.623961417004466  Time in all:  13817.149103167001
526  Time for this step:  1.541187416005414  Time in all:  13818.690326750046
527  Time for this step:  1.4755846250336617  Time in all:  13820.165956250043
528  Time for this step:  0.5420936670270748  Time in all:  13820.708161667048
529  Time for this step:  1.2680162090109661  Time in all:  13821.97620920901
530  Time for this step:  1.2703227499732748  Time in all:  13823.246607417008
531  Time for this step:  1.6359846250270493  Time in all:  13824.882630209031
532  Time for this step:  2.009407375007868  Time in all:  13826.892080500023
533  Time for this step:  0.717624209006317  Time in all:  13827.609836709045
534  Time for this step:  1.8726473749848083  Time in all:  13829.482519834011
535  Time for this step:  2.2568079589982517  Time in all:  13831.73936908401
536  Time for this step:  1.5402923749643378  Time in all:  13833.279742959014
537  Time for this step:  1.8332658750005066  Time in all:  13835.11304908403
538  Time for this step:  0.979253042023629  Time in all:  13836.092418667045
539  Time for this step:  2.5499084999901243  Time in all:  13838.64236383402
540  Time for this step:  3.1494020840036683  Time in all:  13841.791802834021
541  Time for this step:  2.1097290000179783  Time in all:  13843.90163175005
542  Time for this step:  3.0846677499939688  Time in all:  13846.986342584016
543  Time for this step:  0.9678421670105308  Time in all:  13847.954385209014
544  Time for this step:  2.456897708005272  Time in all:  13850.41131754202
545  Time for this step:  3.159732125001028  Time in all:  13853.57108654204
546  Time for this step:  2.0951792920241132  Time in all:  13855.666349792038
547  Time for this step:  3.09218812501058  Time in all:  13858.758576459019
548  Time for this step:  0.7140637919656001  Time in all:  13859.472755666997
549  Time for this step:  1.6143087500240654  Time in all:  13861.08709879202
550  Time for this step:  1.9416824160143733  Time in all:  13863.028818125022
551  Time for this step:  1.4411813750048168  Time in all:  13864.470091625
552  Time for this step:  2.2536309579736553  Time in all:  13866.723757250002
553  Time for this step:  1.2618934159982018  Time in all:  13867.985777000024
554  Time for this step:  1.343230583006516  Time in all:  13869.329046000028
555  Time for this step:  2.0013015419826843  Time in all:  13871.330440459016
556  Time for this step:  2.0487380840349942  Time in all:  13873.379214709043
557  Time for this step:  2.0374405419570394  Time in all:  13875.416769333999
558  Time for this step:  2.0146329579874873  Time in all:  13877.431441500026
559  Time for this step:  1.287105374969542  Time in all:  13878.718622084009
560  Time for this step:  1.2206245419802144  Time in all:  13879.93928220903
561  Time for this step:  2.4296169169829227  Time in all:  13882.368990292016
562  Time for this step:  4.272407624986954  Time in all:  13886.641431541997
563  Time for this step:  4.165211500017904  Time in all:  13890.80671379203
564  Time for this step:  2.1852676249691285  Time in all:  13892.992020417005
565  Time for this step:  0.31108037498779595  Time in all:  13893.303330791998
566  Time for this step:  0.3228409580187872  Time in all:  13893.626205250039
567  Time for this step:  0.3256750419968739  Time in all:  13893.951962916995
568  Time for this step:  0.18286974995862693  Time in all:  13894.134865125001
569  Time for this step:  0.37842891697073355  Time in all:  13894.513356334006
570  Time for this step:  0.38028479099739343  Time in all:  13894.893675500003
571  Time for this step:  0.38411741703748703  Time in all:  13895.277873542043
572  Time for this step:  0.22698375000618398  Time in all:  13895.504892917
573  Time for this step:  102.22827850002795  Time in all:  13997.733193667023
574  Time for this step:  1.4375757499947213  Time in all:  13999.170990125043
575  Time for this step:  294.2789184580324  Time in all:  14293.44994762505
576  Time for this step:  1.4167790000210516  Time in all:  14294.866947334027
577  Time for this step:  294.7634623750346  Time in all:  14589.630446292053
578  Time for this step:  86.80702045798535  Time in all:  14676.43751966703
579  Time for this step:  1.1349125420092605  Time in all:  14677.572665542015
580  Time for this step:  28.278671749983914  Time in all:  14705.851372250007
581  Time for this step:  46.07870508299675  Time in all:  14751.930125667015
582  Time for this step:  46.34434304095339  Time in all:  14798.274676
583  Time for this step:  18.187116542016156  Time in all:  14816.461831417051
584  Time for this step:  1.757216583006084  Time in all:  14818.219092292013
585  Time for this step:  0.3424714580178261  Time in all:  14818.56176375004
586  Time for this step:  0.3330308750155382  Time in all:  14818.894829084049
587  Time for this step:  0.3414789169910364  Time in all:  14819.236377792025
588  Time for this step:  0.22671037499094382  Time in all:  14819.463120875007
589  Time for this step:  0.3631618329673074  Time in all:  14819.826362624997
590  Time for this step:  0.36026862502330914  Time in all:  14820.186659959028
591  Time for this step:  0.3719227920519188  Time in all:  14820.55865095905
592  Time for this step:  0.2240700830006972  Time in all:  14820.782754417043
593  Time for this step:  68.68420324998442  Time in all:  14889.466984667
594  Time for this step:  1.2364657910075039  Time in all:  14890.703670000017
595  Time for this step:  196.79556095896987  Time in all:  15087.499270959
596  Time for this step:  1.2059977920143865  Time in all:  15088.70549529203
597  Time for this step:  197.08185170800425  Time in all:  15285.787386625016
598  Time for this step:  63.019625874992926  Time in all:  15348.807058459031
599  Time for this step:  0.8360659589525312  Time in all:  15349.643346583995
600  Time for this step:  28.066923874954227  Time in all:  15377.710303417
601  Time for this step:  50.33850483299466  Time in all:  15428.048852000036
602  Time for this step:  50.483867625007406  Time in all:  15478.53293116705
603  Time for this step:  18.812187208037358  Time in all:  15497.345166292042
604  Time for this step:  1.2433622499811463  Time in all:  15498.588569000014
605  Time for this step:  0.8740551249939017  Time in all:  15499.462771125021
606  Time for this step:  1.3715441669919528  Time in all:  15500.834347792028
607  Time for this step:  1.527016084000934  Time in all:  15502.361446459021
608  Time for this step:  3.770623166987207  Time in all:  15506.132110084
609  Time for this step:  2.826280292007141  Time in all:  15508.958428417041
610  Time for this step:  0.7932957090088166  Time in all:  15509.751863334037
611  Time for this step:  1.352120499999728  Time in all:  15511.104022834043
612  Time for this step:  1.2600242919870652  Time in all:  15512.364126208995
613  Time for this step:  2.193877999961842  Time in all:  15514.558043833997
614  Time for this step:  2.0801910830195993  Time in all:  15516.638270375028
615  Time for this step:  0.8920597079559229  Time in all:  15517.530463750008
616  Time for this step:  1.4002068749978207  Time in all:  15518.930714375048
617  Time for this step:  1.5641339999856427  Time in all:  15520.494952542009
618  Time for this step:  3.791262957965955  Time in all:  15524.286252167018
619  Time for this step:  2.8093318750034086  Time in all:  15527.095625000016
620  Time for this step:  0.8113408329663798  Time in all:  15527.907121917
621  Time for this step:  1.3781825419864617  Time in all:  15529.285340459028
622  Time for this step:  1.2960244580172002  Time in all:  15530.581463167036
623  Time for this step:  2.218115041963756  Time in all:  15532.799613334006
624  Time for this step:  2.0777465410064906  Time in all:  15534.877403250022
625  Time for this step:  1.0632152920006774  Time in all:  15535.940719792037
626  Time for this step:  0.9381257080240175  Time in all:  15536.878881250042
627  Time for this step:  0.9944664160138927  Time in all:  15537.87343162502
628  Time for this step:  0.9590552910231054  Time in all:  15538.832528375031
629  Time for this step:  0.9574449170031585  Time in all:  15539.790110959031
630  Time for this step:  2.0155972079955973  Time in all:  15541.805749499996
631  Time for this step:  2.121237999992445  Time in all:  15543.927064959018
632  Time for this step:  2.337954292015638  Time in all:  15546.265057542012
633  Time for this step:  1.6948622089694254  Time in all:  15547.959960334003
634  Time for this step:  0.8924315830226988  Time in all:  15548.85251312505
635  Time for this step:  1.8721572089707479  Time in all:  15550.724702709005
636  Time for this step:  1.9563561669783667  Time in all:  15552.681142584013
637  Time for this step:  1.642820707987994  Time in all:  15554.323999417014
638  Time for this step:  1.4337467910372652  Time in all:  15555.75778850005
639  Time for this step:  2.1584101250045933  Time in all:  15557.916291792004
640  Time for this step:  1.9841553749865852  Time in all:  15559.900490125001
641  Time for this step:  1.9603626670432277  Time in all:  15561.860949334048
642  Time for this step:  1.9740516250021756  Time in all:  15563.835037125042
643  Time for this step:  2.0363686670316383  Time in all:  15565.871517209045
644  Time for this step:  1.98603320796974  Time in all:  15567.857583375007
645  Time for this step:  2.0574274999671616  Time in all:  15569.915092625015
646  Time for this step:  1.8776295830029994  Time in all:  15571.792762666999
647  Time for this step:  0.9177487920387648  Time in all:  15572.710592417046
648  Time for this step:  0.8248793330276385  Time in all:  15573.535505750042
649  Time for this step:  0.714166917023249  Time in all:  15574.249876084039
650  Time for this step:  0.5993593750172295  Time in all:  15574.849269125029
651  Time for this step:  0.6215751249692403  Time in all:  15575.470909124997
652  Time for this step:  0.3672070419997908  Time in all:  15575.838148459035
653  Time for this step:  0.6546230000094511  Time in all:  15576.492843584041
654  Time for this step:  0.6472632500226609  Time in all:  15577.140136125032
655  Time for this step:  0.6584869590005837  Time in all:  15577.798704209039
656  Time for this step:  0.35556154197547585  Time in all:  15578.154297458997
657  Time for this step:  164.49741479195654  Time in all:  15742.651741834008
658  Time for this step:  1.724457041011192  Time in all:  15744.37641937501
659  Time for this step:  304.5845955000259  Time in all:  16048.961050417041
660  Time for this step:  1.6719292500056326  Time in all:  16050.633199084026
661  Time for this step:  299.712108540989  Time in all:  16350.345342000015
662  Time for this step:  52.04207254195353  Time in all:  16402.387452833995
663  Time for this step:  0.9214107500156388  Time in all:  16403.309097167046
664  Time for this step:  52.62246245803544  Time in all:  16455.931595500035
665  Time for this step:  70.21134404098848  Time in all:  16526.142976625008
666  Time for this step:  70.34087479196023  Time in all:  16596.484038666997
667  Time for this step:  17.945026875007898  Time in all:  16614.42910425004
668  Time for this step:  1.8244699999922886  Time in all:  16616.25361379201
669  Time for this step:  1.4446258749812841  Time in all:  16617.69834029203
670  Time for this step:  1.694844458019361  Time in all:  16619.393220417027
671  Time for this step:  1.6937310410430655  Time in all:  16621.087024875043
672  Time for this step:  2.7359130830154754  Time in all:  16623.82297691703
673  Time for this step:  2.86467395798536  Time in all:  16626.687687750033
674  Time for this step:  1.39496245799819  Time in all:  16628.082771000045
675  Time for this step:  1.7414189159753732  Time in all:  16629.824224125012
676  Time for this step:  1.8521937920013443  Time in all:  16631.67648779205
677  Time for this step:  2.683804624946788  Time in all:  16634.360326541995
678  Time for this step:  2.875773791980464  Time in all:  16637.236137458996
679  Time for this step:  1.8230342090246268  Time in all:  16639.05936545902
680  Time for this step:  1.8572529590455815  Time in all:  16640.916649459046
681  Time for this step:  1.513823000015691  Time in all:  16642.430605375033
682  Time for this step:  3.1553765420103446  Time in all:  16645.58601745905
683  Time for this step:  3.107248999993317  Time in all:  16648.693333917006
684  Time for this step:  2.279204040998593  Time in all:  16650.972572500003
685  Time for this step:  2.092437000013888  Time in all:  16653.065043584036
686  Time for this step:  2.7068094999995083  Time in all:  16655.77192733402
687  Time for this step:  2.5441284580156207  Time in all:  16658.31608579203
688  Time for this step:  2.700613124994561  Time in all:  16661.016799959005
689  Time for this step:  2.5121262909960933  Time in all:  16663.528962125012
690  Time for this step:  1.7983558329869993  Time in all:  16665.327352916996
691  Time for this step:  0.687390667037107  Time in all:  16666.014867084043
692  Time for this step:  0.670847584027797  Time in all:  16666.685741959023
693  Time for this step:  1.1279797500465065  Time in all:  16667.813799167052
694  Time for this step:  1.0180580409942195  Time in all:  16668.831895375042
695  Time for this step:  1.1967760000261478  Time in all:  16670.028752625047
696  Time for this step:  1.013253082986921  Time in all:  16671.042036667
697  Time for this step:  0.7061199999880046  Time in all:  16671.748226666998
698  Time for this step:  0.7135520000010729  Time in all:  16672.46180179203
699  Time for this step:  0.8052347500342876  Time in all:  16673.26712266705
700  Time for this step:  0.8804707499803044  Time in all:  16674.147618542018
701  Time for this step:  1.338294750021305  Time in all:  16675.48598008405
702  Time for this step:  1.2432060000137426  Time in all:  16676.72921720904
703  Time for this step:  1.355293333006557  Time in all:  16678.08460141701
704  Time for this step:  1.303093374997843  Time in all:  16679.387731875002
705  Time for this step:  0.8043702080030926  Time in all:  16680.19217725005
706  Time for this step:  0.7040477090049535  Time in all:  16680.896251209022
707  Time for this step:  1.4744558749953285  Time in all:  16682.370821584016
708  Time for this step:  2.6485330419964157  Time in all:  16685.019388959045
709  Time for this step:  2.5895458750310354  Time in all:  16687.609006667044
710  Time for this step:  1.7732720830244943  Time in all:  16689.382313500042
711  Time for this step:  1.7925029170000926  Time in all:  16691.174905334017
712  Time for this step:  3.062617624993436  Time in all:  16694.23755537503
713  Time for this step:  3.1059399159858003  Time in all:  16697.343665625027
714  Time for this step:  1.599081374995876  Time in all:  16698.942786959
715  Time for this step:  0.2075850410037674  Time in all:  16699.15078325005
716  Time for this step:  0.20521087502129376  Time in all:  16699.356013875047
717  Time for this step:  0.21407287498004735  Time in all:  16699.57013366703
718  Time for this step:  0.15881412505405024  Time in all:  16699.728966292052
719  Time for this step:  0.17525775003014132  Time in all:  16699.904281709052
720  Time for this step:  0.17358416703063995  Time in all:  16700.07788591704
721  Time for this step:  0.18249529198510572  Time in all:  16700.260425709013
722  Time for this step:  0.12279029202181846  Time in all:  16700.383234542038
723  Time for this step:  0.24458512500859797  Time in all:  16700.62789070903
724  Time for this step:  0.24417216604342684  Time in all:  16700.872081625042
725  Time for this step:  0.25674179202178493  Time in all:  16701.128870959044
726  Time for this step:  0.20048537495313212  Time in all:  16701.329395334003
727  Time for this step:  0.21327650005696341  Time in all:  16701.542735292052
728  Time for this step:  0.2110227919765748  Time in all:  16701.753776292026
729  Time for this step:  0.22121179196983576  Time in all:  16701.97503320902
730  Time for this step:  0.16441858297912404  Time in all:  16702.139472167008
731  Time for this step:  164.1071412920137  Time in all:  16866.24665808404
732  Time for this step:  133.91400425002212  Time in all:  17000.160702667024
733  Time for this step:  137.25604012497934  Time in all:  17137.416960834
734  Time for this step:  420.22142254101345  Time in all:  17557.638424125034
735  Time for this step:  419.79541879100725  Time in all:  17977.43405125005
736  Time for this step:  126.29315199999837  Time in all:  18103.727237084007
737  Time for this step:  108.74861637497088  Time in all:  18212.47589941701
738  Time for this step:  127.99760608299403  Time in all:  18340.473713000014
739  Time for this step:  87.49438774998998  Time in all:  18427.968143042002
740  Time for this step:  319.0785250419867  Time in all:  18747.046880834037
741  Time for this step:  282.64555720897624  Time in all:  19029.692482209008
742  Time for this step:  151.51510791602777  Time in all:  19181.207781125035
743  Time for this step:  252.53751149994787  Time in all:  19433.745333542
744  Time for this step:  128.15184812503867  Time in all:  19561.897422709037
745  Time for this step:  87.52151624998078  Time in all:  19649.418985667
746  Time for this step:  319.557535000029  Time in all:  19968.976731375034
747  Time for this step:  283.2768243330065  Time in all:  20252.25359412504
748  Time for this step:  151.85597516596317  Time in all:  20404.10973962501
749  Time for this step:  252.97381041699555  Time in all:  20657.083589167043
750  Time for this step:  113.30388733302243  Time in all:  20770.38768850005
751  Time for this step:  100.15531758300494  Time in all:  20870.543042667035
752  Time for this step:  91.15275116602425  Time in all:  20961.695836500032
753  Time for this step:  85.7086741659441  Time in all:  21047.404697499995
754  Time for this step:  149.47916604200145  Time in all:  21196.88390945905
755  Time for this step:  149.8335476249922  Time in all:  21346.717678959016
756  Time for this step:  73.83145912498003  Time in all:  21420.549179667025
757  Time for this step:  0.3051960839657113  Time in all:  21420.854624959
758  Time for this step:  0.3018615000182763  Time in all:  21421.156509209017
759  Time for this step:  0.31538658298086375  Time in all:  21421.471947917016
760  Time for this step:  0.20891095796832815  Time in all:  21421.68088025
761  Time for this step:  116.55090312496759  Time in all:  21538.23180512502
762  Time for this step:  69.0800817499985  Time in all:  21607.312102792028
763  Time for this step:  276.238046124985  Time in all:  21883.550190292008
764  Time for this step:  276.2651003340143  Time in all:  22159.81548883405
765  Time for this step:  104.784037000034  Time in all:  22264.59957291704
766  Time for this step:  99.65969279099954  Time in all:  22364.25931587501
767  Time for this step:  84.09940249996725  Time in all:  22448.3589165
768  Time for this step:  168.83301954198396  Time in all:  22617.191976709
769  Time for this step:  125.55209862499032  Time in all:  22742.744282750005
770  Time for this step:  221.07601720798993  Time in all:  22963.820339875005
771  Time for this step:  84.13101008400554  Time in all:  23047.951563084032
772  Time for this step:  168.95198504201835  Time in all:  23216.903588709014
773  Time for this step:  125.74075433303369  Time in all:  23342.644533792045
774  Time for this step:  221.22217962500872  Time in all:  23563.866752375034
775  Time for this step:  68.24911133304704  Time in all:  23632.11604750005
776  Time for this step:  65.4139519999735  Time in all:  23697.530036750017
777  Time for this step:  96.73678508400917  Time in all:  23794.267015334044
778  Time for this step:  164.1051920830505  Time in all:  23958.37224741705
779  Time for this step:  164.02738037501695  Time in all:  24122.399820375023
780  Time for this step:  75.88787512498675  Time in all:  24198.287735750026
781  Time for this step:  37.43073020898737  Time in all:  24235.718658583995
782  Time for this step:  46.9171904589748  Time in all:  24282.635886584
783  Time for this step:  81.25648874999024  Time in all:  24363.892587084032
784  Time for this step:  150.02510245901067  Time in all:  24513.917729334033
785  Time for this step:  150.41595508303726  Time in all:  24664.33389954205
786  Time for this step:  52.405161208007485  Time in all:  24716.73909937503
787  Time for this step:  77.85803691705223  Time in all:  24794.597341917048
788  Time for this step:  151.58530495798914  Time in all:  24946.182684042025
789  Time for this step:  151.8074532080209  Time in all:  25097.990344042017
790  Time for this step:  65.49812504195143  Time in all:  25163.488507208996
791  Time for this step:  41.760893125028815  Time in all:  25205.249443125038
792  Time for this step:  75.23384237498976  Time in all:  25280.483508375008
793  Time for this step:  63.943773333972786  Time in all:  25344.427320584015
794  Time for this step:  47.27980729099363  Time in all:  25391.70731050003
795  Time for this step:  56.52584941696841  Time in all:  25448.23320008401
796  Time for this step:  45.42609533300856  Time in all:  25493.659512625018
797  Time for this step:  43.43610333302058  Time in all:  25537.095652875025
798  Time for this step:  40.38078750000568  Time in all:  25577.476654334052
799  Time for this step:  53.62693179200869  Time in all:  25631.103626959026
800  Time for this step:  74.82969537499594  Time in all:  25705.933593499998
801  Time for this step:  63.72140045900596  Time in all:  25769.65503433405
802  Time for this step:  47.11712374998024  Time in all:  25816.77233662503
803  Time for this step:  56.103956915962044  Time in all:  25872.876331750012
804  Time for this step:  45.299834083998576  Time in all:  25918.17636083404
805  Time for this step:  43.108113416004926  Time in all:  25961.284518375003
806  Time for this step:  40.29813870898215  Time in all:  26001.58283470903
807  Time for this step:  53.42491212498862  Time in all:  26055.007786792004
808  Time for this step:  24.291156625025906  Time in all:  26079.29914662504
809  Time for this step:  19.44472837500507  Time in all:  26098.743910334015
810  Time for this step:  22.801620999991428  Time in all:  26121.545575959026
811  Time for this step:  27.336588166013826  Time in all:  26148.882362375036
812  Time for this step:  26.97804320900468  Time in all:  26175.86045395903
813  Time for this step:  29.882932499982417  Time in all:  26205.743422084022
814  Time for this step:  29.743955292040482  Time in all:  26235.48756133404
815  Time for this step:  16.54734195797937  Time in all:  26252.034943042032
816  Time for this step:  0.8815516670001671  Time in all:  26252.91676820902
817  Time for this step:  84.77542412502225  Time in all:  26337.692223042017
818  Time for this step:  0.8528028749860823  Time in all:  26338.545226167014
819  Time for this step:  70.92132195801241  Time in all:  26409.466583875008
820  Time for this step:  179.40997179201804  Time in all:  26588.87673895905
821  Time for this step:  105.97275825001998  Time in all:  26694.849534334033
822  Time for this step:  179.7837238330394  Time in all:  26874.633455375035
823  Time for this step:  106.13720433297567  Time in all:  26980.77070266701
824  Time for this step:  64.0621031250339  Time in all:  27044.833000084036
825  Time for this step:  56.546776874980424  Time in all:  27101.379815375025
826  Time for this step:  60.11323491699295  Time in all:  27161.493232417037
827  Time for this step:  91.22094466601266  Time in all:  27252.714216375025
828  Time for this step:  91.22113324998645  Time in all:  27343.935554584023
829  Time for this step:  50.04418704198906  Time in all:  27393.97978266701
830  Time for this step:  25.08573237498058  Time in all:  27419.065551000007
831  Time for this step:  70.59704479196807  Time in all:  27489.662818667013
832  Time for this step:  151.17986337502953  Time in all:  27640.842726125033
833  Time for this step:  151.2953731250018  Time in all:  27792.138283834036
834  Time for this step:  54.64559666701825  Time in all:  27846.783919709036
835  Time for this step:  57.490901415992994  Time in all:  27904.27502250002
836  Time for this step:  120.3200518329977  Time in all:  28024.59511641704
837  Time for this step:  120.7350124589866  Time in all:  28145.330311459024
838  Time for this step:  52.30843591701705  Time in all:  28197.638784292038
839  Time for this step:  34.91517970897257  Time in all:  28232.554001084005
840  Time for this step:  37.25798799999757  Time in all:  28269.812183792004
841  Time for this step:  31.031193292001262  Time in all:  28300.843414209026
842  Time for this step:  31.44443054200383  Time in all:  28332.28806583403
843  Time for this step:  38.98519337497419  Time in all:  28371.273295917024
844  Time for this step:  37.00844545796281  Time in all:  28408.281979374995
845  Time for this step:  31.040668833011296  Time in all:  28439.32268987503
846  Time for this step:  31.309584749978967  Time in all:  28470.632453833998
847  Time for this step:  38.795023957965896  Time in all:  28509.427512875
848  Time for this step:  15.633241834002547  Time in all:  28525.060936209047
849  Time for this step:  14.067393874982372  Time in all:  28539.128363833996
850  Time for this step:  30.05223599995952  Time in all:  28569.18080500001
851  Time for this step:  28.092083666007966  Time in all:  28597.272929875006
852  Time for this step:  32.421824583027046  Time in all:  28629.694797500037
853  Time for this step:  32.265871250012424  Time in all:  28661.960849584022
854  Time for this step:  16.973253750009462  Time in all:  28678.934143375023
855  Time for this step:  10.650185625010636  Time in all:  28689.584505250037
856  Time for this step:  9.56706483400194  Time in all:  28699.151612709044
857  Time for this step:  25.780717416957486  Time in all:  28724.93247941701
858  Time for this step:  13.751327708014287  Time in all:  28738.683847750013
859  Time for this step:  14.732570958032738  Time in all:  28753.416465875052
860  Time for this step:  19.203415582946036  Time in all:  28772.619916249998
861  Time for this step:  19.11333504098002  Time in all:  28791.73342737503
862  Time for this step:  9.318516625033226  Time in all:  28801.05198050005
863  Time for this step:  21.27325100003509  Time in all:  28822.32534537505
864  Time for this step:  23.649143082962837  Time in all:  28845.974532791995
865  Time for this step:  18.105815707996953  Time in all:  28864.08038925001
866  Time for this step:  18.016599958005827  Time in all:  28882.097162250022
867  Time for this step:  10.125360958976671  Time in all:  28892.222559584014
868  Time for this step:  5.807558750035241  Time in all:  28898.030162584037
869  Time for this step:  28.570140458003152  Time in all:  28926.600543417037
870  Time for this step:  48.53941012499854  Time in all:  28975.140005334048
871  Time for this step:  13.209619875007775  Time in all:  28988.349801709002
872  Time for this step:  30.9179020000156  Time in all:  29019.267745167017
873  Time for this step:  28.257831625000108  Time in all:  29047.525780375
874  Time for this step:  20.08450225001434  Time in all:  29067.61032091704
875  Time for this step:  36.85078829200938  Time in all:  29104.46132779203
876  Time for this step:  18.92400820797775  Time in all:  29123.385371375014
877  Time for this step:  26.331410375016276  Time in all:  29149.716997375013
878  Time for this step:  18.40394158300478  Time in all:  29168.12097287504
879  Time for this step:  15.473011875001248  Time in all:  29183.59417312505
880  Time for this step:  11.296125209017191  Time in all:  29194.890341334045
881  Time for this step:  16.262521917000413  Time in all:  29211.15299279202
882  Time for this step:  9.861130624951329  Time in all:  29221.014161625004
883  Time for this step:  7.477628541993909  Time in all:  29228.491837459034
884  Time for this step:  28.735801083035767  Time in all:  29257.22790675005
885  Time for this step:  48.71011045901105  Time in all:  29305.938054334023
886  Time for this step:  13.210389374988154  Time in all:  29319.148658042017
887  Time for this step:  31.107054540945683  Time in all:  29350.255759624997
888  Time for this step:  28.30213675001869  Time in all:  29378.55808187503
889  Time for this step:  20.009586291969754  Time in all:  29398.567708334012
890  Time for this step:  36.9794007090386  Time in all:  29435.54732458404
891  Time for this step:  18.95594950002851  Time in all:  29454.503317542025
892  Time for this step:  26.531679167004768  Time in all:  29481.035180667008
893  Time for this step:  18.632161665998865  Time in all:  29499.667379499995
894  Time for this step:  15.435351125022862  Time in all:  29515.102907125023
895  Time for this step:  11.168599832977634  Time in all:  29526.271540875023
896  Time for this step:  16.396711999957915  Time in all:  29542.668348542007
897  Time for this step:  10.060898958006874  Time in all:  29552.729282500048
898  Time for this step:  7.471587708976585  Time in all:  29560.200910084008
899  Time for this step:  15.465291165979579  Time in all:  29575.666328250023
900  Time for this step:  13.554610833001789  Time in all:  29589.220977042045
901  Time for this step:  10.684008957992774  Time in all:  29599.905164792028
902  Time for this step:  8.467549499997403  Time in all:  29608.372751167044
903  Time for this step:  7.446744582965039  Time in all:  29615.819680000015
904  Time for this step:  5.082793749985285  Time in all:  29620.902508584026
905  Time for this step:  5.177249125030357  Time in all:  29626.079906042025
906  Time for this step:  3.857744083972648  Time in all:  29629.937687584024
907  Time for this step:  5.4914774160133675  Time in all:  29635.429200250015
908  Time for this step:  5.599555999971926  Time in all:  29641.028845875
909  Time for this step:  3.1365279169986024  Time in all:  29644.165413917042
910  Time for this step:  0.4375564589863643  Time in all:  29644.603210458998
911  Time for this step:  0.4238722500158474  Time in all:  29645.02710670902
912  Time for this step:  27.245663749985397  Time in all:  29672.27282291703
913  Time for this step:  19.680538874992635  Time in all:  29691.953404041997
914  Time for this step:  27.374288458027877  Time in all:  29719.327927375038
915  Time for this step:  19.839128042047378  Time in all:  29739.16709708405
916  Time for this step:  19.534198666980956  Time in all:  29758.70149520901
917  Time for this step:  18.727979708986823  Time in all:  29777.429514834017
918  Time for this step:  56.02569020801457  Time in all:  29833.455421250022
919  Time for this step:  77.01263758400455  Time in all:  29910.46810258401
920  Time for this step:  77.07293866702821  Time in all:  29987.54123570904
921  Time for this step:  40.20080970803974  Time in all:  30027.742090292042
922  Time for this step:  25.65919179096818  Time in all:  30053.401318749995
923  Time for this step:  1.0155852499883622  Time in all:  30054.417124959
924  Time for this step:  26.542988208006136  Time in all:  30080.960150625033
925  Time for this step:  26.41767916700337  Time in all:  30107.378023541998
926  Time for this step:  25.467447832983453  Time in all:  30132.84551225003
927  Time for this step:  40.63050149998162  Time in all:  30173.476216792013
928  Time for this step:  65.63850512495264  Time in all:  30239.114764667
929  Time for this step:  65.72117845795583  Time in all:  30304.836140125
930  Time for this step:  33.444103292014915  Time in all:  30338.280281209038
931  Time for this step:  23.474226500024088  Time in all:  30361.75454516703
932  Time for this step:  52.40115866699489  Time in all:  30414.155936416995
933  Time for this step:  38.728293624997605  Time in all:  30452.884273083997
934  Time for this step:  37.473343792022206  Time in all:  30490.35780104203
935  Time for this step:  29.34170795796672  Time in all:  30519.699551542
936  Time for this step:  52.148504208016675  Time in all:  30571.848283042025
937  Time for this step:  38.72410570899956  Time in all:  30610.572428084037
938  Time for this step:  37.30159970803652  Time in all:  30647.87421966705
939  Time for this step:  29.25231949996669  Time in all:  30677.126583334
940  Time for this step:  26.49897100002272  Time in all:  30703.62577833404
941  Time for this step:  17.566686500038486  Time in all:  30721.192504834034
942  Time for this step:  18.545930874999613  Time in all:  30739.738652084023
943  Time for this step:  16.202264124993235  Time in all:  30755.940955750004
944  Time for this step:  19.11523637501523  Time in all:  30775.05623008404
945  Time for this step:  18.824252583028283  Time in all:  30793.880677167035
946  Time for this step:  10.448883958975784  Time in all:  30804.32959608402
947  Time for this step:  5.830938957980834  Time in all:  30810.160572000023
948  Time for this step:  13.64467304199934  Time in all:  30823.805523584015
949  Time for this step:  11.258706084045116  Time in all:  30835.06427720905
950  Time for this step:  12.122673792007845  Time in all:  30847.186989709036
951  Time for this step:  15.997342249960639  Time in all:  30863.184370125004
952  Time for this step:  15.985414666996803  Time in all:  30879.169971792027
953  Time for this step:  8.681577415962238  Time in all:  30887.85159062501
954  Time for this step:  12.014500749995932  Time in all:  30899.866220708995
955  Time for this step:  13.146209999977145  Time in all:  30913.012478334014
956  Time for this step:  15.172899541968945  Time in all:  30928.185414334002
957  Time for this step:  15.241109709022567  Time in all:  30943.426698084048
958  Time for this step:  7.714692500012461  Time in all:  30951.141426000046
959  Time for this step:  5.145646666001994  Time in all:  30956.287115000014
960  Time for this step:  12.593343292013742  Time in all:  30968.880668334023
961  Time for this step:  7.632801041996572  Time in all:  30976.513506417046
962  Time for this step:  16.736814165953547  Time in all:  30993.250409125
963  Time for this step:  11.723613124981057  Time in all:  31004.974060709006
964  Time for this step:  8.390702333010267  Time in all:  31013.364799250034
965  Time for this step:  11.839444333978463  Time in all:  31025.204362209013
966  Time for this step:  8.014650958008133  Time in all:  31033.219048500003
967  Time for this step:  6.175173334020656  Time in all:  31039.394260584028
968  Time for this step:  12.702802000043448  Time in all:  31052.097200209042
969  Time for this step:  7.7554730830015615  Time in all:  31059.852719750023
970  Time for this step:  16.80554133298574  Time in all:  31076.658349250036
971  Time for this step:  11.827162916015368  Time in all:  31088.485547500022
972  Time for this step:  8.352493708021939  Time in all:  31096.838076417043
973  Time for this step:  11.904296833032276  Time in all:  31108.742483500042
974  Time for this step:  8.06734054198023  Time in all:  31116.809862959024
975  Time for this step:  6.174547667033039  Time in all:  31122.98444941704
976  Time for this step:  9.437128084013239  Time in all:  31132.421688334027
977  Time for this step:  6.222979917016346  Time in all:  31138.64470820903
978  Time for this step:  6.17511133296648  Time in all:  31144.819904792006
979  Time for this step:  4.7030900830286555  Time in all:  31149.52302875003
980  Time for this step:  3.772444917005487  Time in all:  31153.29558741703
981  Time for this step:  3.141773374984041  Time in all:  31156.437397875008
982  Time for this step:  4.931578374991659  Time in all:  31161.36901600001
983  Time for this step:  4.948775041964836  Time in all:  31166.317872542015
984  Time for this step:  2.9293647919548675  Time in all:  31169.247274541995
985  Time for this step:  6.456438917026389  Time in all:  31175.703806709033
986  Time for this step:  4.628687208984047  Time in all:  31180.332532458997
987  Time for this step:  4.213828167004976  Time in all:  31184.546452584036
988  Time for this step:  3.3934838750283234  Time in all:  31187.939977209026
989  Time for this step:  94.56871641700855  Time in all:  31282.508864792006
990  Time for this step:  172.85568008304108  Time in all:  31455.36458212504
991  Time for this step:  172.65035812498536  Time in all:  31628.015155875008
992  Time for this step:  57.10183804202825  Time in all:  31685.117032834038
993  Time for this step:  47.30082066595787  Time in all:  31732.418061250006
994  Time for this step:  61.40612466703169  Time in all:  31793.824225334043
995  Time for this step:  61.05897916702088  Time in all:  31854.88340970903
996  Time for this step:  30.422481249959674  Time in all:  31885.305927500012
997  Time for this step:  3.518393250007648  Time in all:  31888.82436108403
998  Time for this step:  5.307351875002496  Time in all:  31894.13179958402
999  Time for this step:  4.371051624999382  Time in all:  31898.502889709023
1000  Time for this step:  5.378274707996752  Time in all:  31903.881284625037
1001  Time for this step:  4.3672000000369735  Time in all:  31908.248518709035
1002  Time for this step:  3.1107451660209335  Time in all:  31911.35929737502
1003  Time for this step:  4.295731791993603  Time in all:  31915.65513716702
1004  Time for this step:  3.1709109579678625  Time in all:  31918.82608566701
1005  Time for this step:  3.8038931249757297  Time in all:  31922.630020375014
1006  Time for this step:  3.8481862079934217  Time in all:  31926.47828387504
1007  Time for this step:  3.0366174170048907  Time in all:  31929.514941084024
1008  Time for this step:  2.539092916995287  Time in all:  31932.05407404201
1009  Time for this step:  0.5652158330194652  Time in all:  31932.61956141703
1010  Time for this step:  0.5423402089509182  Time in all:  31933.161926458997
1011  Time for this step:  69.01525975001277  Time in all:  32002.17724095902
1012  Time for this step:  70.2743973340257  Time in all:  32072.451676834025
1013  Time for this step:  1.4399687079712749  Time in all:  32073.891860375006
1014  Time for this step:  1.278188208991196  Time in all:  32075.17008208402
1015  Time for this step:  73.62754608300747  Time in all:  32148.797701792035
1016  Time for this step:  68.75855416699778  Time in all:  32217.556300959026
1017  Time for this step:  25.322635082993656  Time in all:  32242.879142792022
1018  Time for this step:  28.14045241702115  Time in all:  32271.019635834033
1019  Time for this step:  39.951327082992066  Time in all:  32310.971173042024
1020  Time for this step:  24.25587291701231  Time in all:  32335.22708470904
1021  Time for this step:  12.87595241703093  Time in all:  32348.103078292042
1022  Time for this step:  29.76662979205139  Time in all:  32377.869923584047
1023  Time for this step:  35.36802841699682  Time in all:  32413.237991042028
1024  Time for this step:  18.888911250047386  Time in all:  32432.127120459045
1025  Time for this step:  21.317285416007508  Time in all:  32453.44444250001
1026  Time for this step:  15.726042874972336  Time in all:  32469.17072045902
1027  Time for this step:  10.07482749997871  Time in all:  32479.245585958997
1028  Time for this step:  9.39491629198892  Time in all:  32488.640687334002
1029  Time for this step:  6.992684790981002  Time in all:  32495.633412625
1030  Time for this step:  18.833590708032716  Time in all:  32514.467230875045
1031  Time for this step:  18.150278083980083  Time in all:  32532.617550834024
1032  Time for this step:  10.28411404194776  Time in all:  32542.901709833997
1033  Time for this step:  13.989194291993044  Time in all:  32556.89110145904
1034  Time for this step:  9.736026917002164  Time in all:  32566.62716791703
1035  Time for this step:  7.140766958997119  Time in all:  32573.767971334048
1036  Time for this step:  10.580521124997176  Time in all:  32584.348713834013
1037  Time for this step:  7.952769625000656  Time in all:  32592.301521292015
1038  Time for this step:  7.731730667001102  Time in all:  32600.033433834033
1039  Time for this step:  5.926780625013635  Time in all:  32605.960251792043
1040  Time for this step:  5.547606125008315  Time in all:  32611.507963334036
1041  Time for this step:  4.913148583029397  Time in all:  32616.421150292037
1042  Time for this step:  11.17175712500466  Time in all:  32627.59301041701
1043  Time for this step:  8.05933445802657  Time in all:  32635.65238404204
1044  Time for this step:  7.280285249988083  Time in all:  32642.932761834003
1045  Time for this step:  6.026786041969899  Time in all:  32648.959585834004
1046  Time for this step:  4.793889917025808  Time in all:  32653.753687209042
1047  Time for this step:  4.269519041990861  Time in all:  32658.023244042008
1048  Time for this step:  3.965434666024521  Time in all:  32661.988761000044
1049  Time for this step:  3.55744154099375  Time in all:  32665.54623700003
1050  Time for this step:  2.9400187080027536  Time in all:  32668.48629387503
1051  Time for this step:  0.5839136250433512  Time in all:  32669.07041033404
1052  Time for this step:  0.568110708030872  Time in all:  32669.63854837505
1053  Time for this step:  68.60201212501852  Time in all:  32738.240617667034
1054  Time for this step:  69.87531637499342  Time in all:  32808.115974000015
1055  Time for this step:  1.503148375020828  Time in all:  32809.61934462504
1056  Time for this step:  1.31696299999021  Time in all:  32810.93634258403
1057  Time for this step:  73.21722824999597  Time in all:  32884.153653125046
1058  Time for this step:  68.45869166601915  Time in all:  32952.612385125016
1059  Time for this step:  24.928858417028096  Time in all:  32977.54143691703
1060  Time for this step:  28.020201791950967  Time in all:  33005.561679209
1061  Time for this step:  39.81373266602168  Time in all:  33045.37561137503
1062  Time for this step:  24.205598416971043  Time in all:  33069.581244667
1063  Time for this step:  12.609210499969777  Time in all:  33082.19049620902
1064  Time for this step:  29.595217458030675  Time in all:  33111.785928292025
1065  Time for this step:  35.27403841697378  Time in all:  33147.060004458996
1066  Time for this step:  18.573930999962613  Time in all:  33165.634150834
1067  Time for this step:  21.00505483400775  Time in all:  33186.63924533402
1068  Time for this step:  15.543975082982797  Time in all:  33202.183414542
1069  Time for this step:  9.952466999995522  Time in all:  33212.135919667024
1070  Time for this step:  9.266581333999056  Time in all:  33221.40268245904
1071  Time for this step:  7.054896958987229  Time in all:  33228.45762045903
1072  Time for this step:  18.636931458022445  Time in all:  33247.094804375025
1073  Time for this step:  18.072217916022055  Time in all:  33265.16706425004
1074  Time for this step:  10.154555707995314  Time in all:  33275.32165762503
1075  Time for this step:  13.988514167023823  Time in all:  33289.31037141703
1076  Time for this step:  9.719128083030228  Time in all:  33299.02954704204
1077  Time for this step:  7.0289174590143375  Time in all:  33306.05850845901
1078  Time for this step:  10.445682999968994  Time in all:  33316.504403750005
1079  Time for this step:  7.7261772499768995  Time in all:  33324.23062912503
1080  Time for this step:  7.636289458023384  Time in all:  33331.867007917026
1081  Time for this step:  5.985960541991517  Time in all:  33337.85300891701
1082  Time for this step:  5.414719291962683  Time in all:  33343.267823292
1083  Time for this step:  4.985808666970115  Time in all:  33348.253667792014
1084  Time for this step:  10.999199916957878  Time in all:  33359.25296420901
1085  Time for this step:  8.027585624950007  Time in all:  33367.280588792
1086  Time for this step:  7.195311999996193  Time in all:  33374.47601533402
1087  Time for this step:  6.049484917020891  Time in all:  33380.52553816704
1088  Time for this step:  4.736411124991719  Time in all:  33385.26216320903
1089  Time for this step:  4.202272874943446  Time in all:  33389.464473208995
1090  Time for this step:  3.940374958969187  Time in all:  33393.40493495902
1091  Time for this step:  3.5276308330358006  Time in all:  33396.93260112504
1092  Time for this step:  2.8359391250414774  Time in all:  33399.76859429205
1093  Time for this step:  1.13260175002506  Time in all:  33400.90134000004
1094  Time for this step:  0.9958709579659626  Time in all:  33401.89724716701
1095  Time for this step:  14.304788000008557  Time in all:  33416.20210562501
1096  Time for this step:  11.824139334028587  Time in all:  33428.02628083405
1097  Time for this step:  7.302048082987312  Time in all:  33435.32837637502
1098  Time for this step:  6.496257207996678  Time in all:  33441.82475250005
1099  Time for this step:  5.867253125004936  Time in all:  33447.69204458402
1100  Time for this step:  4.279755582974758  Time in all:  33451.971841750026
1101  Time for this step:  11.42719458299689  Time in all:  33463.39913716703
1102  Time for this step:  7.065089291951153  Time in all:  33470.464262917
1103  Time for this step:  5.182366124994587  Time in all:  33475.64672595903
1104  Time for this step:  4.079048124956898  Time in all:  33479.725810125005
1105  Time for this step:  1.8748950000153854  Time in all:  33481.60080945905
1106  Time for this step:  1.747972957964521  Time in all:  33483.348814125
1107  Time for this step:  1.740154041966889  Time in all:  33485.089103334
1108  Time for this step:  2.2787630419479683  Time in all:  33487.367902959
1109  Time for this step:  2.377636666991748  Time in all:  33489.74562541704
1110  Time for this step:  2.1407119589857757  Time in all:  33491.886371208995
1111  Time for this step:  2.56566316698445  Time in all:  33494.45207145903
1112  Time for this step:  1.521701292018406  Time in all:  33495.97397779202
1113  Time for this step:  2.223214374971576  Time in all:  33498.19722329202
1114  Time for this step:  2.1318926659878343  Time in all:  33500.32919175003
1115  Time for this step:  1.975773417041637  Time in all:  33502.30499991705
1116  Time for this step:  2.5589802080066875  Time in all:  33504.864015750005
1117  Time for this step:  3.5330795829650015  Time in all:  33508.39718425
1118  Time for this step:  3.1511052080313675  Time in all:  33511.54832829203
1119  Time for this step:  3.3314250830444507  Time in all:  33514.87982916704
1120  Time for this step:  3.084459167032037  Time in all:  33517.96432091703
1121  Time for this step:  3.46375741699012  Time in all:  33521.42818895902
1122  Time for this step:  3.211177041986957  Time in all:  33524.639404834015
1123  Time for this step:  3.2646427919971757  Time in all:  33527.904122709006
1124  Time for this step:  3.0943536669947207  Time in all:  33530.99850895902
1125  Time for this step:  1.5265979579999112  Time in all:  33532.525209125015
1126  Time for this step:  1.6371057499782182  Time in all:  33534.16235095903
1127  Time for this step:  0.45390854199649766  Time in all:  33534.61656254204
1128  Time for this step:  0.46106066700303927  Time in all:  33535.07765970903
1129  Time for this step:  0.4455571660073474  Time in all:  33535.523268875026
1130  Time for this step:  0.27668795798672363  Time in all:  33535.79998004204
1131  Time for this step:  292.86346324998885  Time in all:  33828.66350604204
1132  Time for this step:  634.2003879169933  Time in all:  34462.86393204203
1133  Time for this step:  634.7308077500202  Time in all:  35097.59493458405
1134  Time for this step:  215.66035741602536  Time in all:  35313.25533075002
1135  Time for this step:  79.22122908296296  Time in all:  35392.47660250001
1136  Time for this step:  205.98859654105036  Time in all:  35598.465411625046
1137  Time for this step:  676.5126275829971  Time in all:  36274.97808537504
1138  Time for this step:  676.5305207910133  Time in all:  36951.50880375004
1139  Time for this step:  250.78004791704006  Time in all:  37202.28889670904
1140  Time for this step:  133.58740158297587  Time in all:  37335.876362750016
1141  Time for this step:  139.38548158400226  Time in all:  37475.262058084016
1142  Time for this step:  70.55713379196823  Time in all:  37545.81922958401
1143  Time for this step:  113.66660841699922  Time in all:  37659.48603604204
1144  Time for this step:  83.79384820803534  Time in all:  37743.27992812503
1145  Time for this step:  138.65066250000382  Time in all:  37881.930825042014
1146  Time for this step:  70.31121029204223  Time in all:  37952.242079167045
1147  Time for this step:  113.36234429199249  Time in all:  38065.60460691701
1148  Time for this step:  83.52047012501862  Time in all:  38149.12511512503
1149  Time for this step:  34.32666295801755  Time in all:  38183.45197887503
1150  Time for this step:  32.07031033397652  Time in all:  38215.52232870902
1151  Time for this step:  114.69983695802512  Time in all:  38330.22236087505
1152  Time for this step:  66.45881058298983  Time in all:  38396.68121037504
1153  Time for this step:  66.19438804197125  Time in all:  38462.875779917
1154  Time for this step:  28.688239375012927  Time in all:  38491.564056250034
1155  Time for this step:  17.66540250001708  Time in all:  38509.22949895903
1156  Time for this step:  0.9097822080366313  Time in all:  38510.13952325005
1157  Time for this step:  33.35918812494492  Time in all:  38543.498750292
1158  Time for this step:  39.90289741696324  Time in all:  38583.401683959004
1159  Time for this step:  39.85075516701909  Time in all:  38623.25262908405
1160  Time for this step:  20.145881125004962  Time in all:  38643.39854820905
1161  Time for this step:  48.823030832980294  Time in all:  38692.221789542
1162  Time for this step:  33.657950124994386  Time in all:  38725.8797775
1163  Time for this step:  33.635697916965  Time in all:  38759.515664834005
1164  Time for this step:  14.453279000008479  Time in all:  38773.968978459015
1165  Time for this step:  10.27612679102458  Time in all:  38784.245145375025
1166  Time for this step:  7.190588750003371  Time in all:  38791.435949000006
1167  Time for this step:  57.15699504199438  Time in all:  38848.59298604203
1168  Time for this step:  36.81853879103437  Time in all:  38885.41156387504
1169  Time for this step:  23.035864959005266  Time in all:  38908.44762070902
1170  Time for this step:  17.384625625039916  Time in all:  38925.83228958404
1171  Time for this step:  7.311432167014573  Time in all:  38933.14395033405
1172  Time for this step:  57.57265070901485  Time in all:  38990.71663758403
1173  Time for this step:  36.873351874994114  Time in all:  39027.59002850001
1174  Time for this step:  23.173733500007074  Time in all:  39050.76396066701
1175  Time for this step:  17.468216917011887  Time in all:  39068.232214042044
1176  Time for this step:  50.026778166997246  Time in all:  39118.259189542034
1177  Time for this step:  14.992033082991838  Time in all:  39133.25126804202
1178  Time for this step:  5.874013833003119  Time in all:  39139.12548804202
1179  Time for this step:  3.6612277919775806  Time in all:  39142.786750334024
1180  Time for this step:  6.0321174999699  Time in all:  39148.81890387501
1181  Time for this step:  6.144065833010245  Time in all:  39154.96304879204
1182  Time for this step:  2.929457791033201  Time in all:  39157.89254875004
1183  Time for this step:  2.7295041249599308  Time in all:  39160.62209475
1184  Time for this step:  135.76953145797597  Time in all:  39296.391786249995
1185  Time for this step:  214.90983979200246  Time in all:  39511.301675917
1186  Time for this step:  214.49078150000423  Time in all:  39725.79265879205
1187  Time for this step:  78.03018962498754  Time in all:  39803.82288670901
1188  Time for this step:  64.43478687497554  Time in all:  39868.257881667
1189  Time for this step:  70.03601462498773  Time in all:  39938.29394175002
1190  Time for this step:  69.19691220798995  Time in all:  40007.49110666703
1191  Time for this step:  33.553366584004834  Time in all:  40041.044519459014
1192  Time for this step:  5.656980332976673  Time in all:  40046.701542416995
1193  Time for this step:  7.342951750033535  Time in all:  40054.044588167046
1194  Time for this step:  6.688425166008528  Time in all:  40060.73304987501
1195  Time for this step:  7.403666125028394  Time in all:  40068.13683075004
1196  Time for this step:  6.670234083023388  Time in all:  40074.80710212502
1197  Time for this step:  3.7779497500159778  Time in all:  40078.58509341703
1198  Time for this step:  6.714956832991447  Time in all:  40085.300186292036
1199  Time for this step:  3.9375467910431325  Time in all:  40089.23777087504
1200  Time for this step:  5.501980624976568  Time in all:  40094.73978916701
1201  Time for this step:  5.538429625041317  Time in all:  40100.278313000046
1202  Time for this step:  2.9042584170238115  Time in all:  40103.18260733405
1203  Time for this step:  2.8048526250058785  Time in all:  40105.987511125044
1204  Time for this step:  1.3201817920198664  Time in all:  40107.30783670902
1205  Time for this step:  12.565212375018746  Time in all:  40119.87308700004
1206  Time for this step:  1.59988058404997  Time in all:  40121.47317195905
1207  Time for this step:  8.185551000002306  Time in all:  40129.658760875
1208  Time for this step:  7.583130292012356  Time in all:  40137.24210491701
1209  Time for this step:  5.855268040962983  Time in all:  40143.097416125005
1210  Time for this step:  5.835734332969878  Time in all:  40148.93324687501
1211  Time for this step:  4.87781737500336  Time in all:  40153.81110162503
1212  Time for this step:  4.65123404195765  Time in all:  40158.462375834
1213  Time for this step:  7.100616667012218  Time in all:  40165.563103792025
1214  Time for this step:  4.85617166699376  Time in all:  40170.41932616703
1215  Time for this step:  6.216939750011079  Time in all:  40176.63635920902
1216  Time for this step:  4.64305204199627  Time in all:  40181.27944991703
1217  Time for this step:  5.267394374997821  Time in all:  40186.54689200001
1218  Time for this step:  1.4172809580340981  Time in all:  40187.96435891703
1219  Time for this step:  12.58087925001746  Time in all:  40200.54527920904
1220  Time for this step:  1.5298667500028387  Time in all:  40202.07539441704
1221  Time for this step:  8.336807832994964  Time in all:  40210.412247042
1222  Time for this step:  7.639926082978491  Time in all:  40218.052431749995
1223  Time for this step:  5.878404583956581  Time in all:  40223.930881084
1224  Time for this step:  5.907708208018448  Time in all:  40229.83871500002
1225  Time for this step:  4.820621791994199  Time in all:  40234.65937491704
1226  Time for this step:  4.615793416975066  Time in all:  40239.275205667014
1227  Time for this step:  6.896365666994825  Time in all:  40246.171684667
1228  Time for this step:  4.888881791965105  Time in all:  40251.060604417
1229  Time for this step:  6.2091941249673255  Time in all:  40257.26989687502
1230  Time for this step:  4.602097750001121  Time in all:  40261.87204566703
1231  Time for this step:  5.210449958045501  Time in all:  40267.08253087505
1232  Time for this step:  1.466533624974545  Time in all:  40268.54919612501
1233  Time for this step:  2.0067561250180006  Time in all:  40270.55599095905
1234  Time for this step:  1.702395082975272  Time in all:  40272.258426417015
1235  Time for this step:  1.7052830829634331  Time in all:  40273.963808542
1236  Time for this step:  1.652461709047202  Time in all:  40275.61630345904
1237  Time for this step:  1.6385919579770416  Time in all:  40277.255039917014
1238  Time for this step:  3.2159932919894345  Time in all:  40280.471074834
1239  Time for this step:  3.306995792023372  Time in all:  40283.778146292025
1240  Time for this step:  2.814809250005055  Time in all:  40286.59299500001
1241  Time for this step:  2.3567737080156803  Time in all:  40288.949805750046
1242  Time for this step:  3.3680753329535946  Time in all:  40292.317958167
1243  Time for this step:  4.922129708982538  Time in all:  40297.24012320902
1244  Time for this step:  3.2585369999869727  Time in all:  40300.49884412502
1245  Time for this step:  4.923118332982995  Time in all:  40305.42199975002
1246  Time for this step:  2.5919041669694707  Time in all:  40308.01394120901
1247  Time for this step:  0.5546277919784188  Time in all:  40308.568726292
1248  Time for this step:  0.5433154170168564  Time in all:  40309.11207691702
1249  Time for this step:  0.5880300409626216  Time in all:  40309.700185375
1250  Time for this step:  0.5879511249950156  Time in all:  40310.288168167
1251  Time for this step:  1.057673875009641  Time in all:  40311.34587729204
1252  Time for this step:  1.175290249986574  Time in all:  40312.52127808402
1253  Time for this step:  0.985395333962515  Time in all:  40313.506706834014
1254  Time for this step:  0.779726832988672  Time in all:  40314.286508875026
1255  Time for this step:  0.7722483330289833  Time in all:  40315.058792542026
1256  Time for this step:  1.3075945419841446  Time in all:  40316.36642129201
1257  Time for this step:  1.1726727079949342  Time in all:  40317.53922450001
1258  Time for this step:  0.9852347919950262  Time in all:  40318.52449666703
1259  Time for this step:  0.7700015419977717  Time in all:  40319.29457429203
1260  Time for this step:  0.76525058405241  Time in all:  40320.05986233405
1261  Time for this step:  1.3911855830228887  Time in all:  40321.451084875036
1262  Time for this step:  0.8652604580274783  Time in all:  40322.31648387504
1263  Time for this step:  0.8301067909924313  Time in all:  40323.146634375036
1264  Time for this step:  0.5718415000010282  Time in all:  40323.71854983404
1265  Time for this step:  0.5925082910107449  Time in all:  40324.31109212502
1266  Time for this step:  0.9573608330101706  Time in all:  40325.26848941704
1267  Time for this step:  1.1610392080037855  Time in all:  40326.42963312502
1268  Time for this step:  1.27040591603145  Time in all:  40327.70007512503
1269  Time for this step:  1.4377887500450015  Time in all:  40329.13796375005
1270  Time for this step:  1.6981525830342434  Time in all:  40330.83615387505
1271  Time for this step:  1.627494000014849  Time in all:  40332.46381529205
1272  Time for this step:  1.7014915000181645  Time in all:  40334.16534450004
1273  Time for this step:  1.0628218329511583  Time in all:  40335.228251666995
1274  Time for this step:  1.2645502500236034  Time in all:  40336.492837709025
1275  Time for this step:  1.2696207499830052  Time in all:  40337.7625825
1276  Time for this step:  1.0489289160468616  Time in all:  40338.81154712505
1277  Time for this step:  2.0768230840330943  Time in all:  40340.888453334046
1278  Time for this step:  1.8084924999857321  Time in all:  40342.69698437501
1279  Time for this step:  1.9970941669889726  Time in all:  40344.694193042
1280  Time for this step:  1.8826024159789085  Time in all:  40346.57683187502
1281  Time for this step:  1.2347787919570692  Time in all:  40347.811693542
1282  Time for this step:  1.4154630420380272  Time in all:  40349.227196334046
1283  Time for this step:  1.1159484169911593  Time in all:  40350.343235209
1284  Time for this step:  1.898939250037074  Time in all:  40352.24220645905
1285  Time for this step:  1.923213250003755  Time in all:  40354.16550554201
1286  Time for this step:  1.5790137080475688  Time in all:  40355.744555500045
1287  Time for this step:  0.6454514159704559  Time in all:  40356.39023650001
1288  Time for this step:  0.6435166660230607  Time in all:  40357.03378812503
1289  Time for this step:  0.6609394589904696  Time in all:  40357.69481045904
1290  Time for this step:  0.3342456250102259  Time in all:  40358.029096792045
1291  Time for this step:  0.6728742919513024  Time in all:  40358.702063167
1292  Time for this step:  0.7544363750494085  Time in all:  40359.45653350005
1293  Time for this step:  0.6799044999643229  Time in all:  40360.136612667004
1294  Time for this step:  0.3635727919754572  Time in all:  40360.50022179203
1295  Time for this step:  262.577959584014  Time in all:  40623.07821545901
1296  Time for this step:  2.233862625027541  Time in all:  40625.312303792045
1297  Time for this step:  816.6740256659687  Time in all:  41441.98636975
1298  Time for this step:  2.091602500004228  Time in all:  41444.078184250044
1299  Time for this step:  809.0996908329544  Time in all:  42253.177910292
1300  Time for this step:  148.33954212500248  Time in all:  42401.51749166701
1301  Time for this step:  1.218877875013277  Time in all:  42402.73659437505
1302  Time for this step:  108.8920813340228  Time in all:  42511.62870845903
1303  Time for this step:  225.670347458974  Time in all:  42737.29909583402
1304  Time for this step:  226.25846579199424  Time in all:  42963.557767916995
1305  Time for this step:  49.58407579199411  Time in all:  43013.14188470901
1306  Time for this step:  2.877654916024767  Time in all:  43016.019579375046
1307  Time for this step:  2.1888431669794954  Time in all:  43018.20852508402
1308  Time for this step:  2.3200002500088885  Time in all:  43020.52856712503
1309  Time for this step:  2.9572927500121295  Time in all:  43023.48593216704
1310  Time for this step:  5.140477999986615  Time in all:  43028.62644262501
1311  Time for this step:  4.850504332978744  Time in all:  43033.476990542025
1312  Time for this step:  2.235037332982756  Time in all:  43035.71215937502
1313  Time for this step:  2.389668999996502  Time in all:  43038.101865459
1314  Time for this step:  3.0058996249572374  Time in all:  43041.10785154201
1315  Time for this step:  5.1631174579961225  Time in all:  43046.271004042006
1316  Time for this step:  4.847698625002522  Time in all:  43051.118738625024
1317  Time for this step:  2.3636866249726154  Time in all:  43053.4826095
1318  Time for this step:  2.553781834023539  Time in all:  43056.036432084045
1319  Time for this step:  1.6269737080438063  Time in all:  43057.663541417045
1320  Time for this step:  3.537090249999892  Time in all:  43061.20066837501
1321  Time for this step:  3.5585572500131093  Time in all:  43064.75930079201
1322  Time for this step:  2.8472899589687586  Time in all:  43067.60662483401
1323  Time for this step:  2.6781849580002017  Time in all:  43070.284848625015
1324  Time for this step:  3.7393762500141747  Time in all:  43074.024371709034
1325  Time for this step:  3.7353046670323238  Time in all:  43077.759709959035
1326  Time for this step:  3.807939999969676  Time in all:  43081.56774425
1327  Time for this step:  3.7605518749915063  Time in all:  43085.32832983404
1328  Time for this step:  2.0254366250010207  Time in all:  43087.353803834005
1329  Time for this step:  0.6632746660034172  Time in all:  43088.01728650002
1330  Time for this step:  0.6427263340447098  Time in all:  43088.66004933405
1331  Time for this step:  0.762777834024746  Time in all:  43089.42288258404
1332  Time for this step:  0.34084449999500066  Time in all:  43089.763760083995
1333  Time for this step:  0.6604166250326671  Time in all:  43090.424241750035
1334  Time for this step:  0.6475685409968719  Time in all:  43091.0718335
1335  Time for this step:  0.6707542920485139  Time in all:  43091.74264508404
1336  Time for this step:  0.3594563329825178  Time in all:  43092.102131500025
1337  Time for this step:  250.06478375004372  Time in all:  43342.166935834044
1338  Time for this step:  1.7603251669788733  Time in all:  43343.92747904203
1339  Time for this step:  637.4025657920283  Time in all:  43981.33008379204
1340  Time for this step:  1.7080188330146484  Time in all:  43983.03831929201
1341  Time for this step:  638.5738177919993  Time in all:  44621.612171417044
1342  Time for this step:  121.45492937497329  Time in all:  44743.06713712501
1343  Time for this step:  1.0242394169908948  Time in all:  44744.091587834
1344  Time for this step:  52.11723149998579  Time in all:  44796.20885241701
1345  Time for this step:  104.27268208400346  Time in all:  44900.48157095903
1346  Time for this step:  104.23501762497472  Time in all:  45004.716798209
1347  Time for this step:  27.126873083994724  Time in all:  45031.843708709
1348  Time for this step:  2.9562407920020632  Time in all:  45034.799988667015
1349  Time for this step:  1.9977070409804583  Time in all:  45036.797809500014
1350  Time for this step:  2.3957569589838386  Time in all:  45039.193601334
1351  Time for this step:  2.194168833026197  Time in all:  45041.387857375026
1352  Time for this step:  4.918873333954252  Time in all:  45046.306767083996
1353  Time for this step:  4.805034167016856  Time in all:  45051.11183554202
1354  Time for this step:  2.1752381669939496  Time in all:  45053.287217709
1355  Time for this step:  2.364690000016708  Time in all:  45055.65194841701
1356  Time for this step:  2.3760037919855677  Time in all:  45058.028023209015
1357  Time for this step:  4.920850750000682  Time in all:  45062.94890645903
1358  Time for this step:  4.814146374992561  Time in all:  45067.76308737503
1359  Time for this step:  2.131049624993466  Time in all:  45069.894326334004
1360  Time for this step:  2.231064042018261  Time in all:  45072.125421959034
1361  Time for this step:  1.601213416957762  Time in all:  45073.726762334
1362  Time for this step:  3.352140583039727  Time in all:  45077.07894412504
1363  Time for this step:  3.2213237090036273  Time in all:  45080.300354584004
1364  Time for this step:  2.6889287919620983  Time in all:  45082.98931879201
1365  Time for this step:  2.6334625420277007  Time in all:  45085.62281445903
1366  Time for this step:  3.9850927920197137  Time in all:  45089.60798091703
1367  Time for this step:  3.9394247079617344  Time in all:  45093.54743854201
1368  Time for this step:  4.010240041010547  Time in all:  45097.557768875035
1369  Time for this step:  3.8371677919640206  Time in all:  45101.394975417
1370  Time for this step:  2.321227958018426  Time in all:  45103.71624091704
1371  Time for this step:  2.1762909590033814  Time in all:  45105.892652084
1372  Time for this step:  4.147203334025107  Time in all:  45110.03991970903
1373  Time for this step:  4.167098791978788  Time in all:  45114.207096584025
1374  Time for this step:  2.261796582955867  Time in all:  45116.4689335
1375  Time for this step:  2.0843309169868007  Time in all:  45118.55335095903
1376  Time for this step:  3.4595699579804204  Time in all:  45122.01295629202
1377  Time for this step:  3.562433124985546  Time in all:  45125.575463709014
1378  Time for this step:  1.9646264589973725  Time in all:  45127.54012470902
1379  Time for this step:  2.187028166023083  Time in all:  45129.72725400003
1380  Time for this step:  3.436899083026219  Time in all:  45133.164185625035
1381  Time for this step:  3.543970958038699  Time in all:  45136.708230167045
1382  Time for this step:  1.9626627909601666  Time in all:  45138.67092462501
1383  Time for this step:  2.2258199590141885  Time in all:  45140.89683558402
1384  Time for this step:  4.096728499978781  Time in all:  45144.99359591701
1385  Time for this step:  4.075740250002127  Time in all:  45149.06941920903
1386  Time for this step:  2.200197833997663  Time in all:  45151.26965183404
sage: A=CartanMatrix(['D',8])
sage: A
[ 2 -1  0  0  0  0  0  0]
[-1  2 -1  0  0  0  0  0]
[ 0 -1  2 -1  0  0  0  0]
[ 0  0 -1  2 -1  0  0  0]
[ 0  0  0 -1  2 -1  0  0]
[ 0  0  0  0 -1  2 -1 -1]
[ 0  0  0  0  0 -1  2  0]
[ 0  0  0  0  0 -1  0  2]
sage: A=CartanMatrix(['D',8])
....: cplus=[0,2,4,6,7]
....: cminus=[1,3,5]
....: c=cplus+cminus
....: from time import perf_counter
....: num=0
....: first=perf_counter()
....: for v in parasortables(A,c):
....:     num+=1
....:     start=perf_counter()
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbip(cplus,cminus,14))
....:     end=perf_counter()
....:     if P.dimension()!=0:
....:         print("ALERT: FAILURE")
....:     else:
....:         print(num," Time for this step: ",end-start," Time in all: ",end-f
....: irst)
....: 
1  Time for this step:  0.9775790409767069  Time in all:  1.039605500001926
2  Time for this step:  0.9817715000244789  Time in all:  2.021424417034723
3  Time for this step:  91.47274699999252  Time in all:  93.49426770902937
4  Time for this step:  34.461307874997146  Time in all:  127.95562162500573
5  Time for this step:  1.378031500033103  Time in all:  129.3338866670383
6  Time for this step:  35.7505204170011  Time in all:  165.08444729202893
7  Time for this step:  12.89114562497707  Time in all:  177.97581600002013
8  Time for this step:  13.703455040988047  Time in all:  191.67932587501127
9  Time for this step:  25.07042562501738  Time in all:  216.74997045903
10  Time for this step:  19.59309266699711  Time in all:  236.34310433402425
11  Time for this step:  17.42025275004562  Time in all:  253.76339916704455
12  Time for this step:  9.040982167003676  Time in all:  262.8046470420086
13  Time for this step:  10.594274707953446  Time in all:  273.398960874998
14  Time for this step:  9.587728750018869  Time in all:  282.9868990420364
15  Time for this step:  7.824341291969176  Time in all:  290.81128120899666
16  Time for this step:  4.006326625007205  Time in all:  294.81771158403717
17  Time for this step:  6.323230292007793  Time in all:  301.14098295901204
18  Time for this step:  7.588488084031269  Time in all:  308.72951908403775
19  Time for this step:  27.229827624978498  Time in all:  335.9595858340035
20  Time for this step:  15.334586000011768  Time in all:  351.2942125000409
21  Time for this step:  16.19894466700498  Time in all:  367.493253459048
22  Time for this step:  10.713708249968477  Time in all:  378.207004084019
23  Time for this step:  11.714392459020019  Time in all:  389.9215034590452
24  Time for this step:  9.394479500013404  Time in all:  399.3160195000237
25  Time for this step:  5.939029959030449  Time in all:  405.2552503340412
26  Time for this step:  8.58289495803183  Time in all:  413.8381792920409
27  Time for this step:  4.704666042001918  Time in all:  418.5429457090213
28  Time for this step:  10.396339458005968  Time in all:  428.9393205420347
29  Time for this step:  1.2531971669523045  Time in all:  430.1926560419961
30  Time for this step:  2.574201458017342  Time in all:  432.76689716702094
31  Time for this step:  7.818879499973264  Time in all:  440.58585316699464
32  Time for this step:  8.757375875022262  Time in all:  449.34326395904645
33  Time for this step:  8.206286458007526  Time in all:  457.54959000000963
34  Time for this step:  4.299922416044865  Time in all:  461.8496197500499
35  Time for this step:  6.011070333013777  Time in all:  467.86073041701457
36  Time for this step:  9.460950583044905  Time in all:  477.32172129204264
37  Time for this step:  8.78436720801983  Time in all:  486.10651166702155
38  Time for this step:  8.336359125038143  Time in all:  494.44291033403715
39  Time for this step:  7.138833875011187  Time in all:  501.5818572920398
40  Time for this step:  11.94997441599844  Time in all:  513.5318783750408
41  Time for this step:  7.803287708025891  Time in all:  521.3352862500469
42  Time for this step:  6.7324482089607045  Time in all:  528.0677874590037
43  Time for this step:  1.5334024170297198  Time in all:  529.6015482090297
44  Time for this step:  1544.202948417049  Time in all:  2073.8045380420517
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [220], line 11
      9 num+=Integer(1)
     10 start=perf_counter()
---> 11 P=p_lambda_int(B(A,c),lam(A,v),Kbip(cplus,cminus,Integer(14)))
     12 end=perf_counter()
     13 if P.dimension()!=Integer(0):

Cell In [148], line 127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_seq_convexhull(B, la, seqs[Integer(0)])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_seq_convexhull(B, la, s))
    128     if P.dimension()==Integer(0):
    129         break

Cell In [148], line 83, in p_lambda_seq_convexhull(B, la, seq)
     81 P = Ps[Integer(0)]
     82 for Q in Ps:
---> 83     P = P.convex_hull(Q)
     84 return P

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1312, in Polyhedron_base5.convex_hull(self, other)
   1310 hull_rays = self.rays() + other.rays()
   1311 hull_lines = self.lines() + other.lines()
-> 1312 return self.parent().element_class(self.parent(), [hull_vertices, hull_rays, hull_lines], None)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:70, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
---> 70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:189, in Polyhedron_ppl.set_immutable(self)
    187 if not hasattr(self, '_Vrepresentation'):
    188     try:
--> 189         self._init_Vrepresentation_from_ppl(True)
    190     except TypeError as e:
    191         # Apparently the polyhedron is (no longer) integral.
    192         self._clear_cache()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:300, in Polyhedron_ppl._init_Vrepresentation_from_ppl(self, minimize)
    298     raise TypeError("Vrepresentation of mutable polyhedra cannot be recomputed")
    299 self._Vrepresentation = []
--> 300 gs = self._ppl_polyhedron.minimized_generators()
    301 parent = self.parent()
    302 for g in gs:

File ppl/polyhedron.pyx:340, in ppl.polyhedron.Polyhedron.minimized_generators()

KeyboardInterrupt: 
sage: A=CartanMatrix(['D',8])
....: cplus=[0,2,4,6,7]
....: cminus=[1,3,5]
....: c=cplus+cminus
....: from time import perf_counter
....: num=0
....: first=perf_counter()
....: for v in parasortables(A,c):
....:     num+=1
....:     start=perf_counter()
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbip(cplus,cminus,14))
....:     end=perf_counter()
....:     if P.dimension()!=0:
....:         print("ALERT: FAILURE")
....:     else:
....:         print(num," Time for this step: ",end-start," Time in all: ",end-f
....: irst)
....: 
1  Time for this step:  0.9761880000005476  Time in all:  1.051444208016619
2  Time for this step:  0.9096082500182092  Time in all:  1.961098458035849
3  Time for this step:  91.42031316598877  Time in all:  93.3815085410024
4  Time for this step:  34.16785162501037  Time in all:  127.5494056250318
5  Time for this step:  1.2706686250166968  Time in all:  128.8203279580339
6  Time for this step:  35.379693208029494  Time in all:  164.20006579102483
7  Time for this step:  13.132817041012459  Time in all:  177.33310029102722
8  Time for this step:  14.023888833005913  Time in all:  191.35703483299585
9  Time for this step:  25.114114750002045  Time in all:  216.47139612503815
10  Time for this step:  19.570232875004876  Time in all:  236.04167166602565
11  Time for this step:  17.000155207992066  Time in all:  253.04187308298424
12  Time for this step:  9.03158887499012  Time in all:  262.0736777909915
13  Time for this step:  10.7915382499923  Time in all:  272.8652573330328
14  Time for this step:  9.605967583018355  Time in all:  282.47144066600595
15  Time for this step:  7.948933832987677  Time in all:  290.420414458029
16  Time for this step:  3.7846660829964094  Time in all:  294.2051937080105
17  Time for this step:  6.055414749949705  Time in all:  300.26065020798706
18  Time for this step:  7.753395250008907  Time in all:  308.01410058303736
19  Time for this step:  27.17226620798465  Time in all:  335.1866102910135
20  Time for this step:  15.503615333000198  Time in all:  350.69026566599496
21  Time for this step:  16.580506458005402  Time in all:  367.2708887910121
22  Time for this step:  10.904589458019473  Time in all:  378.1755220830091
23  Time for this step:  11.44304566696519  Time in all:  389.6186874579871
24  Time for this step:  9.707284083007835  Time in all:  399.3260088330135
25  Time for this step:  6.064527791982982  Time in all:  405.39073733298574
26  Time for this step:  8.675116874976084  Time in all:  414.0658952909871
27  Time for this step:  4.863577375013847  Time in all:  418.9295937080169
28  Time for this step:  10.181041750009172  Time in all:  429.11068949999753
29  Time for this step:  1.2768495000200346  Time in all:  430.3878257080214
30  Time for this step:  2.4998995829955675  Time in all:  432.88776295800926
31  Time for this step:  7.893391833000351  Time in all:  440.7812551659881
32  Time for this step:  8.822614500008058  Time in all:  449.6039176250342
33  Time for this step:  8.36246641696198  Time in all:  457.9664208749891
34  Time for this step:  4.462118791008834  Time in all:  462.428760291019
35  Time for this step:  5.718328750052024  Time in all:  468.14712329104077
36  Time for this step:  8.940423041989561  Time in all:  477.0875863750116
37  Time for this step:  8.44588204199681  Time in all:  485.5336038329988
38  Time for this step:  8.428443374985363  Time in all:  493.9620884580072
39  Time for this step:  7.198856041999534  Time in all:  501.1610431250301
40  Time for this step:  12.024990707985125  Time in all:  513.186073541001
41  Time for this step:  7.8577415839536116  Time in all:  521.0439348749933
42  Time for this step:  6.7948152080061845  Time in all:  527.8387860830408
43  Time for this step:  1.546055625018198  Time in all:  529.3850730000413
44  Time for this step:  1503.7854396660114  Time in all:  2033.1705494160415
45  Time for this step:  6683.465127750009  Time in all:  8716.635728916037
46  Time for this step:  6689.829850333044  Time in all:  15406.465790958027
47  Time for this step:  1223.5640231249854  Time in all:  16630.02986316604
48  Time for this step:  502.6016082910355  Time in all:  17132.631688916008
49  Time for this step:  2093.190431041061  Time in all:  19225.822158541065
50  Time for this step:  2089.8951662499458  Time in all:  21315.717619415955
51  Time for this step:  353.6539495829493  Time in all:  21669.371608540998
52  Time for this step:  6.052911750040948  Time in all:  21675.42456658301
53  Time for this step:  3.546305208001286  Time in all:  21678.97101729107
54  Time for this step:  2048.1952560830396  Time in all:  23727.166313458
55  Time for this step:  6701.830216249917  Time in all:  30428.996568124974
56  Time for this step:  6711.135038999957  Time in all:  37140.131815625005
57  Time for this step:  1313.0682323749643  Time in all:  38453.20008787501
58  Time for this step:  612.7581120420946  Time in all:  39065.95841425005
59  Time for this step:  2094.9208339169854  Time in all:  41160.879288333
60  Time for this step:  2094.171294541098  Time in all:  43255.05078404106
61  Time for this step:  354.08581166598015  Time in all:  43609.13663991599
62  Time for this step:  5.05678262503352  Time in all:  43614.19347083301
63  Time for this step:  7.8092237079981714  Time in all:  43622.002791582956
64  Time for this step:  7.848713250015862  Time in all:  43629.851546082995
65  Time for this step:  5.590556957991794  Time in all:  43635.44220779103
66  Time for this step:  8.213233625050634  Time in all:  43643.65548425005
67  Time for this step:  7.953984416089952  Time in all:  43651.60957916605
68  Time for this step:  8.047968458966352  Time in all:  43659.657592250034
69  Time for this step:  5.699811417027377  Time in all:  43665.35750545806
70  Time for this step:  8.208933042013086  Time in all:  43673.56648195803
71  Time for this step:  4.01268012507353  Time in all:  43677.57925383304
72  Time for this step:  3.432227291050367  Time in all:  43681.011532541015
73  Time for this step:  8.480010083061643  Time in all:  43689.49166204105
74  Time for this step:  5.713327249977738  Time in all:  43695.20503249997
75  Time for this step:  5.5892030000686646  Time in all:  43700.794451541035
76  Time for this step:  5.861883790930733  Time in all:  43706.65637791599
77  Time for this step:  7.215649625053629  Time in all:  43713.87212533306
78  Time for this step:  8.140469125006348  Time in all:  43722.012630625046
79  Time for this step:  7.26269333390519  Time in all:  43729.27551149996
80  Time for this step:  8.161933165974915  Time in all:  43737.43748354097
81  Time for this step:  3.257003040984273  Time in all:  43740.69457216596
82  Time for this step:  3.300324125098996  Time in all:  43743.994935541064
83  Time for this step:  4.016841290984303  Time in all:  43748.01193954097
84  Time for this step:  2708.9616973329103  Time in all:  46456.97367441596
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [221], line 11
      9 num+=Integer(1)
     10 start=perf_counter()
---> 11 P=p_lambda_int(B(A,c),lam(A,v),Kbip(cplus,cminus,Integer(14)))
     12 end=perf_counter()
     13 if P.dimension()!=Integer(0):

Cell In [148], line 127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_seq_convexhull(B, la, seqs[Integer(0)])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_seq_convexhull(B, la, s))
    128     if P.dimension()==Integer(0):
    129         break

Cell In [148], line 83, in p_lambda_seq_convexhull(B, la, seq)
     81 P = Ps[Integer(0)]
     82 for Q in Ps:
---> 83     P = P.convex_hull(Q)
     84 return P

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1312, in Polyhedron_base5.convex_hull(self, other)
   1310 hull_rays = self.rays() + other.rays()
   1311 hull_lines = self.lines() + other.lines()
-> 1312 return self.parent().element_class(self.parent(), [hull_vertices, hull_rays, hull_lines], None)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:174, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    171     lines = tuple(lines)
    173 if vertices or rays or lines:
--> 174     self._init_from_Vrepresentation(vertices, rays, lines, **kwds)
    175 else:
    176     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:99, in Polyhedron_ppl._init_from_Vrepresentation(self, vertices, rays, lines, minimize, verbose)
     72 def _init_from_Vrepresentation(self, vertices, rays, lines, minimize=True, verbose=False):
     73     """
     74     Construct polyhedron from V-representation data.
     75 
   (...)
     97         sage: Polyhedron_ppl._init_from_Vrepresentation(p, [], [], [])
     98     """
---> 99     gs = self._convert_generators_to_ppl(vertices, rays, lines)
    100     if gs.empty():
    101         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'empty')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:473, in Polyhedron_ppl._convert_generators_to_ppl(vertices, rays, lines)
    471     vertices = []
    472 for v in vertices:
--> 473     gs.insert(Polyhedron_ppl._convert_generator_to_ppl(v, VERTEX))
    474 if rays is None:
    475     rays = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:446, in Polyhedron_ppl._convert_generator_to_ppl(v, typ)
    444 dv = [ d*v_i for v_i in v ]
    445 if typ == VERTEX:
--> 446     return ob(Linear_Expression(dv, 0), d)
    447 else:
    448     return ob(Linear_Expression(dv, 0))

File ppl/linear_algebra.pyx:654, in ppl.linear_algebra.Linear_Expression.__init__()

File ppl/linear_algebra.pyx:49, in ppl.linear_algebra.PPL_Coefficient_from_pyobject()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:1107, in sage.structure.element.Element.__richcmp__ (build/cythonized/sage/structure/element.c:18121)()
   1105         return (<Element>self)._richcmp_(other, op)
   1106     else:
-> 1107         return coercion_model.richcmp(self, other, op)
   1108 
   1109 cpdef _richcmp_(left, right, int op) noexcept:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:2021, in sage.structure.coerce.CoercionModel.richcmp (build/cythonized/sage/structure/coerce.c:26173)()
   2019 # Coerce to a common parent
   2020 try:
-> 2021     x, y = self.canonical_coercion(x, y)
   2022 except (TypeError, NotImplementedError):
   2023     pass

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1422, in sage.structure.coerce.CoercionModel.canonical_coercion (build/cythonized/sage/structure/coerce.c:18956)()
   1420             self._record_exception()
   1421 
-> 1422     raise TypeError("no common canonical parent for objects with parents: '%s' and '%s'"%(xp, yp))
   1423 
   1424 cpdef coercion_maps(self, R, S) noexcept:

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['B',4])
....: cplus=[0,2]
....: cminus=[1,3]
....: c=cplus+cminus
....: for v in sortables(A,c):
....:     h=coxeter_number(A)
....:     print("\n\n",v)
....:     for n in range(-2*h,0):
....:         pn=plusminus(cplus,cminus,n/2)
....:         P=p_lambda_int(B(A,cplus+cminus),lam(A,v),[[],pn])
....:         if P.dimension()==0:
....:             print(plusminus(cplus,cminus,n/2))
....: 


 [0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3]
[1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2]
[1, 3, 0, 2]


 [0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1]
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [222], line 10
      8 for n in range(-Integer(2)*h,Integer(0)):
      9     pn=plusminus(cplus,cminus,n/Integer(2))
---> 10     P=p_lambda_int(B(A,cplus+cminus),lam(A,v),[[],pn])
     11     if P.dimension()==Integer(0):
     12         print(plusminus(cplus,cminus,n/Integer(2)))

Cell In [148], line 127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_seq_convexhull(B, la, seqs[Integer(0)])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_seq_convexhull(B, la, s))
    128     if P.dimension()==Integer(0):
    129         break

Cell In [148], line 73, in p_lambda_seq_convexhull(B, la, seq)
     71 new_Ps = []
     72 for P in Ps:
---> 73     Pp = P.intersection(Hp)
     74     if Pp.dimension() == rk:
     75         new_Ps.append(Ep*Pp)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1371, in Polyhedron_base5.intersection(self, other)
   1369 parent = self.parent()
   1370 try:
-> 1371     intersection = parent.element_class(parent, None, [new_ieqs, new_eqns])
   1373     # Force calculation of the vertices.
   1374     _ = intersection.n_vertices()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:179, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    177 elif Hrep is not None:
    178     ieqs, eqns = Hrep
--> 179     self._init_from_Hrepresentation(ieqs, eqns, **kwds)
    180 else:
    181     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:129, in Polyhedron_ppl._init_from_Hrepresentation(self, ieqs, eqns, minimize, verbose)
    106 def _init_from_Hrepresentation(self, ieqs, eqns, minimize=True, verbose=False):
    107     """
    108     Construct polyhedron from H-representation data.
    109 
   (...)
    127         sage: Polyhedron_ppl._init_from_Hrepresentation(p, [], [])
    128     """
--> 129     cs = self._convert_constraints_to_ppl(ieqs, eqns)
    130     if cs.empty():
    131         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'universe')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:534, in Polyhedron_ppl._convert_constraints_to_ppl(ieqs, eqns)
    532     ieqs = []
    533 for ieq in ieqs:
--> 534     cs.insert(Polyhedron_ppl._convert_constraint_to_ppl(ieq, INEQUALITY))
    535 if eqns is None:
    536     eqns = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:509, in Polyhedron_ppl._convert_constraint_to_ppl(c, typ)
    507 A = dc[1:]
    508 if typ == INEQUALITY:
--> 509     return Linear_Expression(A, b) >= 0
    510 else:
    511     return Linear_Expression(A, b) == 0

File ppl/linear_algebra.pyx:654, in ppl.linear_algebra.Linear_Expression.__init__()

File ppl/linear_algebra.pyx:49, in ppl.linear_algebra.PPL_Coefficient_from_pyobject()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/rings/integer.pyx:914, in sage.rings.integer.Integer.__richcmp__ (build/cythonized/sage/rings/integer.c:16498)()
    912     c = mpz_cmp_d((<Integer>left).value, d)
    913 else:
--> 914     return coercion_model.richcmp(left, right, op)
    915 
    916 return rich_to_bool_sgn(op, c)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:2021, in sage.structure.coerce.CoercionModel.richcmp (build/cythonized/sage/structure/coerce.c:26173)()
   2019 # Coerce to a common parent
   2020 try:
-> 2021     x, y = self.canonical_coercion(x, y)
   2022 except (TypeError, NotImplementedError):
   2023     pass

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1422, in sage.structure.coerce.CoercionModel.canonical_coercion (build/cythonized/sage/structure/coerce.c:18967)()
   1420             self._record_exception()
   1421 
-> 1422     raise TypeError("no common canonical parent for objects with parents: '%s' and '%s'"%(xp, yp))
   1423 
   1424 cpdef coercion_maps(self, R, S) noexcept:

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['B',3])
....: cplus=[0,2]
....: cminus=[1]
....: c=cplus+cminus
....: for v in sortables(A,c):
....:     h=coxeter_number(A)
....:     print("\n\n",v)
....:     for n in range(-2*h,0):
....:         pn=plusminus(cplus,cminus,n/2)
....:         P=p_lambda_int(B(A,cplus+cminus),lam(A,v),[[],pn])
....:         if P.dimension()==0:
....:             print(plusminus(cplus,cminus,n/2))
....: 


 [0, 2, 1, 0, 2, 1, 0, 2, 1]
[1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2]
[1, 0, 2]


 [0, 2, 1, 0, 2, 1, 0, 2]
[1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2]
[1, 0, 2]


 [0, 2, 1, 0, 2, 1, 0]
[1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1]
[1, 0, 2, 1]


 [0, 2, 1, 0, 2, 1, 2]
[1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1]
[1, 0, 2, 1]


 [0, 2, 1, 0, 2, 1]
[1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1]
[1, 0, 2, 1]


 [0, 2, 1, 0, 2]
[1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2]
[1, 0, 2, 1, 0, 2]


 [0, 2, 1, 0]
[1, 0, 2, 1, 0, 2, 1]


 [0, 2, 1, 2, 1]
[1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2]
[1, 0, 2, 1, 0, 2]


 [0, 2, 1, 2]
[1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2]
[1, 0, 2, 1, 0, 2]


 [0, 2, 1]
[1, 0, 2, 1, 0, 2, 1]


 [0, 2]
[1, 0, 2, 1, 0, 2, 1, 0, 2]


 [0, 1, 0]
[1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2]
[1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1]
[1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2]
[1, 0, 2, 1, 0, 2, 1]
[1, 0, 2, 1, 0, 2]
[1, 0, 2, 1]
[1, 0, 2]


 [0, 1]
[1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2]
[1, 0, 2, 1, 0, 2, 1]
[1, 0, 2, 1, 0, 2]


 [0]
[1, 0, 2, 1, 0, 2, 1, 0, 2]


 [2, 1, 2, 1]
[1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1]
[1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2]
[1, 0, 2, 1]
[1, 0, 2]


 [2, 1, 2]
[1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1]
[1, 0, 2, 1]


 [2, 1]
[1, 0, 2, 1, 0, 2, 1]


 [2]
[1, 0, 2, 1, 0, 2, 1, 0, 2]


 [1]
[1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2]
[1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1]
[1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2]
[1, 0, 2, 1, 0, 2, 1, 0, 2]
[1, 0, 2, 1, 0, 2, 1]
[1, 0, 2, 1, 0, 2]
[1, 0, 2, 1]
[1, 0, 2]


 []
[1, 0, 2, 1, 0, 2, 1, 0, 2]
sage: A=CartanMatrix(['B',3])
....: cplus=[0,2]
....: cminus=[1]
....: c=cplus+cminus
....: for v in sortables(A,c):
....:     h=coxeter_number(A)
....:     print("\n\n",v)
....:     for n in range(-2*h,0):
....:         pn=plusminus(cplus,cminus,n/2)
....:         P=p_lambda_int(B(A,cplus+cminus),lam(A,v),[[],pn])
....:         if P.dimension()==0:
....:             print(n/2)
....: 


 [0, 2, 1, 0, 2, 1, 0, 2, 1]
-5
-1


 [0, 2, 1, 0, 2, 1, 0, 2]
-5
-1


 [0, 2, 1, 0, 2, 1, 0]
-11/2
-3/2


 [0, 2, 1, 0, 2, 1, 2]
-11/2
-3/2


 [0, 2, 1, 0, 2, 1]
-11/2
-3/2


 [0, 2, 1, 0, 2]
-6
-2


 [0, 2, 1, 0]
-5/2


 [0, 2, 1, 2, 1]
-6
-2


 [0, 2, 1, 2]
-6
-2


 [0, 2, 1]
-5/2


 [0, 2]
-3


 [0, 1, 0]
-6
-11/2
-5
-5/2
-2
-3/2
-1


 [0, 1]
-6
-5/2
-2


 [0]
-3


 [2, 1, 2, 1]
-11/2
-5
-3/2
-1


 [2, 1, 2]
-11/2
-3/2


 [2, 1]
-5/2


 [2]
-3


 [1]
-6
-11/2
-5
-3
-5/2
-2
-3/2
-1


 []
-3
sage: A=CartanMatrix(['B',3])
....: cplus=[0,2]
....: cminus=[1]
....: c=cplus+cminus
....: for v in parasortables(A,c):
....:     h=coxeter_number(A)
....:     print("\n\n",v)
....:     for n in range(-2*h,0):
....:         pn=plusminus(cplus,cminus,n/2)
....:         P=p_lambda_int(B(A,cplus+cminus),lam(A,v),[[],pn])
....:         if P.dimension()==0:
....:             print(n/2)
....: 


 [0, 2]
-3


 [0, 1, 0]
-6
-11/2
-5
-5/2
-2
-3/2
-1


 [0, 1]
-6
-5/2
-2


 [0]
-3


 [2, 1, 2, 1]
-11/2
-5
-3/2
-1


 [2, 1, 2]
-11/2
-3/2


 [2, 1]
-5/2


 [2]
-3


 [1]
-6
-11/2
-5
-3
-5/2
-2
-3/2
-1


 []
-3
sage: A=CartanMatrix(['B',5])
....: cplus=[0,2,4]
....: cminus=[1,3]
....: c=cplus+cminus
....: for v in parasortables(A,c):
....:     h=coxeter_number(A)
....:     print("\n\n",v)
....:     for n in range(-2*h,0):
....:         pn=plusminus(cplus,cminus,n/2)
....:         P=p_lambda_int(B(A,cplus+cminus),lam(A,v),[[],pn])
....:         if P.dimension()==0:
....:             print(n/2)
....: 


 [0, 2, 4, 1, 0, 2, 1]


 [0, 2, 4, 1, 0, 2]
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [226], line 10
      8 for n in range(-Integer(2)*h,Integer(0)):
      9     pn=plusminus(cplus,cminus,n/Integer(2))
---> 10     P=p_lambda_int(B(A,cplus+cminus),lam(A,v),[[],pn])
     11     if P.dimension()==Integer(0):
     12         print(n/Integer(2))

Cell In [148], line 127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_seq_convexhull(B, la, seqs[Integer(0)])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_seq_convexhull(B, la, s))
    128     if P.dimension()==Integer(0):
    129         break

Cell In [148], line 78, in p_lambda_seq_convexhull(B, la, seq)
     76     Pm = P.intersection(Hm)
     77     if Pm.dimension() == rk:
---> 78         new_Ps.append(Em*Pm)
     79 Ps = new_Ps
     80 B.mutate(k)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4099, in sage.structure.element.Matrix.__mul__ (build/cythonized/sage/structure/element.c:35219)()
   4097 
   4098         if BOTH_ARE_ELEMENT(cl):
-> 4099             return coercion_model.bin_op(left, right, mul)
   4100 
   4101         cdef long value

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1222, in sage.structure.coerce.CoercionModel.bin_op (build/cythonized/sage/structure/coerce.c:15809)()
   1220 if action is not None:
   1221     if (<Action>action)._is_left:
-> 1222         return (<Action>action)._act_(x, y)
   1223     else:
   1224         return (<Action>action)._act_(y, x)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_actions.pyx:157, in sage.structure.coerce_actions.ActedUponAction._act_ (build/cythonized/sage/structure/coerce_actions.c:8579)()
    155     <... 'sage.structure.coerce_actions.ActedUponAction'>
    156 """
--> 157 return (<Element>x)._acted_upon_(g, not self._is_left)
    158 
    159 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:949, in sage.structure.element.Element._acted_upon_ (build/cythonized/sage/structure/element.c:16495)()
    947     return None
    948 
--> 949 cpdef _acted_upon_(self, x, bint self_on_left) noexcept:
    950     """
    951     Use this method to implement ``self`` acted on by x.

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1450, in Polyhedron_base5._acted_upon_(self, actor, self_on_left)
   1448         raise ValueError("matrices should act on the left")
   1449     else:
-> 1450         return self.linear_transformation(actor)
   1451 else:
   1452     return self.dilation(actor)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1856, in Polyhedron_base5.linear_transformation(self, linear_transf, new_base_ring)
   1852             new_inequalities = ( h for h in matrix(R, self.inequalities())*N )
   1854             # The equations are the left kernel matrix of the homogeneous vertices
   1855             # or equivalently a basis thereof.
-> 1856             new_equations = (new_homogeneous_basis.transpose()).right_kernel_matrix()
   1858 else:
   1859     new_vertices = [[] for v in self.vertex_generator() ]

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/matrix2.pyx:4590, in sage.matrix.matrix2.Matrix.right_kernel_matrix (build/cythonized/sage/matrix/matrix2.c:42190)()
   4588 if M is None:
   4589     try:
-> 4590         format, M = self._right_kernel_matrix(algorithm=algorithm, proof=proof)
   4591     except AttributeError:
   4592         pass

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/matrix_rational_dense.pyx:1413, in sage.matrix.matrix_rational_dense.Matrix_rational_dense._right_kernel_matrix (build/cythonized/sage/matrix/matrix_rational_dense.cpp:23333)()
   1411 else:
   1412     A, _ = self._clear_denom()
-> 1413     K = A._rational_kernel_iml().transpose().change_ring(QQ)
   1414 verbose("done computing right kernel matrix over the rationals for %sx%s matrix" % (self.nrows(), self.ncols()),level=1, t=tm)
   1415 return 'computed-iml-rational', K

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/matrix_integer_dense.pyx:3893, in sage.matrix.matrix_integer_dense.Matrix_integer_dense._rational_kernel_iml (build/cythonized/sage/matrix/matrix_integer_dense.cpp:45979)()
   3891 # Now read the answer as a matrix.
   3892 cdef Matrix_integer_dense M
-> 3893 M = self._new(self._ncols, dim)
   3894 k = 0
   3895 for i in range(self._ncols):

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/matrix_integer_dense.pyx:623, in sage.matrix.matrix_integer_dense.Matrix_integer_dense._new (build/cythonized/sage/matrix/matrix_integer_dense.cpp:19468)()
    621     P = self._parent
    622 else:
--> 623     P = matrix_space.MatrixSpace(ZZ, nrows, ncols, sparse=False)
    624 cdef Matrix_integer_dense ans = Matrix_integer_dense.__new__(Matrix_integer_dense, P, None, None, None)
    625 return ans

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/misc/classcall_metaclass.pyx:320, in sage.misc.classcall_metaclass.ClasscallMetaclass.__call__ (build/cythonized/sage/misc/classcall_metaclass.c:3156)()
    318 """
    319 if cls.classcall is not None:
--> 320     return cls.classcall(cls, *args, **kwds)
    321 else:
    322     # Fast version of type.__call__(cls, *args, **kwds)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/matrix_space.py:532, in MatrixSpace.__classcall__(cls, base_ring, nrows, ncols, sparse, implementation, **kwds)
    428 class MatrixSpace(UniqueRepresentation, Parent):
    429     """
    430     The space of matrices of given size and base ring
    431 
   (...)
    529         True
    530     """
--> 532     @staticmethod
    533     def __classcall__(cls, base_ring, nrows, ncols=None, sparse=False, implementation=None, **kwds):
    534         """
    535         Normalize the arguments to call the ``__init__`` constructor.
    536 
   (...)
    578             False
    579         """
    580         if base_ring not in _Rings:

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: v=[0, 2, 4, 1, 0, 2, 1]
sage: lam(A,v)
(-1, -1, -1, 5, -1)
sage: B(A,c)
[ 0  1  0  0  0]
[-1  0 -1  0  0]
[ 0  1  0  1  0]
[ 0  0 -1  0 -1]
[ 0  0  0  2  0]
sage: A=CartanMatrix(['B',5])
....: cplus=[0,2,4]
....: cminus=[1,3]
....: c=cplus+cminus
....: for v in parasortables(A,c):
....:     h=coxeter_number(A)
....:     print("\n\n",v)
....:     for p in Kbip(cplus,cminus,h):
....:         P=p_lambda_int(B(A,cplus+cminus),lam(A,v),[[],p])
....:         if P.dimension()==0:
....:             print(p)
....: 


 [0, 2, 4, 1, 0, 2, 1]


 [0, 2, 4, 1, 0, 2]


 [0, 2, 4, 1, 0]
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [230], line 9
      7 print("\n\n",v)
      8 for p in Kbip(cplus,cminus,h):
----> 9     P=p_lambda_int(B(A,cplus+cminus),lam(A,v),[[],p])
     10     if P.dimension()==Integer(0):
     11         print(p)

Cell In [148], line 127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_seq_convexhull(B, la, seqs[Integer(0)])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_seq_convexhull(B, la, s))
    128     if P.dimension()==Integer(0):
    129         break

Cell In [148], line 73, in p_lambda_seq_convexhull(B, la, seq)
     71 new_Ps = []
     72 for P in Ps:
---> 73     Pp = P.intersection(Hp)
     74     if Pp.dimension() == rk:
     75         new_Ps.append(Ep*Pp)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1371, in Polyhedron_base5.intersection(self, other)
   1369 parent = self.parent()
   1370 try:
-> 1371     intersection = parent.element_class(parent, None, [new_ieqs, new_eqns])
   1373     # Force calculation of the vertices.
   1374     _ = intersection.n_vertices()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:179, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    177 elif Hrep is not None:
    178     ieqs, eqns = Hrep
--> 179     self._init_from_Hrepresentation(ieqs, eqns, **kwds)
    180 else:
    181     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:129, in Polyhedron_ppl._init_from_Hrepresentation(self, ieqs, eqns, minimize, verbose)
    106 def _init_from_Hrepresentation(self, ieqs, eqns, minimize=True, verbose=False):
    107     """
    108     Construct polyhedron from H-representation data.
    109 
   (...)
    127         sage: Polyhedron_ppl._init_from_Hrepresentation(p, [], [])
    128     """
--> 129     cs = self._convert_constraints_to_ppl(ieqs, eqns)
    130     if cs.empty():
    131         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'universe')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:534, in Polyhedron_ppl._convert_constraints_to_ppl(ieqs, eqns)
    532     ieqs = []
    533 for ieq in ieqs:
--> 534     cs.insert(Polyhedron_ppl._convert_constraint_to_ppl(ieq, INEQUALITY))
    535 if eqns is None:
    536     eqns = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:509, in Polyhedron_ppl._convert_constraint_to_ppl(c, typ)
    507 A = dc[1:]
    508 if typ == INEQUALITY:
--> 509     return Linear_Expression(A, b) >= 0
    510 else:
    511     return Linear_Expression(A, b) == 0

File ppl/linear_algebra.pyx:654, in ppl.linear_algebra.Linear_Expression.__init__()

File ppl/linear_algebra.pyx:49, in ppl.linear_algebra.PPL_Coefficient_from_pyobject()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/rings/integer.pyx:914, in sage.rings.integer.Integer.__richcmp__ (build/cythonized/sage/rings/integer.c:16498)()
    912     c = mpz_cmp_d((<Integer>left).value, d)
    913 else:
--> 914     return coercion_model.richcmp(left, right, op)
    915 
    916 return rich_to_bool_sgn(op, c)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:2021, in sage.structure.coerce.CoercionModel.richcmp (build/cythonized/sage/structure/coerce.c:26173)()
   2019 # Coerce to a common parent
   2020 try:
-> 2021     x, y = self.canonical_coercion(x, y)
   2022 except (TypeError, NotImplementedError):
   2023     pass

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1422, in sage.structure.coerce.CoercionModel.canonical_coercion (build/cythonized/sage/structure/coerce.c:18956)()
   1420             self._record_exception()
   1421 
-> 1422     raise TypeError("no common canonical parent for objects with parents: '%s' and '%s'"%(xp, yp))
   1423 
   1424 cpdef coercion_maps(self, R, S) noexcept:

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['B',4])
....: cplus=[0,2]
....: cminus=[1,3]
....: c=cplus+cminus
....: for v in parasortables(A,c):
....:     h=coxeter_number(A)
....:     print("\n\n",v)
....:     for p in Kbip(cplus,cminus,h):
....:         P=p_lambda_int(B(A,cplus+cminus),lam(A,v),[[],p])
....:         if P.dimension()==0:
....:             print(p)
....: 


 [0, 2, 1, 0, 2, 1]
[0, 2, 1, 3, 0, 2, 1, 3]


 [0, 2, 1, 0, 2]
[0, 2, 1, 3, 0, 2, 1, 3]


 [0, 2, 1, 0]
[0, 2, 1, 3, 0, 2]


 [0, 2, 1, 2]
[0, 2, 1, 3, 0, 2]


 [0, 2, 1]
[0, 2, 1, 3, 0, 2]


 [0, 2, 3, 2, 3]


 [0, 2, 3, 2]


 [0, 2, 3]


 [0, 2]
[0, 2, 1, 3]


 [0, 1, 3, 0]
[1, 3, 0, 2]
[0, 2, 1, 3, 0, 2]
[0, 2, 1, 3, 0, 2, 1, 3]
[0, 2, 1, 3, 0, 2, 1, 3, 0, 2]
[0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3]
[0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2]


 [0, 1, 3]
[0, 2, 1, 3, 0, 2]
[0, 2, 1, 3, 0, 2, 1, 3]
[0, 2, 1, 3, 0, 2, 1, 3, 0, 2]
[0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3]
[0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2]


 [0, 1, 0]
[0, 2, 1, 3, 0, 2]
[0, 2, 1, 3, 0, 2, 1, 3]


 [0, 1]
[0, 2, 1, 3, 0, 2]


 [0, 3]
[0, 2, 1, 3]


 [0]
[0, 2, 1, 3]


 [2, 1, 3, 2, 1, 3, 2, 1, 3]
[1, 3, 0, 2]


 [2, 1, 3, 2, 1, 3, 2, 1]
[1, 3, 0, 2]


 [2, 1, 3, 2, 1, 3, 2, 3]


 [2, 1, 3, 2, 1, 3, 2]


 [2, 1, 3, 2, 1, 3]
[0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3]


 [2, 1, 3, 2, 1]


 [2, 1, 3, 2, 3, 2]
[0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3]
[0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2]


 [2, 1, 3, 2, 3]
[0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3]


 [2, 1, 3, 2]


 [2, 1, 3]
[0, 2, 1, 3, 0, 2]


 [2, 1, 2]
[0, 2, 1, 3, 0, 2]
[0, 2, 1, 3, 0, 2, 1, 3]


 [2, 1]
[0, 2, 1, 3, 0, 2]


 [2, 3, 2, 3]


 [2, 3, 2]


 [2, 3]


 [2]
[0, 2, 1, 3]


 [1, 3]
[1, 3, 0, 2]
[0, 2, 1, 3]
[0, 2, 1, 3, 0, 2]
[0, 2, 1, 3, 0, 2, 1, 3]
[0, 2, 1, 3, 0, 2, 1, 3, 0, 2]
[0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3]
[0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2]


 [1]
[0, 2, 1, 3]
[0, 2, 1, 3, 0, 2]
[0, 2, 1, 3, 0, 2, 1, 3]


 [3]
[0, 2, 1, 3]


 []
[0, 2, 1, 3]
sage: A=CartanMatrix(['B',4])
....: cplus=[0,2]
....: cminus=[1,3]
....: c=cplus+cminus
....: for v in parasortables(A,c):
....:     h=coxeter_number(A)
....:     print("\n\n",v)
....:     P=p_lambda_int(B(A,cplus+cminus),lam(A,v),Kbip(cminus,cplus,h))
....:     if P.dimension()==0:
....:         print("yes")
....: 


 [0, 2, 1, 0, 2, 1]
yes


 [0, 2, 1, 0, 2]
yes


 [0, 2, 1, 0]
yes


 [0, 2, 1, 2]
yes


 [0, 2, 1]
yes


 [0, 2, 3, 2, 3]
yes


 [0, 2, 3, 2]
yes


 [0, 2, 3]
yes


 [0, 2]
yes


 [0, 1, 3, 0]
yes


 [0, 1, 3]
yes


 [0, 1, 0]
yes


 [0, 1]
yes


 [0, 3]
yes


 [0]
yes


 [2, 1, 3, 2, 1, 3, 2, 1, 3]
yes


 [2, 1, 3, 2, 1, 3, 2, 1]
yes


 [2, 1, 3, 2, 1, 3, 2, 3]
yes


 [2, 1, 3, 2, 1, 3, 2]
yes


 [2, 1, 3, 2, 1, 3]
yes


 [2, 1, 3, 2, 1]
yes


 [2, 1, 3, 2, 3, 2]
yes


 [2, 1, 3, 2, 3]
yes


 [2, 1, 3, 2]
yes


 [2, 1, 3]
yes


 [2, 1, 2]
yes


 [2, 1]
yes


 [2, 3, 2, 3]
yes


 [2, 3, 2]
yes


 [2, 3]
yes


 [2]
yes


 [1, 3]
yes


 [1]
yes


 [3]
yes


 []
yes
sage: A=CartanMatrix(['B',4])
....: cplus=[0,2]
....: cminus=[1,3]
....: c=cplus+cminus
....: for v in parasortables(A,c):
....:     h=coxeter_number(A)
....:     print("\n\n",v)
....:     Ps=[p_lambda_int(B(A,cplus+cminus),lam(A,v),[p]) for p in Kbip(cminus,
....: cplus,h)]
....:     for i in range(len(Ps)):
....:         for j in range(i,len(Ps)):
....:             P=Ps[i].intersection(Ps[j])
....:             if P.dimension()==0:
....:                 print(P)
....: 


 [0, 2, 1, 0, 2, 1]
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex


 [0, 2, 1, 0, 2]
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex


 [0, 2, 1, 0]
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex


 [0, 2, 1, 2]
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex


 [0, 2, 1]
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex


 [0, 2, 3, 2, 3]
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex


 [0, 2, 3, 2]
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex


 [0, 2, 3]
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex


 [0, 2]
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex


 [0, 1, 3, 0]
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex


 [0, 1, 3]
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex


 [0, 1, 0]
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex


 [0, 1]
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex


 [0, 3]
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex


 [0]
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex


 [2, 1, 3, 2, 1, 3, 2, 1, 3]
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex


 [2, 1, 3, 2, 1, 3, 2, 1]
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex


 [2, 1, 3, 2, 1, 3, 2, 3]
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex


 [2, 1, 3, 2, 1, 3, 2]
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex


 [2, 1, 3, 2, 1, 3]
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex


 [2, 1, 3, 2, 1]
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex


 [2, 1, 3, 2, 3, 2]
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex


 [2, 1, 3, 2, 3]
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex


 [2, 1, 3, 2]
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex


 [2, 1, 3]
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex


 [2, 1, 2]
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex


 [2, 1]
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex


 [2, 3, 2, 3]
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex


 [2, 3, 2]
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex


 [2, 3]
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex


 [2]
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex


 [1, 3]
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex


 [1]
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex


 [3]
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex


 []
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['B',5])
....: cplus=[0,2,4]
....: cminus=[1,3]
....: c=cplus+cminus
....: for v in parasortables(A,c):
....:     h=coxeter_number(A)
....:     print("\n\n",v)
....:     Ps=[p_lambda_int(B(A,cplus+cminus),lam(A,v),[p]) for p in Kbip(cminus,
....: cplus,h)]
....:     for i in range(len(Ps)):
....:         for j in range(i,len(Ps)):
....:             P=Ps[i].intersection(Ps[j])
....:             if P.dimension()==0:
....:                 print(P)
....: 


 [0, 2, 4, 1, 0, 2, 1]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [0, 2, 4, 1, 0, 2]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [0, 2, 4, 1, 0]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [0, 2, 4, 1, 2]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [0, 2, 4, 1]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [0, 2, 4, 3, 2, 4, 3, 2, 4, 3]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [0, 2, 4, 3, 2, 4, 3, 2, 4]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [0, 2, 4, 3, 2, 4, 3, 2]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [0, 2, 4, 3, 2, 4, 3, 4]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [0, 2, 4, 3, 2, 4, 3]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [0, 2, 4, 3, 2, 4]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [0, 2, 4, 3, 2]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [0, 2, 4, 3, 4, 3]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [0, 2, 4, 3, 4]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [0, 2, 4, 3]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [0, 2, 4]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [0, 2, 1, 3, 0, 2, 1, 3, 0, 2]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [0, 2, 1, 3, 0, 2, 1, 3, 0]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [0, 2, 1, 3, 0, 2, 1, 3, 2]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [0, 2, 1, 3, 0, 2, 1, 3]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [0, 2, 1, 3, 0, 2, 1, 0]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [0, 2, 1, 3, 0, 2, 1]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [0, 2, 1, 3, 0, 2, 3]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [0, 2, 1, 3, 0, 2]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [0, 2, 1, 3, 0]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [0, 2, 1, 3, 2, 1, 3]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [0, 2, 1, 3, 2, 1]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [0, 2, 1, 3, 2, 3]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [0, 2, 1, 3, 2]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [0, 2, 1, 3]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [0, 2, 1, 0, 2, 1]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [0, 2, 1, 0, 2]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [0, 2, 1, 0]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [0, 2, 1, 2]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [0, 2, 1]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [0, 2, 3, 2]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [0, 2, 3]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [0, 2]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [0, 4, 1, 3, 0, 4, 3]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [0, 4, 1, 3, 0, 4]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [0, 4, 1, 3, 0]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [0, 4, 1, 3, 4, 3]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [0, 4, 1, 3, 4]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [0, 4, 1, 3]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [0, 4, 1, 0]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [0, 4, 1]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [0, 4, 3, 4, 3]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [0, 4, 3, 4]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [0, 4, 3]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [0, 4]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [0, 1, 3, 0]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [0, 1, 3]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [0, 1, 0]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [0, 1]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [0, 3]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [0]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 3]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 1]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 4]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 3, 2, 4]
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [234], line 8
      6 h=coxeter_number(A)
      7 print("\n\n",v)
----> 8 Ps=[p_lambda_int(B(A,cplus+cminus),lam(A,v),[p]) for p in Kbip(cminus,cplus,h)]
      9 for i in range(len(Ps)):
     10     for j in range(i,len(Ps)):

Cell In [234], line 8, in <listcomp>(.0)
      6 h=coxeter_number(A)
      7 print("\n\n",v)
----> 8 Ps=[p_lambda_int(B(A,cplus+cminus),lam(A,v),[p]) for p in Kbip(cminus,cplus,h)]
      9 for i in range(len(Ps)):
     10     for j in range(i,len(Ps)):

Cell In [148], line 127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_seq_convexhull(B, la, seqs[Integer(0)])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_seq_convexhull(B, la, s))
    128     if P.dimension()==Integer(0):
    129         break

Cell In [148], line 76, in p_lambda_seq_convexhull(B, la, seq)
     74 if Pp.dimension() == rk:
     75     new_Ps.append(Ep*Pp)
---> 76 Pm = P.intersection(Hm)
     77 if Pm.dimension() == rk:
     78     new_Ps.append(Em*Pm)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1371, in Polyhedron_base5.intersection(self, other)
   1369 parent = self.parent()
   1370 try:
-> 1371     intersection = parent.element_class(parent, None, [new_ieqs, new_eqns])
   1373     # Force calculation of the vertices.
   1374     _ = intersection.n_vertices()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:70, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
---> 70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:195, in Polyhedron_ppl.set_immutable(self)
    193         raise e
    194 if not hasattr(self, '_Hrepresentation'):
--> 195     self._init_Hrepresentation_from_ppl(True)
    196 self._is_mutable = False

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:344, in Polyhedron_ppl._init_Hrepresentation_from_ppl(self, minimize)
    342 for c in cs:
    343     if c.is_inequality():
--> 344         parent._make_Inequality(self, (c.inhomogeneous_term(),) + c.coefficients())
    345     elif c.is_equality():
    346         parent._make_Equation(self, (c.inhomogeneous_term(),) + c.coefficients())

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:1069, in Polyhedra_base._make_Inequality(self, polyhedron, data)
   1067 except IndexError:
   1068     obj = Inequality(self)
-> 1069 obj._set_data(polyhedron, data)
   1070 return obj

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/representation.py:439, in Hrepresentation._set_data(self, polyhedron, data)
    436 if len(data) != self._vector.degree():
    437     raise ValueError('H-representation data requires a list of length ambient_dim+1')
--> 439 self._vector[:] = data
    440 self._A[:] = data[1:]
    441 self._b = self._base_ring(data[0])

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/modules/free_module_element.pyx:1893, in sage.modules.free_module_element.FreeModuleElement.__setitem__ (build/cythonized/sage/modules/free_module_element.c:20047)()
   1891 if isinstance(i, slice):
   1892     PySlice_GetIndicesEx(i, d, &start, &stop, &step, &slicelength)
-> 1893     values = [R(x) for x in value]
   1894     if len(values) != slicelength:
   1895         raise IndexError("slice assignment would change dimension")

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/parent.pyx:901, in sage.structure.parent.Parent.__call__ (build/cythonized/sage/structure/parent.c:12658)()
    899 if mor is not None:
    900     if no_extra_args:
--> 901         return mor._call_(x)
    902     else:
    903         return mor._call_with_args(x, args, kwds)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:158, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_ (build/cythonized/sage/structure/coerce_maps.c:6834)()
    156 cdef Parent C = self._codomain
    157 try:
--> 158     return C._element_constructor(x)
    159 except Exception:
    160     if print_warnings:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/rings/rational.pyx:536, in sage.rings.rational.Rational.__init__ (build/cythonized/sage/rings/rational.cpp:14305)()
    534     """
    535     if x is not None:
--> 536         self.__set_value(x, base)
    537 
    538 def __reduce__(self):

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/rings/rational.pyx:670, in sage.rings.rational.Rational._Rational__set_value (build/cythonized/sage/rings/rational.cpp:16246)()
    668         raise TypeError("unable to convert {!r} to a rational".format(x))
    669 
--> 670 elif isinstance(x, fractions.Fraction):
    671     mpz_set(mpq_numref(self.value), (<integer.Integer> integer.Integer(x.numerator)).value)
    672     mpz_set(mpq_denref(self.value), (<integer.Integer> integer.Integer(x.denominator)).value)

File <frozen abc>:117, in __instancecheck__(cls, instance)

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: Kbip??
Signature: Kbip(cplus, cminus, Coxnum)
Source:   
def Kbip(cplus,cminus,Coxnum):
    out = [cminus+cplus,cminus,[]]
    for i in range(Coxnum-Integer(1)):
        if (i//Integer(2))*Integer(2)==i:  #even
            out=out+[out[-Integer(1)]+cplus]
        else:
            out=out+[out[-Integer(1)]+cminus]
    return out
File:      ~/<ipython-input-148-28187d6f06ea>
Type:      function
sage: A=CartanMatrix(['B',5])
....: cplus=[0,2,4]
....: cminus=[1,3]
....: c=cplus+cminus
....: for v in parasortables(A,c):
....:     h=coxeter_number(A)
....:     print("\n\n",v)
....:     Ps=[p_lambda_int(B(A,cplus+cminus),lam(A,v),[p]) for p in Kbip(cminus,
....: cplus,h)]
....:     for i in range(len(Ps)):
....:         for j in range(i,len(Ps)):
....:             P=Ps[i].intersection(Ps[j])
....:             if P.dimension()==0:
....:                 print(P)
....: 


 [0, 2, 4, 1, 0, 2, 1]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [0, 2, 4, 1, 0, 2]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex


 [0, 2, 4, 1, 0]
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [236], line 8
      6 h=coxeter_number(A)
      7 print("\n\n",v)
----> 8 Ps=[p_lambda_int(B(A,cplus+cminus),lam(A,v),[p]) for p in Kbip(cminus,cplus,h)]
      9 for i in range(len(Ps)):
     10     for j in range(i,len(Ps)):

Cell In [236], line 8, in <listcomp>(.0)
      6 h=coxeter_number(A)
      7 print("\n\n",v)
----> 8 Ps=[p_lambda_int(B(A,cplus+cminus),lam(A,v),[p]) for p in Kbip(cminus,cplus,h)]
      9 for i in range(len(Ps)):
     10     for j in range(i,len(Ps)):

Cell In [148], line 127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_seq_convexhull(B, la, seqs[Integer(0)])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_seq_convexhull(B, la, s))
    128     if P.dimension()==Integer(0):
    129         break

Cell In [148], line 73, in p_lambda_seq_convexhull(B, la, seq)
     71 new_Ps = []
     72 for P in Ps:
---> 73     Pp = P.intersection(Hp)
     74     if Pp.dimension() == rk:
     75         new_Ps.append(Ep*Pp)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1371, in Polyhedron_base5.intersection(self, other)
   1369 parent = self.parent()
   1370 try:
-> 1371     intersection = parent.element_class(parent, None, [new_ieqs, new_eqns])
   1373     # Force calculation of the vertices.
   1374     _ = intersection.n_vertices()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:70, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
---> 70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:195, in Polyhedron_ppl.set_immutable(self)
    193         raise e
    194 if not hasattr(self, '_Hrepresentation'):
--> 195     self._init_Hrepresentation_from_ppl(True)
    196 self._is_mutable = False

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:344, in Polyhedron_ppl._init_Hrepresentation_from_ppl(self, minimize)
    342 for c in cs:
    343     if c.is_inequality():
--> 344         parent._make_Inequality(self, (c.inhomogeneous_term(),) + c.coefficients())
    345     elif c.is_equality():
    346         parent._make_Equation(self, (c.inhomogeneous_term(),) + c.coefficients())

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:1069, in Polyhedra_base._make_Inequality(self, polyhedron, data)
   1067 except IndexError:
   1068     obj = Inequality(self)
-> 1069 obj._set_data(polyhedron, data)
   1070 return obj

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/representation.py:441, in Hrepresentation._set_data(self, polyhedron, data)
    439 self._vector[:] = data
    440 self._A[:] = data[1:]
--> 441 self._b = self._base_ring(data[0])
    443 self._index = len(polyhedron._Hrepresentation)
    444 polyhedron._Hrepresentation.append(self)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/parent.pyx:901, in sage.structure.parent.Parent.__call__ (build/cythonized/sage/structure/parent.c:12658)()
    899 if mor is not None:
    900     if no_extra_args:
--> 901         return mor._call_(x)
    902     else:
    903         return mor._call_with_args(x, args, kwds)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:158, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_ (build/cythonized/sage/structure/coerce_maps.c:6834)()
    156 cdef Parent C = self._codomain
    157 try:
--> 158     return C._element_constructor(x)
    159 except Exception:
    160     if print_warnings:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/rings/rational.pyx:536, in sage.rings.rational.Rational.__init__ (build/cythonized/sage/rings/rational.cpp:14305)()
    534     """
    535     if x is not None:
--> 536         self.__set_value(x, base)
    537 
    538 def __reduce__(self):

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/rings/rational.pyx:670, in sage.rings.rational.Rational._Rational__set_value (build/cythonized/sage/rings/rational.cpp:16246)()
    668         raise TypeError("unable to convert {!r} to a rational".format(x))
    669 
--> 670 elif isinstance(x, fractions.Fraction):
    671     mpz_set(mpq_numref(self.value), (<integer.Integer> integer.Integer(x.numerator)).value)
    672     mpz_set(mpq_denref(self.value), (<integer.Integer> integer.Integer(x.denominator)).value)

File <frozen abc>:117, in __instancecheck__(cls, instance)

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['B',5])
....: cplus=[0,2,4]
....: cminus=[1,3]
....: c=cplus+cminus
....: for v in parasortables(A,c):
....:     h=coxeter_number(A)
....:     print("\n\n",v)
....:     Ps=[(p_lambda_int(B(A,cplus+cminus),lam(A,v),[p]),p) for p in Kb
....: ip(cminus,
....: cplus,h)]
....:     for i in range(len(Ps)):
....:         for j in range(i,len(Ps)):
....:             P=Ps[i][0].intersection(Ps[j][0])
....:             if P.dimension()==0:
....:                 print(Ps[i][1],Ps[j][1])
  Cell In [237], line 9
    ip(cminus,
    ^
SyntaxError: invalid syntax

sage: A=CartanMatrix(['B',5])
....: cplus=[0,2,4]
....: cminus=[1,3]
....: c=cplus+cminus
....: for v in parasortables(A,c):
....:     h=coxeter_number(A)
....:     print("\n\n",v)
....:     Ps=[(p_lambda_int(B(A,cplus+cminus),lam(A,v),[p]),p) for p in Kbip(cmi
....: nus,cplus,h)]
....:     for i in range(len(Ps)):
....:         for j in range(i,len(Ps)):
....:             P=Ps[i][0].intersection(Ps[j][0])
....:             if P.dimension()==0:
....:                 print(Ps[i][1],Ps[j][1])
....: 

    
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [238], line 5
      3 cminus=[Integer(1),Integer(3)]
      4 c=cplus+cminus
----> 5 for v in parasortables(A,c):
      6     h=coxeter_number(A)
      7     print("\n\n",v)

Cell In [148], line 271, in parasortables(A, c)
    270 def parasortables(A,c):  # c-sortable elements not starting with c, i.e. in some proper parabolic
--> 271     for v in sortables(A,c):
    272         if len(v)<len(c) or v[Integer(0):len(c)]!=c:
    273             yield v

Cell In [148], line 260, in sortables(A, c)
    259 def sortables(A,c):
--> 260     yield from sortables_remaining(A,c,[],vector([Integer(1)]*A.nrows()))

Cell In [148], line 267, in sortables_remaining(A, c, sort, vec)
    265 else:
    266     if vec[c[Integer(0)]]>Integer(0):
--> 267         yield from sortables_remaining(A,c[Integer(1):]+[c[Integer(0)]],sort+[c[Integer(0)]],reflect(A,vec,c[Integer(0)]))
    268     yield from sortables_remaining(A,c[Integer(1):],sort,vec)

Cell In [148], line 267, in sortables_remaining(A, c, sort, vec)
    265 else:
    266     if vec[c[Integer(0)]]>Integer(0):
--> 267         yield from sortables_remaining(A,c[Integer(1):]+[c[Integer(0)]],sort+[c[Integer(0)]],reflect(A,vec,c[Integer(0)]))
    268     yield from sortables_remaining(A,c[Integer(1):],sort,vec)

    [... skipping similar frames: sortables_remaining at line 267 (20 times)]

Cell In [148], line 267, in sortables_remaining(A, c, sort, vec)
    265 else:
    266     if vec[c[Integer(0)]]>Integer(0):
--> 267         yield from sortables_remaining(A,c[Integer(1):]+[c[Integer(0)]],sort+[c[Integer(0)]],reflect(A,vec,c[Integer(0)]))
    268     yield from sortables_remaining(A,c[Integer(1):],sort,vec)

Cell In [148], line 268, in sortables_remaining(A, c, sort, vec)
    266 if vec[c[Integer(0)]]>Integer(0):
    267     yield from sortables_remaining(A,c[Integer(1):]+[c[Integer(0)]],sort+[c[Integer(0)]],reflect(A,vec,c[Integer(0)]))
--> 268 yield from sortables_remaining(A,c[Integer(1):],sort,vec)

Cell In [148], line 267, in sortables_remaining(A, c, sort, vec)
    265 else:
    266     if vec[c[Integer(0)]]>Integer(0):
--> 267         yield from sortables_remaining(A,c[Integer(1):]+[c[Integer(0)]],sort+[c[Integer(0)]],reflect(A,vec,c[Integer(0)]))
    268     yield from sortables_remaining(A,c[Integer(1):],sort,vec)

Cell In [148], line 268, in sortables_remaining(A, c, sort, vec)
    266 if vec[c[Integer(0)]]>Integer(0):
    267     yield from sortables_remaining(A,c[Integer(1):]+[c[Integer(0)]],sort+[c[Integer(0)]],reflect(A,vec,c[Integer(0)]))
--> 268 yield from sortables_remaining(A,c[Integer(1):],sort,vec)

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['B',5])
....: cplus=[0,2,4]
....: cminus=[1,3]
....: c=cplus+cminus
....: for v in parasortables(A,c):
....:     h=coxeter_number(A)
....:     print("\n\n",v)
....:     Ps=[(p_lambda_int(B(A,cplus+cminus),lam(A,v),[p]),p) for p in Kbip(cmi
....: nus,cplus,h)]
....:     for i in range(len(Ps)):
....:         for j in range(i,len(Ps)):
....:             P=Ps[i][0].intersection(Ps[j][0])
....:             if P.dimension()==0:
....:                 print(Ps[i][1],Ps[j][1])
....: 


 [0, 2, 4, 1, 0, 2, 1]
[0, 2, 4, 1, 3] [1, 3]


 [0, 2, 4, 1, 0, 2]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]


 [0, 2, 4, 1, 0]
[0, 2, 4, 1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]


 [0, 2, 4, 1, 2]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]


 [0, 2, 4, 1]
[0, 2, 4, 1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [0, 2, 4, 3, 2, 4, 3, 2, 4, 3]
[0, 2, 4, 1, 3] [1, 3]


 [0, 2, 4, 3, 2, 4, 3, 2, 4]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4]


 [0, 2, 4, 3, 2, 4, 3, 2]
[0, 2, 4, 1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [0, 2, 4, 3, 2, 4, 3, 4]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4]


 [0, 2, 4, 3, 2, 4, 3]
[0, 2, 4, 1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [0, 2, 4, 3, 2, 4]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]


 [0, 2, 4, 3, 2]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]


 [0, 2, 4, 3, 4, 3]
[0, 2, 4, 1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
[0, 2, 4, 1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[0, 2, 4, 1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [0, 2, 4, 3, 4]
[0, 2, 4, 1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]


 [0, 2, 4, 3]
[0, 2, 4, 1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [0, 2, 4]
[0, 2, 4, 1, 3] []
[0, 2, 4, 1, 3] [1, 3]
[0, 2, 4, 1, 3] [1, 3, 0, 2, 4]
[0, 2, 4, 1, 3] [1, 3, 0, 2, 4, 1, 3]
[0, 2, 4, 1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[0, 2, 4, 1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
[0, 2, 4, 1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[0, 2, 4, 1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
[0, 2, 4, 1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [0, 2, 1, 3, 0, 2, 1, 3, 0, 2]
[0, 2, 4, 1, 3] [1, 3]
[0, 2, 4] [1, 3]
[] [1, 3, 0, 2, 4]
[1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [0, 2, 1, 3, 0, 2, 1, 3, 0]
[] [1, 3, 0, 2, 4]


 [0, 2, 1, 3, 0, 2, 1, 3, 2]
[0, 2, 4, 1, 3] [1, 3]
[1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [0, 2, 1, 3, 0, 2, 1, 3]
[0, 2, 4, 1, 3] [1, 3, 0, 2, 4]
[0, 2, 4] [1, 3, 0, 2, 4]
[1, 3, 0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [0, 2, 1, 3, 0, 2, 1, 0]
[] [1, 3, 0, 2, 4, 1, 3]


 [0, 2, 1, 3, 0, 2, 1]
[0, 2, 4, 1, 3] [1, 3, 0, 2, 4]
[0, 2, 4] [1, 3, 0, 2, 4]
[1, 3, 0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [0, 2, 1, 3, 0, 2, 3]
[1, 3, 0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [0, 2, 1, 3, 0, 2]
[1, 3, 0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [0, 2, 1, 3, 0]
[] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
[1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
[1, 3, 0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [0, 2, 1, 3, 2, 1, 3]
[] [1, 3, 0, 2, 4, 1, 3]


 [0, 2, 1, 3, 2, 1]
[] [1, 3, 0, 2, 4, 1, 3]


 [0, 2, 1, 3, 2, 3]
[1, 3, 0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [0, 2, 1, 3, 2]
[1, 3, 0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [0, 2, 1, 3]
[] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
[1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
[1, 3, 0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [0, 2, 1, 0, 2, 1]
[0, 2, 4, 1, 3] [1, 3]


 [0, 2, 1, 0, 2]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]


 [0, 2, 1, 0]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]


 [0, 2, 1, 2]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]


 [0, 2, 1]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [0, 2, 3, 2]
[0, 2, 4, 1, 3] [1, 3]


 [0, 2, 3]
[0, 2, 4, 1, 3] [1, 3]
[0, 2, 4, 1, 3] [1, 3, 0, 2, 4]
[0, 2, 4, 1, 3] [1, 3, 0, 2, 4, 1, 3]


 [0, 2]
[0, 2, 4, 1, 3] []
[0, 2, 4, 1, 3] [1, 3]
[0, 2, 4, 1, 3] [1, 3, 0, 2, 4]
[0, 2, 4, 1, 3] [1, 3, 0, 2, 4, 1, 3]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [0, 4, 1, 3, 0, 4, 3]
[0, 2, 4, 1, 3] [1, 3]
[0, 2, 4] [1, 3]
[] [1, 3, 0, 2, 4]
[] [1, 3, 0, 2, 4, 1, 3]
[] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [0, 4, 1, 3, 0, 4]
[] [1, 3, 0, 2, 4, 1, 3]
[] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [0, 4, 1, 3, 0]
[] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
[] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [0, 4, 1, 3, 4, 3]
[0, 2, 4, 1, 3] [1, 3]
[] [1, 3, 0, 2, 4, 1, 3]
[] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [0, 4, 1, 3, 4]
[0, 2, 4] [1, 3, 0, 2, 4]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3]
[] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [0, 4, 1, 3]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
[] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [0, 4, 1, 0]
[0, 2, 4, 1, 3] [1, 3]


 [0, 4, 1]
[0, 2, 4, 1, 3] [1, 3]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]


 [0, 4, 3, 4, 3]
[0, 2, 4, 1, 3] [1, 3]


 [0, 4, 3, 4]
[0, 2, 4] [1, 3, 0, 2, 4]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4]


 [0, 4, 3]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]


 [0, 4]
[0, 2, 4, 1, 3] []
[0, 2, 4, 1, 3] [1, 3]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [0, 1, 3, 0]
[0, 2, 4] [1, 3]
[] [1, 3, 0, 2, 4]
[] [1, 3, 0, 2, 4, 1, 3]
[] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
[] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
[] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [0, 1, 3]
[] [1, 3, 0, 2, 4, 1, 3]
[] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
[] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
[] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [0, 1, 0]
[0, 2, 4] [1, 3]


 [0, 1]
[0, 2, 4] [1, 3, 0, 2, 4]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]


 [0, 3]
[0, 2, 4, 1, 3] []


 [0]
[0, 2, 4, 1, 3] []
[0, 2, 4] [1, 3, 0, 2, 4]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3]
[0, 2, 4, 1, 3] [1, 3]
[0, 2, 4] [1, 3]
[] [1, 3, 0, 2, 4]
[1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
[1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
[1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1]
[] [1, 3, 0, 2, 4]


 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 3]
[0, 2, 4, 1, 3] [1, 3]
[1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
[1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
[1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4]
[0, 2, 4, 1, 3] [1, 3, 0, 2, 4]
[0, 2, 4] [1, 3, 0, 2, 4]
[1, 3, 0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
[1, 3, 0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[1, 3, 0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
[1, 3, 0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[1, 3, 0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 1]
[] [1, 3, 0, 2, 4, 1, 3]


 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2]
[] [1, 3, 0, 2, 4, 1, 3]
[1, 3, 0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
[1, 3, 0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[1, 3, 0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 4]
[1, 3, 0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3]
[1, 3, 0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1]
[] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
[1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
[1, 3, 0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 3, 2, 4]
[] [1, 3, 0, 2, 4, 1, 3]


 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 3, 2]
[] [1, 3, 0, 2, 4, 1, 3]


 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 3, 4]
[1, 3, 0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 3]
[1, 3, 0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4]
[] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
[1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
[1, 3, 0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [2, 4, 1, 3, 2, 4, 1, 3, 2, 1]
[0, 2, 4, 1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
[1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [2, 4, 1, 3, 2, 4, 1, 3, 2]
[0, 2, 4, 1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
[1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [2, 4, 1, 3, 2, 4, 1, 3, 4, 3]
[1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]


 [2, 4, 1, 3, 2, 4, 1, 3, 4]
[1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[1, 3, 0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[1, 3, 0, 2, 4, 1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]


 [2, 4, 1, 3, 2, 4, 1, 3]
[0, 2, 4, 1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [2, 4, 1, 3, 2, 4, 1]
[1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [2, 4, 1, 3, 2, 4, 3, 2, 4, 3, 2]
[1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
[1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]


 [2, 4, 1, 3, 2, 4, 3, 2, 4, 3]
[1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
[1, 3, 0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[1, 3, 0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [2, 4, 1, 3, 2, 4, 3, 2, 4]
[] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
[1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
[1, 3, 0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[1, 3, 0, 2, 4, 1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]


 [2, 4, 1, 3, 2, 4, 3, 2]
[0, 2, 4, 1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [2, 4, 1, 3, 2, 4, 3, 4, 3]
[1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]


 [2, 4, 1, 3, 2, 4, 3, 4]
[1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[1, 3, 0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[1, 3, 0, 2, 4, 1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]


 [2, 4, 1, 3, 2, 4, 3]
[0, 2, 4, 1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [2, 4, 1, 3, 2, 4]
[1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [2, 4, 1, 3, 2, 1, 3]
[] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [2, 4, 1, 3, 2, 1]
[1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [2, 4, 1, 3, 2, 3]
[] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [2, 4, 1, 3, 2]
[1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [2, 4, 1, 3, 4, 3]
[0, 2, 4, 1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[0, 2, 4, 1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
[1, 3, 0, 2, 4, 1, 3, 0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
[1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [2, 4, 1, 3, 4]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[1, 3, 0, 2, 4, 1, 3, 0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
[1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
[1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [2, 4, 1, 3]
[] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
[1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
[1, 3, 0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
[1, 3, 0, 2, 4, 1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
[1, 3, 0, 2, 4, 1, 3, 0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
[1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
[1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [2, 4, 1, 2]
[0, 2, 4, 1, 3] [1, 3]


 [2, 4, 1]
[0, 2, 4, 1, 3] [1, 3]
[0, 2, 4, 1, 3] [1, 3, 0, 2, 4]
[0, 2, 4, 1, 3] [1, 3, 0, 2, 4, 1, 3]
[0, 2, 4, 1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[0, 2, 4, 1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
[0, 2, 4, 1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[0, 2, 4, 1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [2, 4, 3, 2, 4, 3, 2, 4, 3]
[0, 2, 4, 1, 3] [1, 3]


 [2, 4, 3, 2, 4, 3, 2, 4]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4]


 [2, 4, 3, 2, 4, 3, 2]
[0, 2, 4, 1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [2, 4, 3, 2, 4, 3, 4]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4]


 [2, 4, 3, 2, 4, 3]
[0, 2, 4, 1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [2, 4, 3, 2, 4]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]


 [2, 4, 3, 2]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]


 [2, 4, 3, 4, 3]
[0, 2, 4, 1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
[0, 2, 4, 1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[0, 2, 4, 1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [2, 4, 3, 4]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]


 [2, 4, 3]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [2, 4]
[0, 2, 4, 1, 3] []
[0, 2, 4, 1, 3] [1, 3]
[0, 2, 4, 1, 3] [1, 3, 0, 2, 4]
[0, 2, 4, 1, 3] [1, 3, 0, 2, 4, 1, 3]
[0, 2, 4, 1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[0, 2, 4, 1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
[0, 2, 4, 1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[0, 2, 4, 1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [2, 1, 3, 2, 1, 3]
[0, 2, 4, 1, 3] [1, 3]
[0, 2, 4] [1, 3]
[] [1, 3, 0, 2, 4]
[] [1, 3, 0, 2, 4, 1, 3]
[1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [2, 1, 3, 2, 1]
[0, 2, 4, 1, 3] [1, 3]
[] [1, 3, 0, 2, 4, 1, 3]
[1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [2, 1, 3, 2, 3]
[0, 2, 4, 1, 3] [1, 3]
[1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [2, 1, 3, 2]
[0, 2, 4, 1, 3] [1, 3, 0, 2, 4]
[0, 2, 4] [1, 3, 0, 2, 4]
[1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [2, 1, 3]
[0, 2, 4, 1, 3] [1, 3, 0, 2, 4]
[0, 2, 4, 1, 3] [1, 3, 0, 2, 4, 1, 3]
[] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
[1, 3] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [2, 1, 2]
[0, 2, 4, 1, 3] [1, 3]


 [2, 1]
[0, 2, 4, 1, 3] [1, 3]
[0, 2, 4, 1, 3] [1, 3, 0, 2, 4]
[0, 2, 4, 1, 3] [1, 3, 0, 2, 4, 1, 3]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]


 [2, 3, 2]
[0, 2, 4, 1, 3] [1, 3]


 [2, 3]
[0, 2, 4, 1, 3] [1, 3]
[0, 2, 4, 1, 3] [1, 3, 0, 2, 4]
[0, 2, 4, 1, 3] [1, 3, 0, 2, 4, 1, 3]


 [2]
[0, 2, 4, 1, 3] []
[0, 2, 4, 1, 3] [1, 3]
[0, 2, 4, 1, 3] [1, 3, 0, 2, 4]
[0, 2, 4, 1, 3] [1, 3, 0, 2, 4, 1, 3]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [4, 1, 3, 4, 3]
[0, 2, 4] [1, 3]
[] [1, 3, 0, 2, 4]
[] [1, 3, 0, 2, 4, 1, 3]
[] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [4, 1, 3, 4]
[] [1, 3, 0, 2, 4, 1, 3]
[] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [4, 1, 3]
[] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
[] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [4, 1]
[0, 2, 4, 1, 3] []


 [4, 3, 4, 3]
[0, 2, 4] [1, 3]


 [4, 3, 4]
[0, 2, 4] [1, 3, 0, 2, 4]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4]


 [4, 3]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]


 [4]
[0, 2, 4, 1, 3] []
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [1, 3]
[0, 2, 4, 1, 3] []
[0, 2, 4] [1, 3]
[] [1, 3, 0, 2, 4]
[] [1, 3, 0, 2, 4, 1, 3]
[] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
[] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
[] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]


 [1]
[0, 2, 4, 1, 3] []
[0, 2, 4] [1, 3]


 [3]
[0, 2, 4, 1, 3] []
[0, 2, 4] [1, 3]


 []
[0, 2, 4, 1, 3] []
[0, 2, 4] [1, 3]
[0, 2, 4] [1, 3, 0, 2, 4]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
[0, 2, 4] [1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
sage: A=CartanMatrix(['B',3])
....: cplus=[0,2]
....: cminus=[1]
....: c=cplus+cminus
....: for v in parasortables(A,c):
....:     h=coxeter_number(A)
....:     print("\n\n",v)
....:     Ps=[(p_lambda_int(B(A,cplus+cminus),lam(A,v),[p]),p) for p in Kbip(cmi
....: nus,cplus,h)]
....:     for i in range(len(Ps)):
....:         for j in range(i,len(Ps)):
....:             P=Ps[i][0].intersection(Ps[j][0])
....:             if P.dimension()==0:
....:                 print(Ps[i][1],Ps[j][1])
....: 


 [0, 2]
[0, 2, 1] []
[0, 2, 1] [1]
[0, 2, 1] [1, 0, 2]
[0, 2, 1] [1, 0, 2, 1]
[0, 2, 1] [1, 0, 2, 1, 0, 2]
[0, 2] [1, 0, 2, 1, 0, 2, 1]


 [0, 1, 0]
[0, 2, 1] [1]
[0, 2] [1]
[] [1, 0, 2]
[] [1, 0, 2, 1]
[] [1, 0, 2, 1, 0, 2]
[] [1, 0, 2, 1, 0, 2, 1]


 [0, 1]
[0, 2, 1] [1]
[0, 2] [1, 0, 2]
[0, 2] [1, 0, 2, 1]
[] [1, 0, 2, 1, 0, 2]
[] [1, 0, 2, 1, 0, 2, 1]


 [0]
[0, 2, 1] []
[0, 2, 1] [1]
[0, 2] [1, 0, 2]
[0, 2] [1, 0, 2, 1]
[0, 2] [1, 0, 2, 1, 0, 2]
[0, 2] [1, 0, 2, 1, 0, 2, 1]


 [2, 1, 2, 1]
[0, 2, 1] [1]
[0, 2] [1]
[] [1, 0, 2]
[] [1, 0, 2, 1]
[1] [1, 0, 2, 1, 0, 2]
[1] [1, 0, 2, 1, 0, 2, 1]


 [2, 1, 2]
[0, 2, 1] [1, 0, 2]
[0, 2] [1, 0, 2]
[] [1, 0, 2, 1]
[1] [1, 0, 2, 1, 0, 2]
[1] [1, 0, 2, 1, 0, 2, 1]


 [2, 1]
[0, 2, 1] [1, 0, 2]
[0, 2, 1] [1, 0, 2, 1]
[0, 2] [1, 0, 2, 1, 0, 2]
[] [1, 0, 2, 1, 0, 2, 1]
[1] [1, 0, 2, 1, 0, 2, 1]


 [2]
[0, 2, 1] []
[0, 2, 1] [1]
[0, 2, 1] [1, 0, 2]
[0, 2, 1] [1, 0, 2, 1]
[0, 2] [1, 0, 2, 1, 0, 2]
[0, 2] [1, 0, 2, 1, 0, 2, 1]


 [1]
[0, 2, 1] []
[0, 2] [1]
[] [1, 0, 2]
[] [1, 0, 2, 1]
[] [1, 0, 2, 1, 0, 2]
[] [1, 0, 2, 1, 0, 2, 1]


 []
[0, 2, 1] []
[0, 2] [1]
[0, 2] [1, 0, 2]
[0, 2] [1, 0, 2, 1]
[0, 2] [1, 0, 2, 1, 0, 2]
[0, 2] [1, 0, 2, 1, 0, 2, 1]
sage: 
sage: A=CartanMatrix(['B',3])
....: cplus=[0,2]
....: cminus=[1]
....: c=cplus+cminus
....: for v in sortables(A,c):
....:     h=coxeter_number(A)
....:     print("\n\n",v)
....:     Ps=[(p_lambda_int(B(A,cplus+cminus),lam(A,v),[p]),p) for p in Kbip(cmi
....: nus,cplus,h)]
....:     for i in range(len(Ps)):
....:         for j in range(i,len(Ps)):
....:             P=Ps[i][0].intersection(Ps[j][0])
....:             if P.dimension()==0:
....:                 print(Ps[i][1],Ps[j][1])
....: 


 [0, 2, 1, 0, 2, 1, 0, 2, 1]
[0, 2, 1] [1]
[0, 2] [1]
[] [1, 0, 2]
[1] [1, 0, 2, 1]
[1] [1, 0, 2, 1, 0, 2]
[1] [1, 0, 2, 1, 0, 2, 1]


 [0, 2, 1, 0, 2, 1, 0, 2]
[0, 2, 1] [1, 0, 2]
[0, 2] [1, 0, 2]
[] [1, 0, 2]
[1] [1, 0, 2, 1]
[1, 0, 2] [1, 0, 2, 1, 0, 2]
[1, 0, 2] [1, 0, 2, 1, 0, 2, 1]


 [0, 2, 1, 0, 2, 1, 0]
[0, 2, 1] [1, 0, 2, 1]
[0, 2] [1, 0, 2, 1]
[] [1, 0, 2, 1]
[1] [1, 0, 2, 1]
[1, 0, 2] [1, 0, 2, 1, 0, 2]
[1, 0, 2] [1, 0, 2, 1, 0, 2, 1]


 [0, 2, 1, 0, 2, 1, 2]
[0, 2, 1] [1, 0, 2]
[0, 2] [1, 0, 2]
[] [1, 0, 2, 1]
[1] [1, 0, 2, 1]
[1, 0, 2] [1, 0, 2, 1, 0, 2]
[1, 0, 2] [1, 0, 2, 1, 0, 2, 1]


 [0, 2, 1, 0, 2, 1]
[0, 2, 1] [1, 0, 2, 1]
[0, 2] [1, 0, 2, 1]
[] [1, 0, 2, 1]
[1] [1, 0, 2, 1]
[1, 0, 2] [1, 0, 2, 1, 0, 2]
[1, 0, 2, 1] [1, 0, 2, 1, 0, 2, 1]


 [0, 2, 1, 0, 2]
[0, 2, 1] [1, 0, 2, 1, 0, 2]
[0, 2] [1, 0, 2, 1, 0, 2]
[] [1, 0, 2, 1, 0, 2]
[1] [1, 0, 2, 1, 0, 2]
[1, 0, 2] [1, 0, 2, 1, 0, 2]
[1, 0, 2, 1] [1, 0, 2, 1, 0, 2, 1]


 [0, 2, 1, 0]
[0, 2, 1] [1, 0, 2, 1, 0, 2]
[0, 2] [1, 0, 2, 1, 0, 2]
[] [1, 0, 2, 1, 0, 2, 1]
[1] [1, 0, 2, 1, 0, 2, 1]
[1, 0, 2] [1, 0, 2, 1, 0, 2, 1]
[1, 0, 2, 1] [1, 0, 2, 1, 0, 2, 1]


 [0, 2, 1, 2, 1]
[0, 2, 1] [1, 0, 2, 1]
[0, 2] [1, 0, 2, 1]
[] [1, 0, 2, 1, 0, 2]
[1] [1, 0, 2, 1, 0, 2]
[1, 0, 2] [1, 0, 2, 1, 0, 2, 1]


 [0, 2, 1, 2]
[0, 2, 1] [1, 0, 2, 1, 0, 2]
[0, 2] [1, 0, 2, 1, 0, 2]
[] [1, 0, 2, 1, 0, 2]
[1] [1, 0, 2, 1, 0, 2]
[1, 0, 2] [1, 0, 2, 1, 0, 2, 1]
[1, 0, 2, 1] [1, 0, 2, 1, 0, 2, 1]


 [0, 2, 1]
[0, 2, 1] [1, 0, 2, 1, 0, 2]
[0, 2] [1, 0, 2, 1, 0, 2, 1]
[] [1, 0, 2, 1, 0, 2, 1]
[1] [1, 0, 2, 1, 0, 2, 1]
[1, 0, 2] [1, 0, 2, 1, 0, 2, 1]
[1, 0, 2, 1] [1, 0, 2, 1, 0, 2, 1]


 [0, 2]
[0, 2, 1] []
[0, 2, 1] [1]
[0, 2, 1] [1, 0, 2]
[0, 2, 1] [1, 0, 2, 1]
[0, 2, 1] [1, 0, 2, 1, 0, 2]
[0, 2] [1, 0, 2, 1, 0, 2, 1]


 [0, 1, 0]
[0, 2, 1] [1]
[0, 2] [1]
[] [1, 0, 2]
[] [1, 0, 2, 1]
[] [1, 0, 2, 1, 0, 2]
[] [1, 0, 2, 1, 0, 2, 1]


 [0, 1]
[0, 2, 1] [1]
[0, 2] [1, 0, 2]
[0, 2] [1, 0, 2, 1]
[] [1, 0, 2, 1, 0, 2]
[] [1, 0, 2, 1, 0, 2, 1]


 [0]
[0, 2, 1] []
[0, 2, 1] [1]
[0, 2] [1, 0, 2]
[0, 2] [1, 0, 2, 1]
[0, 2] [1, 0, 2, 1, 0, 2]
[0, 2] [1, 0, 2, 1, 0, 2, 1]


 [2, 1, 2, 1]
[0, 2, 1] [1]
[0, 2] [1]
[] [1, 0, 2]
[] [1, 0, 2, 1]
[1] [1, 0, 2, 1, 0, 2]
[1] [1, 0, 2, 1, 0, 2, 1]


 [2, 1, 2]
[0, 2, 1] [1, 0, 2]
[0, 2] [1, 0, 2]
[] [1, 0, 2, 1]
[1] [1, 0, 2, 1, 0, 2]
[1] [1, 0, 2, 1, 0, 2, 1]


 [2, 1]
[0, 2, 1] [1, 0, 2]
[0, 2, 1] [1, 0, 2, 1]
[0, 2] [1, 0, 2, 1, 0, 2]
[] [1, 0, 2, 1, 0, 2, 1]
[1] [1, 0, 2, 1, 0, 2, 1]


 [2]
[0, 2, 1] []
[0, 2, 1] [1]
[0, 2, 1] [1, 0, 2]
[0, 2, 1] [1, 0, 2, 1]
[0, 2] [1, 0, 2, 1, 0, 2]
[0, 2] [1, 0, 2, 1, 0, 2, 1]


 [1]
[0, 2, 1] []
[0, 2] [1]
[] [1, 0, 2]
[] [1, 0, 2, 1]
[] [1, 0, 2, 1, 0, 2]
[] [1, 0, 2, 1, 0, 2, 1]


 []
[0, 2, 1] []
[0, 2] [1]
[0, 2] [1, 0, 2]
[0, 2] [1, 0, 2, 1]
[0, 2] [1, 0, 2, 1, 0, 2]
[0, 2] [1, 0, 2, 1, 0, 2, 1]
sage: A=CartanMatrix(['B',3])
....: cplus=[0,2]
....: cminus=[1]
....: c=cplus+cminus
....: for v in sortables(A,c):
....:     h=coxeter_number(A)
....:     print("\n\n",v)
....:     for n in range(-2*h,0):
....:         pn=plusminus(cplus,cminus,n/2)
....:         P=p_lambda_int(B(A,cplus+cminus),lam(A,v),[[],pn])
....:         if P.dimension()==0:
....:             print(plusminus(cplus,cminus,n/2))
....: 


 [0, 2, 1, 0, 2, 1, 0, 2, 1]
[1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2]
[1, 0, 2]


 [0, 2, 1, 0, 2, 1, 0, 2]
[1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2]
[1, 0, 2]


 [0, 2, 1, 0, 2, 1, 0]
[1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1]
[1, 0, 2, 1]


 [0, 2, 1, 0, 2, 1, 2]
[1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1]
[1, 0, 2, 1]


 [0, 2, 1, 0, 2, 1]
[1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1]
[1, 0, 2, 1]


 [0, 2, 1, 0, 2]
[1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2]
[1, 0, 2, 1, 0, 2]


 [0, 2, 1, 0]
[1, 0, 2, 1, 0, 2, 1]


 [0, 2, 1, 2, 1]
[1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2]
[1, 0, 2, 1, 0, 2]


 [0, 2, 1, 2]
[1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2]
[1, 0, 2, 1, 0, 2]


 [0, 2, 1]
[1, 0, 2, 1, 0, 2, 1]


 [0, 2]
[1, 0, 2, 1, 0, 2, 1, 0, 2]


 [0, 1, 0]
[1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2]
[1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1]
[1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2]
[1, 0, 2, 1, 0, 2, 1]
[1, 0, 2, 1, 0, 2]
[1, 0, 2, 1]
[1, 0, 2]


 [0, 1]
[1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2]
[1, 0, 2, 1, 0, 2, 1]
[1, 0, 2, 1, 0, 2]


 [0]
[1, 0, 2, 1, 0, 2, 1, 0, 2]


 [2, 1, 2, 1]
[1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1]
[1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2]
[1, 0, 2, 1]
[1, 0, 2]


 [2, 1, 2]
[1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1]
[1, 0, 2, 1]


 [2, 1]
[1, 0, 2, 1, 0, 2, 1]


 [2]
[1, 0, 2, 1, 0, 2, 1, 0, 2]


 [1]
[1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2]
[1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1]
[1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2]
[1, 0, 2, 1, 0, 2, 1, 0, 2]
[1, 0, 2, 1, 0, 2, 1]
[1, 0, 2, 1, 0, 2]
[1, 0, 2, 1]
[1, 0, 2]


 []
[1, 0, 2, 1, 0, 2, 1, 0, 2]
sage: A=CartanMatrix(['B',4])
....: cplus=[0,2]
....: cminus=[1,3]
....: c=cplus+cminus
....: for v in sortables(A,c):
....:     h=coxeter_number(A)
....:     print("\n\n",v)
....:     for n in range(-2*h,0):
....:         pn=plusminus(cplus,cminus,n/2)
....:         P=p_lambda_int(B(A,cplus+cminus),lam(A,v),[[],pn])
....:         if P.dimension()==0:
....:             print(plusminus(cplus,cminus,n/2))
....: 


 [0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3]
[1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2]
[1, 3, 0, 2]


 [0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1]
[1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2]
[1, 3, 0, 2]


 [0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 3]
[1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2]
[1, 3, 0, 2]


 [0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2]
[1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2]
[1, 3, 0, 2]


 [0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0]
[1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3]
[1, 3, 0, 2, 1, 3]


 [0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 2, 3]


 [0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 2]


 [0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3]
[1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3]
[1, 3, 0, 2, 1, 3]


 [0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 0]


 [0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1]


 [0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 3]
[1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2]
[1, 3, 0, 2, 1, 3, 0, 2]


 [0, 2, 1, 3, 0, 2, 1, 3, 0, 2]
[1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2]

^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [243], line 10
      8 for n in range(-Integer(2)*h,Integer(0)):
      9     pn=plusminus(cplus,cminus,n/Integer(2))
---> 10     P=p_lambda_int(B(A,cplus+cminus),lam(A,v),[[],pn])
     11     if P.dimension()==Integer(0):
     12         print(plusminus(cplus,cminus,n/Integer(2)))

Cell In [148], line 127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_seq_convexhull(B, la, seqs[Integer(0)])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_seq_convexhull(B, la, s))
    128     if P.dimension()==Integer(0):
    129         break

Cell In [148], line 76, in p_lambda_seq_convexhull(B, la, seq)
     74 if Pp.dimension() == rk:
     75     new_Ps.append(Ep*Pp)
---> 76 Pm = P.intersection(Hm)
     77 if Pm.dimension() == rk:
     78     new_Ps.append(Em*Pm)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1371, in Polyhedron_base5.intersection(self, other)
   1369 parent = self.parent()
   1370 try:
-> 1371     intersection = parent.element_class(parent, None, [new_ieqs, new_eqns])
   1373     # Force calculation of the vertices.
   1374     _ = intersection.n_vertices()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:70, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
---> 70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:194, in Polyhedron_ppl.set_immutable(self)
    192         self._clear_cache()
    193         raise e
--> 194 if not hasattr(self, '_Hrepresentation'):
    195     self._init_Hrepresentation_from_ppl(True)
    196 self._is_mutable = False

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['B',4])
....: cplus=[0,2]
....: cminus=[1,3]
....: c=cplus+cminus
....: for v in sortables(A,c):
....:     h=coxeter_number(A)
....:     for n in range(-2*h,0):
....:         pn=plusminus(cplus,cminus,n/2)
....:         P=p_lambda_int(B(A,cplus+cminus),lam(A,v),[[],pn])
....:         if P.dimension()!=0:
....:             print(v)
....: 
[0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3]
[0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3]
[0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3]
[0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3]
[0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3]
[0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3]
[0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3]
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [244], line 9
      7 for n in range(-Integer(2)*h,Integer(0)):
      8     pn=plusminus(cplus,cminus,n/Integer(2))
----> 9     P=p_lambda_int(B(A,cplus+cminus),lam(A,v),[[],pn])
     10     if P.dimension()!=Integer(0):
     11         print(v)

Cell In [148], line 127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_seq_convexhull(B, la, seqs[Integer(0)])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_seq_convexhull(B, la, s))
    128     if P.dimension()==Integer(0):
    129         break

Cell In [148], line 76, in p_lambda_seq_convexhull(B, la, seq)
     74 if Pp.dimension() == rk:
     75     new_Ps.append(Ep*Pp)
---> 76 Pm = P.intersection(Hm)
     77 if Pm.dimension() == rk:
     78     new_Ps.append(Em*Pm)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1371, in Polyhedron_base5.intersection(self, other)
   1369 parent = self.parent()
   1370 try:
-> 1371     intersection = parent.element_class(parent, None, [new_ieqs, new_eqns])
   1373     # Force calculation of the vertices.
   1374     _ = intersection.n_vertices()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:70, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
---> 70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:195, in Polyhedron_ppl.set_immutable(self)
    193         raise e
    194 if not hasattr(self, '_Hrepresentation'):
--> 195     self._init_Hrepresentation_from_ppl(True)
    196 self._is_mutable = False

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:344, in Polyhedron_ppl._init_Hrepresentation_from_ppl(self, minimize)
    342 for c in cs:
    343     if c.is_inequality():
--> 344         parent._make_Inequality(self, (c.inhomogeneous_term(),) + c.coefficients())
    345     elif c.is_equality():
    346         parent._make_Equation(self, (c.inhomogeneous_term(),) + c.coefficients())

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:1069, in Polyhedra_base._make_Inequality(self, polyhedron, data)
   1067 except IndexError:
   1068     obj = Inequality(self)
-> 1069 obj._set_data(polyhedron, data)
   1070 return obj

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/representation.py:439, in Hrepresentation._set_data(self, polyhedron, data)
    436 if len(data) != self._vector.degree():
    437     raise ValueError('H-representation data requires a list of length ambient_dim+1')
--> 439 self._vector[:] = data
    440 self._A[:] = data[1:]
    441 self._b = self._base_ring(data[0])

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/modules/free_module_element.pyx:1893, in sage.modules.free_module_element.FreeModuleElement.__setitem__ (build/cythonized/sage/modules/free_module_element.c:20047)()
   1891 if isinstance(i, slice):
   1892     PySlice_GetIndicesEx(i, d, &start, &stop, &step, &slicelength)
-> 1893     values = [R(x) for x in value]
   1894     if len(values) != slicelength:
   1895         raise IndexError("slice assignment would change dimension")

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/parent.pyx:901, in sage.structure.parent.Parent.__call__ (build/cythonized/sage/structure/parent.c:12658)()
    899 if mor is not None:
    900     if no_extra_args:
--> 901         return mor._call_(x)
    902     else:
    903         return mor._call_with_args(x, args, kwds)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:158, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_ (build/cythonized/sage/structure/coerce_maps.c:6834)()
    156 cdef Parent C = self._codomain
    157 try:
--> 158     return C._element_constructor(x)
    159 except Exception:
    160     if print_warnings:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/rings/rational.pyx:536, in sage.rings.rational.Rational.__init__ (build/cythonized/sage/rings/rational.cpp:14305)()
    534     """
    535     if x is not None:
--> 536         self.__set_value(x, base)
    537 
    538 def __reduce__(self):

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/rings/rational.pyx:670, in sage.rings.rational.Rational._Rational__set_value (build/cythonized/sage/rings/rational.cpp:16246)()
    668         raise TypeError("unable to convert {!r} to a rational".format(x))
    669 
--> 670 elif isinstance(x, fractions.Fraction):
    671     mpz_set(mpq_numref(self.value), (<integer.Integer> integer.Integer(x.numerator)).value)
    672     mpz_set(mpq_denref(self.value), (<integer.Integer> integer.Integer(x.denominator)).value)

File <frozen abc>:117, in __instancecheck__(cls, instance)

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['B',4])
....: cplus=[0,2]
....: cminus=[1,3]
....: c=cplus+cminus
....: for v in sortables(A,c):
....:     h=coxeter_number(A)
....:     works=false
....:     for n in range(-2*h,0):
....:         pn=plusminus(cplus,cminus,n/2)
....:         P=p_lambda_int(B(A,cplus+cminus),lam(A,v),[[],pn])
....:         if P.dimension()==0:
....:             works=true
....:             break
....:     if works:
....:         print(v)
....: 

[0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3]
[0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1]
[0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 3]
[0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2]
[0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0]
[0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3]
[0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 3]
[0, 2, 1, 3, 0, 2, 1, 3, 0, 2]
[0, 2, 1, 3, 0, 2, 1, 3, 0]
[0, 2, 1, 3, 0, 2, 1, 3, 2, 1, 3, 2]
[0, 2, 1, 3, 0, 2, 1, 3, 2, 1, 3]
[0, 2, 1, 3, 0, 2, 1, 3, 2, 1]
[0, 2, 1, 3, 0, 2, 1, 3, 2, 3]
[0, 2, 1, 3, 0, 2, 1, 3, 2]
[0, 2, 1, 3, 0, 2, 1, 3]
[0, 2, 1, 3, 0, 2]
[0, 2, 1, 3, 0]
[0, 2, 1, 3, 2, 1, 3, 2, 1, 3]
[0, 2, 1, 3, 2, 1, 3, 2, 3]
[0, 2, 1, 3, 2, 1, 3]
[0, 2, 1, 3, 2, 1]
[0, 2, 1, 3, 2]
[0, 2, 1, 3]
[0, 2, 1, 0, 2, 1]
[0, 2, 1, 0, 2]
[0, 2, 1, 0]
[0, 2, 1, 2]
[0, 2, 1]
[0, 2]
[0, 1, 3, 0]
[0, 1, 3]
[0, 1, 0]
[0, 1]
^[[A^[[B[0, 3]
^R

^[[A^[[[0]
[2, 1, 3, 2, 1, 3, 2, 1, 3]
[2, 1, 3, 2, 1, 3, 2, 1]
[2, 1, 3, 2, 1, 3]
[2, 1, 3, 2, 3, 2]
[2, 1, 3, 2, 3]
[2, 1, 3]
[2, 1, 2]
[2, 1]
[2]
[1, 3]
[1]
[3]
[]
sage: 
sage: 
sage: A=CartanMatrix(['B',4])
....: cplus=[0,2]
....: cminus=[1,3]
....: c=cplus+cminus
....: for v in sortables(A,c):
....:     h=coxeter_number(A)
....:     works=false
....:     for n in range(-2*h,0):
....:         pn=plusminus(cplus,cminus,n/2)
....:         P=p_lambda_int(B(A,cplus+cminus),lam(A,v),[[],pn])
....:         if P.dimension()==0:
....:             works=true
....:             break
....:     if not works:
....:         print(v)
....: 
[0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 2, 3]
[0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 2]
[0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 0]
[0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1]
[0, 2, 1, 3, 0, 2, 1, 0]
[0, 2, 1, 3, 0, 2, 1]
[0, 2, 1, 3, 0, 2, 3, 2]
[0, 2, 1, 3, 0, 2, 3]
[0, 2, 1, 3, 2, 1, 3, 2, 1]
[0, 2, 1, 3, 2, 1, 3, 2]
[0, 2, 1, 3, 2, 3, 2]
[0, 2, 1, 3, 2, 3]
[0, 2, 3, 2, 3]
[0, 2, 3, 2]
[0, 2, 3]
[2, 1, 3, 2, 1, 3, 2, 3]
[2, 1, 3, 2, 1, 3, 2]
[2, 1, 3, 2, 1]
[2, 1, 3, 2]
[2, 3, 2, 3]
[2, 3, 2]
[2, 3]
sage: A=CartanMatrix(['B',3])
....: cplus=[0,2]
....: cminus=[1]
....: c=cplus+cminus
....: for v in sortables(A,c):
....:     h=coxeter_number(A)
....:     works=false
....:     for n in range(-2*h,0):
....:         pn=plusminus(cplus,cminus,n/2)
....:         P=p_lambda_int(B(A,cplus+cminus),lam(A,v),[[],pn])
....:         if P.dimension()==0:
....:             works=true
....:             break
....:     if not works:
....:         print(v)
....: 
sage: A=CartanMatrix(['B',4])
....: cplus=[0,2]
....: cminus=[1,3]
....: c=cplus+cminus
....: h=coxeter_number(A)
....: for v in sortables(A,c):
....:     print(v)
....:     for n in range(-2*h,0):
....:         pn=plusminus(cplus,cminus,n/2)
....:         P=p_lambda_int(B(A,cplus+cminus),lam(A,v),[[],pn])
....:         if P.dimension()==0:
....:             print(pn)
....: 
[0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3]
[1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2]
[1, 3, 0, 2]
[0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1]
[1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2]
[1, 3, 0, 2]
[0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 3]
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [248], line 10
      8 for n in range(-Integer(2)*h,Integer(0)):
      9     pn=plusminus(cplus,cminus,n/Integer(2))
---> 10     P=p_lambda_int(B(A,cplus+cminus),lam(A,v),[[],pn])
     11     if P.dimension()==Integer(0):
     12         print(pn)

Cell In [148], line 127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_seq_convexhull(B, la, seqs[Integer(0)])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_seq_convexhull(B, la, s))
    128     if P.dimension()==Integer(0):
    129         break

Cell In [148], line 76, in p_lambda_seq_convexhull(B, la, seq)
     74 if Pp.dimension() == rk:
     75     new_Ps.append(Ep*Pp)
---> 76 Pm = P.intersection(Hm)
     77 if Pm.dimension() == rk:
     78     new_Ps.append(Em*Pm)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1371, in Polyhedron_base5.intersection(self, other)
   1369 parent = self.parent()
   1370 try:
-> 1371     intersection = parent.element_class(parent, None, [new_ieqs, new_eqns])
   1373     # Force calculation of the vertices.
   1374     _ = intersection.n_vertices()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:179, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    177 elif Hrep is not None:
    178     ieqs, eqns = Hrep
--> 179     self._init_from_Hrepresentation(ieqs, eqns, **kwds)
    180 else:
    181     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:129, in Polyhedron_ppl._init_from_Hrepresentation(self, ieqs, eqns, minimize, verbose)
    106 def _init_from_Hrepresentation(self, ieqs, eqns, minimize=True, verbose=False):
    107     """
    108     Construct polyhedron from H-representation data.
    109 
   (...)
    127         sage: Polyhedron_ppl._init_from_Hrepresentation(p, [], [])
    128     """
--> 129     cs = self._convert_constraints_to_ppl(ieqs, eqns)
    130     if cs.empty():
    131         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'universe')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:534, in Polyhedron_ppl._convert_constraints_to_ppl(ieqs, eqns)
    532     ieqs = []
    533 for ieq in ieqs:
--> 534     cs.insert(Polyhedron_ppl._convert_constraint_to_ppl(ieq, INEQUALITY))
    535 if eqns is None:
    536     eqns = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:509, in Polyhedron_ppl._convert_constraint_to_ppl(c, typ)
    507 A = dc[1:]
    508 if typ == INEQUALITY:
--> 509     return Linear_Expression(A, b) >= 0
    510 else:
    511     return Linear_Expression(A, b) == 0

File ppl/linear_algebra.pyx:654, in ppl.linear_algebra.Linear_Expression.__init__()

File ppl/linear_algebra.pyx:49, in ppl.linear_algebra.PPL_Coefficient_from_pyobject()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/rings/integer.pyx:914, in sage.rings.integer.Integer.__richcmp__ (build/cythonized/sage/rings/integer.c:16498)()
    912     c = mpz_cmp_d((<Integer>left).value, d)
    913 else:
--> 914     return coercion_model.richcmp(left, right, op)
    915 
    916 return rich_to_bool_sgn(op, c)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:2021, in sage.structure.coerce.CoercionModel.richcmp (build/cythonized/sage/structure/coerce.c:26173)()
   2019 # Coerce to a common parent
   2020 try:
-> 2021     x, y = self.canonical_coercion(x, y)
   2022 except (TypeError, NotImplementedError):
   2023     pass

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1422, in sage.structure.coerce.CoercionModel.canonical_coercion (build/cythonized/sage/structure/coerce.c:18956)()
   1420             self._record_exception()
   1421 
-> 1422     raise TypeError("no common canonical parent for objects with parents: '%s' and '%s'"%(xp, yp))
   1423 
   1424 cpdef coercion_maps(self, R, S) noexcept:

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['B',4])
....: cplus=[0,2]
....: cminus=[1,3]
....: c=cplus+cminus
....: h=coxeter_number(A)
....: for v in sortables(A,c):
....:     print("\n")
....:     print(v)
....:     for n in range(-2*h,2*h):
....:         pn=plusminus(cplus,cminus,n/2)
....:         P=p_lambda_int(B(A,cplus+cminus),lam(A,v),[[],pn])
....:         if P.dimension()==0:
....:             print(pn)
....: 


[0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3]
[1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2]
[1, 3, 0, 2]
[0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3]


[0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1]
[1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2]
[1, 3, 0, 2]
[0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3]


[0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 3]
[1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2]
[1, 3, 0, 2]
[0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3]


[0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2]
[1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2]
[1, 3, 0, 2]
[0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3]


[0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0]
[1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3]
[1, 3, 0, 2, 1, 3]
[0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2]


[0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 2, 3]


[0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 2]


[0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3]
[1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3]
[1, 3, 0, 2, 1, 3]
[0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2]


[0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 0]


[0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1]


[0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 3]
[1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2]
[1, 3, 0, 2, 1, 3, 0, 2]
[0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3]


[0, 2, 1, 3, 0, 2, 1, 3, 0, 2]
[1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2]
[1, 3, 0, 2, 1, 3, 0, 2]
[0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3]


[0, 2, 1, 3, 0, 2, 1, 3, 0]
[1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3]
[1, 3, 0, 2, 1, 3, 0, 2, 1, 3]
[0, 2, 1, 3, 0, 2, 1, 3, 0, 2]
[0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2]


[0, 2, 1, 3, 0, 2, 1, 3, 2, 1, 3, 2]
[1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3]
[1, 3, 0, 2, 1, 3]
[0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2]


[0, 2, 1, 3, 0, 2, 1, 3, 2, 1, 3]
[1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3]
[1, 3, 0, 2, 1, 3]
[0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2]


[0, 2, 1, 3, 0, 2, 1, 3, 2, 1]
[1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2]
[1, 3, 0, 2, 1, 3, 0, 2]
[0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3]


[0, 2, 1, 3, 0, 2, 1, 3, 2, 3]
[1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2]
[1, 3, 0, 2, 1, 3, 0, 2]
[0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3]


[0, 2, 1, 3, 0, 2, 1, 3, 2]
[1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2]
[1, 3, 0, 2, 1, 3, 0, 2]
[0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3]
^C

[0, 2, 1, 3, 0, 2, 1, 3]
[1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3]
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [249], line 11
      9 for n in range(-Integer(2)*h,Integer(2)*h):
     10     pn=plusminus(cplus,cminus,n/Integer(2))
---> 11     P=p_lambda_int(B(A,cplus+cminus),lam(A,v),[[],pn])
     12     if P.dimension()==Integer(0):
     13         print(pn)

Cell In [148], line 127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_seq_convexhull(B, la, seqs[Integer(0)])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_seq_convexhull(B, la, s))
    128     if P.dimension()==Integer(0):
    129         break

Cell In [148], line 78, in p_lambda_seq_convexhull(B, la, seq)
     76     Pm = P.intersection(Hm)
     77     if Pm.dimension() == rk:
---> 78         new_Ps.append(Em*Pm)
     79 Ps = new_Ps
     80 B.mutate(k)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4099, in sage.structure.element.Matrix.__mul__ (build/cythonized/sage/structure/element.c:35219)()
   4097 
   4098         if BOTH_ARE_ELEMENT(cl):
-> 4099             return coercion_model.bin_op(left, right, mul)
   4100 
   4101         cdef long value

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1222, in sage.structure.coerce.CoercionModel.bin_op (build/cythonized/sage/structure/coerce.c:15809)()
   1220 if action is not None:
   1221     if (<Action>action)._is_left:
-> 1222         return (<Action>action)._act_(x, y)
   1223     else:
   1224         return (<Action>action)._act_(y, x)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_actions.pyx:157, in sage.structure.coerce_actions.ActedUponAction._act_ (build/cythonized/sage/structure/coerce_actions.c:8579)()
    155     <... 'sage.structure.coerce_actions.ActedUponAction'>
    156 """
--> 157 return (<Element>x)._acted_upon_(g, not self._is_left)
    158 
    159 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:949, in sage.structure.element.Element._acted_upon_ (build/cythonized/sage/structure/element.c:16495)()
    947     return None
    948 
--> 949 cpdef _acted_upon_(self, x, bint self_on_left) noexcept:
    950     """
    951     Use this method to implement ``self`` acted on by x.

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1450, in Polyhedron_base5._acted_upon_(self, actor, self_on_left)
   1448         raise ValueError("matrices should act on the left")
   1449     else:
-> 1450         return self.linear_transformation(actor)
   1451 else:
   1452     return self.dilation(actor)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1856, in Polyhedron_base5.linear_transformation(self, linear_transf, new_base_ring)
   1852             new_inequalities = ( h for h in matrix(R, self.inequalities())*N )
   1854             # The equations are the left kernel matrix of the homogeneous vertices
   1855             # or equivalently a basis thereof.
-> 1856             new_equations = (new_homogeneous_basis.transpose()).right_kernel_matrix()
   1858 else:
   1859     new_vertices = [[] for v in self.vertex_generator() ]

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/matrix2.pyx:4590, in sage.matrix.matrix2.Matrix.right_kernel_matrix (build/cythonized/sage/matrix/matrix2.c:42190)()
   4588 if M is None:
   4589     try:
-> 4590         format, M = self._right_kernel_matrix(algorithm=algorithm, proof=proof)
   4591     except AttributeError:
   4592         pass

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/matrix_rational_dense.pyx:1413, in sage.matrix.matrix_rational_dense.Matrix_rational_dense._right_kernel_matrix (build/cythonized/sage/matrix/matrix_rational_dense.cpp:23333)()
   1411 else:
   1412     A, _ = self._clear_denom()
-> 1413     K = A._rational_kernel_iml().transpose().change_ring(QQ)
   1414 verbose("done computing right kernel matrix over the rationals for %sx%s matrix" % (self.nrows(), self.ncols()),level=1, t=tm)
   1415 return 'computed-iml-rational', K

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/matrix_integer_dense.pyx:3888, in sage.matrix.matrix_integer_dense.Matrix_integer_dense._rational_kernel_iml (build/cythonized/sage/matrix/matrix_integer_dense.cpp:45952)()
   3886 time = verbose('computing null space of %s x %s matrix using IML'%(self._nrows, self._ncols))
   3887 cdef mpz_t * m = fmpz_mat_to_mpz_array(self._matrix)
-> 3888 sig_on()
   3889 dim = nullspaceMP(self._nrows, self._ncols, m, &mp_N)
   3890 sig_off()

KeyboardInterrupt: 
sage: A=CartanMatrix(['B',3])
....: cplus=[0,2]
....: cminus=[1]
....: c=cplus+cminus
....: for v in sortables(A,c):
....:     h=coxeter_number(A)
....:     works=false
....:     for n in range(-2*h,0):
....:         pn=plusminus(cplus,cminus,n/2)
....:         P=p_lambda_int(B(A,cplus+cminus),lam(A,v),[[],pn])
....:         if P.dimension()==0:
....:             works=true
....:             break
....:     if not works:
....:         AA=ClusterAlgebra(B(A,c))
....:         AA.initial_seed().mutate(v,in_place=False).b_matrix()
....: 
sage: A=CartanMatrix(['B',4])
....: cplus=[0,2]
....: cminus=[1,3]
....: c=cplus+cminus
....: for v in sortables(A,c):
....:     h=coxeter_number(A)
....:     works=false
....:     for n in range(-2*h,0):
....:         pn=plusminus(cplus,cminus,n/2)
....:         P=p_lambda_int(B(A,cplus+cminus),lam(A,v),[[],pn])
....:         if P.dimension()==0:
....:             works=true
....:             break
....:     if not works:
....:         AA=ClusterAlgebra(B(A,c))
....:         AA.initial_seed().mutate(v,in_place=False).b_matrix()
....: 
^C---------------------------------------------------------------------------
NotImplementedError                       Traceback (most recent call last)
File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/matrix0.pyx:1672, in sage.matrix.matrix0.Matrix.change_ring (build/cythonized/sage/matrix/matrix0.c:16122)()
   1671 try:
-> 1672     return self._change_ring(ring)
   1673 except (AttributeError, NotImplementedError):

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/matrix_integer_dense.pyx:5590, in sage.matrix.matrix_integer_dense.Matrix_integer_dense._change_ring (build/cythonized/sage/matrix/matrix_integer_dense.cpp:61488)()
   5589 else:
-> 5590     raise NotImplementedError
   5591 

NotImplementedError: 

During handling of the above exception, another exception occurred:

KeyboardInterrupt                         Traceback (most recent call last)
Cell In [251], line 10
      8 for n in range(-Integer(2)*h,Integer(0)):
      9     pn=plusminus(cplus,cminus,n/Integer(2))
---> 10     P=p_lambda_int(B(A,cplus+cminus),lam(A,v),[[],pn])
     11     if P.dimension()==Integer(0):
     12         works=true

Cell In [148], line 127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_seq_convexhull(B, la, seqs[Integer(0)])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_seq_convexhull(B, la, s))
    128     if P.dimension()==Integer(0):
    129         break

Cell In [148], line 78, in p_lambda_seq_convexhull(B, la, seq)
     76     Pm = P.intersection(Hm)
     77     if Pm.dimension() == rk:
---> 78         new_Ps.append(Em*Pm)
     79 Ps = new_Ps
     80 B.mutate(k)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4099, in sage.structure.element.Matrix.__mul__ (build/cythonized/sage/structure/element.c:35219)()
   4097 
   4098         if BOTH_ARE_ELEMENT(cl):
-> 4099             return coercion_model.bin_op(left, right, mul)
   4100 
   4101         cdef long value

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1222, in sage.structure.coerce.CoercionModel.bin_op (build/cythonized/sage/structure/coerce.c:15809)()
   1220 if action is not None:
   1221     if (<Action>action)._is_left:
-> 1222         return (<Action>action)._act_(x, y)
   1223     else:
   1224         return (<Action>action)._act_(y, x)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_actions.pyx:157, in sage.structure.coerce_actions.ActedUponAction._act_ (build/cythonized/sage/structure/coerce_actions.c:8579)()
    155     <... 'sage.structure.coerce_actions.ActedUponAction'>
    156 """
--> 157 return (<Element>x)._acted_upon_(g, not self._is_left)
    158 
    159 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:949, in sage.structure.element.Element._acted_upon_ (build/cythonized/sage/structure/element.c:16495)()
    947     return None
    948 
--> 949 cpdef _acted_upon_(self, x, bint self_on_left) noexcept:
    950     """
    951     Use this method to implement ``self`` acted on by x.

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1450, in Polyhedron_base5._acted_upon_(self, actor, self_on_left)
   1448         raise ValueError("matrices should act on the left")
   1449     else:
-> 1450         return self.linear_transformation(actor)
   1451 else:
   1452     return self.dilation(actor)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1835, in Polyhedron_base5.linear_transformation(self, linear_transf, new_base_ring)
   1831 homogeneous_basis = matrix(R, ( [1] + list(v) for v in self.an_affine_basis() )).transpose()
   1833 # To convert first to a list and then to a matrix seems to be necessary to obtain a meaningful error,
   1834 # in case the number of columns doesn't match the dimension.
-> 1835 new_homogeneous_basis = matrix(list( [1] + list(linear_transf*vector(R, v)) for v in self.an_affine_basis()) ).transpose()
   1837 if self.dim() + 1 == new_homogeneous_basis.rank():
   1838     # The transformation is injective on the polytope.
   1839     is_injective = True

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1835, in <genexpr>(.0)
   1831 homogeneous_basis = matrix(R, ( [1] + list(v) for v in self.an_affine_basis() )).transpose()
   1833 # To convert first to a list and then to a matrix seems to be necessary to obtain a meaningful error,
   1834 # in case the number of columns doesn't match the dimension.
-> 1835 new_homogeneous_basis = matrix(list( [1] + list(linear_transf*vector(R, v)) for v in self.an_affine_basis()) ).transpose()
   1837 if self.dim() + 1 == new_homogeneous_basis.rank():
   1838     # The transformation is injective on the polytope.
   1839     is_injective = True

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4099, in sage.structure.element.Matrix.__mul__ (build/cythonized/sage/structure/element.c:35219)()
   4097 
   4098         if BOTH_ARE_ELEMENT(cl):
-> 4099             return coercion_model.bin_op(left, right, mul)
   4100 
   4101         cdef long value

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1222, in sage.structure.coerce.CoercionModel.bin_op (build/cythonized/sage/structure/coerce.c:15809)()
   1220 if action is not None:
   1221     if (<Action>action)._is_left:
-> 1222         return (<Action>action)._act_(x, y)
   1223     else:
   1224         return (<Action>action)._act_(y, x)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/action.pyx:320, in sage.matrix.action.MatrixVectorAction._act_ (build/cythonized/sage/matrix/action.c:8739)()
    318 cdef Vector v = <Vector>s
    319 if A._parent._base is not self._codomain._base:
--> 320     A = A.change_ring(self._codomain._base)
    321 if v._parent._base is not self._codomain._base:
    322     v = v.change_ring(self._codomain._base)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/matrix0.pyx:1675, in sage.matrix.matrix0.Matrix.change_ring (build/cythonized/sage/matrix/matrix0.c:16267)()
   1673 except (AttributeError, NotImplementedError):
   1674     M = sage.matrix.matrix_space.MatrixSpace(ring, self._nrows, self._ncols, sparse=self.is_sparse())
-> 1675     mat = M(self.list(), coerce=True, copy=False)
   1676     if self._subdivisions is not None:
   1677         mat.subdivide(self.subdivisions())

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/parent.pyx:903, in sage.structure.parent.Parent.__call__ (build/cythonized/sage/structure/parent.c:12685)()
    901         return mor._call_(x)
    902     else:
--> 903         return mor._call_with_args(x, args, kwds)
    904 
    905 raise TypeError(_LazyString("No conversion defined from %s to %s", (R, self), {}))

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:172, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_with_args (build/cythonized/sage/structure/coerce_maps.c:7332)()
    170         return C._element_constructor(x)
    171     else:
--> 172         return C._element_constructor(x, **kwds)
    173 else:
    174     if len(kwds) == 0:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/matrix_space.py:963, in MatrixSpace._element_constructor_(self, entries, **kwds)
    845 def _element_constructor_(self, entries, **kwds):
    846     """
    847     Construct an element of ``self`` from ``entries``.
    848 
   (...)
    961         False
    962     """
--> 963     return self.element_class(self, entries, **kwds)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/matrix_rational_dense.pyx:189, in sage.matrix.matrix_rational_dense.Matrix_rational_dense.__init__ (build/cythonized/sage/matrix/matrix_rational_dense.cpp:12632)()
    187 ma = MatrixArgs_init(parent, entries)
    188 cdef Rational z
--> 189 for t in ma.iter(coerce, True):
    190     se = <SparseEntry>t
    191     z = <Rational>se.entry

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/args.pyx:553, in iter (build/cythonized/sage/matrix/args.c:11755)()
    551 for i in range(self.nrows):
    552     for j in range(self.ncols):
--> 553         sig_check()
    554         x = next(it)
    555         if convert and self.need_to_convert(x):

KeyboardInterrupt: 
sage: A=CartanMatrix(['B',4])
....: cplus=[0,2]
....: cminus=[1,3]
....: c=cplus+cminus
....: for v in sortables(A,c):
....:     h=coxeter_number(A)
....:     works=false
....:     for n in range(-2*h,0):
....:         pn=plusminus(cplus,cminus,n/2)
....:         P=p_lambda_int(B(A,cplus+cminus),lam(A,v),[[],pn])
....:         if P.dimension()==0:
....:             works=true
....:             break
....:     if not works:
....:         AA=ClusterAlgebra(B(A,c))
....:         print(v)
....:         print(AA.initial_seed().mutate(v,in_place=False).b_matrix())
....: 
[0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 2, 3]
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
Cell In [252], line 17
     15 AA=ClusterAlgebra(B(A,c))
     16 print(v)
---> 17 print(AA.initial_seed().mutate(v,in_place=False).b_matrix())

AttributeError: 'NoneType' object has no attribute 'b_matrix'
sage: A=CartanMatrix(['B',4])
....: cplus=[0,2]
....: cminus=[1,3]
....: c=cplus+cminus
....: for v in sortables(A,c):
....:     h=coxeter_number(A)
....:     works=false
....:     for n in range(-2*h,0):
....:         pn=plusminus(cplus,cminus,n/2)
....:         P=p_lambda_int(B(A,cplus+cminus),lam(A,v),[[],pn])
....:         if P.dimension()==0:
....:             works=true
....:             break
....:     if not works:
....:         AA=ClusterAlgebra(B(A,c))
....:         print(v)
....:         print(AA.initial_seed().mutate(v).b_matrix())
....: 
[0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 2, 3]
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
Cell In [253], line 17
     15 AA=ClusterAlgebra(B(A,c))
     16 print(v)
---> 17 print(AA.initial_seed().mutate(v).b_matrix())

AttributeError: 'NoneType' object has no attribute 'b_matrix'
sage: A=CartanMatrix(['B',4])
....: cplus=[0,2]
....: cminus=[1,3]
....: c=cplus+cminus
....: for v in sortables(A,c):
....:     h=coxeter_number(A)
....:     works=false
....:     for n in range(-2*h,0):
....:         pn=plusminus(cplus,cminus,n/2)
....:         P=p_lambda_int(B(A,cplus+cminus),lam(A,v),[[],pn])
....:         if P.dimension()==0:
....:             works=true
....:             break
....:     if not works:
....:         AA=ClusterAlgebra(B(A,c))
....:         print(v)
....:         print(AA.initial_seed().mutate(v,in_place=False))
....: 
[0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 2, 3]
None
[0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 2]
None
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [254], line 10
      8 for n in range(-Integer(2)*h,Integer(0)):
      9     pn=plusminus(cplus,cminus,n/Integer(2))
---> 10     P=p_lambda_int(B(A,cplus+cminus),lam(A,v),[[],pn])
     11     if P.dimension()==Integer(0):
     12         works=true

Cell In [148], line 127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_seq_convexhull(B, la, seqs[Integer(0)])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_seq_convexhull(B, la, s))
    128     if P.dimension()==Integer(0):
    129         break

Cell In [148], line 76, in p_lambda_seq_convexhull(B, la, seq)
     74 if Pp.dimension() == rk:
     75     new_Ps.append(Ep*Pp)
---> 76 Pm = P.intersection(Hm)
     77 if Pm.dimension() == rk:
     78     new_Ps.append(Em*Pm)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1374, in Polyhedron_base5.intersection(self, other)
   1371     intersection = parent.element_class(parent, None, [new_ieqs, new_eqns])
   1373     # Force calculation of the vertices.
-> 1374     _ = intersection.n_vertices()
   1375     return intersection
   1376 except TypeError as msg:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/misc/cachefunc.pyx:2329, in sage.misc.cachefunc.CachedMethodCallerNoArgs.__call__ (build/cythonized/sage/misc/cachefunc.c:16226)()
   2327 if self.cache is None:
   2328     f = self.f
-> 2329     self.cache = f(self._instance)
   2330 return self.cache
   2331 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:511, in Polyhedron_base0.n_vertices(self)
    507     return len(self.inequalities())
    509 n_facets = n_inequalities
--> 511 @cached_method
    512 def n_vertices(self):
    513     """
    514     Return the number of vertices. The representation will
    515     always be minimal.
   (...)
    542         2
    543     """
    544     return len(self.vertices())

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['B',4])
....: cplus=[0,2]
....: cminus=[1,3]
....: c=cplus+cminus
....: for v in sortables(A,c):
....:     h=coxeter_number(A)
....:     works=false
....:     for n in range(-2*h,0):
....:         pn=plusminus(cplus,cminus,n/2)
....:         P=p_lambda_int(B(A,cplus+cminus),lam(A,v),[[],pn])
....:         if P.dimension()==0:
....:             works=true
....:             break
....:     if not works:
....:         AA=ClusterAlgebra(B(A,c))
....:         print(v)
....:         print(AA.initial_seed().mutate(v,inplace=False))
....: 
[0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 2, 3]
The seed of a Cluster Algebra with cluster variables x0, x1, x2, x3 and no coefficients over Integer Ring obtained from the initial by mutating along the sequence [0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 2, 3]
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [255], line 10
      8 for n in range(-Integer(2)*h,Integer(0)):
      9     pn=plusminus(cplus,cminus,n/Integer(2))
---> 10     P=p_lambda_int(B(A,cplus+cminus),lam(A,v),[[],pn])
     11     if P.dimension()==Integer(0):
     12         works=true

Cell In [148], line 127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_seq_convexhull(B, la, seqs[Integer(0)])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_seq_convexhull(B, la, s))
    128     if P.dimension()==Integer(0):
    129         break

Cell In [148], line 78, in p_lambda_seq_convexhull(B, la, seq)
     76     Pm = P.intersection(Hm)
     77     if Pm.dimension() == rk:
---> 78         new_Ps.append(Em*Pm)
     79 Ps = new_Ps
     80 B.mutate(k)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4099, in sage.structure.element.Matrix.__mul__ (build/cythonized/sage/structure/element.c:35219)()
   4097 
   4098         if BOTH_ARE_ELEMENT(cl):
-> 4099             return coercion_model.bin_op(left, right, mul)
   4100 
   4101         cdef long value

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1222, in sage.structure.coerce.CoercionModel.bin_op (build/cythonized/sage/structure/coerce.c:15809)()
   1220 if action is not None:
   1221     if (<Action>action)._is_left:
-> 1222         return (<Action>action)._act_(x, y)
   1223     else:
   1224         return (<Action>action)._act_(y, x)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_actions.pyx:157, in sage.structure.coerce_actions.ActedUponAction._act_ (build/cythonized/sage/structure/coerce_actions.c:8579)()
    155     <... 'sage.structure.coerce_actions.ActedUponAction'>
    156 """
--> 157 return (<Element>x)._acted_upon_(g, not self._is_left)
    158 
    159 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:949, in sage.structure.element.Element._acted_upon_ (build/cythonized/sage/structure/element.c:16495)()
    947     return None
    948 
--> 949 cpdef _acted_upon_(self, x, bint self_on_left) noexcept:
    950     """
    951     Use this method to implement ``self`` acted on by x.

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1450, in Polyhedron_base5._acted_upon_(self, actor, self_on_left)
   1448         raise ValueError("matrices should act on the left")
   1449     else:
-> 1450         return self.linear_transformation(actor)
   1451 else:
   1452     return self.dilation(actor)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1821, in Polyhedron_base5.linear_transformation(self, linear_transf, new_base_ring)
   1819 else:
   1820     new_vertices = ()
-> 1821 if self.n_rays():
   1822     new_rays = ( r for r in matrix(R, self.rays())*linear_transf.transpose() )
   1823 else:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/misc/cachefunc.pyx:2329, in sage.misc.cachefunc.CachedMethodCallerNoArgs.__call__ (build/cythonized/sage/misc/cachefunc.c:16226)()
   2327 if self.cache is None:
   2328     f = self.f
-> 2329     self.cache = f(self._instance)
   2330 return self.cache
   2331 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:558, in Polyhedron_base0.n_rays(self)
    546 @cached_method
    547 def n_rays(self):
    548     """
    549     Return the number of rays. The representation will
    550     always be minimal.
   (...)
    556         1
    557     """
--> 558     return len(self.rays())

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/misc/cachefunc.pyx:2329, in sage.misc.cachefunc.CachedMethodCallerNoArgs.__call__ (build/cythonized/sage/misc/cachefunc.c:16226)()
   2327 if self.cache is None:
   2328     f = self.f
-> 2329     self.cache = f(self._instance)
   2330 return self.cache
   2331 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:1176, in Polyhedron_base0.rays(self)
   1173         if V.is_ray():
   1174             yield V
-> 1176 @cached_method
   1177 def rays(self):
   1178     """
   1179     Return a list of rays of the polyhedron.
   1180 
   (...)
   1191          A ray in the direction (0, 0, 1))
   1192     """
   1193     return tuple(self.ray_generator())

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['B',4])
....: cplus=[0,2]
....: cminus=[1,3]
....: c=cplus+cminus
....: for v in sortables(A,c):
....:     h=coxeter_number(A)
....:     works=false
....:     for n in range(-2*h,0):
....:         pn=plusminus(cplus,cminus,n/2)
....:         P=p_lambda_int(B(A,cplus+cminus),lam(A,v),[[],pn])
....:         if P.dimension()==0:
....:             works=true
....:             break
....:     if not works:
....:         AA=ClusterAlgebra(B(A,c))
....:         print(v)
....:         print(AA.initial_seed().mutate(v,inplace=False).b_matrix())
....: 
[0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 2, 3]
[ 0  1  0  0]
[-1  0  1  0]
[ 0 -1  0  1]
[ 0  0 -2  0]
[0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 2]
[ 0  1  0  0]
[-1  0  1  0]
[ 0 -1  0 -1]
[ 0  0  2  0]
[0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 0]
[ 0 -1  0  0]
[ 1  0 -1  0]
[ 0  1  0 -1]
[ 0  0  2  0]
[0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1]
[ 0  1  0  0]
[-1  0 -1  0]
[ 0  1  0 -1]
[ 0  0  2  0]
[0, 2, 1, 3, 0, 2, 1, 0]
[ 0 -1  0  0]
[ 1  0 -1  0]
[ 0  1  0 -1]
[ 0  0  2  0]
[0, 2, 1, 3, 0, 2, 1]
[ 0  1  0  0]
[-1  0 -1  0]
[ 0  1  0 -1]
[ 0  0  2  0]
[0, 2, 1, 3, 0, 2, 3, 2]
[ 0 -1  0  0]
[ 1  0 -1  1]
[ 0  1  0 -1]
[ 0 -2  2  0]
[0, 2, 1, 3, 0, 2, 3]
[ 0 -1  0  0]
[ 1  0  1  0]
[ 0 -1  0  1]
[ 0  0 -2  0]
[0, 2, 1, 3, 2, 1, 3, 2, 1]
[ 0  0 -1  1]
[ 0  0 -1  0]
[ 1  1  0 -1]
[-2  0  2  0]
[0, 2, 1, 3, 2, 1, 3, 2]
[ 0  0 -1  1]
[ 0  0  1  0]
[ 1 -1  0 -1]
[-2  0  2  0]
[0, 2, 1, 3, 2, 3, 2]
[ 0  1  0  0]
[-1  0 -1  1]
[ 0  1  0 -1]
[ 0 -2  2  0]
[0, 2, 1, 3, 2, 3]
[ 0  1  0  0]
[-1  0  1  0]
[ 0 -1  0  1]
[ 0  0 -2  0]
[0, 2, 3, 2, 3]
[ 0 -1  0  0]
[ 1  0  1 -1]
[ 0 -1  0  1]
[ 0  2 -2  0]
[0, 2, 3, 2]
[ 0 -1  0  0]
[ 1  0 -1  1]
[ 0  1  0 -1]
[ 0 -2  2  0]
[0, 2, 3]
[ 0 -1  0  0]
[ 1  0  1  0]
[ 0 -1  0  1]
[ 0  0 -2  0]
[2, 1, 3, 2, 1, 3, 2, 3]
[ 0  1 -1  0]
[-1  0  1  0]
[ 1 -1  0  1]
[ 0  0 -2  0]
[2, 1, 3, 2, 1, 3, 2]
[ 0  1 -1  0]
[-1  0  1  0]
[ 1 -1  0 -1]
[ 0  0  2  0]
[2, 1, 3, 2, 1]
[ 0  0 -1  1]
[ 0  0 -1  0]
[ 1  1  0 -1]
[-2  0  2  0]
[2, 1, 3, 2]
[ 0  0 -1  1]
[ 0  0  1  0]
[ 1 -1  0 -1]
[-2  0  2  0]
[2, 3, 2, 3]
[ 0  1  0  0]
[-1  0  1 -1]
[ 0 -1  0  1]
[ 0  2 -2  0]
[2, 3, 2]
[ 0  1  0  0]
[-1  0 -1  1]
[ 0  1  0 -1]
[ 0 -2  2  0]
[2, 3]
[ 0  1  0  0]
[-1  0  1  0]
[ 0 -1  0  1]
[ 0  0 -2  0]
sage: A=CartanMatrix(['B',4])
....: cplus=[0,2]
....: cminus=[1,3]
....: c=cplus+cminus
....: for v in parasortables(A,c):
....:     h=coxeter_number(A)
....:     works=false
....:     for n in range(-2*h,0):
....:         pn=plusminus(cplus,cminus,n/2)
....:         P=p_lambda_int(B(A,cplus+cminus),lam(A,v),[[],pn])
....:         if P.dimension()==0:
....:             works=true
....:             break
....:     if not works:
....:         print(v)
....: 
[0, 2, 3, 2, 3]
[0, 2, 3, 2]
[0, 2, 3]
[2, 1, 3, 2, 1, 3, 2, 3]
[2, 1, 3, 2, 1, 3, 2]
[2, 1, 3, 2, 1]
[2, 1, 3, 2]
[2, 3, 2, 3]
[2, 3, 2]
[2, 3]
....:                 out=out+[[v[0]]+k]
....:     return out
....: 
....: #Another
....: def K(c,v):  # A set of sequences depending on a sortable element v, given
....:  by its c-sorting word
....:     out = []
....:     if c==[]:   # The terminal case (empty sequence for the rank-0 Coxeter
....:  group)
....:         out=[[]]
....:     elif v==[] or c[0]!=v[0]:  # The "induction on rank" case.
....:         for i in range(len(c)):
....:             out=out+[c[0:i+1]]
....:         out=K(c[1:],v)+out
....:     else:  # The "induction on length" case.  This is provably the right t
....: hing to do.
....:         for k in K(c[1:]+[c[0]],v[1:]):
....:             if k!=[] and k[0]==v[0]:
....:                 out=out+[k[1:]]
....:             else:
....:                 out=out+[[v[0]]+k]
....:     return out
....: 
....: 
....: 
....: # An experiment (a pretty dumb one... yields the list [v])
....: def K(c,v):  # A set of sequences depending on a sortable element v, given
....:  by its c-sorting word
....:     out = []
....:     if c==[]:   # The terminal case (empty sequence for the rank-0 Coxeter
....:  group)
....:         out=[[]]
....:     elif v==[] or c[0]!=v[0]:  # The "induction on rank" case.
....:         out=K(c[1:],v)
....:     else:  # The "induction on length" case.  This is provably the right t
....: hing to do.
....:         for k in K(c[1:]+[c[0]],v[1:]):
....:             if k!=[] and k[0]==v[0]:
....:                 out=out+[k[1:]]
....:             else:
....:                 out=out+[[v[0]]+k]
....:     return out
....: 
....: # old
....: def Kbip(cplus,cminus,Coxnum):
....:     out = [cminus+cplus,cminus,[]]
....:     for i in range(Coxnum-1):
....:         if (i//2)*2==i:  #even
....:             out=out+[out[-1]+cplus]
....:         else:
....:             out=out+[out[-1]+cminus]
....:     return out
....: 
....: 
....: '''
....: 
'\n#This was just a test of how python works\ndef even(n):\n    for i in range(n):\n        if i==(i//2)*2:\n            yield(i)\n'
'\n# An old version (failed in B3):\ndef K(c,v):  # A set of sequences depending on a sortable element v, given by its c-sorting word\n    out = []\n    if c==[]:   # The terminal case (empty sequence for the rank-0 Coxeter group)\n        out=[[]]\n    elif v==[] or c[0]!=v[0]:  # The "induction on rank" case.\n        oldK=K(c[1:],v)\n        #print([c],oldK)\n        for k in oldK:\n            out=out+[[c[0]]+k]\n        out=oldK+out\n    else:  # The "induction on length" case.  This is provably the right thing to do.\n        for k in K(c[1:]+[c[0]],v[1:]):\n            if k!=[] and k[0]==v[0]:\n                out=out+[k[1:]]\n            else:\n                out=out+[[v[0]]+k]\n    return out\n\n# Another old version (also failed in B3)\ndef K(c,v):  # A set of sequences depending on a sortable element v, given by its c-sorting word\n    out = []\n    if c==[]:   \n        out=[[]]\n    elif v==[] or c[0]!=v[0]:\n        oldK=K(c[1:],v)\n        for k in oldK:\n            out=out+[k+[c[0]]]\n        out=oldK+out\n    else:\n        for k in K(c[1:]+[c[0]],v[1:]):\n            if k!=[] and k[0]==v[0]:\n                out=out+[k[1:]]\n            else:\n                out=out+[[v[0]]+k]\n    return out\n\n#Another\ndef K(c,v):  # A set of sequences depending on a sortable element v, given by its c-sorting word\n    out = []\n    if c==[]:   # The terminal case (empty sequence for the rank-0 Coxeter group)\n        out=[[]]\n    elif v==[] or c[0]!=v[0]:  # The "induction on rank" case.\n        for i in range(len(c)):\n            out=out+[c[0:i+1]]\n        out=K(c[1:],v)+out\n    else:  # The "induction on length" case.  This is provably the right thing to do.\n        for k in K(c[1:]+[c[0]],v[1:]):\n            if k!=[] and k[0]==v[0]:\n                out=out+[k[1:]]\n            else:\n                out=out+[[v[0]]+k]\n    return out\n\n\n\n# An experiment (a pretty dumb one... yields the list [v])\ndef K(c,v):  # A set of sequences depending on a sortable element v, given by its c-sorting word\n    out = []\n    if c==[]:   # The terminal case (empty sequence for the rank-0 Coxeter group)\n        out=[[]]\n    elif v==[] or c[0]!=v[0]:  # The "induction on rank" case.\n        out=K(c[1:],v)\n    else:  # The "induction on length" case.  This is provably the right thing to do.\n        for k in K(c[1:]+[c[0]],v[1:]):\n            if k!=[] and k[0]==v[0]:\n                out=out+[k[1:]]\n            else:\n                out=out+[[v[0]]+k]\n    return out\n\n# old\ndef Kbip(cplus,cminus,Coxnum):\n    out = [cminus+cplus,cminus,[]]\n    for i in range(Coxnum-1):\n        if (i//2)*2==i:  #even\n            out=out+[out[-1]+cplus]\n        else:\n            out=out+[out[-1]+cminus]\n    return out\n\n\n'
sage: A=CartanMatrix(['B',6])
....: c=[0,1,2,3,4,5]
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),Kprefix(c,6))
....:     print(n,v,P.dimension())
....:     n+=1
....:     if P.dimension()!=0:
....:         print('FAILURE')
....:         break
....: 
1 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5] 0
2 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4] 0
3 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3] 0
4 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2] 0
5 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1] 0
6 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0] 0
7 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5] 0
8 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3] 0
9 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2] 0
10 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1] 0
11 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0] 0
12 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4] 0
13 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2] 0
14 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1] 0
15 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0] 0
16 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3] 0
17 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 0, 1] 0
18 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 0] 0
19 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2] 0
20 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 0] 0
21 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1] 0
22 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0] 0
23 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5] 0
24 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4] 0
25 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3] 0
26 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2] 0
27 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1] 0
28 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5] 0
29 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2] 0
30 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1] 0
31 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0] 0
32 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3] 0
33 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1] 0
34 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 0] 0
35 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2] 0
36 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 0] 0
37 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1] 0
38 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0] 0
39 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3] 0
40 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2] 0
41 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1] 0
42 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4] 0
43 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 0, 1] 0
44 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 0] 0
45 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2] 0
46 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 0] 0
47 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1] 0
48 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0] 0
49 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 1, 2] 0
50 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 1] 0
51 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3] 0
52 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 0, 1, 0] 0
53 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 0, 1] 0
54 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 0] 0
55 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 1] 0
56 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2] 0
57 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 0] 0
58 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1] 0
59 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5] 0
60 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 2, 3, 4] 0
61 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 2, 3] 0
62 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 2] 0
63 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0] 0
64 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5] 0
65 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4] 0
66 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3] 0
67 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2] 0
68 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1] 0
69 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5] 0
70 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] 0
71 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] 0
72 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1] 0
73 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4] 0
74 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2] 0
75 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 1] 0
76 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3] 0
77 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 1] 0
78 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2] 0
79 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1] 0
80 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 2, 3, 4, 5] 0
81 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 2, 3, 4] 0
82 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 2, 3] 0
83 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 2] 0
84 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5] 0
85 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1] 0
86 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0] 0
87 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2] 0
88 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0] 0
89 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1] 0
90 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0] 0
91 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2] 0
92 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1] 0
93 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3] 0
94 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0] 0
95 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1] 0
96 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 0] 0
97 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 1] 0
98 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2] 0
99 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 0] 0
100 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1] 0
101 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 2, 3] 0
102 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 2] 0
103 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0] 0
104 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
105 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3, 1] 0
106 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3] 0
107 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 1] 0
108 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2] 0
109 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1] 0
110 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 2, 3] 0
111 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 2] 0
112 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4] 0
113 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0] 0
114 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 0, 1] 0
115 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 0] 0
116 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 1] 0
117 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2] 0
118 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 0] 0
119 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1] 0
120 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 2] 0
121 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0] 0
122 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 1, 2, 1] 0
123 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 1, 2] 0
124 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 1] 0
125 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 2] 0
126 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3] 0
127 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 0, 1, 0] 0
128 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 0, 1] 0
129 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 0] 0
130 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 1] 0
131 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2] 0
132 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 5, 0] 0
133 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 5] 0
134 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 0] 0
135 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 3, 4] 0
136 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 3, 0] 0
137 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 3] 0
138 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 0] 0
139 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1] 0
140 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 2, 3, 4, 5] 0
141 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 2, 3, 4] 0
142 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 2, 3] 0
143 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 2] 0
144 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5] 0
145 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 2, 3] 0
146 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 2] 0
147 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 2, 3, 4] 0
148 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 2, 3, 2] 0
149 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 2, 3] 0
150 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 2] 0
151 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 3, 4, 5] 0
152 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 3, 4] 0
153 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 3] 0
154 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0] 0
155 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5] 0
156 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4] 0
157 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3] 0
158 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2] 0
159 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1] 0
160 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5] 0
161 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] 0
162 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] 0
163 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1] 0
164 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4] 0
165 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2] 0
166 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1] 0
167 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3] 0
168 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 1] 0
169 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2] 0
170 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1] 0
171 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5] 0
172 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4] 0
173 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3] 0
174 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2] 0
175 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5] 0
176 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
177 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1] 0
178 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] 0
179 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1] 0
180 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] 0
181 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1] 0
182 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3] 0
183 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2] 0
184 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4] 0
185 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1] 0
186 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2] 0
187 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 1] 0
188 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 2] 0
189 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3] 0
190 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 1] 0
191 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2] 0
192 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 3, 4, 5] 0
193 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 3, 4] 0
194 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 3] 0
195 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1] 0
196 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5] 0
197 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4] 0
198 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3] 0
199 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2] 0
200 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 2, 3, 4, 5] 0
201 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 2, 3, 4, 2, 3] 0
202 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 2, 3, 4, 2] 0
203 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 2, 3, 4] 0
204 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 2, 3, 2] 0
205 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 2, 3] 0
206 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 2] 0
207 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 3, 4, 5] 0
208 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 3, 4] 0
209 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 3] 0
210 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5] 0
211 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0] 0
212 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1] 0
213 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0] 0
214 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 1] 0
215 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2] 0
216 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0] 0
217 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1] 0
218 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 2] 0
219 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0] 0
220 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2, 1] 0
221 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2] 0
222 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1] 0
223 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 2] 0
224 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3] 0
225 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0] 0
226 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1] 0
227 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 0] 0
228 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 1] 0
229 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2] 0
230 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 3, 0] 0
231 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 3] 0
232 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 0] 0
233 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1] 0
234 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 2, 3, 2] 0
235 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 2, 3] 0
236 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 2] 0
237 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 3] 0
238 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0] 0
239 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
240 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
241 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3, 1] 0
242 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3, 2] 0
243 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3] 0
244 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 1] 0
245 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2] 0
246 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 3] 0
247 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1] 0
248 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 2, 3, 2] 0
249 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 2, 3] 0
250 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 2] 0
251 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 3] 0
252 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4] 0
253 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0] 0
254 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 0, 1] 0
255 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 0] 0
256 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 1] 0
257 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2] 0
258 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 0] 0
259 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1] 0
260 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 2] 0
261 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0] 0
262 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 1, 2, 1] 0
263 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 1, 2] 0
264 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 1] 0
265 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 2] 0
266 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3] 0
267 [0, 1, 2, 3, 4, 5, 0, 1, 2, 4, 5, 0, 1, 0] 0
268 [0, 1, 2, 3, 4, 5, 0, 1, 2, 4, 5, 0, 1] 0
269 [0, 1, 2, 3, 4, 5, 0, 1, 2, 4, 5, 0] 0
270 [0, 1, 2, 3, 4, 5, 0, 1, 2, 4, 5, 1] 0
271 [0, 1, 2, 3, 4, 5, 0, 1, 2, 4, 5] 0
272 [0, 1, 2, 3, 4, 5, 0, 1, 2, 4, 0, 1, 0] 0
273 [0, 1, 2, 3, 4, 5, 0, 1, 2, 4, 0, 1] 0
274 [0, 1, 2, 3, 4, 5, 0, 1, 2, 4, 0] 0
275 [0, 1, 2, 3, 4, 5, 0, 1, 2, 4, 1] 0
276 [0, 1, 2, 3, 4, 5, 0, 1, 2, 4] 0
277 [0, 1, 2, 3, 4, 5, 0, 1, 2, 0, 1, 0] 0
278 [0, 1, 2, 3, 4, 5, 0, 1, 2, 0, 1] 0
279 [0, 1, 2, 3, 4, 5, 0, 1, 2, 0] 0
280 [0, 1, 2, 3, 4, 5, 0, 1, 2, 1] 0
281 [0, 1, 2, 3, 4, 5, 0, 1, 2] 0
282 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 5, 0, 3, 4, 5] 0
283 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 5, 0, 3, 4] 0
284 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 5, 0, 3] 0
285 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 5, 0] 0
286 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 5, 3, 4, 5] 0
287 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 5, 3, 4] 0
288 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 5, 3] 0
289 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 5] 0
290 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 0, 3] 0
291 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 0] 0
292 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 3] 0
293 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4] 0
294 [0, 1, 2, 3, 4, 5, 0, 1, 3, 0] 0
295 [0, 1, 2, 3, 4, 5, 0, 1, 3] 0
296 [0, 1, 2, 3, 4, 5, 0, 1, 4, 5, 0] 0
297 [0, 1, 2, 3, 4, 5, 0, 1, 4, 5] 0
298 [0, 1, 2, 3, 4, 5, 0, 1, 4, 0] 0
299 [0, 1, 2, 3, 4, 5, 0, 1, 4] 0
300 [0, 1, 2, 3, 4, 5, 0, 1, 0] 0
301 [0, 1, 2, 3, 4, 5, 0, 1] 0
302 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5] 0
303 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4] 0
304 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3] 0
305 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 2, 3, 4, 5, 2] 0
306 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 2, 3, 4, 5] 0
307 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 2, 3, 4, 2, 3] 0
308 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 2, 3, 4, 2] 0
309 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 2, 3, 4] 0
310 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 2, 3, 2] 0
311 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 2, 3] 0
312 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 2] 0
313 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 3, 4, 5] 0
314 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 3, 4] 0
315 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 3] 0
316 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5] 0
317 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 2, 3, 2] 0
318 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 2, 3] 0
319 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 2] 0
320 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 3] 0
321 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4] 0
322 [0, 1, 2, 3, 4, 5, 0, 2, 3, 2] 0
323 [0, 1, 2, 3, 4, 5, 0, 2, 3] 0
324 [0, 1, 2, 3, 4, 5, 0, 2, 4, 5] 0
325 [0, 1, 2, 3, 4, 5, 0, 2, 4] 0
326 [0, 1, 2, 3, 4, 5, 0, 2] 0
327 [0, 1, 2, 3, 4, 5, 0, 3, 4, 5, 3, 4, 5] 0
328 [0, 1, 2, 3, 4, 5, 0, 3, 4, 5, 3, 4] 0
329 [0, 1, 2, 3, 4, 5, 0, 3, 4, 5, 3] 0
330 [0, 1, 2, 3, 4, 5, 0, 3, 4, 5] 0
331 [0, 1, 2, 3, 4, 5, 0, 3, 4, 3] 0
332 [0, 1, 2, 3, 4, 5, 0, 3, 4] 0
333 [0, 1, 2, 3, 4, 5, 0, 3] 0
334 [0, 1, 2, 3, 4, 5, 0, 4, 5] 0
335 [0, 1, 2, 3, 4, 5, 0, 4] 0
336 [0, 1, 2, 3, 4, 5, 0] 0
337 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5] 0
338 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4] 0
339 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3] 0
340 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2] 0
341 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1] 0
342 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5] 0
343 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] 0
344 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] 0
345 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1] 0
346 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4] 0
347 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2] 0
348 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1] 0
349 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3] 0
350 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 1] 0
351 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2] 0
352 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1] 0
353 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5] 0
354 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4] 0
355 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3] 0
356 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2] 0
357 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5] 0
358 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
359 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1] 0
360 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] 0
361 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1] 0
362 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] 0
363 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1] 0
364 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3] 0
365 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2] 0
366 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4] 0
367 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1] 0
368 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2] 0
369 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1] 0
370 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 2] 0
371 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3] 0
372 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 1] 0
373 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2] 0
374 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 3, 4, 5] 0
375 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 3, 4] 0
376 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 3] 0
377 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1] 0
378 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5] 0
379 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4] 0
380 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3] 0
381 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2] 0
382 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5] 0
383 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 2, 3] 0
384 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 2] 0
385 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4] 0
386 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 2] 0
387 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3] 0
388 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2] 0
389 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 3, 4, 5] 0
390 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 3, 4] 0
391 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 3] 0
392 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5] 0
393 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
394 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
395 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1] 0
396 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 2] 0
397 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] 0
398 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1] 0
399 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] 0
400 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 3] 0
401 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1] 0
402 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3, 2] 0
403 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3] 0
404 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2] 0
405 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 3] 0
406 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4] 0
407 [0, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1] 0
408 [0, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2] 0
409 [0, 1, 2, 3, 4, 5, 1, 2, 3, 1] 0
410 [0, 1, 2, 3, 4, 5, 1, 2, 3, 2] 0
411 [0, 1, 2, 3, 4, 5, 1, 2, 3] 0
412 [0, 1, 2, 3, 4, 5, 1, 2, 4, 5, 1] 0
413 [0, 1, 2, 3, 4, 5, 1, 2, 4, 5] 0
414 [0, 1, 2, 3, 4, 5, 1, 2, 4, 1] 0
415 [0, 1, 2, 3, 4, 5, 1, 2, 4] 0
416 [0, 1, 2, 3, 4, 5, 1, 2, 1] 0
417 [0, 1, 2, 3, 4, 5, 1, 2] 0
418 [0, 1, 2, 3, 4, 5, 1, 3, 4, 5, 3, 4, 5] 0
419 [0, 1, 2, 3, 4, 5, 1, 3, 4, 5, 3, 4] 0
420 [0, 1, 2, 3, 4, 5, 1, 3, 4, 5, 3] 0
421 [0, 1, 2, 3, 4, 5, 1, 3, 4, 5] 0
422 [0, 1, 2, 3, 4, 5, 1, 3, 4, 3] 0
423 [0, 1, 2, 3, 4, 5, 1, 3, 4] 0
424 [0, 1, 2, 3, 4, 5, 1, 3] 0
425 [0, 1, 2, 3, 4, 5, 1, 4, 5] 0
426 [0, 1, 2, 3, 4, 5, 1, 4] 0
427 [0, 1, 2, 3, 4, 5, 1] 0
428 [0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5] 0
429 [0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4] 0
430 [0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3] 0
431 [0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2] 0
432 [0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5] 0
433 [0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 2, 3] 0
434 [0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 2] 0
435 [0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4] 0
436 [0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 2] 0
437 [0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3] 0
438 [0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2] 0
439 [0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 3, 4, 5] 0
440 [0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 3, 4] 0
441 [0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 3] 0
442 [0, 1, 2, 3, 4, 5, 2, 3, 4, 5] 0
443 [0, 1, 2, 3, 4, 5, 2, 3, 4, 2, 3, 2] 0
444 [0, 1, 2, 3, 4, 5, 2, 3, 4, 2, 3] 0
445 [0, 1, 2, 3, 4, 5, 2, 3, 4, 2] 0
446 [0, 1, 2, 3, 4, 5, 2, 3, 4, 3] 0
447 [0, 1, 2, 3, 4, 5, 2, 3, 4] 0
448 [0, 1, 2, 3, 4, 5, 2, 3, 2] 0
449 [0, 1, 2, 3, 4, 5, 2, 3] 0
450 [0, 1, 2, 3, 4, 5, 2, 4, 5] 0
451 [0, 1, 2, 3, 4, 5, 2, 4] 0
452 [0, 1, 2, 3, 4, 5, 2] 0
453 [0, 1, 2, 3, 4, 5, 3, 4, 5, 3, 4, 5] 0
454 [0, 1, 2, 3, 4, 5, 3, 4, 5, 3, 4] 0
455 [0, 1, 2, 3, 4, 5, 3, 4, 5, 3] 0
456 [0, 1, 2, 3, 4, 5, 3, 4, 5] 0
457 [0, 1, 2, 3, 4, 5, 3, 4, 3] 0
458 [0, 1, 2, 3, 4, 5, 3, 4] 0
459 [0, 1, 2, 3, 4, 5, 3] 0
460 [0, 1, 2, 3, 4, 5, 4, 5] 0
461 [0, 1, 2, 3, 4, 5, 4] 0
462 [0, 1, 2, 3, 4, 5] 0
463 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0] 0
464 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1] 0
465 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0] 0
466 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 1] 0
467 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2] 0
468 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0] 0
469 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1] 0
470 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 2] 0
471 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0] 0
472 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2, 1] 0
473 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2] 0
474 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1] 0
475 [0, 1, 2, 3, 4, 0, 1, 2, 3, 2] 0
476 [0, 1, 2, 3, 4, 0, 1, 2, 3] 0
477 [0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0] 0
478 [0, 1, 2, 3, 4, 0, 1, 2, 0, 1] 0
479 [0, 1, 2, 3, 4, 0, 1, 2, 0] 0
480 [0, 1, 2, 3, 4, 0, 1, 2, 1] 0
481 [0, 1, 2, 3, 4, 0, 1, 2] 0
482 [0, 1, 2, 3, 4, 0, 1, 3, 0] 0
483 [0, 1, 2, 3, 4, 0, 1, 3] 0
484 [0, 1, 2, 3, 4, 0, 1, 0] 0
485 [0, 1, 2, 3, 4, 0, 1] 0
486 [0, 1, 2, 3, 4, 0, 2, 3, 2] 0
487 [0, 1, 2, 3, 4, 0, 2, 3] 0
488 [0, 1, 2, 3, 4, 0, 2] 0
489 [0, 1, 2, 3, 4, 0, 3] 0
490 [0, 1, 2, 3, 4, 0] 0
491 [0, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
492 [0, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
493 [0, 1, 2, 3, 4, 1, 2, 3, 1] 0
494 [0, 1, 2, 3, 4, 1, 2, 3, 2] 0
495 [0, 1, 2, 3, 4, 1, 2, 3] 0
496 [0, 1, 2, 3, 4, 1, 2, 1] 0
497 [0, 1, 2, 3, 4, 1, 2] 0
498 [0, 1, 2, 3, 4, 1, 3] 0
499 [0, 1, 2, 3, 4, 1] 0
500 [0, 1, 2, 3, 4, 2, 3, 2] 0
501 [0, 1, 2, 3, 4, 2, 3] 0
502 [0, 1, 2, 3, 4, 2] 0
503 [0, 1, 2, 3, 4, 3] 0
504 [0, 1, 2, 3, 4] 0
505 [0, 1, 2, 3, 5, 0, 1, 2, 0, 1, 0] 0
506 [0, 1, 2, 3, 5, 0, 1, 2, 0, 1] 0
507 [0, 1, 2, 3, 5, 0, 1, 2, 0] 0
508 [0, 1, 2, 3, 5, 0, 1, 2, 1] 0
509 [0, 1, 2, 3, 5, 0, 1, 2] 0
510 [0, 1, 2, 3, 5, 0, 1, 0] 0
511 [0, 1, 2, 3, 5, 0, 1] 0
512 [0, 1, 2, 3, 5, 0, 2] 0
513 [0, 1, 2, 3, 5, 0] 0
514 [0, 1, 2, 3, 5, 1, 2, 1] 0
515 [0, 1, 2, 3, 5, 1, 2] 0
516 [0, 1, 2, 3, 5, 1] 0
517 [0, 1, 2, 3, 5, 2] 0
518 [0, 1, 2, 3, 5] 0
519 [0, 1, 2, 3, 0, 1, 2, 0, 1, 0] 0
520 [0, 1, 2, 3, 0, 1, 2, 0, 1] 0
521 [0, 1, 2, 3, 0, 1, 2, 0] 0
522 [0, 1, 2, 3, 0, 1, 2, 1] 0
523 [0, 1, 2, 3, 0, 1, 2] 0
524 [0, 1, 2, 3, 0, 1, 0] 0
525 [0, 1, 2, 3, 0, 1] 0
526 [0, 1, 2, 3, 0, 2] 0
527 [0, 1, 2, 3, 0] 0
528 [0, 1, 2, 3, 1, 2, 1] 0
529 [0, 1, 2, 3, 1, 2] 0
530 [0, 1, 2, 3, 1] 0
531 [0, 1, 2, 3, 2] 0
532 [0, 1, 2, 3] 0
533 [0, 1, 2, 4, 5, 0, 1, 4, 5, 0] 0
534 [0, 1, 2, 4, 5, 0, 1, 4, 5] 0
535 [0, 1, 2, 4, 5, 0, 1, 4, 0] 0
536 [0, 1, 2, 4, 5, 0, 1, 4] 0
537 [0, 1, 2, 4, 5, 0, 1, 0] 0
538 [0, 1, 2, 4, 5, 0, 1] 0
539 [0, 1, 2, 4, 5, 0, 4, 5] 0
540 [0, 1, 2, 4, 5, 0, 4] 0
541 [0, 1, 2, 4, 5, 0] 0
542 [0, 1, 2, 4, 5, 1, 4, 5] 0
543 [0, 1, 2, 4, 5, 1, 4] 0
544 [0, 1, 2, 4, 5, 1] 0
545 [0, 1, 2, 4, 5, 4, 5] 0
546 [0, 1, 2, 4, 5, 4] 0
547 [0, 1, 2, 4, 5] 0
548 [0, 1, 2, 4, 0, 1, 0] 0
549 [0, 1, 2, 4, 0, 1] 0
550 [0, 1, 2, 4, 0] 0
551 [0, 1, 2, 4, 1] 0
552 [0, 1, 2, 4] 0
553 [0, 1, 2, 5, 0, 1, 0] 0
554 [0, 1, 2, 5, 0, 1] 0
555 [0, 1, 2, 5, 0] 0
556 [0, 1, 2, 5, 1] 0
557 [0, 1, 2, 5] 0
558 [0, 1, 2, 0, 1, 0] 0
559 [0, 1, 2, 0, 1] 0
560 [0, 1, 2, 0] 0
561 [0, 1, 2, 1] 0
562 [0, 1, 2] 0
563 [0, 1, 3, 4, 5, 0, 3, 4, 5, 3, 4, 5] 0
564 [0, 1, 3, 4, 5, 0, 3, 4, 5, 3, 4] 0
565 [0, 1, 3, 4, 5, 0, 3, 4, 5, 3] 0
566 [0, 1, 3, 4, 5, 0, 3, 4, 5] 0
567 [0, 1, 3, 4, 5, 0, 3, 4, 3] 0
568 [0, 1, 3, 4, 5, 0, 3, 4] 0
569 [0, 1, 3, 4, 5, 0, 3] 0
570 [0, 1, 3, 4, 5, 0, 4, 5] 0
571 [0, 1, 3, 4, 5, 0, 4] 0
572 [0, 1, 3, 4, 5, 0] 0
573 [0, 1, 3, 4, 5, 3, 4, 5, 3, 4, 5] 0
574 [0, 1, 3, 4, 5, 3, 4, 5, 3, 4] 0
575 [0, 1, 3, 4, 5, 3, 4, 5, 3] 0
576 [0, 1, 3, 4, 5, 3, 4, 5] 0
577 [0, 1, 3, 4, 5, 3, 4, 3] 0
578 [0, 1, 3, 4, 5, 3, 4] 0
579 [0, 1, 3, 4, 5, 3] 0
580 [0, 1, 3, 4, 5, 4, 5] 0
581 [0, 1, 3, 4, 5, 4] 0
582 [0, 1, 3, 4, 5] 0
583 [0, 1, 3, 4, 0, 3] 0
584 [0, 1, 3, 4, 0] 0
585 [0, 1, 3, 4, 3] 0
586 [0, 1, 3, 4] 0
587 [0, 1, 3, 5, 0] 0
588 [0, 1, 3, 5] 0
589 [0, 1, 3, 0] 0
590 [0, 1, 3] 0
591 [0, 1, 4, 5, 0, 4, 5] 0
592 [0, 1, 4, 5, 0, 4] 0
593 [0, 1, 4, 5, 0] 0
594 [0, 1, 4, 5, 4, 5] 0
595 [0, 1, 4, 5, 4] 0
596 [0, 1, 4, 5] 0
597 [0, 1, 4, 0] 0
598 [0, 1, 4] 0
599 [0, 1, 5, 0] 0
600 [0, 1, 5] 0
601 [0, 1, 0] 0
602 [0, 1] 0
603 [0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5] 0
604 [0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4] 0
605 [0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3] 0
606 [0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2] 0
607 [0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5] 0
608 [0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 2, 3] 0
609 [0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 2] 0
610 [0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4] 0
611 [0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 2] 0
612 [0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3] 0
613 [0, 2, 3, 4, 5, 2, 3, 4, 5, 2] 0
614 [0, 2, 3, 4, 5, 2, 3, 4, 5, 3, 4, 5] 0
615 [0, 2, 3, 4, 5, 2, 3, 4, 5, 3, 4] 0
616 [0, 2, 3, 4, 5, 2, 3, 4, 5, 3] 0
617 [0, 2, 3, 4, 5, 2, 3, 4, 5] 0
618 [0, 2, 3, 4, 5, 2, 3, 4, 2, 3, 2] 0
619 [0, 2, 3, 4, 5, 2, 3, 4, 2, 3] 0
620 [0, 2, 3, 4, 5, 2, 3, 4, 2] 0
621 [0, 2, 3, 4, 5, 2, 3, 4, 3] 0
622 [0, 2, 3, 4, 5, 2, 3, 4] 0
623 [0, 2, 3, 4, 5, 2, 3, 2] 0
624 [0, 2, 3, 4, 5, 2, 3] 0
625 [0, 2, 3, 4, 5, 2, 4, 5] 0
626 [0, 2, 3, 4, 5, 2, 4] 0
627 [0, 2, 3, 4, 5, 2] 0
628 [0, 2, 3, 4, 5, 3, 4, 5, 3, 4, 5] 0
629 [0, 2, 3, 4, 5, 3, 4, 5, 3, 4] 0
630 [0, 2, 3, 4, 5, 3, 4, 5, 3] 0
631 [0, 2, 3, 4, 5, 3, 4, 5] 0
632 [0, 2, 3, 4, 5, 3, 4, 3] 0
633 [0, 2, 3, 4, 5, 3, 4] 0
634 [0, 2, 3, 4, 5, 3] 0
635 [0, 2, 3, 4, 5, 4, 5] 0
636 [0, 2, 3, 4, 5, 4] 0
637 [0, 2, 3, 4, 5] 0
638 [0, 2, 3, 4, 2, 3, 2] 0
639 [0, 2, 3, 4, 2, 3] 0
640 [0, 2, 3, 4, 2] 0
641 [0, 2, 3, 4, 3] 0
642 [0, 2, 3, 4] 0
643 [0, 2, 3, 5, 2] 0
644 [0, 2, 3, 5] 0
645 [0, 2, 3, 2] 0
646 [0, 2, 3] 0
647 [0, 2, 4, 5, 4, 5] 0
648 [0, 2, 4, 5, 4] 0
649 [0, 2, 4, 5] 0
650 [0, 2, 4] 0
651 [0, 2, 5] 0
652 [0, 2] 0
653 [0, 3, 4, 5, 3, 4, 5, 3, 4, 5] 0
654 [0, 3, 4, 5, 3, 4, 5, 3, 4] 0
655 [0, 3, 4, 5, 3, 4, 5, 3] 0
656 [0, 3, 4, 5, 3, 4, 5] 0
657 [0, 3, 4, 5, 3, 4, 3] 0
658 [0, 3, 4, 5, 3, 4] 0
659 [0, 3, 4, 5, 3] 0
660 [0, 3, 4, 5, 4, 5] 0
661 [0, 3, 4, 5, 4] 0
662 [0, 3, 4, 5] 0
663 [0, 3, 4, 3] 0
664 [0, 3, 4] 0
665 [0, 3, 5] 0
666 [0, 3] 0
667 [0, 4, 5, 4, 5] 0
668 [0, 4, 5, 4] 0
669 [0, 4, 5] 0
670 [0, 4] 0
671 [0, 5] 0
672 [0] 0
673 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5] 0
674 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4] 0
675 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3] 0
676 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2] 0
677 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1] 0
678 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5] 0
679 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] 0
680 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] 0
681 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1] 0
682 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4] 0
683 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2] 0
684 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1] 0
685 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3] 0
686 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 1] 0
687 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2] 0
688 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1] 0
689 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5] 0
690 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4] 0
691 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3] 0
692 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2] 0
693 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5] 0
694 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
695 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1] 0
696 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] 0
697 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1] 0
698 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] 0
699 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1] 0
700 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3] 0
701 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2] 0
702 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4] 0
703 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1] 0
704 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2] 0
705 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1] 0
706 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 2] 0
707 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3] 0
708 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 1] 0
709 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2] 0
710 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 3, 4, 5] 0
711 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 3, 4] 0
712 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 3] 0
713 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1] 0
714 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5] 0
715 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4] 0
716 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3] 0
717 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2] 0
718 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5] 0
719 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 2, 3] 0
720 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 2] 0
721 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4] 0
722 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 2] 0
723 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3] 0
724 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2] 0
725 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 3, 4, 5] 0
726 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 3, 4] 0
727 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 3] 0
728 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5] 0
729 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
730 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
731 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1] 0
732 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 2] 0
733 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] 0
734 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1] 0
735 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] 0
736 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 3] 0
737 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1] 0
738 [1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3, 2] 0
739 [1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3] 0
740 [1, 2, 3, 4, 5, 1, 2, 3, 4, 2] 0
741 [1, 2, 3, 4, 5, 1, 2, 3, 4, 3] 0
742 [1, 2, 3, 4, 5, 1, 2, 3, 4] 0
743 [1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1] 0
744 [1, 2, 3, 4, 5, 1, 2, 3, 1, 2] 0
745 [1, 2, 3, 4, 5, 1, 2, 3, 1] 0
746 [1, 2, 3, 4, 5, 1, 2, 3, 2] 0
747 [1, 2, 3, 4, 5, 1, 2, 3] 0
748 [1, 2, 3, 4, 5, 1, 2, 4, 5, 1] 0
749 [1, 2, 3, 4, 5, 1, 2, 4, 5] 0
750 [1, 2, 3, 4, 5, 1, 2, 4, 1] 0
751 [1, 2, 3, 4, 5, 1, 2, 4] 0
752 [1, 2, 3, 4, 5, 1, 2, 1] 0
753 [1, 2, 3, 4, 5, 1, 2] 0
754 [1, 2, 3, 4, 5, 1, 3, 4, 5, 3, 4, 5] 0
755 [1, 2, 3, 4, 5, 1, 3, 4, 5, 3, 4] 0
756 [1, 2, 3, 4, 5, 1, 3, 4, 5, 3] 0
757 [1, 2, 3, 4, 5, 1, 3, 4, 5] 0
758 [1, 2, 3, 4, 5, 1, 3, 4, 3] 0
759 [1, 2, 3, 4, 5, 1, 3, 4] 0
760 [1, 2, 3, 4, 5, 1, 3] 0
761 [1, 2, 3, 4, 5, 1, 4, 5] 0
762 [1, 2, 3, 4, 5, 1, 4] 0
763 [1, 2, 3, 4, 5, 1] 0
764 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5] 0
765 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4] 0
766 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3] 0
767 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2] 0
768 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5] 0
769 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 2, 3] 0
770 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 2] 0
771 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4] 0
772 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 2] 0
773 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3] 0
774 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2] 0
775 [1, 2, 3, 4, 5, 2, 3, 4, 5, 3, 4, 5] 0
776 [1, 2, 3, 4, 5, 2, 3, 4, 5, 3, 4] 0
777 [1, 2, 3, 4, 5, 2, 3, 4, 5, 3] 0
778 [1, 2, 3, 4, 5, 2, 3, 4, 5] 0
779 [1, 2, 3, 4, 5, 2, 3, 4, 2, 3, 2] 0
780 [1, 2, 3, 4, 5, 2, 3, 4, 2, 3] 0
781 [1, 2, 3, 4, 5, 2, 3, 4, 2] 0
782 [1, 2, 3, 4, 5, 2, 3, 4, 3] 0
783 [1, 2, 3, 4, 5, 2, 3, 4] 0
784 [1, 2, 3, 4, 5, 2, 3, 2] 0
785 [1, 2, 3, 4, 5, 2, 3] 0
786 [1, 2, 3, 4, 5, 2, 4, 5] 0
787 [1, 2, 3, 4, 5, 2, 4] 0
788 [1, 2, 3, 4, 5, 2] 0
789 [1, 2, 3, 4, 5, 3, 4, 5, 3, 4, 5] 0
790 [1, 2, 3, 4, 5, 3, 4, 5, 3, 4] 0
791 [1, 2, 3, 4, 5, 3, 4, 5, 3] 0
792 [1, 2, 3, 4, 5, 3, 4, 5] 0
793 [1, 2, 3, 4, 5, 3, 4, 3] 0
794 [1, 2, 3, 4, 5, 3, 4] 0
795 [1, 2, 3, 4, 5, 3] 0
796 [1, 2, 3, 4, 5, 4, 5] 0
797 [1, 2, 3, 4, 5, 4] 0
798 [1, 2, 3, 4, 5] 0
799 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
800 [1, 2, 3, 4, 1, 2, 3, 1, 2] 0
801 [1, 2, 3, 4, 1, 2, 3, 1] 0
802 [1, 2, 3, 4, 1, 2, 3, 2] 0
803 [1, 2, 3, 4, 1, 2, 3] 0
804 [1, 2, 3, 4, 1, 2, 1] 0
805 [1, 2, 3, 4, 1, 2] 0
806 [1, 2, 3, 4, 1, 3] 0
807 [1, 2, 3, 4, 1] 0
808 [1, 2, 3, 4, 2, 3, 2] 0
809 [1, 2, 3, 4, 2, 3] 0
810 [1, 2, 3, 4, 2] 0
811 [1, 2, 3, 4, 3] 0
812 [1, 2, 3, 4] 0
813 [1, 2, 3, 5, 1, 2, 1] 0
814 [1, 2, 3, 5, 1, 2] 0
815 [1, 2, 3, 5, 1] 0
816 [1, 2, 3, 5, 2] 0
817 [1, 2, 3, 5] 0
818 [1, 2, 3, 1, 2, 1] 0
819 [1, 2, 3, 1, 2] 0
820 [1, 2, 3, 1] 0
821 [1, 2, 3, 2] 0
822 [1, 2, 3] 0
823 [1, 2, 4, 5, 1, 4, 5] 0
824 [1, 2, 4, 5, 1, 4] 0
825 [1, 2, 4, 5, 1] 0
826 [1, 2, 4, 5, 4, 5] 0
827 [1, 2, 4, 5, 4] 0
828 [1, 2, 4, 5] 0
829 [1, 2, 4, 1] 0
830 [1, 2, 4] 0
831 [1, 2, 5, 1] 0
832 [1, 2, 5] 0
833 [1, 2, 1] 0
834 [1, 2] 0
835 [1, 3, 4, 5, 3, 4, 5, 3, 4, 5] 0
836 [1, 3, 4, 5, 3, 4, 5, 3, 4] 0
837 [1, 3, 4, 5, 3, 4, 5, 3] 0
838 [1, 3, 4, 5, 3, 4, 5] 0
839 [1, 3, 4, 5, 3, 4, 3] 0
840 [1, 3, 4, 5, 3, 4] 0
841 [1, 3, 4, 5, 3] 0
842 [1, 3, 4, 5, 4, 5] 0
843 [1, 3, 4, 5, 4] 0
844 [1, 3, 4, 5] 0
845 [1, 3, 4, 3] 0
846 [1, 3, 4] 0
847 [1, 3, 5] 0
848 [1, 3] 0
849 [1, 4, 5, 4, 5] 0
850 [1, 4, 5, 4] 0
851 [1, 4, 5] 0
852 [1, 4] 0
853 [1, 5] 0
854 [1] 0
855 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5] 0
856 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4] 0
857 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3] 0
858 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2] 0
859 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5] 0
860 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 2, 3] 0
861 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 2] 0
862 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4] 0
863 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 2] 0
864 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3] 0
865 [2, 3, 4, 5, 2, 3, 4, 5, 2] 0
866 [2, 3, 4, 5, 2, 3, 4, 5, 3, 4, 5] 0
867 [2, 3, 4, 5, 2, 3, 4, 5, 3, 4] 0
868 [2, 3, 4, 5, 2, 3, 4, 5, 3] 0
869 [2, 3, 4, 5, 2, 3, 4, 5] 0
870 [2, 3, 4, 5, 2, 3, 4, 2, 3, 2] 0
871 [2, 3, 4, 5, 2, 3, 4, 2, 3] 0
872 [2, 3, 4, 5, 2, 3, 4, 2] 0
873 [2, 3, 4, 5, 2, 3, 4, 3] 0
874 [2, 3, 4, 5, 2, 3, 4] 0
875 [2, 3, 4, 5, 2, 3, 2] 0
876 [2, 3, 4, 5, 2, 3] 0
877 [2, 3, 4, 5, 2, 4, 5] 0
878 [2, 3, 4, 5, 2, 4] 0
879 [2, 3, 4, 5, 2] 0
880 [2, 3, 4, 5, 3, 4, 5, 3, 4, 5] 0
881 [2, 3, 4, 5, 3, 4, 5, 3, 4] 0
882 [2, 3, 4, 5, 3, 4, 5, 3] 0
883 [2, 3, 4, 5, 3, 4, 5] 0
884 [2, 3, 4, 5, 3, 4, 3] 0
885 [2, 3, 4, 5, 3, 4] 0
886 [2, 3, 4, 5, 3] 0
887 [2, 3, 4, 5, 4, 5] 0
888 [2, 3, 4, 5, 4] 0
889 [2, 3, 4, 5] 0
890 [2, 3, 4, 2, 3, 2] 0
891 [2, 3, 4, 2, 3] 0
892 [2, 3, 4, 2] 0
893 [2, 3, 4, 3] 0
894 [2, 3, 4] 0
895 [2, 3, 5, 2] 0
896 [2, 3, 5] 0
897 [2, 3, 2] 0
898 [2, 3] 0
899 [2, 4, 5, 4, 5] 0
900 [2, 4, 5, 4] 0
901 [2, 4, 5] 0
902 [2, 4] 0
903 [2, 5] 0
904 [2] 0
905 [3, 4, 5, 3, 4, 5, 3, 4, 5] 0
906 [3, 4, 5, 3, 4, 5, 3, 4] 0
907 [3, 4, 5, 3, 4, 5, 3] 0
908 [3, 4, 5, 3, 4, 5] 0
909 [3, 4, 5, 3, 4, 3] 0
910 [3, 4, 5, 3, 4] 0
911 [3, 4, 5, 3] 0
912 [3, 4, 5, 4, 5] 0
913 [3, 4, 5, 4] 0
914 [3, 4, 5] 0
915 [3, 4, 3] 0
916 [3, 4] 0
917 [3, 5] 0
918 [3] 0
919 [4, 5, 4, 5] 0
920 [4, 5, 4] 0
921 [4, 5] 0
922 [4] 0
923 [5] 0
924 [] 0
sage: A=CartanMatrix(['B',6])
....: c=[2,0,5,4,3,1]
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),Kprefix(c,6))
....:     print(n,v,P.dimension())
....:     n+=1
....:     if P.dimension()!=0:
....:         print('FAILURE')
....:         break
....: 
1 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1] 0
2 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3] 0
3 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 1] 0
4 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4] 0
5 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 1] 0
6 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5] 0
7 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 1] 0
8 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0] 0
9 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3] 0
10 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4] 0
11 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5] 0
12 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2] 0
13 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 0, 5, 4] 0
14 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 0, 5] 0
15 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 0] 0
16 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 5, 4] 0
17 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 5] 0
18 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1] 0
19 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 5, 4] 0
20 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 5] 0
21 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3] 0
22 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 1, 0, 5] 0
23 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 1, 0] 0
24 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 1, 5] 0
25 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 1] 0
26 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 5] 0
27 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4] 0
28 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 1, 0] 0
29 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 1] 0
30 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5] 0
31 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 1, 0] 0
32 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 1] 0
33 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0] 0
34 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4] 0
35 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5] 0
36 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2] 0
37 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 5, 4] 0
38 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 5] 0
39 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1] 0
40 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 5, 4] 0
41 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 5] 0
42 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3] 0
43 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 1, 5] 0
44 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 1] 0
45 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 5] 0
46 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4] 0
47 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 1] 0
48 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5] 0
49 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 1] 0
50 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2] 0
51 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 0, 5, 4, 5] 0
52 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 0, 5, 4] 0
53 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 0, 5] 0
54 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 0] 0
55 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 5, 4, 5] 0
56 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 5, 4] 0
57 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 5] 0
58 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1] 0
59 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 2, 5, 4, 3, 5] 0
60 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 2, 5, 4, 3] 0
61 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 2, 5, 4, 5] 0
62 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 2, 5, 4] 0
63 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 2, 5] 0
64 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 2] 0
65 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 5, 4, 5] 0
66 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 5, 4] 0
67 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 5] 0
68 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3] 0
69 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 1, 0, 5] 0
70 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 1, 0] 0
71 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 1, 5] 0
72 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 1] 0
73 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 5] 0
74 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4] 0
75 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 1, 0] 0
76 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 1] 0
77 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5] 0
78 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 1, 0] 0
79 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 1] 0
80 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0] 0
81 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4] 0
82 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5] 0
83 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2] 0
84 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 5, 4] 0
85 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 5] 0
86 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1] 0
87 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 5, 4] 0
88 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 5] 0
89 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3] 0
90 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 1, 5] 0
91 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 1] 0
92 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 5] 0
93 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4] 0
94 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 1] 0
95 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5] 0
96 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 1] 0
97 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2] 0
98 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 5, 4, 5] 0
99 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 5, 4] 0
100 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 5] 0
101 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1] 0
102 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 2, 5, 4, 3, 5] 0
103 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 2, 5, 4, 3] 0
104 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 2, 5, 4, 5] 0
105 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 2, 5, 4] 0
106 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 2, 5] 0
107 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 2] 0
108 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 5, 4, 5] 0
109 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 5, 4] 0
110 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 5] 0
111 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3] 0
112 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 1, 5] 0
113 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 1] 0
114 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 5] 0
115 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4] 0
116 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 1] 0
117 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5] 0
118 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 1] 0
119 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2] 0
120 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 0, 5, 4, 3, 5, 4] 0
121 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 0, 5, 4, 3, 5] 0
122 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 0, 5, 4, 3] 0
123 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 0, 5, 4, 5] 0
124 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 0, 5, 4] 0
125 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 0, 5] 0
126 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 0] 0
127 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 5, 4, 3, 5, 4] 0
128 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 5, 4, 3, 5] 0
129 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 5, 4, 3] 0
130 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 5, 4, 5] 0
131 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 5, 4] 0
132 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 5] 0
133 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1] 0
134 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 2, 5, 4, 3, 2, 5, 4, 3] 0
135 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 2, 5, 4, 3, 2, 5, 4] 0
136 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 2, 5, 4, 3, 2, 5] 0
137 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 2, 5, 4, 3, 2] 0
138 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
139 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 2, 5, 4, 3, 5] 0
140 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 2, 5, 4, 3] 0
141 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 2, 5, 4, 5] 0
142 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 2, 5, 4] 0
143 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 2, 5] 0
144 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 2] 0
145 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 5, 4, 3, 5, 4] 0
146 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 5, 4, 3, 5] 0
147 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 5, 4, 3] 0
148 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 5, 4, 5] 0
149 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 5, 4] 0
150 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 5] 0
151 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3] 0
152 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 1, 0, 5, 4] 0
153 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 1, 0, 5] 0
154 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 1, 0] 0
155 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 1, 5, 4] 0
156 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 1, 5] 0
157 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 1] 0
158 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 5, 4] 0
159 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 5] 0
160 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4] 0
161 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 1, 0] 0
162 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 1] 0
163 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5] 0
164 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 4, 3, 1, 0] 0
165 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 4, 3, 1] 0
166 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 4, 3] 0
167 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 4, 1, 0] 0
168 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 4, 1] 0
169 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 4] 0
170 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 1, 0] 0
171 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 1] 0
172 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0] 0
173 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2] 0
174 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1] 0
175 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3] 0
176 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 1] 0
177 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4] 0
178 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 1] 0
179 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5] 0
180 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 1] 0
181 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2] 0
182 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 5, 4] 0
183 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 5] 0
184 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1] 0
185 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 2, 5, 4, 3] 0
186 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 2, 5, 4] 0
187 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 2, 5] 0
188 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 2] 0
189 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 5, 4] 0
190 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 5] 0
191 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3] 0
192 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 1, 5] 0
193 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 1] 0
194 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 5] 0
195 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4] 0
196 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 1] 0
197 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5] 0
198 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 1] 0
199 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2] 0
200 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 5, 4, 3, 5, 4] 0
201 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 5, 4, 3, 5] 0
202 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 5, 4, 3] 0
203 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 5, 4, 5] 0
204 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 5, 4] 0
205 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 5] 0
206 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1] 0
207 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 2, 5, 4, 3, 2, 5, 4, 3] 0
208 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 2, 5, 4, 3, 2, 5, 4] 0
209 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 2, 5, 4, 3, 2, 5] 0
210 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 2, 5, 4, 3, 2] 0
211 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
212 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 2, 5, 4, 3, 5] 0
213 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 2, 5, 4, 3] 0
214 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 2, 5, 4, 5] 0
215 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 2, 5, 4] 0
216 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 2, 5] 0
217 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 2] 0
218 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 5, 4, 3, 5, 4] 0
219 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 5, 4, 3, 5] 0
220 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 5, 4, 3] 0
221 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 5, 4, 5] 0
222 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 5, 4] 0
223 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 5] 0
224 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3] 0
225 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 1, 5, 4] 0
226 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 1, 5] 0
227 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 1] 0
228 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 5, 4] 0
229 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 5] 0
230 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4] 0
231 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 1] 0
232 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5] 0
233 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 4, 3, 1] 0
234 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 4, 3] 0
235 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 4, 1] 0
236 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 4] 0
237 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 1] 0
238 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2] 0
239 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 0, 5, 4, 3, 5, 4, 3] 0
240 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 0, 5, 4, 3, 5, 4] 0
241 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 0, 5, 4, 3, 5] 0
242 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 0, 5, 4, 3] 0
243 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 0, 5, 4, 5, 4] 0
244 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 0, 5, 4, 5] 0
245 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 0, 5, 4] 0
246 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 0, 5] 0
247 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 0, 4] 0
248 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 0] 0
249 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 5, 4, 3, 5, 4, 3] 0
250 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 5, 4, 3, 5, 4] 0
251 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 5, 4, 3, 5] 0
252 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 5, 4, 3] 0
253 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 5, 4, 5, 4] 0
254 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 5, 4, 5] 0
255 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 5, 4] 0
256 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 5] 0
257 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 4] 0
258 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1] 0
259 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 2, 5, 4, 3, 2, 5, 4, 3, 2] 0
260 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 2, 5, 4, 3, 2, 5, 4, 3] 0
261 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 2, 5, 4, 3, 2, 5, 4] 0
262 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 2, 5, 4, 3, 2, 5] 0
263 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 2, 5, 4, 3, 2] 0
264 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4, 3] 0
265 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
266 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 2, 5, 4, 3, 5] 0
267 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 2, 5, 4, 3] 0
268 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 2, 5, 4, 5, 4] 0
269 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 2, 5, 4, 5] 0
270 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 2, 5, 4] 0
271 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 2, 5] 0
272 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 2, 4] 0
273 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 2] 0
274 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 5, 4, 3, 5, 4, 3] 0
275 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 5, 4, 3, 5, 4] 0
276 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 5, 4, 3, 5] 0
277 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 5, 4, 3] 0
278 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 5, 4, 5, 4] 0
279 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 5, 4, 5] 0
280 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 5, 4] 0
281 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 5] 0
282 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 4] 0
283 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3] 0
284 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 1, 0, 5, 4] 0
285 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 1, 0, 5] 0
286 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 1, 0] 0
287 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 1, 5, 4] 0
288 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 1, 5] 0
289 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 1] 0
290 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 5, 4] 0
291 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 5] 0
292 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4] 0
293 [2, 0, 5, 4, 3, 1, 2, 0, 5, 3, 1, 2, 0] 0
294 [2, 0, 5, 4, 3, 1, 2, 0, 5, 3, 1, 2] 0
295 [2, 0, 5, 4, 3, 1, 2, 0, 5, 3, 1, 0] 0
296 [2, 0, 5, 4, 3, 1, 2, 0, 5, 3, 1] 0
297 [2, 0, 5, 4, 3, 1, 2, 0, 5, 3] 0
298 [2, 0, 5, 4, 3, 1, 2, 0, 5, 1, 0] 0
299 [2, 0, 5, 4, 3, 1, 2, 0, 5, 1] 0
300 [2, 0, 5, 4, 3, 1, 2, 0, 5] 0
301 [2, 0, 5, 4, 3, 1, 2, 0, 4, 3, 1, 2, 0, 4, 3, 1] 0
302 [2, 0, 5, 4, 3, 1, 2, 0, 4, 3, 1, 2, 0, 4, 3] 0
303 [2, 0, 5, 4, 3, 1, 2, 0, 4, 3, 1, 2, 0, 4, 1] 0
304 [2, 0, 5, 4, 3, 1, 2, 0, 4, 3, 1, 2, 0, 4] 0
305 [2, 0, 5, 4, 3, 1, 2, 0, 4, 3, 1, 2, 0, 1] 0
306 [2, 0, 5, 4, 3, 1, 2, 0, 4, 3, 1, 2, 0] 0
307 [2, 0, 5, 4, 3, 1, 2, 0, 4, 3, 1, 2, 4, 3] 0
308 [2, 0, 5, 4, 3, 1, 2, 0, 4, 3, 1, 2, 4] 0
309 [2, 0, 5, 4, 3, 1, 2, 0, 4, 3, 1, 2] 0
310 [2, 0, 5, 4, 3, 1, 2, 0, 4, 3, 1, 0, 4] 0
311 [2, 0, 5, 4, 3, 1, 2, 0, 4, 3, 1, 0] 0
312 [2, 0, 5, 4, 3, 1, 2, 0, 4, 3, 1, 4] 0
313 [2, 0, 5, 4, 3, 1, 2, 0, 4, 3, 1] 0
314 [2, 0, 5, 4, 3, 1, 2, 0, 4, 3, 4] 0
315 [2, 0, 5, 4, 3, 1, 2, 0, 4, 3] 0
316 [2, 0, 5, 4, 3, 1, 2, 0, 4, 1, 0] 0
317 [2, 0, 5, 4, 3, 1, 2, 0, 4, 1] 0
318 [2, 0, 5, 4, 3, 1, 2, 0, 4] 0
319 [2, 0, 5, 4, 3, 1, 2, 0, 3, 1, 2, 0] 0
320 [2, 0, 5, 4, 3, 1, 2, 0, 3, 1, 2] 0
321 [2, 0, 5, 4, 3, 1, 2, 0, 3, 1, 0] 0
322 [2, 0, 5, 4, 3, 1, 2, 0, 3, 1] 0
323 [2, 0, 5, 4, 3, 1, 2, 0, 3] 0
324 [2, 0, 5, 4, 3, 1, 2, 0, 1, 0] 0
325 [2, 0, 5, 4, 3, 1, 2, 0, 1] 0
326 [2, 0, 5, 4, 3, 1, 2, 0] 0
327 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1] 0
328 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3] 0
329 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 1] 0
330 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4] 0
331 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 1] 0
332 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5] 0
333 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 1] 0
334 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2] 0
335 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 5, 4] 0
336 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 5] 0
337 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1] 0
338 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 2, 5, 4] 0
339 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 2, 5] 0
340 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 2] 0
341 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 5, 4] 0
342 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 5] 0
343 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3] 0
344 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 1, 5] 0
345 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 1] 0
346 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 5] 0
347 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4] 0
348 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 1] 0
349 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5] 0
350 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 1] 0
351 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2] 0
352 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 5, 4, 3, 5] 0
353 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 5, 4, 3] 0
354 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 5, 4, 5] 0
355 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 5, 4] 0
356 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 5] 0
357 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1] 0
358 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 2, 5, 4, 3, 2, 5, 4] 0
359 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 2, 5, 4, 3, 2, 5] 0
360 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 2, 5, 4, 3, 2] 0
361 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
362 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 2, 5, 4, 3, 5] 0
363 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 2, 5, 4, 3] 0
364 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 2, 5, 4, 5] 0
365 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 2, 5, 4] 0
366 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 2, 5] 0
367 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 2] 0
368 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 5, 4, 3, 5] 0
369 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 5, 4, 3] 0
370 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 5, 4, 5] 0
371 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 5, 4] 0
372 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 5] 0
373 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3] 0
374 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 1, 5, 4] 0
375 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 1, 5] 0
376 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 1] 0
377 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 5, 4] 0
378 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 5] 0
379 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4] 0
380 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 1] 0
381 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5] 0
382 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 4, 1] 0
383 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 4] 0
384 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 1] 0
385 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2] 0
386 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 5, 4, 3, 5, 4, 3] 0
387 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 5, 4, 3, 5, 4] 0
388 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 5, 4, 3, 5] 0
389 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 5, 4, 3] 0
390 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 5, 4, 5, 4] 0
391 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 5, 4, 5] 0
392 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 5, 4] 0
393 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 5] 0
394 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 4] 0
395 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1] 0
396 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 2, 5, 4, 3, 2, 5, 4, 3, 2] 0
397 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 2, 5, 4, 3, 2, 5, 4, 3] 0
398 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 2, 5, 4, 3, 2, 5, 4] 0
399 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 2, 5, 4, 3, 2, 5] 0
400 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 2, 5, 4, 3, 2] 0
401 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 2, 5, 4, 3, 5, 4, 3] 0
402 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
403 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 2, 5, 4, 3, 5] 0
404 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 2, 5, 4, 3] 0
405 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 2, 5, 4, 5, 4] 0
406 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 2, 5, 4, 5] 0
407 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 2, 5, 4] 0
408 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 2, 5] 0
409 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 2, 4] 0
410 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 2] 0
411 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 5, 4, 3, 5, 4, 3] 0
412 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 5, 4, 3, 5, 4] 0
413 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 5, 4, 3, 5] 0
414 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 5, 4, 3] 0
415 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 5, 4, 5, 4] 0
416 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 5, 4, 5] 0
417 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 5, 4] 0
418 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 5] 0
419 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 4] 0
420 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3] 0
421 [2, 0, 5, 4, 3, 1, 2, 5, 4, 1, 5, 4] 0
422 [2, 0, 5, 4, 3, 1, 2, 5, 4, 1, 5] 0
423 [2, 0, 5, 4, 3, 1, 2, 5, 4, 1] 0
424 [2, 0, 5, 4, 3, 1, 2, 5, 4, 5, 4] 0
425 [2, 0, 5, 4, 3, 1, 2, 5, 4, 5] 0
426 [2, 0, 5, 4, 3, 1, 2, 5, 4] 0
427 [2, 0, 5, 4, 3, 1, 2, 5, 3, 1] 0
428 [2, 0, 5, 4, 3, 1, 2, 5, 3] 0
429 [2, 0, 5, 4, 3, 1, 2, 5, 1] 0
430 [2, 0, 5, 4, 3, 1, 2, 5] 0
431 [2, 0, 5, 4, 3, 1, 2, 4, 3, 1, 2, 4] 0
432 [2, 0, 5, 4, 3, 1, 2, 4, 3, 1, 2] 0
433 [2, 0, 5, 4, 3, 1, 2, 4, 3, 1, 4] 0
434 [2, 0, 5, 4, 3, 1, 2, 4, 3, 1] 0
435 [2, 0, 5, 4, 3, 1, 2, 4, 3, 4] 0
436 [2, 0, 5, 4, 3, 1, 2, 4, 3] 0
437 [2, 0, 5, 4, 3, 1, 2, 4, 1] 0
438 [2, 0, 5, 4, 3, 1, 2, 4] 0
439 [2, 0, 5, 4, 3, 1, 2, 3, 1] 0
440 [2, 0, 5, 4, 3, 1, 2, 3] 0
441 [2, 0, 5, 4, 3, 1, 2, 1] 0
442 [2, 0, 5, 4, 3, 1, 2] 0
443 [2, 0, 5, 4, 3, 1, 0, 5, 4, 3, 5, 4, 3] 0
444 [2, 0, 5, 4, 3, 1, 0, 5, 4, 3, 5, 4] 0
445 [2, 0, 5, 4, 3, 1, 0, 5, 4, 3, 5] 0
446 [2, 0, 5, 4, 3, 1, 0, 5, 4, 3] 0
447 [2, 0, 5, 4, 3, 1, 0, 5, 4, 5, 4] 0
448 [2, 0, 5, 4, 3, 1, 0, 5, 4, 5] 0
449 [2, 0, 5, 4, 3, 1, 0, 5, 4] 0
450 [2, 0, 5, 4, 3, 1, 0, 5] 0
451 [2, 0, 5, 4, 3, 1, 0, 4] 0
452 [2, 0, 5, 4, 3, 1, 0] 0
453 [2, 0, 5, 4, 3, 1, 5, 4, 3, 5, 4, 3] 0
454 [2, 0, 5, 4, 3, 1, 5, 4, 3, 5, 4] 0
455 [2, 0, 5, 4, 3, 1, 5, 4, 3, 5] 0
456 [2, 0, 5, 4, 3, 1, 5, 4, 3] 0
457 [2, 0, 5, 4, 3, 1, 5, 4, 5, 4] 0
458 [2, 0, 5, 4, 3, 1, 5, 4, 5] 0
459 [2, 0, 5, 4, 3, 1, 5, 4] 0
460 [2, 0, 5, 4, 3, 1, 5] 0
461 [2, 0, 5, 4, 3, 1, 4] 0
462 [2, 0, 5, 4, 3, 1] 0
463 [2, 0, 5, 4, 3, 2, 5, 4, 3, 2, 5, 4, 3, 2, 5, 4, 3] 0
464 [2, 0, 5, 4, 3, 2, 5, 4, 3, 2, 5, 4, 3, 2, 5, 4] 0
465 [2, 0, 5, 4, 3, 2, 5, 4, 3, 2, 5, 4, 3, 2, 5] 0
466 [2, 0, 5, 4, 3, 2, 5, 4, 3, 2, 5, 4, 3, 2] 0
467 [2, 0, 5, 4, 3, 2, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
468 [2, 0, 5, 4, 3, 2, 5, 4, 3, 2, 5, 4, 3, 5] 0
469 [2, 0, 5, 4, 3, 2, 5, 4, 3, 2, 5, 4, 3] 0
470 [2, 0, 5, 4, 3, 2, 5, 4, 3, 2, 5, 4, 5] 0
471 [2, 0, 5, 4, 3, 2, 5, 4, 3, 2, 5, 4] 0
472 [2, 0, 5, 4, 3, 2, 5, 4, 3, 2, 5] 0
473 [2, 0, 5, 4, 3, 2, 5, 4, 3, 2] 0
474 [2, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4, 3, 5, 4] 0
475 [2, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4, 3, 5] 0
476 [2, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4, 3] 0
477 [2, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
478 [2, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
479 [2, 0, 5, 4, 3, 2, 5, 4, 3, 5] 0
480 [2, 0, 5, 4, 3, 2, 5, 4, 3] 0
481 [2, 0, 5, 4, 3, 2, 5, 4, 5, 4] 0
482 [2, 0, 5, 4, 3, 2, 5, 4, 5] 0
483 [2, 0, 5, 4, 3, 2, 5, 4] 0
484 [2, 0, 5, 4, 3, 2, 5] 0
485 [2, 0, 5, 4, 3, 2, 4, 3] 0
486 [2, 0, 5, 4, 3, 2, 4] 0
487 [2, 0, 5, 4, 3, 2] 0
488 [2, 0, 5, 4, 3, 5, 4, 3, 5, 4, 3] 0
489 [2, 0, 5, 4, 3, 5, 4, 3, 5, 4] 0
490 [2, 0, 5, 4, 3, 5, 4, 3, 5] 0
491 [2, 0, 5, 4, 3, 5, 4, 3] 0
492 [2, 0, 5, 4, 3, 5, 4, 5, 4] 0
493 [2, 0, 5, 4, 3, 5, 4, 5] 0
494 [2, 0, 5, 4, 3, 5, 4] 0
495 [2, 0, 5, 4, 3, 5] 0
496 [2, 0, 5, 4, 3, 4] 0
497 [2, 0, 5, 4, 3] 0
498 [2, 0, 5, 4, 1, 2, 0, 5, 4, 1] 0
499 [2, 0, 5, 4, 1, 2, 0, 5, 4] 0
500 [2, 0, 5, 4, 1, 2, 0, 5, 1] 0
501 [2, 0, 5, 4, 1, 2, 0, 5] 0
502 [2, 0, 5, 4, 1, 2, 0, 1] 0
503 [2, 0, 5, 4, 1, 2, 0] 0
504 [2, 0, 5, 4, 1, 2, 5, 4] 0
505 [2, 0, 5, 4, 1, 2, 5] 0
506 [2, 0, 5, 4, 1, 2] 0
507 [2, 0, 5, 4, 1, 0, 5, 4] 0
508 [2, 0, 5, 4, 1, 0, 5] 0
509 [2, 0, 5, 4, 1, 0] 0
510 [2, 0, 5, 4, 1, 5, 4] 0
511 [2, 0, 5, 4, 1, 5] 0
512 [2, 0, 5, 4, 1] 0
513 [2, 0, 5, 4, 5, 4] 0
514 [2, 0, 5, 4, 5] 0
515 [2, 0, 5, 4] 0
516 [2, 0, 5, 3, 1, 2, 0, 3, 1, 2, 0] 0
517 [2, 0, 5, 3, 1, 2, 0, 3, 1, 2] 0
518 [2, 0, 5, 3, 1, 2, 0, 3, 1, 0] 0
519 [2, 0, 5, 3, 1, 2, 0, 3, 1] 0
520 [2, 0, 5, 3, 1, 2, 0, 3] 0
521 [2, 0, 5, 3, 1, 2, 0, 1, 0] 0
522 [2, 0, 5, 3, 1, 2, 0, 1] 0
523 [2, 0, 5, 3, 1, 2, 0] 0
524 [2, 0, 5, 3, 1, 2, 3, 1] 0
525 [2, 0, 5, 3, 1, 2, 3] 0
526 [2, 0, 5, 3, 1, 2, 1] 0
527 [2, 0, 5, 3, 1, 2] 0
528 [2, 0, 5, 3, 1, 0] 0
529 [2, 0, 5, 3, 1] 0
530 [2, 0, 5, 3, 2] 0
531 [2, 0, 5, 3] 0
532 [2, 0, 5, 1, 2, 0, 1] 0
533 [2, 0, 5, 1, 2, 0] 0
534 [2, 0, 5, 1, 2] 0
535 [2, 0, 5, 1, 0] 0
536 [2, 0, 5, 1] 0
537 [2, 0, 5] 0
538 [2, 0, 4, 3, 1, 2, 0, 4, 3, 1, 2, 0, 4, 3, 1] 0
539 [2, 0, 4, 3, 1, 2, 0, 4, 3, 1, 2, 0, 4, 3] 0
540 [2, 0, 4, 3, 1, 2, 0, 4, 3, 1, 2, 0, 4, 1] 0
541 [2, 0, 4, 3, 1, 2, 0, 4, 3, 1, 2, 0, 4] 0
542 [2, 0, 4, 3, 1, 2, 0, 4, 3, 1, 2, 0, 1] 0
543 [2, 0, 4, 3, 1, 2, 0, 4, 3, 1, 2, 0] 0
544 [2, 0, 4, 3, 1, 2, 0, 4, 3, 1, 2, 4, 3] 0
545 [2, 0, 4, 3, 1, 2, 0, 4, 3, 1, 2, 4] 0
546 [2, 0, 4, 3, 1, 2, 0, 4, 3, 1, 2] 0
547 [2, 0, 4, 3, 1, 2, 0, 4, 3, 1, 0, 4] 0
548 [2, 0, 4, 3, 1, 2, 0, 4, 3, 1, 0] 0
549 [2, 0, 4, 3, 1, 2, 0, 4, 3, 1, 4] 0
550 [2, 0, 4, 3, 1, 2, 0, 4, 3, 1] 0
551 [2, 0, 4, 3, 1, 2, 0, 4, 3, 4] 0
552 [2, 0, 4, 3, 1, 2, 0, 4, 3] 0
553 [2, 0, 4, 3, 1, 2, 0, 4, 1, 0] 0
554 [2, 0, 4, 3, 1, 2, 0, 4, 1] 0
555 [2, 0, 4, 3, 1, 2, 0, 4] 0
556 [2, 0, 4, 3, 1, 2, 0, 3, 1, 2, 0] 0
557 [2, 0, 4, 3, 1, 2, 0, 3, 1, 2] 0
558 [2, 0, 4, 3, 1, 2, 0, 3, 1, 0] 0
559 [2, 0, 4, 3, 1, 2, 0, 3, 1] 0
560 [2, 0, 4, 3, 1, 2, 0, 3] 0
561 [2, 0, 4, 3, 1, 2, 0, 1, 0] 0
562 [2, 0, 4, 3, 1, 2, 0, 1] 0
563 [2, 0, 4, 3, 1, 2, 0] 0
564 [2, 0, 4, 3, 1, 2, 4, 3, 1, 2, 4] 0
565 [2, 0, 4, 3, 1, 2, 4, 3, 1, 2] 0
566 [2, 0, 4, 3, 1, 2, 4, 3, 1, 4] 0
567 [2, 0, 4, 3, 1, 2, 4, 3, 1] 0
568 [2, 0, 4, 3, 1, 2, 4, 3, 4] 0
569 [2, 0, 4, 3, 1, 2, 4, 3] 0
570 [2, 0, 4, 3, 1, 2, 4, 1] 0
571 [2, 0, 4, 3, 1, 2, 4] 0
572 [2, 0, 4, 3, 1, 2, 3, 1] 0
573 [2, 0, 4, 3, 1, 2, 3] 0
574 [2, 0, 4, 3, 1, 2, 1] 0
575 [2, 0, 4, 3, 1, 2] 0
576 [2, 0, 4, 3, 1, 0, 4] 0
577 [2, 0, 4, 3, 1, 0] 0
578 [2, 0, 4, 3, 1, 4] 0
579 [2, 0, 4, 3, 1] 0
580 [2, 0, 4, 3, 2, 4, 3] 0
581 [2, 0, 4, 3, 2, 4] 0
582 [2, 0, 4, 3, 2] 0
583 [2, 0, 4, 3, 4] 0
584 [2, 0, 4, 3] 0
585 [2, 0, 4, 1, 2, 0, 1] 0
586 [2, 0, 4, 1, 2, 0] 0
587 [2, 0, 4, 1, 2] 0
588 [2, 0, 4, 1, 0] 0
589 [2, 0, 4, 1] 0
590 [2, 0, 4] 0
591 [2, 0, 3, 1, 2, 0, 3, 1, 2, 0] 0
592 [2, 0, 3, 1, 2, 0, 3, 1, 2] 0
593 [2, 0, 3, 1, 2, 0, 3, 1, 0] 0
594 [2, 0, 3, 1, 2, 0, 3, 1] 0
595 [2, 0, 3, 1, 2, 0, 3] 0
596 [2, 0, 3, 1, 2, 0, 1, 0] 0
597 [2, 0, 3, 1, 2, 0, 1] 0
598 [2, 0, 3, 1, 2, 0] 0
599 [2, 0, 3, 1, 2, 3, 1] 0
600 [2, 0, 3, 1, 2, 3] 0
601 [2, 0, 3, 1, 2, 1] 0
602 [2, 0, 3, 1, 2] 0
603 [2, 0, 3, 1, 0] 0
604 [2, 0, 3, 1] 0
605 [2, 0, 3, 2] 0
606 [2, 0, 3] 0
607 [2, 0, 1, 2, 0, 1] 0
608 [2, 0, 1, 2, 0] 0
609 [2, 0, 1, 2] 0
610 [2, 0, 1, 0] 0
611 [2, 0, 1] 0
612 [2, 0] 0
613 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1] 0
614 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3] 0
615 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 1] 0
616 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4] 0
617 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 1] 0
618 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5] 0
619 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 1] 0
620 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2] 0
621 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 5, 4] 0
622 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 5] 0
623 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1] 0
624 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 2, 5, 4] 0
625 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 2, 5] 0
626 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 2] 0
627 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 5, 4] 0
628 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 5] 0
629 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3] 0
630 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 1, 5] 0
631 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 1] 0
632 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 5] 0
633 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4] 0
634 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 1] 0
635 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5] 0
636 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 1] 0
637 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2] 0
638 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 5, 4, 3, 5] 0
639 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 5, 4, 3] 0
640 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 5, 4, 5] 0
641 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 5, 4] 0
642 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 5] 0
643 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 1] 0
644 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 2, 5, 4, 3, 2, 5, 4] 0
645 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 2, 5, 4, 3, 2, 5] 0
646 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 2, 5, 4, 3, 2] 0
647 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
648 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 2, 5, 4, 3, 5] 0
649 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 2, 5, 4, 3] 0
650 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 2, 5, 4, 5] 0
651 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 2, 5, 4] 0
652 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 2, 5] 0
653 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 2] 0
654 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 5, 4, 3, 5] 0
655 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 5, 4, 3] 0
656 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 5, 4, 5] 0
657 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 5, 4] 0
658 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 5] 0
659 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3] 0
660 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 1, 5, 4] 0
661 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 1, 5] 0
662 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 1] 0
663 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 5, 4] 0
664 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 5] 0
665 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4] 0
666 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 1] 0
667 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5] 0
668 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 4, 1] 0
669 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 4] 0
670 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 1] 0
671 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2] 0
672 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 5, 4, 3, 5, 4, 3] 0
673 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 5, 4, 3, 5, 4] 0
674 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 5, 4, 3, 5] 0
675 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 5, 4, 3] 0
676 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 5, 4, 5, 4] 0
677 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 5, 4, 5] 0
678 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 5, 4] 0
679 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 5] 0
680 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 4] 0
681 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1] 0
682 [2, 5, 4, 3, 1, 2, 5, 4, 3, 2, 5, 4, 3, 2, 5, 4, 3, 2] 0
683 [2, 5, 4, 3, 1, 2, 5, 4, 3, 2, 5, 4, 3, 2, 5, 4, 3] 0
684 [2, 5, 4, 3, 1, 2, 5, 4, 3, 2, 5, 4, 3, 2, 5, 4] 0
685 [2, 5, 4, 3, 1, 2, 5, 4, 3, 2, 5, 4, 3, 2, 5] 0
686 [2, 5, 4, 3, 1, 2, 5, 4, 3, 2, 5, 4, 3, 2] 0
687 [2, 5, 4, 3, 1, 2, 5, 4, 3, 2, 5, 4, 3, 5, 4, 3] 0
688 [2, 5, 4, 3, 1, 2, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
689 [2, 5, 4, 3, 1, 2, 5, 4, 3, 2, 5, 4, 3, 5] 0
690 [2, 5, 4, 3, 1, 2, 5, 4, 3, 2, 5, 4, 3] 0
691 [2, 5, 4, 3, 1, 2, 5, 4, 3, 2, 5, 4, 5, 4] 0
692 [2, 5, 4, 3, 1, 2, 5, 4, 3, 2, 5, 4, 5] 0
693 [2, 5, 4, 3, 1, 2, 5, 4, 3, 2, 5, 4] 0
694 [2, 5, 4, 3, 1, 2, 5, 4, 3, 2, 5] 0
695 [2, 5, 4, 3, 1, 2, 5, 4, 3, 2, 4] 0
696 [2, 5, 4, 3, 1, 2, 5, 4, 3, 2] 0
697 [2, 5, 4, 3, 1, 2, 5, 4, 3, 5, 4, 3, 5, 4, 3] 0
698 [2, 5, 4, 3, 1, 2, 5, 4, 3, 5, 4, 3, 5, 4] 0
699 [2, 5, 4, 3, 1, 2, 5, 4, 3, 5, 4, 3, 5] 0
700 [2, 5, 4, 3, 1, 2, 5, 4, 3, 5, 4, 3] 0
701 [2, 5, 4, 3, 1, 2, 5, 4, 3, 5, 4, 5, 4] 0
702 [2, 5, 4, 3, 1, 2, 5, 4, 3, 5, 4, 5] 0
703 [2, 5, 4, 3, 1, 2, 5, 4, 3, 5, 4] 0
704 [2, 5, 4, 3, 1, 2, 5, 4, 3, 5] 0
705 [2, 5, 4, 3, 1, 2, 5, 4, 3, 4] 0
706 [2, 5, 4, 3, 1, 2, 5, 4, 3] 0
707 [2, 5, 4, 3, 1, 2, 5, 4, 1, 5, 4] 0
708 [2, 5, 4, 3, 1, 2, 5, 4, 1, 5] 0
709 [2, 5, 4, 3, 1, 2, 5, 4, 1] 0
710 [2, 5, 4, 3, 1, 2, 5, 4, 5, 4] 0
711 [2, 5, 4, 3, 1, 2, 5, 4, 5] 0
712 [2, 5, 4, 3, 1, 2, 5, 4] 0
713 [2, 5, 4, 3, 1, 2, 5, 3, 1] 0
714 [2, 5, 4, 3, 1, 2, 5, 3] 0
715 [2, 5, 4, 3, 1, 2, 5, 1] 0
716 [2, 5, 4, 3, 1, 2, 5] 0
717 [2, 5, 4, 3, 1, 2, 4, 3, 1, 2, 4] 0
718 [2, 5, 4, 3, 1, 2, 4, 3, 1, 2] 0
719 [2, 5, 4, 3, 1, 2, 4, 3, 1, 4] 0
720 [2, 5, 4, 3, 1, 2, 4, 3, 1] 0
721 [2, 5, 4, 3, 1, 2, 4, 3, 4] 0
722 [2, 5, 4, 3, 1, 2, 4, 3] 0
723 [2, 5, 4, 3, 1, 2, 4, 1] 0
724 [2, 5, 4, 3, 1, 2, 4] 0
725 [2, 5, 4, 3, 1, 2, 3, 1] 0
726 [2, 5, 4, 3, 1, 2, 3] 0
727 [2, 5, 4, 3, 1, 2, 1] 0
728 [2, 5, 4, 3, 1, 2] 0
729 [2, 5, 4, 3, 1, 5, 4, 3, 5, 4, 3] 0
730 [2, 5, 4, 3, 1, 5, 4, 3, 5, 4] 0
731 [2, 5, 4, 3, 1, 5, 4, 3, 5] 0
732 [2, 5, 4, 3, 1, 5, 4, 3] 0
733 [2, 5, 4, 3, 1, 5, 4, 5, 4] 0
734 [2, 5, 4, 3, 1, 5, 4, 5] 0
735 [2, 5, 4, 3, 1, 5, 4] 0
736 [2, 5, 4, 3, 1, 5] 0
737 [2, 5, 4, 3, 1, 4] 0
738 [2, 5, 4, 3, 1] 0
739 [2, 5, 4, 3, 2, 5, 4, 3, 2, 5, 4, 3, 2, 5, 4, 3] 0
740 [2, 5, 4, 3, 2, 5, 4, 3, 2, 5, 4, 3, 2, 5, 4] 0
741 [2, 5, 4, 3, 2, 5, 4, 3, 2, 5, 4, 3, 2, 5] 0
742 [2, 5, 4, 3, 2, 5, 4, 3, 2, 5, 4, 3, 2] 0
743 [2, 5, 4, 3, 2, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
744 [2, 5, 4, 3, 2, 5, 4, 3, 2, 5, 4, 3, 5] 0
745 [2, 5, 4, 3, 2, 5, 4, 3, 2, 5, 4, 3] 0
746 [2, 5, 4, 3, 2, 5, 4, 3, 2, 5, 4, 5] 0
747 [2, 5, 4, 3, 2, 5, 4, 3, 2, 5, 4] 0
748 [2, 5, 4, 3, 2, 5, 4, 3, 2, 5] 0
749 [2, 5, 4, 3, 2, 5, 4, 3, 2] 0
750 [2, 5, 4, 3, 2, 5, 4, 3, 5, 4, 3, 5, 4] 0
751 [2, 5, 4, 3, 2, 5, 4, 3, 5, 4, 3, 5] 0
752 [2, 5, 4, 3, 2, 5, 4, 3, 5, 4, 3] 0
753 [2, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
754 [2, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
755 [2, 5, 4, 3, 2, 5, 4, 3, 5] 0
756 [2, 5, 4, 3, 2, 5, 4, 3] 0
757 [2, 5, 4, 3, 2, 5, 4, 5, 4] 0
758 [2, 5, 4, 3, 2, 5, 4, 5] 0
759 [2, 5, 4, 3, 2, 5, 4] 0
760 [2, 5, 4, 3, 2, 5] 0
761 [2, 5, 4, 3, 2, 4, 3] 0
762 [2, 5, 4, 3, 2, 4] 0
763 [2, 5, 4, 3, 2] 0
764 [2, 5, 4, 3, 5, 4, 3, 5, 4, 3] 0
765 [2, 5, 4, 3, 5, 4, 3, 5, 4] 0
766 [2, 5, 4, 3, 5, 4, 3, 5] 0
767 [2, 5, 4, 3, 5, 4, 3] 0
768 [2, 5, 4, 3, 5, 4, 5, 4] 0
769 [2, 5, 4, 3, 5, 4, 5] 0
770 [2, 5, 4, 3, 5, 4] 0
771 [2, 5, 4, 3, 5] 0
772 [2, 5, 4, 3, 4] 0
773 [2, 5, 4, 3] 0
774 [2, 5, 4, 1, 2, 5, 4] 0
775 [2, 5, 4, 1, 2, 5] 0
776 [2, 5, 4, 1, 2] 0
777 [2, 5, 4, 1, 5, 4] 0
778 [2, 5, 4, 1, 5] 0
779 [2, 5, 4, 1] 0
780 [2, 5, 4, 5, 4] 0
781 [2, 5, 4, 5] 0
782 [2, 5, 4] 0
783 [2, 5, 3, 1, 2, 3, 1] 0
784 [2, 5, 3, 1, 2, 3] 0
785 [2, 5, 3, 1, 2, 1] 0
786 [2, 5, 3, 1, 2] 0
787 [2, 5, 3, 1] 0
788 [2, 5, 3, 2] 0
789 [2, 5, 3] 0
790 [2, 5, 1, 2] 0
791 [2, 5, 1] 0
792 [2, 5] 0
793 [2, 4, 3, 1, 2, 4, 3, 1, 2, 4] 0
794 [2, 4, 3, 1, 2, 4, 3, 1, 2] 0
795 [2, 4, 3, 1, 2, 4, 3, 1, 4] 0
796 [2, 4, 3, 1, 2, 4, 3, 1] 0
797 [2, 4, 3, 1, 2, 4, 3, 4] 0
798 [2, 4, 3, 1, 2, 4, 3] 0
799 [2, 4, 3, 1, 2, 4, 1] 0
800 [2, 4, 3, 1, 2, 4] 0
801 [2, 4, 3, 1, 2, 3, 1] 0
802 [2, 4, 3, 1, 2, 3] 0
803 [2, 4, 3, 1, 2, 1] 0
804 [2, 4, 3, 1, 2] 0
805 [2, 4, 3, 1, 4] 0
806 [2, 4, 3, 1] 0
807 [2, 4, 3, 2, 4, 3] 0
808 [2, 4, 3, 2, 4] 0
809 [2, 4, 3, 2] 0
810 [2, 4, 3, 4] 0
811 [2, 4, 3] 0
812 [2, 4, 1, 2] 0
813 [2, 4, 1] 0
814 [2, 4] 0
815 [2, 3, 1, 2, 3, 1] 0
816 [2, 3, 1, 2, 3] 0
817 [2, 3, 1, 2, 1] 0
818 [2, 3, 1, 2] 0
819 [2, 3, 1] 0
820 [2, 3, 2] 0
821 [2, 3] 0
822 [2, 1, 2] 0
823 [2, 1] 0
824 [2] 0
825 [0, 5, 4, 3, 1, 0, 5, 4, 3, 5, 4, 3] 0
826 [0, 5, 4, 3, 1, 0, 5, 4, 3, 5, 4] 0
827 [0, 5, 4, 3, 1, 0, 5, 4, 3, 5] 0
828 [0, 5, 4, 3, 1, 0, 5, 4, 3] 0
829 [0, 5, 4, 3, 1, 0, 5, 4, 5, 4] 0
830 [0, 5, 4, 3, 1, 0, 5, 4, 5] 0
831 [0, 5, 4, 3, 1, 0, 5, 4] 0
832 [0, 5, 4, 3, 1, 0, 5] 0
833 [0, 5, 4, 3, 1, 0, 4] 0
834 [0, 5, 4, 3, 1, 0] 0
835 [0, 5, 4, 3, 1, 5, 4, 3, 5, 4, 3] 0
836 [0, 5, 4, 3, 1, 5, 4, 3, 5, 4] 0
837 [0, 5, 4, 3, 1, 5, 4, 3, 5] 0
838 [0, 5, 4, 3, 1, 5, 4, 3] 0
839 [0, 5, 4, 3, 1, 5, 4, 5, 4] 0
840 [0, 5, 4, 3, 1, 5, 4, 5] 0
841 [0, 5, 4, 3, 1, 5, 4] 0
842 [0, 5, 4, 3, 1, 5] 0
843 [0, 5, 4, 3, 1, 4] 0
844 [0, 5, 4, 3, 1] 0
845 [0, 5, 4, 3, 5, 4, 3, 5, 4, 3] 0
846 [0, 5, 4, 3, 5, 4, 3, 5, 4] 0
847 [0, 5, 4, 3, 5, 4, 3, 5] 0
848 [0, 5, 4, 3, 5, 4, 3] 0
849 [0, 5, 4, 3, 5, 4, 5, 4] 0
850 [0, 5, 4, 3, 5, 4, 5] 0
851 [0, 5, 4, 3, 5, 4] 0
852 [0, 5, 4, 3, 5] 0
853 [0, 5, 4, 3, 4] 0
854 [0, 5, 4, 3] 0
855 [0, 5, 4, 1, 0, 5, 4] 0
856 [0, 5, 4, 1, 0, 5] 0
857 [0, 5, 4, 1, 0] 0
858 [0, 5, 4, 1, 5, 4] 0
859 [0, 5, 4, 1, 5] 0
860 [0, 5, 4, 1] 0
861 [0, 5, 4, 5, 4] 0
862 [0, 5, 4, 5] 0
863 [0, 5, 4] 0
864 [0, 5, 3, 1, 0] 0
865 [0, 5, 3, 1] 0
866 [0, 5, 3] 0
867 [0, 5, 1, 0] 0
868 [0, 5, 1] 0
869 [0, 5] 0
870 [0, 4, 3, 1, 0, 4] 0
871 [0, 4, 3, 1, 0] 0
872 [0, 4, 3, 1, 4] 0
873 [0, 4, 3, 1] 0
874 [0, 4, 3, 4] 0
875 [0, 4, 3] 0
876 [0, 4, 1, 0] 0
877 [0, 4, 1] 0
878 [0, 4] 0
879 [0, 3, 1, 0] 0
880 [0, 3, 1] 0
881 [0, 3] 0
882 [0, 1, 0] 0
883 [0, 1] 0
884 [0] 0
885 [5, 4, 3, 1, 5, 4, 3, 5, 4, 3] 0
886 [5, 4, 3, 1, 5, 4, 3, 5, 4] 0
887 [5, 4, 3, 1, 5, 4, 3, 5] 0
888 [5, 4, 3, 1, 5, 4, 3] 0
889 [5, 4, 3, 1, 5, 4, 5, 4] 0
890 [5, 4, 3, 1, 5, 4, 5] 0
891 [5, 4, 3, 1, 5, 4] 0
892 [5, 4, 3, 1, 5] 0
893 [5, 4, 3, 1, 4] 0
894 [5, 4, 3, 1] 0
895 [5, 4, 3, 5, 4, 3, 5, 4, 3] 0
896 [5, 4, 3, 5, 4, 3, 5, 4] 0
897 [5, 4, 3, 5, 4, 3, 5] 0
898 [5, 4, 3, 5, 4, 3] 0
899 [5, 4, 3, 5, 4, 5, 4] 0
900 [5, 4, 3, 5, 4, 5] 0
901 [5, 4, 3, 5, 4] 0
902 [5, 4, 3, 5] 0
903 [5, 4, 3, 4] 0
904 [5, 4, 3] 0
905 [5, 4, 1, 5, 4] 0
906 [5, 4, 1, 5] 0
907 [5, 4, 1] 0
908 [5, 4, 5, 4] 0
909 [5, 4, 5] 0
910 [5, 4] 0
911 [5, 3, 1] 0
912 [5, 3] 0
913 [5, 1] 0
914 [5] 0
915 [4, 3, 1, 4] 0
916 [4, 3, 1] 0
917 [4, 3, 4] 0
918 [4, 3] 0
919 [4, 1] 0
920 [4] 0
921 [3, 1] 0
922 [3] 0
923 [1] 0
924 [] 0
sage: A=CartanMatrix(['A',7])
....: c=[2,6,0,5,4,3,1]
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),Kprefix(c,6))
....:     print(n,v,P.dimension())
....:     n+=1
....:     if P.dimension()!=0:
....:         print('FAILURE')
....:         break
....: 
1 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 3, 6, 5] 0
2 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 3, 6] 0
3 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 3] 0
4 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 6, 5] 0
5 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 6] 0
6 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4] 0
7 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 6] 0
8 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 5] 0
9 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6] 0
10 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 5, 4] 0
11 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 5] 0
12 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2] 0
13 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 6, 5, 4, 6, 5] 0
14 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 6, 5, 4, 6] 0
15 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 6, 5, 4] 0
16 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 6, 5, 6] 0
17 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 6, 5] 0
18 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 6] 0
19 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 5, 4] 0
20 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 5] 0
21 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1] 0
22 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 6, 5, 4, 6, 5] 0
23 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 6, 5, 4, 6] 0
24 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 6, 5, 4] 0
25 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 6, 5, 6] 0
26 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 6, 5] 0
27 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 6] 0
28 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 5, 4] 0
29 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 5] 0
30 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3] 0
31 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 1, 6, 5, 6] 0
32 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 1, 6, 5] 0
33 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 1, 6] 0
34 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 1, 5] 0
35 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 1] 0
36 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 6, 5, 6] 0
37 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 6, 5] 0
38 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 6] 0
39 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 5] 0
40 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4] 0
41 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 1, 6] 0
42 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 1] 0
43 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 6] 0
44 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5] 0
45 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 4, 3, 1] 0
46 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 4, 3] 0
47 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 4, 1] 0
48 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 4] 0
49 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 1] 0
50 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 0] 0
51 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
52 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 3, 6, 5, 4, 6] 0
53 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 3, 6, 5, 4] 0
54 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 3, 6, 5, 6] 0
55 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 3, 6, 5] 0
56 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 3, 6] 0
57 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 3, 5, 4] 0
58 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 3, 5] 0
59 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 3] 0
60 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 6, 5, 6] 0
61 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 6, 5] 0
62 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 6] 0
63 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 5] 0
64 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4] 0
65 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 6] 0
66 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 5] 0
67 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 4, 3] 0
68 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 4] 0
69 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6] 0
70 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4] 0
71 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5] 0
72 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2] 0
73 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 5, 4] 0
74 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 5] 0
75 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1] 0
76 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 5, 4] 0
77 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 5] 0
78 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3] 0
79 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 4, 1, 5] 0
80 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 4, 1] 0
81 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 4, 5] 0
82 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 4] 0
83 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 1] 0
84 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 0, 5] 0
85 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 0, 4, 3, 1] 0
86 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 0, 4, 3] 0
87 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 0, 4, 1] 0
88 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 0, 4] 0
89 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 0, 1] 0
90 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 0] 0
91 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 5, 4, 3, 5, 4] 0
92 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 5, 4, 3, 5] 0
93 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 5, 4, 3] 0
94 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 5, 4, 5] 0
95 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 5, 4] 0
96 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 5] 0
97 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 4, 3] 0
98 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 4] 0
99 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2] 0
100 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 6, 0, 5, 4, 6, 5, 6] 0
101 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 6, 0, 5, 4, 6, 5] 0
102 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 6, 0, 5, 4, 6] 0
103 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 6, 0, 5, 4, 5] 0
104 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 6, 0, 5, 4] 0
105 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 6, 0, 5, 6] 0
106 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 6, 0, 5] 0
107 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 6, 0, 4] 0
108 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 6, 0] 0
109 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 6, 5, 4, 6, 5, 6] 0
110 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 6, 5, 4, 6, 5] 0
111 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 6, 5, 4, 6] 0
112 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 6, 5, 4, 5] 0
113 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 6, 5, 4] 0
114 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 6, 5, 6] 0
115 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 6, 5] 0
116 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 6, 4] 0
117 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 6] 0
118 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 0, 5, 4, 5] 0
119 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 0, 5, 4] 0
120 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 0, 5] 0
121 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 0, 4] 0
122 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 0] 0
123 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 5, 4, 5] 0
124 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 5, 4] 0
125 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 5] 0
126 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 4] 0
127 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1] 0
128 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
129 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 6, 5, 4, 6, 5] 0
130 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 6, 5, 4, 6] 0
131 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 6, 5, 4, 5] 0
132 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 6, 5, 4] 0
133 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 6, 5, 6] 0
134 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 6, 5] 0
135 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 6, 4] 0
136 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 6] 0
137 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 5, 4, 5] 0
138 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 5, 4] 0
139 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 5] 0
140 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 4] 0
141 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3] 0
142 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 1, 6, 0, 5, 6] 0
143 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 1, 6, 0, 5] 0
144 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 1, 6, 0] 0
145 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 1, 6, 5, 6] 0
146 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 1, 6, 5] 0
147 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 1, 6] 0
148 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 1, 0, 5] 0
149 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 1, 0] 0
150 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 1, 5] 0
151 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 1] 0
152 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 6, 5, 6] 0
153 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 6, 5] 0
154 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 6] 0
155 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 5] 0
156 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4] 0
157 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 3, 1, 2, 6, 0] 0
158 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 3, 1, 2, 6] 0
159 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 3, 1, 2, 0] 0
160 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 3, 1, 2] 0
161 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 3, 1, 6, 0] 0
162 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 3, 1, 6] 0
163 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 3, 1, 0] 0
164 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 3, 1] 0
165 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 3, 6] 0
166 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 3] 0
167 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 1, 6, 0] 0
168 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 1, 6] 0
169 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 1, 0] 0
170 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 1] 0
171 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 6] 0
172 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5] 0
173 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 4, 3, 1, 2, 0, 4, 3, 1] 0
174 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 4, 3, 1, 2, 0, 4, 3] 0
175 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 4, 3, 1, 2, 0, 4, 1] 0
176 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 4, 3, 1, 2, 0, 4] 0
177 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 4, 3, 1, 2, 0, 1] 0
178 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 4, 3, 1, 2, 0] 0
179 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 4, 3, 1, 2, 4, 3] 0
180 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 4, 3, 1, 2, 4] 0
181 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 4, 3, 1, 2] 0
182 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 4, 3, 1, 0, 4] 0
183 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 4, 3, 1, 0] 0
184 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 4, 3, 1, 4] 0
185 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 4, 3, 1] 0
186 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 4, 3, 4] 0
187 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 4, 3] 0
188 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 4, 1, 0] 0
189 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 4, 1] 0
190 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 4] 0
191 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 3, 1, 2, 0] 0
192 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 3, 1, 2] 0
193 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 3, 1, 0] 0
194 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 3, 1] 0
195 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 3] 0
196 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 1, 0] 0
197 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 1] 0
198 [2, 6, 0, 5, 4, 3, 1, 2, 6, 0] 0
199 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3, 6, 5, 4, 6] 0
200 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3, 6, 5, 4] 0
201 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3, 6, 5, 6] 0
202 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3, 6, 5] 0
203 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3, 6] 0
204 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3, 5] 0
205 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3] 0
206 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 6, 5, 6] 0
207 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 6, 5] 0
208 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 6] 0
209 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 5] 0
210 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 2, 6, 5, 4] 0
211 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 2, 6, 5, 6] 0
212 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 2, 6, 5] 0
213 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 2, 6, 4] 0
214 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 2, 6] 0
215 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 2, 5, 4, 3, 5] 0
216 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 2, 5, 4, 3] 0
217 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 2, 5, 4, 5] 0
218 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 2, 5, 4] 0
219 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 2, 5] 0
220 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 2, 4] 0
221 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 2] 0
222 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 6, 5, 4, 6, 5, 6] 0
223 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 6, 5, 4, 6, 5] 0
224 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 6, 5, 4, 6] 0
225 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 6, 5, 4, 5] 0
226 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 6, 5, 4] 0
227 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 6, 5, 6] 0
228 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 6, 5] 0
229 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 6, 4] 0
230 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 6] 0
231 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 5, 4, 5] 0
232 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 5, 4] 0
233 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 5] 0
234 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 4] 0
235 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1] 0
236 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
237 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
238 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 3, 6, 5, 4, 6] 0
239 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 3, 6, 5, 4, 5] 0
240 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 3, 6, 5, 4] 0
241 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 3, 6, 5, 6] 0
242 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 3, 6, 5] 0
243 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 3, 6, 4] 0
244 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 3, 6] 0
245 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 3, 5, 4, 5] 0
246 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 3, 5, 4] 0
247 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 3, 5] 0
248 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 3, 4] 0
249 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 3] 0
250 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 1, 6, 5, 6] 0
251 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 1, 6, 5] 0
252 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 1, 6] 0
253 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 1, 5] 0
254 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 1] 0
255 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 6, 5, 6] 0
256 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 6, 5] 0
257 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 6] 0
258 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 5] 0
259 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4] 0
260 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 3, 1, 6] 0
261 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 3, 1] 0
262 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 3, 6] 0
263 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 3] 0
264 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 1, 6] 0
265 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 1] 0
266 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 6] 0
267 [2, 6, 0, 5, 4, 3, 1, 2, 6, 5] 0
268 [2, 6, 0, 5, 4, 3, 1, 2, 6, 4, 3, 1, 2, 4] 0
269 [2, 6, 0, 5, 4, 3, 1, 2, 6, 4, 3, 1, 2] 0
270 [2, 6, 0, 5, 4, 3, 1, 2, 6, 4, 3, 1, 4] 0
271 [2, 6, 0, 5, 4, 3, 1, 2, 6, 4, 3, 1] 0
272 [2, 6, 0, 5, 4, 3, 1, 2, 6, 4, 3, 4] 0
273 [2, 6, 0, 5, 4, 3, 1, 2, 6, 4, 3] 0
274 [2, 6, 0, 5, 4, 3, 1, 2, 6, 4, 1] 0
275 [2, 6, 0, 5, 4, 3, 1, 2, 6, 4] 0
276 [2, 6, 0, 5, 4, 3, 1, 2, 6, 3, 1] 0
277 [2, 6, 0, 5, 4, 3, 1, 2, 6, 3] 0
278 [2, 6, 0, 5, 4, 3, 1, 2, 6, 1] 0
279 [2, 6, 0, 5, 4, 3, 1, 2, 6] 0
280 [2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4] 0
281 [2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5] 0
282 [2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2] 0
283 [2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 5, 4] 0
284 [2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 5] 0
285 [2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1] 0
286 [2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 5, 4] 0
287 [2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 5] 0
288 [2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3] 0
289 [2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 1, 5] 0
290 [2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 1] 0
291 [2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 5] 0
292 [2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4] 0
293 [2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 1] 0
294 [2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5] 0
295 [2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 4, 3, 1] 0
296 [2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 4, 3] 0
297 [2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 4, 1] 0
298 [2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 4] 0
299 [2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 1] 0
300 [2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0] 0
301 [2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 5, 4] 0
302 [2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 5] 0
303 [2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3] 0
304 [2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 5] 0
305 [2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4] 0
306 [2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5] 0
307 [2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 4, 3] 0
308 [2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 4] 0
309 [2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2] 0
310 [2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 0, 5, 4, 5] 0
311 [2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 0, 5, 4] 0
312 [2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 0, 5] 0
313 [2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 0, 4] 0
314 [2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 0] 0
315 [2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 5, 4, 5] 0
316 [2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 5, 4] 0
317 [2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 5] 0
318 [2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 4] 0
319 [2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1] 0
320 [2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 5, 4, 5] 0
321 [2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 5, 4] 0
322 [2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 5] 0
323 [2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 4] 0
324 [2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3] 0
325 [2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 4, 1, 0, 5] 0
326 [2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 4, 1, 0] 0
327 [2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 4, 1, 5] 0
328 [2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 4, 1] 0
329 [2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 4, 5] 0
330 [2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 4] 0
331 [2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 3, 1, 2, 0] 0
332 [2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 3, 1, 2] 0
333 [2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 3, 1, 0] 0
334 [2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 3, 1] 0
335 [2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 3] 0
336 [2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 1, 0] 0
337 [2, 6, 0, 5, 4, 3, 1, 2, 0, 5, 1] 0
338 [2, 6, 0, 5, 4, 3, 1, 2, 0, 5] 0
339 [2, 6, 0, 5, 4, 3, 1, 2, 0, 4, 3, 1, 2, 0, 4, 3, 1] 0
340 [2, 6, 0, 5, 4, 3, 1, 2, 0, 4, 3, 1, 2, 0, 4, 3] 0
341 [2, 6, 0, 5, 4, 3, 1, 2, 0, 4, 3, 1, 2, 0, 4, 1] 0
342 [2, 6, 0, 5, 4, 3, 1, 2, 0, 4, 3, 1, 2, 0, 4] 0
343 [2, 6, 0, 5, 4, 3, 1, 2, 0, 4, 3, 1, 2, 0, 1] 0
344 [2, 6, 0, 5, 4, 3, 1, 2, 0, 4, 3, 1, 2, 0] 0
345 [2, 6, 0, 5, 4, 3, 1, 2, 0, 4, 3, 1, 2, 4, 3] 0
346 [2, 6, 0, 5, 4, 3, 1, 2, 0, 4, 3, 1, 2, 4] 0
347 [2, 6, 0, 5, 4, 3, 1, 2, 0, 4, 3, 1, 2] 0
348 [2, 6, 0, 5, 4, 3, 1, 2, 0, 4, 3, 1, 0, 4] 0
349 [2, 6, 0, 5, 4, 3, 1, 2, 0, 4, 3, 1, 0] 0
350 [2, 6, 0, 5, 4, 3, 1, 2, 0, 4, 3, 1, 4] 0
351 [2, 6, 0, 5, 4, 3, 1, 2, 0, 4, 3, 1] 0
352 [2, 6, 0, 5, 4, 3, 1, 2, 0, 4, 3, 4] 0
353 [2, 6, 0, 5, 4, 3, 1, 2, 0, 4, 3] 0
354 [2, 6, 0, 5, 4, 3, 1, 2, 0, 4, 1, 0] 0
355 [2, 6, 0, 5, 4, 3, 1, 2, 0, 4, 1] 0
356 [2, 6, 0, 5, 4, 3, 1, 2, 0, 4] 0
357 [2, 6, 0, 5, 4, 3, 1, 2, 0, 3, 1, 2, 0] 0
358 [2, 6, 0, 5, 4, 3, 1, 2, 0, 3, 1, 2] 0
359 [2, 6, 0, 5, 4, 3, 1, 2, 0, 3, 1, 0] 0
360 [2, 6, 0, 5, 4, 3, 1, 2, 0, 3, 1] 0
361 [2, 6, 0, 5, 4, 3, 1, 2, 0, 3] 0
362 [2, 6, 0, 5, 4, 3, 1, 2, 0, 1, 0] 0
363 [2, 6, 0, 5, 4, 3, 1, 2, 0, 1] 0
364 [2, 6, 0, 5, 4, 3, 1, 2, 0] 0
365 [2, 6, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 5] 0
366 [2, 6, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3] 0
367 [2, 6, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 5] 0
368 [2, 6, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4] 0
369 [2, 6, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5] 0
370 [2, 6, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 4] 0
371 [2, 6, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2] 0
372 [2, 6, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 5, 4, 5] 0
373 [2, 6, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 5, 4] 0
374 [2, 6, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 5] 0
375 [2, 6, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 4] 0
376 [2, 6, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1] 0
377 [2, 6, 0, 5, 4, 3, 1, 2, 5, 4, 3, 5, 4, 5] 0
378 [2, 6, 0, 5, 4, 3, 1, 2, 5, 4, 3, 5, 4] 0
379 [2, 6, 0, 5, 4, 3, 1, 2, 5, 4, 3, 5] 0
380 [2, 6, 0, 5, 4, 3, 1, 2, 5, 4, 3, 4] 0
381 [2, 6, 0, 5, 4, 3, 1, 2, 5, 4, 3] 0
382 [2, 6, 0, 5, 4, 3, 1, 2, 5, 4, 1, 5] 0
383 [2, 6, 0, 5, 4, 3, 1, 2, 5, 4, 1] 0
384 [2, 6, 0, 5, 4, 3, 1, 2, 5, 4, 5] 0
385 [2, 6, 0, 5, 4, 3, 1, 2, 5, 4] 0
386 [2, 6, 0, 5, 4, 3, 1, 2, 5, 3, 1] 0
387 [2, 6, 0, 5, 4, 3, 1, 2, 5, 3] 0
388 [2, 6, 0, 5, 4, 3, 1, 2, 5, 1] 0
389 [2, 6, 0, 5, 4, 3, 1, 2, 5] 0
390 [2, 6, 0, 5, 4, 3, 1, 2, 4, 3, 1, 2, 4] 0
391 [2, 6, 0, 5, 4, 3, 1, 2, 4, 3, 1, 2] 0
392 [2, 6, 0, 5, 4, 3, 1, 2, 4, 3, 1, 4] 0
393 [2, 6, 0, 5, 4, 3, 1, 2, 4, 3, 1] 0
394 [2, 6, 0, 5, 4, 3, 1, 2, 4, 3, 4] 0
395 [2, 6, 0, 5, 4, 3, 1, 2, 4, 3] 0
396 [2, 6, 0, 5, 4, 3, 1, 2, 4, 1] 0
397 [2, 6, 0, 5, 4, 3, 1, 2, 4] 0
398 [2, 6, 0, 5, 4, 3, 1, 2, 3, 1] 0
399 [2, 6, 0, 5, 4, 3, 1, 2, 3] 0
400 [2, 6, 0, 5, 4, 3, 1, 2, 1] 0
401 [2, 6, 0, 5, 4, 3, 1, 2] 0
402 [2, 6, 0, 5, 4, 3, 1, 6, 0, 5, 4, 6, 5, 6] 0
403 [2, 6, 0, 5, 4, 3, 1, 6, 0, 5, 4, 6, 5] 0
404 [2, 6, 0, 5, 4, 3, 1, 6, 0, 5, 4, 6] 0
405 [2, 6, 0, 5, 4, 3, 1, 6, 0, 5, 4, 5] 0
406 [2, 6, 0, 5, 4, 3, 1, 6, 0, 5, 4] 0
407 [2, 6, 0, 5, 4, 3, 1, 6, 0, 5, 6] 0
408 [2, 6, 0, 5, 4, 3, 1, 6, 0, 5] 0
409 [2, 6, 0, 5, 4, 3, 1, 6, 0, 4] 0
410 [2, 6, 0, 5, 4, 3, 1, 6, 0] 0
411 [2, 6, 0, 5, 4, 3, 1, 6, 5, 4, 6, 5, 6] 0
412 [2, 6, 0, 5, 4, 3, 1, 6, 5, 4, 6, 5] 0
413 [2, 6, 0, 5, 4, 3, 1, 6, 5, 4, 6] 0
414 [2, 6, 0, 5, 4, 3, 1, 6, 5, 4, 5] 0
415 [2, 6, 0, 5, 4, 3, 1, 6, 5, 4] 0
416 [2, 6, 0, 5, 4, 3, 1, 6, 5, 6] 0
417 [2, 6, 0, 5, 4, 3, 1, 6, 5] 0
418 [2, 6, 0, 5, 4, 3, 1, 6, 4] 0
419 [2, 6, 0, 5, 4, 3, 1, 6] 0
420 [2, 6, 0, 5, 4, 3, 1, 0, 5, 4, 5] 0
421 [2, 6, 0, 5, 4, 3, 1, 0, 5, 4] 0
422 [2, 6, 0, 5, 4, 3, 1, 0, 5] 0
423 [2, 6, 0, 5, 4, 3, 1, 0, 4] 0
424 [2, 6, 0, 5, 4, 3, 1, 0] 0
425 [2, 6, 0, 5, 4, 3, 1, 5, 4, 5] 0
426 [2, 6, 0, 5, 4, 3, 1, 5, 4] 0
427 [2, 6, 0, 5, 4, 3, 1, 5] 0
428 [2, 6, 0, 5, 4, 3, 1, 4] 0
429 [2, 6, 0, 5, 4, 3, 1] 0
430 [2, 6, 0, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
431 [2, 6, 0, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6] 0
432 [2, 6, 0, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4] 0
433 [2, 6, 0, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 6] 0
434 [2, 6, 0, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5] 0
435 [2, 6, 0, 5, 4, 3, 2, 6, 5, 4, 3, 6] 0
436 [2, 6, 0, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4] 0
437 [2, 6, 0, 5, 4, 3, 2, 6, 5, 4, 3, 5] 0
438 [2, 6, 0, 5, 4, 3, 2, 6, 5, 4, 3] 0
439 [2, 6, 0, 5, 4, 3, 2, 6, 5, 4, 6, 5, 6] 0
440 [2, 6, 0, 5, 4, 3, 2, 6, 5, 4, 6, 5] 0
441 [2, 6, 0, 5, 4, 3, 2, 6, 5, 4, 6] 0
442 [2, 6, 0, 5, 4, 3, 2, 6, 5, 4, 5] 0
443 [2, 6, 0, 5, 4, 3, 2, 6, 5, 4] 0
444 [2, 6, 0, 5, 4, 3, 2, 6, 5, 6] 0
445 [2, 6, 0, 5, 4, 3, 2, 6, 5] 0
446 [2, 6, 0, 5, 4, 3, 2, 6, 4, 3] 0
447 [2, 6, 0, 5, 4, 3, 2, 6, 4] 0
448 [2, 6, 0, 5, 4, 3, 2, 6] 0
449 [2, 6, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
450 [2, 6, 0, 5, 4, 3, 2, 5, 4, 3, 5] 0
451 [2, 6, 0, 5, 4, 3, 2, 5, 4, 3] 0
452 [2, 6, 0, 5, 4, 3, 2, 5, 4, 5] 0
453 [2, 6, 0, 5, 4, 3, 2, 5, 4] 0
454 [2, 6, 0, 5, 4, 3, 2, 5] 0
455 [2, 6, 0, 5, 4, 3, 2, 4, 3] 0
456 [2, 6, 0, 5, 4, 3, 2, 4] 0
457 [2, 6, 0, 5, 4, 3, 2] 0
458 [2, 6, 0, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
459 [2, 6, 0, 5, 4, 3, 6, 5, 4, 6, 5] 0
460 [2, 6, 0, 5, 4, 3, 6, 5, 4, 6] 0
461 [2, 6, 0, 5, 4, 3, 6, 5, 4, 5] 0
462 [2, 6, 0, 5, 4, 3, 6, 5, 4] 0
463 [2, 6, 0, 5, 4, 3, 6, 5, 6] 0
464 [2, 6, 0, 5, 4, 3, 6, 5] 0
465 [2, 6, 0, 5, 4, 3, 6, 4] 0
466 [2, 6, 0, 5, 4, 3, 6] 0
467 [2, 6, 0, 5, 4, 3, 5, 4, 5] 0
468 [2, 6, 0, 5, 4, 3, 5, 4] 0
469 [2, 6, 0, 5, 4, 3, 5] 0
470 [2, 6, 0, 5, 4, 3, 4] 0
471 [2, 6, 0, 5, 4, 3] 0
472 [2, 6, 0, 5, 4, 1, 2, 6, 0, 5, 1, 6] 0
473 [2, 6, 0, 5, 4, 1, 2, 6, 0, 5, 1] 0
474 [2, 6, 0, 5, 4, 1, 2, 6, 0, 5, 6] 0
475 [2, 6, 0, 5, 4, 1, 2, 6, 0, 5] 0
476 [2, 6, 0, 5, 4, 1, 2, 6, 0, 1] 0
477 [2, 6, 0, 5, 4, 1, 2, 6, 0] 0
478 [2, 6, 0, 5, 4, 1, 2, 6, 5, 6] 0
479 [2, 6, 0, 5, 4, 1, 2, 6, 5] 0
480 [2, 6, 0, 5, 4, 1, 2, 6] 0
481 [2, 6, 0, 5, 4, 1, 2, 0, 5, 1] 0
482 [2, 6, 0, 5, 4, 1, 2, 0, 5] 0
483 [2, 6, 0, 5, 4, 1, 2, 0, 1] 0
484 [2, 6, 0, 5, 4, 1, 2, 0] 0
485 [2, 6, 0, 5, 4, 1, 2, 5] 0
486 [2, 6, 0, 5, 4, 1, 2] 0
487 [2, 6, 0, 5, 4, 1, 6, 0, 5, 6] 0
488 [2, 6, 0, 5, 4, 1, 6, 0, 5] 0
489 [2, 6, 0, 5, 4, 1, 6, 0] 0
490 [2, 6, 0, 5, 4, 1, 6, 5, 6] 0
491 [2, 6, 0, 5, 4, 1, 6, 5] 0
492 [2, 6, 0, 5, 4, 1, 6] 0
493 [2, 6, 0, 5, 4, 1, 0, 5] 0
494 [2, 6, 0, 5, 4, 1, 0] 0
495 [2, 6, 0, 5, 4, 1, 5] 0
496 [2, 6, 0, 5, 4, 1] 0
497 [2, 6, 0, 5, 4, 6, 5, 6] 0
498 [2, 6, 0, 5, 4, 6, 5] 0
499 [2, 6, 0, 5, 4, 6] 0
500 [2, 6, 0, 5, 4, 5] 0
501 [2, 6, 0, 5, 4] 0
502 [2, 6, 0, 5, 3, 1, 2, 6, 0, 3, 1, 2, 0] 0
503 [2, 6, 0, 5, 3, 1, 2, 6, 0, 3, 1, 2] 0
504 [2, 6, 0, 5, 3, 1, 2, 6, 0, 3, 1, 0] 0
505 [2, 6, 0, 5, 3, 1, 2, 6, 0, 3, 1] 0
506 [2, 6, 0, 5, 3, 1, 2, 6, 0, 3] 0
507 [2, 6, 0, 5, 3, 1, 2, 6, 0, 1, 0] 0
508 [2, 6, 0, 5, 3, 1, 2, 6, 0, 1] 0
509 [2, 6, 0, 5, 3, 1, 2, 6, 0] 0
510 [2, 6, 0, 5, 3, 1, 2, 6, 3, 1] 0
511 [2, 6, 0, 5, 3, 1, 2, 6, 3] 0
512 [2, 6, 0, 5, 3, 1, 2, 6, 1] 0
513 [2, 6, 0, 5, 3, 1, 2, 6] 0
514 [2, 6, 0, 5, 3, 1, 2, 0, 3, 1, 2, 0] 0
515 [2, 6, 0, 5, 3, 1, 2, 0, 3, 1, 2] 0
516 [2, 6, 0, 5, 3, 1, 2, 0, 3, 1, 0] 0
517 [2, 6, 0, 5, 3, 1, 2, 0, 3, 1] 0
518 [2, 6, 0, 5, 3, 1, 2, 0, 3] 0
519 [2, 6, 0, 5, 3, 1, 2, 0, 1, 0] 0
520 [2, 6, 0, 5, 3, 1, 2, 0, 1] 0
521 [2, 6, 0, 5, 3, 1, 2, 0] 0
522 [2, 6, 0, 5, 3, 1, 2, 3, 1] 0
523 [2, 6, 0, 5, 3, 1, 2, 3] 0
524 [2, 6, 0, 5, 3, 1, 2, 1] 0
525 [2, 6, 0, 5, 3, 1, 2] 0
526 [2, 6, 0, 5, 3, 1, 6, 0] 0
527 [2, 6, 0, 5, 3, 1, 6] 0
528 [2, 6, 0, 5, 3, 1, 0] 0
529 [2, 6, 0, 5, 3, 1] 0
530 [2, 6, 0, 5, 3, 2, 6] 0
531 [2, 6, 0, 5, 3, 2] 0
532 [2, 6, 0, 5, 3, 6] 0
533 [2, 6, 0, 5, 3] 0
534 [2, 6, 0, 5, 1, 2, 6, 0, 1] 0
535 [2, 6, 0, 5, 1, 2, 6, 0] 0
536 [2, 6, 0, 5, 1, 2, 6] 0
537 [2, 6, 0, 5, 1, 2, 0, 1] 0
538 [2, 6, 0, 5, 1, 2, 0] 0
539 [2, 6, 0, 5, 1, 2] 0
540 [2, 6, 0, 5, 1, 6, 0] 0
541 [2, 6, 0, 5, 1, 6] 0
542 [2, 6, 0, 5, 1, 0] 0
543 [2, 6, 0, 5, 1] 0
544 [2, 6, 0, 5, 6] 0
545 [2, 6, 0, 5] 0
546 [2, 6, 0, 4, 3, 1, 2, 0, 4, 3, 1, 2, 0, 4, 3, 1] 0
547 [2, 6, 0, 4, 3, 1, 2, 0, 4, 3, 1, 2, 0, 4, 3] 0
548 [2, 6, 0, 4, 3, 1, 2, 0, 4, 3, 1, 2, 0, 4, 1] 0
549 [2, 6, 0, 4, 3, 1, 2, 0, 4, 3, 1, 2, 0, 4] 0
550 [2, 6, 0, 4, 3, 1, 2, 0, 4, 3, 1, 2, 0, 1] 0
551 [2, 6, 0, 4, 3, 1, 2, 0, 4, 3, 1, 2, 0] 0
552 [2, 6, 0, 4, 3, 1, 2, 0, 4, 3, 1, 2, 4, 3] 0
553 [2, 6, 0, 4, 3, 1, 2, 0, 4, 3, 1, 2, 4] 0
554 [2, 6, 0, 4, 3, 1, 2, 0, 4, 3, 1, 2] 0
555 [2, 6, 0, 4, 3, 1, 2, 0, 4, 3, 1, 0, 4] 0
556 [2, 6, 0, 4, 3, 1, 2, 0, 4, 3, 1, 0] 0
557 [2, 6, 0, 4, 3, 1, 2, 0, 4, 3, 1, 4] 0
558 [2, 6, 0, 4, 3, 1, 2, 0, 4, 3, 1] 0
559 [2, 6, 0, 4, 3, 1, 2, 0, 4, 3, 4] 0
560 [2, 6, 0, 4, 3, 1, 2, 0, 4, 3] 0
561 [2, 6, 0, 4, 3, 1, 2, 0, 4, 1, 0] 0
562 [2, 6, 0, 4, 3, 1, 2, 0, 4, 1] 0
563 [2, 6, 0, 4, 3, 1, 2, 0, 4] 0
564 [2, 6, 0, 4, 3, 1, 2, 0, 3, 1, 2, 0] 0
565 [2, 6, 0, 4, 3, 1, 2, 0, 3, 1, 2] 0
566 [2, 6, 0, 4, 3, 1, 2, 0, 3, 1, 0] 0
567 [2, 6, 0, 4, 3, 1, 2, 0, 3, 1] 0
568 [2, 6, 0, 4, 3, 1, 2, 0, 3] 0
569 [2, 6, 0, 4, 3, 1, 2, 0, 1, 0] 0
570 [2, 6, 0, 4, 3, 1, 2, 0, 1] 0
571 [2, 6, 0, 4, 3, 1, 2, 0] 0
572 [2, 6, 0, 4, 3, 1, 2, 4, 3, 1, 2, 4] 0
573 [2, 6, 0, 4, 3, 1, 2, 4, 3, 1, 2] 0
574 [2, 6, 0, 4, 3, 1, 2, 4, 3, 1, 4] 0
575 [2, 6, 0, 4, 3, 1, 2, 4, 3, 1] 0
576 [2, 6, 0, 4, 3, 1, 2, 4, 3, 4] 0
577 [2, 6, 0, 4, 3, 1, 2, 4, 3] 0
578 [2, 6, 0, 4, 3, 1, 2, 4, 1] 0
579 [2, 6, 0, 4, 3, 1, 2, 4] 0
580 [2, 6, 0, 4, 3, 1, 2, 3, 1] 0
581 [2, 6, 0, 4, 3, 1, 2, 3] 0
582 [2, 6, 0, 4, 3, 1, 2, 1] 0
583 [2, 6, 0, 4, 3, 1, 2] 0
584 [2, 6, 0, 4, 3, 1, 0, 4] 0
585 [2, 6, 0, 4, 3, 1, 0] 0
586 [2, 6, 0, 4, 3, 1, 4] 0
587 [2, 6, 0, 4, 3, 1] 0
588 [2, 6, 0, 4, 3, 2, 4, 3] 0
589 [2, 6, 0, 4, 3, 2, 4] 0
590 [2, 6, 0, 4, 3, 2] 0
591 [2, 6, 0, 4, 3, 4] 0
592 [2, 6, 0, 4, 3] 0
593 [2, 6, 0, 4, 1, 2, 0, 1] 0
594 [2, 6, 0, 4, 1, 2, 0] 0
595 [2, 6, 0, 4, 1, 2] 0
596 [2, 6, 0, 4, 1, 0] 0
597 [2, 6, 0, 4, 1] 0
598 [2, 6, 0, 4] 0
599 [2, 6, 0, 3, 1, 2, 0, 3, 1, 2, 0] 0
600 [2, 6, 0, 3, 1, 2, 0, 3, 1, 2] 0
601 [2, 6, 0, 3, 1, 2, 0, 3, 1, 0] 0
602 [2, 6, 0, 3, 1, 2, 0, 3, 1] 0
603 [2, 6, 0, 3, 1, 2, 0, 3] 0
604 [2, 6, 0, 3, 1, 2, 0, 1, 0] 0
605 [2, 6, 0, 3, 1, 2, 0, 1] 0
606 [2, 6, 0, 3, 1, 2, 0] 0
607 [2, 6, 0, 3, 1, 2, 3, 1] 0
608 [2, 6, 0, 3, 1, 2, 3] 0
609 [2, 6, 0, 3, 1, 2, 1] 0
610 [2, 6, 0, 3, 1, 2] 0
611 [2, 6, 0, 3, 1, 0] 0
612 [2, 6, 0, 3, 1] 0
613 [2, 6, 0, 3, 2] 0
614 [2, 6, 0, 3] 0
615 [2, 6, 0, 1, 2, 0, 1] 0
616 [2, 6, 0, 1, 2, 0] 0
617 [2, 6, 0, 1, 2] 0
618 [2, 6, 0, 1, 0] 0
619 [2, 6, 0, 1] 0
620 [2, 6, 0] 0
621 [2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3, 6, 5, 4, 6] 0
622 [2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3, 6, 5, 4] 0
623 [2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3, 6, 5, 6] 0
624 [2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3, 6, 5] 0
625 [2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3, 6] 0
626 [2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3, 5] 0
627 [2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3] 0
628 [2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 6, 5, 6] 0
629 [2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 6, 5] 0
630 [2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 6] 0
631 [2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 5] 0
632 [2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 2, 6, 5, 4] 0
633 [2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 2, 6, 5, 6] 0
634 [2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 2, 6, 5] 0
635 [2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 2, 6, 4] 0
636 [2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 2, 6] 0
637 [2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 2, 5, 4, 3, 5] 0
638 [2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 2, 5, 4, 3] 0
639 [2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 2, 5, 4, 5] 0
640 [2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 2, 5, 4] 0
641 [2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 2, 5] 0
642 [2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 2, 4] 0
643 [2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 2] 0
644 [2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 6, 5, 4, 6, 5, 6] 0
645 [2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 6, 5, 4, 6, 5] 0
646 [2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 6, 5, 4, 6] 0
647 [2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 6, 5, 4, 5] 0
648 [2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 6, 5, 4] 0
649 [2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 6, 5, 6] 0
650 [2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 6, 5] 0
651 [2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 6, 4] 0
652 [2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 6] 0
653 [2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 5, 4, 5] 0
654 [2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 5, 4] 0
655 [2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 5] 0
656 [2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1, 4] 0
657 [2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3, 1] 0
658 [2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
659 [2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
660 [2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3, 6, 5, 4, 6] 0
661 [2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3, 6, 5, 4, 5] 0
662 [2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3, 6, 5, 4] 0
663 [2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3, 6, 5, 6] 0
664 [2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3, 6, 5] 0
665 [2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3, 6, 4] 0
666 [2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3, 6] 0
667 [2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3, 5, 4, 5] 0
668 [2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3, 5, 4] 0
669 [2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3, 5] 0
670 [2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3, 4] 0
671 [2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3] 0
672 [2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 1, 6, 5, 6] 0
673 [2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 1, 6, 5] 0
674 [2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 1, 6] 0
675 [2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 1, 5] 0
676 [2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 1] 0
677 [2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 6, 5, 6] 0
678 [2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 6, 5] 0
679 [2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 6] 0
680 [2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 5] 0
681 [2, 6, 5, 4, 3, 1, 2, 6, 5, 4] 0
682 [2, 6, 5, 4, 3, 1, 2, 6, 5, 3, 1, 6] 0
683 [2, 6, 5, 4, 3, 1, 2, 6, 5, 3, 1] 0
684 [2, 6, 5, 4, 3, 1, 2, 6, 5, 3, 6] 0
685 [2, 6, 5, 4, 3, 1, 2, 6, 5, 3] 0
686 [2, 6, 5, 4, 3, 1, 2, 6, 5, 1, 6] 0
687 [2, 6, 5, 4, 3, 1, 2, 6, 5, 1] 0
688 [2, 6, 5, 4, 3, 1, 2, 6, 5, 6] 0
689 [2, 6, 5, 4, 3, 1, 2, 6, 5] 0
690 [2, 6, 5, 4, 3, 1, 2, 6, 4, 3, 1, 2, 4] 0
691 [2, 6, 5, 4, 3, 1, 2, 6, 4, 3, 1, 2] 0
692 [2, 6, 5, 4, 3, 1, 2, 6, 4, 3, 1, 4] 0
693 [2, 6, 5, 4, 3, 1, 2, 6, 4, 3, 1] 0
694 [2, 6, 5, 4, 3, 1, 2, 6, 4, 3, 4] 0
695 [2, 6, 5, 4, 3, 1, 2, 6, 4, 3] 0
696 [2, 6, 5, 4, 3, 1, 2, 6, 4, 1] 0
697 [2, 6, 5, 4, 3, 1, 2, 6, 4] 0
698 [2, 6, 5, 4, 3, 1, 2, 6, 3, 1] 0
699 [2, 6, 5, 4, 3, 1, 2, 6, 3] 0
700 [2, 6, 5, 4, 3, 1, 2, 6, 1] 0
701 [2, 6, 5, 4, 3, 1, 2, 6] 0
702 [2, 6, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 5] 0
703 [2, 6, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3] 0
704 [2, 6, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 5] 0
705 [2, 6, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4] 0
706 [2, 6, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5] 0
707 [2, 6, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 4] 0
708 [2, 6, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2] 0
709 [2, 6, 5, 4, 3, 1, 2, 5, 4, 3, 1, 5, 4, 5] 0
710 [2, 6, 5, 4, 3, 1, 2, 5, 4, 3, 1, 5, 4] 0
711 [2, 6, 5, 4, 3, 1, 2, 5, 4, 3, 1, 5] 0
712 [2, 6, 5, 4, 3, 1, 2, 5, 4, 3, 1, 4] 0
713 [2, 6, 5, 4, 3, 1, 2, 5, 4, 3, 1] 0
714 [2, 6, 5, 4, 3, 1, 2, 5, 4, 3, 5, 4, 5] 0
715 [2, 6, 5, 4, 3, 1, 2, 5, 4, 3, 5, 4] 0
716 [2, 6, 5, 4, 3, 1, 2, 5, 4, 3, 5] 0
717 [2, 6, 5, 4, 3, 1, 2, 5, 4, 3, 4] 0
718 [2, 6, 5, 4, 3, 1, 2, 5, 4, 3] 0
719 [2, 6, 5, 4, 3, 1, 2, 5, 4, 1, 5] 0
720 [2, 6, 5, 4, 3, 1, 2, 5, 4, 1] 0
721 [2, 6, 5, 4, 3, 1, 2, 5, 4, 5] 0
722 [2, 6, 5, 4, 3, 1, 2, 5, 4] 0
723 [2, 6, 5, 4, 3, 1, 2, 5, 3, 1] 0
724 [2, 6, 5, 4, 3, 1, 2, 5, 3] 0
725 [2, 6, 5, 4, 3, 1, 2, 5, 1] 0
726 [2, 6, 5, 4, 3, 1, 2, 5] 0
727 [2, 6, 5, 4, 3, 1, 2, 4, 3, 1, 2, 4] 0
728 [2, 6, 5, 4, 3, 1, 2, 4, 3, 1, 2] 0
729 [2, 6, 5, 4, 3, 1, 2, 4, 3, 1, 4] 0
730 [2, 6, 5, 4, 3, 1, 2, 4, 3, 1] 0
731 [2, 6, 5, 4, 3, 1, 2, 4, 3, 4] 0
732 [2, 6, 5, 4, 3, 1, 2, 4, 3] 0
733 [2, 6, 5, 4, 3, 1, 2, 4, 1] 0
734 [2, 6, 5, 4, 3, 1, 2, 4] 0
735 [2, 6, 5, 4, 3, 1, 2, 3, 1] 0
736 [2, 6, 5, 4, 3, 1, 2, 3] 0
737 [2, 6, 5, 4, 3, 1, 2, 1] 0
738 [2, 6, 5, 4, 3, 1, 2] 0
739 [2, 6, 5, 4, 3, 1, 6, 5, 4, 6, 5, 6] 0
740 [2, 6, 5, 4, 3, 1, 6, 5, 4, 6, 5] 0
741 [2, 6, 5, 4, 3, 1, 6, 5, 4, 6] 0
742 [2, 6, 5, 4, 3, 1, 6, 5, 4, 5] 0
743 [2, 6, 5, 4, 3, 1, 6, 5, 4] 0
744 [2, 6, 5, 4, 3, 1, 6, 5, 6] 0
745 [2, 6, 5, 4, 3, 1, 6, 5] 0
746 [2, 6, 5, 4, 3, 1, 6, 4] 0
747 [2, 6, 5, 4, 3, 1, 6] 0
748 [2, 6, 5, 4, 3, 1, 5, 4, 5] 0
749 [2, 6, 5, 4, 3, 1, 5, 4] 0
750 [2, 6, 5, 4, 3, 1, 5] 0
751 [2, 6, 5, 4, 3, 1, 4] 0
752 [2, 6, 5, 4, 3, 1] 0
753 [2, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
754 [2, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6] 0
755 [2, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4] 0
756 [2, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 6] 0
757 [2, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5] 0
758 [2, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6] 0
759 [2, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4] 0
760 [2, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5] 0
761 [2, 6, 5, 4, 3, 2, 6, 5, 4, 3] 0
762 [2, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5, 6] 0
763 [2, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5] 0
764 [2, 6, 5, 4, 3, 2, 6, 5, 4, 6] 0
765 [2, 6, 5, 4, 3, 2, 6, 5, 4, 5] 0
766 [2, 6, 5, 4, 3, 2, 6, 5, 4] 0
767 [2, 6, 5, 4, 3, 2, 6, 5, 6] 0
768 [2, 6, 5, 4, 3, 2, 6, 5] 0
769 [2, 6, 5, 4, 3, 2, 6, 4, 3] 0
770 [2, 6, 5, 4, 3, 2, 6, 4] 0
771 [2, 6, 5, 4, 3, 2, 6] 0
772 [2, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
773 [2, 6, 5, 4, 3, 2, 5, 4, 3, 5] 0
774 [2, 6, 5, 4, 3, 2, 5, 4, 3] 0
775 [2, 6, 5, 4, 3, 2, 5, 4, 5] 0
776 [2, 6, 5, 4, 3, 2, 5, 4] 0
777 [2, 6, 5, 4, 3, 2, 5] 0
778 [2, 6, 5, 4, 3, 2, 4, 3] 0
779 [2, 6, 5, 4, 3, 2, 4] 0
780 [2, 6, 5, 4, 3, 2] 0
781 [2, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
782 [2, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
783 [2, 6, 5, 4, 3, 6, 5, 4, 6] 0
784 [2, 6, 5, 4, 3, 6, 5, 4, 5] 0
785 [2, 6, 5, 4, 3, 6, 5, 4] 0
786 [2, 6, 5, 4, 3, 6, 5, 6] 0
787 [2, 6, 5, 4, 3, 6, 5] 0
788 [2, 6, 5, 4, 3, 6, 4] 0
789 [2, 6, 5, 4, 3, 6] 0
790 [2, 6, 5, 4, 3, 5, 4, 5] 0
791 [2, 6, 5, 4, 3, 5, 4] 0
792 [2, 6, 5, 4, 3, 5] 0
793 [2, 6, 5, 4, 3, 4] 0
794 [2, 6, 5, 4, 3] 0
795 [2, 6, 5, 4, 1, 2, 6, 5, 6] 0
796 [2, 6, 5, 4, 1, 2, 6, 5] 0
797 [2, 6, 5, 4, 1, 2, 6] 0
798 [2, 6, 5, 4, 1, 2, 5] 0
799 [2, 6, 5, 4, 1, 2] 0
800 [2, 6, 5, 4, 1, 6, 5, 6] 0
801 [2, 6, 5, 4, 1, 6, 5] 0
802 [2, 6, 5, 4, 1, 6] 0
803 [2, 6, 5, 4, 1, 5] 0
804 [2, 6, 5, 4, 1] 0
805 [2, 6, 5, 4, 6, 5, 6] 0
806 [2, 6, 5, 4, 6, 5] 0
807 [2, 6, 5, 4, 6] 0
808 [2, 6, 5, 4, 5] 0
809 [2, 6, 5, 4] 0
810 [2, 6, 5, 3, 1, 2, 6, 3, 1] 0
811 [2, 6, 5, 3, 1, 2, 6, 3] 0
812 [2, 6, 5, 3, 1, 2, 6, 1] 0
813 [2, 6, 5, 3, 1, 2, 6] 0
814 [2, 6, 5, 3, 1, 2, 3, 1] 0
815 [2, 6, 5, 3, 1, 2, 3] 0
816 [2, 6, 5, 3, 1, 2, 1] 0
817 [2, 6, 5, 3, 1, 2] 0
818 [2, 6, 5, 3, 1, 6] 0
819 [2, 6, 5, 3, 1] 0
820 [2, 6, 5, 3, 2, 6] 0
821 [2, 6, 5, 3, 2] 0
822 [2, 6, 5, 3, 6] 0
823 [2, 6, 5, 3] 0
824 [2, 6, 5, 1, 2, 6] 0
825 [2, 6, 5, 1, 2] 0
826 [2, 6, 5, 1, 6] 0
827 [2, 6, 5, 1] 0
828 [2, 6, 5, 6] 0
829 [2, 6, 5] 0
830 [2, 6, 4, 3, 1, 2, 4, 3, 1, 2, 4] 0
831 [2, 6, 4, 3, 1, 2, 4, 3, 1, 2] 0
832 [2, 6, 4, 3, 1, 2, 4, 3, 1, 4] 0
833 [2, 6, 4, 3, 1, 2, 4, 3, 1] 0
834 [2, 6, 4, 3, 1, 2, 4, 3, 4] 0
835 [2, 6, 4, 3, 1, 2, 4, 3] 0
836 [2, 6, 4, 3, 1, 2, 4, 1] 0
837 [2, 6, 4, 3, 1, 2, 4] 0
838 [2, 6, 4, 3, 1, 2, 3, 1] 0
839 [2, 6, 4, 3, 1, 2, 3] 0
840 [2, 6, 4, 3, 1, 2, 1] 0
841 [2, 6, 4, 3, 1, 2] 0
842 [2, 6, 4, 3, 1, 4] 0
843 [2, 6, 4, 3, 1] 0
844 [2, 6, 4, 3, 2, 4, 3] 0
845 [2, 6, 4, 3, 2, 4] 0
846 [2, 6, 4, 3, 2] 0
847 [2, 6, 4, 3, 4] 0
848 [2, 6, 4, 3] 0
849 [2, 6, 4, 1, 2] 0
850 [2, 6, 4, 1] 0
851 [2, 6, 4] 0
852 [2, 6, 3, 1, 2, 3, 1] 0
853 [2, 6, 3, 1, 2, 3] 0
854 [2, 6, 3, 1, 2, 1] 0
855 [2, 6, 3, 1, 2] 0
856 [2, 6, 3, 1] 0
857 [2, 6, 3, 2] 0
858 [2, 6, 3] 0
859 [2, 6, 1, 2] 0
860 [2, 6, 1] 0
861 [2, 6] 0
862 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4] 0
863 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5] 0
864 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2] 0
865 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 5, 4] 0
866 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 5] 0
867 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1] 0
868 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 5, 4] 0
869 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 5] 0
870 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3] 0
871 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 1, 5] 0
872 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 1] 0
873 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 5] 0
874 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 4] 0
875 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5, 1] 0
876 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 5] 0
877 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 4, 3, 1] 0
878 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 4, 3] 0
879 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 4, 1] 0
880 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 4] 0
881 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0, 1] 0
882 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 0] 0
883 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 5, 4] 0
884 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 5] 0
885 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 3] 0
886 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4, 5] 0
887 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5, 4] 0
888 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 5] 0
889 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 4, 3] 0
890 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2, 4] 0
891 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 2] 0
892 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 0, 5, 4, 5] 0
893 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 0, 5, 4] 0
894 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 0, 5] 0
895 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 0, 4] 0
896 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 0] 0
897 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 5, 4, 5] 0
898 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 5, 4] 0
899 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 5] 0
900 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1, 4] 0
901 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 1] 0
902 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 5, 4, 5] 0
903 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 5, 4] 0
904 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 5] 0
905 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3, 4] 0
906 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 3] 0
907 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 1, 0, 5] 0
908 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 1, 0] 0
909 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 1, 5] 0
910 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 1] 0
911 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4, 5] 0
912 [2, 0, 5, 4, 3, 1, 2, 0, 5, 4] 0
913 [2, 0, 5, 4, 3, 1, 2, 0, 5, 3, 1, 2, 0] 0
914 [2, 0, 5, 4, 3, 1, 2, 0, 5, 3, 1, 2] 0
915 [2, 0, 5, 4, 3, 1, 2, 0, 5, 3, 1, 0] 0
916 [2, 0, 5, 4, 3, 1, 2, 0, 5, 3, 1] 0
917 [2, 0, 5, 4, 3, 1, 2, 0, 5, 3] 0
918 [2, 0, 5, 4, 3, 1, 2, 0, 5, 1, 0] 0
919 [2, 0, 5, 4, 3, 1, 2, 0, 5, 1] 0
920 [2, 0, 5, 4, 3, 1, 2, 0, 5] 0
921 [2, 0, 5, 4, 3, 1, 2, 0, 4, 3, 1, 2, 0, 4, 3, 1] 0
922 [2, 0, 5, 4, 3, 1, 2, 0, 4, 3, 1, 2, 0, 4, 3] 0
923 [2, 0, 5, 4, 3, 1, 2, 0, 4, 3, 1, 2, 0, 4, 1] 0
924 [2, 0, 5, 4, 3, 1, 2, 0, 4, 3, 1, 2, 0, 4] 0
925 [2, 0, 5, 4, 3, 1, 2, 0, 4, 3, 1, 2, 0, 1] 0
926 [2, 0, 5, 4, 3, 1, 2, 0, 4, 3, 1, 2, 0] 0
927 [2, 0, 5, 4, 3, 1, 2, 0, 4, 3, 1, 2, 4, 3] 0
928 [2, 0, 5, 4, 3, 1, 2, 0, 4, 3, 1, 2, 4] 0
929 [2, 0, 5, 4, 3, 1, 2, 0, 4, 3, 1, 2] 0
930 [2, 0, 5, 4, 3, 1, 2, 0, 4, 3, 1, 0, 4] 0
931 [2, 0, 5, 4, 3, 1, 2, 0, 4, 3, 1, 0] 0
932 [2, 0, 5, 4, 3, 1, 2, 0, 4, 3, 1, 4] 0
933 [2, 0, 5, 4, 3, 1, 2, 0, 4, 3, 1] 0
934 [2, 0, 5, 4, 3, 1, 2, 0, 4, 3, 4] 0
935 [2, 0, 5, 4, 3, 1, 2, 0, 4, 3] 0
936 [2, 0, 5, 4, 3, 1, 2, 0, 4, 1, 0] 0
937 [2, 0, 5, 4, 3, 1, 2, 0, 4, 1] 0
938 [2, 0, 5, 4, 3, 1, 2, 0, 4] 0
939 [2, 0, 5, 4, 3, 1, 2, 0, 3, 1, 2, 0] 0
940 [2, 0, 5, 4, 3, 1, 2, 0, 3, 1, 2] 0
941 [2, 0, 5, 4, 3, 1, 2, 0, 3, 1, 0] 0
942 [2, 0, 5, 4, 3, 1, 2, 0, 3, 1] 0
943 [2, 0, 5, 4, 3, 1, 2, 0, 3] 0
944 [2, 0, 5, 4, 3, 1, 2, 0, 1, 0] 0
945 [2, 0, 5, 4, 3, 1, 2, 0, 1] 0
946 [2, 0, 5, 4, 3, 1, 2, 0] 0
947 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 5] 0
948 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3] 0
949 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 5] 0
950 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4] 0
951 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5] 0
952 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 4] 0
953 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2] 0
954 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 5, 4, 5] 0
955 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 5, 4] 0
956 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 5] 0
957 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1, 4] 0
958 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 1] 0
959 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 5, 4, 5] 0
960 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 5, 4] 0
961 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 5] 0
962 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3, 4] 0
963 [2, 0, 5, 4, 3, 1, 2, 5, 4, 3] 0
964 [2, 0, 5, 4, 3, 1, 2, 5, 4, 1, 5] 0
965 [2, 0, 5, 4, 3, 1, 2, 5, 4, 1] 0
966 [2, 0, 5, 4, 3, 1, 2, 5, 4, 5] 0
967 [2, 0, 5, 4, 3, 1, 2, 5, 4] 0
968 [2, 0, 5, 4, 3, 1, 2, 5, 3, 1] 0
969 [2, 0, 5, 4, 3, 1, 2, 5, 3] 0
970 [2, 0, 5, 4, 3, 1, 2, 5, 1] 0
971 [2, 0, 5, 4, 3, 1, 2, 5] 0
972 [2, 0, 5, 4, 3, 1, 2, 4, 3, 1, 2, 4] 0
973 [2, 0, 5, 4, 3, 1, 2, 4, 3, 1, 2] 0
974 [2, 0, 5, 4, 3, 1, 2, 4, 3, 1, 4] 0
975 [2, 0, 5, 4, 3, 1, 2, 4, 3, 1] 0
976 [2, 0, 5, 4, 3, 1, 2, 4, 3, 4] 0
977 [2, 0, 5, 4, 3, 1, 2, 4, 3] 0
978 [2, 0, 5, 4, 3, 1, 2, 4, 1] 0
979 [2, 0, 5, 4, 3, 1, 2, 4] 0
980 [2, 0, 5, 4, 3, 1, 2, 3, 1] 0
981 [2, 0, 5, 4, 3, 1, 2, 3] 0
982 [2, 0, 5, 4, 3, 1, 2, 1] 0
983 [2, 0, 5, 4, 3, 1, 2] 0
984 [2, 0, 5, 4, 3, 1, 0, 5, 4, 5] 0
985 [2, 0, 5, 4, 3, 1, 0, 5, 4] 0
986 [2, 0, 5, 4, 3, 1, 0, 5] 0
987 [2, 0, 5, 4, 3, 1, 0, 4] 0
988 [2, 0, 5, 4, 3, 1, 0] 0
989 [2, 0, 5, 4, 3, 1, 5, 4, 5] 0
990 [2, 0, 5, 4, 3, 1, 5, 4] 0
991 [2, 0, 5, 4, 3, 1, 5] 0
992 [2, 0, 5, 4, 3, 1, 4] 0
993 [2, 0, 5, 4, 3, 1] 0
994 [2, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
995 [2, 0, 5, 4, 3, 2, 5, 4, 3, 5] 0
996 [2, 0, 5, 4, 3, 2, 5, 4, 3] 0
997 [2, 0, 5, 4, 3, 2, 5, 4, 5] 0
998 [2, 0, 5, 4, 3, 2, 5, 4] 0
999 [2, 0, 5, 4, 3, 2, 5] 0
1000 [2, 0, 5, 4, 3, 2, 4, 3] 0
1001 [2, 0, 5, 4, 3, 2, 4] 0
1002 [2, 0, 5, 4, 3, 2] 0
1003 [2, 0, 5, 4, 3, 5, 4, 5] 0
1004 [2, 0, 5, 4, 3, 5, 4] 0
1005 [2, 0, 5, 4, 3, 5] 0
1006 [2, 0, 5, 4, 3, 4] 0
1007 [2, 0, 5, 4, 3] 0
1008 [2, 0, 5, 4, 1, 2, 0, 5, 1] 0
1009 [2, 0, 5, 4, 1, 2, 0, 5] 0
1010 [2, 0, 5, 4, 1, 2, 0, 1] 0
1011 [2, 0, 5, 4, 1, 2, 0] 0
1012 [2, 0, 5, 4, 1, 2, 5] 0
1013 [2, 0, 5, 4, 1, 2] 0
1014 [2, 0, 5, 4, 1, 0, 5] 0
1015 [2, 0, 5, 4, 1, 0] 0
1016 [2, 0, 5, 4, 1, 5] 0
1017 [2, 0, 5, 4, 1] 0
1018 [2, 0, 5, 4, 5] 0
1019 [2, 0, 5, 4] 0
1020 [2, 0, 5, 3, 1, 2, 0, 3, 1, 2, 0] 0
1021 [2, 0, 5, 3, 1, 2, 0, 3, 1, 2] 0
1022 [2, 0, 5, 3, 1, 2, 0, 3, 1, 0] 0
1023 [2, 0, 5, 3, 1, 2, 0, 3, 1] 0
1024 [2, 0, 5, 3, 1, 2, 0, 3] 0
1025 [2, 0, 5, 3, 1, 2, 0, 1, 0] 0
1026 [2, 0, 5, 3, 1, 2, 0, 1] 0
1027 [2, 0, 5, 3, 1, 2, 0] 0
1028 [2, 0, 5, 3, 1, 2, 3, 1] 0
1029 [2, 0, 5, 3, 1, 2, 3] 0
1030 [2, 0, 5, 3, 1, 2, 1] 0
1031 [2, 0, 5, 3, 1, 2] 0
1032 [2, 0, 5, 3, 1, 0] 0
1033 [2, 0, 5, 3, 1] 0
1034 [2, 0, 5, 3, 2] 0
1035 [2, 0, 5, 3] 0
1036 [2, 0, 5, 1, 2, 0, 1] 0
1037 [2, 0, 5, 1, 2, 0] 0
1038 [2, 0, 5, 1, 2] 0
1039 [2, 0, 5, 1, 0] 0
1040 [2, 0, 5, 1] 0
1041 [2, 0, 5] 0
1042 [2, 0, 4, 3, 1, 2, 0, 4, 3, 1, 2, 0, 4, 3, 1] 0
1043 [2, 0, 4, 3, 1, 2, 0, 4, 3, 1, 2, 0, 4, 3] 0
1044 [2, 0, 4, 3, 1, 2, 0, 4, 3, 1, 2, 0, 4, 1] 0
1045 [2, 0, 4, 3, 1, 2, 0, 4, 3, 1, 2, 0, 4] 0
1046 [2, 0, 4, 3, 1, 2, 0, 4, 3, 1, 2, 0, 1] 0
1047 [2, 0, 4, 3, 1, 2, 0, 4, 3, 1, 2, 0] 0
1048 [2, 0, 4, 3, 1, 2, 0, 4, 3, 1, 2, 4, 3] 0
1049 [2, 0, 4, 3, 1, 2, 0, 4, 3, 1, 2, 4] 0
1050 [2, 0, 4, 3, 1, 2, 0, 4, 3, 1, 2] 0
1051 [2, 0, 4, 3, 1, 2, 0, 4, 3, 1, 0, 4] 0
1052 [2, 0, 4, 3, 1, 2, 0, 4, 3, 1, 0] 0
1053 [2, 0, 4, 3, 1, 2, 0, 4, 3, 1, 4] 0
1054 [2, 0, 4, 3, 1, 2, 0, 4, 3, 1] 0
1055 [2, 0, 4, 3, 1, 2, 0, 4, 3, 4] 0
1056 [2, 0, 4, 3, 1, 2, 0, 4, 3] 0
1057 [2, 0, 4, 3, 1, 2, 0, 4, 1, 0] 0
1058 [2, 0, 4, 3, 1, 2, 0, 4, 1] 0
1059 [2, 0, 4, 3, 1, 2, 0, 4] 0
1060 [2, 0, 4, 3, 1, 2, 0, 3, 1, 2, 0] 0
1061 [2, 0, 4, 3, 1, 2, 0, 3, 1, 2] 0
1062 [2, 0, 4, 3, 1, 2, 0, 3, 1, 0] 0
1063 [2, 0, 4, 3, 1, 2, 0, 3, 1] 0
1064 [2, 0, 4, 3, 1, 2, 0, 3] 0
1065 [2, 0, 4, 3, 1, 2, 0, 1, 0] 0
1066 [2, 0, 4, 3, 1, 2, 0, 1] 0
1067 [2, 0, 4, 3, 1, 2, 0] 0
1068 [2, 0, 4, 3, 1, 2, 4, 3, 1, 2, 4] 0
1069 [2, 0, 4, 3, 1, 2, 4, 3, 1, 2] 0
1070 [2, 0, 4, 3, 1, 2, 4, 3, 1, 4] 0
1071 [2, 0, 4, 3, 1, 2, 4, 3, 1] 0
1072 [2, 0, 4, 3, 1, 2, 4, 3, 4] 0
1073 [2, 0, 4, 3, 1, 2, 4, 3] 0
1074 [2, 0, 4, 3, 1, 2, 4, 1] 0
1075 [2, 0, 4, 3, 1, 2, 4] 0
1076 [2, 0, 4, 3, 1, 2, 3, 1] 0
1077 [2, 0, 4, 3, 1, 2, 3] 0
1078 [2, 0, 4, 3, 1, 2, 1] 0
1079 [2, 0, 4, 3, 1, 2] 0
1080 [2, 0, 4, 3, 1, 0, 4] 0
1081 [2, 0, 4, 3, 1, 0] 0
1082 [2, 0, 4, 3, 1, 4] 0
1083 [2, 0, 4, 3, 1] 0
1084 [2, 0, 4, 3, 2, 4, 3] 0
1085 [2, 0, 4, 3, 2, 4] 0
1086 [2, 0, 4, 3, 2] 0
1087 [2, 0, 4, 3, 4] 0
1088 [2, 0, 4, 3] 0
1089 [2, 0, 4, 1, 2, 0, 1] 0
1090 [2, 0, 4, 1, 2, 0] 0
1091 [2, 0, 4, 1, 2] 0
1092 [2, 0, 4, 1, 0] 0
1093 [2, 0, 4, 1] 0
1094 [2, 0, 4] 0
1095 [2, 0, 3, 1, 2, 0, 3, 1, 2, 0] 0
1096 [2, 0, 3, 1, 2, 0, 3, 1, 2] 0
1097 [2, 0, 3, 1, 2, 0, 3, 1, 0] 0
1098 [2, 0, 3, 1, 2, 0, 3, 1] 0
1099 [2, 0, 3, 1, 2, 0, 3] 0
1100 [2, 0, 3, 1, 2, 0, 1, 0] 0
1101 [2, 0, 3, 1, 2, 0, 1] 0
1102 [2, 0, 3, 1, 2, 0] 0
1103 [2, 0, 3, 1, 2, 3, 1] 0
1104 [2, 0, 3, 1, 2, 3] 0
1105 [2, 0, 3, 1, 2, 1] 0
1106 [2, 0, 3, 1, 2] 0
1107 [2, 0, 3, 1, 0] 0
1108 [2, 0, 3, 1] 0
1109 [2, 0, 3, 2] 0
1110 [2, 0, 3] 0
1111 [2, 0, 1, 2, 0, 1] 0
1112 [2, 0, 1, 2, 0] 0
1113 [2, 0, 1, 2] 0
1114 [2, 0, 1, 0] 0
1115 [2, 0, 1] 0
1116 [2, 0] 0
1117 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3, 5] 0
1118 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 3] 0
1119 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4, 5] 0
1120 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5, 4] 0
1121 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 5] 0
1122 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2, 4] 0
1123 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 2] 0
1124 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 5, 4, 5] 0
1125 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 5, 4] 0
1126 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 5] 0
1127 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1, 4] 0
1128 [2, 5, 4, 3, 1, 2, 5, 4, 3, 1] 0
1129 [2, 5, 4, 3, 1, 2, 5, 4, 3, 5, 4, 5] 0
1130 [2, 5, 4, 3, 1, 2, 5, 4, 3, 5, 4] 0
1131 [2, 5, 4, 3, 1, 2, 5, 4, 3, 5] 0
1132 [2, 5, 4, 3, 1, 2, 5, 4, 3, 4] 0
1133 [2, 5, 4, 3, 1, 2, 5, 4, 3] 0
1134 [2, 5, 4, 3, 1, 2, 5, 4, 1, 5] 0
1135 [2, 5, 4, 3, 1, 2, 5, 4, 1] 0
1136 [2, 5, 4, 3, 1, 2, 5, 4, 5] 0
1137 [2, 5, 4, 3, 1, 2, 5, 4] 0
1138 [2, 5, 4, 3, 1, 2, 5, 3, 1] 0
1139 [2, 5, 4, 3, 1, 2, 5, 3] 0
1140 [2, 5, 4, 3, 1, 2, 5, 1] 0
1141 [2, 5, 4, 3, 1, 2, 5] 0
1142 [2, 5, 4, 3, 1, 2, 4, 3, 1, 2, 4] 0
1143 [2, 5, 4, 3, 1, 2, 4, 3, 1, 2] 0
1144 [2, 5, 4, 3, 1, 2, 4, 3, 1, 4] 0
1145 [2, 5, 4, 3, 1, 2, 4, 3, 1] 0
1146 [2, 5, 4, 3, 1, 2, 4, 3, 4] 0
1147 [2, 5, 4, 3, 1, 2, 4, 3] 0
1148 [2, 5, 4, 3, 1, 2, 4, 1] 0
1149 [2, 5, 4, 3, 1, 2, 4] 0
1150 [2, 5, 4, 3, 1, 2, 3, 1] 0
1151 [2, 5, 4, 3, 1, 2, 3] 0
1152 [2, 5, 4, 3, 1, 2, 1] 0
1153 [2, 5, 4, 3, 1, 2] 0
1154 [2, 5, 4, 3, 1, 5, 4, 5] 0
1155 [2, 5, 4, 3, 1, 5, 4] 0
1156 [2, 5, 4, 3, 1, 5] 0
1157 [2, 5, 4, 3, 1, 4] 0
1158 [2, 5, 4, 3, 1] 0
1159 [2, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
1160 [2, 5, 4, 3, 2, 5, 4, 3, 5] 0
1161 [2, 5, 4, 3, 2, 5, 4, 3] 0
1162 [2, 5, 4, 3, 2, 5, 4, 5] 0
1163 [2, 5, 4, 3, 2, 5, 4] 0
1164 [2, 5, 4, 3, 2, 5] 0
1165 [2, 5, 4, 3, 2, 4, 3] 0
1166 [2, 5, 4, 3, 2, 4] 0
1167 [2, 5, 4, 3, 2] 0
1168 [2, 5, 4, 3, 5, 4, 5] 0
1169 [2, 5, 4, 3, 5, 4] 0
1170 [2, 5, 4, 3, 5] 0
1171 [2, 5, 4, 3, 4] 0
1172 [2, 5, 4, 3] 0
1173 [2, 5, 4, 1, 2, 5] 0
1174 [2, 5, 4, 1, 2] 0
1175 [2, 5, 4, 1, 5] 0
1176 [2, 5, 4, 1] 0
1177 [2, 5, 4, 5] 0
1178 [2, 5, 4] 0
1179 [2, 5, 3, 1, 2, 3, 1] 0
1180 [2, 5, 3, 1, 2, 3] 0
1181 [2, 5, 3, 1, 2, 1] 0
1182 [2, 5, 3, 1, 2] 0
1183 [2, 5, 3, 1] 0
1184 [2, 5, 3, 2] 0
1185 [2, 5, 3] 0
1186 [2, 5, 1, 2] 0
1187 [2, 5, 1] 0
1188 [2, 5] 0
1189 [2, 4, 3, 1, 2, 4, 3, 1, 2, 4] 0
1190 [2, 4, 3, 1, 2, 4, 3, 1, 2] 0
1191 [2, 4, 3, 1, 2, 4, 3, 1, 4] 0
1192 [2, 4, 3, 1, 2, 4, 3, 1] 0
1193 [2, 4, 3, 1, 2, 4, 3, 4] 0
1194 [2, 4, 3, 1, 2, 4, 3] 0
1195 [2, 4, 3, 1, 2, 4, 1] 0
1196 [2, 4, 3, 1, 2, 4] 0
1197 [2, 4, 3, 1, 2, 3, 1] 0
1198 [2, 4, 3, 1, 2, 3] 0
1199 [2, 4, 3, 1, 2, 1] 0
1200 [2, 4, 3, 1, 2] 0
1201 [2, 4, 3, 1, 4] 0
1202 [2, 4, 3, 1] 0
1203 [2, 4, 3, 2, 4, 3] 0
1204 [2, 4, 3, 2, 4] 0
1205 [2, 4, 3, 2] 0
1206 [2, 4, 3, 4] 0
1207 [2, 4, 3] 0
1208 [2, 4, 1, 2] 0
1209 [2, 4, 1] 0
1210 [2, 4] 0
1211 [2, 3, 1, 2, 3, 1] 0
1212 [2, 3, 1, 2, 3] 0
1213 [2, 3, 1, 2, 1] 0
1214 [2, 3, 1, 2] 0
1215 [2, 3, 1] 0
1216 [2, 3, 2] 0
1217 [2, 3] 0
1218 [2, 1, 2] 0
1219 [2, 1] 0
1220 [2] 0
1221 [6, 0, 5, 4, 3, 1, 6, 0, 5, 4, 6, 5, 6] 0
1222 [6, 0, 5, 4, 3, 1, 6, 0, 5, 4, 6, 5] 0
1223 [6, 0, 5, 4, 3, 1, 6, 0, 5, 4, 6] 0
1224 [6, 0, 5, 4, 3, 1, 6, 0, 5, 4, 5] 0
1225 [6, 0, 5, 4, 3, 1, 6, 0, 5, 4] 0
1226 [6, 0, 5, 4, 3, 1, 6, 0, 5, 6] 0
1227 [6, 0, 5, 4, 3, 1, 6, 0, 5] 0
1228 [6, 0, 5, 4, 3, 1, 6, 0, 4] 0
1229 [6, 0, 5, 4, 3, 1, 6, 0] 0
1230 [6, 0, 5, 4, 3, 1, 6, 5, 4, 6, 5, 6] 0
1231 [6, 0, 5, 4, 3, 1, 6, 5, 4, 6, 5] 0
1232 [6, 0, 5, 4, 3, 1, 6, 5, 4, 6] 0
1233 [6, 0, 5, 4, 3, 1, 6, 5, 4, 5] 0
1234 [6, 0, 5, 4, 3, 1, 6, 5, 4] 0
1235 [6, 0, 5, 4, 3, 1, 6, 5, 6] 0
1236 [6, 0, 5, 4, 3, 1, 6, 5] 0
1237 [6, 0, 5, 4, 3, 1, 6, 4] 0
1238 [6, 0, 5, 4, 3, 1, 6] 0
1239 [6, 0, 5, 4, 3, 1, 0, 5, 4, 5] 0
1240 [6, 0, 5, 4, 3, 1, 0, 5, 4] 0
1241 [6, 0, 5, 4, 3, 1, 0, 5] 0
1242 [6, 0, 5, 4, 3, 1, 0, 4] 0
1243 [6, 0, 5, 4, 3, 1, 0] 0
1244 [6, 0, 5, 4, 3, 1, 5, 4, 5] 0
1245 [6, 0, 5, 4, 3, 1, 5, 4] 0
1246 [6, 0, 5, 4, 3, 1, 5] 0
1247 [6, 0, 5, 4, 3, 1, 4] 0
1248 [6, 0, 5, 4, 3, 1] 0
1249 [6, 0, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
1250 [6, 0, 5, 4, 3, 6, 5, 4, 6, 5] 0
1251 [6, 0, 5, 4, 3, 6, 5, 4, 6] 0
1252 [6, 0, 5, 4, 3, 6, 5, 4, 5] 0
1253 [6, 0, 5, 4, 3, 6, 5, 4] 0
1254 [6, 0, 5, 4, 3, 6, 5, 6] 0
1255 [6, 0, 5, 4, 3, 6, 5] 0
1256 [6, 0, 5, 4, 3, 6, 4] 0
1257 [6, 0, 5, 4, 3, 6] 0
1258 [6, 0, 5, 4, 3, 5, 4, 5] 0
1259 [6, 0, 5, 4, 3, 5, 4] 0
1260 [6, 0, 5, 4, 3, 5] 0
1261 [6, 0, 5, 4, 3, 4] 0
1262 [6, 0, 5, 4, 3] 0
1263 [6, 0, 5, 4, 1, 6, 0, 5, 6] 0
1264 [6, 0, 5, 4, 1, 6, 0, 5] 0
1265 [6, 0, 5, 4, 1, 6, 0] 0
1266 [6, 0, 5, 4, 1, 6, 5, 6] 0
1267 [6, 0, 5, 4, 1, 6, 5] 0
1268 [6, 0, 5, 4, 1, 6] 0
1269 [6, 0, 5, 4, 1, 0, 5] 0
1270 [6, 0, 5, 4, 1, 0] 0
1271 [6, 0, 5, 4, 1, 5] 0
1272 [6, 0, 5, 4, 1] 0
1273 [6, 0, 5, 4, 6, 5, 6] 0
1274 [6, 0, 5, 4, 6, 5] 0
1275 [6, 0, 5, 4, 6] 0
1276 [6, 0, 5, 4, 5] 0
1277 [6, 0, 5, 4] 0
1278 [6, 0, 5, 3, 1, 6, 0] 0
1279 [6, 0, 5, 3, 1, 6] 0
1280 [6, 0, 5, 3, 1, 0] 0
1281 [6, 0, 5, 3, 1] 0
1282 [6, 0, 5, 3, 6] 0
1283 [6, 0, 5, 3] 0
1284 [6, 0, 5, 1, 6, 0] 0
1285 [6, 0, 5, 1, 6] 0
1286 [6, 0, 5, 1, 0] 0
1287 [6, 0, 5, 1] 0
1288 [6, 0, 5, 6] 0
1289 [6, 0, 5] 0
1290 [6, 0, 4, 3, 1, 0, 4] 0
1291 [6, 0, 4, 3, 1, 0] 0
1292 [6, 0, 4, 3, 1, 4] 0
1293 [6, 0, 4, 3, 1] 0
1294 [6, 0, 4, 3, 4] 0
1295 [6, 0, 4, 3] 0
1296 [6, 0, 4, 1, 0] 0
1297 [6, 0, 4, 1] 0
1298 [6, 0, 4] 0
1299 [6, 0, 3, 1, 0] 0
1300 [6, 0, 3, 1] 0
1301 [6, 0, 3] 0
1302 [6, 0, 1, 0] 0
1303 [6, 0, 1] 0
1304 [6, 0] 0
1305 [6, 5, 4, 3, 1, 6, 5, 4, 6, 5, 6] 0
1306 [6, 5, 4, 3, 1, 6, 5, 4, 6, 5] 0
1307 [6, 5, 4, 3, 1, 6, 5, 4, 6] 0
1308 [6, 5, 4, 3, 1, 6, 5, 4, 5] 0
1309 [6, 5, 4, 3, 1, 6, 5, 4] 0
1310 [6, 5, 4, 3, 1, 6, 5, 6] 0
1311 [6, 5, 4, 3, 1, 6, 5] 0
1312 [6, 5, 4, 3, 1, 6, 4] 0
1313 [6, 5, 4, 3, 1, 6] 0
1314 [6, 5, 4, 3, 1, 5, 4, 5] 0
1315 [6, 5, 4, 3, 1, 5, 4] 0
1316 [6, 5, 4, 3, 1, 5] 0
1317 [6, 5, 4, 3, 1, 4] 0
1318 [6, 5, 4, 3, 1] 0
1319 [6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
1320 [6, 5, 4, 3, 6, 5, 4, 6, 5] 0
1321 [6, 5, 4, 3, 6, 5, 4, 6] 0
1322 [6, 5, 4, 3, 6, 5, 4, 5] 0
1323 [6, 5, 4, 3, 6, 5, 4] 0
1324 [6, 5, 4, 3, 6, 5, 6] 0
1325 [6, 5, 4, 3, 6, 5] 0
1326 [6, 5, 4, 3, 6, 4] 0
1327 [6, 5, 4, 3, 6] 0
1328 [6, 5, 4, 3, 5, 4, 5] 0
1329 [6, 5, 4, 3, 5, 4] 0
1330 [6, 5, 4, 3, 5] 0
1331 [6, 5, 4, 3, 4] 0
1332 [6, 5, 4, 3] 0
1333 [6, 5, 4, 1, 6, 5, 6] 0
1334 [6, 5, 4, 1, 6, 5] 0
1335 [6, 5, 4, 1, 6] 0
1336 [6, 5, 4, 1, 5] 0
1337 [6, 5, 4, 1] 0
1338 [6, 5, 4, 6, 5, 6] 0
1339 [6, 5, 4, 6, 5] 0
1340 [6, 5, 4, 6] 0
1341 [6, 5, 4, 5] 0
1342 [6, 5, 4] 0
1343 [6, 5, 3, 1, 6] 0
1344 [6, 5, 3, 1] 0
1345 [6, 5, 3, 6] 0
1346 [6, 5, 3] 0
1347 [6, 5, 1, 6] 0
1348 [6, 5, 1] 0
1349 [6, 5, 6] 0
1350 [6, 5] 0
1351 [6, 4, 3, 1, 4] 0
1352 [6, 4, 3, 1] 0
1353 [6, 4, 3, 4] 0
1354 [6, 4, 3] 0
1355 [6, 4, 1] 0
1356 [6, 4] 0
1357 [6, 3, 1] 0
1358 [6, 3] 0
1359 [6, 1] 0
1360 [6] 0
1361 [0, 5, 4, 3, 1, 0, 5, 4, 5] 0
1362 [0, 5, 4, 3, 1, 0, 5, 4] 0
1363 [0, 5, 4, 3, 1, 0, 5] 0
1364 [0, 5, 4, 3, 1, 0, 4] 0
1365 [0, 5, 4, 3, 1, 0] 0
1366 [0, 5, 4, 3, 1, 5, 4, 5] 0
1367 [0, 5, 4, 3, 1, 5, 4] 0
1368 [0, 5, 4, 3, 1, 5] 0
1369 [0, 5, 4, 3, 1, 4] 0
1370 [0, 5, 4, 3, 1] 0
1371 [0, 5, 4, 3, 5, 4, 5] 0
1372 [0, 5, 4, 3, 5, 4] 0
1373 [0, 5, 4, 3, 5] 0
1374 [0, 5, 4, 3, 4] 0
1375 [0, 5, 4, 3] 0
1376 [0, 5, 4, 1, 0, 5] 0
1377 [0, 5, 4, 1, 0] 0
1378 [0, 5, 4, 1, 5] 0
1379 [0, 5, 4, 1] 0
1380 [0, 5, 4, 5] 0
1381 [0, 5, 4] 0
1382 [0, 5, 3, 1, 0] 0
1383 [0, 5, 3, 1] 0
1384 [0, 5, 3] 0
1385 [0, 5, 1, 0] 0
1386 [0, 5, 1] 0
1387 [0, 5] 0
1388 [0, 4, 3, 1, 0, 4] 0
1389 [0, 4, 3, 1, 0] 0
1390 [0, 4, 3, 1, 4] 0
1391 [0, 4, 3, 1] 0
1392 [0, 4, 3, 4] 0
1393 [0, 4, 3] 0
1394 [0, 4, 1, 0] 0
1395 [0, 4, 1] 0
1396 [0, 4] 0
1397 [0, 3, 1, 0] 0
1398 [0, 3, 1] 0
1399 [0, 3] 0
1400 [0, 1, 0] 0
1401 [0, 1] 0
1402 [0] 0
1403 [5, 4, 3, 1, 5, 4, 5] 0
1404 [5, 4, 3, 1, 5, 4] 0
1405 [5, 4, 3, 1, 5] 0
1406 [5, 4, 3, 1, 4] 0
1407 [5, 4, 3, 1] 0
1408 [5, 4, 3, 5, 4, 5] 0
1409 [5, 4, 3, 5, 4] 0
1410 [5, 4, 3, 5] 0
1411 [5, 4, 3, 4] 0
1412 [5, 4, 3] 0
1413 [5, 4, 1, 5] 0
1414 [5, 4, 1] 0
1415 [5, 4, 5] 0
1416 [5, 4] 0
1417 [5, 3, 1] 0
1418 [5, 3] 0
1419 [5, 1] 0
1420 [5] 0
1421 [4, 3, 1, 4] 0
1422 [4, 3, 1] 0
1423 [4, 3, 4] 0
1424 [4, 3] 0
1425 [4, 1] 0
1426 [4] 0
1427 [3, 1] 0
1428 [3] 0
1429 [1] 0
1430 [] 0
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,3,4,5,6]
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),Kprefix(c,6))
....:     print(n,v,P.dimension())
....:     n+=1
....:     if P.dimension()!=0:
....:         print('FAILURE')
....:         break
....: 
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
Cell In [262], line 5
      3 n=Integer(1)
      4 for v in sortables(A,c):
----> 5     P=p_lambda_int(B(A,c),lam(A,v),Kprefix(c,Integer(6)))
      6     print(n,v,P.dimension())
      7     n+=Integer(1)

Cell In [258], line 125, in p_lambda_int(B, la, seqs)
    124 def p_lambda_int(B, la, seqs):
--> 125     P = p_lambda_faster(B, la, seqs[Integer(0)])
    126     for s in seqs:
    127         P = P.intersection(p_lambda_faster(B, la, s))

Cell In [258], line 141, in p_lambda_faster(B, la, seq)
    139     B.mutate(k)
    140 B, la  = B[:,:-Integer(1)], B[:,-Integer(1)] 
--> 141 P = Polyhedron(rays=B.columns(),base_ring=QQ).translation(la)
    142 #print("P:   ",P,P.vertices(),P.rays(),P.lines(),"\n")
    143 for k in reversed(seq):

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/constructor.py:768, in Polyhedron(vertices, rays, lines, ieqs, eqns, ambient_dim, base_ring, minimize, verbose, backend, mutable)
    766 if got_Vrep:
    767     Vrep = [vertices, rays, lines]
--> 768 return parent(Vrep, Hrep, convert=convert, verbose=verbose, mutable=mutable)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/parent.pyx:903, in sage.structure.parent.Parent.__call__ (build/cythonized/sage/structure/parent.c:12685)()
    901         return mor._call_(x)
    902     else:
--> 903         return mor._call_with_args(x, args, kwds)
    904 
    905 raise TypeError(_LazyString("No conversion defined from %s to %s", (R, self), {}))

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:182, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_with_args (build/cythonized/sage/structure/coerce_maps.c:7540)()
    180     print(type(C), C)
    181     print(type(C._element_constructor), C._element_constructor)
--> 182 raise
    183 
    184 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:177, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_with_args (build/cythonized/sage/structure/coerce_maps.c:7430)()
    175             return C._element_constructor(x, *args)
    176         else:
--> 177             return C._element_constructor(x, *args, **kwds)
    178 except Exception:
    179     if print_warnings:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:695, in Polyhedra_base._element_constructor_(self, *args, **kwds)
    693     if convert and Vrep:
    694         Vrep = [convert_base_ring(_) for _ in Vrep]
--> 695     return self.element_class(self, Vrep, Hrep, **kwds)
    696 if nargs == 1 and is_Polyhedron(args[0]):
    697     copy = kwds.pop('copy', args[0].parent() is not self)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:174, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    171     lines = tuple(lines)
    173 if vertices or rays or lines:
--> 174     self._init_from_Vrepresentation(vertices, rays, lines, **kwds)
    175 else:
    176     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:99, in Polyhedron_ppl._init_from_Vrepresentation(self, vertices, rays, lines, minimize, verbose)
     72 def _init_from_Vrepresentation(self, vertices, rays, lines, minimize=True, verbose=False):
     73     """
     74     Construct polyhedron from V-representation data.
     75 
   (...)
     97         sage: Polyhedron_ppl._init_from_Vrepresentation(p, [], [], [])
     98     """
---> 99     gs = self._convert_generators_to_ppl(vertices, rays, lines)
    100     if gs.empty():
    101         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'empty')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:477, in Polyhedron_ppl._convert_generators_to_ppl(vertices, rays, lines)
    475     rays = []
    476 for r in rays:
--> 477     gs.insert(Polyhedron_ppl._convert_generator_to_ppl(r, RAY))
    478 if lines is None:
    479     lines = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:442, in Polyhedron_ppl._convert_generator_to_ppl(v, typ)
    440 d = LCM_list([denominator(v_i) for v_i in v])
    441 if d.is_one():
--> 442     return ob(Linear_Expression(v, 0))
    443 else:
    444     dv = [ d*v_i for v_i in v ]

File ppl/generator.pyx:205, in ppl.generator.Generator.ray()

File ppl/generator.pyx:201, in ppl.generator.Generator.ray()

ValueError: PPL::ray(e):
e == 0, but the origin cannot be a ray.
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),Kprefix(c,6))
....:     print(n,v,P.dimension())
....:     n+=1
....:     if P.dimension()!=0:
....:         print('FAILURE')
....:         break
....: 
1 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0] 0
2 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1] 0
3 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0] 0
4 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 1] 0
5 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2] 0
6 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0] 0
7 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1] 0
8 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 2] 0
9 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0] 0
10 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2, 1] 0
11 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2] 0
12 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1] 0
13 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 2] 0
14 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3] 0
15 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0] 0
16 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1] 0
17 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 0] 0
18 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 1] 0
19 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2] 0
20 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 3, 0] 0
21 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 3] 0
22 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 0] 0
23 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1] 0
24 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 2, 3, 2] 0
25 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 2, 3] 0
26 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 2] 0
27 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 3] 0
28 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0] 0
29 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
30 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
31 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3, 1] 0
32 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3, 2] 0
33 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3] 0
34 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 1] 0
35 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2] 0
36 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 3] 0
37 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1] 0
38 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 2, 3, 2] 0
39 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 2, 3] 0
40 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 2] 0
41 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 3] 0
42 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4] 0
43 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0] 0
44 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 0, 1] 0
45 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 0] 0
46 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 1] 0
47 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2] 0
48 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 0] 0
49 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1] 0
50 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 2] 0
51 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0] 0
52 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 1, 2, 1] 0
53 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 1, 2] 0
54 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 1] 0
55 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 2] 0
56 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3] 0
57 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 4, 0, 1, 0] 0
58 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 4, 0, 1] 0
59 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 4, 0] 0
60 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 4, 1] 0
61 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 4] 0
62 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 0, 1, 0] 0
63 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 0, 1] 0
64 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 0] 0
65 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 1] 0
66 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2] 0
67 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 0, 3] 0
68 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 0] 0
69 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 3] 0
70 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 3, 4] 0
71 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 3, 0] 0
72 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 3] 0
73 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 4, 0] 0
74 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 4] 0
75 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 0] 0
76 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1] 0
77 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 2, 3, 2] 0
78 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 2, 3] 0
79 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 2] 0
80 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 3] 0
81 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 2, 3, 4] 0
82 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 2, 3, 2] 0
83 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 2, 3] 0
84 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 2, 4] 0
85 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 2] 0
86 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 3, 4, 3] 0
87 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 3, 4] 0
88 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 3] 0
89 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 4] 0
90 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0] 0
91 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
92 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
93 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1] 0
94 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 2] 0
95 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] 0
96 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1] 0
97 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] 0
98 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 3] 0
99 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1] 0
100 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3, 2] 0
101 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3] 0
102 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2] 0
103 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 3] 0
104 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4] 0
105 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1] 0
106 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2] 0
107 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 3, 1] 0
108 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 3, 2] 0
109 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 3] 0
110 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 4, 1] 0
111 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 4] 0
112 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 1] 0
113 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2] 0
114 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 3, 4, 3] 0
115 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 3, 4] 0
116 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 3] 0
117 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 4] 0
118 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1] 0
119 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 2, 3, 4, 2, 3, 2] 0
120 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 2, 3, 4, 2, 3] 0
121 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 2, 3, 4, 2] 0
122 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 2, 3, 4, 3] 0
123 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 2, 3, 4] 0
124 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 2, 3, 2] 0
125 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 2, 3] 0
126 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 2, 4] 0
127 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 2] 0
128 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 3, 4, 3] 0
129 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 3, 4] 0
130 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 3] 0
131 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 4] 0
132 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5] 0
133 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0] 0
134 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1] 0
135 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0] 0
136 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 1] 0
137 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2] 0
138 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0] 0
139 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1] 0
140 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 2] 0
141 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0] 0
142 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2, 1] 0
143 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2] 0
144 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1] 0
145 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 3, 2] 0
146 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 3] 0
147 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0] 0
148 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1] 0
149 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 0] 0
150 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 1] 0
151 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2] 0
152 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 3, 0] 0
153 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 3] 0
154 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 0] 0
155 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1] 0
156 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 2, 3, 2] 0
157 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 2, 3] 0
158 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 2] 0
159 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 3] 0
160 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0] 0
161 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
162 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
163 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 1, 2, 3, 1] 0
164 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 1, 2, 3, 2] 0
165 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 1, 2, 3] 0
166 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 1, 2, 1] 0
167 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 1, 2] 0
168 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 1, 3] 0
169 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 1] 0
170 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 2, 3, 2] 0
171 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 2, 3] 0
172 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 2] 0
173 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 3] 0
174 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4] 0
175 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 5, 0, 1, 2, 0, 1, 0] 0
176 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 5, 0, 1, 2, 0, 1] 0
177 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 5, 0, 1, 2, 0] 0
178 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 5, 0, 1, 2, 1] 0
179 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 5, 0, 1, 2] 0
180 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 5, 0, 1, 0] 0
181 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 5, 0, 1] 0
182 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 5, 0, 2] 0
183 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 5, 0] 0
184 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 5, 1, 2, 1] 0
185 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 5, 1, 2] 0
186 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 5, 1] 0
187 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 5, 2] 0
188 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 5] 0
189 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0] 0
190 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 0, 1, 2, 0, 1] 0
191 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 0, 1, 2, 0] 0
192 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 0, 1, 2, 1] 0
193 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 0, 1, 2] 0
194 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 0, 1, 0] 0
195 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 0, 1] 0
196 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 0, 2] 0
197 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 0] 0
198 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 1, 2, 1] 0
199 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 1, 2] 0
200 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 1] 0
201 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 2] 0
202 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3] 0
203 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 4, 5, 0, 1, 4, 0] 0
204 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 4, 5, 0, 1, 4] 0
205 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 4, 5, 0, 1, 0] 0
206 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 4, 5, 0, 1] 0
207 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 4, 5, 0, 4] 0
208 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 4, 5, 0] 0
209 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 4, 5, 1, 4] 0
210 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 4, 5, 1] 0
211 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 4, 5, 4] 0
212 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 4, 5] 0
213 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 4, 0, 1, 0] 0
214 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 4, 0, 1] 0
215 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 4, 0] 0
216 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 4, 1] 0
217 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 4] 0
218 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 5, 0, 1, 0] 0
219 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 5, 0, 1] 0
220 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 5, 0] 0
221 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 5, 1] 0
222 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 5] 0
223 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 0, 1, 0] 0
224 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 0, 1] 0
225 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 0] 0
226 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 1] 0
227 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2] 0
228 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 0, 3, 4, 3] 0
229 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 0, 3, 4] 0
230 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 0, 3] 0
231 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 0, 4] 0
232 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 0] 0
233 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 3, 4, 3] 0
234 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 3, 4] 0
235 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 3] 0
236 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 4] 0
237 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5] 0
238 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 0, 3] 0
239 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 0] 0
240 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 3] 0
241 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4] 0
242 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 5, 0] 0
243 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 5] 0
244 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 0] 0
245 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3] 0
246 [0, 1, 2, 3, 4, 5, 6, 0, 1, 4, 5, 0, 4] 0
247 [0, 1, 2, 3, 4, 5, 6, 0, 1, 4, 5, 0] 0
248 [0, 1, 2, 3, 4, 5, 6, 0, 1, 4, 5, 4] 0
249 [0, 1, 2, 3, 4, 5, 6, 0, 1, 4, 5] 0
250 [0, 1, 2, 3, 4, 5, 6, 0, 1, 4, 0] 0
251 [0, 1, 2, 3, 4, 5, 6, 0, 1, 4] 0
252 [0, 1, 2, 3, 4, 5, 6, 0, 1, 5, 0] 0
253 [0, 1, 2, 3, 4, 5, 6, 0, 1, 5] 0
254 [0, 1, 2, 3, 4, 5, 6, 0, 1, 0] 0
255 [0, 1, 2, 3, 4, 5, 6, 0, 1] 0
256 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 2, 3, 4, 2, 3, 2] 0
257 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 2, 3, 4, 2, 3] 0
258 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 2, 3, 4, 2] 0
259 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 2, 3, 4, 3] 0
260 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 2, 3, 4] 0
261 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 2, 3, 2] 0
262 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 2, 3] 0
263 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 2, 4] 0
264 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 2] 0
265 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 3, 4, 3] 0
266 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 3, 4] 0
267 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 3] 0
268 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 4] 0
269 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5] 0
270 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 2, 3, 2] 0
271 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 2, 3] 0
272 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 2] 0
273 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 3] 0
274 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4] 0
275 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 5, 2] 0
276 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 5] 0
277 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 2] 0
278 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3] 0
279 [0, 1, 2, 3, 4, 5, 6, 0, 2, 4, 5, 4] 0
280 [0, 1, 2, 3, 4, 5, 6, 0, 2, 4, 5] 0
281 [0, 1, 2, 3, 4, 5, 6, 0, 2, 4] 0
282 [0, 1, 2, 3, 4, 5, 6, 0, 2, 5] 0
283 [0, 1, 2, 3, 4, 5, 6, 0, 2] 0
284 [0, 1, 2, 3, 4, 5, 6, 0, 3, 4, 5, 3, 4, 3] 0
285 [0, 1, 2, 3, 4, 5, 6, 0, 3, 4, 5, 3, 4] 0
286 [0, 1, 2, 3, 4, 5, 6, 0, 3, 4, 5, 3] 0
287 [0, 1, 2, 3, 4, 5, 6, 0, 3, 4, 5, 4] 0
288 [0, 1, 2, 3, 4, 5, 6, 0, 3, 4, 5] 0
289 [0, 1, 2, 3, 4, 5, 6, 0, 3, 4, 3] 0
290 [0, 1, 2, 3, 4, 5, 6, 0, 3, 4] 0
291 [0, 1, 2, 3, 4, 5, 6, 0, 3, 5] 0
292 [0, 1, 2, 3, 4, 5, 6, 0, 3] 0
293 [0, 1, 2, 3, 4, 5, 6, 0, 4, 5, 4] 0
294 [0, 1, 2, 3, 4, 5, 6, 0, 4, 5] 0
295 [0, 1, 2, 3, 4, 5, 6, 0, 4] 0
296 [0, 1, 2, 3, 4, 5, 6, 0, 5] 0
297 [0, 1, 2, 3, 4, 5, 6, 0] 0
298 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
299 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
300 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1] 0
301 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 2] 0
302 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] 0
303 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1] 0
304 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] 0
305 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 3] 0
306 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1] 0
307 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3, 2] 0
308 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3] 0
309 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2] 0
310 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 3] 0
311 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4] 0
312 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1] 0
313 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2] 0
314 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1] 0
315 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 2] 0
316 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3] 0
317 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 4, 1] 0
318 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 4] 0
319 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 1] 0
320 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2] 0
321 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 3, 4, 3] 0
322 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 3, 4] 0
323 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 3] 0
324 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 4] 0
325 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1] 0
326 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 4, 2, 3, 2] 0
327 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 4, 2, 3] 0
328 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 4, 2] 0
329 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 4, 3] 0
330 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 4] 0
331 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 2] 0
332 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3] 0
333 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 4] 0
334 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2] 0
335 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 3, 4, 3] 0
336 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 3, 4] 0
337 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 3] 0
338 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 4] 0
339 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5] 0
340 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
341 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
342 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 1] 0
343 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 2] 0
344 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3] 0
345 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 1] 0
346 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2] 0
347 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 3] 0
348 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1] 0
349 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 2, 3, 2] 0
350 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 2, 3] 0
351 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 2] 0
352 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 3] 0
353 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4] 0
354 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 5, 1, 2, 1] 0
355 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 5, 1, 2] 0
356 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 5, 1] 0
357 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 5, 2] 0
358 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 5] 0
359 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 1, 2, 1] 0
360 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 1, 2] 0
361 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 1] 0
362 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 2] 0
363 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3] 0
364 [0, 1, 2, 3, 4, 5, 6, 1, 2, 4, 5, 1, 4] 0
365 [0, 1, 2, 3, 4, 5, 6, 1, 2, 4, 5, 1] 0
366 [0, 1, 2, 3, 4, 5, 6, 1, 2, 4, 5, 4] 0
367 [0, 1, 2, 3, 4, 5, 6, 1, 2, 4, 5] 0
368 [0, 1, 2, 3, 4, 5, 6, 1, 2, 4, 1] 0
369 [0, 1, 2, 3, 4, 5, 6, 1, 2, 4] 0
370 [0, 1, 2, 3, 4, 5, 6, 1, 2, 5, 1] 0
371 [0, 1, 2, 3, 4, 5, 6, 1, 2, 5] 0
372 [0, 1, 2, 3, 4, 5, 6, 1, 2, 1] 0
373 [0, 1, 2, 3, 4, 5, 6, 1, 2] 0
374 [0, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 3, 4, 3] 0
375 [0, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 3, 4] 0
376 [0, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 3] 0
377 [0, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 4] 0
378 [0, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5] 0
379 [0, 1, 2, 3, 4, 5, 6, 1, 3, 4, 3] 0
380 [0, 1, 2, 3, 4, 5, 6, 1, 3, 4] 0
381 [0, 1, 2, 3, 4, 5, 6, 1, 3, 5] 0
382 [0, 1, 2, 3, 4, 5, 6, 1, 3] 0
383 [0, 1, 2, 3, 4, 5, 6, 1, 4, 5, 4] 0
384 [0, 1, 2, 3, 4, 5, 6, 1, 4, 5] 0
385 [0, 1, 2, 3, 4, 5, 6, 1, 4] 0
386 [0, 1, 2, 3, 4, 5, 6, 1, 5] 0
387 [0, 1, 2, 3, 4, 5, 6, 1] 0
388 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2, 3, 2] 0
389 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2, 3] 0
390 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2] 0
391 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 3] 0
392 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4] 0
393 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 2] 0
394 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3] 0
395 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 4] 0
396 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2] 0
397 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 3, 4, 3] 0
398 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 3, 4] 0
399 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 3] 0
400 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 4] 0
401 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5] 0
402 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3, 2] 0
403 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3] 0
404 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 2] 0
405 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 3] 0
406 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4] 0
407 [0, 1, 2, 3, 4, 5, 6, 2, 3, 5, 2] 0
408 [0, 1, 2, 3, 4, 5, 6, 2, 3, 5] 0
409 [0, 1, 2, 3, 4, 5, 6, 2, 3, 2] 0
410 [0, 1, 2, 3, 4, 5, 6, 2, 3] 0
411 [0, 1, 2, 3, 4, 5, 6, 2, 4, 5, 4] 0
412 [0, 1, 2, 3, 4, 5, 6, 2, 4, 5] 0
413 [0, 1, 2, 3, 4, 5, 6, 2, 4] 0
414 [0, 1, 2, 3, 4, 5, 6, 2, 5] 0
415 [0, 1, 2, 3, 4, 5, 6, 2] 0
416 [0, 1, 2, 3, 4, 5, 6, 3, 4, 5, 3, 4, 3] 0
417 [0, 1, 2, 3, 4, 5, 6, 3, 4, 5, 3, 4] 0
418 [0, 1, 2, 3, 4, 5, 6, 3, 4, 5, 3] 0
419 [0, 1, 2, 3, 4, 5, 6, 3, 4, 5, 4] 0
420 [0, 1, 2, 3, 4, 5, 6, 3, 4, 5] 0
421 [0, 1, 2, 3, 4, 5, 6, 3, 4, 3] 0
422 [0, 1, 2, 3, 4, 5, 6, 3, 4] 0
423 [0, 1, 2, 3, 4, 5, 6, 3, 5] 0
424 [0, 1, 2, 3, 4, 5, 6, 3] 0
425 [0, 1, 2, 3, 4, 5, 6, 4, 5, 4] 0
426 [0, 1, 2, 3, 4, 5, 6, 4, 5] 0
427 [0, 1, 2, 3, 4, 5, 6, 4] 0
428 [0, 1, 2, 3, 4, 5, 6, 5] 0
429 [0, 1, 2, 3, 4, 5, 6] 0
430 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0] 0
431 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1] 0
432 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0] 0
433 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 1] 0
434 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2] 0
435 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0] 0
436 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1] 0
437 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 2] 0
438 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0] 0
439 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2, 1] 0
440 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2] 0
441 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1] 0
442 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 2] 0
443 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3] 0
444 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0] 0
445 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1] 0
446 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 0] 0
447 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 1] 0
448 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2] 0
449 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 3, 0] 0
450 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 3] 0
451 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 0] 0
452 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1] 0
453 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 2, 3, 2] 0
454 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 2, 3] 0
455 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 2] 0
456 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 3] 0
457 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0] 0
458 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
459 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
460 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3, 1] 0
461 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3, 2] 0
462 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3] 0
463 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 1] 0
464 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2] 0
465 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 3] 0
466 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1] 0
467 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 2, 3, 2] 0
468 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 2, 3] 0
469 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 2] 0
470 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 3] 0
471 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4] 0
472 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0] 0
473 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 0, 1] 0
474 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 0] 0
475 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 1] 0
476 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2] 0
477 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 0] 0
478 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1] 0
479 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 2] 0
480 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0] 0
481 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 1, 2, 1] 0
482 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 1, 2] 0
483 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 1] 0
484 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 2] 0
485 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3] 0
486 [0, 1, 2, 3, 4, 5, 0, 1, 2, 4, 0, 1, 0] 0
487 [0, 1, 2, 3, 4, 5, 0, 1, 2, 4, 0, 1] 0
488 [0, 1, 2, 3, 4, 5, 0, 1, 2, 4, 0] 0
489 [0, 1, 2, 3, 4, 5, 0, 1, 2, 4, 1] 0
490 [0, 1, 2, 3, 4, 5, 0, 1, 2, 4] 0
491 [0, 1, 2, 3, 4, 5, 0, 1, 2, 0, 1, 0] 0
492 [0, 1, 2, 3, 4, 5, 0, 1, 2, 0, 1] 0
493 [0, 1, 2, 3, 4, 5, 0, 1, 2, 0] 0
494 [0, 1, 2, 3, 4, 5, 0, 1, 2, 1] 0
495 [0, 1, 2, 3, 4, 5, 0, 1, 2] 0
496 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 0, 3] 0
497 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 0] 0
498 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 3] 0
499 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4] 0
500 [0, 1, 2, 3, 4, 5, 0, 1, 3, 0] 0
501 [0, 1, 2, 3, 4, 5, 0, 1, 3] 0
502 [0, 1, 2, 3, 4, 5, 0, 1, 4, 0] 0
503 [0, 1, 2, 3, 4, 5, 0, 1, 4] 0
504 [0, 1, 2, 3, 4, 5, 0, 1, 0] 0
505 [0, 1, 2, 3, 4, 5, 0, 1] 0
506 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 2, 3, 2] 0
507 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 2, 3] 0
508 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 2] 0
509 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 3] 0
510 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4] 0
511 [0, 1, 2, 3, 4, 5, 0, 2, 3, 2] 0
512 [0, 1, 2, 3, 4, 5, 0, 2, 3] 0
513 [0, 1, 2, 3, 4, 5, 0, 2, 4] 0
514 [0, 1, 2, 3, 4, 5, 0, 2] 0
515 [0, 1, 2, 3, 4, 5, 0, 3, 4, 3] 0
516 [0, 1, 2, 3, 4, 5, 0, 3, 4] 0
517 [0, 1, 2, 3, 4, 5, 0, 3] 0
518 [0, 1, 2, 3, 4, 5, 0, 4] 0
519 [0, 1, 2, 3, 4, 5, 0] 0
520 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
521 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
522 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1] 0
523 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 2] 0
524 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] 0
525 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1] 0
526 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] 0
527 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 3] 0
528 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1] 0
529 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3, 2] 0
530 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3] 0
531 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2] 0
532 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 3] 0
533 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4] 0
534 [0, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1] 0
535 [0, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2] 0
536 [0, 1, 2, 3, 4, 5, 1, 2, 3, 1] 0
537 [0, 1, 2, 3, 4, 5, 1, 2, 3, 2] 0
538 [0, 1, 2, 3, 4, 5, 1, 2, 3] 0
539 [0, 1, 2, 3, 4, 5, 1, 2, 4, 1] 0
540 [0, 1, 2, 3, 4, 5, 1, 2, 4] 0
541 [0, 1, 2, 3, 4, 5, 1, 2, 1] 0
542 [0, 1, 2, 3, 4, 5, 1, 2] 0
543 [0, 1, 2, 3, 4, 5, 1, 3, 4, 3] 0
544 [0, 1, 2, 3, 4, 5, 1, 3, 4] 0
545 [0, 1, 2, 3, 4, 5, 1, 3] 0
546 [0, 1, 2, 3, 4, 5, 1, 4] 0
547 [0, 1, 2, 3, 4, 5, 1] 0
548 [0, 1, 2, 3, 4, 5, 2, 3, 4, 2, 3, 2] 0
549 [0, 1, 2, 3, 4, 5, 2, 3, 4, 2, 3] 0
550 [0, 1, 2, 3, 4, 5, 2, 3, 4, 2] 0
551 [0, 1, 2, 3, 4, 5, 2, 3, 4, 3] 0
552 [0, 1, 2, 3, 4, 5, 2, 3, 4] 0
553 [0, 1, 2, 3, 4, 5, 2, 3, 2] 0
554 [0, 1, 2, 3, 4, 5, 2, 3] 0
555 [0, 1, 2, 3, 4, 5, 2, 4] 0
556 [0, 1, 2, 3, 4, 5, 2] 0
557 [0, 1, 2, 3, 4, 5, 3, 4, 3] 0
558 [0, 1, 2, 3, 4, 5, 3, 4] 0
559 [0, 1, 2, 3, 4, 5, 3] 0
560 [0, 1, 2, 3, 4, 5, 4] 0
561 [0, 1, 2, 3, 4, 5] 0
562 [0, 1, 2, 3, 4, 6, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0] 0
563 [0, 1, 2, 3, 4, 6, 0, 1, 2, 3, 0, 1, 2, 0, 1] 0
564 [0, 1, 2, 3, 4, 6, 0, 1, 2, 3, 0, 1, 2, 0] 0
565 [0, 1, 2, 3, 4, 6, 0, 1, 2, 3, 0, 1, 2, 1] 0
566 [0, 1, 2, 3, 4, 6, 0, 1, 2, 3, 0, 1, 2] 0
567 [0, 1, 2, 3, 4, 6, 0, 1, 2, 3, 0, 1, 0] 0
568 [0, 1, 2, 3, 4, 6, 0, 1, 2, 3, 0, 1] 0
569 [0, 1, 2, 3, 4, 6, 0, 1, 2, 3, 0, 2] 0
570 [0, 1, 2, 3, 4, 6, 0, 1, 2, 3, 0] 0
571 [0, 1, 2, 3, 4, 6, 0, 1, 2, 3, 1, 2, 1] 0
572 [0, 1, 2, 3, 4, 6, 0, 1, 2, 3, 1, 2] 0
573 [0, 1, 2, 3, 4, 6, 0, 1, 2, 3, 1] 0
574 [0, 1, 2, 3, 4, 6, 0, 1, 2, 3, 2] 0
575 [0, 1, 2, 3, 4, 6, 0, 1, 2, 3] 0
576 [0, 1, 2, 3, 4, 6, 0, 1, 2, 0, 1, 0] 0
577 [0, 1, 2, 3, 4, 6, 0, 1, 2, 0, 1] 0
578 [0, 1, 2, 3, 4, 6, 0, 1, 2, 0] 0
579 [0, 1, 2, 3, 4, 6, 0, 1, 2, 1] 0
580 [0, 1, 2, 3, 4, 6, 0, 1, 2] 0
581 [0, 1, 2, 3, 4, 6, 0, 1, 3, 0] 0
582 [0, 1, 2, 3, 4, 6, 0, 1, 3] 0
583 [0, 1, 2, 3, 4, 6, 0, 1, 0] 0
584 [0, 1, 2, 3, 4, 6, 0, 1] 0
585 [0, 1, 2, 3, 4, 6, 0, 2, 3, 2] 0
586 [0, 1, 2, 3, 4, 6, 0, 2, 3] 0
587 [0, 1, 2, 3, 4, 6, 0, 2] 0
588 [0, 1, 2, 3, 4, 6, 0, 3] 0
589 [0, 1, 2, 3, 4, 6, 0] 0
590 [0, 1, 2, 3, 4, 6, 1, 2, 3, 1, 2, 1] 0
591 [0, 1, 2, 3, 4, 6, 1, 2, 3, 1, 2] 0
592 [0, 1, 2, 3, 4, 6, 1, 2, 3, 1] 0
593 [0, 1, 2, 3, 4, 6, 1, 2, 3, 2] 0
594 [0, 1, 2, 3, 4, 6, 1, 2, 3] 0
595 [0, 1, 2, 3, 4, 6, 1, 2, 1] 0
596 [0, 1, 2, 3, 4, 6, 1, 2] 0
597 [0, 1, 2, 3, 4, 6, 1, 3] 0
598 [0, 1, 2, 3, 4, 6, 1] 0
599 [0, 1, 2, 3, 4, 6, 2, 3, 2] 0
600 [0, 1, 2, 3, 4, 6, 2, 3] 0
601 [0, 1, 2, 3, 4, 6, 2] 0
602 [0, 1, 2, 3, 4, 6, 3] 0
603 [0, 1, 2, 3, 4, 6] 0
604 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0] 0
605 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1] 0
606 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0] 0
607 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 1] 0
608 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2] 0
609 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0] 0
610 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1] 0
611 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 2] 0
612 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0] 0
613 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2, 1] 0
614 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2] 0
615 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1] 0
616 [0, 1, 2, 3, 4, 0, 1, 2, 3, 2] 0
617 [0, 1, 2, 3, 4, 0, 1, 2, 3] 0
618 [0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0] 0
619 [0, 1, 2, 3, 4, 0, 1, 2, 0, 1] 0
620 [0, 1, 2, 3, 4, 0, 1, 2, 0] 0
621 [0, 1, 2, 3, 4, 0, 1, 2, 1] 0
622 [0, 1, 2, 3, 4, 0, 1, 2] 0
623 [0, 1, 2, 3, 4, 0, 1, 3, 0] 0
624 [0, 1, 2, 3, 4, 0, 1, 3] 0
625 [0, 1, 2, 3, 4, 0, 1, 0] 0
626 [0, 1, 2, 3, 4, 0, 1] 0
627 [0, 1, 2, 3, 4, 0, 2, 3, 2] 0
628 [0, 1, 2, 3, 4, 0, 2, 3] 0
629 [0, 1, 2, 3, 4, 0, 2] 0
630 [0, 1, 2, 3, 4, 0, 3] 0
631 [0, 1, 2, 3, 4, 0] 0
632 [0, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
633 [0, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
634 [0, 1, 2, 3, 4, 1, 2, 3, 1] 0
635 [0, 1, 2, 3, 4, 1, 2, 3, 2] 0
636 [0, 1, 2, 3, 4, 1, 2, 3] 0
637 [0, 1, 2, 3, 4, 1, 2, 1] 0
638 [0, 1, 2, 3, 4, 1, 2] 0
639 [0, 1, 2, 3, 4, 1, 3] 0
640 [0, 1, 2, 3, 4, 1] 0
641 [0, 1, 2, 3, 4, 2, 3, 2] 0
642 [0, 1, 2, 3, 4, 2, 3] 0
643 [0, 1, 2, 3, 4, 2] 0
644 [0, 1, 2, 3, 4, 3] 0
645 [0, 1, 2, 3, 4] 0
646 [0, 1, 2, 3, 5, 6, 0, 1, 2, 5, 0, 1, 0] 0
647 [0, 1, 2, 3, 5, 6, 0, 1, 2, 5, 0, 1] 0
648 [0, 1, 2, 3, 5, 6, 0, 1, 2, 5, 0] 0
649 [0, 1, 2, 3, 5, 6, 0, 1, 2, 5, 1] 0
650 [0, 1, 2, 3, 5, 6, 0, 1, 2, 5] 0
651 [0, 1, 2, 3, 5, 6, 0, 1, 2, 0, 1, 0] 0
652 [0, 1, 2, 3, 5, 6, 0, 1, 2, 0, 1] 0
653 [0, 1, 2, 3, 5, 6, 0, 1, 2, 0] 0
654 [0, 1, 2, 3, 5, 6, 0, 1, 2, 1] 0
655 [0, 1, 2, 3, 5, 6, 0, 1, 2] 0
656 [0, 1, 2, 3, 5, 6, 0, 1, 5, 0] 0
657 [0, 1, 2, 3, 5, 6, 0, 1, 5] 0
658 [0, 1, 2, 3, 5, 6, 0, 1, 0] 0
659 [0, 1, 2, 3, 5, 6, 0, 1] 0
660 [0, 1, 2, 3, 5, 6, 0, 2, 5] 0
661 [0, 1, 2, 3, 5, 6, 0, 2] 0
662 [0, 1, 2, 3, 5, 6, 0, 5] 0
663 [0, 1, 2, 3, 5, 6, 0] 0
664 [0, 1, 2, 3, 5, 6, 1, 2, 5, 1] 0
665 [0, 1, 2, 3, 5, 6, 1, 2, 5] 0
666 [0, 1, 2, 3, 5, 6, 1, 2, 1] 0
667 [0, 1, 2, 3, 5, 6, 1, 2] 0
668 [0, 1, 2, 3, 5, 6, 1, 5] 0
669 [0, 1, 2, 3, 5, 6, 1] 0
670 [0, 1, 2, 3, 5, 6, 2, 5] 0
671 [0, 1, 2, 3, 5, 6, 2] 0
672 [0, 1, 2, 3, 5, 6, 5] 0
673 [0, 1, 2, 3, 5, 6] 0
674 [0, 1, 2, 3, 5, 0, 1, 2, 0, 1, 0] 0
675 [0, 1, 2, 3, 5, 0, 1, 2, 0, 1] 0
676 [0, 1, 2, 3, 5, 0, 1, 2, 0] 0
677 [0, 1, 2, 3, 5, 0, 1, 2, 1] 0
678 [0, 1, 2, 3, 5, 0, 1, 2] 0
679 [0, 1, 2, 3, 5, 0, 1, 0] 0
680 [0, 1, 2, 3, 5, 0, 1] 0
681 [0, 1, 2, 3, 5, 0, 2] 0
682 [0, 1, 2, 3, 5, 0] 0
683 [0, 1, 2, 3, 5, 1, 2, 1] 0
684 [0, 1, 2, 3, 5, 1, 2] 0
685 [0, 1, 2, 3, 5, 1] 0
686 [0, 1, 2, 3, 5, 2] 0
687 [0, 1, 2, 3, 5] 0
688 [0, 1, 2, 3, 6, 0, 1, 2, 0, 1, 0] 0
689 [0, 1, 2, 3, 6, 0, 1, 2, 0, 1] 0
690 [0, 1, 2, 3, 6, 0, 1, 2, 0] 0
691 [0, 1, 2, 3, 6, 0, 1, 2, 1] 0
692 [0, 1, 2, 3, 6, 0, 1, 2] 0
693 [0, 1, 2, 3, 6, 0, 1, 0] 0
694 [0, 1, 2, 3, 6, 0, 1] 0
695 [0, 1, 2, 3, 6, 0, 2] 0
696 [0, 1, 2, 3, 6, 0] 0
697 [0, 1, 2, 3, 6, 1, 2, 1] 0
698 [0, 1, 2, 3, 6, 1, 2] 0
699 [0, 1, 2, 3, 6, 1] 0
700 [0, 1, 2, 3, 6, 2] 0
701 [0, 1, 2, 3, 6] 0
702 [0, 1, 2, 3, 0, 1, 2, 0, 1, 0] 0
703 [0, 1, 2, 3, 0, 1, 2, 0, 1] 0
704 [0, 1, 2, 3, 0, 1, 2, 0] 0
705 [0, 1, 2, 3, 0, 1, 2, 1] 0
706 [0, 1, 2, 3, 0, 1, 2] 0
707 [0, 1, 2, 3, 0, 1, 0] 0
708 [0, 1, 2, 3, 0, 1] 0
709 [0, 1, 2, 3, 0, 2] 0
710 [0, 1, 2, 3, 0] 0
711 [0, 1, 2, 3, 1, 2, 1] 0
712 [0, 1, 2, 3, 1, 2] 0
713 [0, 1, 2, 3, 1] 0
714 [0, 1, 2, 3, 2] 0
715 [0, 1, 2, 3] 0
716 [0, 1, 2, 4, 5, 6, 0, 1, 4, 5, 0, 4] 0
717 [0, 1, 2, 4, 5, 6, 0, 1, 4, 5, 0] 0
718 [0, 1, 2, 4, 5, 6, 0, 1, 4, 5, 4] 0
719 [0, 1, 2, 4, 5, 6, 0, 1, 4, 5] 0
720 [0, 1, 2, 4, 5, 6, 0, 1, 4, 0] 0
721 [0, 1, 2, 4, 5, 6, 0, 1, 4] 0
722 [0, 1, 2, 4, 5, 6, 0, 1, 5, 0] 0
723 [0, 1, 2, 4, 5, 6, 0, 1, 5] 0
724 [0, 1, 2, 4, 5, 6, 0, 1, 0] 0
725 [0, 1, 2, 4, 5, 6, 0, 1] 0
726 [0, 1, 2, 4, 5, 6, 0, 4, 5, 4] 0
727 [0, 1, 2, 4, 5, 6, 0, 4, 5] 0
728 [0, 1, 2, 4, 5, 6, 0, 4] 0
729 [0, 1, 2, 4, 5, 6, 0, 5] 0
730 [0, 1, 2, 4, 5, 6, 0] 0
731 [0, 1, 2, 4, 5, 6, 1, 4, 5, 4] 0
732 [0, 1, 2, 4, 5, 6, 1, 4, 5] 0
733 [0, 1, 2, 4, 5, 6, 1, 4] 0
734 [0, 1, 2, 4, 5, 6, 1, 5] 0
735 [0, 1, 2, 4, 5, 6, 1] 0
736 [0, 1, 2, 4, 5, 6, 4, 5, 4] 0
737 [0, 1, 2, 4, 5, 6, 4, 5] 0
738 [0, 1, 2, 4, 5, 6, 4] 0
739 [0, 1, 2, 4, 5, 6, 5] 0
740 [0, 1, 2, 4, 5, 6] 0
741 [0, 1, 2, 4, 5, 0, 1, 4, 0] 0
742 [0, 1, 2, 4, 5, 0, 1, 4] 0
743 [0, 1, 2, 4, 5, 0, 1, 0] 0
744 [0, 1, 2, 4, 5, 0, 1] 0
745 [0, 1, 2, 4, 5, 0, 4] 0
746 [0, 1, 2, 4, 5, 0] 0
747 [0, 1, 2, 4, 5, 1, 4] 0
748 [0, 1, 2, 4, 5, 1] 0
749 [0, 1, 2, 4, 5, 4] 0
750 [0, 1, 2, 4, 5] 0
751 [0, 1, 2, 4, 6, 0, 1, 0] 0
752 [0, 1, 2, 4, 6, 0, 1] 0
753 [0, 1, 2, 4, 6, 0] 0
754 [0, 1, 2, 4, 6, 1] 0
755 [0, 1, 2, 4, 6] 0
756 [0, 1, 2, 4, 0, 1, 0] 0
757 [0, 1, 2, 4, 0, 1] 0
758 [0, 1, 2, 4, 0] 0
759 [0, 1, 2, 4, 1] 0
760 [0, 1, 2, 4] 0
761 [0, 1, 2, 5, 6, 0, 1, 5, 0] 0
762 [0, 1, 2, 5, 6, 0, 1, 5] 0
763 [0, 1, 2, 5, 6, 0, 1, 0] 0
764 [0, 1, 2, 5, 6, 0, 1] 0
765 [0, 1, 2, 5, 6, 0, 5] 0
766 [0, 1, 2, 5, 6, 0] 0
767 [0, 1, 2, 5, 6, 1, 5] 0
768 [0, 1, 2, 5, 6, 1] 0
769 [0, 1, 2, 5, 6, 5] 0
770 [0, 1, 2, 5, 6] 0
771 [0, 1, 2, 5, 0, 1, 0] 0
772 [0, 1, 2, 5, 0, 1] 0
773 [0, 1, 2, 5, 0] 0
774 [0, 1, 2, 5, 1] 0
775 [0, 1, 2, 5] 0
776 [0, 1, 2, 6, 0, 1, 0] 0
777 [0, 1, 2, 6, 0, 1] 0
778 [0, 1, 2, 6, 0] 0
779 [0, 1, 2, 6, 1] 0
780 [0, 1, 2, 6] 0
781 [0, 1, 2, 0, 1, 0] 0
782 [0, 1, 2, 0, 1] 0
783 [0, 1, 2, 0] 0
784 [0, 1, 2, 1] 0
785 [0, 1, 2] 0
786 [0, 1, 3, 4, 5, 6, 0, 3, 4, 5, 3, 4, 3] 0
787 [0, 1, 3, 4, 5, 6, 0, 3, 4, 5, 3, 4] 0
788 [0, 1, 3, 4, 5, 6, 0, 3, 4, 5, 3] 0
789 [0, 1, 3, 4, 5, 6, 0, 3, 4, 5, 4] 0
790 [0, 1, 3, 4, 5, 6, 0, 3, 4, 5] 0
791 [0, 1, 3, 4, 5, 6, 0, 3, 4, 3] 0
792 [0, 1, 3, 4, 5, 6, 0, 3, 4] 0
793 [0, 1, 3, 4, 5, 6, 0, 3, 5] 0
794 [0, 1, 3, 4, 5, 6, 0, 3] 0
795 [0, 1, 3, 4, 5, 6, 0, 4, 5, 4] 0
796 [0, 1, 3, 4, 5, 6, 0, 4, 5] 0
797 [0, 1, 3, 4, 5, 6, 0, 4] 0
798 [0, 1, 3, 4, 5, 6, 0, 5] 0
799 [0, 1, 3, 4, 5, 6, 0] 0
800 [0, 1, 3, 4, 5, 6, 3, 4, 5, 3, 4, 3] 0
801 [0, 1, 3, 4, 5, 6, 3, 4, 5, 3, 4] 0
802 [0, 1, 3, 4, 5, 6, 3, 4, 5, 3] 0
803 [0, 1, 3, 4, 5, 6, 3, 4, 5, 4] 0
804 [0, 1, 3, 4, 5, 6, 3, 4, 5] 0
805 [0, 1, 3, 4, 5, 6, 3, 4, 3] 0
806 [0, 1, 3, 4, 5, 6, 3, 4] 0
807 [0, 1, 3, 4, 5, 6, 3, 5] 0
808 [0, 1, 3, 4, 5, 6, 3] 0
809 [0, 1, 3, 4, 5, 6, 4, 5, 4] 0
810 [0, 1, 3, 4, 5, 6, 4, 5] 0
811 [0, 1, 3, 4, 5, 6, 4] 0
812 [0, 1, 3, 4, 5, 6, 5] 0
813 [0, 1, 3, 4, 5, 6] 0
814 [0, 1, 3, 4, 5, 0, 3, 4, 3] 0
815 [0, 1, 3, 4, 5, 0, 3, 4] 0
816 [0, 1, 3, 4, 5, 0, 3] 0
817 [0, 1, 3, 4, 5, 0, 4] 0
818 [0, 1, 3, 4, 5, 0] 0
819 [0, 1, 3, 4, 5, 3, 4, 3] 0
820 [0, 1, 3, 4, 5, 3, 4] 0
821 [0, 1, 3, 4, 5, 3] 0
822 [0, 1, 3, 4, 5, 4] 0
823 [0, 1, 3, 4, 5] 0
824 [0, 1, 3, 4, 6, 0, 3] 0
825 [0, 1, 3, 4, 6, 0] 0
826 [0, 1, 3, 4, 6, 3] 0
827 [0, 1, 3, 4, 6] 0
828 [0, 1, 3, 4, 0, 3] 0
829 [0, 1, 3, 4, 0] 0
830 [0, 1, 3, 4, 3] 0
831 [0, 1, 3, 4] 0
832 [0, 1, 3, 5, 6, 0, 5] 0
833 [0, 1, 3, 5, 6, 0] 0
834 [0, 1, 3, 5, 6, 5] 0
835 [0, 1, 3, 5, 6] 0
836 [0, 1, 3, 5, 0] 0
837 [0, 1, 3, 5] 0
838 [0, 1, 3, 6, 0] 0
839 [0, 1, 3, 6] 0
840 [0, 1, 3, 0] 0
841 [0, 1, 3] 0
842 [0, 1, 4, 5, 6, 0, 4, 5, 4] 0
843 [0, 1, 4, 5, 6, 0, 4, 5] 0
844 [0, 1, 4, 5, 6, 0, 4] 0
845 [0, 1, 4, 5, 6, 0, 5] 0
846 [0, 1, 4, 5, 6, 0] 0
847 [0, 1, 4, 5, 6, 4, 5, 4] 0
848 [0, 1, 4, 5, 6, 4, 5] 0
849 [0, 1, 4, 5, 6, 4] 0
850 [0, 1, 4, 5, 6, 5] 0
851 [0, 1, 4, 5, 6] 0
852 [0, 1, 4, 5, 0, 4] 0
853 [0, 1, 4, 5, 0] 0
854 [0, 1, 4, 5, 4] 0
855 [0, 1, 4, 5] 0
856 [0, 1, 4, 6, 0] 0
857 [0, 1, 4, 6] 0
858 [0, 1, 4, 0] 0
859 [0, 1, 4] 0
860 [0, 1, 5, 6, 0, 5] 0
861 [0, 1, 5, 6, 0] 0
862 [0, 1, 5, 6, 5] 0
863 [0, 1, 5, 6] 0
864 [0, 1, 5, 0] 0
865 [0, 1, 5] 0
866 [0, 1, 6, 0] 0
867 [0, 1, 6] 0
868 [0, 1, 0] 0
869 [0, 1] 0
870 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2, 3, 2] 0
871 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2, 3] 0
872 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2] 0
873 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 3] 0
874 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4] 0
875 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 2] 0
876 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3] 0
877 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 4] 0
878 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2] 0
879 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 3, 4, 3] 0
880 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 3, 4] 0
881 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 3] 0
882 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 4] 0
883 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5] 0
884 [0, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3, 2] 0
885 [0, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3] 0
886 [0, 2, 3, 4, 5, 6, 2, 3, 4, 2] 0
887 [0, 2, 3, 4, 5, 6, 2, 3, 4, 3] 0
888 [0, 2, 3, 4, 5, 6, 2, 3, 4] 0
889 [0, 2, 3, 4, 5, 6, 2, 3, 5, 2] 0
890 [0, 2, 3, 4, 5, 6, 2, 3, 5] 0
891 [0, 2, 3, 4, 5, 6, 2, 3, 2] 0
892 [0, 2, 3, 4, 5, 6, 2, 3] 0
893 [0, 2, 3, 4, 5, 6, 2, 4, 5, 4] 0
894 [0, 2, 3, 4, 5, 6, 2, 4, 5] 0
895 [0, 2, 3, 4, 5, 6, 2, 4] 0
896 [0, 2, 3, 4, 5, 6, 2, 5] 0
897 [0, 2, 3, 4, 5, 6, 2] 0
898 [0, 2, 3, 4, 5, 6, 3, 4, 5, 3, 4, 3] 0
899 [0, 2, 3, 4, 5, 6, 3, 4, 5, 3, 4] 0
900 [0, 2, 3, 4, 5, 6, 3, 4, 5, 3] 0
901 [0, 2, 3, 4, 5, 6, 3, 4, 5, 4] 0
902 [0, 2, 3, 4, 5, 6, 3, 4, 5] 0
903 [0, 2, 3, 4, 5, 6, 3, 4, 3] 0
904 [0, 2, 3, 4, 5, 6, 3, 4] 0
905 [0, 2, 3, 4, 5, 6, 3, 5] 0
906 [0, 2, 3, 4, 5, 6, 3] 0
907 [0, 2, 3, 4, 5, 6, 4, 5, 4] 0
908 [0, 2, 3, 4, 5, 6, 4, 5] 0
909 [0, 2, 3, 4, 5, 6, 4] 0
910 [0, 2, 3, 4, 5, 6, 5] 0
911 [0, 2, 3, 4, 5, 6] 0
912 [0, 2, 3, 4, 5, 2, 3, 4, 2, 3, 2] 0
913 [0, 2, 3, 4, 5, 2, 3, 4, 2, 3] 0
914 [0, 2, 3, 4, 5, 2, 3, 4, 2] 0
915 [0, 2, 3, 4, 5, 2, 3, 4, 3] 0
916 [0, 2, 3, 4, 5, 2, 3, 4] 0
917 [0, 2, 3, 4, 5, 2, 3, 2] 0
918 [0, 2, 3, 4, 5, 2, 3] 0
919 [0, 2, 3, 4, 5, 2, 4] 0
920 [0, 2, 3, 4, 5, 2] 0
921 [0, 2, 3, 4, 5, 3, 4, 3] 0
922 [0, 2, 3, 4, 5, 3, 4] 0
923 [0, 2, 3, 4, 5, 3] 0
924 [0, 2, 3, 4, 5, 4] 0
925 [0, 2, 3, 4, 5] 0
926 [0, 2, 3, 4, 6, 2, 3, 2] 0
927 [0, 2, 3, 4, 6, 2, 3] 0
928 [0, 2, 3, 4, 6, 2] 0
929 [0, 2, 3, 4, 6, 3] 0
930 [0, 2, 3, 4, 6] 0
931 [0, 2, 3, 4, 2, 3, 2] 0
932 [0, 2, 3, 4, 2, 3] 0
933 [0, 2, 3, 4, 2] 0
934 [0, 2, 3, 4, 3] 0
935 [0, 2, 3, 4] 0
936 [0, 2, 3, 5, 6, 2, 5] 0
937 [0, 2, 3, 5, 6, 2] 0
938 [0, 2, 3, 5, 6, 5] 0
939 [0, 2, 3, 5, 6] 0
940 [0, 2, 3, 5, 2] 0
941 [0, 2, 3, 5] 0
942 [0, 2, 3, 6, 2] 0
943 [0, 2, 3, 6] 0
944 [0, 2, 3, 2] 0
945 [0, 2, 3] 0
946 [0, 2, 4, 5, 6, 4, 5, 4] 0
947 [0, 2, 4, 5, 6, 4, 5] 0
948 [0, 2, 4, 5, 6, 4] 0
949 [0, 2, 4, 5, 6, 5] 0
950 [0, 2, 4, 5, 6] 0
951 [0, 2, 4, 5, 4] 0
952 [0, 2, 4, 5] 0
953 [0, 2, 4, 6] 0
954 [0, 2, 4] 0
955 [0, 2, 5, 6, 5] 0
956 [0, 2, 5, 6] 0
957 [0, 2, 5] 0
958 [0, 2, 6] 0
959 [0, 2] 0
960 [0, 3, 4, 5, 6, 3, 4, 5, 3, 4, 3] 0
961 [0, 3, 4, 5, 6, 3, 4, 5, 3, 4] 0
962 [0, 3, 4, 5, 6, 3, 4, 5, 3] 0
963 [0, 3, 4, 5, 6, 3, 4, 5, 4] 0
964 [0, 3, 4, 5, 6, 3, 4, 5] 0
965 [0, 3, 4, 5, 6, 3, 4, 3] 0
966 [0, 3, 4, 5, 6, 3, 4] 0
967 [0, 3, 4, 5, 6, 3, 5] 0
968 [0, 3, 4, 5, 6, 3] 0
969 [0, 3, 4, 5, 6, 4, 5, 4] 0
970 [0, 3, 4, 5, 6, 4, 5] 0
971 [0, 3, 4, 5, 6, 4] 0
972 [0, 3, 4, 5, 6, 5] 0
973 [0, 3, 4, 5, 6] 0
974 [0, 3, 4, 5, 3, 4, 3] 0
975 [0, 3, 4, 5, 3, 4] 0
976 [0, 3, 4, 5, 3] 0
977 [0, 3, 4, 5, 4] 0
978 [0, 3, 4, 5] 0
979 [0, 3, 4, 6, 3] 0
980 [0, 3, 4, 6] 0
981 [0, 3, 4, 3] 0
982 [0, 3, 4] 0
983 [0, 3, 5, 6, 5] 0
984 [0, 3, 5, 6] 0
985 [0, 3, 5] 0
986 [0, 3, 6] 0
987 [0, 3] 0
988 [0, 4, 5, 6, 4, 5, 4] 0
989 [0, 4, 5, 6, 4, 5] 0
990 [0, 4, 5, 6, 4] 0
991 [0, 4, 5, 6, 5] 0
992 [0, 4, 5, 6] 0
993 [0, 4, 5, 4] 0
994 [0, 4, 5] 0
995 [0, 4, 6] 0
996 [0, 4] 0
997 [0, 5, 6, 5] 0
998 [0, 5, 6] 0
999 [0, 5] 0
1000 [0, 6] 0
1001 [0] 0
1002 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
1003 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
1004 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1] 0
1005 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 2] 0
1006 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] 0
1007 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1] 0
1008 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] 0
1009 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 3] 0
1010 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1] 0
1011 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3, 2] 0
1012 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3] 0
1013 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2] 0
1014 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 3] 0
1015 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4] 0
1016 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1] 0
1017 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2] 0
1018 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1] 0
1019 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 2] 0
1020 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3] 0
1021 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 4, 1] 0
1022 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 4] 0
1023 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 1] 0
1024 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2] 0
1025 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 3, 4, 3] 0
1026 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 3, 4] 0
1027 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 3] 0
1028 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 4] 0
1029 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1] 0
1030 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 4, 2, 3, 2] 0
1031 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 4, 2, 3] 0
1032 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 4, 2] 0
1033 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 4, 3] 0
1034 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 4] 0
1035 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 2] 0
1036 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3] 0
1037 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 4] 0
1038 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2] 0
1039 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 3, 4, 3] 0
1040 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 3, 4] 0
1041 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 3] 0
1042 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 4] 0
1043 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5] 0
1044 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
1045 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
1046 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 1] 0
1047 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 2] 0
1048 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3] 0
1049 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 1] 0
1050 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2] 0
1051 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 3] 0
1052 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1] 0
1053 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 2, 3, 2] 0
1054 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 2, 3] 0
1055 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 2] 0
1056 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 3] 0
1057 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4] 0
1058 [1, 2, 3, 4, 5, 6, 1, 2, 3, 5, 1, 2, 1] 0
1059 [1, 2, 3, 4, 5, 6, 1, 2, 3, 5, 1, 2] 0
1060 [1, 2, 3, 4, 5, 6, 1, 2, 3, 5, 1] 0
1061 [1, 2, 3, 4, 5, 6, 1, 2, 3, 5, 2] 0
1062 [1, 2, 3, 4, 5, 6, 1, 2, 3, 5] 0
1063 [1, 2, 3, 4, 5, 6, 1, 2, 3, 1, 2, 1] 0
1064 [1, 2, 3, 4, 5, 6, 1, 2, 3, 1, 2] 0
1065 [1, 2, 3, 4, 5, 6, 1, 2, 3, 1] 0
1066 [1, 2, 3, 4, 5, 6, 1, 2, 3, 2] 0
1067 [1, 2, 3, 4, 5, 6, 1, 2, 3] 0
1068 [1, 2, 3, 4, 5, 6, 1, 2, 4, 5, 1, 4] 0
1069 [1, 2, 3, 4, 5, 6, 1, 2, 4, 5, 1] 0
1070 [1, 2, 3, 4, 5, 6, 1, 2, 4, 5, 4] 0
1071 [1, 2, 3, 4, 5, 6, 1, 2, 4, 5] 0
1072 [1, 2, 3, 4, 5, 6, 1, 2, 4, 1] 0
1073 [1, 2, 3, 4, 5, 6, 1, 2, 4] 0
1074 [1, 2, 3, 4, 5, 6, 1, 2, 5, 1] 0
1075 [1, 2, 3, 4, 5, 6, 1, 2, 5] 0
1076 [1, 2, 3, 4, 5, 6, 1, 2, 1] 0
1077 [1, 2, 3, 4, 5, 6, 1, 2] 0
1078 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 3, 4, 3] 0
1079 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 3, 4] 0
1080 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 3] 0
1081 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 4] 0
1082 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5] 0
1083 [1, 2, 3, 4, 5, 6, 1, 3, 4, 3] 0
1084 [1, 2, 3, 4, 5, 6, 1, 3, 4] 0
1085 [1, 2, 3, 4, 5, 6, 1, 3, 5] 0
1086 [1, 2, 3, 4, 5, 6, 1, 3] 0
1087 [1, 2, 3, 4, 5, 6, 1, 4, 5, 4] 0
1088 [1, 2, 3, 4, 5, 6, 1, 4, 5] 0
1089 [1, 2, 3, 4, 5, 6, 1, 4] 0
1090 [1, 2, 3, 4, 5, 6, 1, 5] 0
1091 [1, 2, 3, 4, 5, 6, 1] 0
1092 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2, 3, 2] 0
1093 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2, 3] 0
1094 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2] 0
1095 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 3] 0
1096 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4] 0
1097 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 2] 0
1098 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3] 0
1099 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 4] 0
1100 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2] 0
1101 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 3, 4, 3] 0
1102 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 3, 4] 0
1103 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 3] 0
1104 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 4] 0
1105 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5] 0
1106 [1, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3, 2] 0
1107 [1, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3] 0
1108 [1, 2, 3, 4, 5, 6, 2, 3, 4, 2] 0
1109 [1, 2, 3, 4, 5, 6, 2, 3, 4, 3] 0
1110 [1, 2, 3, 4, 5, 6, 2, 3, 4] 0
1111 [1, 2, 3, 4, 5, 6, 2, 3, 5, 2] 0
1112 [1, 2, 3, 4, 5, 6, 2, 3, 5] 0
1113 [1, 2, 3, 4, 5, 6, 2, 3, 2] 0
1114 [1, 2, 3, 4, 5, 6, 2, 3] 0
1115 [1, 2, 3, 4, 5, 6, 2, 4, 5, 4] 0
1116 [1, 2, 3, 4, 5, 6, 2, 4, 5] 0
1117 [1, 2, 3, 4, 5, 6, 2, 4] 0
1118 [1, 2, 3, 4, 5, 6, 2, 5] 0
1119 [1, 2, 3, 4, 5, 6, 2] 0
1120 [1, 2, 3, 4, 5, 6, 3, 4, 5, 3, 4, 3] 0
1121 [1, 2, 3, 4, 5, 6, 3, 4, 5, 3, 4] 0
1122 [1, 2, 3, 4, 5, 6, 3, 4, 5, 3] 0
1123 [1, 2, 3, 4, 5, 6, 3, 4, 5, 4] 0
1124 [1, 2, 3, 4, 5, 6, 3, 4, 5] 0
1125 [1, 2, 3, 4, 5, 6, 3, 4, 3] 0
1126 [1, 2, 3, 4, 5, 6, 3, 4] 0
1127 [1, 2, 3, 4, 5, 6, 3, 5] 0
1128 [1, 2, 3, 4, 5, 6, 3] 0
1129 [1, 2, 3, 4, 5, 6, 4, 5, 4] 0
1130 [1, 2, 3, 4, 5, 6, 4, 5] 0
1131 [1, 2, 3, 4, 5, 6, 4] 0
1132 [1, 2, 3, 4, 5, 6, 5] 0
1133 [1, 2, 3, 4, 5, 6] 0
1134 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
1135 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
1136 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1] 0
1137 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 2] 0
1138 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] 0
1139 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1] 0
1140 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] 0
1141 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 3] 0
1142 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1] 0
1143 [1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3, 2] 0
1144 [1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3] 0
1145 [1, 2, 3, 4, 5, 1, 2, 3, 4, 2] 0
1146 [1, 2, 3, 4, 5, 1, 2, 3, 4, 3] 0
1147 [1, 2, 3, 4, 5, 1, 2, 3, 4] 0
1148 [1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1] 0
1149 [1, 2, 3, 4, 5, 1, 2, 3, 1, 2] 0
1150 [1, 2, 3, 4, 5, 1, 2, 3, 1] 0
1151 [1, 2, 3, 4, 5, 1, 2, 3, 2] 0
1152 [1, 2, 3, 4, 5, 1, 2, 3] 0
1153 [1, 2, 3, 4, 5, 1, 2, 4, 1] 0
1154 [1, 2, 3, 4, 5, 1, 2, 4] 0
1155 [1, 2, 3, 4, 5, 1, 2, 1] 0
1156 [1, 2, 3, 4, 5, 1, 2] 0
1157 [1, 2, 3, 4, 5, 1, 3, 4, 3] 0
1158 [1, 2, 3, 4, 5, 1, 3, 4] 0
1159 [1, 2, 3, 4, 5, 1, 3] 0
1160 [1, 2, 3, 4, 5, 1, 4] 0
1161 [1, 2, 3, 4, 5, 1] 0
1162 [1, 2, 3, 4, 5, 2, 3, 4, 2, 3, 2] 0
1163 [1, 2, 3, 4, 5, 2, 3, 4, 2, 3] 0
1164 [1, 2, 3, 4, 5, 2, 3, 4, 2] 0
1165 [1, 2, 3, 4, 5, 2, 3, 4, 3] 0
1166 [1, 2, 3, 4, 5, 2, 3, 4] 0
1167 [1, 2, 3, 4, 5, 2, 3, 2] 0
1168 [1, 2, 3, 4, 5, 2, 3] 0
1169 [1, 2, 3, 4, 5, 2, 4] 0
1170 [1, 2, 3, 4, 5, 2] 0
1171 [1, 2, 3, 4, 5, 3, 4, 3] 0
1172 [1, 2, 3, 4, 5, 3, 4] 0
1173 [1, 2, 3, 4, 5, 3] 0
1174 [1, 2, 3, 4, 5, 4] 0
1175 [1, 2, 3, 4, 5] 0
1176 [1, 2, 3, 4, 6, 1, 2, 3, 1, 2, 1] 0
1177 [1, 2, 3, 4, 6, 1, 2, 3, 1, 2] 0
1178 [1, 2, 3, 4, 6, 1, 2, 3, 1] 0
1179 [1, 2, 3, 4, 6, 1, 2, 3, 2] 0
1180 [1, 2, 3, 4, 6, 1, 2, 3] 0
1181 [1, 2, 3, 4, 6, 1, 2, 1] 0
1182 [1, 2, 3, 4, 6, 1, 2] 0
1183 [1, 2, 3, 4, 6, 1, 3] 0
1184 [1, 2, 3, 4, 6, 1] 0
1185 [1, 2, 3, 4, 6, 2, 3, 2] 0
1186 [1, 2, 3, 4, 6, 2, 3] 0
1187 [1, 2, 3, 4, 6, 2] 0
1188 [1, 2, 3, 4, 6, 3] 0
1189 [1, 2, 3, 4, 6] 0
1190 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
1191 [1, 2, 3, 4, 1, 2, 3, 1, 2] 0
1192 [1, 2, 3, 4, 1, 2, 3, 1] 0
1193 [1, 2, 3, 4, 1, 2, 3, 2] 0
1194 [1, 2, 3, 4, 1, 2, 3] 0
1195 [1, 2, 3, 4, 1, 2, 1] 0
1196 [1, 2, 3, 4, 1, 2] 0
1197 [1, 2, 3, 4, 1, 3] 0
1198 [1, 2, 3, 4, 1] 0
1199 [1, 2, 3, 4, 2, 3, 2] 0
1200 [1, 2, 3, 4, 2, 3] 0
1201 [1, 2, 3, 4, 2] 0
1202 [1, 2, 3, 4, 3] 0
1203 [1, 2, 3, 4] 0
1204 [1, 2, 3, 5, 6, 1, 2, 5, 1] 0
1205 [1, 2, 3, 5, 6, 1, 2, 5] 0
1206 [1, 2, 3, 5, 6, 1, 2, 1] 0
1207 [1, 2, 3, 5, 6, 1, 2] 0
1208 [1, 2, 3, 5, 6, 1, 5] 0
1209 [1, 2, 3, 5, 6, 1] 0
1210 [1, 2, 3, 5, 6, 2, 5] 0
1211 [1, 2, 3, 5, 6, 2] 0
1212 [1, 2, 3, 5, 6, 5] 0
1213 [1, 2, 3, 5, 6] 0
1214 [1, 2, 3, 5, 1, 2, 1] 0
1215 [1, 2, 3, 5, 1, 2] 0
1216 [1, 2, 3, 5, 1] 0
1217 [1, 2, 3, 5, 2] 0
1218 [1, 2, 3, 5] 0
1219 [1, 2, 3, 6, 1, 2, 1] 0
1220 [1, 2, 3, 6, 1, 2] 0
1221 [1, 2, 3, 6, 1] 0
1222 [1, 2, 3, 6, 2] 0
1223 [1, 2, 3, 6] 0
1224 [1, 2, 3, 1, 2, 1] 0
1225 [1, 2, 3, 1, 2] 0
1226 [1, 2, 3, 1] 0
1227 [1, 2, 3, 2] 0
1228 [1, 2, 3] 0
1229 [1, 2, 4, 5, 6, 1, 4, 5, 4] 0
1230 [1, 2, 4, 5, 6, 1, 4, 5] 0
1231 [1, 2, 4, 5, 6, 1, 4] 0
1232 [1, 2, 4, 5, 6, 1, 5] 0
1233 [1, 2, 4, 5, 6, 1] 0
1234 [1, 2, 4, 5, 6, 4, 5, 4] 0
1235 [1, 2, 4, 5, 6, 4, 5] 0
1236 [1, 2, 4, 5, 6, 4] 0
1237 [1, 2, 4, 5, 6, 5] 0
1238 [1, 2, 4, 5, 6] 0
1239 [1, 2, 4, 5, 1, 4] 0
1240 [1, 2, 4, 5, 1] 0
1241 [1, 2, 4, 5, 4] 0
1242 [1, 2, 4, 5] 0
1243 [1, 2, 4, 6, 1] 0
1244 [1, 2, 4, 6] 0
1245 [1, 2, 4, 1] 0
1246 [1, 2, 4] 0
1247 [1, 2, 5, 6, 1, 5] 0
1248 [1, 2, 5, 6, 1] 0
1249 [1, 2, 5, 6, 5] 0
1250 [1, 2, 5, 6] 0
1251 [1, 2, 5, 1] 0
1252 [1, 2, 5] 0
1253 [1, 2, 6, 1] 0
1254 [1, 2, 6] 0
1255 [1, 2, 1] 0
1256 [1, 2] 0
1257 [1, 3, 4, 5, 6, 3, 4, 5, 3, 4, 3] 0
1258 [1, 3, 4, 5, 6, 3, 4, 5, 3, 4] 0
1259 [1, 3, 4, 5, 6, 3, 4, 5, 3] 0
1260 [1, 3, 4, 5, 6, 3, 4, 5, 4] 0
1261 [1, 3, 4, 5, 6, 3, 4, 5] 0
1262 [1, 3, 4, 5, 6, 3, 4, 3] 0
1263 [1, 3, 4, 5, 6, 3, 4] 0
1264 [1, 3, 4, 5, 6, 3, 5] 0
1265 [1, 3, 4, 5, 6, 3] 0
1266 [1, 3, 4, 5, 6, 4, 5, 4] 0
1267 [1, 3, 4, 5, 6, 4, 5] 0
1268 [1, 3, 4, 5, 6, 4] 0
1269 [1, 3, 4, 5, 6, 5] 0
1270 [1, 3, 4, 5, 6] 0
1271 [1, 3, 4, 5, 3, 4, 3] 0
1272 [1, 3, 4, 5, 3, 4] 0
1273 [1, 3, 4, 5, 3] 0
1274 [1, 3, 4, 5, 4] 0
1275 [1, 3, 4, 5] 0
1276 [1, 3, 4, 6, 3] 0
1277 [1, 3, 4, 6] 0
1278 [1, 3, 4, 3] 0
1279 [1, 3, 4] 0
1280 [1, 3, 5, 6, 5] 0
1281 [1, 3, 5, 6] 0
1282 [1, 3, 5] 0
1283 [1, 3, 6] 0
1284 [1, 3] 0
1285 [1, 4, 5, 6, 4, 5, 4] 0
1286 [1, 4, 5, 6, 4, 5] 0
1287 [1, 4, 5, 6, 4] 0
1288 [1, 4, 5, 6, 5] 0
1289 [1, 4, 5, 6] 0
1290 [1, 4, 5, 4] 0
1291 [1, 4, 5] 0
1292 [1, 4, 6] 0
1293 [1, 4] 0
1294 [1, 5, 6, 5] 0
1295 [1, 5, 6] 0
1296 [1, 5] 0
1297 [1, 6] 0
1298 [1] 0
1299 [2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2, 3, 2] 0
1300 [2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2, 3] 0
1301 [2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2] 0
1302 [2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 3] 0
1303 [2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4] 0
1304 [2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 2] 0
1305 [2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3] 0
1306 [2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 4] 0
1307 [2, 3, 4, 5, 6, 2, 3, 4, 5, 2] 0
1308 [2, 3, 4, 5, 6, 2, 3, 4, 5, 3, 4, 3] 0
1309 [2, 3, 4, 5, 6, 2, 3, 4, 5, 3, 4] 0
1310 [2, 3, 4, 5, 6, 2, 3, 4, 5, 3] 0
1311 [2, 3, 4, 5, 6, 2, 3, 4, 5, 4] 0
1312 [2, 3, 4, 5, 6, 2, 3, 4, 5] 0
1313 [2, 3, 4, 5, 6, 2, 3, 4, 2, 3, 2] 0
1314 [2, 3, 4, 5, 6, 2, 3, 4, 2, 3] 0
1315 [2, 3, 4, 5, 6, 2, 3, 4, 2] 0
1316 [2, 3, 4, 5, 6, 2, 3, 4, 3] 0
1317 [2, 3, 4, 5, 6, 2, 3, 4] 0
1318 [2, 3, 4, 5, 6, 2, 3, 5, 2] 0
1319 [2, 3, 4, 5, 6, 2, 3, 5] 0
1320 [2, 3, 4, 5, 6, 2, 3, 2] 0
1321 [2, 3, 4, 5, 6, 2, 3] 0
1322 [2, 3, 4, 5, 6, 2, 4, 5, 4] 0
1323 [2, 3, 4, 5, 6, 2, 4, 5] 0
1324 [2, 3, 4, 5, 6, 2, 4] 0
1325 [2, 3, 4, 5, 6, 2, 5] 0
1326 [2, 3, 4, 5, 6, 2] 0
1327 [2, 3, 4, 5, 6, 3, 4, 5, 3, 4, 3] 0
1328 [2, 3, 4, 5, 6, 3, 4, 5, 3, 4] 0
1329 [2, 3, 4, 5, 6, 3, 4, 5, 3] 0
1330 [2, 3, 4, 5, 6, 3, 4, 5, 4] 0
1331 [2, 3, 4, 5, 6, 3, 4, 5] 0
1332 [2, 3, 4, 5, 6, 3, 4, 3] 0
1333 [2, 3, 4, 5, 6, 3, 4] 0
1334 [2, 3, 4, 5, 6, 3, 5] 0
1335 [2, 3, 4, 5, 6, 3] 0
1336 [2, 3, 4, 5, 6, 4, 5, 4] 0
1337 [2, 3, 4, 5, 6, 4, 5] 0
1338 [2, 3, 4, 5, 6, 4] 0
1339 [2, 3, 4, 5, 6, 5] 0
1340 [2, 3, 4, 5, 6] 0
1341 [2, 3, 4, 5, 2, 3, 4, 2, 3, 2] 0
1342 [2, 3, 4, 5, 2, 3, 4, 2, 3] 0
1343 [2, 3, 4, 5, 2, 3, 4, 2] 0
1344 [2, 3, 4, 5, 2, 3, 4, 3] 0
1345 [2, 3, 4, 5, 2, 3, 4] 0
1346 [2, 3, 4, 5, 2, 3, 2] 0
1347 [2, 3, 4, 5, 2, 3] 0
1348 [2, 3, 4, 5, 2, 4] 0
1349 [2, 3, 4, 5, 2] 0
1350 [2, 3, 4, 5, 3, 4, 3] 0
1351 [2, 3, 4, 5, 3, 4] 0
1352 [2, 3, 4, 5, 3] 0
1353 [2, 3, 4, 5, 4] 0
1354 [2, 3, 4, 5] 0
1355 [2, 3, 4, 6, 2, 3, 2] 0
1356 [2, 3, 4, 6, 2, 3] 0
1357 [2, 3, 4, 6, 2] 0
1358 [2, 3, 4, 6, 3] 0
1359 [2, 3, 4, 6] 0
1360 [2, 3, 4, 2, 3, 2] 0
1361 [2, 3, 4, 2, 3] 0
1362 [2, 3, 4, 2] 0
1363 [2, 3, 4, 3] 0
1364 [2, 3, 4] 0
1365 [2, 3, 5, 6, 2, 5] 0
1366 [2, 3, 5, 6, 2] 0
1367 [2, 3, 5, 6, 5] 0
1368 [2, 3, 5, 6] 0
1369 [2, 3, 5, 2] 0
1370 [2, 3, 5] 0
1371 [2, 3, 6, 2] 0
1372 [2, 3, 6] 0
1373 [2, 3, 2] 0
1374 [2, 3] 0
1375 [2, 4, 5, 6, 4, 5, 4] 0
1376 [2, 4, 5, 6, 4, 5] 0
1377 [2, 4, 5, 6, 4] 0
1378 [2, 4, 5, 6, 5] 0
1379 [2, 4, 5, 6] 0
1380 [2, 4, 5, 4] 0
1381 [2, 4, 5] 0
1382 [2, 4, 6] 0
1383 [2, 4] 0
1384 [2, 5, 6, 5] 0
1385 [2, 5, 6] 0
1386 [2, 5] 0
1387 [2, 6] 0
1388 [2] 0
1389 [3, 4, 5, 6, 3, 4, 5, 3, 4, 3] 0
1390 [3, 4, 5, 6, 3, 4, 5, 3, 4] 0
1391 [3, 4, 5, 6, 3, 4, 5, 3] 0
1392 [3, 4, 5, 6, 3, 4, 5, 4] 0
1393 [3, 4, 5, 6, 3, 4, 5] 0
1394 [3, 4, 5, 6, 3, 4, 3] 0
1395 [3, 4, 5, 6, 3, 4] 0
1396 [3, 4, 5, 6, 3, 5] 0
1397 [3, 4, 5, 6, 3] 0
1398 [3, 4, 5, 6, 4, 5, 4] 0
1399 [3, 4, 5, 6, 4, 5] 0
1400 [3, 4, 5, 6, 4] 0
1401 [3, 4, 5, 6, 5] 0
1402 [3, 4, 5, 6] 0
1403 [3, 4, 5, 3, 4, 3] 0
1404 [3, 4, 5, 3, 4] 0
1405 [3, 4, 5, 3] 0
1406 [3, 4, 5, 4] 0
1407 [3, 4, 5] 0
1408 [3, 4, 6, 3] 0
1409 [3, 4, 6] 0
1410 [3, 4, 3] 0
1411 [3, 4] 0
1412 [3, 5, 6, 5] 0
1413 [3, 5, 6] 0
1414 [3, 5] 0
1415 [3, 6] 0
1416 [3] 0
1417 [4, 5, 6, 4, 5, 4] 0
1418 [4, 5, 6, 4, 5] 0
1419 [4, 5, 6, 4] 0
1420 [4, 5, 6, 5] 0
1421 [4, 5, 6] 0
1422 [4, 5, 4] 0
1423 [4, 5] 0
1424 [4, 6] 0
1425 [4] 0
1426 [5, 6, 5] 0
1427 [5, 6] 0
1428 [5] 0
1429 [6] 0
1430 [] 0
sage: p_lambda_faster(B(A,c),lam(A,[]),c_inf_prefix(c,10))
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 100 vertices and 10 rays
sage: A
[ 2 -1  0  0  0  0  0]
[-1  2 -1  0  0  0  0]
[ 0 -1  2 -1  0  0  0]
[ 0  0 -1  2 -1  0  0]
[ 0  0  0 -1  2 -1  0]
[ 0  0  0  0 -1  2 -1]
[ 0  0  0  0  0 -1  2]
sage: c
[0, 1, 2, 3, 4, 5, 6]
sage: p_lambda_faster(B(A,c),lam(A,[]),c_inf_prefix(c,70))
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex, 3 rays, 3 lines
sage: P=p_lambda_faster(B(A,c),lam(A,[]),c_inf_prefix(c,70)); P.intersection(p_l
....: ambda_faster(B(A,c),lam(A,[]),[]))
....: 
....: 
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex, 3 rays, 3 lines
sage: P=p_lambda_faster(B(A,c),lam(A,[]),c_inf_prefix(c,70)); P.intersection(p_l
....: ambda_faster(B(A,c),lam(A,[]),[]))==P
True
sage: for i from 0 to 70: P=p_lambda_faster(B(A,c),lam(A,[]),c_inf_prefix(c,70))
....: ; print(P.intersection(p_lambda_faster(B(A,c),lam(A,[]),[]))==P)
  Cell In [270], line 1
    for i from Integer(0) to Integer(70): P=p_lambda_faster(B(A,c),lam(A,[]),c_inf_prefix(c,Integer(70))); print(P.intersection(p_lambda_faster(B(A,c),lam(A,[]),[]))==P)
          ^
SyntaxError: invalid syntax

sage: for i from 0 to 70: P=p_lambda_faster(B(A,c),lam(A,[]),c_inf_prefix(c,70))
....: ; print(bool(P.intersection(p_lambda_faster(B(A,c),lam(A,[]),[]))==P))
  Cell In [271], line 1
    for i from Integer(0) to Integer(70): P=p_lambda_faster(B(A,c),lam(A,[]),c_inf_prefix(c,Integer(70))); print(bool(P.intersection(p_lambda_faster(B(A,c),lam(A,[]),[]))==P))
          ^
SyntaxError: invalid syntax

sage: for i from 0 to 70: P=p_lambda_faster(B(A,c),lam(A,[]),c_inf_prefix(c,70))
....: ; print(bool(P.intersection(p_lambda_faster(B(A,c),lam(A,[]),[]))==P))
  Cell In [272], line 1
    for i from Integer(0) to Integer(70): P=p_lambda_faster(B(A,c),lam(A,[]),c_inf_prefix(c,Integer(70))); print(bool(P.intersection(p_lambda_faster(B(A,c),lam(A,[]),[]))==P))
          ^
SyntaxError: invalid syntax

sage: for i from 0 to 70:
....:     P=p_lambda_faster(B(A,c),lam(A,[]),c_inf_prefix(c,70))
....:     print(bool(P.intersection(p_lambda_faster(B(A,c),lam(A,[]),[]))==P))
  Cell In [273], line 1
    for i from Integer(0) to Integer(70):
          ^
SyntaxError: invalid syntax

sage: for i in range(70):
....:     P=p_lambda_faster(B(A,c),lam(A,[]),c_inf_prefix(c,70))
....:     print(bool(P.intersection(p_lambda_faster(B(A,c),lam(A,[]),[]))==P))
....: 
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [274], line 2
      1 for i in range(Integer(70)): 
----> 2     P=p_lambda_faster(B(A,c),lam(A,[]),c_inf_prefix(c,Integer(70)))
      3     print(bool(P.intersection(p_lambda_faster(B(A,c),lam(A,[]),[]))==P))

Cell In [258], line 159, in p_lambda_faster(B, la, seq)
    155         P=Ep*Pp
    156     else:
    157         #print("Pp:   ",Pp,Pp.vertices(),Pp.rays(),Pp.lines(),"\n")
    158         #print("Pm:   ",Pm,Pm.vertices(),Pm.rays(),Pm.lines(),"\n\n")
--> 159         P=(Ep*Pp).convex_hull(Em*Pm)
    160     B.mutate(k)
    161 return P

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4099, in sage.structure.element.Matrix.__mul__ (build/cythonized/sage/structure/element.c:35219)()
   4097 
   4098         if BOTH_ARE_ELEMENT(cl):
-> 4099             return coercion_model.bin_op(left, right, mul)
   4100 
   4101         cdef long value

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1222, in sage.structure.coerce.CoercionModel.bin_op (build/cythonized/sage/structure/coerce.c:15809)()
   1220 if action is not None:
   1221     if (<Action>action)._is_left:
-> 1222         return (<Action>action)._act_(x, y)
   1223     else:
   1224         return (<Action>action)._act_(y, x)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_actions.pyx:157, in sage.structure.coerce_actions.ActedUponAction._act_ (build/cythonized/sage/structure/coerce_actions.c:8579)()
    155     <... 'sage.structure.coerce_actions.ActedUponAction'>
    156 """
--> 157 return (<Element>x)._acted_upon_(g, not self._is_left)
    158 
    159 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:949, in sage.structure.element.Element._acted_upon_ (build/cythonized/sage/structure/element.c:16495)()
    947     return None
    948 
--> 949 cpdef _acted_upon_(self, x, bint self_on_left) noexcept:
    950     """
    951     Use this method to implement ``self`` acted on by x.

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1450, in Polyhedron_base5._acted_upon_(self, actor, self_on_left)
   1448         raise ValueError("matrices should act on the left")
   1449     else:
-> 1450         return self.linear_transformation(actor)
   1451 else:
   1452     return self.dilation(actor)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1879, in Polyhedron_base5.linear_transformation(self, linear_transf, new_base_ring)
   1873     pref_rep = 'Vrep' if self.n_vertices() <= self.n_inequalities() else 'Hrep'
   1875     return new_parent.element_class(new_parent, [new_vertices, new_rays, new_lines],
   1876                                     [new_inequalities, new_equations],
   1877                                     Vrep_minimal=True, Hrep_minimal=True, pref_rep=pref_rep)
-> 1879 return new_parent.element_class(new_parent, [tuple(new_vertices), tuple(new_rays), tuple(new_lines)], None)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:174, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    171     lines = tuple(lines)
    173 if vertices or rays or lines:
--> 174     self._init_from_Vrepresentation(vertices, rays, lines, **kwds)
    175 else:
    176     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:99, in Polyhedron_ppl._init_from_Vrepresentation(self, vertices, rays, lines, minimize, verbose)
     72 def _init_from_Vrepresentation(self, vertices, rays, lines, minimize=True, verbose=False):
     73     """
     74     Construct polyhedron from V-representation data.
     75 
   (...)
     97         sage: Polyhedron_ppl._init_from_Vrepresentation(p, [], [], [])
     98     """
---> 99     gs = self._convert_generators_to_ppl(vertices, rays, lines)
    100     if gs.empty():
    101         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'empty')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:473, in Polyhedron_ppl._convert_generators_to_ppl(vertices, rays, lines)
    471     vertices = []
    472 for v in vertices:
--> 473     gs.insert(Polyhedron_ppl._convert_generator_to_ppl(v, VERTEX))
    474 if rays is None:
    475     rays = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:442, in Polyhedron_ppl._convert_generator_to_ppl(v, typ)
    440 d = LCM_list([denominator(v_i) for v_i in v])
    441 if d.is_one():
--> 442     return ob(Linear_Expression(v, 0))
    443 else:
    444     dv = [ d*v_i for v_i in v ]

File ppl/linear_algebra.pyx:654, in ppl.linear_algebra.Linear_Expression.__init__()

File ppl/linear_algebra.pyx:49, in ppl.linear_algebra.PPL_Coefficient_from_pyobject()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:1107, in sage.structure.element.Element.__richcmp__ (build/cythonized/sage/structure/element.c:18121)()
   1105         return (<Element>self)._richcmp_(other, op)
   1106     else:
-> 1107         return coercion_model.richcmp(self, other, op)
   1108 
   1109 cpdef _richcmp_(left, right, int op) noexcept:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:2021, in sage.structure.coerce.CoercionModel.richcmp (build/cythonized/sage/structure/coerce.c:26173)()
   2019 # Coerce to a common parent
   2020 try:
-> 2021     x, y = self.canonical_coercion(x, y)
   2022 except (TypeError, NotImplementedError):
   2023     pass

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1422, in sage.structure.coerce.CoercionModel.canonical_coercion (build/cythonized/sage/structure/coerce.c:18956)()
   1420             self._record_exception()
   1421 
-> 1422     raise TypeError("no common canonical parent for objects with parents: '%s' and '%s'"%(xp, yp))
   1423 
   1424 cpdef coercion_maps(self, R, S) noexcept:

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: for i in range(70):
....:     P=p_lambda_faster(B(A,c),lam(A,[]),c_inf_prefix(c,i))
....:     print(bool(P.intersection(p_lambda_faster(B(A,c),lam(A,[]),[]))==P))
....: 
True
True
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
True
sage: for i in range(70):
....:     P=p_lambda_faster(B(A,c),lam(A,[]),c_inf_prefix(c,i))
....:     print(bool(P.intersection(p_lambda_faster(B(A,c),lam(A,[]),[]))==P),P)
....: 
....: 
True A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex, 3 rays, 3 lines
True A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex and 6 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 6 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 4 vertices and 7 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 9 vertices and 9 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 21 vertices and 13 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 50 vertices and 20 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 13 vertices and 9 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 99 vertices and 20 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 92 vertices and 13 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 100 vertices and 10 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 104 vertices and 10 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 65 vertices and 13 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 139 vertices and 20 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 13 vertices and 9 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 99 vertices and 20 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 92 vertices and 13 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 100 vertices and 10 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 104 vertices and 10 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 65 vertices and 13 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 50 vertices and 20 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 5 vertices, 6 rays, 1 line
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 41 vertices and 13 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 38 vertices and 9 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 50 vertices and 8 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 46 vertices and 9 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 21 vertices and 13 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 42 vertices and 13 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 10 vertices and 7 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 51 vertices and 12 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 48 vertices and 9 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 44 vertices and 8 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 27 vertices and 10 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 27 vertices and 9 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 32 vertices and 12 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 4 vertices, 5 rays, 1 line
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 42 vertices and 12 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 36 vertices and 9 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 24 vertices and 10 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 44 vertices and 8 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 30 vertices and 9 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 32 vertices and 12 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 10 vertices and 7 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 42 vertices and 13 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 28 vertices and 13 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 42 vertices and 9 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 40 vertices and 8 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 29 vertices and 9 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 36 vertices and 13 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 5 vertices, 6 rays, 1 line
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 31 vertices and 20 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 60 vertices and 13 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 53 vertices and 10 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 57 vertices and 10 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 38 vertices and 13 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 37 vertices and 20 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 13 vertices and 9 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 70 vertices and 20 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 130 vertices and 13 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 108 vertices and 10 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 109 vertices and 10 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 75 vertices and 13 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 85 vertices and 20 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 13 vertices and 9 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 70 vertices and 20 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 60 vertices and 13 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 21 vertices and 9 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 11 vertices and 7 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 6 rays
True A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 6 rays
sage: for i in range(70):
....:     P=p_lambda_faster(B(A,c),lam(A,[]),c_inf_prefix(c,i))
....:     print(bool((P.intersection(p_lambda_faster(B(A,c),lam(A,[]),[])))==P),
....: P)
....: 
True A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex, 3 rays, 3 lines
True A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex and 6 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 6 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 4 vertices and 7 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 9 vertices and 9 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 21 vertices and 13 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 50 vertices and 20 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 13 vertices and 9 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 99 vertices and 20 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 92 vertices and 13 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 100 vertices and 10 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 104 vertices and 10 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 65 vertices and 13 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 139 vertices and 20 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 13 vertices and 9 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 99 vertices and 20 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 92 vertices and 13 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 100 vertices and 10 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 104 vertices and 10 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 65 vertices and 13 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 50 vertices and 20 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 5 vertices, 6 rays, 1 line
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 41 vertices and 13 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 38 vertices and 9 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 50 vertices and 8 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 46 vertices and 9 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 21 vertices and 13 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 42 vertices and 13 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 10 vertices and 7 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 51 vertices and 12 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 48 vertices and 9 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 44 vertices and 8 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 27 vertices and 10 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 27 vertices and 9 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 32 vertices and 12 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 4 vertices, 5 rays, 1 line
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 42 vertices and 12 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 36 vertices and 9 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 24 vertices and 10 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 44 vertices and 8 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 30 vertices and 9 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 32 vertices and 12 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 10 vertices and 7 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 42 vertices and 13 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 28 vertices and 13 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 42 vertices and 9 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 40 vertices and 8 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 29 vertices and 9 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 36 vertices and 13 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 5 vertices, 6 rays, 1 line
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 31 vertices and 20 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 60 vertices and 13 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 53 vertices and 10 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 57 vertices and 10 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 38 vertices and 13 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 37 vertices and 20 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 13 vertices and 9 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 70 vertices and 20 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 130 vertices and 13 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 108 vertices and 10 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 109 vertices and 10 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 75 vertices and 13 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 85 vertices and 20 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 13 vertices and 9 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 70 vertices and 20 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 60 vertices and 13 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 21 vertices and 9 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 11 vertices and 7 rays
False A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 6 rays
True A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 6 rays
sage: Q=p_lambda_faster(B(A,c),lam(A,[]),[])
....: print(Q,Q.vertices())
....: for i in range(70):
....:     P=p_lambda_faster(B(A,c),lam(A,[]),c_inf_prefix(c,i))
....:     if (P.intersection(p_lambda_faster(Q)))==P:
....:         print(P,P.vertices(),P.rays(),P.lines())
....: 
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex, 3 rays, 3 lines (A vertex at (1, 0, 1, 0, 1, 0, 1),)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In [278], line 5
      3 for i in range(Integer(70)): 
      4     P=p_lambda_faster(B(A,c),lam(A,[]),c_inf_prefix(c,i))
----> 5     if (P.intersection(p_lambda_faster(Q)))==P:
      6         print(P,P.vertices(),P.rays(),P.lines())

TypeError: p_lambda_faster() missing 2 required positional arguments: 'la' and 'seq'
sage: Q=p_lambda_faster(B(A,c),lam(A,[]),[])
....: print(Q,Q.vertices())
....: for i in range(70):
....:     P=p_lambda_faster(B(A,c),lam(A,[]),c_inf_prefix(c,i))
....:     if (P.intersection(Q))==P:
....:         print(P,P.vertices(),P.rays(),P.lines())
....: 
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex, 3 rays, 3 lines (A vertex at (1, 0, 1, 0, 1, 0, 1),)
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex, 3 rays, 3 lines (A vertex at (1, 0, 1, 0, 1, 0, 1),) (A ray in the direction (0, 0, 0, 0, 1, 0, -1), A ray in the direction (0, 0, 1, 0, -1, 0, 0), A ray in the direction (1, 0, -1, 0, 0, 0, 0)) (A line in the direction (0, 0, 0, 0, 0, 1, 0), A line in the direction (0, 0, 0, 1, 0, 0, 0), A line in the direction (0, 1, 0, 0, 0, 0, 0))
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex and 6 rays (A vertex at (1, 1, 1, 1, 1, 1, 1),) (A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 0, 0, 0, 1, 0, -1), A ray in the direction (0, 0, 0, 1, 0, -1, 0), A ray in the direction (0, 0, 1, 0, -1, 0, 0), A ray in the direction (0, 1, 0, -1, 0, 0, 0), A ray in the direction (1, 0, -1, 0, 0, 0, 0)) ()
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [279], line 4
      2 print(Q,Q.vertices())
      3 for i in range(Integer(70)): 
----> 4     P=p_lambda_faster(B(A,c),lam(A,[]),c_inf_prefix(c,i))
      5     if (P.intersection(Q))==P:
      6         print(P,P.vertices(),P.rays(),P.lines())

Cell In [258], line 159, in p_lambda_faster(B, la, seq)
    155         P=Ep*Pp
    156     else:
    157         #print("Pp:   ",Pp,Pp.vertices(),Pp.rays(),Pp.lines(),"\n")
    158         #print("Pm:   ",Pm,Pm.vertices(),Pm.rays(),Pm.lines(),"\n\n")
--> 159         P=(Ep*Pp).convex_hull(Em*Pm)
    160     B.mutate(k)
    161 return P

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1312, in Polyhedron_base5.convex_hull(self, other)
   1310 hull_rays = self.rays() + other.rays()
   1311 hull_lines = self.lines() + other.lines()
-> 1312 return self.parent().element_class(self.parent(), [hull_vertices, hull_rays, hull_lines], None)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:70, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
---> 70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:189, in Polyhedron_ppl.set_immutable(self)
    187 if not hasattr(self, '_Vrepresentation'):
    188     try:
--> 189         self._init_Vrepresentation_from_ppl(True)
    190     except TypeError as e:
    191         # Apparently the polyhedron is (no longer) integral.
    192         self._clear_cache()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:307, in Polyhedron_ppl._init_Vrepresentation_from_ppl(self, minimize)
    305 d = Integer(g.divisor())
    306 if d.is_one():
--> 307     parent._make_Vertex(self, coefficients)
    308 else:
    309     parent._make_Vertex(self, [x/d for x in coefficients])

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:1123, in Polyhedra_base._make_Vertex(self, polyhedron, data)
   1121 except IndexError:
   1122     obj = Vertex(self)
-> 1123 obj._set_data(polyhedron, data)
   1124 return obj

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/representation.py:1179, in Vrepresentation._set_data(self, polyhedron, data)
   1177 polyhedron._Vrepresentation.append(self)
   1178 self._polyhedron = polyhedron
-> 1179 if polyhedron.is_mutable():
   1180     polyhedron._add_dependent_object(self)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base_mutable.py:137, in Polyhedron_mutable.is_mutable(self)
    134         raise ValueError
    135     self._dependent_objects.append(ob)
--> 137 def is_mutable(self):
    138     r"""
    139     Return True if the polyhedron is mutable, i.e. it can be modified in place.
    140 
   (...)
    148         False
    149     """
    150     return self._is_mutable

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: Q=p_lambda_faster(B(A,c),lam(A,[]),[])
....: print(Q,Q.vertices(),"\n")
....: for i in range(70):
....:     P=p_lambda_faster(B(A,c),lam(A,[]),c_inf_prefix(c,i))
....:     if (P.intersection(Q))==P:
....:         print(P,"\n",P.vertices(),"\n",P.rays(),"\n",P.lines(),"\n\n")
....: 
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex, 3 rays, 3 lines (A vertex at (1, 0, 1, 0, 1, 0, 1),) 

A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex, 3 rays, 3 lines 
 (A vertex at (1, 0, 1, 0, 1, 0, 1),) 
 (A ray in the direction (0, 0, 0, 0, 1, 0, -1), A ray in the direction (0, 0, 1, 0, -1, 0, 0), A ray in the direction (1, 0, -1, 0, 0, 0, 0)) 
 (A line in the direction (0, 0, 0, 0, 0, 1, 0), A line in the direction (0, 0, 0, 1, 0, 0, 0), A line in the direction (0, 1, 0, 0, 0, 0, 0)) 


A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex and 6 rays 
 (A vertex at (1, 1, 1, 1, 1, 1, 1),) 
 (A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 0, 0, 0, 1, 0, -1), A ray in the direction (0, 0, 0, 1, 0, -1, 0), A ray in the direction (0, 0, 1, 0, -1, 0, 0), A ray in the direction (0, 1, 0, -1, 0, 0, 0), A ray in the direction (1, 0, -1, 0, 0, 0, 0)) 
 () 


^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [280], line 4
      2 print(Q,Q.vertices(),"\n")
      3 for i in range(Integer(70)): 
----> 4     P=p_lambda_faster(B(A,c),lam(A,[]),c_inf_prefix(c,i))
      5     if (P.intersection(Q))==P:
      6         print(P,"\n",P.vertices(),"\n",P.rays(),"\n",P.lines(),"\n\n")

Cell In [258], line 159, in p_lambda_faster(B, la, seq)
    155         P=Ep*Pp
    156     else:
    157         #print("Pp:   ",Pp,Pp.vertices(),Pp.rays(),Pp.lines(),"\n")
    158         #print("Pm:   ",Pm,Pm.vertices(),Pm.rays(),Pm.lines(),"\n\n")
--> 159         P=(Ep*Pp).convex_hull(Em*Pm)
    160     B.mutate(k)
    161 return P

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1312, in Polyhedron_base5.convex_hull(self, other)
   1310 hull_rays = self.rays() + other.rays()
   1311 hull_lines = self.lines() + other.lines()
-> 1312 return self.parent().element_class(self.parent(), [hull_vertices, hull_rays, hull_lines], None)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:70, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
---> 70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:189, in Polyhedron_ppl.set_immutable(self)
    187 if not hasattr(self, '_Vrepresentation'):
    188     try:
--> 189         self._init_Vrepresentation_from_ppl(True)
    190     except TypeError as e:
    191         # Apparently the polyhedron is (no longer) integral.
    192         self._clear_cache()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:300, in Polyhedron_ppl._init_Vrepresentation_from_ppl(self, minimize)
    298     raise TypeError("Vrepresentation of mutable polyhedra cannot be recomputed")
    299 self._Vrepresentation = []
--> 300 gs = self._ppl_polyhedron.minimized_generators()
    301 parent = self.parent()
    302 for g in gs:

File ppl/polyhedron.pyx:340, in ppl.polyhedron.Polyhedron.minimized_generators()

KeyboardInterrupt: 
sage: c
[0, 1, 2, 3, 4, 5, 6]
sage: lam(A,v)
(1, 1, 1, 1, 1, 1, 1)
sage: Q=p_lambda_faster(B(A,c),lam(A,[]),[])
....: print(Q,Q.vertices(),"\n")
....: for i in range(70):
....:     P=p_lambda_faster(B(A,c),lam(A,[]),c_inf_prefix(c,i))
....:     if (P.intersection(Q))==P:
....:         print(P,"\n",P.vertices(),"\n",P.rays(),"\n",P.lines(),"\n\n")
....: 
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex, 3 rays, 3 lines (A vertex at (1, 0, 1, 0, 1, 0, 1),) 

A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex, 3 rays, 3 lines 
 (A vertex at (1, 0, 1, 0, 1, 0, 1),) 
 (A ray in the direction (0, 0, 0, 0, 1, 0, -1), A ray in the direction (0, 0, 1, 0, -1, 0, 0), A ray in the direction (1, 0, -1, 0, 0, 0, 0)) 
 (A line in the direction (0, 0, 0, 0, 0, 1, 0), A line in the direction (0, 0, 0, 1, 0, 0, 0), A line in the direction (0, 1, 0, 0, 0, 0, 0)) 


A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex and 6 rays 
 (A vertex at (1, 1, 1, 1, 1, 1, 1),) 
 (A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 0, 0, 0, 1, 0, -1), A ray in the direction (0, 0, 0, 1, 0, -1, 0), A ray in the direction (0, 0, 1, 0, -1, 0, 0), A ray in the direction (0, 1, 0, -1, 0, 0, 0), A ray in the direction (1, 0, -1, 0, 0, 0, 0)) 
 () 


^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [283], line 4
      2 print(Q,Q.vertices(),"\n")
      3 for i in range(Integer(70)): 
----> 4     P=p_lambda_faster(B(A,c),lam(A,[]),c_inf_prefix(c,i))
      5     if (P.intersection(Q))==P:
      6         print(P,"\n",P.vertices(),"\n",P.rays(),"\n",P.lines(),"\n\n")

Cell In [258], line 151, in p_lambda_faster(B, la, seq)
    148 #print("Hp:   ",Hp,Hp.vertices(),Hp.rays(),Hp.lines(),"\n")
    149 #print("Hm:   ",Hm,Hm.vertices(),Hm.rays(),Hm.lines(),"\n\n")
    150 Pp = P.intersection(Hp)
--> 151 Pm = P.intersection(Hm)
    152 if Pp.dimension() < rk:
    153     P=Em*Pm

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1371, in Polyhedron_base5.intersection(self, other)
   1369 parent = self.parent()
   1370 try:
-> 1371     intersection = parent.element_class(parent, None, [new_ieqs, new_eqns])
   1373     # Force calculation of the vertices.
   1374     _ = intersection.n_vertices()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:179, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    177 elif Hrep is not None:
    178     ieqs, eqns = Hrep
--> 179     self._init_from_Hrepresentation(ieqs, eqns, **kwds)
    180 else:
    181     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:129, in Polyhedron_ppl._init_from_Hrepresentation(self, ieqs, eqns, minimize, verbose)
    106 def _init_from_Hrepresentation(self, ieqs, eqns, minimize=True, verbose=False):
    107     """
    108     Construct polyhedron from H-representation data.
    109 
   (...)
    127         sage: Polyhedron_ppl._init_from_Hrepresentation(p, [], [])
    128     """
--> 129     cs = self._convert_constraints_to_ppl(ieqs, eqns)
    130     if cs.empty():
    131         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'universe')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:534, in Polyhedron_ppl._convert_constraints_to_ppl(ieqs, eqns)
    532     ieqs = []
    533 for ieq in ieqs:
--> 534     cs.insert(Polyhedron_ppl._convert_constraint_to_ppl(ieq, INEQUALITY))
    535 if eqns is None:
    536     eqns = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:504, in Polyhedron_ppl._convert_constraint_to_ppl(c, typ)
    484 @staticmethod
    485 def _convert_constraint_to_ppl(c, typ):
    486     r"""
    487     Convert a constraint to ``ppl``.
    488 
   (...)
    502         x0+6*x1+2==0
    503     """
--> 504     d = LCM_list([denominator(c_i) for c_i in c])
    505     dc = [ ZZ(d*c_i) for c_i in c ]
    506     b = dc[0]

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/arith/functions.pyx:127, in sage.arith.functions.LCM_list (build/cythonized/sage/arith/functions.c:5595)()
    125 
    126 
--> 127 cpdef LCM_list(v) noexcept:
    128     """
    129     Return the LCM of an iterable ``v``.

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/arith/functions.pyx:195, in sage.arith.functions.LCM_list (build/cythonized/sage/arith/functions.c:5261)()
    193 itr = iter(v)
    194 for elt in itr:
--> 195     sig_check()
    196     if isinstance(elt, Integer):
    197         x = <Integer>elt

KeyboardInterrupt: 
sage: Q=p_lambda_faster(B(A,c),lam(A,[]),[])
....: print(Q,"\n",Q.vertices(),"\n",Q.rays(),Q.lines(),"\n")
....: for i in range(70):
....:     P=p_lambda_faster(B(A,c),lam(A,[]),c_inf_prefix(c,i))
....:     if (P.intersection(Q))==P:
....:         print(P,"\n",P.vertices(),"\n",P.rays(),"\n",P.lines(),"\n\n")
....: 
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex, 3 rays, 3 lines 
 (A vertex at (1, 0, 1, 0, 1, 0, 1),) 
 (A ray in the direction (0, 0, 0, 0, 1, 0, -1), A ray in the direction (0, 0, 1, 0, -1, 0, 0), A ray in the direction (1, 0, -1, 0, 0, 0, 0)) (A line in the direction (0, 0, 0, 0, 0, 1, 0), A line in the direction (0, 0, 0, 1, 0, 0, 0), A line in the direction (0, 1, 0, 0, 0, 0, 0)) 

A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex, 3 rays, 3 lines 
 (A vertex at (1, 0, 1, 0, 1, 0, 1),) 
 (A ray in the direction (0, 0, 0, 0, 1, 0, -1), A ray in the direction (0, 0, 1, 0, -1, 0, 0), A ray in the direction (1, 0, -1, 0, 0, 0, 0)) 
 (A line in the direction (0, 0, 0, 0, 0, 1, 0), A line in the direction (0, 0, 0, 1, 0, 0, 0), A line in the direction (0, 1, 0, 0, 0, 0, 0)) 


A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex and 6 rays 
 (A vertex at (1, 1, 1, 1, 1, 1, 1),) 
 (A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 0, 0, 0, 1, 0, -1), A ray in the direction (0, 0, 0, 1, 0, -1, 0), A ray in the direction (0, 0, 1, 0, -1, 0, 0), A ray in the direction (0, 1, 0, -1, 0, 0, 0), A ray in the direction (1, 0, -1, 0, 0, 0, 0)) 
 () 


A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 6 rays 
 (A vertex at (1, 1, 1, 1, 1, 1, 1), A vertex at (1, 1, 1, 1, 2, 2, 0)) 
 (A ray in the direction (0, -1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 1, 0, -1), A ray in the direction (0, 0, 0, 1, 0, -1, 0), A ray in the direction (0, 0, 1, 0, -1, 0, 0), A ray in the direction (0, 1, 0, -1, 0, 0, 0), A ray in the direction (1, 0, -1, 0, 0, 0, 0)) 
 () 


sage: B(A,c)
[ 0  1  0  0  0  0  0]
[-1  0  1  0  0  0  0]
[ 0 -1  0  1  0  0  0]
[ 0  0 -1  0  1  0  0]
[ 0  0  0 -1  0  1  0]
[ 0  0  0  0 -1  0  1]
[ 0  0  0  0  0 -1  0]
sage: Q=p_lambda_faster(B(A,c),lam(A,[]),[])
....: print(Q,"\n",Q.vertices(),"\n",Q.rays(),Q.lines(),"\n")
....: for i in range(70):
....:     P=p_lambda_faster(B(A,c),lam(A,[]),c_inf_prefix(c,i))
....:     if P==Q:
....:         print(P,"\n",P.vertices(),"\n",P.rays(),"\n",P.lines(),"\n\n")
....: 
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex, 3 rays, 3 lines 
 (A vertex at (1, 0, 1, 0, 1, 0, 1),) 
 (A ray in the direction (0, 0, 0, 0, 1, 0, -1), A ray in the direction (0, 0, 1, 0, -1, 0, 0), A ray in the direction (1, 0, -1, 0, 0, 0, 0)) (A line in the direction (0, 0, 0, 0, 0, 1, 0), A line in the direction (0, 0, 0, 1, 0, 0, 0), A line in the direction (0, 1, 0, 0, 0, 0, 0)) 

A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex, 3 rays, 3 lines 
 (A vertex at (1, 0, 1, 0, 1, 0, 1),) 
 (A ray in the direction (0, 0, 0, 0, 1, 0, -1), A ray in the direction (0, 0, 1, 0, -1, 0, 0), A ray in the direction (1, 0, -1, 0, 0, 0, 0)) 
 (A line in the direction (0, 0, 0, 0, 0, 1, 0), A line in the direction (0, 0, 0, 1, 0, 0, 0), A line in the direction (0, 1, 0, 0, 0, 0, 0)) 


^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [286], line 4
      2 print(Q,"\n",Q.vertices(),"\n",Q.rays(),Q.lines(),"\n")
      3 for i in range(Integer(70)): 
----> 4     P=p_lambda_faster(B(A,c),lam(A,[]),c_inf_prefix(c,i))
      5     if P==Q:
      6         print(P,"\n",P.vertices(),"\n",P.rays(),"\n",P.lines(),"\n\n")

Cell In [258], line 150, in p_lambda_faster(B, la, seq)
    147 Hm = Polyhedron(ieqs=[(Integer(0),)*(k+Integer(1))+(-Integer(1),)+(Integer(0),)*(m-k-Integer(1))])
    148 #print("Hp:   ",Hp,Hp.vertices(),Hp.rays(),Hp.lines(),"\n")
    149 #print("Hm:   ",Hm,Hm.vertices(),Hm.rays(),Hm.lines(),"\n\n")
--> 150 Pp = P.intersection(Hp)
    151 Pm = P.intersection(Hm)
    152 if Pp.dimension() < rk:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1371, in Polyhedron_base5.intersection(self, other)
   1369 parent = self.parent()
   1370 try:
-> 1371     intersection = parent.element_class(parent, None, [new_ieqs, new_eqns])
   1373     # Force calculation of the vertices.
   1374     _ = intersection.n_vertices()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:179, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    177 elif Hrep is not None:
    178     ieqs, eqns = Hrep
--> 179     self._init_from_Hrepresentation(ieqs, eqns, **kwds)
    180 else:
    181     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:129, in Polyhedron_ppl._init_from_Hrepresentation(self, ieqs, eqns, minimize, verbose)
    106 def _init_from_Hrepresentation(self, ieqs, eqns, minimize=True, verbose=False):
    107     """
    108     Construct polyhedron from H-representation data.
    109 
   (...)
    127         sage: Polyhedron_ppl._init_from_Hrepresentation(p, [], [])
    128     """
--> 129     cs = self._convert_constraints_to_ppl(ieqs, eqns)
    130     if cs.empty():
    131         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'universe')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:534, in Polyhedron_ppl._convert_constraints_to_ppl(ieqs, eqns)
    532     ieqs = []
    533 for ieq in ieqs:
--> 534     cs.insert(Polyhedron_ppl._convert_constraint_to_ppl(ieq, INEQUALITY))
    535 if eqns is None:
    536     eqns = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:509, in Polyhedron_ppl._convert_constraint_to_ppl(c, typ)
    507 A = dc[1:]
    508 if typ == INEQUALITY:
--> 509     return Linear_Expression(A, b) >= 0
    510 else:
    511     return Linear_Expression(A, b) == 0

File ppl/linear_algebra.pyx:654, in ppl.linear_algebra.Linear_Expression.__init__()

File ppl/linear_algebra.pyx:49, in ppl.linear_algebra.PPL_Coefficient_from_pyobject()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/rings/integer.pyx:914, in sage.rings.integer.Integer.__richcmp__ (build/cythonized/sage/rings/integer.c:16498)()
    912     c = mpz_cmp_d((<Integer>left).value, d)
    913 else:
--> 914     return coercion_model.richcmp(left, right, op)
    915 
    916 return rich_to_bool_sgn(op, c)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:2021, in sage.structure.coerce.CoercionModel.richcmp (build/cythonized/sage/structure/coerce.c:26173)()
   2019 # Coerce to a common parent
   2020 try:
-> 2021     x, y = self.canonical_coercion(x, y)
   2022 except (TypeError, NotImplementedError):
   2023     pass

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1422, in sage.structure.coerce.CoercionModel.canonical_coercion (build/cythonized/sage/structure/coerce.c:18956)()
   1420             self._record_exception()
   1421 
-> 1422     raise TypeError("no common canonical parent for objects with parents: '%s' and '%s'"%(xp, yp))
   1423 
   1424 cpdef coercion_maps(self, R, S) noexcept:

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: Q=p_lambda_faster(B(A,c),lam(A,[]),[])
....: print(Q,"\n",Q.vertices(),"\n",Q.rays(),Q.lines(),"\n")
....: for i in range(70):
....:     print(i)
....:     P=p_lambda_faster(B(A,c),lam(A,[]),c_inf_prefix(c,i))
....:     if P==Q:
....:         print(P,"\n",P.vertices(),"\n",P.rays(),"\n",P.lines(),"\n\n")
....: 
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex, 3 rays, 3 lines 
 (A vertex at (1, 0, 1, 0, 1, 0, 1),) 
 (A ray in the direction (0, 0, 0, 0, 1, 0, -1), A ray in the direction (0, 0, 1, 0, -1, 0, 0), A ray in the direction (1, 0, -1, 0, 0, 0, 0)) (A line in the direction (0, 0, 0, 0, 0, 1, 0), A line in the direction (0, 0, 0, 1, 0, 0, 0), A line in the direction (0, 1, 0, 0, 0, 0, 0)) 

0
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex, 3 rays, 3 lines 
 (A vertex at (1, 0, 1, 0, 1, 0, 1),) 
 (A ray in the direction (0, 0, 0, 0, 1, 0, -1), A ray in the direction (0, 0, 1, 0, -1, 0, 0), A ray in the direction (1, 0, -1, 0, 0, 0, 0)) 
 (A line in the direction (0, 0, 0, 0, 0, 1, 0), A line in the direction (0, 0, 0, 1, 0, 0, 0), A line in the direction (0, 1, 0, 0, 0, 0, 0)) 


1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
sage: Q=p_lambda_faster(B(A,c),lam(A,[]),[])
....: print(Q,"\n",Q.vertices(),"\n",Q.rays(),Q.lines(),"\n")
....: for i in range(71):
....:     print(i)
....:     P=p_lambda_faster(B(A,c),lam(A,[]),c_inf_prefix(c,i))
....:     if P==Q:
....:         print(P,"\n",P.vertices(),"\n",P.rays(),"\n",P.lines(),"\n\n")
....: 
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex, 3 rays, 3 lines 
 (A vertex at (1, 0, 1, 0, 1, 0, 1),) 
 (A ray in the direction (0, 0, 0, 0, 1, 0, -1), A ray in the direction (0, 0, 1, 0, -1, 0, 0), A ray in the direction (1, 0, -1, 0, 0, 0, 0)) (A line in the direction (0, 0, 0, 0, 0, 1, 0), A line in the direction (0, 0, 0, 1, 0, 0, 0), A line in the direction (0, 1, 0, 0, 0, 0, 0)) 

0
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex, 3 rays, 3 lines 
 (A vertex at (1, 0, 1, 0, 1, 0, 1),) 
 (A ray in the direction (0, 0, 0, 0, 1, 0, -1), A ray in the direction (0, 0, 1, 0, -1, 0, 0), A ray in the direction (1, 0, -1, 0, 0, 0, 0)) 
 (A line in the direction (0, 0, 0, 0, 0, 1, 0), A line in the direction (0, 0, 0, 1, 0, 0, 0), A line in the direction (0, 1, 0, 0, 0, 0, 0)) 


1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex, 3 rays, 3 lines 
 (A vertex at (1, 0, 1, 0, 1, 0, 1),) 
 (A ray in the direction (0, 0, 0, 0, 1, 0, -1), A ray in the direction (0, 0, 1, 0, -1, 0, 0), A ray in the direction (1, 0, -1, 0, 0, 0, 0)) 
 (A line in the direction (0, 0, 0, 0, 0, 1, 0), A line in the direction (0, 0, 0, 1, 0, 0, 0), A line in the direction (0, 1, 0, 0, 0, 0, 0)) 


sage: A=CartanMatrix(['A',7])
sage: coxnum=8
sage: c=[0,1,2,3,4,5,6]
sage: for v in sortables(A,c):
....:     Ps=list(p_lambda_faster(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i i
....: n range((coxnum+2)*A.nrows()))))
....:     for i in range(len(Ps)):
....:         for j in range(i+1,len(Ps)):
....:             if (Ps[i].intersection(Ps[j])).dimension()=0
  Cell In [292], line 5
    if (Ps[i].intersection(Ps[j])).dimension()=Integer(0)
       ^
SyntaxError: cannot assign to function call here. Maybe you meant '==' instead of '='?

sage: for v in sortables(A,c):
....:     Ps=list(p_lambda_faster(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i i
....: n range((coxnum+2)*A.nrows()))))
....:     for i in range(len(Ps)):
....:         for j in range(i+1,len(Ps)):
....:             if (Ps[i].intersection(Ps[j])).dimension()==0
  Cell In [293], line 5
    if (Ps[i].intersection(Ps[j])).dimension()==Integer(0)
                                                          ^
SyntaxError: expected ':'

sage: for v in sortables(A,c):
....:     print(v)
....:     Ps=list(p_lambda_faster(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i i
....: n range((coxnum+2)*A.nrows()))))
....:     for i in range(len(Ps)):
....:         for j in range(i+1,len(Ps)):
....:             if (Ps[i].intersection(Ps[j])).dimension()==0:
....:                 print(i,j)
....: 
[0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In [294], line 3
      1 for v in sortables(A,c):
      2     print(v)
----> 3     Ps=list(p_lambda_faster(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range((coxnum+Integer(2))*A.nrows()))))
      4     for i in range(len(Ps)):
      5         for j in range(i+Integer(1),len(Ps)):

Cell In [258], line 139, in p_lambda_faster(B, la, seq)
    137 B = block_matrix([[B,matrix(la).transpose()]])
    138 for k in seq:
--> 139     B.mutate(k)
    140 B, la  = B[:,:-Integer(1)], B[:,-Integer(1)] 
    141 P = Polyhedron(rays=B.columns(),base_ring=QQ).translation(la)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/matrix0.pyx:3589, in sage.matrix.matrix0.Matrix.mutate (build/cythonized/sage/matrix/matrix0.c:33615)()
   3587 ###################################################
   3588 
-> 3589 def mutate(self, Py_ssize_t k ):
   3590     """
   3591     Mutates ``self`` at row and column index ``k``.

TypeError: 'list' object cannot be interpreted as an integer
sage: for v in sortables(A,c):
....:     print(v)
....:     Ps=list(p_lambda_faster(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i i
....: n range((coxnum+2)*A.nrows()))))
....:     for i in range(len(Ps)):
....:         for j in range(i+1,len(Ps)):
....:             if (Ps[i].intersection(Ps[j])).dimension()==0:
....:                 print(i,j)
....: 
[0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In [295], line 3
      1 for v in sortables(A,c):
      2     print(v)
----> 3     Ps=list(p_lambda_faster(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range((coxnum+Integer(2))*A.nrows()))))
      4     for i in range(len(Ps)):
      5         for j in range(i+Integer(1),len(Ps)):

Cell In [258], line 139, in p_lambda_faster(B, la, seq)
    137 B = block_matrix([[B,matrix(la).transpose()]])
    138 for k in seq:
--> 139     B.mutate(k)
    140 B, la  = B[:,:-Integer(1)], B[:,-Integer(1)] 
    141 P = Polyhedron(rays=B.columns(),base_ring=QQ).translation(la)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/matrix0.pyx:3589, in sage.matrix.matrix0.Matrix.mutate (build/cythonized/sage/matrix/matrix0.c:33615)()
   3587 ###################################################
   3588 
-> 3589 def mutate(self, Py_ssize_t k ):
   3590     """
   3591     Mutates ``self`` at row and column index ``k``.

TypeError: 'list' object cannot be interpreted as an integer
sage: list(c_inf_prefix(c,i) for i in range((coxnum+2)*A.nrows()))
[[],
 [0],
 [0, 1],
 [0, 1, 2],
 [0, 1, 2, 3],
 [0, 1, 2, 3, 4],
 [0, 1, 2, 3, 4, 5],
 [0, 1, 2, 3, 4, 5, 6],
 [0, 1, 2, 3, 4, 5, 6, 0],
 [0, 1, 2, 3, 4, 5, 6, 0, 1],
 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2],
 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3],
 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4],
 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5],
 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6],
 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0],
 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1],
 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2],
 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3],
 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4],
 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5],
 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6],
 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0],
 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1],
 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2],
 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3],
 [0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4],
 [0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5],
 [0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6],
 [0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0],
 [0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1],
 [0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2],
 [0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3],
 [0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4],
 [0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5],
 [0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6],
 [0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0],
 [0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1],
 [0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2],
 [0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3],
 [0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4],
 [0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5],
 [0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6],
 [0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0],
 [0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1],
 [0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2],
 [0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3],
 [0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4],
 [0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5],
 [0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6],
 [0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0],
 [0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1],
 [0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2],
 [0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3],
 [0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4],
 [0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5],
 [0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6],
 [0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0],
 [0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1],
 [0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2],
 [0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3],
 [0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4],
 [0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5],
 [0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6],
 [0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0],
 [0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1],
 [0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2],
 [0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3],
 [0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4],
 [0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  5]]
sage: for v in sortables(A,c):
....:     print(v)
....:     Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i) for i in ran
....: ge((coxnum+2)*A.nrows())))
....:     for i in range(len(Ps)):
....:         for j in range(i+1,len(Ps)):
....:             if (Ps[i].intersection(Ps[j])).dimension()==0:
....:                 print(i,j)
  Cell In [297], line 3
    Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i) for i in range((coxnum+Integer(2))*A.nrows())))
                                            ^
SyntaxError: Generator expression must be parenthesized

sage: for v in sortables(A,c):
....:     print(v)
....:     Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in ra
....: nge((coxnum+2)*A.nrows()))
....:     for i in range(len(Ps)):
....:         for j in range(i+1,len(Ps)):
....:             if (Ps[i].intersection(Ps[j])).dimension()==0:
....:                 print(i,j)
....: 
[0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [298], line 3
      1 for v in sortables(A,c):
      2     print(v)
----> 3     Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in range((coxnum+Integer(2))*A.nrows()))
      4     for i in range(len(Ps)):
      5         for j in range(i+Integer(1),len(Ps)):

Cell In [298], line 3, in <genexpr>(.0)
      1 for v in sortables(A,c):
      2     print(v)
----> 3     Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in range((coxnum+Integer(2))*A.nrows()))
      4     for i in range(len(Ps)):
      5         for j in range(i+Integer(1),len(Ps)):

Cell In [258], line 159, in p_lambda_faster(B, la, seq)
    155         P=Ep*Pp
    156     else:
    157         #print("Pp:   ",Pp,Pp.vertices(),Pp.rays(),Pp.lines(),"\n")
    158         #print("Pm:   ",Pm,Pm.vertices(),Pm.rays(),Pm.lines(),"\n\n")
--> 159         P=(Ep*Pp).convex_hull(Em*Pm)
    160     B.mutate(k)
    161 return P

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4099, in sage.structure.element.Matrix.__mul__ (build/cythonized/sage/structure/element.c:35219)()
   4097 
   4098         if BOTH_ARE_ELEMENT(cl):
-> 4099             return coercion_model.bin_op(left, right, mul)
   4100 
   4101         cdef long value

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1222, in sage.structure.coerce.CoercionModel.bin_op (build/cythonized/sage/structure/coerce.c:15809)()
   1220 if action is not None:
   1221     if (<Action>action)._is_left:
-> 1222         return (<Action>action)._act_(x, y)
   1223     else:
   1224         return (<Action>action)._act_(y, x)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_actions.pyx:157, in sage.structure.coerce_actions.ActedUponAction._act_ (build/cythonized/sage/structure/coerce_actions.c:8579)()
    155     <... 'sage.structure.coerce_actions.ActedUponAction'>
    156 """
--> 157 return (<Element>x)._acted_upon_(g, not self._is_left)
    158 
    159 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:949, in sage.structure.element.Element._acted_upon_ (build/cythonized/sage/structure/element.c:16495)()
    947     return None
    948 
--> 949 cpdef _acted_upon_(self, x, bint self_on_left) noexcept:
    950     """
    951     Use this method to implement ``self`` acted on by x.

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1450, in Polyhedron_base5._acted_upon_(self, actor, self_on_left)
   1448         raise ValueError("matrices should act on the left")
   1449     else:
-> 1450         return self.linear_transformation(actor)
   1451 else:
   1452     return self.dilation(actor)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1879, in Polyhedron_base5.linear_transformation(self, linear_transf, new_base_ring)
   1873     pref_rep = 'Vrep' if self.n_vertices() <= self.n_inequalities() else 'Hrep'
   1875     return new_parent.element_class(new_parent, [new_vertices, new_rays, new_lines],
   1876                                     [new_inequalities, new_equations],
   1877                                     Vrep_minimal=True, Hrep_minimal=True, pref_rep=pref_rep)
-> 1879 return new_parent.element_class(new_parent, [tuple(new_vertices), tuple(new_rays), tuple(new_lines)], None)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:70, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
---> 70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:189, in Polyhedron_ppl.set_immutable(self)
    187 if not hasattr(self, '_Vrepresentation'):
    188     try:
--> 189         self._init_Vrepresentation_from_ppl(True)
    190     except TypeError as e:
    191         # Apparently the polyhedron is (no longer) integral.
    192         self._clear_cache()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:311, in Polyhedron_ppl._init_Vrepresentation_from_ppl(self, minimize)
    309         parent._make_Vertex(self, [x/d for x in coefficients])
    310 elif g.is_ray():
--> 311     parent._make_Ray(self, coefficients)
    312 elif g.is_line():
    313     parent._make_Line(self, coefficients)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:1150, in Polyhedra_base._make_Ray(self, polyhedron, data)
   1148 except IndexError:
   1149     obj = Ray(self)
-> 1150 obj._set_data(polyhedron, data)
   1151 return obj

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/representation.py:1179, in Vrepresentation._set_data(self, polyhedron, data)
   1177 polyhedron._Vrepresentation.append(self)
   1178 self._polyhedron = polyhedron
-> 1179 if polyhedron.is_mutable():
   1180     polyhedron._add_dependent_object(self)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base_mutable.py:137, in Polyhedron_mutable.is_mutable(self)
    134         raise ValueError
    135     self._dependent_objects.append(ob)
--> 137 def is_mutable(self):
    138     r"""
    139     Return True if the polyhedron is mutable, i.e. it can be modified in place.
    140 
   (...)
    148         False
    149     """
    150     return self._is_mutable

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['A',5])
sage: c=[0,1,2,3,4]
sage: coxnum=6
sage: for v in sortables(A,c):
....:     print(v)
....:     Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in ra
....: nge((coxnum+2)*A.nrows()))
....:     for i in range(len(Ps)):
....:         for j in range(i+1,len(Ps)):
....:             if (Ps[i].intersection(Ps[j])).dimension()==0:
....:                 print(i,j)
....: 
[0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
1 36
2 36
3 36
4 36
6 37
7 37
8 37
9 37
14 21
26 38
27 38
28 38
29 38
31 39
32 39
33 39
34 39
[0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1]
1 36
2 36
3 36
4 36
6 37
7 37
8 37
9 37
14 21
26 38
27 38
28 38
29 38
31 38
32 38
33 38
34 39
[0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0]
11 17
12 17
13 18
13 19
31 37
32 37
33 38
34 39
[0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 1]
1 36
2 36
3 36
4 36
6 37
7 37
8 37
9 37
11 17
12 18
12 19
13 18
13 19
14 21
27 37
28 37
29 38
31 39
32 39
33 39
[0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
11 17
12 17
13 18
13 19
31 37
32 37
33 38
33 39
[0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0]
11 17
12 17
13 18
13 19
31 36
32 37
33 38
33 39
[0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
11 16
12 17
13 18
13 19
31 36
32 37
33 38
33 39
[0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 2]
1 13
2 13
3 13
4 13
5 13
6 13
7 13
8 14
9 14
11 16
11 17
12 18
12 19
12 20
12 21
12 22
12 23
12 24
27 36
28 37
29 38
[0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
1 13
2 13
3 13
4 13
5 13
6 13
7 13
8 13
9 14
11 16
12 17
12 18
12 19
12 20
12 21
12 22
12 23
12 24
29 36
[0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2, 1]
1 36
2 36
3 36
4 36
7 37
8 37
9 37
11 21
12 22
12 23
13 22
13 23
14 24
26 38
27 38
28 38
31 39
32 39
33 39
34 39
[0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2]
1 36
2 36
3 36
4 36
5 36
6 36
7 37
8 37
9 37
11 21
12 21
13 22
13 23
26 38
27 38
28 38
31 38
32 38
33 39
34 39
[0, 1, 2, 3, 4, 0, 1, 2, 3, 1]
1 13
2 13
3 13
4 13
6 13
7 13
8 13
9 14
11 17
11 18
11 19
12 21
13 22
13 23
29 36
30 36
31 36
32 37
32 38
33 39
[0, 1, 2, 3, 4, 0, 1, 2, 3, 2]
1 13
2 13
3 13
6 13
7 13
8 14
9 14
11 16
11 17
11 18
11 19
11 20
11 21
12 22
12 23
12 24
26 36
27 36
28 37
28 38
[0, 1, 2, 3, 4, 0, 1, 2, 3]
1 13
2 13
3 13
4 13
6 13
7 13
8 13
9 14
11 16
11 17
11 18
11 19
12 21
12 22
12 23
12 24
29 36
[0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0]
1 32
2 32
3 32
4 32
9 16
21 33
22 33
23 33
24 33
26 34
27 34
28 34
29 34
31 36
32 37
32 38
32 39
[0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
0 32
1 32
2 32
3 32
4 32
9 16
21 33
22 33
23 33
24 33
25 33
26 33
27 33
28 33
29 34
31 36
32 37
32 38
32 39
[0, 1, 2, 3, 4, 0, 1, 2, 0]
6 12
7 12
8 13
9 14
26 32
27 32
28 33
29 34
[0, 1, 2, 3, 4, 0, 1, 2, 1]
1 32
2 32
3 32
4 32
6 12
7 13
8 13
9 14
9 15
9 16
22 32
23 32
24 33
26 34
27 34
28 34
31 36
32 37
32 38
32 39
[0, 1, 2, 3, 4, 0, 1, 2]
6 12
7 12
8 13
9 14
26 32
27 32
28 33
28 34
[0, 1, 2, 3, 4, 0, 1, 3, 0]
4 11
6 12
6 13
7 12
7 13
8 14
16 28
17 28
18 28
19 28
21 29
22 29
23 29
24 29
26 32
26 33
26 34
27 36
28 37
28 38
[0, 1, 2, 3, 4, 0, 1, 3]
4 11
5 11
6 11
7 12
7 13
8 14
16 28
17 28
18 28
19 28
21 28
22 28
23 28
24 29
26 32
26 33
26 34
27 36
28 37
28 38
[0, 1, 2, 3, 4, 0, 1, 0]
6 12
7 12
8 13
8 14
26 32
27 32
28 33
28 34
[0, 1, 2, 3, 4, 0, 1]
6 11
7 12
8 13
8 14
26 32
27 32
28 33
28 34
[0, 1, 2, 3, 4, 0, 2, 3, 2]
7 37
7 38
8 39
9 39
11 23
12 23
13 23
14 24
15 24
16 24
17 24
18 24
19 24
21 26
21 27
22 28
22 29
22 32
22 33
22 34
[0, 1, 2, 3, 4, 0, 2, 3]
6 36
7 37
7 38
8 37
8 38
9 39
11 23
12 23
13 23
16 24
17 24
18 24
19 24
21 26
21 27
21 28
21 29
22 32
22 33
22 34
[0, 1, 2, 3, 4, 0, 2]
0 9
1 9
2 9
3 9
4 9
6 11
6 12
7 13
7 14
7 17
7 18
7 19
8 36
8 37
8 38
9 39
22 32
23 32
24 33
24 34
[0, 1, 2, 3, 4, 0, 3]
1 9
2 9
3 9
6 11
7 12
7 13
7 14
7 16
7 17
7 18
7 19
7 37
7 38
8 39
21 27
22 28
23 28
24 29
24 30
24 31
[0, 1, 2, 3, 4, 0]
1 9
2 9
3 9
4 9
6 11
7 12
7 13
7 14
7 16
7 17
7 18
7 19
8 36
8 37
8 38
8 39
24 31
[0, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
2 36
3 36
4 36
6 37
7 38
8 38
14 21
16 22
16 23
17 22
17 23
18 24
26 38
27 38
28 38
29 38
31 39
32 39
33 39
34 39
[0, 1, 2, 3, 4, 1, 2, 3, 1, 2]
2 36
3 36
4 36
6 37
7 38
8 38
14 21
15 21
16 21
17 22
17 23
18 24
26 38
27 38
28 38
29 38
31 38
32 38
33 38
34 39
[0, 1, 2, 3, 4, 1, 2, 3, 1]
0 34
1 34
7 17
8 17
9 18
11 19
12 19
13 19
16 21
17 22
17 23
17 24
17 26
17 27
17 28
17 29
31 37
32 38
33 38
34 39
[0, 1, 2, 3, 4, 1, 2, 3, 2]
1 34
2 36
3 36
4 36
6 37
7 17
7 37
8 18
8 38
9 18
11 19
12 19
13 19
14 21
16 22
16 23
16 24
17 26
17 27
18 28
27 37
28 38
29 38
31 39
32 39
33 39
[0, 1, 2, 3, 4, 1, 2, 3]
1 34
7 17
8 17
9 18
11 19
12 19
13 19
16 21
16 22
16 23
16 24
17 26
17 27
17 28
17 29
31 37
32 38
32 39
33 38
33 39
[0, 1, 2, 3, 4, 1, 2, 1]
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [302], line 3
      1 for v in sortables(A,c):
      2     print(v)
----> 3     Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in range((coxnum+Integer(2))*A.nrows()))
      4     for i in range(len(Ps)):
      5         for j in range(i+Integer(1),len(Ps)):

Cell In [302], line 3, in <genexpr>(.0)
      1 for v in sortables(A,c):
      2     print(v)
----> 3     Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in range((coxnum+Integer(2))*A.nrows()))
      4     for i in range(len(Ps)):
      5         for j in range(i+Integer(1),len(Ps)):

Cell In [258], line 147, in p_lambda_faster(B, la, seq)
    145 Em = E(B, k, -Integer(1))
    146 Hp = Polyhedron(ieqs=[(Integer(0),)*(k+Integer(1))+(Integer(1),)+(Integer(0),)*(m-k-Integer(1))])
--> 147 Hm = Polyhedron(ieqs=[(Integer(0),)*(k+Integer(1))+(-Integer(1),)+(Integer(0),)*(m-k-Integer(1))])
    148 #print("Hp:   ",Hp,Hp.vertices(),Hp.rays(),Hp.lines(),"\n")
    149 #print("Hm:   ",Hm,Hm.vertices(),Hm.rays(),Hm.lines(),"\n\n")
    150 Pp = P.intersection(Hp)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/constructor.py:716, in Polyhedron(vertices, rays, lines, ieqs, eqns, ambient_dim, base_ring, minimize, verbose, backend, mutable)
    714 else:
    715     P = parent(values[0])
--> 716     if any(parent(x) is not P for x in values):
    717         from sage.structure.sequence import Sequence
    718         P = Sequence(values).universe()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/constructor.py:716, in <genexpr>(.0)
    714 else:
    715     P = parent(values[0])
--> 716     if any(parent(x) is not P for x in values):
    717         from sage.structure.sequence import Sequence
    718         P = Sequence(values).universe()

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['A',3])
sage: c=[0,1,2]
sage: coxnum=4
sage: for v in sortables(A,c):
....:     print(v)
....:     Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in ra
....: nge((coxnum+2)*A.nrows()))
....:     for i in range(len(Ps)):
....:         for j in range(i+1,len(Ps)):
....:             if (Ps[i].intersection(Ps[j])).dimension()==0:
....:                 print(i,j)
....: 
[0, 1, 2, 0, 1, 0]
1 7
1 16
2 7
2 16
4 8
4 17
5 8
5 17
7 10
7 11
8 13
8 14
10 16
11 16
13 17
14 17
[0, 1, 2, 0, 1]
1 7
1 16
2 7
2 16
3 7
3 16
4 7
4 16
5 8
5 17
7 10
7 11
7 12
7 13
8 14
10 16
11 16
12 16
13 16
14 17
[0, 1, 2, 0]
0 5
0 14
1 5
1 14
2 5
2 14
4 7
4 16
5 8
5 9
5 10
5 11
5 17
7 13
8 14
9 14
10 14
11 14
13 16
14 17
[0, 1, 2, 1]
1 5
1 14
2 7
2 16
4 8
4 17
5 10
7 11
8 13
10 14
11 16
13 17
[0, 1, 2]
1 5
1 14
2 5
2 14
4 7
4 8
4 16
4 17
5 10
5 11
7 13
8 13
10 14
11 14
13 16
13 17
[0, 1, 0]
1 5
1 14
2 5
2 14
4 7
4 8
4 16
4 17
5 10
5 11
7 13
8 13
10 14
11 14
13 16
13 17
[0, 1]
0 4
0 13
1 4
1 13
2 5
2 14
4 7
4 8
4 9
4 10
4 16
4 17
5 11
7 13
8 13
9 13
10 13
11 14
13 16
13 17
[0, 2]
1 4
1 5
1 13
1 14
2 7
2 8
2 16
2 17
4 10
5 10
7 11
8 11
10 13
10 14
11 16
11 17
[0]
1 4
1 13
2 5
2 6
2 7
2 8
2 14
2 15
2 16
2 17
4 10
5 11
6 11
7 11
8 11
10 13
11 14
11 15
11 16
11 17
[1, 2, 1]
1 7
1 16
2 8
2 17
3 8
3 17
4 8
4 17
5 8
5 17
7 10
8 11
8 12
8 13
8 14
10 16
11 17
12 17
13 17
14 17
[1, 2]
1 7
1 16
2 7
2 16
4 8
4 17
5 8
5 17
7 10
7 11
8 13
8 14
10 16
11 16
13 17
14 17
[1]
1 5
1 14
2 7
2 16
4 8
4 17
5 10
7 11
8 13
10 14
11 16
13 17
[2]
1 4
1 5
1 6
1 7
1 13
1 14
1 15
1 16
2 8
2 17
4 10
5 10
6 10
7 10
8 11
10 13
10 14
10 15
10 16
11 17
[]
1 4
1 5
1 13
1 14
2 7
2 8
2 16
2 17
4 10
5 10
7 11
8 11
10 13
10 14
11 16
11 17
sage: for v in sortables(A,c):
....:     print(v)
....:     Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in ra
....: nge((coxnum+2)*A.nrows()))
....:     for i in range(len(Ps)):
....:         for j in range(i+1,min(len(Ps),i+A.nrows())):
....:             if (Ps[i].intersection(Ps[j])).dimension()==0:
....:                 print(i,j)
....: 
[0, 1, 2, 0, 1, 0]
[0, 1, 2, 0, 1]
[0, 1, 2, 0]
[0, 1, 2, 1]
[0, 1, 2]
[0, 1, 0]
[0, 1]
[0, 2]
[0]
[1, 2, 1]
[1, 2]
[1]
[2]
[]
sage: for v in sortables(A,c):
....:     print(v)
....:     Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in ra
....: nge((coxnum+2)*A.nrows()))
....:     for i in range(len(Ps)):
....:         for j in range(i+1,min(len(Ps),i+A.nrows()+1)):
....:             if (Ps[i].intersection(Ps[j])).dimension()==0:
....:                 print(i,j)
....: 
[0, 1, 2, 0, 1, 0]
5 8
7 10
14 17
[0, 1, 2, 0, 1]
4 7
5 8
7 10
13 16
14 17
[0, 1, 2, 0]
2 5
4 7
5 8
11 14
13 16
14 17
[0, 1, 2, 1]
[0, 1, 2]
2 5
4 7
11 14
13 16
[0, 1, 0]
2 5
4 7
11 14
13 16
[0, 1]
1 4
2 5
4 7
10 13
11 14
13 16
[0, 2]
1 4
8 11
10 13
[0]
1 4
2 5
8 11
10 13
11 14
[1, 2, 1]
5 8
7 10
8 11
14 17
[1, 2]
5 8
7 10
14 17
[1]
[2]
1 4
7 10
8 11
10 13
[]
1 4
8 11
10 13
sage: for v in sortables(A,c):
....:     print(v)
....:     Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in ra
....: nge((coxnum+2)*A.nrows()))
....:     for i in range(len(Ps)):
....:         for j in range(i+1,min(len(Ps),i+A.nrows()+2)):
....:             if (Ps[i].intersection(Ps[j])).dimension()==0:
....:                 print(i,j)
....: 
[0, 1, 2, 0, 1, 0]
4 8
5 8
7 10
7 11
13 17
14 17
[0, 1, 2, 0, 1]
3 7
4 7
5 8
7 10
7 11
12 16
13 16
14 17
[0, 1, 2, 0]
1 5
2 5
4 7
5 8
5 9
10 14
11 14
13 16
14 17
[0, 1, 2, 1]
1 5
4 8
7 11
10 14
13 17
[0, 1, 2]
1 5
2 5
4 7
4 8
10 14
11 14
13 16
13 17
[0, 1, 0]
1 5
2 5
4 7
4 8
10 14
11 14
13 16
13 17
[0, 1]
0 4
1 4
2 5
4 7
4 8
9 13
10 13
11 14
13 16
13 17
[0, 2]
1 4
1 5
7 11
8 11
10 13
10 14
[0]
1 4
2 5
2 6
7 11
8 11
10 13
11 14
11 15
[1, 2, 1]
4 8
5 8
7 10
8 11
8 12
13 17
14 17
[1, 2]
4 8
5 8
7 10
7 11
13 17
14 17
[1]
1 5
4 8
7 11
10 14
13 17
[2]
1 4
1 5
6 10
7 10
8 11
10 13
10 14
[]
1 4
1 5
7 11
8 11
10 13
10 14
sage: for v in sortables(A,c):
....:     fails=true
....:     Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in ra
....: nge((coxnum+2)*A.nrows()))
....:     for i in range(len(Ps)):
....:         for j in range(i+1,min(len(Ps),i+A.nrows()+2)):
....:             if (Ps[i].intersection(Ps[j])).dimension()==0:
....:                 fails=true
....:     if fails:
....:         print(v)
....: 
[0, 1, 2, 0, 1, 0]
[0, 1, 2, 0, 1]
[0, 1, 2, 0]
[0, 1, 2, 1]
[0, 1, 2]
[0, 1, 0]
[0, 1]
[0, 2]
[0]
[1, 2, 1]
[1, 2]
[1]
[2]
[]
sage: for v in sortables(A,c):
....:     fails=true
....:     Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in ra
....: nge((coxnum+2)*A.nrows()))
....:     for i in range(len(Ps)):
....:         for j in range(i+1,min(len(Ps),i+A.nrows()+2)):
....:             if (Ps[i].intersection(Ps[j])).dimension()==0:
....:                 fails=false
....:     if fails:
....:         print(v)
....: 
sage: A=CartanMatrix(['A',4])
sage: c=[0,1,2,3]
sage: coxnum=5
sage: for v in sortables(A,c):
....:     fails=true
....:     Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in ra
....: nge((coxnum+2)*A.nrows()))
....:     for i in range(len(Ps)):
....:         for j in range(i+1,min(len(Ps),i+A.nrows()+2)):
....:             if (Ps[i].intersection(Ps[j])).dimension()==0:
....:                 fails=false
....:     if fails:
....:         print(v)
....: 
sage: n=1
....: for v in sortables(A,c):
....:     fails=true
....:     print(n,v)
....:     n+=1
....:     Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in ra
....: nge((coxnum+2)*A.nrows()))
....:     for i in range(len(Ps)):
....:         for j in range(i+1,min(len(Ps),i+A.nrows()+2)):
....:             if (Ps[i].intersection(Ps[j])).dimension()==0:
....:                 fails=false
....:     if fails:
....:         print('FAILS!')
....: 
1 [0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
2 [0, 1, 2, 3, 0, 1, 2, 0, 1]
3 [0, 1, 2, 3, 0, 1, 2, 0]
4 [0, 1, 2, 3, 0, 1, 2, 1]
5 [0, 1, 2, 3, 0, 1, 2]
6 [0, 1, 2, 3, 0, 1, 0]
7 [0, 1, 2, 3, 0, 1]
8 [0, 1, 2, 3, 0, 2]
9 [0, 1, 2, 3, 0]
10 [0, 1, 2, 3, 1, 2, 1]
11 [0, 1, 2, 3, 1, 2]
12 [0, 1, 2, 3, 1]
13 [0, 1, 2, 3, 2]
14 [0, 1, 2, 3]
15 [0, 1, 2, 0, 1, 0]
16 [0, 1, 2, 0, 1]
17 [0, 1, 2, 0]
18 [0, 1, 2, 1]
19 [0, 1, 2]
20 [0, 1, 3, 0]
21 [0, 1, 3]
22 [0, 1, 0]
23 [0, 1]
24 [0, 2, 3, 2]
25 [0, 2, 3]
26 [0, 2]
27 [0, 3]
28 [0]
29 [1, 2, 3, 1, 2, 1]
30 [1, 2, 3, 1, 2]
31 [1, 2, 3, 1]
32 [1, 2, 3, 2]
33 [1, 2, 3]
34 [1, 2, 1]
35 [1, 2]
36 [1, 3]
37 [1]
38 [2, 3, 2]
39 [2, 3]
40 [2]
41 [3]
42 []
sage: n=1
....: for v in sortables(A,c):
....:     fails=true
....:     print(n,v)
....:     n+=1
....:     Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in ra
....: nge((coxnum+2)*A.nrows()))
....:     for i in range(len(Ps)):
....:         for j in range(i+1,min(len(Ps),i+A.nrows()+1)):
....:             if (Ps[i].intersection(Ps[j])).dimension()==0:
....:                 fails=false
....:     if fails:
....:         print('FAILS!')
....: 
1 [0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
2 [0, 1, 2, 3, 0, 1, 2, 0, 1]
3 [0, 1, 2, 3, 0, 1, 2, 0]
4 [0, 1, 2, 3, 0, 1, 2, 1]
5 [0, 1, 2, 3, 0, 1, 2]
6 [0, 1, 2, 3, 0, 1, 0]
7 [0, 1, 2, 3, 0, 1]
8 [0, 1, 2, 3, 0, 2]
9 [0, 1, 2, 3, 0]
10 [0, 1, 2, 3, 1, 2, 1]
11 [0, 1, 2, 3, 1, 2]
12 [0, 1, 2, 3, 1]
13 [0, 1, 2, 3, 2]
14 [0, 1, 2, 3]
15 [0, 1, 2, 0, 1, 0]
16 [0, 1, 2, 0, 1]
17 [0, 1, 2, 0]
18 [0, 1, 2, 1]
19 [0, 1, 2]
20 [0, 1, 3, 0]
21 [0, 1, 3]
22 [0, 1, 0]
23 [0, 1]
24 [0, 2, 3, 2]
25 [0, 2, 3]
26 [0, 2]
27 [0, 3]
28 [0]
29 [1, 2, 3, 1, 2, 1]
30 [1, 2, 3, 1, 2]
31 [1, 2, 3, 1]
32 [1, 2, 3, 2]
33 [1, 2, 3]
34 [1, 2, 1]
35 [1, 2]
36 [1, 3]
37 [1]
38 [2, 3, 2]
39 [2, 3]
40 [2]
41 [3]
42 []
sage: n=1
....: for v in sortables(A,c):
....:     fails=true
....:     print(n,v)
....:     n+=1
....:     Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in ra
....: nge((coxnum+2)*A.nrows()))
....:     for i in range(len(Ps)):
....:         for j in range(i+1,min(len(Ps),i+A.nrows())):
....:             if (Ps[i].intersection(Ps[j])).dimension()==0:
....:                 fails=false
....:     if fails:
....:         print('FAILS!')
....: 
1 [0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
FAILS!
2 [0, 1, 2, 3, 0, 1, 2, 0, 1]
FAILS!
3 [0, 1, 2, 3, 0, 1, 2, 0]
FAILS!
4 [0, 1, 2, 3, 0, 1, 2, 1]
FAILS!
5 [0, 1, 2, 3, 0, 1, 2]
FAILS!
6 [0, 1, 2, 3, 0, 1, 0]
FAILS!
7 [0, 1, 2, 3, 0, 1]
FAILS!
8 [0, 1, 2, 3, 0, 2]
FAILS!
9 [0, 1, 2, 3, 0]
FAILS!
10 [0, 1, 2, 3, 1, 2, 1]
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [318], line 6
      4 print(n,v)
      5 n+=Integer(1)
----> 6 Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in range((coxnum+Integer(2))*A.nrows()))
      7 for i in range(len(Ps)):
      8     for j in range(i+Integer(1),min(len(Ps),i+A.nrows())):

Cell In [318], line 6, in <genexpr>(.0)
      4 print(n,v)
      5 n+=Integer(1)
----> 6 Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in range((coxnum+Integer(2))*A.nrows()))
      7 for i in range(len(Ps)):
      8     for j in range(i+Integer(1),min(len(Ps),i+A.nrows())):

Cell In [258], line 159, in p_lambda_faster(B, la, seq)
    155         P=Ep*Pp
    156     else:
    157         #print("Pp:   ",Pp,Pp.vertices(),Pp.rays(),Pp.lines(),"\n")
    158         #print("Pm:   ",Pm,Pm.vertices(),Pm.rays(),Pm.lines(),"\n\n")
--> 159         P=(Ep*Pp).convex_hull(Em*Pm)
    160     B.mutate(k)
    161 return P

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4099, in sage.structure.element.Matrix.__mul__ (build/cythonized/sage/structure/element.c:35219)()
   4097 
   4098         if BOTH_ARE_ELEMENT(cl):
-> 4099             return coercion_model.bin_op(left, right, mul)
   4100 
   4101         cdef long value

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1222, in sage.structure.coerce.CoercionModel.bin_op (build/cythonized/sage/structure/coerce.c:15809)()
   1220 if action is not None:
   1221     if (<Action>action)._is_left:
-> 1222         return (<Action>action)._act_(x, y)
   1223     else:
   1224         return (<Action>action)._act_(y, x)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_actions.pyx:157, in sage.structure.coerce_actions.ActedUponAction._act_ (build/cythonized/sage/structure/coerce_actions.c:8579)()
    155     <... 'sage.structure.coerce_actions.ActedUponAction'>
    156 """
--> 157 return (<Element>x)._acted_upon_(g, not self._is_left)
    158 
    159 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:949, in sage.structure.element.Element._acted_upon_ (build/cythonized/sage/structure/element.c:16495)()
    947     return None
    948 
--> 949 cpdef _acted_upon_(self, x, bint self_on_left) noexcept:
    950     """
    951     Use this method to implement ``self`` acted on by x.

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1450, in Polyhedron_base5._acted_upon_(self, actor, self_on_left)
   1448         raise ValueError("matrices should act on the left")
   1449     else:
-> 1450         return self.linear_transformation(actor)
   1451 else:
   1452     return self.dilation(actor)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1879, in Polyhedron_base5.linear_transformation(self, linear_transf, new_base_ring)
   1873     pref_rep = 'Vrep' if self.n_vertices() <= self.n_inequalities() else 'Hrep'
   1875     return new_parent.element_class(new_parent, [new_vertices, new_rays, new_lines],
   1876                                     [new_inequalities, new_equations],
   1877                                     Vrep_minimal=True, Hrep_minimal=True, pref_rep=pref_rep)
-> 1879 return new_parent.element_class(new_parent, [tuple(new_vertices), tuple(new_rays), tuple(new_lines)], None)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:174, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    171     lines = tuple(lines)
    173 if vertices or rays or lines:
--> 174     self._init_from_Vrepresentation(vertices, rays, lines, **kwds)
    175 else:
    176     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:99, in Polyhedron_ppl._init_from_Vrepresentation(self, vertices, rays, lines, minimize, verbose)
     72 def _init_from_Vrepresentation(self, vertices, rays, lines, minimize=True, verbose=False):
     73     """
     74     Construct polyhedron from V-representation data.
     75 
   (...)
     97         sage: Polyhedron_ppl._init_from_Vrepresentation(p, [], [], [])
     98     """
---> 99     gs = self._convert_generators_to_ppl(vertices, rays, lines)
    100     if gs.empty():
    101         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'empty')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:477, in Polyhedron_ppl._convert_generators_to_ppl(vertices, rays, lines)
    475     rays = []
    476 for r in rays:
--> 477     gs.insert(Polyhedron_ppl._convert_generator_to_ppl(r, RAY))
    478 if lines is None:
    479     lines = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:442, in Polyhedron_ppl._convert_generator_to_ppl(v, typ)
    440 d = LCM_list([denominator(v_i) for v_i in v])
    441 if d.is_one():
--> 442     return ob(Linear_Expression(v, 0))
    443 else:
    444     dv = [ d*v_i for v_i in v ]

File ppl/linear_algebra.pyx:654, in ppl.linear_algebra.Linear_Expression.__init__()

File ppl/linear_algebra.pyx:49, in ppl.linear_algebra.PPL_Coefficient_from_pyobject()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:1107, in sage.structure.element.Element.__richcmp__ (build/cythonized/sage/structure/element.c:18121)()
   1105         return (<Element>self)._richcmp_(other, op)
   1106     else:
-> 1107         return coercion_model.richcmp(self, other, op)
   1108 
   1109 cpdef _richcmp_(left, right, int op) noexcept:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:2021, in sage.structure.coerce.CoercionModel.richcmp (build/cythonized/sage/structure/coerce.c:26173)()
   2019 # Coerce to a common parent
   2020 try:
-> 2021     x, y = self.canonical_coercion(x, y)
   2022 except (TypeError, NotImplementedError):
   2023     pass

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1422, in sage.structure.coerce.CoercionModel.canonical_coercion (build/cythonized/sage/structure/coerce.c:18956)()
   1420             self._record_exception()
   1421 
-> 1422     raise TypeError("no common canonical parent for objects with parents: '%s' and '%s'"%(xp, yp))
   1423 
   1424 cpdef coercion_maps(self, R, S) noexcept:

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['A',5])
sage: c=[0,1,2,3,4]
sage: coxnum=6
sage: n=1
....: for v in sortables(A,c):
....:     fails=true
....:     print(n,v)
....:     n+=1
....:     Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in ra
....: nge((coxnum+2)*A.nrows()))
....:     for i in range(len(Ps)):
....:         for j in range(i+1,min(len(Ps),i+A.nrows())):
....:             if (Ps[i].intersection(Ps[j])).dimension()==0:
....:                 fails=false
....:     if fails:
....:         print('FAILS!')
....: 
1 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
FAILS!
2 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1]
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [322], line 6
      4 print(n,v)
      5 n+=Integer(1)
----> 6 Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in range((coxnum+Integer(2))*A.nrows()))
      7 for i in range(len(Ps)):
      8     for j in range(i+Integer(1),min(len(Ps),i+A.nrows())):

Cell In [322], line 6, in <genexpr>(.0)
      4 print(n,v)
      5 n+=Integer(1)
----> 6 Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in range((coxnum+Integer(2))*A.nrows()))
      7 for i in range(len(Ps)):
      8     for j in range(i+Integer(1),min(len(Ps),i+A.nrows())):

Cell In [258], line 151, in p_lambda_faster(B, la, seq)
    148 #print("Hp:   ",Hp,Hp.vertices(),Hp.rays(),Hp.lines(),"\n")
    149 #print("Hm:   ",Hm,Hm.vertices(),Hm.rays(),Hm.lines(),"\n\n")
    150 Pp = P.intersection(Hp)
--> 151 Pm = P.intersection(Hm)
    152 if Pp.dimension() < rk:
    153     P=Em*Pm

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1371, in Polyhedron_base5.intersection(self, other)
   1369 parent = self.parent()
   1370 try:
-> 1371     intersection = parent.element_class(parent, None, [new_ieqs, new_eqns])
   1373     # Force calculation of the vertices.
   1374     _ = intersection.n_vertices()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:179, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    177 elif Hrep is not None:
    178     ieqs, eqns = Hrep
--> 179     self._init_from_Hrepresentation(ieqs, eqns, **kwds)
    180 else:
    181     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:129, in Polyhedron_ppl._init_from_Hrepresentation(self, ieqs, eqns, minimize, verbose)
    106 def _init_from_Hrepresentation(self, ieqs, eqns, minimize=True, verbose=False):
    107     """
    108     Construct polyhedron from H-representation data.
    109 
   (...)
    127         sage: Polyhedron_ppl._init_from_Hrepresentation(p, [], [])
    128     """
--> 129     cs = self._convert_constraints_to_ppl(ieqs, eqns)
    130     if cs.empty():
    131         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'universe')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:534, in Polyhedron_ppl._convert_constraints_to_ppl(ieqs, eqns)
    532     ieqs = []
    533 for ieq in ieqs:
--> 534     cs.insert(Polyhedron_ppl._convert_constraint_to_ppl(ieq, INEQUALITY))
    535 if eqns is None:
    536     eqns = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:509, in Polyhedron_ppl._convert_constraint_to_ppl(c, typ)
    507 A = dc[1:]
    508 if typ == INEQUALITY:
--> 509     return Linear_Expression(A, b) >= 0
    510 else:
    511     return Linear_Expression(A, b) == 0

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: n=1
....: for v in sortables(A,c):
....:     fails=true
....:     print(n,v)
....:     n+=1
....:     Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in ra
....: nge((coxnum+2)*A.nrows()))
....:     for i in range(len(Ps)):
....:         for j in range(i+1,min(len(Ps),i+A.nrows()+1)):
....:             if (Ps[i].intersection(Ps[j])).dimension()==0:
....:                 fails=false
....:     if fails:
....:         print('FAILS!')
....: 
1 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
2 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1]
3 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0]
4 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 1]
5 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
6 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0]
7 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
8 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 2]
9 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
10 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2, 1]
11 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2]
12 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1]
13 [0, 1, 2, 3, 4, 0, 1, 2, 3, 2]
14 [0, 1, 2, 3, 4, 0, 1, 2, 3]
15 [0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0]
16 [0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
17 [0, 1, 2, 3, 4, 0, 1, 2, 0]
18 [0, 1, 2, 3, 4, 0, 1, 2, 1]
19 [0, 1, 2, 3, 4, 0, 1, 2]
20 [0, 1, 2, 3, 4, 0, 1, 3, 0]
21 [0, 1, 2, 3, 4, 0, 1, 3]
22 [0, 1, 2, 3, 4, 0, 1, 0]
23 [0, 1, 2, 3, 4, 0, 1]
24 [0, 1, 2, 3, 4, 0, 2, 3, 2]
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [323], line 6
      4 print(n,v)
      5 n+=Integer(1)
----> 6 Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in range((coxnum+Integer(2))*A.nrows()))
      7 for i in range(len(Ps)):
      8     for j in range(i+Integer(1),min(len(Ps),i+A.nrows()+Integer(1))):

Cell In [323], line 6, in <genexpr>(.0)
      4 print(n,v)
      5 n+=Integer(1)
----> 6 Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in range((coxnum+Integer(2))*A.nrows()))
      7 for i in range(len(Ps)):
      8     for j in range(i+Integer(1),min(len(Ps),i+A.nrows()+Integer(1))):

Cell In [258], line 159, in p_lambda_faster(B, la, seq)
    155         P=Ep*Pp
    156     else:
    157         #print("Pp:   ",Pp,Pp.vertices(),Pp.rays(),Pp.lines(),"\n")
    158         #print("Pm:   ",Pm,Pm.vertices(),Pm.rays(),Pm.lines(),"\n\n")
--> 159         P=(Ep*Pp).convex_hull(Em*Pm)
    160     B.mutate(k)
    161 return P

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4099, in sage.structure.element.Matrix.__mul__ (build/cythonized/sage/structure/element.c:35219)()
   4097 
   4098         if BOTH_ARE_ELEMENT(cl):
-> 4099             return coercion_model.bin_op(left, right, mul)
   4100 
   4101         cdef long value

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1222, in sage.structure.coerce.CoercionModel.bin_op (build/cythonized/sage/structure/coerce.c:15809)()
   1220 if action is not None:
   1221     if (<Action>action)._is_left:
-> 1222         return (<Action>action)._act_(x, y)
   1223     else:
   1224         return (<Action>action)._act_(y, x)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_actions.pyx:157, in sage.structure.coerce_actions.ActedUponAction._act_ (build/cythonized/sage/structure/coerce_actions.c:8579)()
    155     <... 'sage.structure.coerce_actions.ActedUponAction'>
    156 """
--> 157 return (<Element>x)._acted_upon_(g, not self._is_left)
    158 
    159 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:949, in sage.structure.element.Element._acted_upon_ (build/cythonized/sage/structure/element.c:16495)()
    947     return None
    948 
--> 949 cpdef _acted_upon_(self, x, bint self_on_left) noexcept:
    950     """
    951     Use this method to implement ``self`` acted on by x.

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1450, in Polyhedron_base5._acted_upon_(self, actor, self_on_left)
   1448         raise ValueError("matrices should act on the left")
   1449     else:
-> 1450         return self.linear_transformation(actor)
   1451 else:
   1452     return self.dilation(actor)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1822, in Polyhedron_base5.linear_transformation(self, linear_transf, new_base_ring)
   1820     new_vertices = ()
   1821 if self.n_rays():
-> 1822     new_rays = ( r for r in matrix(R, self.rays())*linear_transf.transpose() )
   1823 else:
   1824     new_rays = ()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/constructor.pyx:648, in sage.matrix.constructor.matrix (build/cythonized/sage/matrix/constructor.c:5336)()
    646 """
    647 immutable = kwds.pop('immutable', False)
--> 648 M = MatrixArgs(*args, **kwds).matrix()
    649 if immutable:
    650     M.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/args.pyx:678, in sage.matrix.args.MatrixArgs.matrix (build/cythonized/sage/matrix/args.c:12864)()
    676     True
    677 """
--> 678 self.finalize()
    679 
    680 cdef Matrix M

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/args.pyx:987, in sage.matrix.args.MatrixArgs.finalize (build/cythonized/sage/matrix/args.c:15937)()
    985 if MatrixSpace is None:
    986     from sage.matrix.matrix_space import MatrixSpace
--> 987 self.space = MatrixSpace(self.base, self.nrows, self.ncols,
    988         sparse=self.sparse, **self.kwds)
    989 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/misc/classcall_metaclass.pyx:320, in sage.misc.classcall_metaclass.ClasscallMetaclass.__call__ (build/cythonized/sage/misc/classcall_metaclass.c:3156)()
    318 """
    319 if cls.classcall is not None:
--> 320     return cls.classcall(cls, *args, **kwds)
    321 else:
    322     # Fast version of type.__call__(cls, *args, **kwds)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/matrix_space.py:596, in MatrixSpace.__classcall__(cls, base_ring, nrows, ncols, sparse, implementation, **kwds)
    593 if nrows > sys.maxsize or ncols > sys.maxsize:
    594     raise OverflowError("number of rows and columns may be at most %s" % sys.maxsize)
--> 596 matrix_cls = get_matrix_class(base_ring, nrows, ncols, sparse, implementation)
    597 return super().__classcall__(cls, base_ring, nrows,
    598                              ncols, sparse, matrix_cls, **kwds)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/matrix_space.py:206, in get_matrix_class(R, nrows, ncols, sparse, implementation)
    204 elif R is sage.rings.rational_field.QQ:
    205     try:
--> 206         from . import matrix_rational_dense
    207     except ImportError:
    208         pass

File <frozen importlib._bootstrap>:409, in parent(self)

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: n=1
....: for v in sortables(A,c):
....:     fails=true
....:     print(n,v)
....:     n+=1
....:     Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in ra
....: nge((coxnum+2)*A.nrows()))
....:     for i in range(len(Ps)):
....:         for j in range(i+1,min(len(Ps),i+A.nrows()+1)):
....:             if (Ps[i].intersection(Ps[j])).dimension()==0:
....:                 fails=false
....:                 break
....:     if fails:
....:         print('FAILS!')
....: 
1 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
2 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1]
3 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0]
4 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 1]
5 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
6 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0]
7 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
8 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 2]
9 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
10 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2, 1]
11 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2]
12 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1]
13 [0, 1, 2, 3, 4, 0, 1, 2, 3, 2]
14 [0, 1, 2, 3, 4, 0, 1, 2, 3]
15 [0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0]
16 [0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
17 [0, 1, 2, 3, 4, 0, 1, 2, 0]
18 [0, 1, 2, 3, 4, 0, 1, 2, 1]
19 [0, 1, 2, 3, 4, 0, 1, 2]
20 [0, 1, 2, 3, 4, 0, 1, 3, 0]
21 [0, 1, 2, 3, 4, 0, 1, 3]
22 [0, 1, 2, 3, 4, 0, 1, 0]
23 [0, 1, 2, 3, 4, 0, 1]
24 [0, 1, 2, 3, 4, 0, 2, 3, 2]
25 [0, 1, 2, 3, 4, 0, 2, 3]
26 [0, 1, 2, 3, 4, 0, 2]
27 [0, 1, 2, 3, 4, 0, 3]
28 [0, 1, 2, 3, 4, 0]
29 [0, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
30 [0, 1, 2, 3, 4, 1, 2, 3, 1, 2]
31 [0, 1, 2, 3, 4, 1, 2, 3, 1]
32 [0, 1, 2, 3, 4, 1, 2, 3, 2]
FAILS!
33 [0, 1, 2, 3, 4, 1, 2, 3]
34 [0, 1, 2, 3, 4, 1, 2, 1]
35 [0, 1, 2, 3, 4, 1, 2]
36 [0, 1, 2, 3, 4, 1, 3]
FAILS!
37 [0, 1, 2, 3, 4, 1]
38 [0, 1, 2, 3, 4, 2, 3, 2]
39 [0, 1, 2, 3, 4, 2, 3]
40 [0, 1, 2, 3, 4, 2]
41 [0, 1, 2, 3, 4, 3]
42 [0, 1, 2, 3, 4]
43 [0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
44 [0, 1, 2, 3, 0, 1, 2, 0, 1]
45 [0, 1, 2, 3, 0, 1, 2, 0]
46 [0, 1, 2, 3, 0, 1, 2, 1]
47 [0, 1, 2, 3, 0, 1, 2]
48 [0, 1, 2, 3, 0, 1, 0]
49 [0, 1, 2, 3, 0, 1]
50 [0, 1, 2, 3, 0, 2]
51 [0, 1, 2, 3, 0]
52 [0, 1, 2, 3, 1, 2, 1]
53 [0, 1, 2, 3, 1, 2]
54 [0, 1, 2, 3, 1]
55 [0, 1, 2, 3, 2]
56 [0, 1, 2, 3]
57 [0, 1, 2, 4, 0, 1, 0]
58 [0, 1, 2, 4, 0, 1]
59 [0, 1, 2, 4, 0]
60 [0, 1, 2, 4, 1]
61 [0, 1, 2, 4]
62 [0, 1, 2, 0, 1, 0]
63 [0, 1, 2, 0, 1]
64 [0, 1, 2, 0]
65 [0, 1, 2, 1]
66 [0, 1, 2]
67 [0, 1, 3, 4, 0, 3]
68 [0, 1, 3, 4, 0]
69 [0, 1, 3, 4, 3]
70 [0, 1, 3, 4]
71 [0, 1, 3, 0]
72 [0, 1, 3]
73 [0, 1, 4, 0]
74 [0, 1, 4]
75 [0, 1, 0]
76 [0, 1]
77 [0, 2, 3, 4, 2, 3, 2]
78 [0, 2, 3, 4, 2, 3]
79 [0, 2, 3, 4, 2]
80 [0, 2, 3, 4, 3]
81 [0, 2, 3, 4]
82 [0, 2, 3, 2]
83 [0, 2, 3]
84 [0, 2, 4]
85 [0, 2]
86 [0, 3, 4, 3]
87 [0, 3, 4]
88 [0, 3]
89 [0, 4]
90 [0]
91 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
92 [1, 2, 3, 4, 1, 2, 3, 1, 2]
93 [1, 2, 3, 4, 1, 2, 3, 1]
94 [1, 2, 3, 4, 1, 2, 3, 2]
95 [1, 2, 3, 4, 1, 2, 3]
96 [1, 2, 3, 4, 1, 2, 1]
97 [1, 2, 3, 4, 1, 2]
98 [1, 2, 3, 4, 1, 3]
99 [1, 2, 3, 4, 1]
100 [1, 2, 3, 4, 2, 3, 2]
101 [1, 2, 3, 4, 2, 3]
102 [1, 2, 3, 4, 2]
103 [1, 2, 3, 4, 3]
104 [1, 2, 3, 4]
105 [1, 2, 3, 1, 2, 1]
106 [1, 2, 3, 1, 2]
107 [1, 2, 3, 1]
108 [1, 2, 3, 2]
FAILS!
109 [1, 2, 3]
110 [1, 2, 4, 1]
111 [1, 2, 4]
112 [1, 2, 1]
113 [1, 2]
114 [1, 3, 4, 3]
115 [1, 3, 4]
116 [1, 3]
FAILS!
117 [1, 4]
118 [1]
119 [2, 3, 4, 2, 3, 2]
120 [2, 3, 4, 2, 3]
121 [2, 3, 4, 2]
122 [2, 3, 4, 3]
123 [2, 3, 4]
124 [2, 3, 2]
125 [2, 3]
126 [2, 4]
127 [2]
128 [3, 4, 3]
129 [3, 4]
130 [3]
131 [4]
132 []
sage: n=1
....: for v in sortables(A,c):
....:     fails=true
....:     print(n,v)
....:     n+=1
....:     Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in ra
....: nge((coxnum+2)*A.nrows()))
....:     for i in range(len(Ps)):
....:         for j in range(i+1,min(len(Ps),i+A.nrows()+2)):
....:             if (Ps[i].intersection(Ps[j])).dimension()==0:
....:                 fails=false
....:                 break
....:     if fails:
....:         print('FAILS!')
....: 
1 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
2 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1]
3 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0]
4 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 1]
5 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
6 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0]
7 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
8 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 2]
9 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
10 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2, 1]
11 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2]
12 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1]
13 [0, 1, 2, 3, 4, 0, 1, 2, 3, 2]
14 [0, 1, 2, 3, 4, 0, 1, 2, 3]
15 [0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0]
16 [0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
17 [0, 1, 2, 3, 4, 0, 1, 2, 0]
18 [0, 1, 2, 3, 4, 0, 1, 2, 1]
19 [0, 1, 2, 3, 4, 0, 1, 2]
20 [0, 1, 2, 3, 4, 0, 1, 3, 0]
21 [0, 1, 2, 3, 4, 0, 1, 3]
22 [0, 1, 2, 3, 4, 0, 1, 0]
23 [0, 1, 2, 3, 4, 0, 1]
24 [0, 1, 2, 3, 4, 0, 2, 3, 2]
25 [0, 1, 2, 3, 4, 0, 2, 3]
26 [0, 1, 2, 3, 4, 0, 2]
27 [0, 1, 2, 3, 4, 0, 3]
28 [0, 1, 2, 3, 4, 0]
29 [0, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
30 [0, 1, 2, 3, 4, 1, 2, 3, 1, 2]
31 [0, 1, 2, 3, 4, 1, 2, 3, 1]
32 [0, 1, 2, 3, 4, 1, 2, 3, 2]
33 [0, 1, 2, 3, 4, 1, 2, 3]
34 [0, 1, 2, 3, 4, 1, 2, 1]
35 [0, 1, 2, 3, 4, 1, 2]
36 [0, 1, 2, 3, 4, 1, 3]
37 [0, 1, 2, 3, 4, 1]
38 [0, 1, 2, 3, 4, 2, 3, 2]
39 [0, 1, 2, 3, 4, 2, 3]
40 [0, 1, 2, 3, 4, 2]
41 [0, 1, 2, 3, 4, 3]
42 [0, 1, 2, 3, 4]
43 [0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
44 [0, 1, 2, 3, 0, 1, 2, 0, 1]
45 [0, 1, 2, 3, 0, 1, 2, 0]
46 [0, 1, 2, 3, 0, 1, 2, 1]
47 [0, 1, 2, 3, 0, 1, 2]
48 [0, 1, 2, 3, 0, 1, 0]
49 [0, 1, 2, 3, 0, 1]
50 [0, 1, 2, 3, 0, 2]
51 [0, 1, 2, 3, 0]
52 [0, 1, 2, 3, 1, 2, 1]
53 [0, 1, 2, 3, 1, 2]
54 [0, 1, 2, 3, 1]
55 [0, 1, 2, 3, 2]
56 [0, 1, 2, 3]
57 [0, 1, 2, 4, 0, 1, 0]
58 [0, 1, 2, 4, 0, 1]
59 [0, 1, 2, 4, 0]
60 [0, 1, 2, 4, 1]
61 [0, 1, 2, 4]
62 [0, 1, 2, 0, 1, 0]
63 [0, 1, 2, 0, 1]
64 [0, 1, 2, 0]
65 [0, 1, 2, 1]
66 [0, 1, 2]
67 [0, 1, 3, 4, 0, 3]
68 [0, 1, 3, 4, 0]
69 [0, 1, 3, 4, 3]
70 [0, 1, 3, 4]
71 [0, 1, 3, 0]
72 [0, 1, 3]
73 [0, 1, 4, 0]
74 [0, 1, 4]
75 [0, 1, 0]
76 [0, 1]
77 [0, 2, 3, 4, 2, 3, 2]
78 [0, 2, 3, 4, 2, 3]
79 [0, 2, 3, 4, 2]
80 [0, 2, 3, 4, 3]
81 [0, 2, 3, 4]
82 [0, 2, 3, 2]
83 [0, 2, 3]
84 [0, 2, 4]
85 [0, 2]
86 [0, 3, 4, 3]
87 [0, 3, 4]
88 [0, 3]
89 [0, 4]
90 [0]
91 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
92 [1, 2, 3, 4, 1, 2, 3, 1, 2]
93 [1, 2, 3, 4, 1, 2, 3, 1]
94 [1, 2, 3, 4, 1, 2, 3, 2]
95 [1, 2, 3, 4, 1, 2, 3]
96 [1, 2, 3, 4, 1, 2, 1]
97 [1, 2, 3, 4, 1, 2]
98 [1, 2, 3, 4, 1, 3]
99 [1, 2, 3, 4, 1]
100 [1, 2, 3, 4, 2, 3, 2]
101 [1, 2, 3, 4, 2, 3]
102 [1, 2, 3, 4, 2]
103 [1, 2, 3, 4, 3]
104 [1, 2, 3, 4]
105 [1, 2, 3, 1, 2, 1]
106 [1, 2, 3, 1, 2]
107 [1, 2, 3, 1]
108 [1, 2, 3, 2]
109 [1, 2, 3]
110 [1, 2, 4, 1]
111 [1, 2, 4]
112 [1, 2, 1]
113 [1, 2]
114 [1, 3, 4, 3]
115 [1, 3, 4]
116 [1, 3]
117 [1, 4]
118 [1]
119 [2, 3, 4, 2, 3, 2]
120 [2, 3, 4, 2, 3]
121 [2, 3, 4, 2]
122 [2, 3, 4, 3]
123 [2, 3, 4]
124 [2, 3, 2]
125 [2, 3]
126 [2, 4]
127 [2]
128 [3, 4, 3]
129 [3, 4]
130 [3]
131 [4]
132 []
sage: n=1
....: for v in sortables(A,c):
....:     fails=true
....:     print(n,v)
....:     n+=1
....:     Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in ra
....: nge((coxnum+2)*A.nrows()))
....:     for i in range(len(Ps)):
....:         for j in range(i+1,min(len(Ps),i+A.nrows()+2)):
....:             if (Ps[i].intersection(Ps[j])).dimension()==0:
....:                 fails=false
....:                 break
....:     if fails:
....:         print('FAILS!')
....:         break
....: 
1 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0]

^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [326], line 6
      4 print(n,v)
      5 n+=Integer(1)
----> 6 Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in range((coxnum+Integer(2))*A.nrows()))
      7 for i in range(len(Ps)):
      8     for j in range(i+Integer(1),min(len(Ps),i+A.nrows()+Integer(2))):

Cell In [326], line 6, in <genexpr>(.0)
      4 print(n,v)
      5 n+=Integer(1)
----> 6 Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in range((coxnum+Integer(2))*A.nrows()))
      7 for i in range(len(Ps)):
      8     for j in range(i+Integer(1),min(len(Ps),i+A.nrows()+Integer(2))):

Cell In [258], line 159, in p_lambda_faster(B, la, seq)
    155         P=Ep*Pp
    156     else:
    157         #print("Pp:   ",Pp,Pp.vertices(),Pp.rays(),Pp.lines(),"\n")
    158         #print("Pm:   ",Pm,Pm.vertices(),Pm.rays(),Pm.lines(),"\n\n")
--> 159         P=(Ep*Pp).convex_hull(Em*Pm)
    160     B.mutate(k)
    161 return P

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4099, in sage.structure.element.Matrix.__mul__ (build/cythonized/sage/structure/element.c:35219)()
   4097 
   4098         if BOTH_ARE_ELEMENT(cl):
-> 4099             return coercion_model.bin_op(left, right, mul)
   4100 
   4101         cdef long value

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1222, in sage.structure.coerce.CoercionModel.bin_op (build/cythonized/sage/structure/coerce.c:15809)()
   1220 if action is not None:
   1221     if (<Action>action)._is_left:
-> 1222         return (<Action>action)._act_(x, y)
   1223     else:
   1224         return (<Action>action)._act_(y, x)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_actions.pyx:157, in sage.structure.coerce_actions.ActedUponAction._act_ (build/cythonized/sage/structure/coerce_actions.c:8579)()
    155     <... 'sage.structure.coerce_actions.ActedUponAction'>
    156 """
--> 157 return (<Element>x)._acted_upon_(g, not self._is_left)
    158 
    159 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:949, in sage.structure.element.Element._acted_upon_ (build/cythonized/sage/structure/element.c:16495)()
    947     return None
    948 
--> 949 cpdef _acted_upon_(self, x, bint self_on_left) noexcept:
    950     """
    951     Use this method to implement ``self`` acted on by x.

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1450, in Polyhedron_base5._acted_upon_(self, actor, self_on_left)
   1448         raise ValueError("matrices should act on the left")
   1449     else:
-> 1450         return self.linear_transformation(actor)
   1451 else:
   1452     return self.dilation(actor)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1821, in Polyhedron_base5.linear_transformation(self, linear_transf, new_base_ring)
   1819 else:
   1820     new_vertices = ()
-> 1821 if self.n_rays():
   1822     new_rays = ( r for r in matrix(R, self.rays())*linear_transf.transpose() )
   1823 else:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/misc/cachefunc.pyx:2329, in sage.misc.cachefunc.CachedMethodCallerNoArgs.__call__ (build/cythonized/sage/misc/cachefunc.c:16226)()
   2327 if self.cache is None:
   2328     f = self.f
-> 2329     self.cache = f(self._instance)
   2330 return self.cache
   2331 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:546, in Polyhedron_base0.n_rays(self)
    513     """
    514     Return the number of vertices. The representation will
    515     always be minimal.
   (...)
    542         2
    543     """
    544     return len(self.vertices())
--> 546 @cached_method
    547 def n_rays(self):
    548     """
    549     Return the number of rays. The representation will
    550     always be minimal.
   (...)
    556         1
    557     """
    558     return len(self.rays())

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['B',5])
sage: c=[0,1,2,3,4]
sage: coxnum=10
sage: n=1
....: for v in sortables(A,c):
....:     fails=true
....:     print(n,v)
....:     n+=1
....:     Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in ra
....: nge((coxnum+2)*A.nrows()))
....:     for i in range(len(Ps)):
....:         for j in range(i+1,min(len(Ps),i+A.nrows()+2)):
....:             if (Ps[i].intersection(Ps[j])).dimension()==0:
....:                 fails=false
....:                 break
....:     if fails:
....:         print('FAILS!')
....:         break
....: 
1 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
2 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3]
3 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2]
4 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1]
5 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0]
6 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
7 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
8 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
9 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
10 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3]
11 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
FAILS!
sage: n=1
....: for v in sortables(A,c):
....:     fails=true
....:     print(n,v)
....:     n+=1
....:     Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in ra
....: nge((coxnum+2)*A.nrows()))
....:     for i in range(len(Ps)):
....:         for j in range(i+1,min(len(Ps),i+coxnum)):
....:             if (Ps[i].intersection(Ps[j])).dimension()==0:
....:                 fails=false
....:                 break
....:     if fails:
....:         print('FAILS!')
....:         break
....: 
1 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
2 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3]
3 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2]
4 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1]
5 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0]
6 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
7 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
8 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
9 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
10 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3]
11 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
12 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0]
13 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2]
14 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 0]
15 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1]
16 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0]
17 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4]
18 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3]
19 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2]
20 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1]
21 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
22 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1]
23 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0]
24 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
25 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0]
26 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
27 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
28 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2]
29 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1]
30 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3]
31 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0]
32 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
33 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0]
34 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 1]
35 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2]
36 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 0]
37 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1]
38 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2, 3, 4]
FAILS!
sage: n=1
....: for v in sortables(A,c):
....:     fails=true
....:     print(n,v)
....:     n+=1
....:     Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in ra
....: nge((coxnum+2)*A.nrows()))
....:     for i in range(len(Ps)):
....:         for j in range(coxnum):
....:             if (Ps[i].intersection(Ps[(i+j)%len(Ps)])).dimension()==0:
....:                 fails=false
....:                 break
....:     if fails:
....:         print('FAILS!')
....:         break
....: 
....: 
....: 
....: 
....: 
....: 
....: 
1 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
2 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3]
3 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2]
4 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1]
5 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0]
6 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
7 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
8 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
9 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
10 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3]
11 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
12 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0]
13 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2]
14 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 0]
15 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1]
16 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0]
17 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4]
18 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3]
19 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2]
20 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1]
21 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
22 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1]
23 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0]
24 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
25 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0]
26 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
27 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
28 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2]
29 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1]
30 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3]
31 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0]
32 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
33 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0]
34 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 1]
35 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2]
36 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 0]
37 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1]
38 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2, 3, 4]
FAILS!
sage: A
[ 2 -1  0  0  0]
[-1  2 -1  0  0]
[ 0 -1  2 -1  0]
[ 0  0 -1  2 -1]
[ 0  0  0 -2  2]
sage: c
[0, 1, 2, 3, 4]
sage: coxnum
10
sage: for v in sortables(A,c):
....:     print(v)
....:     Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in ra
....: nge((coxnum+2)*A.nrows()))
....:     for i in range(len(Ps)):
....:         for j in range(i+1,min(len(Ps),i+A.nrows()+2)):
....:             if (Ps[i].intersection(Ps[j])).dimension()==0:
....:                 print(i,j)
....: 
....: 
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
23 29
24 29
26 31
26 32
53 59
54 59
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3]
22 28
23 28
24 29
26 31
26 32
52 58
53 58
54 59
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2]
21 27
22 27
23 28
24 29
51 57
52 57
53 58
54 59
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1]
21 26
22 27
23 28
23 29
51 56
52 57
53 58
53 59
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0]
18 24
19 24
21 26
22 27
22 28
48 54
49 54
51 56
52 57
52 58
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
18 24
19 24
21 26
21 27
48 54
49 54
51 56
51 57
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
21 27
22 27
23 28
23 29
51 57
52 57
53 58
53 59
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
21 26
22 27
23 28
23 29
51 56
52 57
53 58
53 59
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
17 23
18 23
19 24
21 26
22 27
22 28
47 53
48 53
49 54
51 56
52 57
52 58
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3]
17 23
18 23
19 24
21 26
21 27
47 53
48 53
49 54
51 56
51 57
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0]
16 22
17 22
18 23
19 24
46 52
47 52
48 53
49 54
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2]
^[[A^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [336], line 3
      1 for v in sortables(A,c):
      2     print(v)
----> 3     Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in range((coxnum+Integer(2))*A.nrows()))
      4     for i in range(len(Ps)):
      5         for j in range(i+Integer(1),min(len(Ps),i+A.nrows()+Integer(2))):

Cell In [336], line 3, in <genexpr>(.0)
      1 for v in sortables(A,c):
      2     print(v)
----> 3     Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in range((coxnum+Integer(2))*A.nrows()))
      4     for i in range(len(Ps)):
      5         for j in range(i+Integer(1),min(len(Ps),i+A.nrows()+Integer(2))):

Cell In [258], line 150, in p_lambda_faster(B, la, seq)
    147 Hm = Polyhedron(ieqs=[(Integer(0),)*(k+Integer(1))+(-Integer(1),)+(Integer(0),)*(m-k-Integer(1))])
    148 #print("Hp:   ",Hp,Hp.vertices(),Hp.rays(),Hp.lines(),"\n")
    149 #print("Hm:   ",Hm,Hm.vertices(),Hm.rays(),Hm.lines(),"\n\n")
--> 150 Pp = P.intersection(Hp)
    151 Pm = P.intersection(Hm)
    152 if Pp.dimension() < rk:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1371, in Polyhedron_base5.intersection(self, other)
   1369 parent = self.parent()
   1370 try:
-> 1371     intersection = parent.element_class(parent, None, [new_ieqs, new_eqns])
   1373     # Force calculation of the vertices.
   1374     _ = intersection.n_vertices()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:179, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    177 elif Hrep is not None:
    178     ieqs, eqns = Hrep
--> 179     self._init_from_Hrepresentation(ieqs, eqns, **kwds)
    180 else:
    181     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:129, in Polyhedron_ppl._init_from_Hrepresentation(self, ieqs, eqns, minimize, verbose)
    106 def _init_from_Hrepresentation(self, ieqs, eqns, minimize=True, verbose=False):
    107     """
    108     Construct polyhedron from H-representation data.
    109 
   (...)
    127         sage: Polyhedron_ppl._init_from_Hrepresentation(p, [], [])
    128     """
--> 129     cs = self._convert_constraints_to_ppl(ieqs, eqns)
    130     if cs.empty():
    131         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'universe')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:534, in Polyhedron_ppl._convert_constraints_to_ppl(ieqs, eqns)
    532     ieqs = []
    533 for ieq in ieqs:
--> 534     cs.insert(Polyhedron_ppl._convert_constraint_to_ppl(ieq, INEQUALITY))
    535 if eqns is None:
    536     eqns = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:509, in Polyhedron_ppl._convert_constraint_to_ppl(c, typ)
    507 A = dc[1:]
    508 if typ == INEQUALITY:
--> 509     return Linear_Expression(A, b) >= 0
    510 else:
    511     return Linear_Expression(A, b) == 0

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A
[ 2 -1  0  0  0]
[-1  2 -1  0  0]
[ 0 -1  2 -1  0]
[ 0  0 -1  2 -1]
[ 0  0  0 -2  2]
sage: coxnum
10
sage: c
[0, 1, 2, 3, 4]
sage: for v in sortables(A,c):
....:     print(v)
....:     Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in ra
....: nge((coxnum+2)*A.nrows()))
....:     for i in range(len(Ps)):
....:         for j in range(i+1,len(Ps)):
....:             if (Ps[i].intersection(Ps[j])).dimension()==0:
....:                 print(i,j)
....: 
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
1 26
1 56
2 26
2 56
3 26
3 56
4 26
4 56
6 27
6 57
7 27
7 57
8 27
8 57
9 27
9 57
11 28
11 58
12 28
12 58
13 28
13 58
14 28
14 58
16 29
16 59
17 29
17 59
18 29
18 59
19 29
19 59
21 29
21 59
22 29
22 59
23 29
23 59
24 29
24 59
26 31
26 32
26 33
26 34
27 36
27 37
27 38
27 39
28 41
28 42
28 43
28 44
29 46
29 47
29 48
29 49
29 51
29 52
29 53
29 54
31 56
32 56
33 56
34 56
36 57
37 57
38 57
39 57
41 58
42 58
43 58
44 58
46 59
47 59
48 59
49 59
51 59
52 59
53 59
54 59
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3]
^C---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:1093, in Polyhedra_base._make_Equation(self, polyhedron, data)
   1092 try:
-> 1093     obj = self._Equation_pool.pop()
   1094 except IndexError:

IndexError: pop from empty list

During handling of the above exception, another exception occurred:

KeyboardInterrupt                         Traceback (most recent call last)
Cell In [340], line 3
      1 for v in sortables(A,c):
      2     print(v)
----> 3     Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in range((coxnum+Integer(2))*A.nrows()))
      4     for i in range(len(Ps)):
      5         for j in range(i+Integer(1),len(Ps)):

Cell In [340], line 3, in <genexpr>(.0)
      1 for v in sortables(A,c):
      2     print(v)
----> 3     Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in range((coxnum+Integer(2))*A.nrows()))
      4     for i in range(len(Ps)):
      5         for j in range(i+Integer(1),len(Ps)):

Cell In [258], line 151, in p_lambda_faster(B, la, seq)
    148 #print("Hp:   ",Hp,Hp.vertices(),Hp.rays(),Hp.lines(),"\n")
    149 #print("Hm:   ",Hm,Hm.vertices(),Hm.rays(),Hm.lines(),"\n\n")
    150 Pp = P.intersection(Hp)
--> 151 Pm = P.intersection(Hm)
    152 if Pp.dimension() < rk:
    153     P=Em*Pm

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1371, in Polyhedron_base5.intersection(self, other)
   1369 parent = self.parent()
   1370 try:
-> 1371     intersection = parent.element_class(parent, None, [new_ieqs, new_eqns])
   1373     # Force calculation of the vertices.
   1374     _ = intersection.n_vertices()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:70, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
---> 70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:195, in Polyhedron_ppl.set_immutable(self)
    193         raise e
    194 if not hasattr(self, '_Hrepresentation'):
--> 195     self._init_Hrepresentation_from_ppl(True)
    196 self._is_mutable = False

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:346, in Polyhedron_ppl._init_Hrepresentation_from_ppl(self, minimize)
    344         parent._make_Inequality(self, (c.inhomogeneous_term(),) + c.coefficients())
    345     elif c.is_equality():
--> 346         parent._make_Equation(self, (c.inhomogeneous_term(),) + c.coefficients())
    347 self._Hrepresentation = tuple(self._Hrepresentation)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:1095, in Polyhedra_base._make_Equation(self, polyhedron, data)
   1093     obj = self._Equation_pool.pop()
   1094 except IndexError:
-> 1095     obj = Equation(self)
   1096 obj._set_data(polyhedron, data)
   1097 return obj

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/representation.py:410, in Hrepresentation.__init__(self, polyhedron_parent)
    408 self._base_ring = polyhedron_parent.base_ring()
    409 self._vector = polyhedron_parent.Hrepresentation_space()(0)
--> 410 self._A = polyhedron_parent.ambient_space()(0)
    411 self._b = polyhedron_parent.base_ring()(0)
    412 self._index = 0

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/misc/cachefunc.pyx:2329, in sage.misc.cachefunc.CachedMethodCallerNoArgs.__call__ (build/cythonized/sage/misc/cachefunc.c:16226)()
   2327 if self.cache is None:
   2328     f = self.f
-> 2329     self.cache = f(self._instance)
   2330 return self.cache
   2331 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:460, in Polyhedra_base.Vrepresentation_space(self)
    457     R = self.base_ring()
    458     return self(None, [[[R.one()] + [R.zero()] * self.ambient_dim()], []], convert=True)
--> 460 @cached_method
    461 def Vrepresentation_space(self):
    462     r"""
    463     Return the ambient vector space.
    464 
   (...)
    478         Vector space of dimension 4 over Rational Field
    479     """
    480     if self.base_ring() in Fields():

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: for v in sortables(A,c):
....:     print(v)
....:     Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in ra
....: nge((coxnum+2)*A.nrows()))
....:     fails=true
....:     for i in range(len(Ps)):
....:         for j in range(i+1,len(Ps)):
....:             if (Ps[i].intersection(Ps[j])).dimension()==0:
....:                 fail=false
....:     if fails:
....:         print('FAILS!')
....:         break
....: 
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
FAILS!
sage: for v in sortables(A,c):
....:     print(v)
....:     Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in ra
....: nge((coxnum+2)*A.nrows()))
....:     fails=true
....:     for i in range(len(Ps)):
....:         for j in range(i+1,len(Ps)):
....:             if (Ps[i].intersection(Ps[j])).dimension()==0:
....:                 fails=false
....:     if fails:
....:         print('FAILS!')
....:         break
....: 
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
^[[A^[[A^[[A^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [342], line 3
      1 for v in sortables(A,c):
      2     print(v)
----> 3     Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in range((coxnum+Integer(2))*A.nrows()))
      4     fails=true
      5     for i in range(len(Ps)):

Cell In [342], line 3, in <genexpr>(.0)
      1 for v in sortables(A,c):
      2     print(v)
----> 3     Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in range((coxnum+Integer(2))*A.nrows()))
      4     fails=true
      5     for i in range(len(Ps)):

Cell In [258], line 150, in p_lambda_faster(B, la, seq)
    147 Hm = Polyhedron(ieqs=[(Integer(0),)*(k+Integer(1))+(-Integer(1),)+(Integer(0),)*(m-k-Integer(1))])
    148 #print("Hp:   ",Hp,Hp.vertices(),Hp.rays(),Hp.lines(),"\n")
    149 #print("Hm:   ",Hm,Hm.vertices(),Hm.rays(),Hm.lines(),"\n\n")
--> 150 Pp = P.intersection(Hp)
    151 Pm = P.intersection(Hm)
    152 if Pp.dimension() < rk:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1371, in Polyhedron_base5.intersection(self, other)
   1369 parent = self.parent()
   1370 try:
-> 1371     intersection = parent.element_class(parent, None, [new_ieqs, new_eqns])
   1373     # Force calculation of the vertices.
   1374     _ = intersection.n_vertices()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:70, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
---> 70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:195, in Polyhedron_ppl.set_immutable(self)
    193         raise e
    194 if not hasattr(self, '_Hrepresentation'):
--> 195     self._init_Hrepresentation_from_ppl(True)
    196 self._is_mutable = False

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:344, in Polyhedron_ppl._init_Hrepresentation_from_ppl(self, minimize)
    342 for c in cs:
    343     if c.is_inequality():
--> 344         parent._make_Inequality(self, (c.inhomogeneous_term(),) + c.coefficients())
    345     elif c.is_equality():
    346         parent._make_Equation(self, (c.inhomogeneous_term(),) + c.coefficients())

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:1069, in Polyhedra_base._make_Inequality(self, polyhedron, data)
   1067 except IndexError:
   1068     obj = Inequality(self)
-> 1069 obj._set_data(polyhedron, data)
   1070 return obj

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/representation.py:440, in Hrepresentation._set_data(self, polyhedron, data)
    437     raise ValueError('H-representation data requires a list of length ambient_dim+1')
    439 self._vector[:] = data
--> 440 self._A[:] = data[1:]
    441 self._b = self._base_ring(data[0])
    443 self._index = len(polyhedron._Hrepresentation)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/modules/free_module_element.pyx:1893, in sage.modules.free_module_element.FreeModuleElement.__setitem__ (build/cythonized/sage/modules/free_module_element.c:20047)()
   1891 if isinstance(i, slice):
   1892     PySlice_GetIndicesEx(i, d, &start, &stop, &step, &slicelength)
-> 1893     values = [R(x) for x in value]
   1894     if len(values) != slicelength:
   1895         raise IndexError("slice assignment would change dimension")

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/parent.pyx:901, in sage.structure.parent.Parent.__call__ (build/cythonized/sage/structure/parent.c:12658)()
    899 if mor is not None:
    900     if no_extra_args:
--> 901         return mor._call_(x)
    902     else:
    903         return mor._call_with_args(x, args, kwds)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:158, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_ (build/cythonized/sage/structure/coerce_maps.c:6834)()
    156 cdef Parent C = self._codomain
    157 try:
--> 158     return C._element_constructor(x)
    159 except Exception:
    160     if print_warnings:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/rings/rational.pyx:536, in sage.rings.rational.Rational.__init__ (build/cythonized/sage/rings/rational.cpp:14305)()
    534     """
    535     if x is not None:
--> 536         self.__set_value(x, base)
    537 
    538 def __reduce__(self):

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/rings/rational.pyx:670, in sage.rings.rational.Rational._Rational__set_value (build/cythonized/sage/rings/rational.cpp:16246)()
    668         raise TypeError("unable to convert {!r} to a rational".format(x))
    669 
--> 670 elif isinstance(x, fractions.Fraction):
    671     mpz_set(mpq_numref(self.value), (<integer.Integer> integer.Integer(x.numerator)).value)
    672     mpz_set(mpq_denref(self.value), (<integer.Integer> integer.Integer(x.denominator)).value)

File <frozen abc>:117, in __instancecheck__(cls, instance)

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: n=1
....: for v in sortables(A,c):
....:     print(n,v)
....:     n+=1
....:     Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in ra
....: nge((coxnum+2)*A.nrows()))
....:     fails=true
....:     for i in range(len(Ps)):
....:         for j in range(i+1,len(Ps)):
....:             if (Ps[i].intersection(Ps[j])).dimension()==0:
....:                 fails=false
....:                 break
....:     if fails:
....:         print('FAILS!')
....:         break
....: 
1 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
2 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3]
3 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2]
4 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1]
5 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0]
6 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
7 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
8 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
9 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
10 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3]
11 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
12 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0]
13 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2]
14 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 0]
15 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1]
16 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0]
17 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4]
18 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3]
19 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2]
20 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1]
21 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
22 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1]
23 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0]
24 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
25 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0]
26 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
27 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
28 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2]
29 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1]
30 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3]
31 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0]
32 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
33 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0]
34 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 1]
35 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2]
36 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 0]
37 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1]
38 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2, 3, 4]
39 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2, 3]
40 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2]
41 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0]
42 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
43 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
44 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
45 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1]
46 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4]
47 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 1, 2]
48 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 1]
49 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3]
50 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 1]
51 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2]
52 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1]
53 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2, 3, 4]
54 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2, 3]
55 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2]
56 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
57 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
58 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1]
59 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0]
60 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 1]
61 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
62 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0]
63 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
64 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 2]
65 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
66 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2, 1]
67 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2]
68 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1]
69 [0, 1, 2, 3, 4, 0, 1, 2, 3, 2]
70 [0, 1, 2, 3, 4, 0, 1, 2, 3]
71 [0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0]
72 [0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
73 [0, 1, 2, 3, 4, 0, 1, 2, 0]
74 [0, 1, 2, 3, 4, 0, 1, 2, 1]
75 [0, 1, 2, 3, 4, 0, 1, 2]
76 [0, 1, 2, 3, 4, 0, 1, 3, 4, 0]
77 [0, 1, 2, 3, 4, 0, 1, 3, 4]
78 [0, 1, 2, 3, 4, 0, 1, 3, 0]
79 [0, 1, 2, 3, 4, 0, 1, 3]
80 [0, 1, 2, 3, 4, 0, 1, 0]
81 [0, 1, 2, 3, 4, 0, 1]
82 [0, 1, 2, 3, 4, 0, 2, 3, 4, 2, 3, 4]
83 [0, 1, 2, 3, 4, 0, 2, 3, 4, 2, 3]
84 [0, 1, 2, 3, 4, 0, 2, 3, 4, 2]
85 [0, 1, 2, 3, 4, 0, 2, 3, 4]
86 [0, 1, 2, 3, 4, 0, 2, 3, 2]
87 [0, 1, 2, 3, 4, 0, 2, 3]
88 [0, 1, 2, 3, 4, 0, 2]
89 [0, 1, 2, 3, 4, 0, 3, 4]
90 [0, 1, 2, 3, 4, 0, 3]
91 [0, 1, 2, 3, 4, 0]
92 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
93 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
94 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
95 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1]
96 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
97 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2]
98 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1]
99 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
100 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1]
101 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
102 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1]
103 [0, 1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4]
104 [0, 1, 2, 3, 4, 1, 2, 3, 4, 2, 3]
105 [0, 1, 2, 3, 4, 1, 2, 3, 4, 2]
106 [0, 1, 2, 3, 4, 1, 2, 3, 4]
107 [0, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
108 [0, 1, 2, 3, 4, 1, 2, 3, 1, 2]
109 [0, 1, 2, 3, 4, 1, 2, 3, 1]
110 [0, 1, 2, 3, 4, 1, 2, 3, 2]
111 [0, 1, 2, 3, 4, 1, 2, 3]
112 [0, 1, 2, 3, 4, 1, 2, 1]
113 [0, 1, 2, 3, 4, 1, 2]
114 [0, 1, 2, 3, 4, 1, 3, 4]
115 [0, 1, 2, 3, 4, 1, 3]
116 [0, 1, 2, 3, 4, 1]
117 [0, 1, 2, 3, 4, 2, 3, 4, 2, 3, 4]
118 [0, 1, 2, 3, 4, 2, 3, 4, 2, 3]
119 [0, 1, 2, 3, 4, 2, 3, 4, 2]
120 [0, 1, 2, 3, 4, 2, 3, 4]
121 [0, 1, 2, 3, 4, 2, 3, 2]
122 [0, 1, 2, 3, 4, 2, 3]
123 [0, 1, 2, 3, 4, 2]
124 [0, 1, 2, 3, 4, 3, 4]
125 [0, 1, 2, 3, 4, 3]
126 [0, 1, 2, 3, 4]
127 [0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
128 [0, 1, 2, 3, 0, 1, 2, 0, 1]
129 [0, 1, 2, 3, 0, 1, 2, 0]
130 [0, 1, 2, 3, 0, 1, 2, 1]
131 [0, 1, 2, 3, 0, 1, 2]
132 [0, 1, 2, 3, 0, 1, 0]
133 [0, 1, 2, 3, 0, 1]
134 [0, 1, 2, 3, 0, 2]
135 [0, 1, 2, 3, 0]
136 [0, 1, 2, 3, 1, 2, 1]
137 [0, 1, 2, 3, 1, 2]
138 [0, 1, 2, 3, 1]
139 [0, 1, 2, 3, 2]
140 [0, 1, 2, 3]
141 [0, 1, 2, 4, 0, 1, 0]
142 [0, 1, 2, 4, 0, 1]
143 [0, 1, 2, 4, 0]
144 [0, 1, 2, 4, 1]
145 [0, 1, 2, 4]
146 [0, 1, 2, 0, 1, 0]
147 [0, 1, 2, 0, 1]
148 [0, 1, 2, 0]
149 [0, 1, 2, 1]
150 [0, 1, 2]
151 [0, 1, 3, 4, 0, 3, 4]
152 [0, 1, 3, 4, 0, 3]
153 [0, 1, 3, 4, 0]
154 [0, 1, 3, 4, 3, 4]
155 [0, 1, 3, 4, 3]
156 [0, 1, 3, 4]
157 [0, 1, 3, 0]
158 [0, 1, 3]
159 [0, 1, 4, 0]
160 [0, 1, 4]
161 [0, 1, 0]
162 [0, 1]
163 [0, 2, 3, 4, 2, 3, 4, 2, 3, 4]
164 [0, 2, 3, 4, 2, 3, 4, 2, 3]
165 [0, 2, 3, 4, 2, 3, 4, 2]
166 [0, 2, 3, 4, 2, 3, 4]
167 [0, 2, 3, 4, 2, 3, 2]
168 [0, 2, 3, 4, 2, 3]
169 [0, 2, 3, 4, 2]
170 [0, 2, 3, 4, 3, 4]
171 [0, 2, 3, 4, 3]
172 [0, 2, 3, 4]
173 [0, 2, 3, 2]
174 [0, 2, 3]
175 [0, 2, 4]
176 [0, 2]
177 [0, 3, 4, 3, 4]
178 [0, 3, 4, 3]
179 [0, 3, 4]
180 [0, 3]
181 [0, 4]
182 [0]
183 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
184 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
185 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
186 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1]
187 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
188 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2]
189 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1]
190 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
191 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1]
192 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
193 [1, 2, 3, 4, 1, 2, 3, 4, 1]
194 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4]
195 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3]
196 [1, 2, 3, 4, 1, 2, 3, 4, 2]
197 [1, 2, 3, 4, 1, 2, 3, 4]
198 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
199 [1, 2, 3, 4, 1, 2, 3, 1, 2]
200 [1, 2, 3, 4, 1, 2, 3, 1]
201 [1, 2, 3, 4, 1, 2, 3, 2]
202 [1, 2, 3, 4, 1, 2, 3]
203 [1, 2, 3, 4, 1, 2, 1]
204 [1, 2, 3, 4, 1, 2]
205 [1, 2, 3, 4, 1, 3, 4]
206 [1, 2, 3, 4, 1, 3]
207 [1, 2, 3, 4, 1]
208 [1, 2, 3, 4, 2, 3, 4, 2, 3, 4]
209 [1, 2, 3, 4, 2, 3, 4, 2, 3]
210 [1, 2, 3, 4, 2, 3, 4, 2]
211 [1, 2, 3, 4, 2, 3, 4]
212 [1, 2, 3, 4, 2, 3, 2]
213 [1, 2, 3, 4, 2, 3]
214 [1, 2, 3, 4, 2]
215 [1, 2, 3, 4, 3, 4]
216 [1, 2, 3, 4, 3]
217 [1, 2, 3, 4]
218 [1, 2, 3, 1, 2, 1]
219 [1, 2, 3, 1, 2]
220 [1, 2, 3, 1]
221 [1, 2, 3, 2]
222 [1, 2, 3]
223 [1, 2, 4, 1]
224 [1, 2, 4]
225 [1, 2, 1]
226 [1, 2]
227 [1, 3, 4, 3, 4]
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [343], line 5
      3 print(n,v)
      4 n+=Integer(1)
----> 5 Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in range((coxnum+Integer(2))*A.nrows()))
      6 fails=true
      7 for i in range(len(Ps)):

Cell In [343], line 5, in <genexpr>(.0)
      3 print(n,v)
      4 n+=Integer(1)
----> 5 Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in range((coxnum+Integer(2))*A.nrows()))
      6 fails=true
      7 for i in range(len(Ps)):

Cell In [258], line 159, in p_lambda_faster(B, la, seq)
    155         P=Ep*Pp
    156     else:
    157         #print("Pp:   ",Pp,Pp.vertices(),Pp.rays(),Pp.lines(),"\n")
    158         #print("Pm:   ",Pm,Pm.vertices(),Pm.rays(),Pm.lines(),"\n\n")
--> 159         P=(Ep*Pp).convex_hull(Em*Pm)
    160     B.mutate(k)
    161 return P

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4099, in sage.structure.element.Matrix.__mul__ (build/cythonized/sage/structure/element.c:35219)()
   4097 
   4098         if BOTH_ARE_ELEMENT(cl):
-> 4099             return coercion_model.bin_op(left, right, mul)
   4100 
   4101         cdef long value

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1222, in sage.structure.coerce.CoercionModel.bin_op (build/cythonized/sage/structure/coerce.c:15809)()
   1220 if action is not None:
   1221     if (<Action>action)._is_left:
-> 1222         return (<Action>action)._act_(x, y)
   1223     else:
   1224         return (<Action>action)._act_(y, x)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_actions.pyx:157, in sage.structure.coerce_actions.ActedUponAction._act_ (build/cythonized/sage/structure/coerce_actions.c:8579)()
    155     <... 'sage.structure.coerce_actions.ActedUponAction'>
    156 """
--> 157 return (<Element>x)._acted_upon_(g, not self._is_left)
    158 
    159 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:949, in sage.structure.element.Element._acted_upon_ (build/cythonized/sage/structure/element.c:16495)()
    947     return None
    948 
--> 949 cpdef _acted_upon_(self, x, bint self_on_left) noexcept:
    950     """
    951     Use this method to implement ``self`` acted on by x.

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1450, in Polyhedron_base5._acted_upon_(self, actor, self_on_left)
   1448         raise ValueError("matrices should act on the left")
   1449     else:
-> 1450         return self.linear_transformation(actor)
   1451 else:
   1452     return self.dilation(actor)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1879, in Polyhedron_base5.linear_transformation(self, linear_transf, new_base_ring)
   1873     pref_rep = 'Vrep' if self.n_vertices() <= self.n_inequalities() else 'Hrep'
   1875     return new_parent.element_class(new_parent, [new_vertices, new_rays, new_lines],
   1876                                     [new_inequalities, new_equations],
   1877                                     Vrep_minimal=True, Hrep_minimal=True, pref_rep=pref_rep)
-> 1879 return new_parent.element_class(new_parent, [tuple(new_vertices), tuple(new_rays), tuple(new_lines)], None)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:174, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    171     lines = tuple(lines)
    173 if vertices or rays or lines:
--> 174     self._init_from_Vrepresentation(vertices, rays, lines, **kwds)
    175 else:
    176     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:99, in Polyhedron_ppl._init_from_Vrepresentation(self, vertices, rays, lines, minimize, verbose)
     72 def _init_from_Vrepresentation(self, vertices, rays, lines, minimize=True, verbose=False):
     73     """
     74     Construct polyhedron from V-representation data.
     75 
   (...)
     97         sage: Polyhedron_ppl._init_from_Vrepresentation(p, [], [], [])
     98     """
---> 99     gs = self._convert_generators_to_ppl(vertices, rays, lines)
    100     if gs.empty():
    101         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'empty')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:477, in Polyhedron_ppl._convert_generators_to_ppl(vertices, rays, lines)
    475     rays = []
    476 for r in rays:
--> 477     gs.insert(Polyhedron_ppl._convert_generator_to_ppl(r, RAY))
    478 if lines is None:
    479     lines = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:442, in Polyhedron_ppl._convert_generator_to_ppl(v, typ)
    440 d = LCM_list([denominator(v_i) for v_i in v])
    441 if d.is_one():
--> 442     return ob(Linear_Expression(v, 0))
    443 else:
    444     dv = [ d*v_i for v_i in v ]

File ppl/linear_algebra.pyx:654, in ppl.linear_algebra.Linear_Expression.__init__()

File ppl/linear_algebra.pyx:49, in ppl.linear_algebra.PPL_Coefficient_from_pyobject()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:1107, in sage.structure.element.Element.__richcmp__ (build/cythonized/sage/structure/element.c:18121)()
   1105         return (<Element>self)._richcmp_(other, op)
   1106     else:
-> 1107         return coercion_model.richcmp(self, other, op)
   1108 
   1109 cpdef _richcmp_(left, right, int op) noexcept:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:2021, in sage.structure.coerce.CoercionModel.richcmp (build/cythonized/sage/structure/coerce.c:26173)()
   2019 # Coerce to a common parent
   2020 try:
-> 2021     x, y = self.canonical_coercion(x, y)
   2022 except (TypeError, NotImplementedError):
   2023     pass

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1422, in sage.structure.coerce.CoercionModel.canonical_coercion (build/cythonized/sage/structure/coerce.c:18956)()
   1420             self._record_exception()
   1421 
-> 1422     raise TypeError("no common canonical parent for objects with parents: '%s' and '%s'"%(xp, yp))
   1423 
   1424 cpdef coercion_maps(self, R, S) noexcept:

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A
[ 2 -1  0  0  0]
[-1  2 -1  0  0]
[ 0 -1  2 -1  0]
[ 0  0 -1  2 -1]
[ 0  0  0 -2  2]
sage: 0%5
0
sage: -1%5
4
sage: -2%5
3
sage: -3%5
2
sage: -1%5
4
sage: -4%5
1
sage: -5%5
0
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+1) for
....: i in range(4)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]
FAILURE! 4
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+1) for
....: i in range(5)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]
2 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2]
3 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1]
4 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0]
5 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]
6 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 0, 1]
7 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 0]
8 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2]
9 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 0]
10 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1]
11 [0, 1, 2, 3, 0, 1, 2, 3, 0]
12 [0, 1, 2, 3, 0, 1, 2, 3, 1, 2, 3]
13 [0, 1, 2, 3, 0, 1, 2, 3, 1, 2]
14 [0, 1, 2, 3, 0, 1, 2, 3, 1]
15 [0, 1, 2, 3, 0, 1, 2, 3]
16 [0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
17 [0, 1, 2, 3, 0, 1, 2, 0, 1]
18 [0, 1, 2, 3, 0, 1, 2, 0]
19 [0, 1, 2, 3, 0, 1, 2, 1]
20 [0, 1, 2, 3, 0, 1, 2]
21 [0, 1, 2, 3, 0, 1, 0]
22 [0, 1, 2, 3, 0, 1]
23 [0, 1, 2, 3, 0, 2, 3]
24 [0, 1, 2, 3, 0, 2]
25 [0, 1, 2, 3, 0]
26 [0, 1, 2, 3, 1, 2, 3, 1, 2, 3]
27 [0, 1, 2, 3, 1, 2, 3, 1, 2]
28 [0, 1, 2, 3, 1, 2, 3, 1]
29 [0, 1, 2, 3, 1, 2, 3]
30 [0, 1, 2, 3, 1, 2, 1]
31 [0, 1, 2, 3, 1, 2]
32 [0, 1, 2, 3, 1]
33 [0, 1, 2, 3, 2, 3]
34 [0, 1, 2, 3, 2]
35 [0, 1, 2, 3]
36 [0, 1, 2, 0, 1, 0]
37 [0, 1, 2, 0, 1]
38 [0, 1, 2, 0]
39 [0, 1, 2, 1]
40 [0, 1, 2]
41 [0, 1, 3, 0]
42 [0, 1, 3]
43 [0, 1, 0]
44 [0, 1]
45 [0, 2, 3, 2, 3]
46 [0, 2, 3, 2]
47 [0, 2, 3]
48 [0, 2]
49 [0, 3]
50 [0]
51 [1, 2, 3, 1, 2, 3, 1, 2, 3]
52 [1, 2, 3, 1, 2, 3, 1, 2]
53 [1, 2, 3, 1, 2, 3, 1]
54 [1, 2, 3, 1, 2, 3]
55 [1, 2, 3, 1, 2, 1]
56 [1, 2, 3, 1, 2]
57 [1, 2, 3, 1]
58 [1, 2, 3, 2, 3]
59 [1, 2, 3, 2]
60 [1, 2, 3]
61 [1, 2, 1]
62 [1, 2]
63 [1, 3]
64 [1]
65 [2, 3, 2, 3]
66 [2, 3, 2]
67 [2, 3]
68 [2]
69 [3]
70 []
sage: A=CartanMatrix(['C',6])
....: c=[0,1,2,3,4,5]
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+1) for
....: i in range(6)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5]
FAILURE! 6
sage: A=CartanMatrix(['C',6])
....: c=[0,1,2,3,4,5]
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+1) for
....: i in range(7)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5]
2 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4]
3 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3]
4 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2]
5 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1]
6 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0]
7 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5]
8 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3]
9 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2]
10 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1]
11 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0]
12 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4]
13 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2]
14 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1]
15 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0]
16 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3]
17 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 0, 1]
18 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 0]
19 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2]
20 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 0]
21 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1]
22 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0]
23 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]
24 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4]
25 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3]
26 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2]
27 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1]
28 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5]
29 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
30 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
31 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
32 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3]
33 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
34 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 0]
35 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2]
36 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 0]
37 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1]
38 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0]
39 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3]
40 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2]
41 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1]
42 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4]
43 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 0, 1]
44 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 0]
45 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2]
46 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 0]
47 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1]
48 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0]
49 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 1, 2]
50 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 1]
51 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3]
52 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 0, 1, 0]
53 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 0, 1]
54 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 0]
55 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 1]
56 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2]
57 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 0]
58 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1]
59 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5]
60 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 2, 3, 4]
61 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 2, 3]
62 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 2]
63 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0]
64 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]
65 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4]
66 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3]
67 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2]
68 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1]
69 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]
70 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3]
71 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2]
72 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1]
73 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4]
74 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2]
75 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 1]
76 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3]
77 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 1]
78 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2]
79 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1]
80 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 2, 3, 4, 5]
81 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 2, 3, 4]
82 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 2, 3]
83 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 2]
84 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5]
85 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1]
86 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0]
87 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
88 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0]
89 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
90 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
91 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2]
92 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1]
93 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3]
94 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0]
95 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
96 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 0]
97 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 1]
98 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2]
99 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 0]
100 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1]
101 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 2, 3]
102 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 2]
103 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0]
104 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3, 1, 2]
105 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3, 1]
106 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3]
107 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 1]
108 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2]
109 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1]
110 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 2, 3]
111 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 2]
112 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4]
113 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
114 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 0, 1]
115 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 0]
116 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 1]
117 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2]
118 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 0]
119 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1]
120 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 2]
121 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0]
122 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 1, 2, 1]
123 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 1, 2]
124 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 1]
125 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 2]
126 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3]
127 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 0, 1, 0]
128 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 0, 1]
129 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 0]
130 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 1]
131 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2]
132 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 5, 0]
133 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 5]
134 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 0]
135 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 3, 4]
136 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 3, 0]
137 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 3]
138 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 0]
139 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1]
140 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 2, 3, 4, 5]
141 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 2, 3, 4]
142 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 2, 3]
143 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 2]
144 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5]
145 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 2, 3]
146 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 2]
147 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 2, 3, 4]
148 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 2, 3, 2]
149 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 2, 3]
150 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 2]
151 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 3, 4, 5]
152 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 3, 4]
153 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 3]
154 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0]
155 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]
156 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4]
157 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3]
158 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2]
159 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1]
160 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]
161 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3]
162 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2]
163 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1]
164 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4]
165 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2]
166 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1]
167 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3]
168 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 1]
169 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2]
170 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1]
171 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5]
172 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4]
173 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3]
174 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2]
175 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]
176 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2]
177 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1]
178 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3]
179 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1]
180 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2]
181 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1]
182 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3]
183 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2]
184 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4]
185 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1]
186 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2]
187 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 1]
188 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 2]
189 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3]
190 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 1]
191 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2]
192 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 3, 4, 5]
193 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 3, 4]
194 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 3]
195 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1]
196 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5]
197 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4]
198 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3]
199 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2]
200 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 2, 3, 4, 5]
201 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 2, 3, 4, 2, 3]
202 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 2, 3, 4, 2]
203 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 2, 3, 4]
204 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 2, 3, 2]
205 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 2, 3]
206 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 2]
207 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 3, 4, 5]
208 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 3, 4]
209 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 3]
210 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5]
211 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
212 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1]
213 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0]
214 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 1]
215 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
216 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0]
217 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
218 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 2]
219 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
220 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2, 1]
221 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2]
222 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1]
223 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 2]
224 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3]
225 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0]
226 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
227 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 0]
228 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 1]
229 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2]
230 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 3, 0]
231 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 3]
232 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 0]
233 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1]
234 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 2, 3, 2]
235 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 2, 3]
236 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 2]
237 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 3]
238 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0]
239 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
240 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3, 1, 2]
241 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3, 1]
242 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3, 2]
243 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3]
244 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 1]
245 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2]
246 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 3]
247 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1]
248 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 2, 3, 2]
249 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 2, 3]
250 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 2]
251 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 3]
252 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4]
253 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
254 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 0, 1]
255 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 0]
256 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 1]
257 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2]
258 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 0]
259 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1]
260 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 2]
261 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0]
262 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 1, 2, 1]
263 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 1, 2]
264 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 1]
265 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 2]
266 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3]
267 [0, 1, 2, 3, 4, 5, 0, 1, 2, 4, 5, 0, 1, 0]
268 [0, 1, 2, 3, 4, 5, 0, 1, 2, 4, 5, 0, 1]
269 [0, 1, 2, 3, 4, 5, 0, 1, 2, 4, 5, 0]
270 [0, 1, 2, 3, 4, 5, 0, 1, 2, 4, 5, 1]
271 [0, 1, 2, 3, 4, 5, 0, 1, 2, 4, 5]
272 [0, 1, 2, 3, 4, 5, 0, 1, 2, 4, 0, 1, 0]
273 [0, 1, 2, 3, 4, 5, 0, 1, 2, 4, 0, 1]
274 [0, 1, 2, 3, 4, 5, 0, 1, 2, 4, 0]
275 [0, 1, 2, 3, 4, 5, 0, 1, 2, 4, 1]
276 [0, 1, 2, 3, 4, 5, 0, 1, 2, 4]
277 [0, 1, 2, 3, 4, 5, 0, 1, 2, 0, 1, 0]
278 [0, 1, 2, 3, 4, 5, 0, 1, 2, 0, 1]
279 [0, 1, 2, 3, 4, 5, 0, 1, 2, 0]
280 [0, 1, 2, 3, 4, 5, 0, 1, 2, 1]
281 [0, 1, 2, 3, 4, 5, 0, 1, 2]
282 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 5, 0, 3, 4, 5]
283 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 5, 0, 3, 4]
284 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 5, 0, 3]
285 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 5, 0]
286 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 5, 3, 4, 5]
287 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 5, 3, 4]
288 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 5, 3]
289 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 5]
290 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 0, 3]
291 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 0]
292 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 3]
293 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4]
294 [0, 1, 2, 3, 4, 5, 0, 1, 3, 0]
295 [0, 1, 2, 3, 4, 5, 0, 1, 3]
296 [0, 1, 2, 3, 4, 5, 0, 1, 4, 5, 0]
297 [0, 1, 2, 3, 4, 5, 0, 1, 4, 5]
298 [0, 1, 2, 3, 4, 5, 0, 1, 4, 0]
299 [0, 1, 2, 3, 4, 5, 0, 1, 4]
300 [0, 1, 2, 3, 4, 5, 0, 1, 0]
301 [0, 1, 2, 3, 4, 5, 0, 1]
302 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5]
303 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4]
304 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3]
305 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 2, 3, 4, 5, 2]
306 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 2, 3, 4, 5]
307 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 2, 3, 4, 2, 3]
308 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 2, 3, 4, 2]
309 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 2, 3, 4]
310 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 2, 3, 2]
311 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 2, 3]
312 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 2]
313 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 3, 4, 5]
314 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 3, 4]
315 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 3]
316 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5]
317 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 2, 3, 2]
318 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 2, 3]
319 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 2]
320 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 3]
321 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4]
322 [0, 1, 2, 3, 4, 5, 0, 2, 3, 2]
323 [0, 1, 2, 3, 4, 5, 0, 2, 3]
324 [0, 1, 2, 3, 4, 5, 0, 2, 4, 5]
325 [0, 1, 2, 3, 4, 5, 0, 2, 4]
326 [0, 1, 2, 3, 4, 5, 0, 2]
327 [0, 1, 2, 3, 4, 5, 0, 3, 4, 5, 3, 4, 5]
328 [0, 1, 2, 3, 4, 5, 0, 3, 4, 5, 3, 4]
329 [0, 1, 2, 3, 4, 5, 0, 3, 4, 5, 3]
330 [0, 1, 2, 3, 4, 5, 0, 3, 4, 5]
331 [0, 1, 2, 3, 4, 5, 0, 3, 4, 3]
332 [0, 1, 2, 3, 4, 5, 0, 3, 4]
333 [0, 1, 2, 3, 4, 5, 0, 3]
334 [0, 1, 2, 3, 4, 5, 0, 4, 5]
335 [0, 1, 2, 3, 4, 5, 0, 4]
336 [0, 1, 2, 3, 4, 5, 0]
337 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]
338 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4]
339 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3]
340 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2]
341 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1]
342 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]
343 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3]
344 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2]
345 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1]
346 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4]
347 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2]
348 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1]
349 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3]
350 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 1]
351 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2]
352 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1]
353 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5]
354 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4]
355 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3]
356 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2]
357 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]
358 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2]
359 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1]
360 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3]
361 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1]
362 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2]
363 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1]
364 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3]
365 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2]
366 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4]
367 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1]
368 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2]
369 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1]
370 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 2]
371 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3]
372 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 1]
373 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2]
374 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 3, 4, 5]
375 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 3, 4]
376 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 3]
377 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1]
378 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5]
379 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4]
380 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3]
381 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2]
382 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5]
383 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 2, 3]
384 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 2]
385 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4]
386 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 2]
387 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3]
388 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2]
389 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 3, 4, 5]
390 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 3, 4]
391 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 3]
392 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]
393 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
394 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2]
395 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1]
396 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 2]
397 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3]
398 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1]
399 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2]
400 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 3]
401 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1]
402 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3, 2]
403 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3]
404 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2]
405 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 3]
406 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4]
407 [0, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1]
408 [0, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2]
409 [0, 1, 2, 3, 4, 5, 1, 2, 3, 1]
410 [0, 1, 2, 3, 4, 5, 1, 2, 3, 2]
411 [0, 1, 2, 3, 4, 5, 1, 2, 3]
412 [0, 1, 2, 3, 4, 5, 1, 2, 4, 5, 1]
413 [0, 1, 2, 3, 4, 5, 1, 2, 4, 5]
414 [0, 1, 2, 3, 4, 5, 1, 2, 4, 1]
415 [0, 1, 2, 3, 4, 5, 1, 2, 4]
416 [0, 1, 2, 3, 4, 5, 1, 2, 1]
417 [0, 1, 2, 3, 4, 5, 1, 2]
418 [0, 1, 2, 3, 4, 5, 1, 3, 4, 5, 3, 4, 5]
419 [0, 1, 2, 3, 4, 5, 1, 3, 4, 5, 3, 4]
420 [0, 1, 2, 3, 4, 5, 1, 3, 4, 5, 3]
421 [0, 1, 2, 3, 4, 5, 1, 3, 4, 5]
422 [0, 1, 2, 3, 4, 5, 1, 3, 4, 3]
423 [0, 1, 2, 3, 4, 5, 1, 3, 4]
424 [0, 1, 2, 3, 4, 5, 1, 3]
425 [0, 1, 2, 3, 4, 5, 1, 4, 5]
426 [0, 1, 2, 3, 4, 5, 1, 4]
427 [0, 1, 2, 3, 4, 5, 1]
428 [0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5]
429 [0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4]
430 [0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3]
431 [0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2]
432 [0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5]
433 [0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 2, 3]
434 [0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 2]
435 [0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4]
436 [0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 2]
437 [0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3]
438 [0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2]
439 [0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 3, 4, 5]
440 [0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 3, 4]
441 [0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 3]
442 [0, 1, 2, 3, 4, 5, 2, 3, 4, 5]
443 [0, 1, 2, 3, 4, 5, 2, 3, 4, 2, 3, 2]
444 [0, 1, 2, 3, 4, 5, 2, 3, 4, 2, 3]
445 [0, 1, 2, 3, 4, 5, 2, 3, 4, 2]
446 [0, 1, 2, 3, 4, 5, 2, 3, 4, 3]
447 [0, 1, 2, 3, 4, 5, 2, 3, 4]
448 [0, 1, 2, 3, 4, 5, 2, 3, 2]
449 [0, 1, 2, 3, 4, 5, 2, 3]
450 [0, 1, 2, 3, 4, 5, 2, 4, 5]
451 [0, 1, 2, 3, 4, 5, 2, 4]
452 [0, 1, 2, 3, 4, 5, 2]
453 [0, 1, 2, 3, 4, 5, 3, 4, 5, 3, 4, 5]
454 [0, 1, 2, 3, 4, 5, 3, 4, 5, 3, 4]
455 [0, 1, 2, 3, 4, 5, 3, 4, 5, 3]
456 [0, 1, 2, 3, 4, 5, 3, 4, 5]
457 [0, 1, 2, 3, 4, 5, 3, 4, 3]
458 [0, 1, 2, 3, 4, 5, 3, 4]
459 [0, 1, 2, 3, 4, 5, 3]
460 [0, 1, 2, 3, 4, 5, 4, 5]
461 [0, 1, 2, 3, 4, 5, 4]
462 [0, 1, 2, 3, 4, 5]
463 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
464 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1]
465 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0]
466 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 1]
467 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
468 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0]
469 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
470 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 2]
471 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
472 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2, 1]
473 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2]
474 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1]
475 [0, 1, 2, 3, 4, 0, 1, 2, 3, 2]
476 [0, 1, 2, 3, 4, 0, 1, 2, 3]
477 [0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0]
478 [0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
479 [0, 1, 2, 3, 4, 0, 1, 2, 0]
480 [0, 1, 2, 3, 4, 0, 1, 2, 1]
481 [0, 1, 2, 3, 4, 0, 1, 2]
482 [0, 1, 2, 3, 4, 0, 1, 3, 0]
483 [0, 1, 2, 3, 4, 0, 1, 3]
484 [0, 1, 2, 3, 4, 0, 1, 0]
485 [0, 1, 2, 3, 4, 0, 1]
486 [0, 1, 2, 3, 4, 0, 2, 3, 2]
487 [0, 1, 2, 3, 4, 0, 2, 3]
488 [0, 1, 2, 3, 4, 0, 2]
489 [0, 1, 2, 3, 4, 0, 3]
490 [0, 1, 2, 3, 4, 0]
491 [0, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
492 [0, 1, 2, 3, 4, 1, 2, 3, 1, 2]
493 [0, 1, 2, 3, 4, 1, 2, 3, 1]
494 [0, 1, 2, 3, 4, 1, 2, 3, 2]
495 [0, 1, 2, 3, 4, 1, 2, 3]
496 [0, 1, 2, 3, 4, 1, 2, 1]
497 [0, 1, 2, 3, 4, 1, 2]
498 [0, 1, 2, 3, 4, 1, 3]
499 [0, 1, 2, 3, 4, 1]
500 [0, 1, 2, 3, 4, 2, 3, 2]
501 [0, 1, 2, 3, 4, 2, 3]
502 [0, 1, 2, 3, 4, 2]
503 [0, 1, 2, 3, 4, 3]
504 [0, 1, 2, 3, 4]
505 [0, 1, 2, 3, 5, 0, 1, 2, 0, 1, 0]
506 [0, 1, 2, 3, 5, 0, 1, 2, 0, 1]
507 [0, 1, 2, 3, 5, 0, 1, 2, 0]
508 [0, 1, 2, 3, 5, 0, 1, 2, 1]
509 [0, 1, 2, 3, 5, 0, 1, 2]
510 [0, 1, 2, 3, 5, 0, 1, 0]
511 [0, 1, 2, 3, 5, 0, 1]
512 [0, 1, 2, 3, 5, 0, 2]
513 [0, 1, 2, 3, 5, 0]
514 [0, 1, 2, 3, 5, 1, 2, 1]
515 [0, 1, 2, 3, 5, 1, 2]
516 [0, 1, 2, 3, 5, 1]
517 [0, 1, 2, 3, 5, 2]
518 [0, 1, 2, 3, 5]
519 [0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
520 [0, 1, 2, 3, 0, 1, 2, 0, 1]
521 [0, 1, 2, 3, 0, 1, 2, 0]
522 [0, 1, 2, 3, 0, 1, 2, 1]
523 [0, 1, 2, 3, 0, 1, 2]
524 [0, 1, 2, 3, 0, 1, 0]
525 [0, 1, 2, 3, 0, 1]
526 [0, 1, 2, 3, 0, 2]
527 [0, 1, 2, 3, 0]
528 [0, 1, 2, 3, 1, 2, 1]
529 [0, 1, 2, 3, 1, 2]
530 [0, 1, 2, 3, 1]
531 [0, 1, 2, 3, 2]
532 [0, 1, 2, 3]
533 [0, 1, 2, 4, 5, 0, 1, 4, 5, 0]
534 [0, 1, 2, 4, 5, 0, 1, 4, 5]
535 [0, 1, 2, 4, 5, 0, 1, 4, 0]
536 [0, 1, 2, 4, 5, 0, 1, 4]
537 [0, 1, 2, 4, 5, 0, 1, 0]
538 [0, 1, 2, 4, 5, 0, 1]
539 [0, 1, 2, 4, 5, 0, 4, 5]
540 [0, 1, 2, 4, 5, 0, 4]
541 [0, 1, 2, 4, 5, 0]
542 [0, 1, 2, 4, 5, 1, 4, 5]
543 [0, 1, 2, 4, 5, 1, 4]
544 [0, 1, 2, 4, 5, 1]
545 [0, 1, 2, 4, 5, 4, 5]
546 [0, 1, 2, 4, 5, 4]
547 [0, 1, 2, 4, 5]
548 [0, 1, 2, 4, 0, 1, 0]
549 [0, 1, 2, 4, 0, 1]
550 [0, 1, 2, 4, 0]
551 [0, 1, 2, 4, 1]
552 [0, 1, 2, 4]
553 [0, 1, 2, 5, 0, 1, 0]
554 [0, 1, 2, 5, 0, 1]
555 [0, 1, 2, 5, 0]
556 [0, 1, 2, 5, 1]
557 [0, 1, 2, 5]
558 [0, 1, 2, 0, 1, 0]
559 [0, 1, 2, 0, 1]
560 [0, 1, 2, 0]
561 [0, 1, 2, 1]
562 [0, 1, 2]
563 [0, 1, 3, 4, 5, 0, 3, 4, 5, 3, 4, 5]
564 [0, 1, 3, 4, 5, 0, 3, 4, 5, 3, 4]
565 [0, 1, 3, 4, 5, 0, 3, 4, 5, 3]
566 [0, 1, 3, 4, 5, 0, 3, 4, 5]
567 [0, 1, 3, 4, 5, 0, 3, 4, 3]
568 [0, 1, 3, 4, 5, 0, 3, 4]
569 [0, 1, 3, 4, 5, 0, 3]
570 [0, 1, 3, 4, 5, 0, 4, 5]
571 [0, 1, 3, 4, 5, 0, 4]
572 [0, 1, 3, 4, 5, 0]
573 [0, 1, 3, 4, 5, 3, 4, 5, 3, 4, 5]
574 [0, 1, 3, 4, 5, 3, 4, 5, 3, 4]
575 [0, 1, 3, 4, 5, 3, 4, 5, 3]
576 [0, 1, 3, 4, 5, 3, 4, 5]
577 [0, 1, 3, 4, 5, 3, 4, 3]
578 [0, 1, 3, 4, 5, 3, 4]
579 [0, 1, 3, 4, 5, 3]
580 [0, 1, 3, 4, 5, 4, 5]
581 [0, 1, 3, 4, 5, 4]
582 [0, 1, 3, 4, 5]
583 [0, 1, 3, 4, 0, 3]
584 [0, 1, 3, 4, 0]
585 [0, 1, 3, 4, 3]
586 [0, 1, 3, 4]
587 [0, 1, 3, 5, 0]
588 [0, 1, 3, 5]
589 [0, 1, 3, 0]
590 [0, 1, 3]
591 [0, 1, 4, 5, 0, 4, 5]
592 [0, 1, 4, 5, 0, 4]
593 [0, 1, 4, 5, 0]
594 [0, 1, 4, 5, 4, 5]
595 [0, 1, 4, 5, 4]
596 [0, 1, 4, 5]
597 [0, 1, 4, 0]
598 [0, 1, 4]
599 [0, 1, 5, 0]
600 [0, 1, 5]
601 [0, 1, 0]
602 [0, 1]
603 [0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5]
604 [0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4]
605 [0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3]
606 [0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2]
607 [0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5]
608 [0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 2, 3]
609 [0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 2]
610 [0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4]
611 [0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 2]
612 [0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3]
613 [0, 2, 3, 4, 5, 2, 3, 4, 5, 2]
614 [0, 2, 3, 4, 5, 2, 3, 4, 5, 3, 4, 5]
615 [0, 2, 3, 4, 5, 2, 3, 4, 5, 3, 4]
616 [0, 2, 3, 4, 5, 2, 3, 4, 5, 3]
617 [0, 2, 3, 4, 5, 2, 3, 4, 5]
618 [0, 2, 3, 4, 5, 2, 3, 4, 2, 3, 2]
619 [0, 2, 3, 4, 5, 2, 3, 4, 2, 3]
620 [0, 2, 3, 4, 5, 2, 3, 4, 2]
621 [0, 2, 3, 4, 5, 2, 3, 4, 3]
622 [0, 2, 3, 4, 5, 2, 3, 4]
623 [0, 2, 3, 4, 5, 2, 3, 2]
624 [0, 2, 3, 4, 5, 2, 3]
625 [0, 2, 3, 4, 5, 2, 4, 5]
626 [0, 2, 3, 4, 5, 2, 4]
627 [0, 2, 3, 4, 5, 2]
628 [0, 2, 3, 4, 5, 3, 4, 5, 3, 4, 5]
629 [0, 2, 3, 4, 5, 3, 4, 5, 3, 4]
630 [0, 2, 3, 4, 5, 3, 4, 5, 3]
631 [0, 2, 3, 4, 5, 3, 4, 5]
632 [0, 2, 3, 4, 5, 3, 4, 3]
633 [0, 2, 3, 4, 5, 3, 4]
634 [0, 2, 3, 4, 5, 3]
635 [0, 2, 3, 4, 5, 4, 5]
636 [0, 2, 3, 4, 5, 4]
637 [0, 2, 3, 4, 5]
638 [0, 2, 3, 4, 2, 3, 2]
639 [0, 2, 3, 4, 2, 3]
640 [0, 2, 3, 4, 2]
641 [0, 2, 3, 4, 3]
642 [0, 2, 3, 4]
643 [0, 2, 3, 5, 2]
644 [0, 2, 3, 5]
645 [0, 2, 3, 2]
646 [0, 2, 3]
647 [0, 2, 4, 5, 4, 5]
648 [0, 2, 4, 5, 4]
649 [0, 2, 4, 5]
650 [0, 2, 4]
651 [0, 2, 5]
652 [0, 2]
653 [0, 3, 4, 5, 3, 4, 5, 3, 4, 5]
654 [0, 3, 4, 5, 3, 4, 5, 3, 4]
655 [0, 3, 4, 5, 3, 4, 5, 3]
656 [0, 3, 4, 5, 3, 4, 5]
657 [0, 3, 4, 5, 3, 4, 3]
658 [0, 3, 4, 5, 3, 4]
659 [0, 3, 4, 5, 3]
660 [0, 3, 4, 5, 4, 5]
661 [0, 3, 4, 5, 4]
662 [0, 3, 4, 5]
663 [0, 3, 4, 3]
664 [0, 3, 4]
665 [0, 3, 5]
666 [0, 3]
667 [0, 4, 5, 4, 5]
668 [0, 4, 5, 4]
669 [0, 4, 5]
670 [0, 4]
671 [0, 5]
672 [0]
673 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]
674 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4]
675 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3]
676 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2]
677 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1]
678 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]
679 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3]
680 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2]
681 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1]
682 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4]
683 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2]
684 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1]
685 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3]
686 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 1]
687 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2]
688 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1]
689 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5]
690 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4]
691 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3]
692 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2]
693 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]
694 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2]
695 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1]
696 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3]
697 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1]
698 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2]
699 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1]
700 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3]
701 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2]
702 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4]
703 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1]
704 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2]
705 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1]
706 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 2]
707 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3]
708 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 1]
709 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2]
710 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 3, 4, 5]
711 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 3, 4]
712 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 3]
713 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1]
714 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5]
715 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4]
716 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3]
717 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2]
718 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5]
719 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 2, 3]
720 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 2]
721 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4]
722 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 2]
723 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3]
724 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2]
725 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 3, 4, 5]
726 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 3, 4]
727 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 3]
728 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]
729 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
730 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2]
731 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1]
732 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 2]
733 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3]
734 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1]
735 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2]
736 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 3]
737 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]
738 [1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3, 2]
739 [1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3]
740 [1, 2, 3, 4, 5, 1, 2, 3, 4, 2]
741 [1, 2, 3, 4, 5, 1, 2, 3, 4, 3]
742 [1, 2, 3, 4, 5, 1, 2, 3, 4]
743 [1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1]
744 [1, 2, 3, 4, 5, 1, 2, 3, 1, 2]
745 [1, 2, 3, 4, 5, 1, 2, 3, 1]
746 [1, 2, 3, 4, 5, 1, 2, 3, 2]
747 [1, 2, 3, 4, 5, 1, 2, 3]
748 [1, 2, 3, 4, 5, 1, 2, 4, 5, 1]
749 [1, 2, 3, 4, 5, 1, 2, 4, 5]
750 [1, 2, 3, 4, 5, 1, 2, 4, 1]
751 [1, 2, 3, 4, 5, 1, 2, 4]
752 [1, 2, 3, 4, 5, 1, 2, 1]
753 [1, 2, 3, 4, 5, 1, 2]
754 [1, 2, 3, 4, 5, 1, 3, 4, 5, 3, 4, 5]
755 [1, 2, 3, 4, 5, 1, 3, 4, 5, 3, 4]
756 [1, 2, 3, 4, 5, 1, 3, 4, 5, 3]
757 [1, 2, 3, 4, 5, 1, 3, 4, 5]
758 [1, 2, 3, 4, 5, 1, 3, 4, 3]
759 [1, 2, 3, 4, 5, 1, 3, 4]
760 [1, 2, 3, 4, 5, 1, 3]
761 [1, 2, 3, 4, 5, 1, 4, 5]
762 [1, 2, 3, 4, 5, 1, 4]
763 [1, 2, 3, 4, 5, 1]
764 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5]
765 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4]
766 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3]
767 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2]
768 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5]
769 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 2, 3]
770 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 2]
771 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4]
772 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 2]
773 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3]
774 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2]
775 [1, 2, 3, 4, 5, 2, 3, 4, 5, 3, 4, 5]
776 [1, 2, 3, 4, 5, 2, 3, 4, 5, 3, 4]
777 [1, 2, 3, 4, 5, 2, 3, 4, 5, 3]
778 [1, 2, 3, 4, 5, 2, 3, 4, 5]
779 [1, 2, 3, 4, 5, 2, 3, 4, 2, 3, 2]
780 [1, 2, 3, 4, 5, 2, 3, 4, 2, 3]
781 [1, 2, 3, 4, 5, 2, 3, 4, 2]
782 [1, 2, 3, 4, 5, 2, 3, 4, 3]
783 [1, 2, 3, 4, 5, 2, 3, 4]
784 [1, 2, 3, 4, 5, 2, 3, 2]
785 [1, 2, 3, 4, 5, 2, 3]
786 [1, 2, 3, 4, 5, 2, 4, 5]
787 [1, 2, 3, 4, 5, 2, 4]
788 [1, 2, 3, 4, 5, 2]
789 [1, 2, 3, 4, 5, 3, 4, 5, 3, 4, 5]
790 [1, 2, 3, 4, 5, 3, 4, 5, 3, 4]
791 [1, 2, 3, 4, 5, 3, 4, 5, 3]
792 [1, 2, 3, 4, 5, 3, 4, 5]
793 [1, 2, 3, 4, 5, 3, 4, 3]
794 [1, 2, 3, 4, 5, 3, 4]
795 [1, 2, 3, 4, 5, 3]
796 [1, 2, 3, 4, 5, 4, 5]
797 [1, 2, 3, 4, 5, 4]
798 [1, 2, 3, 4, 5]
799 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
800 [1, 2, 3, 4, 1, 2, 3, 1, 2]
801 [1, 2, 3, 4, 1, 2, 3, 1]
802 [1, 2, 3, 4, 1, 2, 3, 2]
803 [1, 2, 3, 4, 1, 2, 3]
804 [1, 2, 3, 4, 1, 2, 1]
805 [1, 2, 3, 4, 1, 2]
806 [1, 2, 3, 4, 1, 3]
807 [1, 2, 3, 4, 1]
808 [1, 2, 3, 4, 2, 3, 2]
809 [1, 2, 3, 4, 2, 3]
810 [1, 2, 3, 4, 2]
811 [1, 2, 3, 4, 3]
812 [1, 2, 3, 4]
813 [1, 2, 3, 5, 1, 2, 1]
814 [1, 2, 3, 5, 1, 2]
815 [1, 2, 3, 5, 1]
816 [1, 2, 3, 5, 2]
817 [1, 2, 3, 5]
818 [1, 2, 3, 1, 2, 1]
819 [1, 2, 3, 1, 2]
820 [1, 2, 3, 1]
821 [1, 2, 3, 2]
822 [1, 2, 3]
823 [1, 2, 4, 5, 1, 4, 5]
824 [1, 2, 4, 5, 1, 4]
825 [1, 2, 4, 5, 1]
826 [1, 2, 4, 5, 4, 5]
827 [1, 2, 4, 5, 4]
828 [1, 2, 4, 5]
829 [1, 2, 4, 1]
830 [1, 2, 4]
831 [1, 2, 5, 1]
832 [1, 2, 5]
833 [1, 2, 1]
834 [1, 2]
835 [1, 3, 4, 5, 3, 4, 5, 3, 4, 5]
836 [1, 3, 4, 5, 3, 4, 5, 3, 4]
837 [1, 3, 4, 5, 3, 4, 5, 3]
838 [1, 3, 4, 5, 3, 4, 5]
839 [1, 3, 4, 5, 3, 4, 3]
840 [1, 3, 4, 5, 3, 4]
841 [1, 3, 4, 5, 3]
842 [1, 3, 4, 5, 4, 5]
843 [1, 3, 4, 5, 4]
844 [1, 3, 4, 5]
845 [1, 3, 4, 3]
846 [1, 3, 4]
847 [1, 3, 5]
848 [1, 3]
849 [1, 4, 5, 4, 5]
850 [1, 4, 5, 4]
851 [1, 4, 5]
852 [1, 4]
853 [1, 5]
854 [1]
855 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5]
856 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4]
857 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3]
858 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2]
859 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5]
860 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 2, 3]
861 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 2]
862 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4]
863 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 2]
864 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3]
865 [2, 3, 4, 5, 2, 3, 4, 5, 2]
866 [2, 3, 4, 5, 2, 3, 4, 5, 3, 4, 5]
867 [2, 3, 4, 5, 2, 3, 4, 5, 3, 4]
868 [2, 3, 4, 5, 2, 3, 4, 5, 3]
869 [2, 3, 4, 5, 2, 3, 4, 5]
870 [2, 3, 4, 5, 2, 3, 4, 2, 3, 2]
871 [2, 3, 4, 5, 2, 3, 4, 2, 3]
872 [2, 3, 4, 5, 2, 3, 4, 2]
873 [2, 3, 4, 5, 2, 3, 4, 3]
874 [2, 3, 4, 5, 2, 3, 4]
875 [2, 3, 4, 5, 2, 3, 2]
876 [2, 3, 4, 5, 2, 3]
877 [2, 3, 4, 5, 2, 4, 5]
878 [2, 3, 4, 5, 2, 4]
879 [2, 3, 4, 5, 2]
880 [2, 3, 4, 5, 3, 4, 5, 3, 4, 5]
881 [2, 3, 4, 5, 3, 4, 5, 3, 4]
882 [2, 3, 4, 5, 3, 4, 5, 3]
883 [2, 3, 4, 5, 3, 4, 5]
884 [2, 3, 4, 5, 3, 4, 3]
885 [2, 3, 4, 5, 3, 4]
886 [2, 3, 4, 5, 3]
887 [2, 3, 4, 5, 4, 5]
888 [2, 3, 4, 5, 4]
889 [2, 3, 4, 5]
890 [2, 3, 4, 2, 3, 2]
891 [2, 3, 4, 2, 3]
892 [2, 3, 4, 2]
893 [2, 3, 4, 3]
894 [2, 3, 4]
895 [2, 3, 5, 2]
896 [2, 3, 5]
897 [2, 3, 2]
898 [2, 3]
899 [2, 4, 5, 4, 5]
900 [2, 4, 5, 4]
901 [2, 4, 5]
902 [2, 4]
903 [2, 5]
904 [2]
905 [3, 4, 5, 3, 4, 5, 3, 4, 5]
906 [3, 4, 5, 3, 4, 5, 3, 4]
907 [3, 4, 5, 3, 4, 5, 3]
908 [3, 4, 5, 3, 4, 5]
909 [3, 4, 5, 3, 4, 3]
910 [3, 4, 5, 3, 4]
911 [3, 4, 5, 3]
912 [3, 4, 5, 4, 5]
913 [3, 4, 5, 4]
914 [3, 4, 5]
915 [3, 4, 3]
916 [3, 4]
917 [3, 5]
918 [3]
919 [4, 5, 4, 5]
920 [4, 5, 4]
921 [4, 5]
922 [4]
923 [5]
924 []
sage: A=CartanMatrix(['A',4])
....: c=[0,1,2,3]
....: coxnum=5
....: n=0
....: for v in sortables(A,c):
....:     n+=1
....:     if p_lambda_int(B(A,c),lam(A,v),Kc_even(c,coxnum)).dimension()==0:
....:         print(n,v,'yes')
....:     else:
....:         print(v,"FAILURE!")
....:         break
....: 
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
Cell In [356], line 7
      5 for v in sortables(A,c):
      6     n+=Integer(1)
----> 7     if p_lambda_int(B(A,c),lam(A,v),Kc_even(c,coxnum)).dimension()==Integer(0):
      8         print(n,v,'yes')
      9     else:

NameError: name 'Kc_even' is not defined
sage: attach /Users/reading/git/affine_dominance/software/domination4.py
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
Cell In [357], line 1
----> 1 attach /Users/reading/git/affine_dominance/software/domination4.py 

NameError: name 'Users' is not defined
sage: attach('/Users/reading/git/affine_dominance/software/domination4.py')
sage: A=CartanMatrix(['A',4])
....: c=[0,1,2,3]
....: coxnum=5
....: n=0
....: for v in sortables(A,c):
....:     n+=1
....:     if p_lambda_int(B(A,c),lam(A,v),Kc_even(c,coxnum)).dimension()==0:
....:         print(n,v,'yes')
....:     else:
....:         print(v,"FAILURE!")
....:         break
....: 
1 [0, 1, 2, 3, 0, 1, 2, 0, 1, 0] yes
2 [0, 1, 2, 3, 0, 1, 2, 0, 1] yes
[0, 1, 2, 3, 0, 1, 2, 0] FAILURE!
### reloading attached file domination4.py modified at 20:17:02 ###
sage: A=CartanMatrix(['A',4])
....: c=[0,1,2,3]
....: coxnum=5
....: n=0
....: for v in sortables(A,c):
....:     n+=1
....:     if p_lambda_int(B(A,c),lam(A,v),Kc_even(c,coxnum)).dimension()==0:
....:         print(n,v,'yes')
....:     else:
....:         print(v,"FAILURE!")
....:         break
....: 
1 [0, 1, 2, 3, 0, 1, 2, 0, 1, 0] yes
2 [0, 1, 2, 3, 0, 1, 2, 0, 1] yes
3 [0, 1, 2, 3, 0, 1, 2, 0] yes
4 [0, 1, 2, 3, 0, 1, 2, 1] yes
5 [0, 1, 2, 3, 0, 1, 2] yes
6 [0, 1, 2, 3, 0, 1, 0] yes
7 [0, 1, 2, 3, 0, 1] yes
8 [0, 1, 2, 3, 0, 2] yes
9 [0, 1, 2, 3, 0] yes
10 [0, 1, 2, 3, 1, 2, 1] yes
11 [0, 1, 2, 3, 1, 2] yes
12 [0, 1, 2, 3, 1] yes
13 [0, 1, 2, 3, 2] yes
14 [0, 1, 2, 3] yes
15 [0, 1, 2, 0, 1, 0] yes
16 [0, 1, 2, 0, 1] yes
17 [0, 1, 2, 0] yes
18 [0, 1, 2, 1] yes
19 [0, 1, 2] yes
20 [0, 1, 3, 0] yes
21 [0, 1, 3] yes
22 [0, 1, 0] yes
23 [0, 1] yes
24 [0, 2, 3, 2] yes
25 [0, 2, 3] yes
26 [0, 2] yes
27 [0, 3] yes
28 [0] yes
29 [1, 2, 3, 1, 2, 1] yes
30 [1, 2, 3, 1, 2] yes
31 [1, 2, 3, 1] yes
32 [1, 2, 3, 2] yes
33 [1, 2, 3] yes
34 [1, 2, 1] yes
35 [1, 2] yes
36 [1, 3] yes
37 [1] yes
38 [2, 3, 2] yes
39 [2, 3] yes
40 [2] yes
41 [3] yes
42 [] yes
sage: A=CartanMatrix(['A',6])
....: c=[0,1,2,3,4,5]
....: coxnum=7
....: n=0
....: for v in sortables(A,c):
....:     n+=1
....:     if p_lambda_int(B(A,c),lam(A,v),Kc_even(c,coxnum)).dimension()==0:
....:         print(n,v,'yes')
....:     else:
....:         print(v,"FAILURE!")
....:         break
....: 
1 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0] yes
2 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1] yes
3 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0] yes
4 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 1] yes
5 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2] yes
6 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0] yes
7 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1] yes
8 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 2] yes
9 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0] yes
10 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2, 1] yes
11 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2] yes
12 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1] yes
13 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 2] yes
14 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3] yes
15 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0] yes
16 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1] yes
17 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 0] yes
18 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 1] yes
19 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2] yes
20 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 3, 0] yes
21 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 3] yes
22 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 0] yes
23 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1] yes
24 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 2, 3, 2] yes
25 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 2, 3] yes
26 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 2] yes
27 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 3] yes
28 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0] yes
29 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] yes
30 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3, 1, 2] yes
31 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3, 1] yes
32 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3, 2] yes
33 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3] yes
34 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 1] yes
35 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2] yes
36 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 3] yes
37 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1] yes
38 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 2, 3, 2] yes
39 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 2, 3] yes
40 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 2] yes
41 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 3] yes
42 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4] yes
43 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0] yes
44 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 0, 1] yes
45 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 0] yes
46 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 1] yes
47 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2] yes
48 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 0] yes
49 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1] yes
50 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 2] yes
51 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0] yes
52 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 1, 2, 1] yes
53 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 1, 2] yes
54 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 1] yes
55 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 2] yes
56 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3] yes
57 [0, 1, 2, 3, 4, 5, 0, 1, 2, 4, 0, 1, 0] yes
58 [0, 1, 2, 3, 4, 5, 0, 1, 2, 4, 0, 1] yes
59 [0, 1, 2, 3, 4, 5, 0, 1, 2, 4, 0] yes
60 [0, 1, 2, 3, 4, 5, 0, 1, 2, 4, 1] yes
61 [0, 1, 2, 3, 4, 5, 0, 1, 2, 4] yes
62 [0, 1, 2, 3, 4, 5, 0, 1, 2, 0, 1, 0] yes
63 [0, 1, 2, 3, 4, 5, 0, 1, 2, 0, 1] yes
64 [0, 1, 2, 3, 4, 5, 0, 1, 2, 0] yes
65 [0, 1, 2, 3, 4, 5, 0, 1, 2, 1] yes
66 [0, 1, 2, 3, 4, 5, 0, 1, 2] yes
67 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 0, 3] yes
68 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 0] yes
69 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 3] yes
70 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4] yes
71 [0, 1, 2, 3, 4, 5, 0, 1, 3, 0] yes
72 [0, 1, 2, 3, 4, 5, 0, 1, 3] yes
73 [0, 1, 2, 3, 4, 5, 0, 1, 4, 0] yes
74 [0, 1, 2, 3, 4, 5, 0, 1, 4] yes
75 [0, 1, 2, 3, 4, 5, 0, 1, 0] yes
76 [0, 1, 2, 3, 4, 5, 0, 1] yes
77 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 2, 3, 2] yes
78 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 2, 3] yes
79 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 2] yes
80 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 3] yes
81 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4] yes
82 [0, 1, 2, 3, 4, 5, 0, 2, 3, 2] yes
83 [0, 1, 2, 3, 4, 5, 0, 2, 3] yes
84 [0, 1, 2, 3, 4, 5, 0, 2, 4] yes
85 [0, 1, 2, 3, 4, 5, 0, 2] yes
86 [0, 1, 2, 3, 4, 5, 0, 3, 4, 3] yes
87 [0, 1, 2, 3, 4, 5, 0, 3, 4] yes
88 [0, 1, 2, 3, 4, 5, 0, 3] yes
89 [0, 1, 2, 3, 4, 5, 0, 4] yes
90 [0, 1, 2, 3, 4, 5, 0] yes
91 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] yes
92 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2] yes
93 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1] yes
94 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 2] yes
95 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] yes
96 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1] yes
97 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] yes
98 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 3] yes
99 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1] yes
100 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3, 2] yes
101 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3] yes
102 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2] yes
103 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 3] yes
104 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4] yes
105 [0, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1] yes
106 [0, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2] yes
107 [0, 1, 2, 3, 4, 5, 1, 2, 3, 1] yes
108 [0, 1, 2, 3, 4, 5, 1, 2, 3, 2] yes
109 [0, 1, 2, 3, 4, 5, 1, 2, 3] yes
110 [0, 1, 2, 3, 4, 5, 1, 2, 4, 1] yes
111 [0, 1, 2, 3, 4, 5, 1, 2, 4] yes
112 [0, 1, 2, 3, 4, 5, 1, 2, 1] yes
113 [0, 1, 2, 3, 4, 5, 1, 2] yes
114 [0, 1, 2, 3, 4, 5, 1, 3, 4, 3] yes
115 [0, 1, 2, 3, 4, 5, 1, 3, 4] yes
116 [0, 1, 2, 3, 4, 5, 1, 3] yes
117 [0, 1, 2, 3, 4, 5, 1, 4] yes
118 [0, 1, 2, 3, 4, 5, 1] yes
119 [0, 1, 2, 3, 4, 5, 2, 3, 4, 2, 3, 2] yes
120 [0, 1, 2, 3, 4, 5, 2, 3, 4, 2, 3] yes
121 [0, 1, 2, 3, 4, 5, 2, 3, 4, 2] yes
122 [0, 1, 2, 3, 4, 5, 2, 3, 4, 3] yes
123 [0, 1, 2, 3, 4, 5, 2, 3, 4] yes
124 [0, 1, 2, 3, 4, 5, 2, 3, 2] yes
125 [0, 1, 2, 3, 4, 5, 2, 3] yes
126 [0, 1, 2, 3, 4, 5, 2, 4] yes
127 [0, 1, 2, 3, 4, 5, 2] yes
128 [0, 1, 2, 3, 4, 5, 3, 4, 3] yes
129 [0, 1, 2, 3, 4, 5, 3, 4] yes
130 [0, 1, 2, 3, 4, 5, 3] yes
131 [0, 1, 2, 3, 4, 5, 4] yes
132 [0, 1, 2, 3, 4, 5] yes
133 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0] yes
134 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1] yes
135 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0] yes
136 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 1] yes
137 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2] yes
138 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0] yes
139 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1] yes
140 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 2] yes
141 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0] yes
142 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2, 1] yes
143 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2] yes
144 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1] yes
145 [0, 1, 2, 3, 4, 0, 1, 2, 3, 2] yes
146 [0, 1, 2, 3, 4, 0, 1, 2, 3] yes
147 [0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0] yes
148 [0, 1, 2, 3, 4, 0, 1, 2, 0, 1] yes
149 [0, 1, 2, 3, 4, 0, 1, 2, 0] yes
150 [0, 1, 2, 3, 4, 0, 1, 2, 1] yes
151 [0, 1, 2, 3, 4, 0, 1, 2] yes
152 [0, 1, 2, 3, 4, 0, 1, 3, 0] yes
153 [0, 1, 2, 3, 4, 0, 1, 3] yes
154 [0, 1, 2, 3, 4, 0, 1, 0] yes
155 [0, 1, 2, 3, 4, 0, 1] yes
156 [0, 1, 2, 3, 4, 0, 2, 3, 2] yes
157 [0, 1, 2, 3, 4, 0, 2, 3] yes
158 [0, 1, 2, 3, 4, 0, 2] yes
159 [0, 1, 2, 3, 4, 0, 3] yes
160 [0, 1, 2, 3, 4, 0] yes
161 [0, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] yes
162 [0, 1, 2, 3, 4, 1, 2, 3, 1, 2] yes
163 [0, 1, 2, 3, 4, 1, 2, 3, 1] yes
164 [0, 1, 2, 3, 4, 1, 2, 3, 2] yes
165 [0, 1, 2, 3, 4, 1, 2, 3] yes
166 [0, 1, 2, 3, 4, 1, 2, 1] yes
167 [0, 1, 2, 3, 4, 1, 2] yes
168 [0, 1, 2, 3, 4, 1, 3] yes
169 [0, 1, 2, 3, 4, 1] yes
170 [0, 1, 2, 3, 4, 2, 3, 2] yes
171 [0, 1, 2, 3, 4, 2, 3] yes
172 [0, 1, 2, 3, 4, 2] yes
173 [0, 1, 2, 3, 4, 3] yes
174 [0, 1, 2, 3, 4] yes
175 [0, 1, 2, 3, 5, 0, 1, 2, 0, 1, 0] yes
176 [0, 1, 2, 3, 5, 0, 1, 2, 0, 1] yes
177 [0, 1, 2, 3, 5, 0, 1, 2, 0] yes
178 [0, 1, 2, 3, 5, 0, 1, 2, 1] yes
179 [0, 1, 2, 3, 5, 0, 1, 2] yes
180 [0, 1, 2, 3, 5, 0, 1, 0] yes
181 [0, 1, 2, 3, 5, 0, 1] yes
182 [0, 1, 2, 3, 5, 0, 2] yes
183 [0, 1, 2, 3, 5, 0] yes
184 [0, 1, 2, 3, 5, 1, 2, 1] yes
185 [0, 1, 2, 3, 5, 1, 2] yes
186 [0, 1, 2, 3, 5, 1] yes
187 [0, 1, 2, 3, 5, 2] yes
188 [0, 1, 2, 3, 5] yes
189 [0, 1, 2, 3, 0, 1, 2, 0, 1, 0] yes
190 [0, 1, 2, 3, 0, 1, 2, 0, 1] yes
191 [0, 1, 2, 3, 0, 1, 2, 0] yes
192 [0, 1, 2, 3, 0, 1, 2, 1] yes
193 [0, 1, 2, 3, 0, 1, 2] yes
194 [0, 1, 2, 3, 0, 1, 0] yes
195 [0, 1, 2, 3, 0, 1] yes
196 [0, 1, 2, 3, 0, 2] yes
197 [0, 1, 2, 3, 0] yes
198 [0, 1, 2, 3, 1, 2, 1] yes
199 [0, 1, 2, 3, 1, 2] yes
200 [0, 1, 2, 3, 1] yes
201 [0, 1, 2, 3, 2] yes
202 [0, 1, 2, 3] yes
203 [0, 1, 2, 4, 5, 0, 1, 4, 0] yes
204 [0, 1, 2, 4, 5, 0, 1, 4] yes
205 [0, 1, 2, 4, 5, 0, 1, 0] yes
206 [0, 1, 2, 4, 5, 0, 1] yes
207 [0, 1, 2, 4, 5, 0, 4] yes
208 [0, 1, 2, 4, 5, 0] yes
209 [0, 1, 2, 4, 5, 1, 4] yes
210 [0, 1, 2, 4, 5, 1] yes
211 [0, 1, 2, 4, 5, 4] yes
212 [0, 1, 2, 4, 5] yes
213 [0, 1, 2, 4, 0, 1, 0] yes
214 [0, 1, 2, 4, 0, 1] yes
215 [0, 1, 2, 4, 0] yes
216 [0, 1, 2, 4, 1] yes
217 [0, 1, 2, 4] yes
218 [0, 1, 2, 5, 0, 1, 0] yes
219 [0, 1, 2, 5, 0, 1] yes
220 [0, 1, 2, 5, 0] yes
221 [0, 1, 2, 5, 1] yes
222 [0, 1, 2, 5] yes
223 [0, 1, 2, 0, 1, 0] yes
224 [0, 1, 2, 0, 1] yes
225 [0, 1, 2, 0] yes
226 [0, 1, 2, 1] yes
227 [0, 1, 2] yes
228 [0, 1, 3, 4, 5, 0, 3, 4, 3] yes
229 [0, 1, 3, 4, 5, 0, 3, 4] yes
230 [0, 1, 3, 4, 5, 0, 3] yes
231 [0, 1, 3, 4, 5, 0, 4] yes
232 [0, 1, 3, 4, 5, 0] yes
233 [0, 1, 3, 4, 5, 3, 4, 3] yes
234 [0, 1, 3, 4, 5, 3, 4] yes
235 [0, 1, 3, 4, 5, 3] yes
236 [0, 1, 3, 4, 5, 4] yes
237 [0, 1, 3, 4, 5] yes
238 [0, 1, 3, 4, 0, 3] yes
239 [0, 1, 3, 4, 0] yes
240 [0, 1, 3, 4, 3] yes
241 [0, 1, 3, 4] yes
242 [0, 1, 3, 5, 0] yes
243 [0, 1, 3, 5] yes
244 [0, 1, 3, 0] yes
245 [0, 1, 3] yes
246 [0, 1, 4, 5, 0, 4] yes
247 [0, 1, 4, 5, 0] yes
248 [0, 1, 4, 5, 4] yes
249 [0, 1, 4, 5] yes
250 [0, 1, 4, 0] yes
251 [0, 1, 4] yes
252 [0, 1, 5, 0] yes
253 [0, 1, 5] yes
254 [0, 1, 0] yes
255 [0, 1] yes
256 [0, 2, 3, 4, 5, 2, 3, 4, 2, 3, 2] yes
257 [0, 2, 3, 4, 5, 2, 3, 4, 2, 3] yes
258 [0, 2, 3, 4, 5, 2, 3, 4, 2] yes
259 [0, 2, 3, 4, 5, 2, 3, 4, 3] yes
260 [0, 2, 3, 4, 5, 2, 3, 4] yes
261 [0, 2, 3, 4, 5, 2, 3, 2] yes
262 [0, 2, 3, 4, 5, 2, 3] yes
263 [0, 2, 3, 4, 5, 2, 4] yes
264 [0, 2, 3, 4, 5, 2] yes
265 [0, 2, 3, 4, 5, 3, 4, 3] yes
266 [0, 2, 3, 4, 5, 3, 4] yes
267 [0, 2, 3, 4, 5, 3] yes
268 [0, 2, 3, 4, 5, 4] yes
269 [0, 2, 3, 4, 5] yes
270 [0, 2, 3, 4, 2, 3, 2] yes
271 [0, 2, 3, 4, 2, 3] yes
272 [0, 2, 3, 4, 2] yes
273 [0, 2, 3, 4, 3] yes
274 [0, 2, 3, 4] yes
275 [0, 2, 3, 5, 2] yes
276 [0, 2, 3, 5] yes
277 [0, 2, 3, 2] yes
278 [0, 2, 3] yes
279 [0, 2, 4, 5, 4] yes
280 [0, 2, 4, 5] yes
281 [0, 2, 4] yes
282 [0, 2, 5] yes
283 [0, 2] yes
284 [0, 3, 4, 5, 3, 4, 3] yes
285 [0, 3, 4, 5, 3, 4] yes
286 [0, 3, 4, 5, 3] yes
287 [0, 3, 4, 5, 4] yes
288 [0, 3, 4, 5] yes
289 [0, 3, 4, 3] yes
290 [0, 3, 4] yes
291 [0, 3, 5] yes
292 [0, 3] yes
293 [0, 4, 5, 4] yes
294 [0, 4, 5] yes
295 [0, 4] yes
296 [0, 5] yes
297 [0] yes
298 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] yes
299 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2] yes
300 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1] yes
301 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 2] yes
302 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] yes
303 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1] yes
304 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] yes
305 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 3] yes
306 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1] yes
307 [1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3, 2] yes
308 [1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3] yes
309 [1, 2, 3, 4, 5, 1, 2, 3, 4, 2] yes
310 [1, 2, 3, 4, 5, 1, 2, 3, 4, 3] yes
311 [1, 2, 3, 4, 5, 1, 2, 3, 4] yes
312 [1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1] yes
313 [1, 2, 3, 4, 5, 1, 2, 3, 1, 2] yes
314 [1, 2, 3, 4, 5, 1, 2, 3, 1] yes
315 [1, 2, 3, 4, 5, 1, 2, 3, 2] yes
316 [1, 2, 3, 4, 5, 1, 2, 3] yes
317 [1, 2, 3, 4, 5, 1, 2, 4, 1] yes
318 [1, 2, 3, 4, 5, 1, 2, 4] yes
319 [1, 2, 3, 4, 5, 1, 2, 1] yes
320 [1, 2, 3, 4, 5, 1, 2] yes
321 [1, 2, 3, 4, 5, 1, 3, 4, 3] yes
322 [1, 2, 3, 4, 5, 1, 3, 4] yes
323 [1, 2, 3, 4, 5, 1, 3] yes
324 [1, 2, 3, 4, 5, 1, 4] yes
325 [1, 2, 3, 4, 5, 1] yes
326 [1, 2, 3, 4, 5, 2, 3, 4, 2, 3, 2] yes
327 [1, 2, 3, 4, 5, 2, 3, 4, 2, 3] yes
328 [1, 2, 3, 4, 5, 2, 3, 4, 2] yes
329 [1, 2, 3, 4, 5, 2, 3, 4, 3] yes
330 [1, 2, 3, 4, 5, 2, 3, 4] yes
331 [1, 2, 3, 4, 5, 2, 3, 2] yes
332 [1, 2, 3, 4, 5, 2, 3] yes
333 [1, 2, 3, 4, 5, 2, 4] yes
334 [1, 2, 3, 4, 5, 2] yes
335 [1, 2, 3, 4, 5, 3, 4, 3] yes
336 [1, 2, 3, 4, 5, 3, 4] yes
337 [1, 2, 3, 4, 5, 3] yes
338 [1, 2, 3, 4, 5, 4] yes
339 [1, 2, 3, 4, 5] yes
340 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1] yes
341 [1, 2, 3, 4, 1, 2, 3, 1, 2] yes
342 [1, 2, 3, 4, 1, 2, 3, 1] yes
343 [1, 2, 3, 4, 1, 2, 3, 2] yes
344 [1, 2, 3, 4, 1, 2, 3] yes
345 [1, 2, 3, 4, 1, 2, 1] yes
346 [1, 2, 3, 4, 1, 2] yes
347 [1, 2, 3, 4, 1, 3] yes
348 [1, 2, 3, 4, 1] yes
349 [1, 2, 3, 4, 2, 3, 2] yes
350 [1, 2, 3, 4, 2, 3] yes
351 [1, 2, 3, 4, 2] yes
352 [1, 2, 3, 4, 3] yes
353 [1, 2, 3, 4] yes
354 [1, 2, 3, 5, 1, 2, 1] yes
355 [1, 2, 3, 5, 1, 2] yes
356 [1, 2, 3, 5, 1] yes
357 [1, 2, 3, 5, 2] yes
358 [1, 2, 3, 5] yes
359 [1, 2, 3, 1, 2, 1] yes
360 [1, 2, 3, 1, 2] yes
361 [1, 2, 3, 1] yes
362 [1, 2, 3, 2] yes
363 [1, 2, 3] yes
364 [1, 2, 4, 5, 1, 4] yes
365 [1, 2, 4, 5, 1] yes
366 [1, 2, 4, 5, 4] yes
367 [1, 2, 4, 5] yes
368 [1, 2, 4, 1] yes
369 [1, 2, 4] yes
370 [1, 2, 5, 1] yes
371 [1, 2, 5] yes
372 [1, 2, 1] yes
373 [1, 2] yes
374 [1, 3, 4, 5, 3, 4, 3] yes
375 [1, 3, 4, 5, 3, 4] yes
376 [1, 3, 4, 5, 3] yes
377 [1, 3, 4, 5, 4] yes
378 [1, 3, 4, 5] yes
379 [1, 3, 4, 3] yes
380 [1, 3, 4] yes
381 [1, 3, 5] yes
382 [1, 3] yes
383 [1, 4, 5, 4] yes
384 [1, 4, 5] yes
385 [1, 4] yes
386 [1, 5] yes
387 [1] yes
388 [2, 3, 4, 5, 2, 3, 4, 2, 3, 2] yes
389 [2, 3, 4, 5, 2, 3, 4, 2, 3] yes
390 [2, 3, 4, 5, 2, 3, 4, 2] yes
391 [2, 3, 4, 5, 2, 3, 4, 3] yes
392 [2, 3, 4, 5, 2, 3, 4] yes
393 [2, 3, 4, 5, 2, 3, 2] yes
394 [2, 3, 4, 5, 2, 3] yes
395 [2, 3, 4, 5, 2, 4] yes
396 [2, 3, 4, 5, 2] yes
397 [2, 3, 4, 5, 3, 4, 3] yes
398 [2, 3, 4, 5, 3, 4] yes
399 [2, 3, 4, 5, 3] yes
400 [2, 3, 4, 5, 4] yes
401 [2, 3, 4, 5] yes
402 [2, 3, 4, 2, 3, 2] yes
403 [2, 3, 4, 2, 3] yes
404 [2, 3, 4, 2] yes
405 [2, 3, 4, 3] yes
406 [2, 3, 4] yes
407 [2, 3, 5, 2] yes
408 [2, 3, 5] yes
409 [2, 3, 2] yes
410 [2, 3] yes
411 [2, 4, 5, 4] yes
412 [2, 4, 5] yes
413 [2, 4] yes
414 [2, 5] yes
415 [2] yes
416 [3, 4, 5, 3, 4, 3] yes
417 [3, 4, 5, 3, 4] yes
418 [3, 4, 5, 3] yes
419 [3, 4, 5, 4] yes
420 [3, 4, 5] yes
421 [3, 4, 3] yes
422 [3, 4] yes
423 [3, 5] yes
424 [3] yes
425 [4, 5, 4] yes
426 [4, 5] yes
427 [4] yes
428 [5] yes
429 [] yes
### reloading attached file domination4.py modified at 21:14:53 ###
### reloading attached file domination4.py modified at 21:15:21 ###
### reloading attached file domination4.py modified at 00:21:26 ###
### reloading attached file domination4.py modified at 01:04:45 ###
sage: lambda
  Cell In [362], line 1
    lambda
          ^
SyntaxError: invalid syntax

sage: la = vector((1,1,1))
sage: la
(1, 1, 1)
sage: A=CartanMatrix(['A',3])
sage: c=[0,1,2]
sage: B(A,c)
[ 0  1  0]
[-1  0  1]
[ 0 -1  0]
sage: p_lambda_faster(B(A,c),la,[])
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex, 1 ray, 1 line
sage: p_lambda_faster(B(A,c),la,[])
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex, 1 ray, 1 line
sage: P=p_lambda_faster(B(A,c),la,[]);P.rays();P.lines()
(A ray in the direction (1, 0, -1),)
(A line in the direction (0, 1, 0),)
sage: P=p_lambda_faster(B(A,c),la,[1]);P.rays();P.lines()
()
(A line in the direction (1, 0, -1), A line in the direction (0, 1, 0))
sage: P=p_lambda_faster(B(A,c),la,[1,0]);P.rays();P.lines()
(A ray in the direction (-1, 0, 1), A ray in the direction (0, 1, 0))
()
sage: P=p_lambda_faster(B(A,c),la,[0,1]);P.rays();P.lines()
(A ray in the direction (-1, 1, 1), A ray in the direction (0, 1, 0))
()
sage: P=p_lambda_faster(B(A,c),la,[1]);P.rays();P.lines()
()
(A line in the direction (1, 0, -1), A line in the direction (0, 1, 0))
sage: la = vector((1,-1,1))
sage: P=p_lambda_faster(B(A,c),la,[1]);P.rays();P.lines()
()
(A line in the direction (1, 0, -1), A line in the direction (0, 1, 0))
sage: P=p_lambda_faster(B(A,c),la,[0,1]);P.rays();P.lines()
(A ray in the direction (-1, 1, 1), A ray in the direction (0, 1, 0))
()
sage: la = vector((1,-1,-1))
sage: 
sage: P=p_lambda_faster(B(A,c),la,[1]);P.rays();P.lines()
()
(A line in the direction (1, 0, -1), A line in the direction (0, 1, 0))
sage: P=p_lambda_faster(B(A,c),la,[0,1]);P.rays();P.lines()
(A ray in the direction (-1, 1, 1), A ray in the direction (0, 1, 0))
()
sage: la = vector((1,1,-1))
sage: P=p_lambda_faster(B(A,c),la,[0,1]);P.rays();P.lines()
(A ray in the direction (-1, 1, 1), A ray in the direction (0, 1, 0))
()
sage: la = vector((1,2,-1))
sage: P=p_lambda_faster(B(A,c),la,[0,1]);P.rays();P.lines()
(A ray in the direction (-1, 1, 1), A ray in the direction (0, 1, 0))
()
sage: la = vector((1,1,-2))
sage: P=p_lambda_faster(B(A,c),la,[0,1]);P.rays();P.lines()
(A ray in the direction (-1, 1, 1), A ray in the direction (0, 1, 0))
()
sage: for v in sortables(A,[1,2]):
....:     print(v,lam(A,v))
....: 
[1, 2, 1] (3, -1, -1)
[1, 2] (3, -2, 1)
[1] (2, -1, 2)
[2] (1, 2, -1)
[] (1, 1, 1)
sage: for v in sortables(A,[1,2]):
....:     P=p_lambda_faster(B(A,c),lam(A,v),[0,1])
....:     print(v,P.rays(),P.lines(),"\n\n")
....: 
[1, 2, 1] (A ray in the direction (-1, 1, 1), A ray in the direction (0, 1, 0)) () 


[1, 2] (A ray in the direction (-1, 1, 1), A ray in the direction (0, 1, 0)) () 


[1] (A ray in the direction (-1, 1, 1), A ray in the direction (0, 1, 0)) () 


[2] (A ray in the direction (-1, 1, 1), A ray in the direction (0, 1, 0)) () 


[] (A ray in the direction (-1, 1, 1), A ray in the direction (0, 1, 0)) () 


sage: for v in sortables(A,[1,2]):
....:     P=p_lambda_faster(B(A,c),lam(A,v),[0,1,2])
....:     print(v,P.rays(),P.lines(),"\n\n")
....: 
[1, 2, 1] (A ray in the direction (-1, 0, 1), A ray in the direction (0, 1, 0)) () 


[1, 2] (A ray in the direction (-1, 0, 1), A ray in the direction (0, 1, 0)) () 


[1] (A ray in the direction (-1, 0, 1), A ray in the direction (0, 1, 0)) () 


[2] (A ray in the direction (-1, 0, 1), A ray in the direction (0, 1, 0)) () 


[] (A ray in the direction (-1, 0, 1), A ray in the direction (0, 1, 0)) () 


sage: for v in sortables(A,[1,2]):
....:     P=p_lambda_faster(B(A,c),lam(A,v),[0,1,2])
....:     print(v,P.vertices(),P.rays(),P.lines(),"\n\n")
....: 
[1, 2, 1] (A vertex at (0, -4, 2), A vertex at (4, 0, -2)) (A ray in the direction (-1, 0, 1), A ray in the direction (0, 1, 0)) () 


[1, 2] (A vertex at (0, -5, 4), A vertex at (5, 0, -1)) (A ray in the direction (-1, 0, 1), A ray in the direction (0, 1, 0)) () 


[1] (A vertex at (0, -3, 4), A vertex at (3, 0, 1)) (A ray in the direction (-1, 0, 1), A ray in the direction (0, 1, 0)) () 


[2] (A vertex at (0, -1, 0), A vertex at (1, 0, -1)) (A ray in the direction (-1, 0, 1), A ray in the direction (0, 1, 0)) () 


[] (A vertex at (0, -1, 2), A vertex at (1, 0, 1)) (A ray in the direction (-1, 0, 1), A ray in the direction (0, 1, 0)) () 


sage: for v in sortables(A,[1,2]):
....:     P=p_lambda_faster(B(A,c),lam(A,v),[0,1,2])
....:     print(v,"\n",lam(A,v),"\n",P.vertices(),"\n",P.rays(),"\n",P.lines(),"
....: \n\n")
....: 
[1, 2, 1] 
 (3, -1, -1) 
 (A vertex at (0, -4, 2), A vertex at (4, 0, -2)) 
 (A ray in the direction (-1, 0, 1), A ray in the direction (0, 1, 0)) 
 () 


[1, 2] 
 (3, -2, 1) 
 (A vertex at (0, -5, 4), A vertex at (5, 0, -1)) 
 (A ray in the direction (-1, 0, 1), A ray in the direction (0, 1, 0)) 
 () 


[1] 
 (2, -1, 2) 
 (A vertex at (0, -3, 4), A vertex at (3, 0, 1)) 
 (A ray in the direction (-1, 0, 1), A ray in the direction (0, 1, 0)) 
 () 


[2] 
 (1, 2, -1) 
 (A vertex at (0, -1, 0), A vertex at (1, 0, -1)) 
 (A ray in the direction (-1, 0, 1), A ray in the direction (0, 1, 0)) 
 () 


[] 
 (1, 1, 1) 
 (A vertex at (0, -1, 2), A vertex at (1, 0, 1)) 
 (A ray in the direction (-1, 0, 1), A ray in the direction (0, 1, 0)) 
 () 


sage: for v in sortables(A,[1,2]):
....:     P=p_lambda_seq_convexhull(B(A,c),lam(A,v),[0,1,2])
....:     print(v,"\n",lam(A,v),"\n",P.vertices(),"\n",P.rays(),"\n",P.lines(),"
....: \n\n")
....: 
[1, 2, 1] 
 (3, -1, -1) 
 (A vertex at (0, -4, 2), A vertex at (4, 0, -2)) 
 (A ray in the direction (-1, 0, 1), A ray in the direction (0, 1, 0)) 
 () 


[1, 2] 
 (3, -2, 1) 
 (A vertex at (0, -5, 4), A vertex at (5, 0, -1)) 
 (A ray in the direction (-1, 0, 1), A ray in the direction (0, 1, 0)) 
 () 


[1] 
 (2, -1, 2) 
 (A vertex at (0, -3, 4), A vertex at (3, 0, 1)) 
 (A ray in the direction (-1, 0, 1), A ray in the direction (0, 1, 0)) 
 () 


[2] 
 (1, 2, -1) 
 (A vertex at (1, 0, -1), A vertex at (0, -1, 0)) 
 (A ray in the direction (-1, 0, 1), A ray in the direction (0, 1, 0)) 
 () 


[] 
 (1, 1, 1) 
 (A vertex at (0, -1, 2), A vertex at (1, 0, 1)) 
 (A ray in the direction (-1, 0, 1), A ray in the direction (0, 1, 0)) 
 () 


sage: A
[ 2 -1  0]
[-1  2 -1]
[ 0 -1  2]
sage: B(A,c)
[ 0  1  0]
[-1  0  1]
[ 0 -1  0]
sage: for v in sortables(A,[1,2]):
....:     P=p_lambda_seq_convexhull(B(A,c),lam(A,v),[0,1,2])
....:     print(v,"\n",lam(A,v),"\n",P.vertices(),"\n",P.rays(),"\n",P.lines(),"
....: \n\n",lam(A,v) in P)
....: 
[1, 2, 1] 
 (3, -1, -1) 
 (A vertex at (0, -4, 2), A vertex at (4, 0, -2)) 
 (A ray in the direction (-1, 0, 1), A ray in the direction (0, 1, 0)) 
 () 

 True
[1, 2] 
 (3, -2, 1) 
 (A vertex at (0, -5, 4), A vertex at (5, 0, -1)) 
 (A ray in the direction (-1, 0, 1), A ray in the direction (0, 1, 0)) 
 () 

 True
[1] 
 (2, -1, 2) 
 (A vertex at (0, -3, 4), A vertex at (3, 0, 1)) 
 (A ray in the direction (-1, 0, 1), A ray in the direction (0, 1, 0)) 
 () 

 True
[2] 
 (1, 2, -1) 
 (A vertex at (1, 0, -1), A vertex at (0, -1, 0)) 
 (A ray in the direction (-1, 0, 1), A ray in the direction (0, 1, 0)) 
 () 

 True
[] 
 (1, 1, 1) 
 (A vertex at (0, -1, 2), A vertex at (1, 0, 1)) 
 (A ray in the direction (-1, 0, 1), A ray in the direction (0, 1, 0)) 
 () 

 True
sage: P=p_lambda_seq_convexhull(B(A,c),lam(A,[1,2,1]),[0,1])
sage: v=vector(lam(A,[1,2,1]))
sage: v
(3, -1, -1)
sage: v.plot()+P.plot()
Launched html viewer for Graphics3d Object
sage: P.vertices()
(A vertex at (0, -1, 2), A vertex at (4, 0, -2), A vertex at (3, -1, -1))
sage: P=p_lambda_seq_convexhull(B(A,c),lam(A,[1,2,1]),[0,1,2])
sage: v.plot()+P.plot()
Launched html viewer for Graphics3d Object
sage: P.vertices()
(A vertex at (0, -4, 2), A vertex at (4, 0, -2))
sage: for v in sortables(A,[1,2]):
....:     P=p_lambda_seq_convexhull(B(A,c),lam(A,v),[0,1,2])
....:     print(v,"\n",lam(A,v),"\n",P.vertices(),"\n",P.rays(),"\n",P.lines(),"
....: \n\n",lam(A,v) in P)
....: 
[1, 2, 1] 
 (3, -1, -1) 
 (A vertex at (0, -4, 2), A vertex at (4, 0, -2)) 
 (A ray in the direction (-1, 0, 1), A ray in the direction (0, 1, 0)) 
 () 

 True
[1, 2] 
 (3, -2, 1) 
 (A vertex at (0, -5, 4), A vertex at (5, 0, -1)) 
 (A ray in the direction (-1, 0, 1), A ray in the direction (0, 1, 0)) 
 () 

 True
[1] 
 (2, -1, 2) 
 (A vertex at (0, -3, 4), A vertex at (3, 0, 1)) 
 (A ray in the direction (-1, 0, 1), A ray in the direction (0, 1, 0)) 
 () 

 True
[2] 
 (1, 2, -1) 
 (A vertex at (1, 0, -1), A vertex at (0, -1, 0)) 
 (A ray in the direction (-1, 0, 1), A ray in the direction (0, 1, 0)) 
 () 

 True
[] 
 (1, 1, 1) 
 (A vertex at (0, -1, 2), A vertex at (1, 0, 1)) 
 (A ray in the direction (-1, 0, 1), A ray in the direction (0, 1, 0)) 
 () 

 True
sage: for v in sortables(A,[1,2]):
....:     P=p_lambda_seq_convexhull(B(A,c),lam(A,v),[0,1,2])
....:     print(v,"\n",lam(A,v),"\n",P.vertices(),"\n",P.rays(),"\n",P.lines(),l
....: am(A,v) in P,"\n\n")
....: 
[1, 2, 1] 
 (3, -1, -1) 
 (A vertex at (0, -4, 2), A vertex at (4, 0, -2)) 
 (A ray in the direction (-1, 0, 1), A ray in the direction (0, 1, 0)) 
 () True 


[1, 2] 
 (3, -2, 1) 
 (A vertex at (0, -5, 4), A vertex at (5, 0, -1)) 
 (A ray in the direction (-1, 0, 1), A ray in the direction (0, 1, 0)) 
 () True 


[1] 
 (2, -1, 2) 
 (A vertex at (0, -3, 4), A vertex at (3, 0, 1)) 
 (A ray in the direction (-1, 0, 1), A ray in the direction (0, 1, 0)) 
 () True 


[2] 
 (1, 2, -1) 
 (A vertex at (1, 0, -1), A vertex at (0, -1, 0)) 
 (A ray in the direction (-1, 0, 1), A ray in the direction (0, 1, 0)) 
 () True 


[] 
 (1, 1, 1) 
 (A vertex at (0, -1, 2), A vertex at (1, 0, 1)) 
 (A ray in the direction (-1, 0, 1), A ray in the direction (0, 1, 0)) 
 () True 


sage: for v in sortables(A,c):
....:     P=p_lambda_seq_convexhull(B(A,c),lam(A,v),list(c[:i] for i in range(le
....: n(c))))
....:     print(v,"\n",lam(A,v),"\n",P.vertices(),"\n",P.rays(),"\n",P.lines(),l
....: am(A,v) in P,"\n\n")
....: 
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In [406], line 2
      1 for v in sortables(A,c):
----> 2     P=p_lambda_seq_convexhull(B(A,c),lam(A,v),list(c[:i] for i in range(len(c))))
      3     print(v,"\n",lam(A,v),"\n",P.vertices(),"\n",P.rays(),"\n",P.lines(),lam(A,v) in P,"\n\n")

File ~/git/affine_dominance/software/domination4.py:63, in p_lambda_seq_convexhull(B, la, seq)
     61 B = block_matrix([[B,matrix(la).transpose()]])
     62 for k in seq:
---> 63     B.mutate(k)
     64 B, la  = B[:,:-1], B[:,-1] 
     65 Ps = [Polyhedron(rays=B.columns(),base_ring=QQ).translation(la)]

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/matrix0.pyx:3589, in sage.matrix.matrix0.Matrix.mutate (build/cythonized/sage/matrix/matrix0.c:33615)()
   3587 ###################################################
   3588 
-> 3589 def mutate(self, Py_ssize_t k ):
   3590     """
   3591     Mutates ``self`` at row and column index ``k``.

TypeError: 'list' object cannot be interpreted as an integer
sage: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c[:i] for i in range(len(c))))
....:     print(v,"\n",lam(A,v),"\n",P.vertices(),"\n",P.rays(),"\n",P.lines(),l
....: am(A,v) in P,"\n\n")
....: 
[0, 1, 2, 0, 1, 0] 
 (-1, -1, -1) 
 (A vertex at (-1, -1, -1), A vertex at (1, 0, -3), A vertex at (0, -1, -2)) 
 (A ray in the direction (0, 1, 0),) 
 () True 


[0, 1, 2, 0, 1] 
 (-1, -2, 1) 
 (A vertex at (-1, -2, 1), A vertex at (2, 0, -2), A vertex at (0, -2, 0)) 
 (A ray in the direction (0, 1, 0),) 
 () True 


[0, 1, 2, 0] 
 (-2, -1, 2) 
 (A vertex at (-2, -1, 2), A vertex at (1, 0, -1), A vertex at (0, -1, 0)) 
 (A ray in the direction (0, 1, 0),) 
 () True 


[0, 1, 2, 1] 
 (-3, 2, -1) 
 (A vertex at (-3, 2, -1), A vertex at (-2, 2, -2)) 
 (A ray in the direction (0, 1, 0),) 
 () True 


[0, 1, 2] 
 (-3, 1, 1) 
 (A vertex at (-3, 1, 1), A vertex at (-1, 1, -1)) 
 (A ray in the direction (0, 1, 0),) 
 () True 


[0, 1, 0] 
 (-1, -1, 3) 
 (A vertex at (-1, -1, 3), A vertex at (1, 0, 1), A vertex at (0, -1, 2)) 
 (A ray in the direction (0, 1, 0),) 
 () True 


[0, 1] 
 (-2, 1, 2) 
 (A vertex at (-2, 1, 2), A vertex at (-1, 1, 1)) 
 (A ray in the direction (0, 1, 0),) 
 () True 


[0, 2] 
 (-1, 3, -1) 
 (A vertex at (-1, 3, -1),) 
 (A ray in the direction (0, 1, 0),) 
 () True 


[0] 
 (-1, 2, 1) 
 (A vertex at (-1, 2, 1),) 
 (A ray in the direction (0, 1, 0),) 
 () True 


[1, 2, 1] 
 (3, -1, -1) 
 (A vertex at (3, -1, -1), A vertex at (4, 0, -2)) 
 (A ray in the direction (0, 1, 0),) 
 () True 


[1, 2] 
 (3, -2, 1) 
 (A vertex at (3, -2, 1), A vertex at (5, 0, -1)) 
 (A ray in the direction (0, 1, 0),) 
 () True 


[1] 
 (2, -1, 2) 
 (A vertex at (2, -1, 2), A vertex at (3, 0, 1)) 
 (A ray in the direction (0, 1, 0),) 
 () True 


[2] 
 (1, 2, -1) 
 (A vertex at (1, 2, -1),) 
 (A ray in the direction (0, 1, 0),) 
 () True 


[] 
 (1, 1, 1) 
 (A vertex at (1, 1, 1),) 
 (A ray in the direction (0, 1, 0),) 
 () True 


sage: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c[:i] for i in range(len(c))))
....:     print(v,"\n",P.vertices(),"\n",P.rays(),"\n",P.lines(),"\n\n")
....: 
[0, 1, 2, 0, 1, 0] 
 (A vertex at (-1, -1, -1), A vertex at (1, 0, -3), A vertex at (0, -1, -2)) 
 (A ray in the direction (0, 1, 0),) 
 () 


[0, 1, 2, 0, 1] 
 (A vertex at (-1, -2, 1), A vertex at (2, 0, -2), A vertex at (0, -2, 0)) 
 (A ray in the direction (0, 1, 0),) 
 () 


[0, 1, 2, 0] 
 (A vertex at (-2, -1, 2), A vertex at (1, 0, -1), A vertex at (0, -1, 0)) 
 (A ray in the direction (0, 1, 0),) 
 () 


[0, 1, 2, 1] 
 (A vertex at (-3, 2, -1), A vertex at (-2, 2, -2)) 
 (A ray in the direction (0, 1, 0),) 
 () 


[0, 1, 2] 
 (A vertex at (-3, 1, 1), A vertex at (-1, 1, -1)) 
 (A ray in the direction (0, 1, 0),) 
 () 


[0, 1, 0] 
 (A vertex at (-1, -1, 3), A vertex at (1, 0, 1), A vertex at (0, -1, 2)) 
 (A ray in the direction (0, 1, 0),) 
 () 


[0, 1] 
 (A vertex at (-2, 1, 2), A vertex at (-1, 1, 1)) 
 (A ray in the direction (0, 1, 0),) 
 () 


[0, 2] 
 (A vertex at (-1, 3, -1),) 
 (A ray in the direction (0, 1, 0),) 
 () 


[0] 
 (A vertex at (-1, 2, 1),) 
 (A ray in the direction (0, 1, 0),) 
 () 


[1, 2, 1] 
 (A vertex at (3, -1, -1), A vertex at (4, 0, -2)) 
 (A ray in the direction (0, 1, 0),) 
 () 


[1, 2] 
 (A vertex at (3, -2, 1), A vertex at (5, 0, -1)) 
 (A ray in the direction (0, 1, 0),) 
 () 


[1] 
 (A vertex at (2, -1, 2), A vertex at (3, 0, 1)) 
 (A ray in the direction (0, 1, 0),) 
 () 


[2] 
 (A vertex at (1, 2, -1),) 
 (A ray in the direction (0, 1, 0),) 
 () 


[] 
 (A vertex at (1, 1, 1),) 
 (A ray in the direction (0, 1, 0),) 
 () 


sage: A=CartanMatrix(['A',4])
....: c=[01,2,3]
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c[:i] for i in range(len(c))))
....:     print(v,"\n",P.vertices(),"\n",P.rays(),"\n",P.lines(),"\n\n")
....: 
---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
Cell In [409], line 4
      2 c=[Integer(1),Integer(2),Integer(3)]
      3 for v in sortables(A,c):
----> 4     P=p_lambda_int(B(A,c),lam(A,v),list(c[:i] for i in range(len(c))))
      5     print(v,"\n",P.vertices(),"\n",P.rays(),"\n",P.lines(),"\n\n")

File ~/git/affine_dominance/software/domination4.py:173, in B(A, c)
    171     out[i,i]=0
    172     for j in range(i+1,n):
--> 173         out[c[i],c[j]]=-A[c[i],c[j]]
    174         out[c[j],c[i]]=A[c[j],c[i]]
    175 return out

IndexError: list index out of range
sage: A=CartanMatrix(['A',4])
....: c=[0,1,2,3]
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c[:i] for i in range(len(c))))
....:     print(v,"\n",P.vertices(),"\n",P.rays(),"\n",P.lines(),"\n\n")
....: 
[0, 1, 2, 3, 0, 1, 2, 0, 1, 0] 
 (A vertex at (0, -1, -1, -2), A vertex at (0, -1, -2, -1), A vertex at (0, 0, -2, -2), A vertex at (-1, 1, -1, -3), A vertex at (0, 0, -1, -3), A vertex at (-1, -1, -1, -1), A vertex at (1, 0, -2, -2), A vertex at (1, 0, -1, -3), A vertex at (1, 2, 0, -4), A vertex at (-1, 2, 0, -4), A vertex at (0, 1, 0, -4), A vertex at (1, 1, 0, -4)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[0, 1, 2, 3, 0, 1, 2, 0, 1] 
 (A vertex at (0, -1, -2, 0), A vertex at (0, -1, -3, 1), A vertex at (0, 0, -3, 0), A vertex at (-1, 1, -2, -1), A vertex at (0, 0, -2, -1), A vertex at (-1, -1, -2, 1), A vertex at (1, 0, -3, 0), A vertex at (1, 0, -2, -1), A vertex at (1, 3, 0, -3), A vertex at (-1, 3, 0, -3), A vertex at (0, 2, 0, -3), A vertex at (1, 2, 0, -3)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[0, 1, 2, 3, 0, 1, 2, 0] 
 (A vertex at (0, -2, -1, 1), A vertex at (0, -2, -2, 2), A vertex at (0, 0, -2, 0), A vertex at (-1, 1, -1, -1), A vertex at (0, 0, -1, -1), A vertex at (-1, -2, -1, 2), A vertex at (2, 0, -2, 0), A vertex at (2, 0, -1, -1), A vertex at (2, 2, 0, -2), A vertex at (-1, 2, 0, -2), A vertex at (0, 1, 0, -2), A vertex at (2, 1, 0, -2)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[0, 1, 2, 3, 0, 1, 2, 1] 
 (A vertex at (0, -3, 2, -2), A vertex at (0, -3, 1, -1), A vertex at (0, -1, 1, -3), A vertex at (-1, -3, 2, -1), A vertex at (-1, -1, 2, -3), A vertex at (0, -2, 2, -3), A vertex at (1, -2, 2, -3), A vertex at (2, -1, 1, -3)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[0, 1, 2, 3, 0, 1, 2] 
 (A vertex at (0, -3, 1, 0), A vertex at (0, -3, 0, 1), A vertex at (0, 0, 0, -2), A vertex at (-1, -3, 1, 1), A vertex at (-1, 0, 1, -2), A vertex at (0, -1, 1, -2), A vertex at (3, 0, 0, -2), A vertex at (2, -1, 1, -2)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[0, 1, 2, 3, 0, 1, 0] 
 (A vertex at (0, -1, -1, 1), A vertex at (0, -1, -3, 3), A vertex at (0, 0, -3, 2), A vertex at (-2, 2, -1, 0), A vertex at (0, 0, -1, 0), A vertex at (-2, -1, -1, 3), A vertex at (1, 0, -3, 2), A vertex at (1, 0, -1, 0), A vertex at (1, 3, 0, -1), A vertex at (-2, 3, 0, -1), A vertex at (0, 1, 0, -1), A vertex at (1, 1, 0, -1)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[0, 1, 2, 3, 0, 1] 
 (A vertex at (0, -2, 1, 0), A vertex at (-2, -2, 1, 2), A vertex at (0, -2, -1, 2), A vertex at (-1, 1, 0, -1), A vertex at (0, 0, -1, 0), A vertex at (-2, 1, 1, -1), A vertex at (0, -1, 1, -1), A vertex at (2, 1, 0, -1), A vertex at (2, 0, -1, 0), A vertex at (2, 0, 0, -1), A vertex at (1, -1, 1, -1), A vertex at (0, 0, 0, -1)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[0, 1, 2, 3, 0, 2] 
 (A vertex at (0, -1, 0, -1), A vertex at (0, -1, 1, -2), A vertex at (-3, -1, 3, -1), A vertex at (0, 0, 0, -2), A vertex at (-3, 0, 3, -2), A vertex at (1, 0, 0, -2), A vertex at (-2, -1, 3, -2)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[0, 1, 2, 3, 0] 
 (A vertex at (0, -1, -1, 1), A vertex at (0, -1, 1, -1), A vertex at (-1, 1, 0, -1), A vertex at (-3, -1, 2, 1), A vertex at (0, 0, -1, 0), A vertex at (-3, 1, 2, -1), A vertex at (1, 0, -1, 0), A vertex at (1, 1, 0, -1), A vertex at (1, 0, 0, -1), A vertex at (0, 0, 0, -1), A vertex at (-1, -1, 2, -1)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[0, 1, 2, 3, 1, 2, 1] 
 (A vertex at (-3, 3, -2, -1), A vertex at (-3, 3, -1, -2), A vertex at (-4, 4, -1, -2), A vertex at (-4, 3, -1, -1), A vertex at (-4, 5, 0, -3), A vertex at (-3, 5, 0, -3), A vertex at (-3, 4, 0, -3)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[0, 1, 2, 3, 1, 2] 
 (A vertex at (-3, 3, -3, 1), A vertex at (-3, 3, -2, 0), A vertex at (-4, 4, -2, 0), A vertex at (-4, 3, -2, 1), A vertex at (-4, 6, 0, -2), A vertex at (-3, 6, 0, -2), A vertex at (-3, 5, 0, -2)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[0, 1, 2, 3, 1] 
 (A vertex at (-2, 2, -3, 2), A vertex at (-2, 2, -1, 0), A vertex at (-4, 4, -1, 0), A vertex at (-4, 2, -1, 2), A vertex at (-4, 5, 0, -1), A vertex at (-2, 5, 0, -1), A vertex at (-2, 3, 0, -1)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[0, 1, 2, 3, 2] 
 (A vertex at (-1, 1, 0, -2), A vertex at (-1, 1, -1, -1), A vertex at (-2, 2, 0, -2), A vertex at (-4, 2, 2, -2), A vertex at (-4, 1, 2, -1), A vertex at (-1, 2, 0, -2), A vertex at (-3, 1, 2, -2)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[0, 1, 2, 3] 
 (A vertex at (-1, 1, 0, -1), A vertex at (-1, 1, -2, 1), A vertex at (-3, 3, 0, -1), A vertex at (-4, 3, 1, -1), A vertex at (-4, 1, 1, 1), A vertex at (-1, 3, 0, -1), A vertex at (-2, 1, 1, -1)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[0, 1, 2, 0, 1, 0] 
 (A vertex at (0, -1, -1, 3), A vertex at (0, -1, -2, 4), A vertex at (0, 0, -2, 3), A vertex at (-1, 1, -1, 2), A vertex at (0, 0, -1, 2), A vertex at (-1, -1, -1, 4), A vertex at (1, 0, -2, 3), A vertex at (1, 0, -1, 2), A vertex at (1, 2, 0, 1), A vertex at (-1, 2, 0, 1), A vertex at (0, 1, 0, 1), A vertex at (1, 1, 0, 1)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[0, 1, 2, 0, 1] 
 (A vertex at (0, -2, 1, 2), A vertex at (0, -2, 0, 3), A vertex at (0, 0, 0, 1), A vertex at (-1, -2, 1, 3), A vertex at (-1, 0, 1, 1), A vertex at (0, -1, 1, 1), A vertex at (2, 0, 0, 1), A vertex at (1, -1, 1, 1)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[0, 1, 2, 0] 
 (A vertex at (-2, -1, 2, 2), A vertex at (0, -1, 0, 2), A vertex at (0, -1, 1, 1), A vertex at (0, 0, 0, 1), A vertex at (-2, 0, 2, 1), A vertex at (1, 0, 0, 1), A vertex at (-1, -1, 2, 1)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[0, 1, 2, 1] 
 (A vertex at (-2, 2, -2, 3), A vertex at (-2, 2, -1, 2), A vertex at (-3, 3, -1, 2), A vertex at (-3, 2, -1, 3), A vertex at (-3, 4, 0, 1), A vertex at (-2, 4, 0, 1), A vertex at (-2, 3, 0, 1)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[0, 1, 2] 
 (A vertex at (-3, 1, 1, 2), A vertex at (-1, 1, -1, 2), A vertex at (-2, 2, 0, 1), A vertex at (-1, 1, 0, 1), A vertex at (-3, 2, 1, 1), A vertex at (-1, 2, 0, 1), A vertex at (-2, 1, 1, 1)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[0, 1, 3, 0] 
 (A vertex at (0, -1, 3, -1), A vertex at (-1, -1, 4, -1)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[0, 1, 3] 
 (A vertex at (-1, 1, 2, -1), A vertex at (-2, 1, 3, -1)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[0, 1, 0] 
 (A vertex at (0, -1, 2, 1), A vertex at (-1, -1, 3, 1)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[0, 1] 
 (A vertex at (-1, 1, 1, 1), A vertex at (-2, 1, 2, 1)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[0, 2, 3, 2] 
 (A vertex at (-1, 4, -1, -1), A vertex at (-1, 5, 0, -2)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[0, 2, 3] 
 (A vertex at (-1, 4, -2, 1), A vertex at (-1, 6, 0, -1)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[0, 2] 
 (A vertex at (-1, 3, -1, 2), A vertex at (-1, 4, 0, 1)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[0, 3] 
 (A vertex at (-1, 2, 2, -1),) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[0] 
 (A vertex at (-1, 2, 1, 1),) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[1, 2, 3, 1, 2, 1] 
 (A vertex at (4, -1, -1, -1), A vertex at (5, 1, 0, -3), A vertex at (4, 1, 0, -3), A vertex at (4, 0, -1, -2), A vertex at (5, 0, -1, -2)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[1, 2, 3, 1, 2] 
 (A vertex at (4, -1, -2, 1), A vertex at (5, 2, 0, -2), A vertex at (4, 2, 0, -2), A vertex at (4, 0, -2, 0), A vertex at (5, 0, -2, 0)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[1, 2, 3, 1] 
 (A vertex at (4, -2, -1, 2), A vertex at (6, 1, 0, -1), A vertex at (4, 1, 0, -1), A vertex at (4, 0, -1, 0), A vertex at (6, 0, -1, 0)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[1, 2, 3, 2] 
 (A vertex at (4, -3, 2, -1), A vertex at (4, -2, 2, -2), A vertex at (5, -2, 2, -2)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[1, 2, 3] 
 (A vertex at (4, -3, 1, 1), A vertex at (4, -1, 1, -1), A vertex at (6, -1, 1, -1)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[1, 2, 1] 
 (A vertex at (3, -1, -1, 3), A vertex at (4, 1, 0, 1), A vertex at (3, 1, 0, 1), A vertex at (3, 0, -1, 2), A vertex at (4, 0, -1, 2)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[1, 2] 
 (A vertex at (3, -2, 1, 2), A vertex at (3, -1, 1, 1), A vertex at (4, -1, 1, 1)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[1, 3] 
 (A vertex at (2, -1, 3, -1),) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[1] 
 (A vertex at (2, -1, 2, 1),) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[2, 3, 2] 
 (A vertex at (1, 3, -1, -1), A vertex at (1, 4, 0, -2)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[2, 3] 
 (A vertex at (1, 3, -2, 1), A vertex at (1, 5, 0, -1)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[2] 
 (A vertex at (1, 2, -1, 2), A vertex at (1, 3, 0, 1)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[3] 
 (A vertex at (1, 1, 2, -1),) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[] 
 (A vertex at (1, 1, 1, 1),) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


sage: A=CartanMatrix(['A',4])
....: c=[0,1,2,3]
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c[:i] for i in range(len(c))))
....:     print(v,"\n",P)
....: 
[0, 1, 2, 3, 0, 1, 2, 0, 1, 0] 
 A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 12 vertices and 1 ray
[0, 1, 2, 3, 0, 1, 2, 0, 1] 
 A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 12 vertices and 1 ray
[0, 1, 2, 3, 0, 1, 2, 0] 
 A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 12 vertices and 1 ray
[0, 1, 2, 3, 0, 1, 2, 1] 
 A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 8 vertices and 1 ray
[0, 1, 2, 3, 0, 1, 2] 
 A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 8 vertices and 1 ray
[0, 1, 2, 3, 0, 1, 0] 
 A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 12 vertices and 1 ray
[0, 1, 2, 3, 0, 1] 
 A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 12 vertices and 1 ray
[0, 1, 2, 3, 0, 2] 
 A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 7 vertices and 1 ray
[0, 1, 2, 3, 0] 
 A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 11 vertices and 1 ray
[0, 1, 2, 3, 1, 2, 1] 
 A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 7 vertices and 1 ray
[0, 1, 2, 3, 1, 2] 
 A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 7 vertices and 1 ray
[0, 1, 2, 3, 1] 
 A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 7 vertices and 1 ray
[0, 1, 2, 3, 2] 
 A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 7 vertices and 1 ray
[0, 1, 2, 3] 
 A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 7 vertices and 1 ray
[0, 1, 2, 0, 1, 0] 
 A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 12 vertices and 1 ray
[0, 1, 2, 0, 1] 
 A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 8 vertices and 1 ray
[0, 1, 2, 0] 
 A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 7 vertices and 1 ray
[0, 1, 2, 1] 
 A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 7 vertices and 1 ray
[0, 1, 2] 
 A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 7 vertices and 1 ray
[0, 1, 3, 0] 
 A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices and 1 ray
[0, 1, 3] 
 A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices and 1 ray
[0, 1, 0] 
 A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices and 1 ray
[0, 1] 
 A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices and 1 ray
[0, 2, 3, 2] 
 A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices and 1 ray
[0, 2, 3] 
 A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices and 1 ray
[0, 2] 
 A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices and 1 ray
[0, 3] 
 A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 1 ray
[0] 
 A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 1 ray
[1, 2, 3, 1, 2, 1] 
 A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 5 vertices and 1 ray
[1, 2, 3, 1, 2] 
 A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 5 vertices and 1 ray
[1, 2, 3, 1] 
 A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 5 vertices and 1 ray
[1, 2, 3, 2] 
 A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices and 1 ray
[1, 2, 3] 
 A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices and 1 ray
[1, 2, 1] 
 A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 5 vertices and 1 ray
[1, 2] 
 A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices and 1 ray
[1, 3] 
 A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 1 ray
[1] 
 A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 1 ray
[2, 3, 2] 
 A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices and 1 ray
[2, 3] 
 A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices and 1 ray
[2] 
 A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices and 1 ray
[3] 
 A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 1 ray
[] 
 A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 1 ray
sage: A=CartanMatrix(['A',4])
....: c=[0,1,2,3]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c[:i] for i in range(len(c))))
....:     print(v,"\n",P)
....: 
[1, 2, 3, 1, 2, 1] 
 A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 5 vertices and 1 ray
[1, 2, 3, 1, 2] 
 A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 5 vertices and 1 ray
[1, 2, 3, 1] 
 A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 5 vertices and 1 ray
[1, 2, 3, 2] 
 A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices and 1 ray
[1, 2, 3] 
 A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices and 1 ray
[1, 2, 1] 
 A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 5 vertices and 1 ray
[1, 2] 
 A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices and 1 ray
[1, 3] 
 A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 1 ray
[1] 
 A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 1 ray
[2, 3, 2] 
 A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices and 1 ray
[2, 3] 
 A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices and 1 ray
[2] 
 A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices and 1 ray
[3] 
 A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 1 ray
[] 
 A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 1 ray
sage: list(c[:i] for i in range(len(c)))
[[], [0], [0, 1], [0, 1, 2]]
sage: A=CartanMatrix(['A',4])
....: c=[0,1,2,3]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c[:i] for i in range(len(c)+1)))
....:     print(v,"\n",P)
....: 
[1, 2, 3, 1, 2, 1] 
 A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 4 vertices
[1, 2, 3, 1, 2] 
 A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 4 vertices
[1, 2, 3, 1] 
 A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 4 vertices
[1, 2, 3, 2] 
 A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices
[1, 2, 3] 
 A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 4 vertices
[1, 2, 1] 
 A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
[1, 2] 
 A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
[1, 3] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[1] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[2, 3, 2] 
 A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
[2, 3] 
 A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
[2] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[3] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['A',4])
....: c=[0,1,2,3]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(l
....: en(c)+1)))
....:     print(v,"\n",P)
....: 
[1, 2, 3, 1, 2, 1] 
 A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 4 vertices
[1, 2, 3, 1, 2] 
 A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 4 vertices
[1, 2, 3, 1] 
 A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 4 vertices
[1, 2, 3, 2] 
 A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices
[1, 2, 3] 
 A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 4 vertices
[1, 2, 1] 
 A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
[1, 2] 
 A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
[1, 3] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[1] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[2, 3, 2] 
 A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
[2, 3] 
 A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
[2] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[3] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['A',4])
....: c=[0,1,2,3]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(l
....: en(c)+2)))
....:     print(v,"\n",P)
....: 
[1, 2, 3, 1, 2, 1] 
 A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 4 vertices
[1, 2, 3, 1, 2] 
 A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 4 vertices
[1, 2, 3, 1] 
 A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 4 vertices
[1, 2, 3, 2] 
 A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices
[1, 2, 3] 
 A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 4 vertices
[1, 2, 1] 
 A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
[1, 2] 
 A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
[1, 3] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[1] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[2, 3, 2] 
 A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
[2, 3] 
 A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
[2] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[3] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['A',4])
....: c=[0,1,2,3]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(l
....: en(c)+3)))
....:     print(v,"\n",P)
....: 
[1, 2, 3, 1, 2, 1] 
 A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 4 vertices
[1, 2, 3, 1, 2] 
 A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 4 vertices
[1, 2, 3, 1] 
 A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 4 vertices
[1, 2, 3, 2] 
 A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices
[1, 2, 3] 
 A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 4 vertices
[1, 2, 1] 
 A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
[1, 2] 
 A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
[1, 3] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[1] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[2, 3, 2] 
 A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
[2, 3] 
 A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
[2] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[3] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['A',4])
....: c=[0,1,2,3]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(l
....: en(c)+4)))
....:     print(v,"\n",P)
....: 
[1, 2, 3, 1, 2, 1] 
 A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 4 vertices
[1, 2, 3, 1, 2] 
 A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 4 vertices
[1, 2, 3, 1] 
 A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 4 vertices
[1, 2, 3, 2] 
 A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices
[1, 2, 3] 
 A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 4 vertices
[1, 2, 1] 
 A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
[1, 2] 
 A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
[1, 3] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[1] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[2, 3, 2] 
 A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
[2, 3] 
 A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
[2] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[3] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['A',4])
....: c=[0,1,2,3]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(l
....: en(c)+5)))
....:     print(v,"\n",P)
....: 
[1, 2, 3, 1, 2, 1] 
 A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 4 vertices
[1, 2, 3, 1, 2] 
 A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 4 vertices
[1, 2, 3, 1] 
 A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 4 vertices
[1, 2, 3, 2] 
 A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices
[1, 2, 3] 
 A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 4 vertices
[1, 2, 1] 
 A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
[1, 2] 
 A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
[1, 3] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[1] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[2, 3, 2] 
 A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
[2, 3] 
 A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
[2] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[3] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['A',4])
....: c=[0,1,2,3]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(l
....: en(c)+6)))
....:     print(v,"\n",P)
....: 
[1, 2, 3, 1, 2, 1] 
 A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices
[1, 2, 3, 1, 2] 
 A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 4 vertices
[1, 2, 3, 1] 
 A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices
[1, 2, 3, 2] 
 A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
[1, 2, 3] 
 A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
[1, 2, 1] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[1, 2] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[1, 3] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[1] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[2, 3, 2] 
 A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
[2, 3] 
 A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
[2] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[3] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['A',4])
....: c=[0,1,2,3]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(l
....: en(c)+60)))
....:     print(v,"\n",P)
....: 
[1, 2, 3, 1, 2, 1] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[1, 2, 3, 1, 2] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[1, 2, 3, 1] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[1, 2, 3, 2] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[1, 2, 3] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[1, 2, 1] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[1, 2] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[1, 3] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[1] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[2, 3, 2] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[2, 3] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[2] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[3] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['A',4])
....: c=[0,1,2,3]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(l
....: en(c)+7)))
....:     print(v,"\n",P)
....: 
[1, 2, 3, 1, 2, 1] 
 A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
[1, 2, 3, 1, 2] 
 A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
[1, 2, 3, 1] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[1, 2, 3, 2] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[1, 2, 3] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[1, 2, 1] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[1, 2] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[1, 3] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[1] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[2, 3, 2] 
 A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
[2, 3] 
 A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
[2] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[3] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['A',4])
....: c=[0,1,2,3]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(l
....: en(c)+8)))
....:     print(v,"\n",P)
....: 
[1, 2, 3, 1, 2, 1] 
 A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
[1, 2, 3, 1, 2] 
 A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
[1, 2, 3, 1] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[1, 2, 3, 2] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[1, 2, 3] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[1, 2, 1] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[1, 2] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[1, 3] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[1] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[2, 3, 2] 
 A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
[2, 3] 
 A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
[2] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[3] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['A',4])
....: c=[0,1,2,3]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(l
....: en(c)+9)))
....:     print(v,"\n",P)
....: 
[1, 2, 3, 1, 2, 1] 
 A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
[1, 2, 3, 1, 2] 
 A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
[1, 2, 3, 1] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[1, 2, 3, 2] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[1, 2, 3] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[1, 2, 1] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[1, 2] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[1, 3] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[1] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[2, 3, 2] 
 A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
[2, 3] 
 A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
[2] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[3] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['A',4])
....: c=[0,1,2,3]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(l
....: en(c)+10)))
....:     print(v,"\n",P)
....: 
[1, 2, 3, 1, 2, 1] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[1, 2, 3, 1, 2] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[1, 2, 3, 1] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[1, 2, 3, 2] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[1, 2, 3] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[1, 2, 1] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[1, 2] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[1, 3] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[1] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[2, 3, 2] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[2, 3] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[2] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[3] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['A',4])
....: c=[0,1,2,3]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(1
....: 4)))
....:     print(v,"\n",P)
....: 
[1, 2, 3, 1, 2, 1] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[1, 2, 3, 1, 2] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[1, 2, 3, 1] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[1, 2, 3, 2] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[1, 2, 3] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[1, 2, 1] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[1, 2] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[1, 3] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[1] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[2, 3, 2] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[2, 3] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[2] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[3] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['A',4])
....: c=[0,1,2,3]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(1
....: 3)))
....:     print(v,"\n",P)
....: 
[1, 2, 3, 1, 2, 1] 
 A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
[1, 2, 3, 1, 2] 
 A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
[1, 2, 3, 1] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[1, 2, 3, 2] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[1, 2, 3] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[1, 2, 1] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[1, 2] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[1, 3] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[1] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[2, 3, 2] 
 A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
[2, 3] 
 A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
[2] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[3] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['A',3])
....: c=[0,1,2]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(1
....: 3)))
....:     print(v,"\n",P)
....: 
[1, 2, 1] 
 A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[1, 2] 
 A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[1] 
 A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[2] 
 A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[] 
 A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['A',3])
....: c=[0,1,2]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(1
....: 6)))
....:     print(v,"\n",P)
....: 
[1, 2, 1] 
 A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[1, 2] 
 A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[1] 
 A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[2] 
 A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[] 
 A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['A',3])
....: c=[0,1,2]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(1
....: 4)))
....:     print(v,"\n",P)
....: 
[1, 2, 1] 
 A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[1, 2] 
 A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[1] 
 A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[2] 
 A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[] 
 A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['A',3])
....: c=[0,1,2]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(1
....: 3)))
....:     print(v,"\n",P)
....: 
[1, 2, 1] 
 A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[1, 2] 
 A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[1] 
 A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[2] 
 A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[] 
 A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['A',3])
....: c=[0,1,2]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(1
....: 2)))
....:     print(v,"\n",P)
....: 
[1, 2, 1] 
 A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[1, 2] 
 A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[1] 
 A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[2] 
 A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[] 
 A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['A',3])
....: c=[0,1,2]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(5
....: )))
....:     print(v,"\n",P)
....: 
[1, 2, 1] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices
[1, 2] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices
[1] 
 A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices
[2] 
 A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[] 
 A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['A',3])
....: c=[0,1,2]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(7
....: )))
....:     print(v,"\n",P)
....: 
[1, 2, 1] 
 A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices
[1, 2] 
 A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices
[1] 
 A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[2] 
 A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[] 
 A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['A',4])
....: c=[0,1,2,3]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(l
....: en(c)+1)))
....:     print(v,"\n",P)
....: 
[1, 2, 3, 1, 2, 1] 
 A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 4 vertices
[1, 2, 3, 1, 2] 
 A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 4 vertices
[1, 2, 3, 1] 
 A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 4 vertices
[1, 2, 3, 2] 
 A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices
[1, 2, 3] 
 A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 4 vertices
[1, 2, 1] 
 A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
[1, 2] 
 A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
[1, 3] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[1] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[2, 3, 2] 
 A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
[2, 3] 
 A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
[2] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[3] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[] 
 A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['A',4])
....: c=[0,1,2,3]
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c[:i] for i in range(len(c))))
....:     print(v,"\n",P.vertices(),"\n",P.rays(),"\n",P.lines(),"\n\n")
....: 
[0, 1, 2, 3, 0, 1, 2, 0, 1, 0] 
 (A vertex at (0, -1, -1, -2), A vertex at (0, -1, -2, -1), A vertex at (0, 0, -2, -2), A vertex at (-1, 1, -1, -3), A vertex at (0, 0, -1, -3), A vertex at (-1, -1, -1, -1), A vertex at (1, 0, -2, -2), A vertex at (1, 0, -1, -3), A vertex at (1, 2, 0, -4), A vertex at (-1, 2, 0, -4), A vertex at (0, 1, 0, -4), A vertex at (1, 1, 0, -4)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[0, 1, 2, 3, 0, 1, 2, 0, 1] 
 (A vertex at (0, -1, -2, 0), A vertex at (0, -1, -3, 1), A vertex at (0, 0, -3, 0), A vertex at (-1, 1, -2, -1), A vertex at (0, 0, -2, -1), A vertex at (-1, -1, -2, 1), A vertex at (1, 0, -3, 0), A vertex at (1, 0, -2, -1), A vertex at (1, 3, 0, -3), A vertex at (-1, 3, 0, -3), A vertex at (0, 2, 0, -3), A vertex at (1, 2, 0, -3)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[0, 1, 2, 3, 0, 1, 2, 0] 
 (A vertex at (0, -2, -1, 1), A vertex at (0, -2, -2, 2), A vertex at (0, 0, -2, 0), A vertex at (-1, 1, -1, -1), A vertex at (0, 0, -1, -1), A vertex at (-1, -2, -1, 2), A vertex at (2, 0, -2, 0), A vertex at (2, 0, -1, -1), A vertex at (2, 2, 0, -2), A vertex at (-1, 2, 0, -2), A vertex at (0, 1, 0, -2), A vertex at (2, 1, 0, -2)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[0, 1, 2, 3, 0, 1, 2, 1] 
 (A vertex at (0, -3, 2, -2), A vertex at (0, -3, 1, -1), A vertex at (0, -1, 1, -3), A vertex at (-1, -3, 2, -1), A vertex at (-1, -1, 2, -3), A vertex at (0, -2, 2, -3), A vertex at (1, -2, 2, -3), A vertex at (2, -1, 1, -3)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[0, 1, 2, 3, 0, 1, 2] 
 (A vertex at (0, -3, 1, 0), A vertex at (0, -3, 0, 1), A vertex at (0, 0, 0, -2), A vertex at (-1, -3, 1, 1), A vertex at (-1, 0, 1, -2), A vertex at (0, -1, 1, -2), A vertex at (3, 0, 0, -2), A vertex at (2, -1, 1, -2)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[0, 1, 2, 3, 0, 1, 0] 
 (A vertex at (0, -1, -1, 1), A vertex at (0, -1, -3, 3), A vertex at (0, 0, -3, 2), A vertex at (-2, 2, -1, 0), A vertex at (0, 0, -1, 0), A vertex at (-2, -1, -1, 3), A vertex at (1, 0, -3, 2), A vertex at (1, 0, -1, 0), A vertex at (1, 3, 0, -1), A vertex at (-2, 3, 0, -1), A vertex at (0, 1, 0, -1), A vertex at (1, 1, 0, -1)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[0, 1, 2, 3, 0, 1] 
 (A vertex at (0, -2, 1, 0), A vertex at (-2, -2, 1, 2), A vertex at (0, -2, -1, 2), A vertex at (-1, 1, 0, -1), A vertex at (0, 0, -1, 0), A vertex at (-2, 1, 1, -1), A vertex at (0, -1, 1, -1), A vertex at (2, 1, 0, -1), A vertex at (2, 0, -1, 0), A vertex at (2, 0, 0, -1), A vertex at (1, -1, 1, -1), A vertex at (0, 0, 0, -1)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[0, 1, 2, 3, 0, 2] 
 (A vertex at (0, -1, 0, -1), A vertex at (0, -1, 1, -2), A vertex at (-3, -1, 3, -1), A vertex at (0, 0, 0, -2), A vertex at (-3, 0, 3, -2), A vertex at (1, 0, 0, -2), A vertex at (-2, -1, 3, -2)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[0, 1, 2, 3, 0] 
 (A vertex at (0, -1, -1, 1), A vertex at (0, -1, 1, -1), A vertex at (-1, 1, 0, -1), A vertex at (-3, -1, 2, 1), A vertex at (0, 0, -1, 0), A vertex at (-3, 1, 2, -1), A vertex at (1, 0, -1, 0), A vertex at (1, 1, 0, -1), A vertex at (1, 0, 0, -1), A vertex at (0, 0, 0, -1), A vertex at (-1, -1, 2, -1)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[0, 1, 2, 3, 1, 2, 1] 
 (A vertex at (-3, 3, -2, -1), A vertex at (-3, 3, -1, -2), A vertex at (-4, 4, -1, -2), A vertex at (-4, 3, -1, -1), A vertex at (-4, 5, 0, -3), A vertex at (-3, 5, 0, -3), A vertex at (-3, 4, 0, -3)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[0, 1, 2, 3, 1, 2] 
 (A vertex at (-3, 3, -3, 1), A vertex at (-3, 3, -2, 0), A vertex at (-4, 4, -2, 0), A vertex at (-4, 3, -2, 1), A vertex at (-4, 6, 0, -2), A vertex at (-3, 6, 0, -2), A vertex at (-3, 5, 0, -2)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[0, 1, 2, 3, 1] 
 (A vertex at (-2, 2, -3, 2), A vertex at (-2, 2, -1, 0), A vertex at (-4, 4, -1, 0), A vertex at (-4, 2, -1, 2), A vertex at (-4, 5, 0, -1), A vertex at (-2, 5, 0, -1), A vertex at (-2, 3, 0, -1)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[0, 1, 2, 3, 2] 
 (A vertex at (-1, 1, 0, -2), A vertex at (-1, 1, -1, -1), A vertex at (-2, 2, 0, -2), A vertex at (-4, 2, 2, -2), A vertex at (-4, 1, 2, -1), A vertex at (-1, 2, 0, -2), A vertex at (-3, 1, 2, -2)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[0, 1, 2, 3] 
 (A vertex at (-1, 1, 0, -1), A vertex at (-1, 1, -2, 1), A vertex at (-3, 3, 0, -1), A vertex at (-4, 3, 1, -1), A vertex at (-4, 1, 1, 1), A vertex at (-1, 3, 0, -1), A vertex at (-2, 1, 1, -1)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[0, 1, 2, 0, 1, 0] 
 (A vertex at (0, -1, -1, 3), A vertex at (0, -1, -2, 4), A vertex at (0, 0, -2, 3), A vertex at (-1, 1, -1, 2), A vertex at (0, 0, -1, 2), A vertex at (-1, -1, -1, 4), A vertex at (1, 0, -2, 3), A vertex at (1, 0, -1, 2), A vertex at (1, 2, 0, 1), A vertex at (-1, 2, 0, 1), A vertex at (0, 1, 0, 1), A vertex at (1, 1, 0, 1)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[0, 1, 2, 0, 1] 
 (A vertex at (0, -2, 1, 2), A vertex at (0, -2, 0, 3), A vertex at (0, 0, 0, 1), A vertex at (-1, -2, 1, 3), A vertex at (-1, 0, 1, 1), A vertex at (0, -1, 1, 1), A vertex at (2, 0, 0, 1), A vertex at (1, -1, 1, 1)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[0, 1, 2, 0] 
 (A vertex at (-2, -1, 2, 2), A vertex at (0, -1, 0, 2), A vertex at (0, -1, 1, 1), A vertex at (0, 0, 0, 1), A vertex at (-2, 0, 2, 1), A vertex at (1, 0, 0, 1), A vertex at (-1, -1, 2, 1)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[0, 1, 2, 1] 
 (A vertex at (-2, 2, -2, 3), A vertex at (-2, 2, -1, 2), A vertex at (-3, 3, -1, 2), A vertex at (-3, 2, -1, 3), A vertex at (-3, 4, 0, 1), A vertex at (-2, 4, 0, 1), A vertex at (-2, 3, 0, 1)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[0, 1, 2] 
 (A vertex at (-3, 1, 1, 2), A vertex at (-1, 1, -1, 2), A vertex at (-2, 2, 0, 1), A vertex at (-1, 1, 0, 1), A vertex at (-3, 2, 1, 1), A vertex at (-1, 2, 0, 1), A vertex at (-2, 1, 1, 1)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[0, 1, 3, 0] 
 (A vertex at (0, -1, 3, -1), A vertex at (-1, -1, 4, -1)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[0, 1, 3] 
 (A vertex at (-1, 1, 2, -1), A vertex at (-2, 1, 3, -1)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[0, 1, 0] 
 (A vertex at (0, -1, 2, 1), A vertex at (-1, -1, 3, 1)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[0, 1] 
 (A vertex at (-1, 1, 1, 1), A vertex at (-2, 1, 2, 1)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[0, 2, 3, 2] 
 (A vertex at (-1, 4, -1, -1), A vertex at (-1, 5, 0, -2)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[0, 2, 3] 
 (A vertex at (-1, 4, -2, 1), A vertex at (-1, 6, 0, -1)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[0, 2] 
 (A vertex at (-1, 3, -1, 2), A vertex at (-1, 4, 0, 1)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[0, 3] 
 (A vertex at (-1, 2, 2, -1),) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[0] 
 (A vertex at (-1, 2, 1, 1),) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[1, 2, 3, 1, 2, 1] 
 (A vertex at (4, -1, -1, -1), A vertex at (5, 1, 0, -3), A vertex at (4, 1, 0, -3), A vertex at (4, 0, -1, -2), A vertex at (5, 0, -1, -2)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[1, 2, 3, 1, 2] 
 (A vertex at (4, -1, -2, 1), A vertex at (5, 2, 0, -2), A vertex at (4, 2, 0, -2), A vertex at (4, 0, -2, 0), A vertex at (5, 0, -2, 0)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[1, 2, 3, 1] 
 (A vertex at (4, -2, -1, 2), A vertex at (6, 1, 0, -1), A vertex at (4, 1, 0, -1), A vertex at (4, 0, -1, 0), A vertex at (6, 0, -1, 0)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[1, 2, 3, 2] 
 (A vertex at (4, -3, 2, -1), A vertex at (4, -2, 2, -2), A vertex at (5, -2, 2, -2)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[1, 2, 3] 
 (A vertex at (4, -3, 1, 1), A vertex at (4, -1, 1, -1), A vertex at (6, -1, 1, -1)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[1, 2, 1] 
 (A vertex at (3, -1, -1, 3), A vertex at (4, 1, 0, 1), A vertex at (3, 1, 0, 1), A vertex at (3, 0, -1, 2), A vertex at (4, 0, -1, 2)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[1, 2] 
 (A vertex at (3, -2, 1, 2), A vertex at (3, -1, 1, 1), A vertex at (4, -1, 1, 1)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[1, 3] 
 (A vertex at (2, -1, 3, -1),) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[1] 
 (A vertex at (2, -1, 2, 1),) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[2, 3, 2] 
 (A vertex at (1, 3, -1, -1), A vertex at (1, 4, 0, -2)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[2, 3] 
 (A vertex at (1, 3, -2, 1), A vertex at (1, 5, 0, -1)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[2] 
 (A vertex at (1, 2, -1, 2), A vertex at (1, 3, 0, 1)) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[3] 
 (A vertex at (1, 1, 2, -1),) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


[] 
 (A vertex at (1, 1, 1, 1),) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


sage: A=CartanMatrix(['A',4])
....: c=[0,1,2,3]
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c[:i] for i in range(len(c)+1)))
....:     print(v,"\n",P.vertices(),"\n",P.rays(),"\n",P.lines(),"\n\n")
....: 
[0, 1, 2, 3, 0, 1, 2, 0, 1, 0] 
 (A vertex at (0, -1, -2, -1), A vertex at (0, 0, -2, -2), A vertex at (-1, 1, -1, -3), A vertex at (0, -1, 1, -1), A vertex at (-1, -1, 2, -1), A vertex at (-1, 1, 0, -3), A vertex at (0, 0, 0, -2), A vertex at (-1, -1, -1, -1)) 
 () 
 () 


[0, 1, 2, 3, 0, 1, 2, 0, 1] 
 (A vertex at (0, -1, -3, 1), A vertex at (0, 0, -3, 0), A vertex at (-1, 1, -2, -1), A vertex at (0, -1, 0, 1), A vertex at (-1, -1, 1, 1), A vertex at (-1, 1, 0, -1), A vertex at (-1, 0, 1, 0), A vertex at (0, 0, 0, 0), A vertex at (-1, -1, -2, 1)) 
 () 
 () 


[0, 1, 2, 3, 0, 1, 2, 0] 
 (A vertex at (0, -2, -2, 2), A vertex at (0, 0, -2, 0), A vertex at (-1, 1, -1, -1), A vertex at (0, -2, 0, 2), A vertex at (-1, -2, 1, 2), A vertex at (-1, 1, 0, -1), A vertex at (-1, 0, 1, 0), A vertex at (0, 0, 0, 0), A vertex at (-1, -2, -1, 2)) 
 () 
 () 


[0, 1, 2, 3, 0, 1, 2, 1] 
 (A vertex at (0, -3, 1, -1), A vertex at (0, -1, 1, -3), A vertex at (-1, -1, 2, -3), A vertex at (-1, -3, 4, -1), A vertex at (0, -3, 3, -1), A vertex at (-1, -3, 2, -1)) 
 () 
 () 


[0, 1, 2, 3, 0, 1, 2] 
 (A vertex at (0, -3, 0, 1), A vertex at (0, 0, 0, -2), A vertex at (-1, 0, 1, -2), A vertex at (0, -2, 2, 0), A vertex at (-1, -2, 3, 0), A vertex at (-1, -3, 3, 1), A vertex at (0, -3, 2, 1), A vertex at (-1, -3, 1, 1)) 
 () 
 () 


[0, 1, 2, 3, 0, 1, 0] 
 (A vertex at (0, 0, -3, 2), A vertex at (0, -1, -3, 3), A vertex at (-2, 2, -1, 0), A vertex at (0, -1, -2, 3), A vertex at (0, 0, -2, 2), A vertex at (-2, -1, 0, 3), A vertex at (-2, 2, 0, 0), A vertex at (-2, -1, -1, 3)) 
 () 
 () 


[0, 1, 2, 3, 0, 1] 
 (A vertex at (0, -2, -1, 2), A vertex at (0, 0, -1, 0), A vertex at (-1, 1, 0, -1), A vertex at (-2, 1, 1, -1), A vertex at (0, 0, 0, 0), A vertex at (-2, 0, 2, 0), A vertex at (-2, -2, 2, 2), A vertex at (0, -2, 0, 2), A vertex at (-2, -2, 1, 2)) 
 () 
 () 


[0, 1, 2, 3, 0, 2] 
 (A vertex at (0, -1, 0, -1), A vertex at (0, 0, 0, -2), A vertex at (-3, 0, 3, -2), A vertex at (-3, -1, 4, -1), A vertex at (0, -1, 1, -1), A vertex at (-3, -1, 3, -1)) 
 () 
 () 


[0, 1, 2, 3, 0] 
 (A vertex at (0, -1, -1, 1), A vertex at (0, 0, -1, 0), A vertex at (-1, 1, 0, -1), A vertex at (-3, 1, 2, -1), A vertex at (0, -1, 0, 1), A vertex at (-3, -1, 3, 1), A vertex at (-3, 0, 3, 0), A vertex at (0, 0, 0, 0), A vertex at (-3, -1, 2, 1)) 
 () 
 () 


[0, 1, 2, 3, 1, 2, 1] 
 (A vertex at (-3, 3, -2, -1), A vertex at (-4, 4, -1, -2), A vertex at (-4, 3, 1, -1), A vertex at (-4, 4, 0, -2), A vertex at (-3, 3, 0, -1), A vertex at (-4, 3, -1, -1)) 
 () 
 () 


[0, 1, 2, 3, 1, 2] 
 (A vertex at (-3, 3, -3, 1), A vertex at (-4, 4, -2, 0), A vertex at (-3, 3, -1, 1), A vertex at (-4, 3, 0, 1), A vertex at (-4, 4, 0, 0), A vertex at (-4, 3, -2, 1)) 
 () 
 () 


[0, 1, 2, 3, 1] 
 (A vertex at (-2, 2, -3, 2), A vertex at (-4, 4, -1, 0), A vertex at (-2, 2, -2, 2), A vertex at (-4, 2, 0, 2), A vertex at (-4, 4, 0, 0), A vertex at (-4, 2, -1, 2)) 
 () 
 () 


[0, 1, 2, 3, 2] 
 (A vertex at (-1, 1, -1, -1), A vertex at (-2, 2, 0, -2), A vertex at (-4, 2, 2, -2), A vertex at (-4, 1, 3, -1), A vertex at (-1, 1, 0, -1), A vertex at (-4, 1, 2, -1)) 
 () 
 () 


[0, 1, 2, 3] 
 (A vertex at (-1, 1, -2, 1), A vertex at (-3, 3, 0, -1), A vertex at (-4, 3, 1, -1), A vertex at (-2, 2, 0, 0), A vertex at (-1, 1, -1, 1), A vertex at (-4, 1, 2, 1), A vertex at (-4, 2, 2, 0), A vertex at (-4, 1, 1, 1)) 
 () 
 () 


[0, 1, 2, 0, 1, 0] 
 (A vertex at (0, 0, -2, 3), A vertex at (0, -1, -2, 4), A vertex at (-1, 1, -1, 2), A vertex at (-1, -1, -1, 4)) 
 () 
 () 


[0, 1, 2, 0, 1] 
 (A vertex at (0, 0, 0, 1), A vertex at (0, -2, 0, 3), A vertex at (-1, 0, 1, 1), A vertex at (-1, -2, 1, 3)) 
 () 
 () 


[0, 1, 2, 0] 
 (A vertex at (-2, -1, 2, 2), A vertex at (0, -1, 0, 2), A vertex at (0, 0, 0, 1), A vertex at (-2, 0, 2, 1)) 
 () 
 () 


[0, 1, 2, 1] 
 (A vertex at (-2, 2, -2, 3), A vertex at (-3, 2, -1, 3), A vertex at (-3, 3, -1, 2)) 
 () 
 () 


[0, 1, 2] 
 (A vertex at (-3, 2, 1, 1), A vertex at (-2, 2, 0, 1), A vertex at (-1, 1, -1, 2), A vertex at (-3, 1, 1, 2)) 
 () 
 () 


[0, 1, 3, 0] 
 (A vertex at (-1, -1, 4, -1), A vertex at (0, -1, 3, -1)) 
 () 
 () 


[0, 1, 3] 
 (A vertex at (-2, 1, 3, -1), A vertex at (-1, 1, 2, -1)) 
 () 
 () 


[0, 1, 0] 
 (A vertex at (-1, -1, 3, 1), A vertex at (0, -1, 2, 1)) 
 () 
 () 


[0, 1] 
 (A vertex at (-2, 1, 2, 1), A vertex at (-1, 1, 1, 1)) 
 () 
 () 


[0, 2, 3, 2] 
 (A vertex at (-1, 4, -1, -1), A vertex at (-1, 4, 0, -1)) 
 () 
 () 


[0, 2, 3] 
 (A vertex at (-1, 4, -2, 1), A vertex at (-1, 4, -1, 1)) 
 () 
 () 


[0, 2] 
 (A vertex at (-1, 3, -1, 2),) 
 () 
 () 


[0, 3] 
 (A vertex at (-1, 2, 2, -1),) 
 () 
 () 


[0] 
 (A vertex at (-1, 2, 1, 1),) 
 () 
 () 


[1, 2, 3, 1, 2, 1] 
 (A vertex at (4, -1, 1, -1), A vertex at (4, -1, -1, -1), A vertex at (4, 0, -1, -2), A vertex at (4, 0, 0, -2)) 
 () 
 () 


[1, 2, 3, 1, 2] 
 (A vertex at (4, -1, 0, 1), A vertex at (4, -1, -2, 1), A vertex at (4, 0, -2, 0), A vertex at (4, 0, 0, 0)) 
 () 
 () 


[1, 2, 3, 1] 
 (A vertex at (4, -2, 0, 2), A vertex at (4, -2, -1, 2), A vertex at (4, 0, -1, 0), A vertex at (4, 0, 0, 0)) 
 () 
 () 


[1, 2, 3, 2] 
 (A vertex at (4, -3, 3, -1), A vertex at (4, -2, 2, -2), A vertex at (4, -3, 2, -1)) 
 () 
 () 


[1, 2, 3] 
 (A vertex at (4, -2, 2, 0), A vertex at (4, -1, 1, -1), A vertex at (4, -3, 1, 1), A vertex at (4, -3, 2, 1)) 
 () 
 () 


[1, 2, 1] 
 (A vertex at (3, -1, -1, 3), A vertex at (3, 0, -1, 2)) 
 () 
 () 


[1, 2] 
 (A vertex at (3, -1, 1, 1), A vertex at (3, -2, 1, 2)) 
 () 
 () 


[1, 3] 
 (A vertex at (2, -1, 3, -1),) 
 () 
 () 


[1] 
 (A vertex at (2, -1, 2, 1),) 
 () 
 () 


[2, 3, 2] 
 (A vertex at (1, 3, -1, -1), A vertex at (1, 3, 0, -1)) 
 () 
 () 


[2, 3] 
 (A vertex at (1, 3, -1, 1), A vertex at (1, 3, -2, 1)) 
 () 
 () 


[2] 
 (A vertex at (1, 2, -1, 2),) 
 () 
 () 


[3] 
 (A vertex at (1, 1, 2, -1),) 
 () 
 () 


[] 
 (A vertex at (1, 1, 1, 1),) 
 () 
 () 


sage: A=CartanMatrix(['A',4])
....: c=[0,1,2,3]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c[:i] for i in range(len(c)+1)))
....:     print(v,"\n",P.vertices(),"\n",P.rays(),"\n",P.lines(),"\n\n")
....: 
[1, 2, 3, 1, 2, 1] 
 (A vertex at (4, -1, 1, -1), A vertex at (4, -1, -1, -1), A vertex at (4, 0, -1, -2), A vertex at (4, 0, 0, -2)) 
 () 
 () 


[1, 2, 3, 1, 2] 
 (A vertex at (4, -1, 0, 1), A vertex at (4, -1, -2, 1), A vertex at (4, 0, -2, 0), A vertex at (4, 0, 0, 0)) 
 () 
 () 


[1, 2, 3, 1] 
 (A vertex at (4, -2, 0, 2), A vertex at (4, -2, -1, 2), A vertex at (4, 0, -1, 0), A vertex at (4, 0, 0, 0)) 
 () 
 () 


[1, 2, 3, 2] 
 (A vertex at (4, -3, 3, -1), A vertex at (4, -2, 2, -2), A vertex at (4, -3, 2, -1)) 
 () 
 () 


[1, 2, 3] 
 (A vertex at (4, -2, 2, 0), A vertex at (4, -1, 1, -1), A vertex at (4, -3, 1, 1), A vertex at (4, -3, 2, 1)) 
 () 
 () 


[1, 2, 1] 
 (A vertex at (3, -1, -1, 3), A vertex at (3, 0, -1, 2)) 
 () 
 () 


[1, 2] 
 (A vertex at (3, -1, 1, 1), A vertex at (3, -2, 1, 2)) 
 () 
 () 


[1, 3] 
 (A vertex at (2, -1, 3, -1),) 
 () 
 () 


[1] 
 (A vertex at (2, -1, 2, 1),) 
 () 
 () 


[2, 3, 2] 
 (A vertex at (1, 3, -1, -1), A vertex at (1, 3, 0, -1)) 
 () 
 () 


[2, 3] 
 (A vertex at (1, 3, -1, 1), A vertex at (1, 3, -2, 1)) 
 () 
 () 


[2] 
 (A vertex at (1, 2, -1, 2),) 
 () 
 () 


[3] 
 (A vertex at (1, 1, 2, -1),) 
 () 
 () 


[] 
 (A vertex at (1, 1, 1, 1),) 
 () 
 () 


sage: A=CartanMatrix(['A',4])
....: c=[0,1,2,3]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c[:i] for i in range(len(c)+1)))
....:     print(v,"\n",P.dimension(),"\n",P.rays(),"\n\n")
....: 
[1, 2, 3, 1, 2, 1] 
 2 
 () 


[1, 2, 3, 1, 2] 
 2 
 () 


[1, 2, 3, 1] 
 2 
 () 


[1, 2, 3, 2] 
 2 
 () 


[1, 2, 3] 
 2 
 () 


[1, 2, 1] 
 1 
 () 


[1, 2] 
 1 
 () 


[1, 3] 
 0 
 () 


[1] 
 0 
 () 


[2, 3, 2] 
 1 
 () 


[2, 3] 
 1 
 () 


[2] 
 0 
 () 


[3] 
 0 
 () 


[] 
 0 
 () 


sage: A=CartanMatrix(['A',4])
....: c=[0,1,2,3]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c[:i] for i in range(len(c)+1)))
....:     print(v,P.dimension(),P.rays(),"\n")
....: 
[1, 2, 3, 1, 2, 1] 2 () 

[1, 2, 3, 1, 2] 2 () 

[1, 2, 3, 1] 2 () 

[1, 2, 3, 2] 2 () 

[1, 2, 3] 2 () 

[1, 2, 1] 1 () 

[1, 2] 1 () 

[1, 3] 0 () 

[1] 0 () 

[2, 3, 2] 1 () 

[2, 3] 1 () 

[2] 0 () 

[3] 0 () 

[] 0 () 

sage: A=CartanMatrix(['A',4])
....: c=[0,1,2,3]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c[:i] for i in range(len(c))))
....:     print(v,P.dimension(),P.rays(),"\n")
....: 
[1, 2, 3, 1, 2, 1] 3 (A ray in the direction (0, 0, 1, 0),) 

[1, 2, 3, 1, 2] 3 (A ray in the direction (0, 0, 1, 0),) 

[1, 2, 3, 1] 3 (A ray in the direction (0, 0, 1, 0),) 

[1, 2, 3, 2] 3 (A ray in the direction (0, 0, 1, 0),) 

[1, 2, 3] 3 (A ray in the direction (0, 0, 1, 0),) 

[1, 2, 1] 3 (A ray in the direction (0, 0, 1, 0),) 

[1, 2] 3 (A ray in the direction (0, 0, 1, 0),) 

[1, 3] 1 (A ray in the direction (0, 0, 1, 0),) 

[1] 1 (A ray in the direction (0, 0, 1, 0),) 

[2, 3, 2] 2 (A ray in the direction (0, 0, 1, 0),) 

[2, 3] 2 (A ray in the direction (0, 0, 1, 0),) 

[2] 2 (A ray in the direction (0, 0, 1, 0),) 

[3] 1 (A ray in the direction (0, 0, 1, 0),) 

[] 1 (A ray in the direction (0, 0, 1, 0),) 

sage: A=CartanMatrix(['A',3])
....: c=[0,1,2]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c[:i] for i in range(len(c))))
....:     print(v,P.dimension(),P.rays(),"\n")
....: 
[1, 2, 1] 2 (A ray in the direction (0, 1, 0),) 

[1, 2] 2 (A ray in the direction (0, 1, 0),) 

[1] 2 (A ray in the direction (0, 1, 0),) 

[2] 1 (A ray in the direction (0, 1, 0),) 

[] 1 (A ray in the direction (0, 1, 0),) 

sage: A=CartanMatrix(['A',5])
....: c=[0,1,2,3,4]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c[:i] for i in range(len(c))))
....:     print(v,P.dimension(),P.rays(),"\n")
....: 
[1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 4 (A ray in the direction (0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0)) 

[1, 2, 3, 4, 1, 2, 3, 1, 2] 4 (A ray in the direction (0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0)) 

[1, 2, 3, 4, 1, 2, 3, 1] 4 (A ray in the direction (0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0)) 

[1, 2, 3, 4, 1, 2, 3, 2] 4 (A ray in the direction (0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0)) 

[1, 2, 3, 4, 1, 2, 3] 4 (A ray in the direction (0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0)) 

[1, 2, 3, 4, 1, 2, 1] 4 (A ray in the direction (0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0)) 

[1, 2, 3, 4, 1, 2] 4 (A ray in the direction (0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0)) 

[1, 2, 3, 4, 1, 3] 4 (A ray in the direction (0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0)) 

[1, 2, 3, 4, 1] 4 (A ray in the direction (0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0)) 

[1, 2, 3, 4, 2, 3, 2] 4 (A ray in the direction (0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0)) 

[1, 2, 3, 4, 2, 3] 4 (A ray in the direction (0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0)) 

[1, 2, 3, 4, 2] 4 (A ray in the direction (0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0)) 

[1, 2, 3, 4, 3] 4 (A ray in the direction (0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0)) 

[1, 2, 3, 4] 4 (A ray in the direction (0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0)) 

[1, 2, 3, 1, 2, 1] 4 (A ray in the direction (0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0)) 

[1, 2, 3, 1, 2] 4 (A ray in the direction (0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0)) 

[1, 2, 3, 1] 4 (A ray in the direction (0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0)) 

[1, 2, 3, 2] 4 (A ray in the direction (0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0)) 

[1, 2, 3] 4 (A ray in the direction (0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0)) 

[1, 2, 4, 1] 3 (A ray in the direction (0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0)) 

[1, 2, 4] 3 (A ray in the direction (0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0)) 

[1, 2, 1] 3 (A ray in the direction (0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0)) 

[1, 2] 3 (A ray in the direction (0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0)) 

[1, 3, 4, 3] 4 (A ray in the direction (0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0)) 

[1, 3, 4] 4 (A ray in the direction (0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0)) 

[1, 3] 4 (A ray in the direction (0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0)) 

[1, 4] 3 (A ray in the direction (0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0)) 

[1] 3 (A ray in the direction (0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0)) 

[2, 3, 4, 2, 3, 2] 3 (A ray in the direction (0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0)) 

[2, 3, 4, 2, 3] 3 (A ray in the direction (0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0)) 

[2, 3, 4, 2] 3 (A ray in the direction (0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0)) 

[2, 3, 4, 3] 3 (A ray in the direction (0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0)) 

[2, 3, 4] 3 (A ray in the direction (0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0)) 

[2, 3, 2] 3 (A ray in the direction (0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0)) 

[2, 3] 3 (A ray in the direction (0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0)) 

[2, 4] 2 (A ray in the direction (0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0)) 

[2] 2 (A ray in the direction (0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0)) 

[3, 4, 3] 3 (A ray in the direction (0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0)) 

[3, 4] 3 (A ray in the direction (0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0)) 

[3] 3 (A ray in the direction (0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0)) 

[4] 2 (A ray in the direction (0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0)) 

[] 2 (A ray in the direction (0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0)) 

sage: A=CartanMatrix(['A',6])
....: c=[0,1,2,3,4,5]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c[:i] for i in range(len(c))))
....:     print(v,P.dimension(),P.rays(),"\n")
....: 
[1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 2] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 3] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 2, 3, 4, 1] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3, 2] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 2, 3, 4, 2] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 2, 3, 4, 3] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 2, 3, 4] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 2, 3, 1, 2] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 2, 3, 1] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 2, 3, 2] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 2, 3] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 2, 4, 1] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 2, 4] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 2, 1] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 2] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 3, 4, 3] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 3, 4] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 3] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 4] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 2, 3, 4, 2, 3, 2] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 2, 3, 4, 2, 3] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 2, 3, 4, 2] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 2, 3, 4, 3] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 2, 3, 4] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 2, 3, 2] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 2, 3] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 2, 4] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 2] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 3, 4, 3] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 3, 4] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 3] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 4] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 1, 2, 3, 1, 2] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 1, 2, 3, 1] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 1, 2, 3, 2] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 1, 2, 3] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 1, 2, 1] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 1, 2] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 1, 3] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 1] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 2, 3, 2] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 2, 3] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 2] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 3] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 5, 1, 2, 1] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 5, 1, 2] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 5, 1] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 5, 2] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 5] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 1, 2, 1] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 1, 2] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 1] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 2] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 4, 5, 1, 4] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 4, 5, 1] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 4, 5, 4] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 4, 5] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 4, 1] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 4] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 5, 1] 2 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 5] 2 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 1] 2 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2] 2 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 3, 4, 5, 3, 4, 3] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 3, 4, 5, 3, 4] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 3, 4, 5, 3] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 3, 4, 5, 4] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 3, 4, 5] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 3, 4, 3] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 3, 4] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 3, 5] 1 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 3] 1 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 4, 5, 4] 2 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 4, 5] 2 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 4] 2 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 5] 1 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1] 1 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3, 4, 5, 2, 3, 4, 2, 3, 2] 4 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3, 4, 5, 2, 3, 4, 2, 3] 4 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3, 4, 5, 2, 3, 4, 2] 4 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3, 4, 5, 2, 3, 4, 3] 4 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3, 4, 5, 2, 3, 4] 4 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3, 4, 5, 2, 3, 2] 4 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3, 4, 5, 2, 3] 4 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3, 4, 5, 2, 4] 4 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3, 4, 5, 2] 4 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3, 4, 5, 3, 4, 3] 4 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3, 4, 5, 3, 4] 4 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3, 4, 5, 3] 4 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3, 4, 5, 4] 4 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3, 4, 5] 4 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3, 4, 2, 3, 2] 4 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3, 4, 2, 3] 4 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3, 4, 2] 4 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3, 4, 3] 4 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3, 4] 4 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3, 5, 2] 2 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3, 5] 2 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3, 2] 2 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3] 2 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 4, 5, 4] 2 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 4, 5] 2 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 4] 2 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 5] 1 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2] 1 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[3, 4, 5, 3, 4, 3] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[3, 4, 5, 3, 4] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[3, 4, 5, 3] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[3, 4, 5, 4] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[3, 4, 5] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[3, 4, 3] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[3, 4] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[3, 5] 1 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[3] 1 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[4, 5, 4] 2 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[4, 5] 2 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[4] 2 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[5] 1 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[] 1 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

sage: A=CartanMatrix(['A',6])
....: c=[0,1,2,3,4,5]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(l
....: en(c))))
....:     print(v,P.dimension(),P.rays(),"\n")
....: 
[1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 2] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 3] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 2, 3, 4, 1] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3, 2] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 2, 3, 4, 2] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 2, 3, 4, 3] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 2, 3, 4] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 2, 3, 1, 2] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 2, 3, 1] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 2, 3, 2] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 2, 3] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 2, 4, 1] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 2, 4] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 2, 1] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 2] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 3, 4, 3] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 3, 4] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 3] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 4] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 2, 3, 4, 2, 3, 2] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 2, 3, 4, 2, 3] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 2, 3, 4, 2] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 2, 3, 4, 3] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 2, 3, 4] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 2, 3, 2] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 2, 3] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 2, 4] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 2] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 3, 4, 3] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 3, 4] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 3] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 4] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 1, 2, 3, 1, 2] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 1, 2, 3, 1] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 1, 2, 3, 2] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 1, 2, 3] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 1, 2, 1] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 1, 2] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 1, 3] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 1] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 2, 3, 2] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 2, 3] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 2] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 3] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 5, 1, 2, 1] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 5, 1, 2] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 5, 1] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 5, 2] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 5] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 1, 2, 1] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 1, 2] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 1] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 2] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 4, 5, 1, 4] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 4, 5, 1] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 4, 5, 4] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 4, 5] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 4, 1] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 4] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 5, 1] 2 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 5] 2 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 1] 2 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2] 2 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 3, 4, 5, 3, 4, 3] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 3, 4, 5, 3, 4] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 3, 4, 5, 3] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 3, 4, 5, 4] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 3, 4, 5] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 3, 4, 3] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 3, 4] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 3, 5] 1 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 3] 1 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 4, 5, 4] 2 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 4, 5] 2 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 4] 2 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 5] 1 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1] 1 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3, 4, 5, 2, 3, 4, 2, 3, 2] 4 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3, 4, 5, 2, 3, 4, 2, 3] 4 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3, 4, 5, 2, 3, 4, 2] 4 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3, 4, 5, 2, 3, 4, 3] 4 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3, 4, 5, 2, 3, 4] 4 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3, 4, 5, 2, 3, 2] 4 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3, 4, 5, 2, 3] 4 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3, 4, 5, 2, 4] 4 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3, 4, 5, 2] 4 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3, 4, 5, 3, 4, 3] 4 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3, 4, 5, 3, 4] 4 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3, 4, 5, 3] 4 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3, 4, 5, 4] 4 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3, 4, 5] 4 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3, 4, 2, 3, 2] 4 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3, 4, 2, 3] 4 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3, 4, 2] 4 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3, 4, 3] 4 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3, 4] 4 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3, 5, 2] 2 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3, 5] 2 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3, 2] 2 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3] 2 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 4, 5, 4] 2 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 4, 5] 2 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 4] 2 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 5] 1 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2] 1 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[3, 4, 5, 3, 4, 3] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[3, 4, 5, 3, 4] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[3, 4, 5, 3] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[3, 4, 5, 4] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[3, 4, 5] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[3, 4, 3] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[3, 4] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[3, 5] 1 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[3] 1 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[4, 5, 4] 2 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[4, 5] 2 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[4] 2 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[5] 1 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[] 1 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(l
....: en(c))))
....:     print(v,P.dimension(),P.rays(),"\n")
....: 
[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 6 (A ray in the direction (0, 1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2] 6 (A ray in the direction (0, 1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1] 6 (A ray in the direction (0, 1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 2] 6 (A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 1, 0, 0, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] 6 (A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1] 6 (A ray in the direction (0, 1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] 6 (A ray in the direction (0, 1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 3] 6 (A ray in the direction (0, 1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1] 6 (A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 1, 0, 0, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3, 2] 6 (A ray in the direction (0, 1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3] 6 (A ray in the direction (0, 1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2] 6 (A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 1, 0, 0, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 3] 6 (A ray in the direction (0, 1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4] 6 (A ray in the direction (0, 1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1] 6 (A ray in the direction (0, 1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2] 6 (A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1] 6 (A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 2] 6 (A ray in the direction (0, 1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3] 6 (A ray in the direction (0, 1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 4, 1] 6 (A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 4] 6 (A ray in the direction (0, 1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 1] 6 (A ray in the direction (0, 1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2] 6 (A ray in the direction (0, 1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 3, 4, 3] 6 (A ray in the direction (0, 1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 3, 4] 6 (A ray in the direction (0, 1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 3] 6 (A ray in the direction (0, 1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 4] 6 (A ray in the direction (0, 1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1] 6 (A ray in the direction (0, 1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 4, 2, 3, 2] 6 (A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 4, 2, 3] 6 (A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 4, 2] 6 (A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 4, 3] 6 (A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 1, 0, 0, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 4] 6 (A ray in the direction (0, 1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 2] 6 (A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 1, 0, 0, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3] 6 (A ray in the direction (0, 1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 4] 6 (A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 1, 0, 0, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2] 6 (A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0)) 

^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [446], line 4
      2 c=[Integer(0),Integer(1),Integer(2),Integer(3),Integer(4),Integer(5),Integer(6)]
      3 for v in sortables(A,c[Integer(1):]):
----> 4     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(len(c))))
      5     print(v,P.dimension(),P.rays(),"\n")

File ~/git/affine_dominance/software/domination4.py:127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_faster(B, la, seqs[0])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_faster(B, la, s))
    128     if P.dimension()==0:
    129         break

File ~/git/affine_dominance/software/domination4.py:159, in p_lambda_faster(B, la, seq)
    155         P=Ep*Pp
    156     else:
    157         #print("Pp:   ",Pp,Pp.vertices(),Pp.rays(),Pp.lines(),"\n")
    158         #print("Pm:   ",Pm,Pm.vertices(),Pm.rays(),Pm.lines(),"\n\n")
--> 159         P=(Ep*Pp).convex_hull(Em*Pm)
    160     B.mutate(k)
    161 return P

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4099, in sage.structure.element.Matrix.__mul__ (build/cythonized/sage/structure/element.c:35219)()
   4097 
   4098         if BOTH_ARE_ELEMENT(cl):
-> 4099             return coercion_model.bin_op(left, right, mul)
   4100 
   4101         cdef long value

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1222, in sage.structure.coerce.CoercionModel.bin_op (build/cythonized/sage/structure/coerce.c:15809)()
   1220 if action is not None:
   1221     if (<Action>action)._is_left:
-> 1222         return (<Action>action)._act_(x, y)
   1223     else:
   1224         return (<Action>action)._act_(y, x)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_actions.pyx:157, in sage.structure.coerce_actions.ActedUponAction._act_ (build/cythonized/sage/structure/coerce_actions.c:8579)()
    155     <... 'sage.structure.coerce_actions.ActedUponAction'>
    156 """
--> 157 return (<Element>x)._acted_upon_(g, not self._is_left)
    158 
    159 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:949, in sage.structure.element.Element._acted_upon_ (build/cythonized/sage/structure/element.c:16495)()
    947     return None
    948 
--> 949 cpdef _acted_upon_(self, x, bint self_on_left) noexcept:
    950     """
    951     Use this method to implement ``self`` acted on by x.

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1450, in Polyhedron_base5._acted_upon_(self, actor, self_on_left)
   1448         raise ValueError("matrices should act on the left")
   1449     else:
-> 1450         return self.linear_transformation(actor)
   1451 else:
   1452     return self.dilation(actor)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1879, in Polyhedron_base5.linear_transformation(self, linear_transf, new_base_ring)
   1873     pref_rep = 'Vrep' if self.n_vertices() <= self.n_inequalities() else 'Hrep'
   1875     return new_parent.element_class(new_parent, [new_vertices, new_rays, new_lines],
   1876                                     [new_inequalities, new_equations],
   1877                                     Vrep_minimal=True, Hrep_minimal=True, pref_rep=pref_rep)
-> 1879 return new_parent.element_class(new_parent, [tuple(new_vertices), tuple(new_rays), tuple(new_lines)], None)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:70, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
---> 70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:189, in Polyhedron_ppl.set_immutable(self)
    187 if not hasattr(self, '_Vrepresentation'):
    188     try:
--> 189         self._init_Vrepresentation_from_ppl(True)
    190     except TypeError as e:
    191         # Apparently the polyhedron is (no longer) integral.
    192         self._clear_cache()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:300, in Polyhedron_ppl._init_Vrepresentation_from_ppl(self, minimize)
    298     raise TypeError("Vrepresentation of mutable polyhedra cannot be recomputed")
    299 self._Vrepresentation = []
--> 300 gs = self._ppl_polyhedron.minimized_generators()
    301 parent = self.parent()
    302 for g in gs:

File ppl/polyhedron.pyx:340, in ppl.polyhedron.Polyhedron.minimized_generators()

KeyboardInterrupt: 
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c[:i] for i in range(len(c))))
....:     print(v,P.dimension(),P.rays(),"\n")
....: 
[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 6 (A ray in the direction (0, 1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2] 6 (A ray in the direction (0, 1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1] 6 (A ray in the direction (0, 1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 2] 6 (A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 1, 0, 0, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] 6 (A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1] 6 (A ray in the direction (0, 1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] 6 (A ray in the direction (0, 1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 3] 6 (A ray in the direction (0, 1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1] 6 (A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 1, 0, 0, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3, 2] 6 (A ray in the direction (0, 1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3] 6 (A ray in the direction (0, 1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2] 6 (A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 1, 0, 0, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 3] 6 (A ray in the direction (0, 1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0)) 

c[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4] 6 (A ray in the direction (0, 1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1] 6 (A ray in the direction (0, 1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2] 6 (A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1] 6 (A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 2] 6 (A ray in the direction (0, 1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3] 6 (A ray in the direction (0, 1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0)) 

ç[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 4, 1] 6 (A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 4] 6 (A ray in the direction (0, 1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 1] 6 (A ray in the direction (0, 1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2] 6 (A ray in the direction (0, 1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 3, 4, 3] 6 (A ray in the direction (0, 1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 3, 4] 6 (A ray in the direction (0, 1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 3] 6 (A ray in the direction (0, 1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 4] 6 (A ray in the direction (0, 1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1] 6 (A ray in the direction (0, 1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0)) 

^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [447], line 4
      2 c=[Integer(0),Integer(1),Integer(2),Integer(3),Integer(4),Integer(5),Integer(6)]
      3 for v in sortables(A,c[Integer(1):]):
----> 4     P=p_lambda_int(B(A,c),lam(A,v),list(c[:i] for i in range(len(c))))
      5     print(v,P.dimension(),P.rays(),"\n")

File ~/git/affine_dominance/software/domination4.py:127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_faster(B, la, seqs[0])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_faster(B, la, s))
    128     if P.dimension()==0:
    129         break

File ~/git/affine_dominance/software/domination4.py:150, in p_lambda_faster(B, la, seq)
    147 Hm = Polyhedron(ieqs=[(0,)*(k+1)+(-1,)+(0,)*(m-k-1)])
    148 #print("Hp:   ",Hp,Hp.vertices(),Hp.rays(),Hp.lines(),"\n")
    149 #print("Hm:   ",Hm,Hm.vertices(),Hm.rays(),Hm.lines(),"\n\n")
--> 150 Pp = P.intersection(Hp)
    151 Pm = P.intersection(Hm)
    152 if Pp.dimension() < rk:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1371, in Polyhedron_base5.intersection(self, other)
   1369 parent = self.parent()
   1370 try:
-> 1371     intersection = parent.element_class(parent, None, [new_ieqs, new_eqns])
   1373     # Force calculation of the vertices.
   1374     _ = intersection.n_vertices()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:179, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    177 elif Hrep is not None:
    178     ieqs, eqns = Hrep
--> 179     self._init_from_Hrepresentation(ieqs, eqns, **kwds)
    180 else:
    181     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:129, in Polyhedron_ppl._init_from_Hrepresentation(self, ieqs, eqns, minimize, verbose)
    106 def _init_from_Hrepresentation(self, ieqs, eqns, minimize=True, verbose=False):
    107     """
    108     Construct polyhedron from H-representation data.
    109 
   (...)
    127         sage: Polyhedron_ppl._init_from_Hrepresentation(p, [], [])
    128     """
--> 129     cs = self._convert_constraints_to_ppl(ieqs, eqns)
    130     if cs.empty():
    131         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'universe')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:534, in Polyhedron_ppl._convert_constraints_to_ppl(ieqs, eqns)
    532     ieqs = []
    533 for ieq in ieqs:
--> 534     cs.insert(Polyhedron_ppl._convert_constraint_to_ppl(ieq, INEQUALITY))
    535 if eqns is None:
    536     eqns = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:509, in Polyhedron_ppl._convert_constraint_to_ppl(c, typ)
    507 A = dc[1:]
    508 if typ == INEQUALITY:
--> 509     return Linear_Expression(A, b) >= 0
    510 else:
    511     return Linear_Expression(A, b) == 0

File ppl/linear_algebra.pyx:654, in ppl.linear_algebra.Linear_Expression.__init__()

File ppl/linear_algebra.pyx:49, in ppl.linear_algebra.PPL_Coefficient_from_pyobject()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/rings/integer.pyx:914, in sage.rings.integer.Integer.__richcmp__ (build/cythonized/sage/rings/integer.c:16498)()
    912     c = mpz_cmp_d((<Integer>left).value, d)
    913 else:
--> 914     return coercion_model.richcmp(left, right, op)
    915 
    916 return rich_to_bool_sgn(op, c)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:2021, in sage.structure.coerce.CoercionModel.richcmp (build/cythonized/sage/structure/coerce.c:26173)()
   2019 # Coerce to a common parent
   2020 try:
-> 2021     x, y = self.canonical_coercion(x, y)
   2022 except (TypeError, NotImplementedError):
   2023     pass

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1422, in sage.structure.coerce.CoercionModel.canonical_coercion (build/cythonized/sage/structure/coerce.c:18956)()
   1420             self._record_exception()
   1421 
-> 1422     raise TypeError("no common canonical parent for objects with parents: '%s' and '%s'"%(xp, yp))
   1423 
   1424 cpdef coercion_maps(self, R, S) noexcept:

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['A',6])
....: c=[0,1,2,3,4,5]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c[:i] for i in range(len(c))))
....:     print(v,P.dimension(),P.rays(),"\n")
....: 
[1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 2] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 3] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 2, 3, 4, 1] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3, 2] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 2, 3, 4, 2] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 2, 3, 4, 3] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 2, 3, 4] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 2, 3, 1, 2] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 2, 3, 1] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 2, 3, 2] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 2, 3] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 2, 4, 1] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 2, 4] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 2, 1] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 2] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 3, 4, 3] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 3, 4] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 3] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1, 4] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 1] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 2, 3, 4, 2, 3, 2] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 2, 3, 4, 2, 3] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 2, 3, 4, 2] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 2, 3, 4, 3] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 2, 3, 4] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 2, 3, 2] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 2, 3] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 2, 4] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 2] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 3, 4, 3] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 3, 4] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 3] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5, 4] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 5] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 1, 2, 3, 1, 2] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 1, 2, 3, 1] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 1, 2, 3, 2] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 1, 2, 3] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 1, 2, 1] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 1, 2] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 1, 3] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 1] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 2, 3, 2] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 2, 3] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 2] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4, 3] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 4] 5 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 5, 1, 2, 1] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 5, 1, 2] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 5, 1] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 5, 2] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 5] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 1, 2, 1] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 1, 2] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 1] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3, 2] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 3] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 4, 5, 1, 4] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 4, 5, 1] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 4, 5, 4] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 4, 5] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 4, 1] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 4] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 5, 1] 2 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 5] 2 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2, 1] 2 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 2] 2 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 3, 4, 5, 3, 4, 3] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 3, 4, 5, 3, 4] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 3, 4, 5, 3] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 3, 4, 5, 4] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 3, 4, 5] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 3, 4, 3] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 3, 4] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 3, 5] 1 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 3] 1 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 4, 5, 4] 2 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 4, 5] 2 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 4] 2 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1, 5] 1 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[1] 1 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3, 4, 5, 2, 3, 4, 2, 3, 2] 4 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3, 4, 5, 2, 3, 4, 2, 3] 4 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3, 4, 5, 2, 3, 4, 2] 4 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3, 4, 5, 2, 3, 4, 3] 4 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3, 4, 5, 2, 3, 4] 4 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3, 4, 5, 2, 3, 2] 4 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3, 4, 5, 2, 3] 4 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3, 4, 5, 2, 4] 4 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3, 4, 5, 2] 4 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3, 4, 5, 3, 4, 3] 4 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3, 4, 5, 3, 4] 4 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3, 4, 5, 3] 4 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3, 4, 5, 4] 4 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3, 4, 5] 4 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3, 4, 2, 3, 2] 4 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3, 4, 2, 3] 4 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3, 4, 2] 4 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3, 4, 3] 4 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3, 4] 4 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3, 5, 2] 2 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3, 5] 2 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3, 2] 2 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 3] 2 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 4, 5, 4] 2 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 4, 5] 2 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 4] 2 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2, 5] 1 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[2] 1 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[3, 4, 5, 3, 4, 3] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[3, 4, 5, 3, 4] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[3, 4, 5, 3] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[3, 4, 5, 4] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[3, 4, 5] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[3, 4, 3] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[3, 4] 3 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[3, 5] 1 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[3] 1 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[4, 5, 4] 2 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[4, 5] 2 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[4] 2 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[5] 1 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

[] 1 (A ray in the direction (0, 0, 0, 0, 1, 0),) 

sage: A=CartanMatrix(['A',5])
....: c=[0,1,2,3,4]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c[:i] for i in range(len(c))))
....:     print(v,P.dimension(),P.rays(),"\n")
....: 
[1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 4 (A ray in the direction (0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0)) 

[1, 2, 3, 4, 1, 2, 3, 1, 2] 4 (A ray in the direction (0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0)) 

[1, 2, 3, 4, 1, 2, 3, 1] 4 (A ray in the direction (0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0)) 

[1, 2, 3, 4, 1, 2, 3, 2] 4 (A ray in the direction (0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0)) 

[1, 2, 3, 4, 1, 2, 3] 4 (A ray in the direction (0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0)) 

[1, 2, 3, 4, 1, 2, 1] 4 (A ray in the direction (0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0)) 

[1, 2, 3, 4, 1, 2] 4 (A ray in the direction (0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0)) 

[1, 2, 3, 4, 1, 3] 4 (A ray in the direction (0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0)) 

[1, 2, 3, 4, 1] 4 (A ray in the direction (0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0)) 

[1, 2, 3, 4, 2, 3, 2] 4 (A ray in the direction (0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0)) 

[1, 2, 3, 4, 2, 3] 4 (A ray in the direction (0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0)) 

[1, 2, 3, 4, 2] 4 (A ray in the direction (0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0)) 

[1, 2, 3, 4, 3] 4 (A ray in the direction (0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0)) 

[1, 2, 3, 4] 4 (A ray in the direction (0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0)) 

[1, 2, 3, 1, 2, 1] 4 (A ray in the direction (0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0)) 

[1, 2, 3, 1, 2] 4 (A ray in the direction (0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0)) 

[1, 2, 3, 1] 4 (A ray in the direction (0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0)) 

[1, 2, 3, 2] 4 (A ray in the direction (0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0)) 

[1, 2, 3] 4 (A ray in the direction (0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0)) 

[1, 2, 4, 1] 3 (A ray in the direction (0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0)) 

[1, 2, 4] 3 (A ray in the direction (0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0)) 

[1, 2, 1] 3 (A ray in the direction (0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0)) 

[1, 2] 3 (A ray in the direction (0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0)) 

[1, 3, 4, 3] 4 (A ray in the direction (0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0)) 

[1, 3, 4] 4 (A ray in the direction (0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0)) 

[1, 3] 4 (A ray in the direction (0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0)) 

[1, 4] 3 (A ray in the direction (0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0)) 

[1] 3 (A ray in the direction (0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0)) 

[2, 3, 4, 2, 3, 2] 3 (A ray in the direction (0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0)) 

[2, 3, 4, 2, 3] 3 (A ray in the direction (0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0)) 

[2, 3, 4, 2] 3 (A ray in the direction (0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0)) 

[2, 3, 4, 3] 3 (A ray in the direction (0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0)) 

[2, 3, 4] 3 (A ray in the direction (0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0)) 

[2, 3, 2] 3 (A ray in the direction (0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0)) 

[2, 3] 3 (A ray in the direction (0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0)) 

[2, 4] 2 (A ray in the direction (0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0)) 

[2] 2 (A ray in the direction (0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0)) 

[3, 4, 3] 3 (A ray in the direction (0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0)) 

[3, 4] 3 (A ray in the direction (0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0)) 

[3] 3 (A ray in the direction (0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0)) 

[4] 2 (A ray in the direction (0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0)) 

[] 2 (A ray in the direction (0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0)) 

sage: A=CartanMatrix(['A',3])
....: c=[0,1,2]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c[:i] for i in range(len(c))))
....:     print(v,P.dimension(),P.rays(),"\n")
....: 
[1, 2, 1] 2 (A ray in the direction (0, 1, 0),) 

[1, 2] 2 (A ray in the direction (0, 1, 0),) 

[1] 2 (A ray in the direction (0, 1, 0),) 

[2] 1 (A ray in the direction (0, 1, 0),) 

[] 1 (A ray in the direction (0, 1, 0),) 

sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(l
....: en(c)+1)))
....:     print(v,P.dimension(),P.rays(),"\n")
....: 
[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 6 (A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2] 6 (A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1] 6 (A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 2] 6 (A ray in the direction (0, 1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] 6 (A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1] 6 (A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] 6 (A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 3] 6 (A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1] 6 (A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3, 2] 6 (A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3] 6 (A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2] 6 (A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 3] 6 (A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4] 6 (A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1] 6 (A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2] 6 (A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1] 6 (A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 2] 6 (A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3] 6 (A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 4, 1] 6 (A ray in the direction (0, 1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 4] 6 (A ray in the direction (0, 1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 1] 6 (A ray in the direction (0, 1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2] 6 (A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 3, 4, 3] 6 (A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0, 0, 0)) 

^C---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:1093, in Polyhedra_base._make_Equation(self, polyhedron, data)
   1092 try:
-> 1093     obj = self._Equation_pool.pop()
   1094 except IndexError:

IndexError: pop from empty list

During handling of the above exception, another exception occurred:

KeyboardInterrupt                         Traceback (most recent call last)
Cell In [451], line 4
      2 c=[Integer(0),Integer(1),Integer(2),Integer(3),Integer(4),Integer(5),Integer(6)]
      3 for v in sortables(A,c[Integer(1):]):
----> 4     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(len(c)+Integer(1))))
      5     print(v,P.dimension(),P.rays(),"\n")

File ~/git/affine_dominance/software/domination4.py:127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_faster(B, la, seqs[0])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_faster(B, la, s))
    128     if P.dimension()==0:
    129         break

File ~/git/affine_dominance/software/domination4.py:150, in p_lambda_faster(B, la, seq)
    147 Hm = Polyhedron(ieqs=[(0,)*(k+1)+(-1,)+(0,)*(m-k-1)])
    148 #print("Hp:   ",Hp,Hp.vertices(),Hp.rays(),Hp.lines(),"\n")
    149 #print("Hm:   ",Hm,Hm.vertices(),Hm.rays(),Hm.lines(),"\n\n")
--> 150 Pp = P.intersection(Hp)
    151 Pm = P.intersection(Hm)
    152 if Pp.dimension() < rk:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1371, in Polyhedron_base5.intersection(self, other)
   1369 parent = self.parent()
   1370 try:
-> 1371     intersection = parent.element_class(parent, None, [new_ieqs, new_eqns])
   1373     # Force calculation of the vertices.
   1374     _ = intersection.n_vertices()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:70, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
---> 70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:195, in Polyhedron_ppl.set_immutable(self)
    193         raise e
    194 if not hasattr(self, '_Hrepresentation'):
--> 195     self._init_Hrepresentation_from_ppl(True)
    196 self._is_mutable = False

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:346, in Polyhedron_ppl._init_Hrepresentation_from_ppl(self, minimize)
    344         parent._make_Inequality(self, (c.inhomogeneous_term(),) + c.coefficients())
    345     elif c.is_equality():
--> 346         parent._make_Equation(self, (c.inhomogeneous_term(),) + c.coefficients())
    347 self._Hrepresentation = tuple(self._Hrepresentation)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:1095, in Polyhedra_base._make_Equation(self, polyhedron, data)
   1093     obj = self._Equation_pool.pop()
   1094 except IndexError:
-> 1095     obj = Equation(self)
   1096 obj._set_data(polyhedron, data)
   1097 return obj

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/representation.py:410, in Hrepresentation.__init__(self, polyhedron_parent)
    408 self._base_ring = polyhedron_parent.base_ring()
    409 self._vector = polyhedron_parent.Hrepresentation_space()(0)
--> 410 self._A = polyhedron_parent.ambient_space()(0)
    411 self._b = polyhedron_parent.base_ring()(0)
    412 self._index = 0

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/misc/cachefunc.pyx:2329, in sage.misc.cachefunc.CachedMethodCallerNoArgs.__call__ (build/cythonized/sage/misc/cachefunc.c:16226)()
   2327 if self.cache is None:
   2328     f = self.f
-> 2329     self.cache = f(self._instance)
   2330 return self.cache
   2331 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:460, in Polyhedra_base.Vrepresentation_space(self)
    457     R = self.base_ring()
    458     return self(None, [[[R.one()] + [R.zero()] * self.ambient_dim()], []], convert=True)
--> 460 @cached_method
    461 def Vrepresentation_space(self):
    462     r"""
    463     Return the ambient vector space.
    464 
   (...)
    478         Vector space of dimension 4 over Rational Field
    479     """
    480     if self.base_ring() in Fields():

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(l
....: en(c)+2)))
....:     print(v,P.dimension(),P.rays(),"\n")
....: 
[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 6 () 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2] 6 () 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1] 6 () 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 2] 6 () 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] 6 () 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1] 6 () 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] 6 () 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 3] 6 () 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1] 6 () 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3, 2] 6 () 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3] 6 () 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2] 6 () 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 3] 6 () 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4] 6 () 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1] 6 () 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2] 6 () 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1] 6 () 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 2] 6 () 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3] 6 () 

^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [452], line 4
      2 c=[Integer(0),Integer(1),Integer(2),Integer(3),Integer(4),Integer(5),Integer(6)]
      3 for v in sortables(A,c[Integer(1):]):
----> 4     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(len(c)+Integer(2))))
      5     print(v,P.dimension(),P.rays(),"\n")

File ~/git/affine_dominance/software/domination4.py:127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_faster(B, la, seqs[0])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_faster(B, la, s))
    128     if P.dimension()==0:
    129         break

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1371, in Polyhedron_base5.intersection(self, other)
   1369 parent = self.parent()
   1370 try:
-> 1371     intersection = parent.element_class(parent, None, [new_ieqs, new_eqns])
   1373     # Force calculation of the vertices.
   1374     _ = intersection.n_vertices()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:179, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    177 elif Hrep is not None:
    178     ieqs, eqns = Hrep
--> 179     self._init_from_Hrepresentation(ieqs, eqns, **kwds)
    180 else:
    181     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:129, in Polyhedron_ppl._init_from_Hrepresentation(self, ieqs, eqns, minimize, verbose)
    106 def _init_from_Hrepresentation(self, ieqs, eqns, minimize=True, verbose=False):
    107     """
    108     Construct polyhedron from H-representation data.
    109 
   (...)
    127         sage: Polyhedron_ppl._init_from_Hrepresentation(p, [], [])
    128     """
--> 129     cs = self._convert_constraints_to_ppl(ieqs, eqns)
    130     if cs.empty():
    131         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'universe')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:534, in Polyhedron_ppl._convert_constraints_to_ppl(ieqs, eqns)
    532     ieqs = []
    533 for ieq in ieqs:
--> 534     cs.insert(Polyhedron_ppl._convert_constraint_to_ppl(ieq, INEQUALITY))
    535 if eqns is None:
    536     eqns = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:509, in Polyhedron_ppl._convert_constraint_to_ppl(c, typ)
    507 A = dc[1:]
    508 if typ == INEQUALITY:
--> 509     return Linear_Expression(A, b) >= 0
    510 else:
    511     return Linear_Expression(A, b) == 0

File ppl/linear_algebra.pyx:654, in ppl.linear_algebra.Linear_Expression.__init__()

File ppl/linear_algebra.pyx:49, in ppl.linear_algebra.PPL_Coefficient_from_pyobject()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/rings/integer.pyx:914, in sage.rings.integer.Integer.__richcmp__ (build/cythonized/sage/rings/integer.c:16498)()
    912     c = mpz_cmp_d((<Integer>left).value, d)
    913 else:
--> 914     return coercion_model.richcmp(left, right, op)
    915 
    916 return rich_to_bool_sgn(op, c)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:2021, in sage.structure.coerce.CoercionModel.richcmp (build/cythonized/sage/structure/coerce.c:26173)()
   2019 # Coerce to a common parent
   2020 try:
-> 2021     x, y = self.canonical_coercion(x, y)
   2022 except (TypeError, NotImplementedError):
   2023     pass

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1422, in sage.structure.coerce.CoercionModel.canonical_coercion (build/cythonized/sage/structure/coerce.c:18956)()
   1420             self._record_exception()
   1421 
-> 1422     raise TypeError("no common canonical parent for objects with parents: '%s' and '%s'"%(xp, yp))
   1423 
   1424 cpdef coercion_maps(self, R, S) noexcept:

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(l
....: en(c)+20)))
....:     print(v,P.dimension(),P.rays(),"\n")
....: 
[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 3 () 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2] 3 () 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1] 3 () 

^C---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:1120, in Polyhedra_base._make_Vertex(self, polyhedron, data)
   1119 try:
-> 1120     obj = self._Vertex_pool.pop()
   1121 except IndexError:

IndexError: pop from empty list

During handling of the above exception, another exception occurred:

KeyboardInterrupt                         Traceback (most recent call last)
Cell In [453], line 4
      2 c=[Integer(0),Integer(1),Integer(2),Integer(3),Integer(4),Integer(5),Integer(6)]
      3 for v in sortables(A,c[Integer(1):]):
----> 4     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(len(c)+Integer(20))))
      5     print(v,P.dimension(),P.rays(),"\n")

File ~/git/affine_dominance/software/domination4.py:127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_faster(B, la, seqs[0])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_faster(B, la, s))
    128     if P.dimension()==0:
    129         break

File ~/git/affine_dominance/software/domination4.py:151, in p_lambda_faster(B, la, seq)
    148 #print("Hp:   ",Hp,Hp.vertices(),Hp.rays(),Hp.lines(),"\n")
    149 #print("Hm:   ",Hm,Hm.vertices(),Hm.rays(),Hm.lines(),"\n\n")
    150 Pp = P.intersection(Hp)
--> 151 Pm = P.intersection(Hm)
    152 if Pp.dimension() < rk:
    153     P=Em*Pm

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1371, in Polyhedron_base5.intersection(self, other)
   1369 parent = self.parent()
   1370 try:
-> 1371     intersection = parent.element_class(parent, None, [new_ieqs, new_eqns])
   1373     # Force calculation of the vertices.
   1374     _ = intersection.n_vertices()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:70, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
---> 70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:189, in Polyhedron_ppl.set_immutable(self)
    187 if not hasattr(self, '_Vrepresentation'):
    188     try:
--> 189         self._init_Vrepresentation_from_ppl(True)
    190     except TypeError as e:
    191         # Apparently the polyhedron is (no longer) integral.
    192         self._clear_cache()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:307, in Polyhedron_ppl._init_Vrepresentation_from_ppl(self, minimize)
    305 d = Integer(g.divisor())
    306 if d.is_one():
--> 307     parent._make_Vertex(self, coefficients)
    308 else:
    309     parent._make_Vertex(self, [x/d for x in coefficients])

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:1122, in Polyhedra_base._make_Vertex(self, polyhedron, data)
   1120     obj = self._Vertex_pool.pop()
   1121 except IndexError:
-> 1122     obj = Vertex(self)
   1123 obj._set_data(polyhedron, data)
   1124 return obj

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/representation.py:1131, in Vrepresentation.__init__(self, polyhedron_parent)
   1125 class Vrepresentation(PolyhedronRepresentation):
   1126     """
   1127     The base class for V-representation objects of a
   1128     polyhedron. Inherits from ``PolyhedronRepresentation``.
   1129     """
-> 1131     def __init__(self, polyhedron_parent):
   1132         """
   1133         Initializes the PolyhedronRepresentation object.
   1134 
   (...)
   1141             sage: TestSuite(a).run(skip='_test_pickling')
   1142         """
   1143         self._polyhedron_parent = polyhedron_parent

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(l
....: en(c))))
....:     print(v,P.dimension(),P.rays(),"\n")
....: 
[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 6 (A ray in the direction (0, 1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2] 6 (A ray in the direction (0, 1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1] 6 (A ray in the direction (0, 1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 2] 6 (A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 1, 0, 0, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] 6 (A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1] 6 (A ray in the direction (0, 1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] 6 (A ray in the direction (0, 1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 3] 6 (A ray in the direction (0, 1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1] 6 (A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 1, 0, 0, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3, 2] 6 (A ray in the direction (0, 1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3] 6 (A ray in the direction (0, 1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0)) 

^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [454], line 4
      2 c=[Integer(0),Integer(1),Integer(2),Integer(3),Integer(4),Integer(5),Integer(6)]
      3 for v in sortables(A,c[Integer(1):]):
----> 4     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(len(c))))
      5     print(v,P.dimension(),P.rays(),"\n")

File ~/git/affine_dominance/software/domination4.py:127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_faster(B, la, seqs[0])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_faster(B, la, s))
    128     if P.dimension()==0:
    129         break

File ~/git/affine_dominance/software/domination4.py:146, in p_lambda_faster(B, la, seq)
    144 Ep = E(B, k, 1)
    145 Em = E(B, k, -1)
--> 146 Hp = Polyhedron(ieqs=[(0,)*(k+1)+(1,)+(0,)*(m-k-1)])
    147 Hm = Polyhedron(ieqs=[(0,)*(k+1)+(-1,)+(0,)*(m-k-1)])
    148 #print("Hp:   ",Hp,Hp.vertices(),Hp.rays(),Hp.lines(),"\n")
    149 #print("Hm:   ",Hm,Hm.vertices(),Hm.rays(),Hm.lines(),"\n\n")

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/constructor.py:768, in Polyhedron(vertices, rays, lines, ieqs, eqns, ambient_dim, base_ring, minimize, verbose, backend, mutable)
    766 if got_Vrep:
    767     Vrep = [vertices, rays, lines]
--> 768 return parent(Vrep, Hrep, convert=convert, verbose=verbose, mutable=mutable)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/parent.pyx:903, in sage.structure.parent.Parent.__call__ (build/cythonized/sage/structure/parent.c:12685)()
    901         return mor._call_(x)
    902     else:
--> 903         return mor._call_with_args(x, args, kwds)
    904 
    905 raise TypeError(_LazyString("No conversion defined from %s to %s", (R, self), {}))

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:177, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_with_args (build/cythonized/sage/structure/coerce_maps.c:7430)()
    175             return C._element_constructor(x, *args)
    176         else:
--> 177             return C._element_constructor(x, *args, **kwds)
    178 except Exception:
    179     if print_warnings:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:695, in Polyhedra_base._element_constructor_(self, *args, **kwds)
    693     if convert and Vrep:
    694         Vrep = [convert_base_ring(_) for _ in Vrep]
--> 695     return self.element_class(self, Vrep, Hrep, **kwds)
    696 if nargs == 1 and is_Polyhedron(args[0]):
    697     copy = kwds.pop('copy', args[0].parent() is not self)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:179, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    177 elif Hrep is not None:
    178     ieqs, eqns = Hrep
--> 179     self._init_from_Hrepresentation(ieqs, eqns, **kwds)
    180 else:
    181     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:129, in Polyhedron_ppl._init_from_Hrepresentation(self, ieqs, eqns, minimize, verbose)
    106 def _init_from_Hrepresentation(self, ieqs, eqns, minimize=True, verbose=False):
    107     """
    108     Construct polyhedron from H-representation data.
    109 
   (...)
    127         sage: Polyhedron_ppl._init_from_Hrepresentation(p, [], [])
    128     """
--> 129     cs = self._convert_constraints_to_ppl(ieqs, eqns)
    130     if cs.empty():
    131         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'universe')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:534, in Polyhedron_ppl._convert_constraints_to_ppl(ieqs, eqns)
    532     ieqs = []
    533 for ieq in ieqs:
--> 534     cs.insert(Polyhedron_ppl._convert_constraint_to_ppl(ieq, INEQUALITY))
    535 if eqns is None:
    536     eqns = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:509, in Polyhedron_ppl._convert_constraint_to_ppl(c, typ)
    507 A = dc[1:]
    508 if typ == INEQUALITY:
--> 509     return Linear_Expression(A, b) >= 0
    510 else:
    511     return Linear_Expression(A, b) == 0

File ppl/linear_algebra.pyx:654, in ppl.linear_algebra.Linear_Expression.__init__()

File ppl/linear_algebra.pyx:49, in ppl.linear_algebra.PPL_Coefficient_from_pyobject()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/rings/integer.pyx:914, in sage.rings.integer.Integer.__richcmp__ (build/cythonized/sage/rings/integer.c:16498)()
    912     c = mpz_cmp_d((<Integer>left).value, d)
    913 else:
--> 914     return coercion_model.richcmp(left, right, op)
    915 
    916 return rich_to_bool_sgn(op, c)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:2021, in sage.structure.coerce.CoercionModel.richcmp (build/cythonized/sage/structure/coerce.c:26173)()
   2019 # Coerce to a common parent
   2020 try:
-> 2021     x, y = self.canonical_coercion(x, y)
   2022 except (TypeError, NotImplementedError):
   2023     pass

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1422, in sage.structure.coerce.CoercionModel.canonical_coercion (build/cythonized/sage/structure/coerce.c:18956)()
   1420             self._record_exception()
   1421 
-> 1422     raise TypeError("no common canonical parent for objects with parents: '%s' and '%s'"%(xp, yp))
   1423 
   1424 cpdef coercion_maps(self, R, S) noexcept:

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(l
....: en(c))))
....:     print(v,P.dimension(),P.vertices(),P.rays(),"\n")
....: 
[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 6 (A vertex at (7, 0, -1, 1, -1, -4, -1), A vertex at (7, -1, -1, 2, -1, -4, -1), A vertex at (7, 0, -1, -2, -1, -1, -1), A vertex at (7, -1, -1, -1, -1, -1, -1), A vertex at (8, 0, -2, -1, -1, -1, -1), A vertex at (8, 0, -2, 2, -1, -4, -1), A vertex at (7, -1, 2, 0, -4, -1, -1), A vertex at (7, -1, 1, -1, -3, -1, -1), A vertex at (7, 0, 0, -2, -2, -1, -1), A vertex at (7, -1, 1, 0, -3, -2, -1), A vertex at (8, 0, 1, 0, -4, -1, -1), A vertex at (7, 0, 0, 0, -2, -3, -1), A vertex at (8, 0, 0, 0, -3, -2, -1), A vertex at (8, 0, 0, -1, -3, -1, -1), A vertex at (7, 0, 0, 0, 0, -3, -3), A vertex at (7, -1, 1, 0, 0, -2, -4), A vertex at (7, -1, -1, -1, 4, 0, -6), A vertex at (7, -1, 1, -1, 1, -1, -5), A vertex at (7, 0, 0, -2, 2, -1, -5), A vertex at (7, -1, -1, 2, 0, -4, -2), A vertex at (7, -1, 1, -1, 2, 0, -6), A vertex at (8, 0, 0, 0, 0, -2, -4), A vertex at (8, 0, 0, -1, 2, 0, -6), A vertex at (7, -1, 2, 0, 0, -1, -5), A vertex at (8, 0, 0, -1, 1, -1, -5), A vertex at (7, -1, 2, 0, 1, 0, -6), A vertex at (8, 0, -2, -1, 3, -1, -5), A vertex at (7, 0, -1, 1, 0, -4, -2), A vertex at (8, 0, -2, 2, 0, -4, -2), A vertex at (8, 0, 1, 0, 1, 0, -6), A vertex at (8, 0, 1, 0, 0, -1, -5), A vertex at (7, 0, -1, -2, 3, -1, -5), A vertex at (7, 0, 0, -2, 3, 0, -6), A vertex at (7, -1, -1, -1, 3, -1, -5), A vertex at (7, 0, -1, -2, 4, 0, -6), A vertex at (8, 0, -2, -1, 4, 0, -6)) (A ray in the direction (0, 1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2] 6 (A vertex at (7, 0, -1, 1, -1, -5, 1), A vertex at (7, -1, -1, 2, -1, -5, 1), A vertex at (7, 0, -1, -2, -1, -2, 1), A vertex at (7, -1, -1, -1, -1, -2, 1), A vertex at (8, 0, -2, -1, -1, -2, 1), A vertex at (8, 0, -2, 2, -1, -5, 1), A vertex at (7, -1, 2, 0, -4, -2, 1), A vertex at (7, -1, 1, -1, -3, -2, 1), A vertex at (7, 0, 0, -2, -2, -2, 1), A vertex at (7, -1, 1, 0, -3, -3, 1), A vertex at (8, 0, 1, 0, -4, -2, 1), A vertex at (7, 0, 0, 0, -2, -4, 1), A vertex at (8, 0, 0, 0, -3, -3, 1), A vertex at (8, 0, 0, -1, -3, -2, 1), A vertex at (7, 0, 0, 0, 0, -4, -1), A vertex at (7, -1, 1, 0, 0, -3, -2), A vertex at (7, -1, -1, -1, 5, 0, -5), A vertex at (7, -1, 1, -1, 1, -2, -3), A vertex at (7, 0, 0, -2, 2, -2, -3), A vertex at (7, -1, -1, 2, 0, -5, 0), A vertex at (7, -1, 1, -1, 3, 0, -5), A vertex at (8, 0, 0, 0, 0, -3, -2), A vertex at (8, 0, 0, -1, 3, 0, -5), A vertex at (7, -1, 2, 0, 0, -2, -3), A vertex at (8, 0, 0, -1, 1, -2, -3), A vertex at (7, -1, 2, 0, 2, 0, -5), A vertex at (8, 0, -2, -1, 3, -2, -3), A vertex at (7, 0, -1, 1, 0, -5, 0), A vertex at (8, 0, -2, 2, 0, -5, 0), A vertex at (8, 0, 1, 0, 2, 0, -5), A vertex at (8, 0, 1, 0, 0, -2, -3), A vertex at (7, 0, -1, -2, 3, -2, -3), A vertex at (7, 0, 0, -2, 4, 0, -5), A vertex at (7, -1, -1, -1, 3, -2, -3), A vertex at (7, 0, -1, -2, 5, 0, -5), A vertex at (8, 0, -2, -1, 5, 0, -5)) (A ray in the direction (0, 1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1] 6 (A vertex at (7, 0, -1, 1, -2, -4, 2), A vertex at (7, -1, -1, 2, -2, -4, 2), A vertex at (7, 0, -1, -2, -2, -1, 2), A vertex at (7, -1, -1, -1, -2, -1, 2), A vertex at (8, 0, -2, -1, -2, -1, 2), A vertex at (8, 0, -2, 2, -2, -4, 2), A vertex at (7, -1, 2, 0, -5, -1, 2), A vertex at (7, -1, 1, -1, -4, -1, 2), A vertex at (7, 0, 0, -2, -3, -1, 2), A vertex at (7, -1, 1, 0, -4, -2, 2), A vertex at (8, 0, 1, 0, -5, -1, 2), A vertex at (7, 0, 0, 0, -3, -3, 2), A vertex at (8, 0, 0, 0, -4, -2, 2), A vertex at (8, 0, 0, -1, -4, -1, 2), A vertex at (7, 0, 0, 0, 0, -3, -1), A vertex at (7, -1, 1, 0, 0, -2, -2), A vertex at (7, -1, -1, -1, 4, 0, -4), A vertex at (7, -1, 1, -1, 1, -1, -3), A vertex at (7, 0, 0, -2, 2, -1, -3), A vertex at (7, -1, -1, 2, 0, -4, 0), A vertex at (7, -1, 1, -1, 2, 0, -4), A vertex at (8, 0, 0, 0, 0, -2, -2), A vertex at (8, 0, 0, -1, 2, 0, -4), A vertex at (7, -1, 2, 0, 0, -1, -3), A vertex at (8, 0, 0, -1, 1, -1, -3), A vertex at (7, -1, 2, 0, 1, 0, -4), A vertex at (8, 0, -2, -1, 3, -1, -3), A vertex at (7, 0, -1, 1, 0, -4, 0), A vertex at (8, 0, -2, 2, 0, -4, 0), A vertex at (8, 0, 1, 0, 1, 0, -4), A vertex at (8, 0, 1, 0, 0, -1, -3), A vertex at (7, 0, -1, -2, 3, -1, -3), A vertex at (7, 0, 0, -2, 3, 0, -4), A vertex at (7, -1, -1, -1, 3, -1, -3), A vertex at (7, 0, -1, -2, 4, 0, -4), A vertex at (8, 0, -2, -1, 4, 0, -4)) (A ray in the direction (0, 1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 2] 6 (A vertex at (7, 0, -1, 1, -3, -1, -1), A vertex at (7, -1, -1, 2, -3, -1, -1), A vertex at (7, -1, -1, -1, -3, 2, -1), A vertex at (7, 0, -1, -2, -3, 2, -1), A vertex at (8, 0, 1, 0, -6, 2, -1), A vertex at (8, 0, -2, 2, -3, -1, -1), A vertex at (8, 0, -2, -1, -3, 2, -1), A vertex at (8, 0, 0, -1, -5, 2, -1), A vertex at (7, 0, 0, -2, -4, 2, -1), A vertex at (7, 0, 0, 0, -4, 0, -1), A vertex at (7, -1, 1, 0, -5, 1, -1), A vertex at (7, -1, 2, 0, -6, 2, -1), A vertex at (7, -1, 1, -1, -5, 2, -1), A vertex at (8, 0, 0, 0, -5, 1, -1), A vertex at (7, -1, -1, 2, 0, -1, -4), A vertex at (8, 0, -2, 2, 0, -1, -4), A vertex at (7, -1, 1, -1, -1, 2, -5), A vertex at (7, 0, 0, -2, 0, 2, -5), A vertex at (7, 0, -1, 0, 1, 0, -5), A vertex at (7, 0, 0, 0, 0, 0, -5), A vertex at (7, -1, -1, 1, 1, 0, -5), A vertex at (7, 0, -1, -2, 1, 2, -5), A vertex at (7, -1, -1, -1, 1, 2, -5), A vertex at (8, 0, 0, -1, -1, 2, -5), A vertex at (8, 0, -2, -1, 1, 2, -5), A vertex at (7, -1, 0, 1, 0, 0, -5), A vertex at (7, -1, 2, 0, -2, 2, -5), A vertex at (7, -1, 1, 0, -1, 1, -5), A vertex at (8, 0, -1, 1, 0, 0, -5), A vertex at (7, 0, -1, 1, 0, -1, -4), A vertex at (8, 0, 0, 0, -1, 1, -5), A vertex at (8, 0, 1, 0, -2, 2, -5), A vertex at (8, 0, -2, 1, 1, 0, -5)) (A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 1, 0, 0, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] 6 (A vertex at (7, -1, -1, 2, -3, -2, 1), A vertex at (7, 0, -1, 1, -3, -2, 1), A vertex at (7, 0, -1, -2, -3, 1, 1), A vertex at (7, -1, -1, -1, -3, 1, 1), A vertex at (7, -1, 2, 0, -6, 1, 1), A vertex at (8, 0, -2, -1, -3, 1, 1), A vertex at (8, 0, -2, 2, -3, -2, 1), A vertex at (7, -1, 1, 0, -5, 0, 1), A vertex at (7, 0, 0, 0, -4, -1, 1), A vertex at (7, -1, 1, -1, -5, 1, 1), A vertex at (8, 0, 0, 0, -5, 0, 1), A vertex at (7, 0, 0, -2, -4, 1, 1), A vertex at (8, 0, 1, 0, -6, 1, 1), A vertex at (8, 0, 0, -1, -5, 1, 1), A vertex at (7, -1, -1, 2, 0, -2, -2), A vertex at (8, 0, -2, -1, 2, 1, -4), A vertex at (7, 0, 0, -2, 1, 1, -4), A vertex at (8, 0, -2, 2, 0, -2, -2), A vertex at (7, 0, 0, -1, 1, 0, -4), A vertex at (7, -1, -1, 0, 2, 0, -4), A vertex at (7, -1, 1, -1, 0, 1, -4), A vertex at (7, 0, 0, 0, 0, -1, -3), A vertex at (7, -1, 1, 0, 0, 0, -4), A vertex at (7, -1, -1, -1, 2, 1, -4), A vertex at (7, 0, -1, -2, 2, 1, -4), A vertex at (7, 0, -1, -1, 2, 0, -4), A vertex at (8, 0, 0, 0, 0, 0, -4), A vertex at (7, 0, -1, 1, 0, -2, -2), A vertex at (8, 0, 1, 0, -1, 1, -4), A vertex at (8, 0, -2, 0, 2, 0, -4), A vertex at (8, 0, 0, -1, 0, 1, -4), A vertex at (7, -1, 2, 0, -1, 1, -4)) (A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, 0, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1] 6 (A vertex at (7, 0, -1, 1, -1, -5, 3), A vertex at (7, -1, -1, 2, -1, -5, 3), A vertex at (7, 0, -1, -3, -1, -1, 3), A vertex at (7, -1, -1, -2, -1, -1, 3), A vertex at (8, 0, -2, -2, -1, -1, 3), A vertex at (8, 0, -2, 2, -1, -5, 3), A vertex at (7, -1, 3, 0, -5, -1, 3), A vertex at (7, -1, 1, -2, -3, -1, 3), A vertex at (7, 0, 0, -3, -2, -1, 3), A vertex at (7, -1, 1, 0, -3, -3, 3), A vertex at (8, 0, 2, 0, -5, -1, 3), A vertex at (7, 0, 0, 0, -2, -4, 3), A vertex at (8, 0, 0, 0, -3, -3, 3), A vertex at (8, 0, 0, -2, -3, -1, 3), A vertex at (7, 0, 0, 0, 0, -4, 1), A vertex at (7, -1, 1, 0, 0, -3, 0), A vertex at (7, -1, -1, -2, 5, 0, -3), A vertex at (7, -1, 1, -2, 2, -1, -2), A vertex at (7, 0, 0, -3, 3, -1, -2), A vertex at (7, -1, -1, 2, 0, -5, 2), A vertex at (7, -1, 1, -2, 3, 0, -3), A vertex at (8, 0, 0, 0, 0, -3, 0), A vertex at (8, 0, 0, -2, 3, 0, -3), A vertex at (7, -1, 3, 0, 0, -1, -2), A vertex at (8, 0, 0, -2, 2, -1, -2), A vertex at (7, -1, 3, 0, 1, 0, -3), A vertex at (8, 0, -2, -2, 4, -1, -2), A vertex at (7, 0, -1, 1, 0, -5, 2), A vertex at (8, 0, -2, 2, 0, -5, 2), A vertex at (8, 0, 2, 0, 1, 0, -3), A vertex at (8, 0, 2, 0, 0, -1, -2), A vertex at (7, 0, -1, -3, 4, -1, -2), A vertex at (7, 0, 0, -3, 4, 0, -3), A vertex at (7, -1, -1, -2, 4, -1, -2), A vertex at (7, 0, -1, -3, 5, 0, -3), A vertex at (8, 0, -2, -2, 5, 0, -3)) (A ray in the direction (0, 1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] 6 (A vertex at (7, 0, -1, 1, -2, -3, 2), A vertex at (7, -1, -1, 2, -2, -3, 2), A vertex at (7, -1, -1, -2, -2, 1, 2), A vertex at (7, 0, -1, -3, -2, 1, 2), A vertex at (8, 0, -2, 2, -2, -3, 2), A vertex at (8, 0, -2, -2, -2, 1, 2), A vertex at (7, -1, 3, 0, -6, 1, 2), A vertex at (7, -1, 1, 0, -4, -1, 2), A vertex at (8, 0, 0, 0, -4, -1, 2), A vertex at (7, 0, 0, 0, -3, -2, 2), A vertex at (8, 0, 0, -2, -4, 1, 2), A vertex at (8, 0, 2, 0, -6, 1, 2), A vertex at (7, -1, 1, -2, -4, 1, 2), A vertex at (7, 0, 0, -3, -3, 1, 2), A vertex at (8, 0, -2, -1, 3, 0, -3), A vertex at (8, 0, -2, 2, 0, -3, 0), A vertex at (7, -1, 1, 0, 0, -1, -2), A vertex at (7, 0, -1, -3, 3, 1, -3), A vertex at (7, 0, 0, 0, 0, -2, -1), A vertex at (7, -1, -1, -1, 3, 0, -3), A vertex at (7, -1, 1, -2, 1, 1, -3), A vertex at (7, 0, 0, -3, 2, 1, -3), A vertex at (7, -1, 2, 0, 0, 0, -3), A vertex at (7, 0, -1, -2, 3, 0, -3), A vertex at (7, -1, 3, 0, -1, 1, -3), A vertex at (7, -1, -1, 2, 0, -3, 0), A vertex at (7, 0, 0, -2, 2, 0, -3), A vertex at (8, 0, 2, 0, -1, 1, -3), A vertex at (7, 0, -1, 1, 0, -3, 0), A vertex at (8, 0, 0, -1, 1, 0, -3), A vertex at (7, -1, 1, -1, 1, 0, -3), A vertex at (8, 0, 1, 0, 0, 0, -3), A vertex at (8, 0, 0, 0, 0, -1, -2), A vertex at (8, 0, -2, -2, 3, 1, -3), A vertex at (7, -1, -1, -2, 3, 1, -3), A vertex at (8, 0, 0, -2, 1, 1, -3)) (A ray in the direction (0, 1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 3] 6 (A vertex at (7, 0, -1, -4, -1, 3, -1), A vertex at (7, -1, -1, -3, -1, 3, -1), A vertex at (7, 0, -1, 1, -1, -2, -1), A vertex at (7, -1, -1, 2, -1, -2, -1), A vertex at (8, 0, -2, -3, -1, 3, -1), A vertex at (8, 0, -2, 2, -1, -2, -1), A vertex at (7, 0, 0, -4, -2, 3, -1), A vertex at (7, -1, 1, -3, -3, 3, -1), A vertex at (8, 0, 0, -3, -3, 3, -1), A vertex at (8, 0, 3, 0, -6, 3, -1), A vertex at (7, -1, 1, 0, -3, 0, -1), A vertex at (7, 0, 0, 0, -2, -1, -1), A vertex at (7, -1, 4, 0, -6, 3, -1), A vertex at (8, 0, 0, 0, -3, 0, -1), A vertex at (8, 0, -2, 0, 2, 0, -4), A vertex at (7, -1, -1, 2, 0, -2, -2), A vertex at (7, 0, -1, -4, 2, 3, -4), A vertex at (8, 0, -2, -3, 2, 3, -4), A vertex at (7, -1, 4, 0, -3, 3, -4), A vertex at (7, 0, 0, -4, 1, 3, -4), A vertex at (7, -1, 1, -3, 0, 3, -4), A vertex at (7, -1, 1, 0, 0, 0, -4), A vertex at (7, 0, 0, 0, 0, -1, -3), A vertex at (7, 0, 0, -1, 1, 0, -4), A vertex at (8, 0, 0, 0, 0, 0, -4), A vertex at (7, 0, -1, -1, 2, 0, -4), A vertex at (7, -1, -1, 0, 2, 0, -4), A vertex at (7, -1, -1, -3, 2, 3, -4), A vertex at (8, 0, 3, 0, -3, 3, -4), A vertex at (8, 0, 0, -3, 0, 3, -4), A vertex at (7, 0, -1, 1, 0, -2, -2), A vertex at (8, 0, -2, 2, 0, -2, -2)) (A ray in the direction (0, 1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1] 6 (A vertex at (7, 0, -1, 1, -1, -3, 1), A vertex at (7, -1, -1, 2, -1, -3, 1), A vertex at (7, -1, -1, -3, -1, 2, 1), A vertex at (7, 0, -1, -4, -1, 2, 1), A vertex at (8, 0, -2, -3, -1, 2, 1), A vertex at (8, 0, -2, 2, -1, -3, 1), A vertex at (7, -1, 1, -3, -3, 2, 1), A vertex at (7, 0, 0, -4, -2, 2, 1), A vertex at (8, 0, 0, 0, -3, -1, 1), A vertex at (8, 0, 0, -3, -3, 2, 1), A vertex at (7, 0, 0, 0, -2, -2, 1), A vertex at (8, 0, 3, 0, -6, 2, 1), A vertex at (7, -1, 1, 0, -3, -1, 1), A vertex at (7, -1, 4, 0, -6, 2, 1), A vertex at (7, -1, -1, -3, 3, 2, -3), A vertex at (8, 0, -2, -3, 3, 2, -3), A vertex at (7, 0, -1, -2, 3, 0, -3), A vertex at (7, 0, 0, -2, 2, 0, -3), A vertex at (7, -1, 1, -1, 1, 0, -3), A vertex at (8, 0, 3, 0, -2, 2, -3), A vertex at (7, 0, -1, 1, 0, -3, 0), A vertex at (7, -1, 1, -3, 1, 2, -3), A vertex at (7, 0, 0, -4, 2, 2, -3), A vertex at (7, 0, 0, 0, 0, -2, -1), A vertex at (7, -1, 1, 0, 0, -1, -2), A vertex at (8, 0, 0, 0, 0, -1, -2), A vertex at (7, -1, -1, 2, 0, -3, 0), A vertex at (8, 0, 1, 0, 0, 0, -3), A vertex at (8, 0, 0, -3, 1, 2, -3), A vertex at (7, -1, -1, -1, 3, 0, -3), A vertex at (8, 0, -2, 2, 0, -3, 0), A vertex at (8, 0, -2, -1, 3, 0, -3), A vertex at (7, -1, 4, 0, -2, 2, -3), A vertex at (7, 0, -1, -4, 3, 2, -3), A vertex at (7, -1, 2, 0, 0, 0, -3), A vertex at (8, 0, 0, -1, 1, 0, -3)) (A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0), A ray in the direction (0, 1, 0, 0, 0, 0, 0)) 

[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3, 2] 6 (A vertex at (7, 0, -1, -2, 3, -4, -1), A vertex at (7, -1, -1, -1, 3, -4, -1), A vertex at (7, 0, -1, -5, 3, -1, -1), A vertex at (7, -1, -1, -4, 3, -1, -1), A vertex at (8, 0, -2, -4, 3, -1, -1), A vertex at (8, 0, -2, -1, 3, -4, -1), A vertex at (7, -1, 5, 0, -3, -1, -1), A vertex at (7, -1, 1, -4, 1, -1, -1), A vertex at (7, -1, 2, 0, 0, -4, -1), A vertex at (8, 0, 4, 0, -3, -1, -1), A vertex at (7, 0, 0, -5, 2, -1, -1), A vertex at (7, -1, 1, -1, 1, -4, -1), A vertex at (8, 0, 1, 0, 0, -4, -1), A vertex at (8, 0, 0, -1, 1, -4, -1), A vertex at (8, 0, 0, -4, 1, -1, -1), A vertex at (7, 0, 0, -2, 2, -4, -1), A vertex at (7, -1, -1, -4, 6, -1, -4), A vertex at (8, 0, -2, -4, 6, -1, -4), A vertex at (7, 0, 0, -5, 6, 0, -5), A vertex at (7, 0, 0, -5, 5, -1, -4), A vertex at (8, 0, 0, -4, 5, 0, -5), A vertex at (7, -1, 1, -4, 4, -1, -4), A vertex at (7, 0, -1, -5, 6, -1, -4), A vertex at (7, 0, -1, -5, 7, 0, -5), A vertex at (7, -1, 1, -4, 5, 0, -5), A vertex at (7, -1, -1, -4, 7, 0, -5), A vertex at (8, 0, 0, -4, 4, -1, -4), A vertex at (8, 0, 4, 0, 0, -1, -4), A vertex at (8, 0, 4, 0, 1, 0, -5), A vertex at (8, 0, -2, -4, 7, 0, -5), A vertex at (7, -1, 5, 0, 1, 0, -5), A vertex at (7, -1, 5, 0, 0, -1, -4)) (A ray in the direction (0, 1, 0, 0, 0, 0, 0), A ray in the direction (0, 0, 0, 0, 0, 1, 0), A ray in the direction (0, 0, 0, 1, 0, 0, 0)) 

^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [455], line 4
      2 c=[Integer(0),Integer(1),Integer(2),Integer(3),Integer(4),Integer(5),Integer(6)]
      3 for v in sortables(A,c[Integer(1):]):
----> 4     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(len(c))))
      5     print(v,P.dimension(),P.vertices(),P.rays(),"\n")

File ~/git/affine_dominance/software/domination4.py:127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_faster(B, la, seqs[0])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_faster(B, la, s))
    128     if P.dimension()==0:
    129         break

File ~/git/affine_dominance/software/domination4.py:147, in p_lambda_faster(B, la, seq)
    145 Em = E(B, k, -1)
    146 Hp = Polyhedron(ieqs=[(0,)*(k+1)+(1,)+(0,)*(m-k-1)])
--> 147 Hm = Polyhedron(ieqs=[(0,)*(k+1)+(-1,)+(0,)*(m-k-1)])
    148 #print("Hp:   ",Hp,Hp.vertices(),Hp.rays(),Hp.lines(),"\n")
    149 #print("Hm:   ",Hm,Hm.vertices(),Hm.rays(),Hm.lines(),"\n\n")
    150 Pp = P.intersection(Hp)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/constructor.py:768, in Polyhedron(vertices, rays, lines, ieqs, eqns, ambient_dim, base_ring, minimize, verbose, backend, mutable)
    766 if got_Vrep:
    767     Vrep = [vertices, rays, lines]
--> 768 return parent(Vrep, Hrep, convert=convert, verbose=verbose, mutable=mutable)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/parent.pyx:903, in sage.structure.parent.Parent.__call__ (build/cythonized/sage/structure/parent.c:12685)()
    901         return mor._call_(x)
    902     else:
--> 903         return mor._call_with_args(x, args, kwds)
    904 
    905 raise TypeError(_LazyString("No conversion defined from %s to %s", (R, self), {}))

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:177, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_with_args (build/cythonized/sage/structure/coerce_maps.c:7430)()
    175             return C._element_constructor(x, *args)
    176         else:
--> 177             return C._element_constructor(x, *args, **kwds)
    178 except Exception:
    179     if print_warnings:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:695, in Polyhedra_base._element_constructor_(self, *args, **kwds)
    693     if convert and Vrep:
    694         Vrep = [convert_base_ring(_) for _ in Vrep]
--> 695     return self.element_class(self, Vrep, Hrep, **kwds)
    696 if nargs == 1 and is_Polyhedron(args[0]):
    697     copy = kwds.pop('copy', args[0].parent() is not self)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:70, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
---> 70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:189, in Polyhedron_ppl.set_immutable(self)
    187 if not hasattr(self, '_Vrepresentation'):
    188     try:
--> 189         self._init_Vrepresentation_from_ppl(True)
    190     except TypeError as e:
    191         # Apparently the polyhedron is (no longer) integral.
    192         self._clear_cache()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:311, in Polyhedron_ppl._init_Vrepresentation_from_ppl(self, minimize)
    309         parent._make_Vertex(self, [x/d for x in coefficients])
    310 elif g.is_ray():
--> 311     parent._make_Ray(self, coefficients)
    312 elif g.is_line():
    313     parent._make_Line(self, coefficients)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:1150, in Polyhedra_base._make_Ray(self, polyhedron, data)
   1148 except IndexError:
   1149     obj = Ray(self)
-> 1150 obj._set_data(polyhedron, data)
   1151 return obj

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/representation.py:1179, in Vrepresentation._set_data(self, polyhedron, data)
   1177 polyhedron._Vrepresentation.append(self)
   1178 self._polyhedron = polyhedron
-> 1179 if polyhedron.is_mutable():
   1180     polyhedron._add_dependent_object(self)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base_mutable.py:137, in Polyhedron_mutable.is_mutable(self)
    134         raise ValueError
    135     self._dependent_objects.append(ob)
--> 137 def is_mutable(self):
    138     r"""
    139     Return True if the polyhedron is mutable, i.e. it can be modified in place.
    140 
   (...)
    148         False
    149     """
    150     return self._is_mutable

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: p_lambda_int(B(A,c),lam(A,[]),[[0,1,2]])
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 4 vertices and 7 rays
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: p_lambda_int(B(A,c),lam(A,[]),[[0,1,2]])
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 4 vertices and 7 rays
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: p_lambda_int(B(A,c),lam(A,[]),[[0,1,2]])p_lambda_int(B(A,c),lam(A,[]),[[0,
....: 1,2]])
  Cell In [458], line 3
    p_lambda_int(B(A,c),lam(A,[]),[[Integer(0),Integer(1),Integer(2)]])p_lambda_int(B(A,c),lam(A,[]),[[Integer(0),Integer(1),Integer(2)]])
                                                                       ^
SyntaxError: invalid syntax

sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: p_lambda_int(B(A,c),lam(A,[]),[[0,1,2]])
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 4 vertices and 7 rays
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: p_lambda_int(B(A,c)[:,1:],lam(A,[]),[[0,1,2]])
....: p_lambda_int(B(A,c),lam(A,[]),[[0,1,2]])
A 5-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 4 vertices and 7 rays
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: p_lambda_int(B(A,c)[:,1:],lam(A,[]),[[1,2]])
....: p_lambda_int(B(A,c),lam(A,[]),[[0,1,2]])
A 5-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 4 vertices and 7 rays
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: p_lambda_int(B(A,c)[:,1:],lam(A,[]),[[]])
....: p_lambda_int(B(A,c),lam(A,[]),[[0]])
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex and 6 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex and 6 rays
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: p_lambda_int(B(A,c)[:,1:],lam(A,[]),[[]]).rays()
....: p_lambda_int(B(A,c),lam(A,[]),[[0]]).rays()
(A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (1, 0, -1, 0, 0, 0, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0))
(A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (1, 0, -1, 0, 0, 0, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0))
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: p_lambda_int(B(A,c)[:,1:],lam(A,[]),[[]]).rays()=p_lambda_int(B(A,c),lam(A
....: ,[]),[[0]]).rays()
  Cell In [464], line 3
    p_lambda_int(B(A,c)[:,Integer(1):],lam(A,[]),[[]]).rays()=p_lambda_int(B(A,c),lam(A,[]),[[Integer(0)]]).rays()
    ^
SyntaxError: cannot assign to function call here. Maybe you meant '==' instead of '='?

sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: p_lambda_int(B(A,c)[:,1:],lam(A,[]),[[]]).rays()==p_lambda_int(B(A,c),lam(
....: A,[]),[[0]]).rays()
True
sage: B(A,c)[:,1:]
[ 1  0  0  0  0  0]
[ 0  1  0  0  0  0]
[-1  0  1  0  0  0]
[ 0 -1  0  1  0  0]
[ 0  0 -1  0  1  0]
[ 0  0  0 -1  0  1]
[ 0  0  0  0 -1  0]
sage: B(A,c)
[ 0  1  0  0  0  0  0]
[-1  0  1  0  0  0  0]
[ 0 -1  0  1  0  0  0]
[ 0  0 -1  0  1  0  0]
[ 0  0  0 -1  0  1  0]
[ 0  0  0  0 -1  0  1]
[ 0  0  0  0  0 -1  0]
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: p_lambda_int(B(A,c)[:,1:],lam(A,[]),[[]]).rays()
....: p_lambda_int(B(A,c),lam(A,[]),[[]]).rays()
(A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (1, 0, -1, 0, 0, 0, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0))
(A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (1, 0, -1, 0, 0, 0, 0))
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: p_lambda_int(B(A,c)[:,1:],lam(A,[]),[[]])
....: p_lambda_int(B(A,c),lam(A,[]),[[]])
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex and 6 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex, 3 rays, 3 lines
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: p_lambda_int(B(A,c)[:,1:],lam(A,[]),[[]]).rays()
....: p_lambda_int(B(A,c),lam(A,[]),[[]]),rays()
(A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (1, 0, -1, 0, 0, 0, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0))
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
Cell In [470], line 4
      2 c=[Integer(0),Integer(1),Integer(2),Integer(3),Integer(4),Integer(5),Integer(6)]
      3 p_lambda_int(B(A,c)[:,Integer(1):],lam(A,[]),[[]]).rays()
----> 4 p_lambda_int(B(A,c),lam(A,[]),[[]]),rays()

NameError: name 'rays' is not defined
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: p_lambda_int(B(A,c)[:,1:],lam(A,[]),[[]]).rays()
....: p_lambda_int(B(A,c),lam(A,[]),[[]]).rays()
(A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (1, 0, -1, 0, 0, 0, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0))
(A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (1, 0, -1, 0, 0, 0, 0))
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: p_lambda_int(B(A,c)[:,1:],lam(A,[]),[[]]).rays()
....: p_lambda_int(B(A,c),lam(A,[]),[[]]).lines()
(A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (1, 0, -1, 0, 0, 0, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0))
(A line in the direction (0, 0, 0, 0, 0, 1, 0),
 A line in the direction (0, 0, 0, 1, 0, 0, 0),
 A line in the direction (0, 1, 0, 0, 0, 0, 0))
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: p_lambda_int(B(A,c)[:,1:],lam(A,[]),[[]])
....: p_lambda_int(B(A,c),lam(A,[]),[[]]).intersection(p_lambda_int(B(A,c),lam(A
....: ,[]),[[0]]))
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex and 6 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex and 6 rays
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: p_lambda_int(B(A,c)[:,1:],lam(A,[]),[[]])==p_lambda_int(B(A,c),lam(A,[]),[
....: []]).intersection(p_lambda_int(B(A,c),lam(A,[]),[[0]]))
True
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: p_lambda_int(B(A,c)[:,1:],lam(A,[]),[[1]])
....: p_lambda_int(B(A,c),lam(A,[]),[[1]]).intersection(p_lambda_int(B(A,c),lam(
....: A,[]),[[0,1]]))
A 5-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 6 rays
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: p_lambda_int(B(A,c)[:,1:],lam(A,[]),[[1]])
....: p_lambda_int(B(A,c),lam(A,[]),[[]]).intersection(p_lambda_int(B(A,c),lam(A
....: ,[]),[[0,1]]))
A 5-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex and 5 rays
A 5-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex and 5 rays
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: p_lambda_int(B(A,c)[:,1:],lam(A,[]),[[1]])==p_lambda_int(B(A,c),lam(A,[]),
....: [[]]).intersection(p_lambda_int(B(A,c),lam(A,[]),[[0,1]]))
False
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: p_lambda_int(B(A,c)[:,1:],lam(A,[]),[[1]]).rays()
....: p_lambda_int(B(A,c),lam(A,[]),[[]]).intersection(p_lambda_int(B(A,c),lam(A
....: ,[]),[[0,1]])).rays()
(A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (1, 0, -1, 0, 0, 0, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0))
(A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: p_lambda_int(B(A,c)[:,1:],lam(A,[]),[[1]]).rays()
....: p_lambda_int(B(A,c),lam(A,[]),[[],[0,1]]).rays()
(A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (1, 0, -1, 0, 0, 0, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0))
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: p_lambda_int(B(A,c),lam(A,[]),[[],[0,1]]).rays()
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))
sage: B(A,c)
[ 0  1  0  0  0  0  0]
[-1  0  1  0  0  0  0]
[ 0 -1  0  1  0  0  0]
[ 0  0 -1  0  1  0  0]
[ 0  0  0 -1  0  1  0]
[ 0  0  0  0 -1  0  1]
[ 0  0  0  0  0 -1  0]
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: for v in sortables(A,c[1;]):
....:     p_lambda_int(B(A,c),lam(A,v),[[],[0,1]])
  Cell In [482], line 3
    for v in sortables(A,c[Integer(1);]):
                                     ^
SyntaxError: invalid syntax

sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: for v in sortables(A,c[1:]):
....:     p_lambda_int(B(A,c),lam(A,v),[[],[0,1]])
....: 
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [483], line 4
      2 c=[Integer(0),Integer(1),Integer(2),Integer(3),Integer(4),Integer(5),Integer(6)]
      3 for v in sortables(A,c[Integer(1):]):
----> 4     p_lambda_int(B(A,c),lam(A,v),[[],[Integer(0),Integer(1)]])

File ~/git/affine_dominance/software/domination4.py:127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_faster(B, la, seqs[0])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_faster(B, la, s))
    128     if P.dimension()==0:
    129         break

File ~/git/affine_dominance/software/domination4.py:146, in p_lambda_faster(B, la, seq)
    144 Ep = E(B, k, 1)
    145 Em = E(B, k, -1)
--> 146 Hp = Polyhedron(ieqs=[(0,)*(k+1)+(1,)+(0,)*(m-k-1)])
    147 Hm = Polyhedron(ieqs=[(0,)*(k+1)+(-1,)+(0,)*(m-k-1)])
    148 #print("Hp:   ",Hp,Hp.vertices(),Hp.rays(),Hp.lines(),"\n")
    149 #print("Hm:   ",Hm,Hm.vertices(),Hm.rays(),Hm.lines(),"\n\n")

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/constructor.py:768, in Polyhedron(vertices, rays, lines, ieqs, eqns, ambient_dim, base_ring, minimize, verbose, backend, mutable)
    766 if got_Vrep:
    767     Vrep = [vertices, rays, lines]
--> 768 return parent(Vrep, Hrep, convert=convert, verbose=verbose, mutable=mutable)

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: for v in sortables(A,c[1:]):
....:     p_lambda_int(B(A,c),lam(A,v),[[],[0,1]])
....:     input()
....: 
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [484], line 5
      3 for v in sortables(A,c[Integer(1):]):
      4     p_lambda_int(B(A,c),lam(A,v),[[],[Integer(0),Integer(1)]])
----> 5     input()

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: for v in sortables(A,c):
....:     p_lambda_int(B(A,c),lam(A,v),[[],[0,1]])
....:     input()
....: 
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays
;
';'
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [485], line 5
      3 for v in sortables(A,c):
      4     p_lambda_int(B(A,c),lam(A,v),[[],[Integer(0),Integer(1)]])
----> 5     input()

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['A',3])
....: c=[0,1,2]
....: for v in sortables(A,c):
....:     p_lambda_int(B(A,c),lam(A,v),[[],[0,1]])
....:     input()
....: 
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 1 ray

''
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 1 ray

''
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 1 ray

''
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray

''
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray

''
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 1 ray

''
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray

''
A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray

''
A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray

''
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray

''
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray

''
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray

''
A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray

''
A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray

''
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: for v in sortables(A,c):
....:     p_lambda_int(B(A,c),lam(A,v),[[],[0,1]])
....:     input()
....: 
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays

''
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 3 vertices and 5 rays
^[[A^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [487], line 5
      3 for v in sortables(A,c):
      4     p_lambda_int(B(A,c),lam(A,v),[[],[Integer(0),Integer(1)]])
----> 5     input()

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: for v in sortables(A,c):
....:     p_lambda_int(B(A,c),lam(A,v),[[],[0,1]]).rays()
....:     input()
....: 
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))
 
' '
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))

''

(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))
''
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [488], line 5
      3 for v in sortables(A,c):
      4     p_lambda_int(B(A,c),lam(A,v),[[],[Integer(0),Integer(1)]]).rays()
----> 5     input()

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['A',5])
....: c=[0,1,2,3,4]
....: for v in sortables(A,c):
....:     p_lambda_int(B(A,c),lam(A,v),[[],[0,1]]).rays()
....:     input()
....: 
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0))

''
(A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0))

''
(A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0))

''
(A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0))

''
(A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0))

''
(A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0))

''
(A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0))

''
(A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0))

''
(A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0))

''
(A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0))

''
(A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0))

''
(A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0))

''
(A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0))

''
(A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0))

''
(A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0))

''
(A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0))

''
(A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0))

''
(A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0))

''
(A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0))

''
(A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0))

''
(A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0))

''
(A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 1, 0, -1))

''
(A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 1, 0, -1))

''
(A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 1, 0, -1))

''
(A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 1, 0, -1))

''
(A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 1, 0, -1))

''
(A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 1, 0, -1))

''
(A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 1, 0, -1))

''
(A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 1, 0, -1))

''
(A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 1, 0, -1))

''
(A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 1, 0, -1))

''
(A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 1, 0, -1))

''
(A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 1, 0, -1))

''
(A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 1, 0, -1))

''
(A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 1, 0, -1))
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [489], line 5
      3 for v in sortables(A,c):
      4     p_lambda_int(B(A,c),lam(A,v),[[],[Integer(0),Integer(1)]]).rays()
----> 5     input()

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['A',5])
....: c=[0,1,2,3,4]
....: for v in sortables(A,c):
....:     p_lambda_int(B(A,c),lam(A,v),[[],[0,1,2]]).rays()
....:     input()
....: 
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, 1, 0, 0, 0))
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [490], line 5
      3 for v in sortables(A,c):
      4     p_lambda_int(B(A,c),lam(A,v),[[],[Integer(0),Integer(1),Integer(2)]]).rays()
----> 5     input()

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['A',5])
....: c=[0,1,2,3,4]
....: for v in sortables(A,c):
....:     p_lambda_int(B(A,c),lam(A,v),[[],[0,1,2,4]]).rays()
....:     input()
....: 
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 1, 0, 0, 0),
 A ray in the direction (0, 0, 1, 0, -1))

''
(A ray in the direction (0, 1, 0, 0, 0),
 A ray in the direction (0, 0, 1, 0, -1))

''
(A ray in the direction (0, 1, 0, 0, 0),
 A ray in the direction (0, 0, 1, 0, -1))

''
(A ray in the direction (0, 1, 0, 0, 0),
 A ray in the direction (0, 0, 1, 0, -1))

''
(A ray in the direction (0, 1, 0, 0, 0),
 A ray in the direction (0, 0, 1, 0, -1))

''
(A ray in the direction (0, 1, 0, 0, 0),
 A ray in the direction (0, 0, 1, 0, -1))

''
(A ray in the direction (0, 1, 0, 0, 0),
 A ray in the direction (0, 0, 1, 0, -1))

''
(A ray in the direction (0, 1, 0, 0, 0),
 A ray in the direction (0, 0, 1, 0, -1))

''
(A ray in the direction (0, 1, 0, 0, 0),
 A ray in the direction (0, 0, 1, 0, -1))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 1, 0, 0, 0),
 A ray in the direction (0, 0, 1, 0, -1))

''
(A ray in the direction (0, 1, 0, 0, 0),
 A ray in the direction (0, 0, 1, 0, -1))

''
(A ray in the direction (0, 1, 0, 0, 0),
 A ray in the direction (0, 0, 1, 0, -1))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 1, 0, 0, 0),
 A ray in the direction (0, 0, 1, 0, -1))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 1, 0, 0, 0),
 A ray in the direction (0, 0, 1, 0, -1))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0))

''
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0))
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [491], line 5
      3 for v in sortables(A,c):
      4     p_lambda_int(B(A,c),lam(A,v),[[],[Integer(0),Integer(1),Integer(2),Integer(4)]]).rays()
----> 5     input()

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: p_lambda_int(B(A,c)[:,1:],lam(A,[]),[[1]]).rays()
....: p_lambda_int(B(A,c),lam(A,[]),[[],[0,1]]).rays()
(A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (1, 0, -1, 0, 0, 0, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0))
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: p_lambda_int(B(A,c)[:,1:],lam(A,[]),[[1]]).contains(p_lambda_int(B(A,c),la
....: m(A,[]),[[],[0,1]]).rays())
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
Cell In [493], line 3
      1 A=CartanMatrix(['A',Integer(7)])
      2 c=[Integer(0),Integer(1),Integer(2),Integer(3),Integer(4),Integer(5),Integer(6)]
----> 3 p_lambda_int(B(A,c)[:,Integer(1):],lam(A,[]),[[Integer(1)]]).contains(p_lambda_int(B(A,c),lam(A,[]),[[],[Integer(0),Integer(1)]]).rays())

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base1.py:660, in Polyhedron_base1.contains(self, point)
    591 """
    592 Test whether the polyhedron contains the given ``point``.
    593 
   (...)
    657     False
    658 """
    659 try:
--> 660     p = vector(point)
    661 except TypeError:  # point not iterable or no common ring for elements
    662     try:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/modules/free_module_element.pyx:587, in sage.modules.free_module_element.vector (build/cythonized/sage/modules/free_module_element.c:11176)()
    585         sparse = False
    586 
--> 587 v, R = prepare(v, R, degree)
    588 
    589 M = FreeModule(R, len(v), bool(sparse))

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/modules/free_module_element.pyx:687, in sage.modules.free_module_element.prepare (build/cythonized/sage/modules/free_module_element.c:11801)()
    685     except TypeError:
    686         pass
--> 687 v = Sequence(v, universe=R, use_sage_types=True)
    688 ring = v.universe()
    689 if not is_Ring(ring):

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/sequence.py:266, in Sequence(x, universe, check, immutable, cr, cr_str, use_sage_types)
    263     if is_MPolynomialRing(universe) or isinstance(universe, BooleanMonomialMonoid) or (is_QuotientRing(universe) and is_MPolynomialRing(universe.cover_ring())):
    264         return PolynomialSequence(x, universe, immutable=immutable, cr=cr, cr_str=cr_str)
--> 266 return Sequence_generic(x, universe, check, immutable, cr, cr_str, use_sage_types)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/sequence.py:450, in Sequence_generic.__init__(self, x, universe, check, immutable, cr, cr_str, use_sage_types)
    448 for i in range(len(x)):
    449     try:
--> 450         x[i] = universe(x[i])
    451     except TypeError:
    452         raise TypeError("unable to convert {} to an element of {}"
    453                         .format(x[i], universe))

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/representation.py:1144, in Vrepresentation.__init__(self, polyhedron_parent)
   1132 """
   1133 Initializes the PolyhedronRepresentation object.
   1134 
   (...)
   1141     sage: TestSuite(a).run(skip='_test_pickling')
   1142 """
   1143 self._polyhedron_parent = polyhedron_parent
-> 1144 self._base_ring = polyhedron_parent.base_ring()
   1145 self._vector = polyhedron_parent.Vrepresentation_space()(0)
   1146 self._index = 0

AttributeError: 'Ray' object has no attribute 'base_ring'
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: p_lambda_int(B(A,c)[:,1:],lam(A,[]),[[1]]).contains(p_lambda_int(B(A,c),la
....: m(A,[]),[[],[0,1]]))
False
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: p_lambda_int(B(A,c)[:,1:],lam(A,[]),[[1]])
....: p_lambda_int(B(A,c),lam(A,[]),[[],[0,1]])
A 5-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex and 5 rays
A 5-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex and 5 rays
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: p_lambda_int(B(A,c)[:,1:],lam(A,[]),[[1]]).rays()
....: p_lambda_int(B(A,c),lam(A,[]),[[],[0,1]]).rays()
(A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (1, 0, -1, 0, 0, 0, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0))
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: p_lambda_int(B(A,c)[:,1:],lam(A,[2]),[[1]]).rays()
....: p_lambda_int(B(A,c),lam(A,[2]),[[],[0,1]]).rays()
(A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (1, 0, -1, 0, 0, 0, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0))
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: p_lambda_int(B(A,c)[:,1:],lam(A,[2]),[[],[1]]).rays()
....: p_lambda_int(B(A,c),lam(A,[2]),[[],[0,1]]).rays()
(A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (1, 0, -1, 0, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: p_lambda_int(B(A,c)[:,1:],lam(A,[2]),[[0]]).rays()
....: p_lambda_int(B(A,c),lam(A,[2]),[[],[0,1]]).rays()
(A ray in the direction (0, 0, 0, 0, 0, 1, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 1, 0, 0, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 0, 1, 0, -1, 0, 0))
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: p_lambda_int(B(A,c)[:,1:],lam(A,[2]),[[0]]).rays()
....: p_lambda_int(B(A,c),lam(A,[2]),[[0,1]]).rays()
(A ray in the direction (0, 0, 0, 0, 0, 1, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 1, 0, 0, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 0, 1, 0, -1, 0, 0))
(A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0),
 A ray in the direction (-1, 1, 1, 0, 0, 0, 0))
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: p_lambda_int(B(A,c)[:,1:],lam(A,[2]),[[],[0]]).rays()
....: p_lambda_int(B(A,c),lam(A,[2]),[[0,1]]).rays()
(A ray in the direction (0, 0, 0, 0, 0, 1, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1))
(A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0),
 A ray in the direction (-1, 1, 1, 0, 0, 0, 0))
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: p_lambda_int(B(A,c)[:,1:],lam(A,[2]),[[],[0]]).rays()
....: p_lambda_int(B(A,c),lam(A,[2]),[[],[0],[0,1]]).rays()
(A ray in the direction (0, 0, 0, 0, 0, 1, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1))
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: p_lambda_int(B(A,c)[:,1:],lam(A,[2]),[[],[0]]).rays()==p_lambda_int(B(A,c)
....: ,lam(A,[2]),[[],[0],[0,1]]).rays()
False
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: p_lambda_int(B(A,c)[:,1:],lam(A,[2]),[[],[0]])
....: p_lambda_int(B(A,c),lam(A,[2]),[[],[0],[0,1]])
A 5-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex and 5 rays
A 5-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex and 5 rays
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: p_lambda_int(B(A,c)[:,1:],lam(A,[2]),[[],[0]]).rays()
....: p_lambda_int(B(A,c),lam(A,[2]),[[],[0],[0,1]]).rays()
(A ray in the direction (0, 0, 0, 0, 0, 1, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1))
(A ray in the direction (0, 0, 1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, -1, 0, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, 0, 0, 1, 0))
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: p_lambda_int(B(A,c)[:,1:],lam(A,[2]),[[],[0]]).vertices()
....: p_lambda_int(B(A,c),lam(A,[2]),[[],[0],[0,1]]).vertices()
(A vertex at (1, 2, -1, 2, 1, 1, 1),)
(A vertex at (1, 2, -1, 2, 1, 1, 1),)
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: p_lambda_int(B(A,c)[:,1:],lam(A,[2]),[[],[0]]).rays()==p_lambda_int(B(A,c)
....: ,lam(A,[2]),[[],[0],[0,1]]).rays()
False
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: p_lambda_int(B(A,c)[:,1:],lam(A,[2]),[[],[0]])==p_lambda_int(B(A,c),lam(A,
....: [2]),[[],[0],[0,1]])
True
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: for v in sortables(A,c[1:]):
....:     p_lambda_int(B(A,c)[:,1:],lam(A,v),[[],[0]])==p_lambda_int(B(A,c),lam(
....: A,v),[[],[0],[0,1]])
....: 
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: for v in sortables(A,c[2:]):
....:     p_lambda_int(B(A,c)[:,1:],lam(A,v),[[],[0]])==p_lambda_int(B(A,c),lam(
....: A,v),[[],[0],[0,1]])
....: 
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: p_lambda_int(B(A,c)[:,1:],lam(A,[1]),[[],[0]])==p_lambda_int(B(A,c),lam(A,
....: [1]),[[],[0],[0,1]])
False
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: p_lambda_int(B(A,c)[:,1:],lam(A,[1]),[[],[0]])==p_lambda_int(B(A,c),lam(A,
....: [1]),[[],[0],[0,1]])
False
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: p_lambda_int(B(A,c)[:,1:],lam(A,[1]),[[],[0]]))
  Cell In [513], line 3
    p_lambda_int(B(A,c)[:,Integer(1):],lam(A,[Integer(1)]),[[],[Integer(0)]]))
                                                                             ^
SyntaxError: unmatched ')'

sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: p_lambda_int(B(A,c)[:,1:],lam(A,[1]),[[],[0]])
A 5-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex and 5 rays
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: p_lambda_int(B(A,c)[:,1:],lam(A,[1]),[[],[0]])
....: p_lambda_int(B(A,c),lam(A,[1]),[[],[0],[0,1]])
....: 
....: 
A 5-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex and 5 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices and 5 rays
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: p_lambda_int(B(A,c)[:,1:],lam(A,[1]),[[]])
....: p_lambda_int(B(A,c),lam(A,[1]),[[],[0]])
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex and 6 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex and 6 rays
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: p_lambda_int(B(A,c)[:,1:],lam(A,[1]),[[]])==p_lambda_int(B(A,c),lam(A,[1])
....: ,[[],[0]])
True
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: p_lambda_int(B(A,c)[:,1:],lam(A,[1,2,1]),[[]])==p_lambda_int(B(A,c),lam(A,
....: [1,2,1]),[[],[0]])
True
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: for v in sortables(A,c[2:]):
....:     p_lambda_int(B(A,c)[:,1:],lam(A,v),[[]])==p_lambda_int(B(A,c),lam(A,v)
....: ,[[],[0]])
....: 
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: for v in sortables(A,c[2:]):
....:     p_lambda_int(B(A,c)[:,1:],lam(A,v),[v])==p_lambda_int(B(A,c),lam(A,v),
....: [v,[0]+v])
....: 
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
Cell In [520], line 4
      2 c=[Integer(0),Integer(1),Integer(2),Integer(3),Integer(4),Integer(5),Integer(6)]
      3 for v in sortables(A,c[Integer(2):]):
----> 4     p_lambda_int(B(A,c)[:,Integer(1):],lam(A,v),[v])==p_lambda_int(B(A,c),lam(A,v),[v,[Integer(0)]+v])

File ~/git/affine_dominance/software/domination4.py:125, in p_lambda_int(B, la, seqs)
    124 def p_lambda_int(B, la, seqs):
--> 125     P = p_lambda_faster(B, la, seqs[0])
    126     for s in seqs:
    127         P = P.intersection(p_lambda_faster(B, la, s))

File ~/git/affine_dominance/software/domination4.py:141, in p_lambda_faster(B, la, seq)
    139     B.mutate(k)
    140 B, la  = B[:,:-1], B[:,-1] 
--> 141 P = Polyhedron(rays=B.columns(),base_ring=QQ).translation(la)
    142 #print("P:   ",P,P.vertices(),P.rays(),P.lines(),"\n")
    143 for k in reversed(seq):

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/constructor.py:768, in Polyhedron(vertices, rays, lines, ieqs, eqns, ambient_dim, base_ring, minimize, verbose, backend, mutable)
    766 if got_Vrep:
    767     Vrep = [vertices, rays, lines]
--> 768 return parent(Vrep, Hrep, convert=convert, verbose=verbose, mutable=mutable)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/parent.pyx:903, in sage.structure.parent.Parent.__call__ (build/cythonized/sage/structure/parent.c:12685)()
    901         return mor._call_(x)
    902     else:
--> 903         return mor._call_with_args(x, args, kwds)
    904 
    905 raise TypeError(_LazyString("No conversion defined from %s to %s", (R, self), {}))

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:182, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_with_args (build/cythonized/sage/structure/coerce_maps.c:7540)()
    180     print(type(C), C)
    181     print(type(C._element_constructor), C._element_constructor)
--> 182 raise
    183 
    184 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:177, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_with_args (build/cythonized/sage/structure/coerce_maps.c:7430)()
    175             return C._element_constructor(x, *args)
    176         else:
--> 177             return C._element_constructor(x, *args, **kwds)
    178 except Exception:
    179     if print_warnings:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:695, in Polyhedra_base._element_constructor_(self, *args, **kwds)
    693     if convert and Vrep:
    694         Vrep = [convert_base_ring(_) for _ in Vrep]
--> 695     return self.element_class(self, Vrep, Hrep, **kwds)
    696 if nargs == 1 and is_Polyhedron(args[0]):
    697     copy = kwds.pop('copy', args[0].parent() is not self)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:174, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    171     lines = tuple(lines)
    173 if vertices or rays or lines:
--> 174     self._init_from_Vrepresentation(vertices, rays, lines, **kwds)
    175 else:
    176     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:99, in Polyhedron_ppl._init_from_Vrepresentation(self, vertices, rays, lines, minimize, verbose)
     72 def _init_from_Vrepresentation(self, vertices, rays, lines, minimize=True, verbose=False):
     73     """
     74     Construct polyhedron from V-representation data.
     75 
   (...)
     97         sage: Polyhedron_ppl._init_from_Vrepresentation(p, [], [], [])
     98     """
---> 99     gs = self._convert_generators_to_ppl(vertices, rays, lines)
    100     if gs.empty():
    101         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'empty')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:477, in Polyhedron_ppl._convert_generators_to_ppl(vertices, rays, lines)
    475     rays = []
    476 for r in rays:
--> 477     gs.insert(Polyhedron_ppl._convert_generator_to_ppl(r, RAY))
    478 if lines is None:
    479     lines = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:442, in Polyhedron_ppl._convert_generator_to_ppl(v, typ)
    440 d = LCM_list([denominator(v_i) for v_i in v])
    441 if d.is_one():
--> 442     return ob(Linear_Expression(v, 0))
    443 else:
    444     dv = [ d*v_i for v_i in v ]

File ppl/generator.pyx:205, in ppl.generator.Generator.ray()

File ppl/generator.pyx:201, in ppl.generator.Generator.ray()

ValueError: PPL::ray(e):
e == 0, but the origin cannot be a ray.
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: for v in sortables(A,c[2:]):
....:     print([0]+v)
....: 
[0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2, 3, 2]
[0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2, 3]
[0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2]
[0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 3]
[0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4]
[0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 2]
[0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3]
[0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 4]
[0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2]
[0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 3, 4, 3]
[0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 3, 4]
[0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 3]
[0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 4]
[0, 2, 3, 4, 5, 6, 2, 3, 4, 5]
[0, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3, 2]
[0, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3]
[0, 2, 3, 4, 5, 6, 2, 3, 4, 2]
[0, 2, 3, 4, 5, 6, 2, 3, 4, 3]
[0, 2, 3, 4, 5, 6, 2, 3, 4]
[0, 2, 3, 4, 5, 6, 2, 3, 5, 2]
[0, 2, 3, 4, 5, 6, 2, 3, 5]
[0, 2, 3, 4, 5, 6, 2, 3, 2]
[0, 2, 3, 4, 5, 6, 2, 3]
[0, 2, 3, 4, 5, 6, 2, 4, 5, 4]
[0, 2, 3, 4, 5, 6, 2, 4, 5]
[0, 2, 3, 4, 5, 6, 2, 4]
[0, 2, 3, 4, 5, 6, 2, 5]
[0, 2, 3, 4, 5, 6, 2]
[0, 2, 3, 4, 5, 6, 3, 4, 5, 3, 4, 3]
[0, 2, 3, 4, 5, 6, 3, 4, 5, 3, 4]
[0, 2, 3, 4, 5, 6, 3, 4, 5, 3]
[0, 2, 3, 4, 5, 6, 3, 4, 5, 4]
[0, 2, 3, 4, 5, 6, 3, 4, 5]
[0, 2, 3, 4, 5, 6, 3, 4, 3]
[0, 2, 3, 4, 5, 6, 3, 4]
[0, 2, 3, 4, 5, 6, 3, 5]
[0, 2, 3, 4, 5, 6, 3]
[0, 2, 3, 4, 5, 6, 4, 5, 4]
[0, 2, 3, 4, 5, 6, 4, 5]
[0, 2, 3, 4, 5, 6, 4]
[0, 2, 3, 4, 5, 6, 5]
[0, 2, 3, 4, 5, 6]
[0, 2, 3, 4, 5, 2, 3, 4, 2, 3, 2]
[0, 2, 3, 4, 5, 2, 3, 4, 2, 3]
[0, 2, 3, 4, 5, 2, 3, 4, 2]
[0, 2, 3, 4, 5, 2, 3, 4, 3]
[0, 2, 3, 4, 5, 2, 3, 4]
[0, 2, 3, 4, 5, 2, 3, 2]
[0, 2, 3, 4, 5, 2, 3]
[0, 2, 3, 4, 5, 2, 4]
[0, 2, 3, 4, 5, 2]
[0, 2, 3, 4, 5, 3, 4, 3]
[0, 2, 3, 4, 5, 3, 4]
[0, 2, 3, 4, 5, 3]
[0, 2, 3, 4, 5, 4]
[0, 2, 3, 4, 5]
[0, 2, 3, 4, 6, 2, 3, 2]
[0, 2, 3, 4, 6, 2, 3]
[0, 2, 3, 4, 6, 2]
[0, 2, 3, 4, 6, 3]
[0, 2, 3, 4, 6]
[0, 2, 3, 4, 2, 3, 2]
[0, 2, 3, 4, 2, 3]
[0, 2, 3, 4, 2]
[0, 2, 3, 4, 3]
[0, 2, 3, 4]
[0, 2, 3, 5, 6, 2, 5]
[0, 2, 3, 5, 6, 2]
[0, 2, 3, 5, 6, 5]
[0, 2, 3, 5, 6]
[0, 2, 3, 5, 2]
[0, 2, 3, 5]
[0, 2, 3, 6, 2]
[0, 2, 3, 6]
[0, 2, 3, 2]
[0, 2, 3]
[0, 2, 4, 5, 6, 4, 5, 4]
[0, 2, 4, 5, 6, 4, 5]
[0, 2, 4, 5, 6, 4]
[0, 2, 4, 5, 6, 5]
[0, 2, 4, 5, 6]
[0, 2, 4, 5, 4]
[0, 2, 4, 5]
[0, 2, 4, 6]
[0, 2, 4]
[0, 2, 5, 6, 5]
[0, 2, 5, 6]
[0, 2, 5]
[0, 2, 6]
[0, 2]
[0, 3, 4, 5, 6, 3, 4, 5, 3, 4, 3]
[0, 3, 4, 5, 6, 3, 4, 5, 3, 4]
[0, 3, 4, 5, 6, 3, 4, 5, 3]
[0, 3, 4, 5, 6, 3, 4, 5, 4]
[0, 3, 4, 5, 6, 3, 4, 5]
[0, 3, 4, 5, 6, 3, 4, 3]
[0, 3, 4, 5, 6, 3, 4]
[0, 3, 4, 5, 6, 3, 5]
[0, 3, 4, 5, 6, 3]
[0, 3, 4, 5, 6, 4, 5, 4]
[0, 3, 4, 5, 6, 4, 5]
[0, 3, 4, 5, 6, 4]
[0, 3, 4, 5, 6, 5]
[0, 3, 4, 5, 6]
[0, 3, 4, 5, 3, 4, 3]
[0, 3, 4, 5, 3, 4]
[0, 3, 4, 5, 3]
[0, 3, 4, 5, 4]
[0, 3, 4, 5]
[0, 3, 4, 6, 3]
[0, 3, 4, 6]
[0, 3, 4, 3]
[0, 3, 4]
[0, 3, 5, 6, 5]
[0, 3, 5, 6]
[0, 3, 5]
[0, 3, 6]
[0, 3]
[0, 4, 5, 6, 4, 5, 4]
[0, 4, 5, 6, 4, 5]
[0, 4, 5, 6, 4]
[0, 4, 5, 6, 5]
[0, 4, 5, 6]
[0, 4, 5, 4]
[0, 4, 5]
[0, 4, 6]
[0, 4]
[0, 5, 6, 5]
[0, 5, 6]
[0, 5]
[0, 6]
[0]
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: for v in sortables(A,c[1:]):
....:     p_lambda_int(B(A,c)[:,1:],lam(A,v),[v])==p_lambda_int(B(A,c),lam(A,v),
....: [v,[0]+v])
....: 
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
Cell In [522], line 4
      2 c=[Integer(0),Integer(1),Integer(2),Integer(3),Integer(4),Integer(5),Integer(6)]
      3 for v in sortables(A,c[Integer(1):]):
----> 4     p_lambda_int(B(A,c)[:,Integer(1):],lam(A,v),[v])==p_lambda_int(B(A,c),lam(A,v),[v,[Integer(0)]+v])

File ~/git/affine_dominance/software/domination4.py:125, in p_lambda_int(B, la, seqs)
    124 def p_lambda_int(B, la, seqs):
--> 125     P = p_lambda_faster(B, la, seqs[0])
    126     for s in seqs:
    127         P = P.intersection(p_lambda_faster(B, la, s))

File ~/git/affine_dominance/software/domination4.py:141, in p_lambda_faster(B, la, seq)
    139     B.mutate(k)
    140 B, la  = B[:,:-1], B[:,-1] 
--> 141 P = Polyhedron(rays=B.columns(),base_ring=QQ).translation(la)
    142 #print("P:   ",P,P.vertices(),P.rays(),P.lines(),"\n")
    143 for k in reversed(seq):

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/constructor.py:768, in Polyhedron(vertices, rays, lines, ieqs, eqns, ambient_dim, base_ring, minimize, verbose, backend, mutable)
    766 if got_Vrep:
    767     Vrep = [vertices, rays, lines]
--> 768 return parent(Vrep, Hrep, convert=convert, verbose=verbose, mutable=mutable)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/parent.pyx:903, in sage.structure.parent.Parent.__call__ (build/cythonized/sage/structure/parent.c:12685)()
    901         return mor._call_(x)
    902     else:
--> 903         return mor._call_with_args(x, args, kwds)
    904 
    905 raise TypeError(_LazyString("No conversion defined from %s to %s", (R, self), {}))

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:182, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_with_args (build/cythonized/sage/structure/coerce_maps.c:7540)()
    180     print(type(C), C)
    181     print(type(C._element_constructor), C._element_constructor)
--> 182 raise
    183 
    184 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:177, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_with_args (build/cythonized/sage/structure/coerce_maps.c:7430)()
    175             return C._element_constructor(x, *args)
    176         else:
--> 177             return C._element_constructor(x, *args, **kwds)
    178 except Exception:
    179     if print_warnings:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:695, in Polyhedra_base._element_constructor_(self, *args, **kwds)
    693     if convert and Vrep:
    694         Vrep = [convert_base_ring(_) for _ in Vrep]
--> 695     return self.element_class(self, Vrep, Hrep, **kwds)
    696 if nargs == 1 and is_Polyhedron(args[0]):
    697     copy = kwds.pop('copy', args[0].parent() is not self)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:174, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    171     lines = tuple(lines)
    173 if vertices or rays or lines:
--> 174     self._init_from_Vrepresentation(vertices, rays, lines, **kwds)
    175 else:
    176     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:99, in Polyhedron_ppl._init_from_Vrepresentation(self, vertices, rays, lines, minimize, verbose)
     72 def _init_from_Vrepresentation(self, vertices, rays, lines, minimize=True, verbose=False):
     73     """
     74     Construct polyhedron from V-representation data.
     75 
   (...)
     97         sage: Polyhedron_ppl._init_from_Vrepresentation(p, [], [], [])
     98     """
---> 99     gs = self._convert_generators_to_ppl(vertices, rays, lines)
    100     if gs.empty():
    101         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'empty')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:477, in Polyhedron_ppl._convert_generators_to_ppl(vertices, rays, lines)
    475     rays = []
    476 for r in rays:
--> 477     gs.insert(Polyhedron_ppl._convert_generator_to_ppl(r, RAY))
    478 if lines is None:
    479     lines = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:442, in Polyhedron_ppl._convert_generator_to_ppl(v, typ)
    440 d = LCM_list([denominator(v_i) for v_i in v])
    441 if d.is_one():
--> 442     return ob(Linear_Expression(v, 0))
    443 else:
    444     dv = [ d*v_i for v_i in v ]

File ppl/generator.pyx:205, in ppl.generator.Generator.ray()

File ppl/generator.pyx:201, in ppl.generator.Generator.ray()

ValueError: PPL::ray(e):
e == 0, but the origin cannot be a ray.
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: for v in sortables(A,c[1:]):
....:     p_lambda_int(B(A,c)[:,1:],lam(A,v),[list(i+1 for i in v)])==p_lambda_i
....: nt(B(A,c),lam(A,v),[v,[0]+v])
....: 
---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
Cell In [523], line 4
      2 c=[Integer(0),Integer(1),Integer(2),Integer(3),Integer(4),Integer(5),Integer(6)]
      3 for v in sortables(A,c[Integer(1):]):
----> 4     p_lambda_int(B(A,c)[:,Integer(1):],lam(A,v),[list(i+Integer(1) for i in v)])==p_lambda_int(B(A,c),lam(A,v),[v,[Integer(0)]+v])

File ~/git/affine_dominance/software/domination4.py:125, in p_lambda_int(B, la, seqs)
    124 def p_lambda_int(B, la, seqs):
--> 125     P = p_lambda_faster(B, la, seqs[0])
    126     for s in seqs:
    127         P = P.intersection(p_lambda_faster(B, la, s))

File ~/git/affine_dominance/software/domination4.py:139, in p_lambda_faster(B, la, seq)
    137 B = block_matrix([[B,matrix(la).transpose()]])
    138 for k in seq:
--> 139     B.mutate(k)
    140 B, la  = B[:,:-1], B[:,-1] 
    141 P = Polyhedron(rays=B.columns(),base_ring=QQ).translation(la)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/matrix0.pyx:3643, in sage.matrix.matrix0.Matrix.mutate (build/cythonized/sage/matrix/matrix0.c:33715)()
   3641 
   3642         if k < 0 or k >= self._nrows or k >= self._ncols:
-> 3643             raise IndexError("The mutation index is invalid")
   3644 
   3645         pairs = self.nonzero_positions()

IndexError: The mutation index is invalid
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: for v in sortables(A,c[1:]):
....:     p_lambda_int(B(A,c)[:,1:],lam(A,v),[list(i-1 for i in v)])==p_lambda_i
....: nt(B(A,c),lam(A,v),[v,[0]+v])
....: 
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
Cell In [524], line 4
      2 c=[Integer(0),Integer(1),Integer(2),Integer(3),Integer(4),Integer(5),Integer(6)]
      3 for v in sortables(A,c[Integer(1):]):
----> 4     p_lambda_int(B(A,c)[:,Integer(1):],lam(A,v),[list(i-Integer(1) for i in v)])==p_lambda_int(B(A,c),lam(A,v),[v,[Integer(0)]+v])

File ~/git/affine_dominance/software/domination4.py:125, in p_lambda_int(B, la, seqs)
    124 def p_lambda_int(B, la, seqs):
--> 125     P = p_lambda_faster(B, la, seqs[0])
    126     for s in seqs:
    127         P = P.intersection(p_lambda_faster(B, la, s))

File ~/git/affine_dominance/software/domination4.py:141, in p_lambda_faster(B, la, seq)
    139     B.mutate(k)
    140 B, la  = B[:,:-1], B[:,-1] 
--> 141 P = Polyhedron(rays=B.columns(),base_ring=QQ).translation(la)
    142 #print("P:   ",P,P.vertices(),P.rays(),P.lines(),"\n")
    143 for k in reversed(seq):

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/constructor.py:768, in Polyhedron(vertices, rays, lines, ieqs, eqns, ambient_dim, base_ring, minimize, verbose, backend, mutable)
    766 if got_Vrep:
    767     Vrep = [vertices, rays, lines]
--> 768 return parent(Vrep, Hrep, convert=convert, verbose=verbose, mutable=mutable)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/parent.pyx:903, in sage.structure.parent.Parent.__call__ (build/cythonized/sage/structure/parent.c:12685)()
    901         return mor._call_(x)
    902     else:
--> 903         return mor._call_with_args(x, args, kwds)
    904 
    905 raise TypeError(_LazyString("No conversion defined from %s to %s", (R, self), {}))

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:182, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_with_args (build/cythonized/sage/structure/coerce_maps.c:7540)()
    180     print(type(C), C)
    181     print(type(C._element_constructor), C._element_constructor)
--> 182 raise
    183 
    184 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:177, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_with_args (build/cythonized/sage/structure/coerce_maps.c:7430)()
    175             return C._element_constructor(x, *args)
    176         else:
--> 177             return C._element_constructor(x, *args, **kwds)
    178 except Exception:
    179     if print_warnings:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:695, in Polyhedra_base._element_constructor_(self, *args, **kwds)
    693     if convert and Vrep:
    694         Vrep = [convert_base_ring(_) for _ in Vrep]
--> 695     return self.element_class(self, Vrep, Hrep, **kwds)
    696 if nargs == 1 and is_Polyhedron(args[0]):
    697     copy = kwds.pop('copy', args[0].parent() is not self)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:174, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    171     lines = tuple(lines)
    173 if vertices or rays or lines:
--> 174     self._init_from_Vrepresentation(vertices, rays, lines, **kwds)
    175 else:
    176     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:99, in Polyhedron_ppl._init_from_Vrepresentation(self, vertices, rays, lines, minimize, verbose)
     72 def _init_from_Vrepresentation(self, vertices, rays, lines, minimize=True, verbose=False):
     73     """
     74     Construct polyhedron from V-representation data.
     75 
   (...)
     97         sage: Polyhedron_ppl._init_from_Vrepresentation(p, [], [], [])
     98     """
---> 99     gs = self._convert_generators_to_ppl(vertices, rays, lines)
    100     if gs.empty():
    101         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'empty')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:477, in Polyhedron_ppl._convert_generators_to_ppl(vertices, rays, lines)
    475     rays = []
    476 for r in rays:
--> 477     gs.insert(Polyhedron_ppl._convert_generator_to_ppl(r, RAY))
    478 if lines is None:
    479     lines = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:442, in Polyhedron_ppl._convert_generator_to_ppl(v, typ)
    440 d = LCM_list([denominator(v_i) for v_i in v])
    441 if d.is_one():
--> 442     return ob(Linear_Expression(v, 0))
    443 else:
    444     dv = [ d*v_i for v_i in v ]

File ppl/generator.pyx:205, in ppl.generator.Generator.ray()

File ppl/generator.pyx:201, in ppl.generator.Generator.ray()

ValueError: PPL::ray(e):
e == 0, but the origin cannot be a ray.
sage: list(i-1 for i in [1,4,5,2,3,4,2,3,1,4])
[0, 3, 4, 1, 2, 3, 1, 2, 0, 3]
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: for v in sortables(A,c[1:]):
....:     p_lambda_int(B(A,c)[:,1:],lam(A,v),[list(i-1 for i in v)])==p_lambda_i
....: nt(B(A,c),lam(A,v),[v,[0]+v])
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
Cell In [526], line 4
      2 c=[Integer(0),Integer(1),Integer(2),Integer(3),Integer(4),Integer(5),Integer(6)]
      3 for v in sortables(A,c[Integer(1):]):
----> 4     p_lambda_int(B(A,c)[:,Integer(1):],lam(A,v),[list(i-Integer(1) for i in v)])==p_lambda_int(B(A,c),lam(A,v),[v,[Integer(0)]+v])

File ~/git/affine_dominance/software/domination4.py:125, in p_lambda_int(B, la, seqs)
    124 def p_lambda_int(B, la, seqs):
--> 125     P = p_lambda_faster(B, la, seqs[0])
    126     for s in seqs:
    127         P = P.intersection(p_lambda_faster(B, la, s))

File ~/git/affine_dominance/software/domination4.py:141, in p_lambda_faster(B, la, seq)
    139     B.mutate(k)
    140 B, la  = B[:,:-1], B[:,-1] 
--> 141 P = Polyhedron(rays=B.columns(),base_ring=QQ).translation(la)
    142 #print("P:   ",P,P.vertices(),P.rays(),P.lines(),"\n")
    143 for k in reversed(seq):

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/constructor.py:768, in Polyhedron(vertices, rays, lines, ieqs, eqns, ambient_dim, base_ring, minimize, verbose, backend, mutable)
    766 if got_Vrep:
    767     Vrep = [vertices, rays, lines]
--> 768 return parent(Vrep, Hrep, convert=convert, verbose=verbose, mutable=mutable)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/parent.pyx:903, in sage.structure.parent.Parent.__call__ (build/cythonized/sage/structure/parent.c:12685)()
    901         return mor._call_(x)
    902     else:
--> 903         return mor._call_with_args(x, args, kwds)
    904 
    905 raise TypeError(_LazyString("No conversion defined from %s to %s", (R, self), {}))

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:182, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_with_args (build/cythonized/sage/structure/coerce_maps.c:7540)()
    180     print(type(C), C)
    181     print(type(C._element_constructor), C._element_constructor)
--> 182 raise
    183 
    184 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:177, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_with_args (build/cythonized/sage/structure/coerce_maps.c:7430)()
    175             return C._element_constructor(x, *args)
    176         else:
--> 177             return C._element_constructor(x, *args, **kwds)
    178 except Exception:
    179     if print_warnings:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:695, in Polyhedra_base._element_constructor_(self, *args, **kwds)
    693     if convert and Vrep:
    694         Vrep = [convert_base_ring(_) for _ in Vrep]
--> 695     return self.element_class(self, Vrep, Hrep, **kwds)
    696 if nargs == 1 and is_Polyhedron(args[0]):
    697     copy = kwds.pop('copy', args[0].parent() is not self)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:174, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    171     lines = tuple(lines)
    173 if vertices or rays or lines:
--> 174     self._init_from_Vrepresentation(vertices, rays, lines, **kwds)
    175 else:
    176     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:99, in Polyhedron_ppl._init_from_Vrepresentation(self, vertices, rays, lines, minimize, verbose)
     72 def _init_from_Vrepresentation(self, vertices, rays, lines, minimize=True, verbose=False):
     73     """
     74     Construct polyhedron from V-representation data.
     75 
   (...)
     97         sage: Polyhedron_ppl._init_from_Vrepresentation(p, [], [], [])
     98     """
---> 99     gs = self._convert_generators_to_ppl(vertices, rays, lines)
    100     if gs.empty():
    101         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'empty')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:477, in Polyhedron_ppl._convert_generators_to_ppl(vertices, rays, lines)
    475     rays = []
    476 for r in rays:
--> 477     gs.insert(Polyhedron_ppl._convert_generator_to_ppl(r, RAY))
    478 if lines is None:
    479     lines = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:442, in Polyhedron_ppl._convert_generator_to_ppl(v, typ)
    440 d = LCM_list([denominator(v_i) for v_i in v])
    441 if d.is_one():
--> 442     return ob(Linear_Expression(v, 0))
    443 else:
    444     dv = [ d*v_i for v_i in v ]

File ppl/generator.pyx:205, in ppl.generator.Generator.ray()

File ppl/generator.pyx:201, in ppl.generator.Generator.ray()

ValueError: PPL::ray(e):
e == 0, but the origin cannot be a ray.
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: for v in sortables(A,c[1:]):
....:     p_lambda_int(B(A,c)[:,1:],lam(A,v),[list(i-1 for i in v)])==p_lambda_i
....: nt(B(A,c),lam(A,v),[v,[0]+v])
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
Cell In [527], line 4
      2 c=[Integer(0),Integer(1),Integer(2),Integer(3),Integer(4),Integer(5),Integer(6)]
      3 for v in sortables(A,c[Integer(1):]):
----> 4     p_lambda_int(B(A,c)[:,Integer(1):],lam(A,v),[list(i-Integer(1) for i in v)])==p_lambda_int(B(A,c),lam(A,v),[v,[Integer(0)]+v])

File ~/git/affine_dominance/software/domination4.py:125, in p_lambda_int(B, la, seqs)
    124 def p_lambda_int(B, la, seqs):
--> 125     P = p_lambda_faster(B, la, seqs[0])
    126     for s in seqs:
    127         P = P.intersection(p_lambda_faster(B, la, s))

File ~/git/affine_dominance/software/domination4.py:141, in p_lambda_faster(B, la, seq)
    139     B.mutate(k)
    140 B, la  = B[:,:-1], B[:,-1] 
--> 141 P = Polyhedron(rays=B.columns(),base_ring=QQ).translation(la)
    142 #print("P:   ",P,P.vertices(),P.rays(),P.lines(),"\n")
    143 for k in reversed(seq):

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/constructor.py:768, in Polyhedron(vertices, rays, lines, ieqs, eqns, ambient_dim, base_ring, minimize, verbose, backend, mutable)
    766 if got_Vrep:
    767     Vrep = [vertices, rays, lines]
--> 768 return parent(Vrep, Hrep, convert=convert, verbose=verbose, mutable=mutable)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/parent.pyx:903, in sage.structure.parent.Parent.__call__ (build/cythonized/sage/structure/parent.c:12685)()
    901         return mor._call_(x)
    902     else:
--> 903         return mor._call_with_args(x, args, kwds)
    904 
    905 raise TypeError(_LazyString("No conversion defined from %s to %s", (R, self), {}))

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:182, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_with_args (build/cythonized/sage/structure/coerce_maps.c:7540)()
    180     print(type(C), C)
    181     print(type(C._element_constructor), C._element_constructor)
--> 182 raise
    183 
    184 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:177, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_with_args (build/cythonized/sage/structure/coerce_maps.c:7430)()
    175             return C._element_constructor(x, *args)
    176         else:
--> 177             return C._element_constructor(x, *args, **kwds)
    178 except Exception:
    179     if print_warnings:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:695, in Polyhedra_base._element_constructor_(self, *args, **kwds)
    693     if convert and Vrep:
    694         Vrep = [convert_base_ring(_) for _ in Vrep]
--> 695     return self.element_class(self, Vrep, Hrep, **kwds)
    696 if nargs == 1 and is_Polyhedron(args[0]):
    697     copy = kwds.pop('copy', args[0].parent() is not self)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:174, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    171     lines = tuple(lines)
    173 if vertices or rays or lines:
--> 174     self._init_from_Vrepresentation(vertices, rays, lines, **kwds)
    175 else:
    176     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:99, in Polyhedron_ppl._init_from_Vrepresentation(self, vertices, rays, lines, minimize, verbose)
     72 def _init_from_Vrepresentation(self, vertices, rays, lines, minimize=True, verbose=False):
     73     """
     74     Construct polyhedron from V-representation data.
     75 
   (...)
     97         sage: Polyhedron_ppl._init_from_Vrepresentation(p, [], [], [])
     98     """
---> 99     gs = self._convert_generators_to_ppl(vertices, rays, lines)
    100     if gs.empty():
    101         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'empty')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:477, in Polyhedron_ppl._convert_generators_to_ppl(vertices, rays, lines)
    475     rays = []
    476 for r in rays:
--> 477     gs.insert(Polyhedron_ppl._convert_generator_to_ppl(r, RAY))
    478 if lines is None:
    479     lines = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:442, in Polyhedron_ppl._convert_generator_to_ppl(v, typ)
    440 d = LCM_list([denominator(v_i) for v_i in v])
    441 if d.is_one():
--> 442     return ob(Linear_Expression(v, 0))
    443 else:
    444     dv = [ d*v_i for v_i in v ]

File ppl/generator.pyx:205, in ppl.generator.Generator.ray()

File ppl/generator.pyx:201, in ppl.generator.Generator.ray()

ValueError: PPL::ray(e):
e == 0, but the origin cannot be a ray.
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: for v in sortables(A,c[1:]):
....:     p_lambda_int(B(A,c)[:,1:],lam(A,v),[list(i-1 for i in v)])
....:     p_lambda_int(B(A,c),lam(A,v),[v,[0]+v])
....: 
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
Cell In [528], line 4
      2 c=[Integer(0),Integer(1),Integer(2),Integer(3),Integer(4),Integer(5),Integer(6)]
      3 for v in sortables(A,c[Integer(1):]):
----> 4     p_lambda_int(B(A,c)[:,Integer(1):],lam(A,v),[list(i-Integer(1) for i in v)])
      5     p_lambda_int(B(A,c),lam(A,v),[v,[Integer(0)]+v])

File ~/git/affine_dominance/software/domination4.py:125, in p_lambda_int(B, la, seqs)
    124 def p_lambda_int(B, la, seqs):
--> 125     P = p_lambda_faster(B, la, seqs[0])
    126     for s in seqs:
    127         P = P.intersection(p_lambda_faster(B, la, s))

File ~/git/affine_dominance/software/domination4.py:141, in p_lambda_faster(B, la, seq)
    139     B.mutate(k)
    140 B, la  = B[:,:-1], B[:,-1] 
--> 141 P = Polyhedron(rays=B.columns(),base_ring=QQ).translation(la)
    142 #print("P:   ",P,P.vertices(),P.rays(),P.lines(),"\n")
    143 for k in reversed(seq):

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/constructor.py:768, in Polyhedron(vertices, rays, lines, ieqs, eqns, ambient_dim, base_ring, minimize, verbose, backend, mutable)
    766 if got_Vrep:
    767     Vrep = [vertices, rays, lines]
--> 768 return parent(Vrep, Hrep, convert=convert, verbose=verbose, mutable=mutable)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/parent.pyx:903, in sage.structure.parent.Parent.__call__ (build/cythonized/sage/structure/parent.c:12685)()
    901         return mor._call_(x)
    902     else:
--> 903         return mor._call_with_args(x, args, kwds)
    904 
    905 raise TypeError(_LazyString("No conversion defined from %s to %s", (R, self), {}))

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:182, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_with_args (build/cythonized/sage/structure/coerce_maps.c:7540)()
    180     print(type(C), C)
    181     print(type(C._element_constructor), C._element_constructor)
--> 182 raise
    183 
    184 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:177, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_with_args (build/cythonized/sage/structure/coerce_maps.c:7430)()
    175             return C._element_constructor(x, *args)
    176         else:
--> 177             return C._element_constructor(x, *args, **kwds)
    178 except Exception:
    179     if print_warnings:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:695, in Polyhedra_base._element_constructor_(self, *args, **kwds)
    693     if convert and Vrep:
    694         Vrep = [convert_base_ring(_) for _ in Vrep]
--> 695     return self.element_class(self, Vrep, Hrep, **kwds)
    696 if nargs == 1 and is_Polyhedron(args[0]):
    697     copy = kwds.pop('copy', args[0].parent() is not self)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:174, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    171     lines = tuple(lines)
    173 if vertices or rays or lines:
--> 174     self._init_from_Vrepresentation(vertices, rays, lines, **kwds)
    175 else:
    176     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:99, in Polyhedron_ppl._init_from_Vrepresentation(self, vertices, rays, lines, minimize, verbose)
     72 def _init_from_Vrepresentation(self, vertices, rays, lines, minimize=True, verbose=False):
     73     """
     74     Construct polyhedron from V-representation data.
     75 
   (...)
     97         sage: Polyhedron_ppl._init_from_Vrepresentation(p, [], [], [])
     98     """
---> 99     gs = self._convert_generators_to_ppl(vertices, rays, lines)
    100     if gs.empty():
    101         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'empty')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:477, in Polyhedron_ppl._convert_generators_to_ppl(vertices, rays, lines)
    475     rays = []
    476 for r in rays:
--> 477     gs.insert(Polyhedron_ppl._convert_generator_to_ppl(r, RAY))
    478 if lines is None:
    479     lines = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:442, in Polyhedron_ppl._convert_generator_to_ppl(v, typ)
    440 d = LCM_list([denominator(v_i) for v_i in v])
    441 if d.is_one():
--> 442     return ob(Linear_Expression(v, 0))
    443 else:
    444     dv = [ d*v_i for v_i in v ]

File ppl/generator.pyx:205, in ppl.generator.Generator.ray()

File ppl/generator.pyx:201, in ppl.generator.Generator.ray()

ValueError: PPL::ray(e):
e == 0, but the origin cannot be a ray.
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: for v in sortables(A,c[1:]):
....:     p_lambda_int(B(A,c),lam(A,v),[v,[0]+v])
....: 
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 50 vertices and 20 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 47 vertices and 13 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 23 vertices and 9 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 44 vertices and 19 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 26 vertices and 12 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 27 vertices and 8 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 18 vertices and 7 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 30 vertices and 15 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 25 vertices and 9 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 54 vertices and 16 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 41 vertices and 13 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 33 vertices and 10 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 45 vertices and 12 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 42 vertices and 12 rays
çA 6-dimensional polyhedron in QQ^7 defined as the convex hull of 25 vertices and 9 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 17 vertices and 7 rays
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 9 vertices and 6 rays
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [529], line 4
      2 c=[Integer(0),Integer(1),Integer(2),Integer(3),Integer(4),Integer(5),Integer(6)]
      3 for v in sortables(A,c[Integer(1):]):
----> 4     p_lambda_int(B(A,c),lam(A,v),[v,[Integer(0)]+v])

File ~/git/affine_dominance/software/domination4.py:127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_faster(B, la, seqs[0])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_faster(B, la, s))
    128     if P.dimension()==0:
    129         break

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1371, in Polyhedron_base5.intersection(self, other)
   1369 parent = self.parent()
   1370 try:
-> 1371     intersection = parent.element_class(parent, None, [new_ieqs, new_eqns])
   1373     # Force calculation of the vertices.
   1374     _ = intersection.n_vertices()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:179, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    177 elif Hrep is not None:
    178     ieqs, eqns = Hrep
--> 179     self._init_from_Hrepresentation(ieqs, eqns, **kwds)
    180 else:
    181     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:129, in Polyhedron_ppl._init_from_Hrepresentation(self, ieqs, eqns, minimize, verbose)
    106 def _init_from_Hrepresentation(self, ieqs, eqns, minimize=True, verbose=False):
    107     """
    108     Construct polyhedron from H-representation data.
    109 
   (...)
    127         sage: Polyhedron_ppl._init_from_Hrepresentation(p, [], [])
    128     """
--> 129     cs = self._convert_constraints_to_ppl(ieqs, eqns)
    130     if cs.empty():
    131         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'universe')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:534, in Polyhedron_ppl._convert_constraints_to_ppl(ieqs, eqns)
    532     ieqs = []
    533 for ieq in ieqs:
--> 534     cs.insert(Polyhedron_ppl._convert_constraint_to_ppl(ieq, INEQUALITY))
    535 if eqns is None:
    536     eqns = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:509, in Polyhedron_ppl._convert_constraint_to_ppl(c, typ)
    507 A = dc[1:]
    508 if typ == INEQUALITY:
--> 509     return Linear_Expression(A, b) >= 0
    510 else:
    511     return Linear_Expression(A, b) == 0

File ppl/linear_algebra.pyx:654, in ppl.linear_algebra.Linear_Expression.__init__()

File ppl/linear_algebra.pyx:49, in ppl.linear_algebra.PPL_Coefficient_from_pyobject()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/rings/integer.pyx:914, in sage.rings.integer.Integer.__richcmp__ (build/cythonized/sage/rings/integer.c:16498)()
    912     c = mpz_cmp_d((<Integer>left).value, d)
    913 else:
--> 914     return coercion_model.richcmp(left, right, op)
    915 
    916 return rich_to_bool_sgn(op, c)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:2021, in sage.structure.coerce.CoercionModel.richcmp (build/cythonized/sage/structure/coerce.c:26173)()
   2019 # Coerce to a common parent
   2020 try:
-> 2021     x, y = self.canonical_coercion(x, y)
   2022 except (TypeError, NotImplementedError):
   2023     pass

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1422, in sage.structure.coerce.CoercionModel.canonical_coercion (build/cythonized/sage/structure/coerce.c:18956)()
   1420             self._record_exception()
   1421 
-> 1422     raise TypeError("no common canonical parent for objects with parents: '%s' and '%s'"%(xp, yp))
   1423 
   1424 cpdef coercion_maps(self, R, S) noexcept:

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['A',2])
sage: c=[0,1]
sage: p_lambda_int(B(A,c)[:,1:],lam(A,[]),[[]])
A 1-dimensional polyhedron in QQ^2 defined as the convex hull of 1 vertex and 1 ray
sage: p_lambda_int(matrix([[0],[-1],[-1]]),(1,1,1),[[]])
A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray
sage: p_lambda_int(matrix([[0],[-1],[-1]]),(1,1,1),[[],[0]])
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: p_lambda_int(matrix([[0,-1],[1,0],[0,-1]]),(1,1,1),[[],[0]])
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray
sage: p_lambda_int(matrix([[0,-1],[1,0],[0,-1]]),(1,1,1),[[1],[0,1]])
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: p_lambda_int(matrix([[0,-1],[1,0],[0,-1]]),(1,1,1),[[]])
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
sage: p_lambda_int(matrix([[0,-1],[1,0],[0,-1]]),(1,1,1),[[]]).rays()
(A ray in the direction (0, 1, 0), A ray in the direction (-1, 0, -1))
sage: p_lambda_int(matrix([[0,-1],[1,0],[0,-1]]),(1,1,1),[[1]]).rays()
(A ray in the direction (1, 0, 1), A ray in the direction (0, 1, 0))
sage: p_lambda_int(matrix([[0,-1],[1,0],[0,-1]]),(1,1,1),[[1]])
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
sage: p_lambda_int(matrix([[0,-1],[1,0],[0,-1]]),(1,1,1),[[1]]).rays()
(A ray in the direction (1, 0, 1), A ray in the direction (0, 1, 0))
sage: p_lambda_int(matrix([[0,-1],[1,0],[0,-1]]),(1,1,1),[[0]])
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
sage: p_lambda_int(matrix([[0,-1],[1,0],[0,-1]]),(1,1,1),[[0]]).rays()
(A ray in the direction (-1, 0, -1), A ray in the direction (0, -1, 0))
sage: p_lambda_int(matrix([[0,-1],[1,0],[0,-1]]),(1,1,1),[[0,1]]).rays()
(A ray in the direction (1, -1, 1), A ray in the direction (0, -1, 0))
sage: p_lambda_int(matrix([[0,-1],[1,0],[0,-1]]),(1,1,1),[[0,1]])
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays
sage: p_lambda_int(matrix([[0,-1],[1,0],[0,-1]]),(1,1,1),[[],[1]])
A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray
sage: p_lambda_int(matrix([[0,-1],[1,0],[0,-1]]),(1,1,1),[[],[1]]).rays()
(A ray in the direction (0, 1, 0),)
sage: p_lambda_int(matrix([[0,-1],[1,0],[0,-1]]),(1,1,1),[[1],[1,0]]).rays()
(A ray in the direction (1, 0, 1),)
sage: p_lambda_int(matrix([[0,-1],[1,0],[0,-1]]),(1,1,1),[[1],[1,0]])
A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray
sage: p_lambda_int(matrix([[0,-1],[1,0],[0,-1]]),(1,1,1),[[],[0]]).rays()
(A ray in the direction (-1, 0, -1),)
sage: p_lambda_int(matrix([[0,1],[-1,0],[0,-1]]),(1,1,1),[[],[0]]).rays()
(A ray in the direction (1, 0, -1),)
sage: p_lambda_int(matrix([[0,1],[-1,0],[0,-1]]),(1,1,1),[[],[0]])
A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray
sage: p_lambda_int(matrix([[0,1],[-1,0],[0,-1]]),(1,1,1),[[0,1],[0,1,0]])
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray
sage: p_lambda_int(matrix([[0,1],[-1,0],[0,-1]]),(-1,2,1),[[0,1],[0,1,0]])
A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray
sage: p_lambda_int(matrix([[0,1],[-1,0],[0,-1]]),(-1,2,1),[[0,1],[0,1,0]]).rays(
....: )
(A ray in the direction (-1, 1, 1),)
sage: p_lambda_int(matrix([[0,1],[-1,0],[0,-1]]),(-1,2,1),[[0],[]])
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray
sage: p_lambda_int(matrix([[0,1],[-1,0],[0,-1]]),(-1,2,1),[[0],[]]).rays()
(A ray in the direction (1, 0, -1),)
sage: p_lambda_int(matrix([[0,-1],[1,0],[-1,1]]),(1,-2,1),[[1,0],[1]])
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray
sage: p_lambda_int(matrix([[0,-1],[1,0],[-1,1]]),(1,-2,1),[[1,0],[1]])
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray
sage: p_lambda_int(matrix([[0,1],[-1,0],[0,-1]]),(-1,2,1),[[]])
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
sage: p_lambda_int(matrix([[0,-1],[1,0],[0,-1]]),(1,1,1),[[]])
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
sage: p_lambda_int(matrix([[0,1],[-1,0],[0,-1]]),(-1,2,1),[[0]])
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
sage: p_lambda_int(matrix([[0,-1],[1,0],[0,-1]]),(1,1,1),[[],[0]])
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray
sage: p_lambda_int(matrix([[0,1],[-1,0],[0,-1]]),(-1,2,1),[[0],[]])
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray
sage: p_lambda_int(matrix([[0,-1],[1,0],[-1,1]]),(1,-2,1),[[1,0],[1]])
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray
sage: p_lambda_int(matrix([[0,-1],[1,0],[-1,1]]),(1,-2,1),[[1,0],[1],[1,0,1],[1,
....: 0,1,0]])
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: p_lambda_int(matrix([[0,1],[-1,0],[1,0]]),(-1,-1,1),[[0,1,0],[0,1],[0,1,0,
....: 1],[0,1,0,1,0]])
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: p_lambda_int(matrix([[0,-1],[1,0],[0,-1]]),(1,1,1),[[],[0],[1,0]])
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: p_lambda_int(matrix([[0,1],[-1,0],[0,-1]]),(-1,2,1),[[0],[],[0,1,0]])
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: p_lambda_int(matrix([[0,-1],[1,0],[-1,1]]),(1,-2,1),[[1,0],[1],[1,0,1,0]])
....: 
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: p_lambda_int(matrix([[0,1],[-1,0],[1,0]]),(-1,-1,1),[[0,1,0],[0,1],[0,1,0,
....: 1,0]])
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: p_lambda_int(matrix([[0,1,0],[-1,0,1],[0,-1,0]]),(1,-1,-1),[[1,2,1],[1,2],
....: [1,2,1,2,1]])
A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray
sage: p_lambda_int(matrix([[0,1,0],[-1,0,1],[0,-1,0]]),(1,-1,-1),[[0,1,2,0,1],[0
....: ,1,2],[0,1,2,0,1,2,0,1]])
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: p_lambda_int(matrix([[0,1,0],[-1,0,1],[0,-1,0]]),(1,-1,-1),[[1,2,1],[1,2],
....: [1,2,1,2,1]]).rays()
(A ray in the direction (0, -1, 0),)
sage: p_lambda_int(matrix([[0,-1],[1,0],[0,-1]]),(1,1,1),[[],[1]])
A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray
sage: p_lambda_int(matrix([[0,-1],[1,0],[0,-1]]),(1,1,1),[[],[1]]).rays()
(A ray in the direction (0, 1, 0),)
sage: p_lambda_int(matrix([[0,-1],[1,0],[0,-1]]),(1,1,1),[[],[1],[0]]).rays()
()
sage: p_lambda_int(matrix([[0,-1],[1,0],[0,-1]]),(1,1,1),[[],[1],[0]])
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: p_lambda_int(matrix([[0,1],[-1,0],[0,-1]]),(-1,2,1),[[0],[],[0,1]])
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: p_lambda_int(matrix([[0,-1],[1,0],[-1,1]]),(1,-2,1),[[1,0],[1],[1,0,1]])
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: p_lambda_int(matrix([[0,1],[-1,0],[1,0]]),(-1,-1,1),[[0,1,0],[0,1],[0,1,0,
....: 1]])
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: p_lambda_int(matrix([[0,1,0],[-1,0,1],[0,-1,0]]),(1,-1,-1),[[1,2,1],[1,2],
....: [1,2,1,2]])
A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray
sage: p_lambda_int(matrix([[0,1,0],[-1,0,1],[0,-1,0]]),(1,-1,-1),[[1,2,1],[1,2],
....: [1,2,1,2]]).rays()
(A ray in the direction (0, -1, 0),)
sage: p_lambda_int(matrix([[0,1,0],[-1,0,1],[0,-1,0]]),(1,-1,-1),[[1,2,1],[1,2],
....: [1,2,1,2],[0]]).rays()
()
sage: p_lambda_int(matrix([[0,1,0],[-1,0,1],[0,-1,0]]),(1,-1,-1),[[1,2,1],[1,2],
....: [1,2,1,2],[0]])
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: p_lambda_int(matrix([[0,1,0],[-1,0,1],[0,-1,0]]),(1,-1,-1),[[1,2,1],[1,2],
....: [1,2,1,2,1]]).rays()
(A ray in the direction (0, -1, 0),)
sage: p_lambda_int(matrix([[0,1,0],[-1,0,1],[0,-1,0]]),(1,-1,-1),[[0,1,2,0,1],[0
....: ,1,2],[0,1,2,0,1,2,0,1]])
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['A',2])
sage: c=[0,1]
sage: for v in sortables(A,c[1:]):
....:     p_lambda_int(B(A,c),lam(A,v),[[0]]+list(sortables(A,c[1:])))
....: 
A 0-dimensional polyhedron in QQ^2 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^2 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['A',3])
....: c=[0,1,2]
....: for v in sortables(A,c[1:]):
....:     p_lambda_int(B(A,c),lam(A,v),[[0]]+list(sortables(A,c[1:])))
....: 
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices
sage: A=CartanMatrix(['A',3])
....: c=[0,1,2]
....: for v in sortables(A,c[1:]):
....:     print(v,p_lambda_int(B(A,c),lam(A,v),[[0]]+list(sortables(A,c[1:]))))
....: 
[1, 2, 1] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[1, 2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[1] A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices
[2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[] A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices
sage: A=CartanMatrix(['A',3])
....: c=[0,1,2]
....: for v in sortables(A,c[1:]):
....:     print(v,p_lambda_int(B(A,c),lam(A,v),[[],[0]]+list(sortables(A,c[1:]))
....: ))
....: 
[1, 2, 1] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[1, 2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[1] A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices
[2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[] A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices
sage: [[],[0]]+list(sortables(A,c[1:])
....: )
[[], [0], [1, 2, 1], [1, 2], [1], [2], []]
sage: A=CartanMatrix(['A',3])
....: c=[0,1,2]
....: for v in sortables(A,c[1:]):
....:     print(v,p_lambda_int(B(A,c),lam(A,v),list(sortables(A,c[1:]))))
....: 
[1, 2, 1] A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray
[1, 2] A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray
[1] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray
[2] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray
[] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 1 ray
sage: A=CartanMatrix(['A',3])
....: c=[0,1,2]
....: for v in sortables(A,c[1:]):
....:     print(v,p_lambda_int(B(A,c),lam(A,v),list(sortables(A,c[1:]))+list([0]
....: +u for u in sortables(A,c[1:]))))
....: 
[1, 2, 1] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[1, 2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[1] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['A',4])
....: c=[0,1,2,3]
....: for v in sortables(A,c[1:]):
....:     print(v,p_lambda_int(B(A,c),lam(A,v),list(sortables(A,c[1:]))+list([0]
....: +u for u in sortables(A,c[1:]))))
....: 
[1, 2, 3, 1, 2, 1] A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[1, 2, 3, 1, 2] A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[1, 2, 3, 1] A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[1, 2, 3, 2] A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[1, 2, 3] A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[1, 2, 1] A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[1, 2] A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[1, 3] A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[1] A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[2, 3, 2] A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[2, 3] A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[2] A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[3] A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[] A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['A',4])
....: c=[0,1,2,3]
....: for v in sortables(A,c[1:]):
....:     print(v,p_lambda_int(B(A,c),lam(A,v),list(sortables(A,c[1:]))+list([0]
....: +u for u in sortables(A,c[1:]))).dimension())
....: 
[1, 2, 3, 1, 2, 1] 0
[1, 2, 3, 1, 2] 0
[1, 2, 3, 1] 0
[1, 2, 3, 2] 0
[1, 2, 3] 0
[1, 2, 1] 0
[1, 2] 0
[1, 3] 0
[1] 0
[2, 3, 2] 0
[2, 3] 0
[2] 0
[3] 0
[] 0
sage: A=CartanMatrix(['A',5])
....: c=[0,1,2,3,4]
....: for v in sortables(A,c[1:]):
....:     print(v,p_lambda_int(B(A,c),lam(A,v),list(sortables(A,c[1:]))+list([0]
....: +u for u in sortables(A,c[1:]))).dimension())
....: 
[1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
[1, 2, 3, 4, 1, 2, 3, 1, 2] 0
[1, 2, 3, 4, 1, 2, 3, 1] 0
[1, 2, 3, 4, 1, 2, 3, 2] 0
[1, 2, 3, 4, 1, 2, 3] 0
[1, 2, 3, 4, 1, 2, 1] 0
[1, 2, 3, 4, 1, 2] 0
[1, 2, 3, 4, 1, 3] 0
[1, 2, 3, 4, 1] 0
[1, 2, 3, 4, 2, 3, 2] 0
[1, 2, 3, 4, 2, 3] 0
[1, 2, 3, 4, 2] 0
[1, 2, 3, 4, 3] 0
[1, 2, 3, 4] 0
[1, 2, 3, 1, 2, 1] 0
[1, 2, 3, 1, 2] 0
[1, 2, 3, 1] 0
[1, 2, 3, 2] 0
[1, 2, 3] 0
[1, 2, 4, 1] 0
[1, 2, 4] 0
[1, 2, 1] 0
[1, 2] 0
[1, 3, 4, 3] 0
[1, 3, 4] 0
[1, 3] 0
[1, 4] 0
[1] 0
[2, 3, 4, 2, 3, 2] 0
[2, 3, 4, 2, 3] 0
[2, 3, 4, 2] 0
[2, 3, 4, 3] 0
[2, 3, 4] 0
[2, 3, 2] 0
[2, 3] 0
[2, 4] 0
[2] 0
[3, 4, 3] 0
[3, 4] 0
[3] 0
[4] 0
[] 0
sage: A=CartanMatrix(['A',6])
....: c=[0,1,2,3,4,5]
....: for v in sortables(A,c[1:]):
....:     print(v,p_lambda_int(B(A,c),lam(A,v),list(sortables(A,c[1:]))+list([0]
....: +u for u in sortables(A,c[1:]))).dimension())
....: 
[1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
[1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
[1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1] 0
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [600], line 4
      2 c=[Integer(0),Integer(1),Integer(2),Integer(3),Integer(4),Integer(5)]
      3 for v in sortables(A,c[Integer(1):]):
----> 4     print(v,p_lambda_int(B(A,c),lam(A,v),list(sortables(A,c[Integer(1):]))+list([Integer(0)]+u for u in sortables(A,c[Integer(1):]))).dimension())

File ~/git/affine_dominance/software/domination4.py:127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_faster(B, la, seqs[0])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_faster(B, la, s))
    128     if P.dimension()==0:
    129         break

File ~/git/affine_dominance/software/domination4.py:155, in p_lambda_faster(B, la, seq)
    153     P=Em*Pm
    154 elif Pm.dimension() < rk:
--> 155     P=Ep*Pp
    156 else:
    157     #print("Pp:   ",Pp,Pp.vertices(),Pp.rays(),Pp.lines(),"\n")
    158     #print("Pm:   ",Pm,Pm.vertices(),Pm.rays(),Pm.lines(),"\n\n")
    159     P=(Ep*Pp).convex_hull(Em*Pm)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4099, in sage.structure.element.Matrix.__mul__ (build/cythonized/sage/structure/element.c:35219)()
   4097 
   4098         if BOTH_ARE_ELEMENT(cl):
-> 4099             return coercion_model.bin_op(left, right, mul)
   4100 
   4101         cdef long value

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1222, in sage.structure.coerce.CoercionModel.bin_op (build/cythonized/sage/structure/coerce.c:15809)()
   1220 if action is not None:
   1221     if (<Action>action)._is_left:
-> 1222         return (<Action>action)._act_(x, y)
   1223     else:
   1224         return (<Action>action)._act_(y, x)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_actions.pyx:157, in sage.structure.coerce_actions.ActedUponAction._act_ (build/cythonized/sage/structure/coerce_actions.c:8579)()
    155     <... 'sage.structure.coerce_actions.ActedUponAction'>
    156 """
--> 157 return (<Element>x)._acted_upon_(g, not self._is_left)
    158 
    159 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:949, in sage.structure.element.Element._acted_upon_ (build/cythonized/sage/structure/element.c:16495)()
    947     return None
    948 
--> 949 cpdef _acted_upon_(self, x, bint self_on_left) noexcept:
    950     """
    951     Use this method to implement ``self`` acted on by x.

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1450, in Polyhedron_base5._acted_upon_(self, actor, self_on_left)
   1448         raise ValueError("matrices should act on the left")
   1449     else:
-> 1450         return self.linear_transformation(actor)
   1451 else:
   1452     return self.dilation(actor)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1879, in Polyhedron_base5.linear_transformation(self, linear_transf, new_base_ring)
   1873     pref_rep = 'Vrep' if self.n_vertices() <= self.n_inequalities() else 'Hrep'
   1875     return new_parent.element_class(new_parent, [new_vertices, new_rays, new_lines],
   1876                                     [new_inequalities, new_equations],
   1877                                     Vrep_minimal=True, Hrep_minimal=True, pref_rep=pref_rep)
-> 1879 return new_parent.element_class(new_parent, [tuple(new_vertices), tuple(new_rays), tuple(new_lines)], None)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:174, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    171     lines = tuple(lines)
    173 if vertices or rays or lines:
--> 174     self._init_from_Vrepresentation(vertices, rays, lines, **kwds)
    175 else:
    176     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:99, in Polyhedron_ppl._init_from_Vrepresentation(self, vertices, rays, lines, minimize, verbose)
     72 def _init_from_Vrepresentation(self, vertices, rays, lines, minimize=True, verbose=False):
     73     """
     74     Construct polyhedron from V-representation data.
     75 
   (...)
     97         sage: Polyhedron_ppl._init_from_Vrepresentation(p, [], [], [])
     98     """
---> 99     gs = self._convert_generators_to_ppl(vertices, rays, lines)
    100     if gs.empty():
    101         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'empty')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:473, in Polyhedron_ppl._convert_generators_to_ppl(vertices, rays, lines)
    471     vertices = []
    472 for v in vertices:
--> 473     gs.insert(Polyhedron_ppl._convert_generator_to_ppl(v, VERTEX))
    474 if rays is None:
    475     rays = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:442, in Polyhedron_ppl._convert_generator_to_ppl(v, typ)
    440 d = LCM_list([denominator(v_i) for v_i in v])
    441 if d.is_one():
--> 442     return ob(Linear_Expression(v, 0))
    443 else:
    444     dv = [ d*v_i for v_i in v ]

File ppl/linear_algebra.pyx:654, in ppl.linear_algebra.Linear_Expression.__init__()

File ppl/linear_algebra.pyx:49, in ppl.linear_algebra.PPL_Coefficient_from_pyobject()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:1107, in sage.structure.element.Element.__richcmp__ (build/cythonized/sage/structure/element.c:18121)()
   1105         return (<Element>self)._richcmp_(other, op)
   1106     else:
-> 1107         return coercion_model.richcmp(self, other, op)
   1108 
   1109 cpdef _richcmp_(left, right, int op) noexcept:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:2021, in sage.structure.coerce.CoercionModel.richcmp (build/cythonized/sage/structure/coerce.c:26173)()
   2019 # Coerce to a common parent
   2020 try:
-> 2021     x, y = self.canonical_coercion(x, y)
   2022 except (TypeError, NotImplementedError):
   2023     pass

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1422, in sage.structure.coerce.CoercionModel.canonical_coercion (build/cythonized/sage/structure/coerce.c:18956)()
   1420             self._record_exception()
   1421 
-> 1422     raise TypeError("no common canonical parent for objects with parents: '%s' and '%s'"%(xp, yp))
   1423 
   1424 cpdef coercion_maps(self, R, S) noexcept:

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['A',6])
....: c=[0,1,2,3,4,5]
....: seqs=[]
....: for u in sortables(A,c[1:]):
....:     seqs=seqs+[u,[0]+u]
....: for v in sortables(A,c[1:]):
....:     print(v,p_lambda_int(B(A,c),lam(A,v),seqs).dimension())
....: 
[1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
[1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
[1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1] 0
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [601], line 7
      5     seqs=seqs+[u,[Integer(0)]+u]
      6 for v in sortables(A,c[Integer(1):]):
----> 7     print(v,p_lambda_int(B(A,c),lam(A,v),seqs).dimension())

File ~/git/affine_dominance/software/domination4.py:127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_faster(B, la, seqs[0])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_faster(B, la, s))
    128     if P.dimension()==0:
    129         break

File ~/git/affine_dominance/software/domination4.py:147, in p_lambda_faster(B, la, seq)
    145 Em = E(B, k, -1)
    146 Hp = Polyhedron(ieqs=[(0,)*(k+1)+(1,)+(0,)*(m-k-1)])
--> 147 Hm = Polyhedron(ieqs=[(0,)*(k+1)+(-1,)+(0,)*(m-k-1)])
    148 #print("Hp:   ",Hp,Hp.vertices(),Hp.rays(),Hp.lines(),"\n")
    149 #print("Hm:   ",Hm,Hm.vertices(),Hm.rays(),Hm.lines(),"\n\n")
    150 Pp = P.intersection(Hp)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/constructor.py:768, in Polyhedron(vertices, rays, lines, ieqs, eqns, ambient_dim, base_ring, minimize, verbose, backend, mutable)
    766 if got_Vrep:
    767     Vrep = [vertices, rays, lines]
--> 768 return parent(Vrep, Hrep, convert=convert, verbose=verbose, mutable=mutable)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/parent.pyx:903, in sage.structure.parent.Parent.__call__ (build/cythonized/sage/structure/parent.c:12685)()
    901         return mor._call_(x)
    902     else:
--> 903         return mor._call_with_args(x, args, kwds)
    904 
    905 raise TypeError(_LazyString("No conversion defined from %s to %s", (R, self), {}))

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:177, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_with_args (build/cythonized/sage/structure/coerce_maps.c:7430)()
    175             return C._element_constructor(x, *args)
    176         else:
--> 177             return C._element_constructor(x, *args, **kwds)
    178 except Exception:
    179     if print_warnings:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:695, in Polyhedra_base._element_constructor_(self, *args, **kwds)
    693     if convert and Vrep:
    694         Vrep = [convert_base_ring(_) for _ in Vrep]
--> 695     return self.element_class(self, Vrep, Hrep, **kwds)
    696 if nargs == 1 and is_Polyhedron(args[0]):
    697     copy = kwds.pop('copy', args[0].parent() is not self)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:70, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
---> 70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:189, in Polyhedron_ppl.set_immutable(self)
    187 if not hasattr(self, '_Vrepresentation'):
    188     try:
--> 189         self._init_Vrepresentation_from_ppl(True)
    190     except TypeError as e:
    191         # Apparently the polyhedron is (no longer) integral.
    192         self._clear_cache()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:313, in Polyhedron_ppl._init_Vrepresentation_from_ppl(self, minimize)
    311     parent._make_Ray(self, coefficients)
    312 elif g.is_line():
--> 313     parent._make_Line(self, coefficients)
    314 else:
    315     assert False

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:1177, in Polyhedra_base._make_Line(self, polyhedron, data)
   1175 except IndexError:
   1176     obj = Line(self)
-> 1177 obj._set_data(polyhedron, data)
   1178 return obj

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/representation.py:1179, in Vrepresentation._set_data(self, polyhedron, data)
   1177 polyhedron._Vrepresentation.append(self)
   1178 self._polyhedron = polyhedron
-> 1179 if polyhedron.is_mutable():
   1180     polyhedron._add_dependent_object(self)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base_mutable.py:137, in Polyhedron_mutable.is_mutable(self)
    134         raise ValueError
    135     self._dependent_objects.append(ob)
--> 137 def is_mutable(self):
    138     r"""
    139     Return True if the polyhedron is mutable, i.e. it can be modified in place.
    140 
   (...)
    148         False
    149     """
    150     return self._is_mutable

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['A',6])
....: c=[0,1,2,3,4,5]
....: seqs=[]
....: for u in sortables(A,c[1:]):
....:     seqs=seqs+[u,[0]+u]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     print(num,v,p_lambda_int(B(A,c),lam(A,v),seqs).dimension())
....: 

1 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
2 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
3 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1] 0
4 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 2] 0
5 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] 0
6 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1] 0
7 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] 0
8 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 3] 0
9 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1] 0
10 [1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3, 2] 0
11 [1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3] 0
12 [1, 2, 3, 4, 5, 1, 2, 3, 4, 2] 0
13 [1, 2, 3, 4, 5, 1, 2, 3, 4, 3] 0
14 [1, 2, 3, 4, 5, 1, 2, 3, 4] 0
15 [1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1] 0
16 [1, 2, 3, 4, 5, 1, 2, 3, 1, 2] 0
17 [1, 2, 3, 4, 5, 1, 2, 3, 1] 0
18 [1, 2, 3, 4, 5, 1, 2, 3, 2] 0
19 [1, 2, 3, 4, 5, 1, 2, 3] 0
20 [1, 2, 3, 4, 5, 1, 2, 4, 1] 0
21 [1, 2, 3, 4, 5, 1, 2, 4] 0
22 [1, 2, 3, 4, 5, 1, 2, 1] 0
23 [1, 2, 3, 4, 5, 1, 2] 0
24 [1, 2, 3, 4, 5, 1, 3, 4, 3] 0
25 [1, 2, 3, 4, 5, 1, 3, 4] 0
26 [1, 2, 3, 4, 5, 1, 3] 0
27 [1, 2, 3, 4, 5, 1, 4] 0
28 [1, 2, 3, 4, 5, 1] 0
29 [1, 2, 3, 4, 5, 2, 3, 4, 2, 3, 2] 0
30 [1, 2, 3, 4, 5, 2, 3, 4, 2, 3] 0
31 [1, 2, 3, 4, 5, 2, 3, 4, 2] 0
32 [1, 2, 3, 4, 5, 2, 3, 4, 3] 0
33 [1, 2, 3, 4, 5, 2, 3, 4] 0
34 [1, 2, 3, 4, 5, 2, 3, 2] 0
35 [1, 2, 3, 4, 5, 2, 3] 0
36 [1, 2, 3, 4, 5, 2, 4] 0
37 [1, 2, 3, 4, 5, 2] 0
38 [1, 2, 3, 4, 5, 3, 4, 3] 0
39 [1, 2, 3, 4, 5, 3, 4] 0
40 [1, 2, 3, 4, 5, 3] 0
41 [1, 2, 3, 4, 5, 4] 0
42 [1, 2, 3, 4, 5] 0
43 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
44 [1, 2, 3, 4, 1, 2, 3, 1, 2] 0
45 [1, 2, 3, 4, 1, 2, 3, 1] 0
46 [1, 2, 3, 4, 1, 2, 3, 2] 0
47 [1, 2, 3, 4, 1, 2, 3] 0
48 [1, 2, 3, 4, 1, 2, 1] 0
49 [1, 2, 3, 4, 1, 2] 0
50 [1, 2, 3, 4, 1, 3] 0
51 [1, 2, 3, 4, 1] 0
52 [1, 2, 3, 4, 2, 3, 2] 0
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [602], line 9
      7 for v in sortables(A,c[Integer(1):]):
      8     num+=Integer(1)
----> 9     print(num,v,p_lambda_int(B(A,c),lam(A,v),seqs).dimension())

File ~/git/affine_dominance/software/domination4.py:127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_faster(B, la, seqs[0])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_faster(B, la, s))
    128     if P.dimension()==0:
    129         break

File ~/git/affine_dominance/software/domination4.py:159, in p_lambda_faster(B, la, seq)
    155         P=Ep*Pp
    156     else:
    157         #print("Pp:   ",Pp,Pp.vertices(),Pp.rays(),Pp.lines(),"\n")
    158         #print("Pm:   ",Pm,Pm.vertices(),Pm.rays(),Pm.lines(),"\n\n")
--> 159         P=(Ep*Pp).convex_hull(Em*Pm)
    160     B.mutate(k)
    161 return P

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4099, in sage.structure.element.Matrix.__mul__ (build/cythonized/sage/structure/element.c:35219)()
   4097 
   4098         if BOTH_ARE_ELEMENT(cl):
-> 4099             return coercion_model.bin_op(left, right, mul)
   4100 
   4101         cdef long value

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1222, in sage.structure.coerce.CoercionModel.bin_op (build/cythonized/sage/structure/coerce.c:15809)()
   1220 if action is not None:
   1221     if (<Action>action)._is_left:
-> 1222         return (<Action>action)._act_(x, y)
   1223     else:
   1224         return (<Action>action)._act_(y, x)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_actions.pyx:157, in sage.structure.coerce_actions.ActedUponAction._act_ (build/cythonized/sage/structure/coerce_actions.c:8579)()
    155     <... 'sage.structure.coerce_actions.ActedUponAction'>
    156 """
--> 157 return (<Element>x)._acted_upon_(g, not self._is_left)
    158 
    159 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:949, in sage.structure.element.Element._acted_upon_ (build/cythonized/sage/structure/element.c:16495)()
    947     return None
    948 
--> 949 cpdef _acted_upon_(self, x, bint self_on_left) noexcept:
    950     """
    951     Use this method to implement ``self`` acted on by x.

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1450, in Polyhedron_base5._acted_upon_(self, actor, self_on_left)
   1448         raise ValueError("matrices should act on the left")
   1449     else:
-> 1450         return self.linear_transformation(actor)
   1451 else:
   1452     return self.dilation(actor)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1879, in Polyhedron_base5.linear_transformation(self, linear_transf, new_base_ring)
   1873     pref_rep = 'Vrep' if self.n_vertices() <= self.n_inequalities() else 'Hrep'
   1875     return new_parent.element_class(new_parent, [new_vertices, new_rays, new_lines],
   1876                                     [new_inequalities, new_equations],
   1877                                     Vrep_minimal=True, Hrep_minimal=True, pref_rep=pref_rep)
-> 1879 return new_parent.element_class(new_parent, [tuple(new_vertices), tuple(new_rays), tuple(new_lines)], None)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:70, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
---> 70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:195, in Polyhedron_ppl.set_immutable(self)
    193         raise e
    194 if not hasattr(self, '_Hrepresentation'):
--> 195     self._init_Hrepresentation_from_ppl(True)
    196 self._is_mutable = False

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:343, in Polyhedron_ppl._init_Hrepresentation_from_ppl(self, minimize)
    341 parent = self.parent()
    342 for c in cs:
--> 343     if c.is_inequality():
    344         parent._make_Inequality(self, (c.inhomogeneous_term(),) + c.coefficients())
    345     elif c.is_equality():

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
### reloading attached file domination4.py modified at 17:37:36 ###
sage: A=CartanMatrix(['B',3])
....: c=[0,1,2]
....: seqs=[]
....: for u in sortables(A,c[1:]):
....:     seqs=seqs+[u,[0]+u]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     print(num,v,p_lambda_int(B(A,c),lam(A,v),seqs).dimension())
....: 
1 [1, 2, 1, 2] 0
2 [1, 2, 1] 0
3 [1, 2] 1
4 [1] 1
5 [2] 0
6 [] 0
sage: A=CartanMatrix(['B',3])
....: c=[0,1,2]
....: seqs=[]
....: for u in sortables(A,c[1:]):
....:     seqs=seqs+[u,[0]+u]
....: seqs=K(c,v)
....: 
sage: A=CartanMatrix(['B',3])
....: c=[0,1,2]
....: seqs=[]
....: for u in sortables(A,c[1:]):
....:     seqs=seqs+[u,[0]+u]
....: seqs==K(c,v)
False
sage: seqa
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
Cell In [606], line 1
----> 1 seqa

NameError: name 'seqa' is not defined
sage: seqs
[[1, 2, 1, 2],
 [0, 1, 2, 1, 2],
 [1, 2, 1],
 [0, 1, 2, 1],
 [1, 2],
 [0, 1, 2],
 [1],
 [0, 1],
 [2],
 [0, 2],
 [],
 [0]]
sage: A=CartanMatrix(['B',3])
....: c=[0,1,2]
....: seqs=[]
....: for u in sortables(A,c[1:]):
....:     seqs=seqs+[u,[0]+u]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     print(num,v,p_lambda_int(B(A,c),lam(A,v),seqs).dimension())
....: 
1 [1, 2, 1, 2] 0
2 [1, 2, 1] 0
3 [1, 2] 1
4 [1] 1
5 [2] 0
6 [] 0
sage: A=CartanMatrix(['A',3])
....: c=[0,1,2]
....: seqs=[]
....: for u in sortables(A,c[1:]):
....:     seqs=seqs+[u,[0]+u]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     print(num,v,p_lambda_int(B(A,c),lam(A,v),seqs).dimension())
....: 
1 [1, 2, 1] 0
2 [1, 2] 0
3 [1] 0
4 [2] 0
5 [] 0
sage: A=CartanMatrix(['B',3])
....: c=[0,1,2]
....: seqs=[]
....: for u in sortables(A,c[1:]):
....:     seqs=seqs+[u,[0]+u]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     print(num,v,p_lambda_int(B(A,c),lam(A,v),list(sortables(A,c[1:]))).dim
....: ension())
....: 
1 [1, 2, 1, 2] 1
2 [1, 2, 1] 1
3 [1, 2] 2
4 [1] 2
5 [2] 2
6 [] 2
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: seqs=[]
....: for u in sortables(A,c[1:]):
....:     seqs=seqs+[u,[0]+u]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     print(num,v,p_lambda_int(B(A,c),lam(A,v),list(sortables(A,c[1:]))).dim
....: ension())
....: 
1 [1, 2, 1, 2] 1
2 [1, 2, 1] 1
3 [1, 2] 2
4 [1] 2
5 [2] 2
6 [] 2
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: seqs=[]
....: for u in sortables(A,c[1:]):
....:     seqs=seqs+[u,[0]+u]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     print(num,v,p_lambda_int(B(A,c),lam(A,v),seqs).dimension())
....: 
1 [1, 2, 1, 2] 0
2 [1, 2, 1] 0
3 [1, 2] 1
4 [1] 1
5 [2] 0
6 [] 0
sage: B(A,c)
[ 0  1  0]
[-1  0  2]
[ 0 -1  0]
sage: A=CartanMatrix(['C',3])
....: c=[2,1,0]
....: seqs=[]
....: for u in sortables(A,c[1:]):
....:     seqs=seqs+[u,[0]+u]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     print(num,v,p_lambda_int(B(A,c),lam(A,v),seqs).dimension())
1 [1, 0, 1] 1
2 [1, 0] 1
3 [1] 2
4 [0] 2
5 [] 2
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: seqs=[]
....: for u in sortables(A,c[1:]):
....:     seqs=seqs+[u,[0]+u]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     print(num,v,p_lambda_int(B(A,c),lam(A,v),seqs).dimension())
1 [1, 2, 1, 2] 0
2 [1, 2, 1] 0
3 [1, 2] 1
4 [1] 1
5 [2] 0
6 [] 0
sage: A=CartanMatrix(['A',3])
....: c=[0,1,2]
....: seqs=[]
....: for u in sortables(A,c[1:]):
....:     seqs=seqs+[u,[0]+u]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     print(num,v,p_lambda_int(B(A,c),lam(A,v),seqs).dimension())
1 [1, 2, 1] 0
2 [1, 2] 0
3 [1] 0
4 [2] 0
5 [] 0
sage: A=CartanMatrix(['A',3])
....: c=[0,1,2]
....: seqs=[]
....: for u in sortables(A,c[1:]):
....:     seqs=seqs+[u,u+[0]]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     print(num,v,p_lambda_int(B(A,c),lam(A,v),seqs).dimension())
....: 
1 [1, 2, 1] 0
2 [1, 2] 0
3 [1] 0
4 [2] 0
5 [] 0
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: seqs=[]
....: for u in sortables(A,c[1:]):
....:     seqs=seqs+[u,u+[0]]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     print(num,v,p_lambda_int(B(A,c),lam(A,v),seqs).dimension())
....: 
1 [1, 2, 1, 2] 0
2 [1, 2, 1] 0
3 [1, 2] 0
4 [1] 0
5 [2] 0
6 [] 0
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2]
....: seqs=[]
....: for u in sortables(A,c[1:]):
....:     seqs=seqs+[u,u+[0]]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     print(num,v,p_lambda_int(B(A,c),lam(A,v),seqs).dimension())
....: 
---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
Cell In [619], line 9
      7 for v in sortables(A,c[Integer(1):]):
      8     num+=Integer(1)
----> 9     print(num,v,p_lambda_int(B(A,c),lam(A,v),seqs).dimension())

File ~/git/affine_dominance/software/domination4.py:173, in B(A, c)
    171     out[i,i]=0
    172     for j in range(i+1,n):
--> 173         out[c[i],c[j]]=-A[c[i],c[j]]
    174         out[c[j],c[i]]=A[c[j],c[i]]
    175 return out

IndexError: list index out of range
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: seqs=[]
....: for u in sortables(A,c[1:]):
....:     seqs=seqs+[u,u+[0]]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     print(num,v,p_lambda_int(B(A,c),lam(A,v),seqs).dimension())
....: 
1 [1, 2, 3, 1, 2, 3, 1, 2, 3] 0
2 [1, 2, 3, 1, 2, 3, 1, 2] 0
3 [1, 2, 3, 1, 2, 3, 1] 0
4 [1, 2, 3, 1, 2, 3] 0
5 [1, 2, 3, 1, 2, 1] 0
6 [1, 2, 3, 1, 2] 0
7 [1, 2, 3, 1] 0
8 [1, 2, 3, 2, 3] 0
9 [1, 2, 3, 2] 0
10 [1, 2, 3] 0
11 [1, 2, 1] 0
12 [1, 2] 0
13 [1, 3] 0
14 [1] 0
15 [2, 3, 2, 3] 0
16 [2, 3, 2] 0
17 [2, 3] 0
18 [2] 0
19 [3] 0
20 [] 0
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: seqs=[]
....: for u in sortables(A,c[1:]):
....:     seqs=seqs+[u,u+[0]]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     print(num,v,p_lambda_int(B(A,c),lam(A,v),seqs).dimension())
1 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
2 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
3 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
4 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1] 0
5 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
6 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
7 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1] 0
8 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
9 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1] 0
10 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
11 [1, 2, 3, 4, 1, 2, 3, 4, 1] 0
12 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4] 0
13 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3] 0
14 [1, 2, 3, 4, 1, 2, 3, 4, 2] 0
15 [1, 2, 3, 4, 1, 2, 3, 4] 0
16 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
17 [1, 2, 3, 4, 1, 2, 3, 1, 2] 0
18 [1, 2, 3, 4, 1, 2, 3, 1] 0
19 [1, 2, 3, 4, 1, 2, 3, 2] 0
20 [1, 2, 3, 4, 1, 2, 3] 0
21 [1, 2, 3, 4, 1, 2, 1] 0
22 [1, 2, 3, 4, 1, 2] 0
23 [1, 2, 3, 4, 1, 3, 4] 0
24 [1, 2, 3, 4, 1, 3] 0
25 [1, 2, 3, 4, 1] 0
26 [1, 2, 3, 4, 2, 3, 4, 2, 3, 4] 0
27 [1, 2, 3, 4, 2, 3, 4, 2, 3] 0
28 [1, 2, 3, 4, 2, 3, 4, 2] 0
29 [1, 2, 3, 4, 2, 3, 4] 0
30 [1, 2, 3, 4, 2, 3, 2] 0
31 [1, 2, 3, 4, 2, 3] 0
32 [1, 2, 3, 4, 2] 0
33 [1, 2, 3, 4, 3, 4] 0
34 [1, 2, 3, 4, 3] 0
35 [1, 2, 3, 4] 0
36 [1, 2, 3, 1, 2, 1] 0
37 [1, 2, 3, 1, 2] 0
38 [1, 2, 3, 1] 0
39 [1, 2, 3, 2] 0
40 [1, 2, 3] 0
41 [1, 2, 4, 1] 0
42 [1, 2, 4] 0
43 [1, 2, 1] 0
44 [1, 2] 0
45 [1, 3, 4, 3, 4] 0
46 [1, 3, 4, 3] 0
47 [1, 3, 4] 0
48 [1, 3] 0
49 [1, 4] 0
50 [1] 0
51 [2, 3, 4, 2, 3, 4, 2, 3, 4] 0
52 [2, 3, 4, 2, 3, 4, 2, 3] 0
53 [2, 3, 4, 2, 3, 4, 2] 0
54 [2, 3, 4, 2, 3, 4] 0
55 [2, 3, 4, 2, 3, 2] 0
56 [2, 3, 4, 2, 3] 0
57 [2, 3, 4, 2] 0
58 [2, 3, 4, 3, 4] 0
59 [2, 3, 4, 3] 0
60 [2, 3, 4] 0
61 [2, 3, 2] 0
62 [2, 3] 0
63 [2, 4] 0
64 [2] 0
65 [3, 4, 3, 4] 0
66 [3, 4, 3] 0
67 [3, 4] 0
68 [3] 0
69 [4] 0
70 [] 0
sage: A=CartanMatrix(['C',6])
....: c=[0,1,2,3,4,5]
....: seqs=[]
....: for u in sortables(A,c[1:]):
....:     seqs=seqs+[u,u+[0]]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     print(num,v,p_lambda_int(B(A,c),lam(A,v),seqs).dimension())
1 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5] 0
2 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4] 0
3 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3] 0
4 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2] 0
5 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1] 0
6 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5] 0
7 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] 0
8 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] 0
9 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1] 0
10 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4] 0
11 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2] 0
12 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1] 0
13 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3] 0
14 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 1] 0
15 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2] 0
16 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1] 0
17 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5] 0
18 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4] 0
19 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3] 0
20 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2] 0
21 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5] 0
22 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
23 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1] 0
24 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] 0
25 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1] 0
26 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] 0
27 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1] 0
28 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3] 0
29 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2] 0
30 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4] 0
31 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1] 0
32 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2] 0
33 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1] 0
34 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 2] 0
35 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3] 0
36 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 1] 0
37 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2] 0
38 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 3, 4, 5] 0
39 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 3, 4] 0
40 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 3] 0
41 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1] 0
42 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5] 0
43 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4] 0
44 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3] 0
45 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2] 0
46 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5] 0
47 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 2, 3] 0
48 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 2] 0
49 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4] 0
50 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 2] 0
51 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3] 0
52 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2] 0
53 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 3, 4, 5] 0
54 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 3, 4] 0
55 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 3] 0
56 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5] 0
57 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
58 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
59 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1] 0
60 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 2] 0
61 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] 0
62 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1] 0
63 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] 0
64 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 3] 0
65 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1] 0
66 [1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3, 2] 0
67 [1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3] 0
68 [1, 2, 3, 4, 5, 1, 2, 3, 4, 2] 0
69 [1, 2, 3, 4, 5, 1, 2, 3, 4, 3] 0
70 [1, 2, 3, 4, 5, 1, 2, 3, 4] 0
71 [1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1] 0
72 [1, 2, 3, 4, 5, 1, 2, 3, 1, 2] 0
73 [1, 2, 3, 4, 5, 1, 2, 3, 1] 0
74 [1, 2, 3, 4, 5, 1, 2, 3, 2] 0
75 [1, 2, 3, 4, 5, 1, 2, 3] 0
76 [1, 2, 3, 4, 5, 1, 2, 4, 5, 1] 0
77 [1, 2, 3, 4, 5, 1, 2, 4, 5] 0
78 [1, 2, 3, 4, 5, 1, 2, 4, 1] 0
79 [1, 2, 3, 4, 5, 1, 2, 4] 0
80 [1, 2, 3, 4, 5, 1, 2, 1] 0
81 [1, 2, 3, 4, 5, 1, 2] 0
82 [1, 2, 3, 4, 5, 1, 3, 4, 5, 3, 4, 5] 0
83 [1, 2, 3, 4, 5, 1, 3, 4, 5, 3, 4] 0
84 [1, 2, 3, 4, 5, 1, 3, 4, 5, 3] 0
85 [1, 2, 3, 4, 5, 1, 3, 4, 5] 0
86 [1, 2, 3, 4, 5, 1, 3, 4, 3] 0
87 [1, 2, 3, 4, 5, 1, 3, 4] 0
88 [1, 2, 3, 4, 5, 1, 3] 0
89 [1, 2, 3, 4, 5, 1, 4, 5] 0
90 [1, 2, 3, 4, 5, 1, 4] 0
91 [1, 2, 3, 4, 5, 1] 0
92 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5] 0
93 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4] 0
94 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3] 0
95 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2] 0
96 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5] 0
97 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 2, 3] 0
98 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 2] 0
99 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4] 0
100 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 2] 0
101 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3] 0
102 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2] 0
103 [1, 2, 3, 4, 5, 2, 3, 4, 5, 3, 4, 5] 0
104 [1, 2, 3, 4, 5, 2, 3, 4, 5, 3, 4] 0
105 [1, 2, 3, 4, 5, 2, 3, 4, 5, 3] 0
106 [1, 2, 3, 4, 5, 2, 3, 4, 5] 0
107 [1, 2, 3, 4, 5, 2, 3, 4, 2, 3, 2] 0
108 [1, 2, 3, 4, 5, 2, 3, 4, 2, 3] 0
109 [1, 2, 3, 4, 5, 2, 3, 4, 2] 0
110 [1, 2, 3, 4, 5, 2, 3, 4, 3] 0
111 [1, 2, 3, 4, 5, 2, 3, 4] 0
112 [1, 2, 3, 4, 5, 2, 3, 2] 0
113 [1, 2, 3, 4, 5, 2, 3] 0
114 [1, 2, 3, 4, 5, 2, 4, 5] 0
115 [1, 2, 3, 4, 5, 2, 4] 0
116 [1, 2, 3, 4, 5, 2] 0
117 [1, 2, 3, 4, 5, 3, 4, 5, 3, 4, 5] 0
118 [1, 2, 3, 4, 5, 3, 4, 5, 3, 4] 0
119 [1, 2, 3, 4, 5, 3, 4, 5, 3] 0
120 [1, 2, 3, 4, 5, 3, 4, 5] 0
121 [1, 2, 3, 4, 5, 3, 4, 3] 0
122 [1, 2, 3, 4, 5, 3, 4] 0
123 [1, 2, 3, 4, 5, 3] 0
124 [1, 2, 3, 4, 5, 4, 5] 0
125 [1, 2, 3, 4, 5, 4] 0
126 [1, 2, 3, 4, 5] 0
127 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
128 [1, 2, 3, 4, 1, 2, 3, 1, 2] 0
129 [1, 2, 3, 4, 1, 2, 3, 1] 0
130 [1, 2, 3, 4, 1, 2, 3, 2] 0
131 [1, 2, 3, 4, 1, 2, 3] 0
132 [1, 2, 3, 4, 1, 2, 1] 0
133 [1, 2, 3, 4, 1, 2] 0
134 [1, 2, 3, 4, 1, 3] 0
135 [1, 2, 3, 4, 1] 0
136 [1, 2, 3, 4, 2, 3, 2] 0
137 [1, 2, 3, 4, 2, 3] 0
138 [1, 2, 3, 4, 2] 0
139 [1, 2, 3, 4, 3] 0
140 [1, 2, 3, 4] 0
141 [1, 2, 3, 5, 1, 2, 1] 0
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [622], line 9
      7 for v in sortables(A,c[Integer(1):]):
      8     num+=Integer(1)
----> 9     print(num,v,p_lambda_int(B(A,c),lam(A,v),seqs).dimension())

File ~/git/affine_dominance/software/domination4.py:127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_faster(B, la, seqs[0])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_faster(B, la, s))
    128     if P.dimension()==0:
    129         break

File ~/git/affine_dominance/software/domination4.py:159, in p_lambda_faster(B, la, seq)
    155         P=Ep*Pp
    156     else:
    157         #print("Pp:   ",Pp,Pp.vertices(),Pp.rays(),Pp.lines(),"\n")
    158         #print("Pm:   ",Pm,Pm.vertices(),Pm.rays(),Pm.lines(),"\n\n")
--> 159         P=(Ep*Pp).convex_hull(Em*Pm)
    160     B.mutate(k)
    161 return P

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1312, in Polyhedron_base5.convex_hull(self, other)
   1310 hull_rays = self.rays() + other.rays()
   1311 hull_lines = self.lines() + other.lines()
-> 1312 return self.parent().element_class(self.parent(), [hull_vertices, hull_rays, hull_lines], None)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:174, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    171     lines = tuple(lines)
    173 if vertices or rays or lines:
--> 174     self._init_from_Vrepresentation(vertices, rays, lines, **kwds)
    175 else:
    176     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:99, in Polyhedron_ppl._init_from_Vrepresentation(self, vertices, rays, lines, minimize, verbose)
     72 def _init_from_Vrepresentation(self, vertices, rays, lines, minimize=True, verbose=False):
     73     """
     74     Construct polyhedron from V-representation data.
     75 
   (...)
     97         sage: Polyhedron_ppl._init_from_Vrepresentation(p, [], [], [])
     98     """
---> 99     gs = self._convert_generators_to_ppl(vertices, rays, lines)
    100     if gs.empty():
    101         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'empty')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:473, in Polyhedron_ppl._convert_generators_to_ppl(vertices, rays, lines)
    471     vertices = []
    472 for v in vertices:
--> 473     gs.insert(Polyhedron_ppl._convert_generator_to_ppl(v, VERTEX))
    474 if rays is None:
    475     rays = []

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
### reloading attached file domination4.py modified at 00:55:38 ###
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),K(c,v)).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
....: 
---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
Cell In [623], line 6
      4 for v in sortables(A,c[Integer(1):]):
      5     num+=Integer(1)
----> 6     d=p_lambda_int(B(A,c),lam(A,v),K(c,v)).dimension()
      7     print(num,v,d)
      8     if d!=Integer(0):

File ~/git/affine_dominance/software/domination4.py:173, in B(A, c)
    171     out[i,i]=0
    172     for j in range(i+1,n):
--> 173         out[c[i],c[j]]=-A[c[i],c[j]]
    174         out[c[j],c[i]]=A[c[j],c[i]]
    175 return out

IndexError: list index out of range
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),K(c,v)).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
....: 
1 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
2 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
3 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1] 0
4 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 2] 0
5 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] 0
6 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1] 0
7 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] 0
8 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 3] 0
9 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1] 0
10 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3, 2] 0
11 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3] 0
12 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2] 0
13 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 3] 0
14 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4] 0
15 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1] 0
16 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2] 0
17 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1] 0
18 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 2] 0
19 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3] 0
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [624], line 6
      4 for v in sortables(A,c[Integer(1):]):
      5     num+=Integer(1)
----> 6     d=p_lambda_int(B(A,c),lam(A,v),K(c,v)).dimension()
      7     print(num,v,d)
      8     if d!=Integer(0):

File ~/git/affine_dominance/software/domination4.py:127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_faster(B, la, seqs[0])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_faster(B, la, s))
    128     if P.dimension()==0:
    129         break

File ~/git/affine_dominance/software/domination4.py:159, in p_lambda_faster(B, la, seq)
    155         P=Ep*Pp
    156     else:
    157         #print("Pp:   ",Pp,Pp.vertices(),Pp.rays(),Pp.lines(),"\n")
    158         #print("Pm:   ",Pm,Pm.vertices(),Pm.rays(),Pm.lines(),"\n\n")
--> 159         P=(Ep*Pp).convex_hull(Em*Pm)
    160     B.mutate(k)
    161 return P

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4099, in sage.structure.element.Matrix.__mul__ (build/cythonized/sage/structure/element.c:35219)()
   4097 
   4098         if BOTH_ARE_ELEMENT(cl):
-> 4099             return coercion_model.bin_op(left, right, mul)
   4100 
   4101         cdef long value

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1222, in sage.structure.coerce.CoercionModel.bin_op (build/cythonized/sage/structure/coerce.c:15809)()
   1220 if action is not None:
   1221     if (<Action>action)._is_left:
-> 1222         return (<Action>action)._act_(x, y)
   1223     else:
   1224         return (<Action>action)._act_(y, x)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_actions.pyx:157, in sage.structure.coerce_actions.ActedUponAction._act_ (build/cythonized/sage/structure/coerce_actions.c:8579)()
    155     <... 'sage.structure.coerce_actions.ActedUponAction'>
    156 """
--> 157 return (<Element>x)._acted_upon_(g, not self._is_left)
    158 
    159 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:949, in sage.structure.element.Element._acted_upon_ (build/cythonized/sage/structure/element.c:16495)()
    947     return None
    948 
--> 949 cpdef _acted_upon_(self, x, bint self_on_left) noexcept:
    950     """
    951     Use this method to implement ``self`` acted on by x.

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1450, in Polyhedron_base5._acted_upon_(self, actor, self_on_left)
   1448         raise ValueError("matrices should act on the left")
   1449     else:
-> 1450         return self.linear_transformation(actor)
   1451 else:
   1452     return self.dilation(actor)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1879, in Polyhedron_base5.linear_transformation(self, linear_transf, new_base_ring)
   1873     pref_rep = 'Vrep' if self.n_vertices() <= self.n_inequalities() else 'Hrep'
   1875     return new_parent.element_class(new_parent, [new_vertices, new_rays, new_lines],
   1876                                     [new_inequalities, new_equations],
   1877                                     Vrep_minimal=True, Hrep_minimal=True, pref_rep=pref_rep)
-> 1879 return new_parent.element_class(new_parent, [tuple(new_vertices), tuple(new_rays), tuple(new_lines)], None)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:174, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    171     lines = tuple(lines)
    173 if vertices or rays or lines:
--> 174     self._init_from_Vrepresentation(vertices, rays, lines, **kwds)
    175 else:
    176     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:99, in Polyhedron_ppl._init_from_Vrepresentation(self, vertices, rays, lines, minimize, verbose)
     72 def _init_from_Vrepresentation(self, vertices, rays, lines, minimize=True, verbose=False):
     73     """
     74     Construct polyhedron from V-representation data.
     75 
   (...)
     97         sage: Polyhedron_ppl._init_from_Vrepresentation(p, [], [], [])
     98     """
---> 99     gs = self._convert_generators_to_ppl(vertices, rays, lines)
    100     if gs.empty():
    101         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'empty')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:477, in Polyhedron_ppl._convert_generators_to_ppl(vertices, rays, lines)
    475     rays = []
    476 for r in rays:
--> 477     gs.insert(Polyhedron_ppl._convert_generator_to_ppl(r, RAY))
    478 if lines is None:
    479     lines = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:442, in Polyhedron_ppl._convert_generator_to_ppl(v, typ)
    440 d = LCM_list([denominator(v_i) for v_i in v])
    441 if d.is_one():
--> 442     return ob(Linear_Expression(v, 0))
    443 else:
    444     dv = [ d*v_i for v_i in v ]

File ppl/linear_algebra.pyx:654, in ppl.linear_algebra.Linear_Expression.__init__()

File ppl/linear_algebra.pyx:49, in ppl.linear_algebra.PPL_Coefficient_from_pyobject()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:1107, in sage.structure.element.Element.__richcmp__ (build/cythonized/sage/structure/element.c:18121)()
   1105         return (<Element>self)._richcmp_(other, op)
   1106     else:
-> 1107         return coercion_model.richcmp(self, other, op)
   1108 
   1109 cpdef _richcmp_(left, right, int op) noexcept:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:2021, in sage.structure.coerce.CoercionModel.richcmp (build/cythonized/sage/structure/coerce.c:26173)()
   2019 # Coerce to a common parent
   2020 try:
-> 2021     x, y = self.canonical_coercion(x, y)
   2022 except (TypeError, NotImplementedError):
   2023     pass

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1422, in sage.structure.coerce.CoercionModel.canonical_coercion (build/cythonized/sage/structure/coerce.c:18956)()
   1420             self._record_exception()
   1421 
-> 1422     raise TypeError("no common canonical parent for objects with parents: '%s' and '%s'"%(xp, yp))
   1423 
   1424 cpdef coercion_maps(self, R, S) noexcept:

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),K(c,v)).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
....: 
1 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
2 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
3 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1] 0
4 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 2] 0
5 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] 0
6 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1] 0
7 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] 0
8 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 3] 0
9 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1] 0
10 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3, 2] 0
11 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3] 0
12 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2] 0
13 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 3] 0
14 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4] 0
15 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1] 0
16 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2] 0
17 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1] 0
18 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 2] 0
19 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3] 0
20 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 4, 1] 0
21 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 4] 0
22 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 1] 0
23 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2] 0
24 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 3, 4, 3] 0
25 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 3, 4] 0
26 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 3] 0
27 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 4] 0
28 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1] 0
29 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 4, 2, 3, 2] 0
30 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 4, 2, 3] 0
31 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 4, 2] 0
32 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 4, 3] 0
33 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 4] 0
34 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 2] 0
35 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3] 0
36 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 4] 0
37 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2] 0
38 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 3, 4, 3] 0
39 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 3, 4] 0
40 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 3] 0
41 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 4] 0
42 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5] 0
43 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
44 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
45 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 1] 0
46 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 2] 0
47 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3] 0
48 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 1] 0
49 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2] 0
50 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 3] 0
51 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1] 0
52 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 2, 3, 2] 0
53 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 2, 3] 0
54 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 2] 0
55 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 3] 0
56 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4] 0
57 [1, 2, 3, 4, 5, 6, 1, 2, 3, 5, 1, 2, 1] 0
58 [1, 2, 3, 4, 5, 6, 1, 2, 3, 5, 1, 2] 0
59 [1, 2, 3, 4, 5, 6, 1, 2, 3, 5, 1] 0
60 [1, 2, 3, 4, 5, 6, 1, 2, 3, 5, 2] 0
61 [1, 2, 3, 4, 5, 6, 1, 2, 3, 5] 0
62 [1, 2, 3, 4, 5, 6, 1, 2, 3, 1, 2, 1] 0
63 [1, 2, 3, 4, 5, 6, 1, 2, 3, 1, 2] 0
64 [1, 2, 3, 4, 5, 6, 1, 2, 3, 1] 0
65 [1, 2, 3, 4, 5, 6, 1, 2, 3, 2] 0
66 [1, 2, 3, 4, 5, 6, 1, 2, 3] 0
67 [1, 2, 3, 4, 5, 6, 1, 2, 4, 5, 1, 4] 0
68 [1, 2, 3, 4, 5, 6, 1, 2, 4, 5, 1] 0
69 [1, 2, 3, 4, 5, 6, 1, 2, 4, 5, 4] 0
70 [1, 2, 3, 4, 5, 6, 1, 2, 4, 5] 0
71 [1, 2, 3, 4, 5, 6, 1, 2, 4, 1] 0
72 [1, 2, 3, 4, 5, 6, 1, 2, 4] 0
73 [1, 2, 3, 4, 5, 6, 1, 2, 5, 1] 0
74 [1, 2, 3, 4, 5, 6, 1, 2, 5] 0
75 [1, 2, 3, 4, 5, 6, 1, 2, 1] 0
76 [1, 2, 3, 4, 5, 6, 1, 2] 0
77 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 3, 4, 3] 0
78 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 3, 4] 0
79 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 3] 0
80 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 4] 0
81 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5] 0
82 [1, 2, 3, 4, 5, 6, 1, 3, 4, 3] 0
83 [1, 2, 3, 4, 5, 6, 1, 3, 4] 0
84 [1, 2, 3, 4, 5, 6, 1, 3, 5] 0
85 [1, 2, 3, 4, 5, 6, 1, 3] 0
86 [1, 2, 3, 4, 5, 6, 1, 4, 5, 4] 0
87 [1, 2, 3, 4, 5, 6, 1, 4, 5] 0
88 [1, 2, 3, 4, 5, 6, 1, 4] 0
89 [1, 2, 3, 4, 5, 6, 1, 5] 0
90 [1, 2, 3, 4, 5, 6, 1] 0
91 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2, 3, 2] 0
92 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2, 3] 0
93 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2] 0
94 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 3] 0
95 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4] 0
96 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 2] 0
97 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3] 0
98 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 4] 0
99 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2] 0
100 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 3, 4, 3] 0
101 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 3, 4] 0
102 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 3] 0
103 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 4] 0
104 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5] 0
105 [1, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3, 2] 0
106 [1, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3] 0
107 [1, 2, 3, 4, 5, 6, 2, 3, 4, 2] 0
108 [1, 2, 3, 4, 5, 6, 2, 3, 4, 3] 0
109 [1, 2, 3, 4, 5, 6, 2, 3, 4] 0
110 [1, 2, 3, 4, 5, 6, 2, 3, 5, 2] 0
111 [1, 2, 3, 4, 5, 6, 2, 3, 5] 0
112 [1, 2, 3, 4, 5, 6, 2, 3, 2] 0
113 [1, 2, 3, 4, 5, 6, 2, 3] 0
114 [1, 2, 3, 4, 5, 6, 2, 4, 5, 4] 0
115 [1, 2, 3, 4, 5, 6, 2, 4, 5] 0
116 [1, 2, 3, 4, 5, 6, 2, 4] 0
117 [1, 2, 3, 4, 5, 6, 2, 5] 0
118 [1, 2, 3, 4, 5, 6, 2] 0
119 [1, 2, 3, 4, 5, 6, 3, 4, 5, 3, 4, 3] 0
120 [1, 2, 3, 4, 5, 6, 3, 4, 5, 3, 4] 0
121 [1, 2, 3, 4, 5, 6, 3, 4, 5, 3] 0
122 [1, 2, 3, 4, 5, 6, 3, 4, 5, 4] 0
123 [1, 2, 3, 4, 5, 6, 3, 4, 5] 0
124 [1, 2, 3, 4, 5, 6, 3, 4, 3] 0
125 [1, 2, 3, 4, 5, 6, 3, 4] 0
126 [1, 2, 3, 4, 5, 6, 3, 5] 0
127 [1, 2, 3, 4, 5, 6, 3] 0
128 [1, 2, 3, 4, 5, 6, 4, 5, 4] 0
129 [1, 2, 3, 4, 5, 6, 4, 5] 0
130 [1, 2, 3, 4, 5, 6, 4] 0
131 [1, 2, 3, 4, 5, 6, 5] 0
132 [1, 2, 3, 4, 5, 6] 0
133 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
134 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
135 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1] 0
136 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 2] 0
137 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] 0
138 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1] 0
139 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] 0
140 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 3] 0
141 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1] 0
142 [1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3, 2] 0
143 [1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3] 0
144 [1, 2, 3, 4, 5, 1, 2, 3, 4, 2] 0
145 [1, 2, 3, 4, 5, 1, 2, 3, 4, 3] 0
146 [1, 2, 3, 4, 5, 1, 2, 3, 4] 0
147 [1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1] 0
148 [1, 2, 3, 4, 5, 1, 2, 3, 1, 2] 0
149 [1, 2, 3, 4, 5, 1, 2, 3, 1] 0
150 [1, 2, 3, 4, 5, 1, 2, 3, 2] 0
151 [1, 2, 3, 4, 5, 1, 2, 3] 0
152 [1, 2, 3, 4, 5, 1, 2, 4, 1] 0
153 [1, 2, 3, 4, 5, 1, 2, 4] 0
154 [1, 2, 3, 4, 5, 1, 2, 1] 0
155 [1, 2, 3, 4, 5, 1, 2] 0
156 [1, 2, 3, 4, 5, 1, 3, 4, 3] 0
157 [1, 2, 3, 4, 5, 1, 3, 4] 0
158 [1, 2, 3, 4, 5, 1, 3] 0
159 [1, 2, 3, 4, 5, 1, 4] 0
160 [1, 2, 3, 4, 5, 1] 0
161 [1, 2, 3, 4, 5, 2, 3, 4, 2, 3, 2] 0
162 [1, 2, 3, 4, 5, 2, 3, 4, 2, 3] 0
163 [1, 2, 3, 4, 5, 2, 3, 4, 2] 0
164 [1, 2, 3, 4, 5, 2, 3, 4, 3] 0
165 [1, 2, 3, 4, 5, 2, 3, 4] 0
166 [1, 2, 3, 4, 5, 2, 3, 2] 0
167 [1, 2, 3, 4, 5, 2, 3] 0
168 [1, 2, 3, 4, 5, 2, 4] 0
169 [1, 2, 3, 4, 5, 2] 0
170 [1, 2, 3, 4, 5, 3, 4, 3] 0
171 [1, 2, 3, 4, 5, 3, 4] 0
172 [1, 2, 3, 4, 5, 3] 0
173 [1, 2, 3, 4, 5, 4] 0
174 [1, 2, 3, 4, 5] 0
175 [1, 2, 3, 4, 6, 1, 2, 3, 1, 2, 1] 0
176 [1, 2, 3, 4, 6, 1, 2, 3, 1, 2] 0
177 [1, 2, 3, 4, 6, 1, 2, 3, 1] 0
178 [1, 2, 3, 4, 6, 1, 2, 3, 2] 0
179 [1, 2, 3, 4, 6, 1, 2, 3] 0
180 [1, 2, 3, 4, 6, 1, 2, 1] 0
181 [1, 2, 3, 4, 6, 1, 2] 0
182 [1, 2, 3, 4, 6, 1, 3] 0
183 [1, 2, 3, 4, 6, 1] 0
184 [1, 2, 3, 4, 6, 2, 3, 2] 0
185 [1, 2, 3, 4, 6, 2, 3] 0
186 [1, 2, 3, 4, 6, 2] 0
187 [1, 2, 3, 4, 6, 3] 0
188 [1, 2, 3, 4, 6] 0
189 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
190 [1, 2, 3, 4, 1, 2, 3, 1, 2] 0
191 [1, 2, 3, 4, 1, 2, 3, 1] 0
192 [1, 2, 3, 4, 1, 2, 3, 2] 0
193 [1, 2, 3, 4, 1, 2, 3] 0
194 [1, 2, 3, 4, 1, 2, 1] 0
195 [1, 2, 3, 4, 1, 2] 0
196 [1, 2, 3, 4, 1, 3] 0
197 [1, 2, 3, 4, 1] 0
198 [1, 2, 3, 4, 2, 3, 2] 0
199 [1, 2, 3, 4, 2, 3] 0
200 [1, 2, 3, 4, 2] 0
201 [1, 2, 3, 4, 3] 0
202 [1, 2, 3, 4] 0
203 [1, 2, 3, 5, 6, 1, 2, 5, 1] 0
204 [1, 2, 3, 5, 6, 1, 2, 5] 0
205 [1, 2, 3, 5, 6, 1, 2, 1] 0
206 [1, 2, 3, 5, 6, 1, 2] 0
207 [1, 2, 3, 5, 6, 1, 5] 0
208 [1, 2, 3, 5, 6, 1] 0
209 [1, 2, 3, 5, 6, 2, 5] 0
210 [1, 2, 3, 5, 6, 2] 0
211 [1, 2, 3, 5, 6, 5] 0
212 [1, 2, 3, 5, 6] 0
213 [1, 2, 3, 5, 1, 2, 1] 0
214 [1, 2, 3, 5, 1, 2] 0
215 [1, 2, 3, 5, 1] 0
216 [1, 2, 3, 5, 2] 0
217 [1, 2, 3, 5] 0
218 [1, 2, 3, 6, 1, 2, 1] 0
219 [1, 2, 3, 6, 1, 2] 0
220 [1, 2, 3, 6, 1] 0
221 [1, 2, 3, 6, 2] 0
222 [1, 2, 3, 6] 0
223 [1, 2, 3, 1, 2, 1] 0
224 [1, 2, 3, 1, 2] 0
225 [1, 2, 3, 1] 0
226 [1, 2, 3, 2] 0
227 [1, 2, 3] 0
228 [1, 2, 4, 5, 6, 1, 4, 5, 4] 0
229 [1, 2, 4, 5, 6, 1, 4, 5] 0
230 [1, 2, 4, 5, 6, 1, 4] 0
231 [1, 2, 4, 5, 6, 1, 5] 0
232 [1, 2, 4, 5, 6, 1] 0
233 [1, 2, 4, 5, 6, 4, 5, 4] 0
234 [1, 2, 4, 5, 6, 4, 5] 0
235 [1, 2, 4, 5, 6, 4] 0
236 [1, 2, 4, 5, 6, 5] 0
237 [1, 2, 4, 5, 6] 0
238 [1, 2, 4, 5, 1, 4] 0
239 [1, 2, 4, 5, 1] 0
240 [1, 2, 4, 5, 4] 0
241 [1, 2, 4, 5] 0
242 [1, 2, 4, 6, 1] 0
243 [1, 2, 4, 6] 0
244 [1, 2, 4, 1] 0
245 [1, 2, 4] 0
246 [1, 2, 5, 6, 1, 5] 0
247 [1, 2, 5, 6, 1] 0
248 [1, 2, 5, 6, 5] 0
249 [1, 2, 5, 6] 0
250 [1, 2, 5, 1] 0
251 [1, 2, 5] 0
252 [1, 2, 6, 1] 0
253 [1, 2, 6] 0
254 [1, 2, 1] 0
255 [1, 2] 0
256 [1, 3, 4, 5, 6, 3, 4, 5, 3, 4, 3] 0
257 [1, 3, 4, 5, 6, 3, 4, 5, 3, 4] 0
258 [1, 3, 4, 5, 6, 3, 4, 5, 3] 0
259 [1, 3, 4, 5, 6, 3, 4, 5, 4] 0
260 [1, 3, 4, 5, 6, 3, 4, 5] 0
261 [1, 3, 4, 5, 6, 3, 4, 3] 0
262 [1, 3, 4, 5, 6, 3, 4] 0
263 [1, 3, 4, 5, 6, 3, 5] 0
264 [1, 3, 4, 5, 6, 3] 0
265 [1, 3, 4, 5, 6, 4, 5, 4] 0
266 [1, 3, 4, 5, 6, 4, 5] 0
267 [1, 3, 4, 5, 6, 4] 0
268 [1, 3, 4, 5, 6, 5] 0
269 [1, 3, 4, 5, 6] 0
270 [1, 3, 4, 5, 3, 4, 3] 0
271 [1, 3, 4, 5, 3, 4] 0
272 [1, 3, 4, 5, 3] 0
273 [1, 3, 4, 5, 4] 0
274 [1, 3, 4, 5] 0
275 [1, 3, 4, 6, 3] 0
276 [1, 3, 4, 6] 0
277 [1, 3, 4, 3] 0
278 [1, 3, 4] 0
279 [1, 3, 5, 6, 5] 0
280 [1, 3, 5, 6] 0
281 [1, 3, 5] 0
282 [1, 3, 6] 0
283 [1, 3] 0
284 [1, 4, 5, 6, 4, 5, 4] 0
285 [1, 4, 5, 6, 4, 5] 0
286 [1, 4, 5, 6, 4] 0
287 [1, 4, 5, 6, 5] 0
288 [1, 4, 5, 6] 0
289 [1, 4, 5, 4] 0
290 [1, 4, 5] 0
291 [1, 4, 6] 0
292 [1, 4] 0
293 [1, 5, 6, 5] 0
294 [1, 5, 6] 0
295 [1, 5] 0
296 [1, 6] 0
297 [1] 0
298 [2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2, 3, 2] 0
299 [2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2, 3] 0
300 [2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2] 0
301 [2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 3] 0
302 [2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4] 0
303 [2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 2] 0
304 [2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3] 0
305 [2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 4] 0
306 [2, 3, 4, 5, 6, 2, 3, 4, 5, 2] 0
307 [2, 3, 4, 5, 6, 2, 3, 4, 5, 3, 4, 3] 0
308 [2, 3, 4, 5, 6, 2, 3, 4, 5, 3, 4] 0
309 [2, 3, 4, 5, 6, 2, 3, 4, 5, 3] 0
310 [2, 3, 4, 5, 6, 2, 3, 4, 5, 4] 0
311 [2, 3, 4, 5, 6, 2, 3, 4, 5] 0
312 [2, 3, 4, 5, 6, 2, 3, 4, 2, 3, 2] 0
313 [2, 3, 4, 5, 6, 2, 3, 4, 2, 3] 0
314 [2, 3, 4, 5, 6, 2, 3, 4, 2] 0
315 [2, 3, 4, 5, 6, 2, 3, 4, 3] 0
316 [2, 3, 4, 5, 6, 2, 3, 4] 0
317 [2, 3, 4, 5, 6, 2, 3, 5, 2] 0
318 [2, 3, 4, 5, 6, 2, 3, 5] 0
319 [2, 3, 4, 5, 6, 2, 3, 2] 0
320 [2, 3, 4, 5, 6, 2, 3] 0
321 [2, 3, 4, 5, 6, 2, 4, 5, 4] 0
322 [2, 3, 4, 5, 6, 2, 4, 5] 0
323 [2, 3, 4, 5, 6, 2, 4] 0
324 [2, 3, 4, 5, 6, 2, 5] 0
325 [2, 3, 4, 5, 6, 2] 0
326 [2, 3, 4, 5, 6, 3, 4, 5, 3, 4, 3] 0
327 [2, 3, 4, 5, 6, 3, 4, 5, 3, 4] 0
328 [2, 3, 4, 5, 6, 3, 4, 5, 3] 0
329 [2, 3, 4, 5, 6, 3, 4, 5, 4] 0
330 [2, 3, 4, 5, 6, 3, 4, 5] 0
331 [2, 3, 4, 5, 6, 3, 4, 3] 0
332 [2, 3, 4, 5, 6, 3, 4] 0
333 [2, 3, 4, 5, 6, 3, 5] 0
334 [2, 3, 4, 5, 6, 3] 0
335 [2, 3, 4, 5, 6, 4, 5, 4] 0
336 [2, 3, 4, 5, 6, 4, 5] 0
337 [2, 3, 4, 5, 6, 4] 0
338 [2, 3, 4, 5, 6, 5] 0
339 [2, 3, 4, 5, 6] 0
340 [2, 3, 4, 5, 2, 3, 4, 2, 3, 2] 0
341 [2, 3, 4, 5, 2, 3, 4, 2, 3] 0
342 [2, 3, 4, 5, 2, 3, 4, 2] 0
343 [2, 3, 4, 5, 2, 3, 4, 3] 0
344 [2, 3, 4, 5, 2, 3, 4] 0
345 [2, 3, 4, 5, 2, 3, 2] 0
346 [2, 3, 4, 5, 2, 3] 0
347 [2, 3, 4, 5, 2, 4] 0
348 [2, 3, 4, 5, 2] 0
349 [2, 3, 4, 5, 3, 4, 3] 0
350 [2, 3, 4, 5, 3, 4] 0
351 [2, 3, 4, 5, 3] 0
352 [2, 3, 4, 5, 4] 0
353 [2, 3, 4, 5] 0
354 [2, 3, 4, 6, 2, 3, 2] 0
355 [2, 3, 4, 6, 2, 3] 0
356 [2, 3, 4, 6, 2] 0
357 [2, 3, 4, 6, 3] 0
358 [2, 3, 4, 6] 0
359 [2, 3, 4, 2, 3, 2] 0
360 [2, 3, 4, 2, 3] 0
361 [2, 3, 4, 2] 0
362 [2, 3, 4, 3] 0
363 [2, 3, 4] 0
364 [2, 3, 5, 6, 2, 5] 0
365 [2, 3, 5, 6, 2] 0
366 [2, 3, 5, 6, 5] 0
367 [2, 3, 5, 6] 0
368 [2, 3, 5, 2] 0
369 [2, 3, 5] 0
370 [2, 3, 6, 2] 0
371 [2, 3, 6] 0
372 [2, 3, 2] 0
373 [2, 3] 0
374 [2, 4, 5, 6, 4, 5, 4] 0
375 [2, 4, 5, 6, 4, 5] 0
376 [2, 4, 5, 6, 4] 0
377 [2, 4, 5, 6, 5] 0
378 [2, 4, 5, 6] 0
379 [2, 4, 5, 4] 0
380 [2, 4, 5] 0
381 [2, 4, 6] 0
382 [2, 4] 0
383 [2, 5, 6, 5] 0
384 [2, 5, 6] 0
385 [2, 5] 0
386 [2, 6] 0
387 [2] 0
388 [3, 4, 5, 6, 3, 4, 5, 3, 4, 3] 0
389 [3, 4, 5, 6, 3, 4, 5, 3, 4] 0
390 [3, 4, 5, 6, 3, 4, 5, 3] 0
391 [3, 4, 5, 6, 3, 4, 5, 4] 0
392 [3, 4, 5, 6, 3, 4, 5] 0
393 [3, 4, 5, 6, 3, 4, 3] 0
394 [3, 4, 5, 6, 3, 4] 0
395 [3, 4, 5, 6, 3, 5] 0
396 [3, 4, 5, 6, 3] 0
397 [3, 4, 5, 6, 4, 5, 4] 0
398 [3, 4, 5, 6, 4, 5] 0
399 [3, 4, 5, 6, 4] 0
400 [3, 4, 5, 6, 5] 0
401 [3, 4, 5, 6] 0
402 [3, 4, 5, 3, 4, 3] 0
403 [3, 4, 5, 3, 4] 0
404 [3, 4, 5, 3] 0
405 [3, 4, 5, 4] 0
406 [3, 4, 5] 0
407 [3, 4, 6, 3] 0
408 [3, 4, 6] 0
409 [3, 4, 3] 0
410 [3, 4] 0
411 [3, 5, 6, 5] 0
412 [3, 5, 6] 0
413 [3, 5] 0
414 [3, 6] 0
415 [3] 0
416 [4, 5, 6, 4, 5, 4] 0
417 [4, 5, 6, 4, 5] 0
418 [4, 5, 6, 4] 0
419 [4, 5, 6, 5] 0
420 [4, 5, 6] 0
421 [4, 5, 4] 0
422 [4, 5] 0
423 [4, 6] 0
424 [4] 0
425 [5, 6, 5] 0
426 [5, 6] 0
427 [5] 0
428 [6] 0
429 [] 0
sage: A=CartanMatrix(['A',5])
....: c=[0,1,2,3,4]
....: num=0
....: for v in sortables(A,c):  # all the sortables!
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),K(c,v)).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0] 0
2 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1] 0
3 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0] 0
4 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 1] 0
5 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2] 0
6 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0] 0
7 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1] 0
8 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 2] 0
9 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0] 0
10 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2, 1] 0
11 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2] 0
12 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1] 0
13 [0, 1, 2, 3, 4, 0, 1, 2, 3, 2] 0
14 [0, 1, 2, 3, 4, 0, 1, 2, 3] 0
15 [0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0] 0
16 [0, 1, 2, 3, 4, 0, 1, 2, 0, 1] 0
17 [0, 1, 2, 3, 4, 0, 1, 2, 0] 0
18 [0, 1, 2, 3, 4, 0, 1, 2, 1] 0
19 [0, 1, 2, 3, 4, 0, 1, 2] 0
20 [0, 1, 2, 3, 4, 0, 1, 3, 0] 0
21 [0, 1, 2, 3, 4, 0, 1, 3] 0
22 [0, 1, 2, 3, 4, 0, 1, 0] 0
23 [0, 1, 2, 3, 4, 0, 1] 0
24 [0, 1, 2, 3, 4, 0, 2, 3, 2] 0
25 [0, 1, 2, 3, 4, 0, 2, 3] 0
26 [0, 1, 2, 3, 4, 0, 2] 0
27 [0, 1, 2, 3, 4, 0, 3] 0
28 [0, 1, 2, 3, 4, 0] 0
29 [0, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
30 [0, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
31 [0, 1, 2, 3, 4, 1, 2, 3, 1] 0
32 [0, 1, 2, 3, 4, 1, 2, 3, 2] 0
33 [0, 1, 2, 3, 4, 1, 2, 3] 0
34 [0, 1, 2, 3, 4, 1, 2, 1] 0
35 [0, 1, 2, 3, 4, 1, 2] 0
36 [0, 1, 2, 3, 4, 1, 3] 0
37 [0, 1, 2, 3, 4, 1] 0
38 [0, 1, 2, 3, 4, 2, 3, 2] 0
39 [0, 1, 2, 3, 4, 2, 3] 0
40 [0, 1, 2, 3, 4, 2] 0
41 [0, 1, 2, 3, 4, 3] 0
42 [0, 1, 2, 3, 4] 0
43 [0, 1, 2, 3, 0, 1, 2, 0, 1, 0] 0
44 [0, 1, 2, 3, 0, 1, 2, 0, 1] 0
45 [0, 1, 2, 3, 0, 1, 2, 0] 0
46 [0, 1, 2, 3, 0, 1, 2, 1] 0
47 [0, 1, 2, 3, 0, 1, 2] 0
48 [0, 1, 2, 3, 0, 1, 0] 0
49 [0, 1, 2, 3, 0, 1] 0
50 [0, 1, 2, 3, 0, 2] 0
51 [0, 1, 2, 3, 0] 0
52 [0, 1, 2, 3, 1, 2, 1] 0
53 [0, 1, 2, 3, 1, 2] 0
54 [0, 1, 2, 3, 1] 0
55 [0, 1, 2, 3, 2] 0
56 [0, 1, 2, 3] 0
57 [0, 1, 2, 4, 0, 1, 0] 0
58 [0, 1, 2, 4, 0, 1] 0
59 [0, 1, 2, 4, 0] 0
60 [0, 1, 2, 4, 1] 0
61 [0, 1, 2, 4] 0
62 [0, 1, 2, 0, 1, 0] 0
63 [0, 1, 2, 0, 1] 0
64 [0, 1, 2, 0] 0
65 [0, 1, 2, 1] 0
66 [0, 1, 2] 0
67 [0, 1, 3, 4, 0, 3] 0
68 [0, 1, 3, 4, 0] 0
69 [0, 1, 3, 4, 3] 0
70 [0, 1, 3, 4] 0
71 [0, 1, 3, 0] 0
72 [0, 1, 3] 0
73 [0, 1, 4, 0] 0
74 [0, 1, 4] 0
75 [0, 1, 0] 0
76 [0, 1] 0
77 [0, 2, 3, 4, 2, 3, 2] 0
78 [0, 2, 3, 4, 2, 3] 0
79 [0, 2, 3, 4, 2] 0
80 [0, 2, 3, 4, 3] 0
81 [0, 2, 3, 4] 0
82 [0, 2, 3, 2] 0
83 [0, 2, 3] 0
84 [0, 2, 4] 0
85 [0, 2] 0
86 [0, 3, 4, 3] 0
87 [0, 3, 4] 0
88 [0, 3] 0
89 [0, 4] 0
90 [0] 0
91 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
92 [1, 2, 3, 4, 1, 2, 3, 1, 2] 0
93 [1, 2, 3, 4, 1, 2, 3, 1] 0
94 [1, 2, 3, 4, 1, 2, 3, 2] 0
95 [1, 2, 3, 4, 1, 2, 3] 0
96 [1, 2, 3, 4, 1, 2, 1] 0
97 [1, 2, 3, 4, 1, 2] 0
98 [1, 2, 3, 4, 1, 3] 0
99 [1, 2, 3, 4, 1] 0
100 [1, 2, 3, 4, 2, 3, 2] 0
101 [1, 2, 3, 4, 2, 3] 0
102 [1, 2, 3, 4, 2] 0
103 [1, 2, 3, 4, 3] 0
104 [1, 2, 3, 4] 0
105 [1, 2, 3, 1, 2, 1] 0
106 [1, 2, 3, 1, 2] 0
107 [1, 2, 3, 1] 0
108 [1, 2, 3, 2] 0
109 [1, 2, 3] 0
110 [1, 2, 4, 1] 0
111 [1, 2, 4] 0
112 [1, 2, 1] 0
113 [1, 2] 0
114 [1, 3, 4, 3] 0
115 [1, 3, 4] 0
116 [1, 3] 0
117 [1, 4] 0
118 [1] 0
119 [2, 3, 4, 2, 3, 2] 0
120 [2, 3, 4, 2, 3] 0
121 [2, 3, 4, 2] 0
122 [2, 3, 4, 3] 0
123 [2, 3, 4] 0
124 [2, 3, 2] 0
125 [2, 3] 0
126 [2, 4] 0
127 [2] 0
128 [3, 4, 3] 0
129 [3, 4] 0
130 [3] 0
131 [4] 0
132 [] 0
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: num=0
....: for v in sortables(A,c):  # all the sortables!
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),K(c,v)).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4] 0
2 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3] 0
3 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2] 0
4 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1] 0
5 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0] 0
6 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4] 0
7 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2] 0
8 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1] 0
9 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0] 0
10 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3] 0
11 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1] 0
12 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0] 0
13 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2] 0
14 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 0] 0
15 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1] 0
16 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0] 0
17 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4] 0
18 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3] 0
19 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2] 0
20 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1] 0
21 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4] 0
22 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1] 0
23 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0] 0
24 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2] 0
25 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0] 0
26 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1] 0
27 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0] 0
28 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2] 0
29 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1] 0
30 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3] 0
31 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0] 0
32 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1] 0
33 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0] 0
34 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 1] 0
35 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2] 0
36 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 0] 0
37 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1] 0
38 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2, 3, 4] 0
39 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2, 3] 0
40 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2] 0
41 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0] 0
42 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
43 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
44 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
45 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1] 0
46 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4] 0
47 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
48 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 1] 0
49 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3] 0
50 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 1] 0
51 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2] 0
52 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1] 0
53 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2, 3, 4] 0
54 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2, 3] 0
55 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2] 0
56 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4] 0
57 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0] 0
58 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1] 0
59 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0] 0
60 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 1] 0
61 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2] 0
62 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0] 0
63 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1] 0
64 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 2] 0
65 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0] 0
66 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2, 1] 0
67 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2] 0
68 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1] 0
69 [0, 1, 2, 3, 4, 0, 1, 2, 3, 2] 0
70 [0, 1, 2, 3, 4, 0, 1, 2, 3] 0
71 [0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0] 0
72 [0, 1, 2, 3, 4, 0, 1, 2, 0, 1] 0
73 [0, 1, 2, 3, 4, 0, 1, 2, 0] 0
74 [0, 1, 2, 3, 4, 0, 1, 2, 1] 0
75 [0, 1, 2, 3, 4, 0, 1, 2] 0
76 [0, 1, 2, 3, 4, 0, 1, 3, 4, 0] 0
77 [0, 1, 2, 3, 4, 0, 1, 3, 4] 0
78 [0, 1, 2, 3, 4, 0, 1, 3, 0] 0
79 [0, 1, 2, 3, 4, 0, 1, 3] 0
80 [0, 1, 2, 3, 4, 0, 1, 0] 0
81 [0, 1, 2, 3, 4, 0, 1] 0
82 [0, 1, 2, 3, 4, 0, 2, 3, 4, 2, 3, 4] 0
83 [0, 1, 2, 3, 4, 0, 2, 3, 4, 2, 3] 0
84 [0, 1, 2, 3, 4, 0, 2, 3, 4, 2] 0
85 [0, 1, 2, 3, 4, 0, 2, 3, 4] 0
86 [0, 1, 2, 3, 4, 0, 2, 3, 2] 0
87 [0, 1, 2, 3, 4, 0, 2, 3] 0
88 [0, 1, 2, 3, 4, 0, 2] 0
89 [0, 1, 2, 3, 4, 0, 3, 4] 0
90 [0, 1, 2, 3, 4, 0, 3] 0
91 [0, 1, 2, 3, 4, 0] 0
92 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
93 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
94 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
95 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1] 0
96 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
97 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
98 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1] 0
99 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
100 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1] 0
101 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
102 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1] 0
103 [0, 1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4] 0
104 [0, 1, 2, 3, 4, 1, 2, 3, 4, 2, 3] 0
105 [0, 1, 2, 3, 4, 1, 2, 3, 4, 2] 0
106 [0, 1, 2, 3, 4, 1, 2, 3, 4] 0
107 [0, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
108 [0, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
109 [0, 1, 2, 3, 4, 1, 2, 3, 1] 0
110 [0, 1, 2, 3, 4, 1, 2, 3, 2] 0
111 [0, 1, 2, 3, 4, 1, 2, 3] 0
112 [0, 1, 2, 3, 4, 1, 2, 1] 0
113 [0, 1, 2, 3, 4, 1, 2] 0
114 [0, 1, 2, 3, 4, 1, 3, 4] 0
115 [0, 1, 2, 3, 4, 1, 3] 0
116 [0, 1, 2, 3, 4, 1] 0
117 [0, 1, 2, 3, 4, 2, 3, 4, 2, 3, 4] 0
118 [0, 1, 2, 3, 4, 2, 3, 4, 2, 3] 0
119 [0, 1, 2, 3, 4, 2, 3, 4, 2] 0
120 [0, 1, 2, 3, 4, 2, 3, 4] 0
121 [0, 1, 2, 3, 4, 2, 3, 2] 0
122 [0, 1, 2, 3, 4, 2, 3] 0
123 [0, 1, 2, 3, 4, 2] 0
124 [0, 1, 2, 3, 4, 3, 4] 0
125 [0, 1, 2, 3, 4, 3] 0
126 [0, 1, 2, 3, 4] 0
127 [0, 1, 2, 3, 0, 1, 2, 0, 1, 0] 0
128 [0, 1, 2, 3, 0, 1, 2, 0, 1] 0
129 [0, 1, 2, 3, 0, 1, 2, 0] 0
130 [0, 1, 2, 3, 0, 1, 2, 1] 0
131 [0, 1, 2, 3, 0, 1, 2] 0
132 [0, 1, 2, 3, 0, 1, 0] 0
133 [0, 1, 2, 3, 0, 1] 0
134 [0, 1, 2, 3, 0, 2] 0
135 [0, 1, 2, 3, 0] 0
136 [0, 1, 2, 3, 1, 2, 1] 0
137 [0, 1, 2, 3, 1, 2] 0
138 [0, 1, 2, 3, 1] 0
139 [0, 1, 2, 3, 2] 0
140 [0, 1, 2, 3] 0
141 [0, 1, 2, 4, 0, 1, 0] 0
142 [0, 1, 2, 4, 0, 1] 0
143 [0, 1, 2, 4, 0] 0
144 [0, 1, 2, 4, 1] 0
145 [0, 1, 2, 4] 0
146 [0, 1, 2, 0, 1, 0] 0
147 [0, 1, 2, 0, 1] 0
148 [0, 1, 2, 0] 0
149 [0, 1, 2, 1] 0
150 [0, 1, 2] 0
151 [0, 1, 3, 4, 0, 3, 4] 0
152 [0, 1, 3, 4, 0, 3] 0
153 [0, 1, 3, 4, 0] 0
154 [0, 1, 3, 4, 3, 4] 0
155 [0, 1, 3, 4, 3] 0
156 [0, 1, 3, 4] 0
157 [0, 1, 3, 0] 0
158 [0, 1, 3] 0
159 [0, 1, 4, 0] 0
160 [0, 1, 4] 0
161 [0, 1, 0] 0
162 [0, 1] 0
163 [0, 2, 3, 4, 2, 3, 4, 2, 3, 4] 0
164 [0, 2, 3, 4, 2, 3, 4, 2, 3] 0
165 [0, 2, 3, 4, 2, 3, 4, 2] 0
166 [0, 2, 3, 4, 2, 3, 4] 0
167 [0, 2, 3, 4, 2, 3, 2] 0
168 [0, 2, 3, 4, 2, 3] 0
169 [0, 2, 3, 4, 2] 0
170 [0, 2, 3, 4, 3, 4] 0
171 [0, 2, 3, 4, 3] 0
172 [0, 2, 3, 4] 0
173 [0, 2, 3, 2] 0
174 [0, 2, 3] 0
175 [0, 2, 4] 0
176 [0, 2] 0
177 [0, 3, 4, 3, 4] 0
178 [0, 3, 4, 3] 0
179 [0, 3, 4] 0
180 [0, 3] 0
181 [0, 4] 0
182 [0] 0
183 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
184 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
185 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
186 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1] 0
187 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
188 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
189 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1] 0
190 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
191 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1] 0
192 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
193 [1, 2, 3, 4, 1, 2, 3, 4, 1] 0
194 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4] 0
195 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3] 0
196 [1, 2, 3, 4, 1, 2, 3, 4, 2] 0
197 [1, 2, 3, 4, 1, 2, 3, 4] 0
198 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
199 [1, 2, 3, 4, 1, 2, 3, 1, 2] 0
200 [1, 2, 3, 4, 1, 2, 3, 1] 0
201 [1, 2, 3, 4, 1, 2, 3, 2] 0
202 [1, 2, 3, 4, 1, 2, 3] 0
203 [1, 2, 3, 4, 1, 2, 1] 0
204 [1, 2, 3, 4, 1, 2] 0
205 [1, 2, 3, 4, 1, 3, 4] 0
206 [1, 2, 3, 4, 1, 3] 0
207 [1, 2, 3, 4, 1] 0
208 [1, 2, 3, 4, 2, 3, 4, 2, 3, 4] 0
209 [1, 2, 3, 4, 2, 3, 4, 2, 3] 0
210 [1, 2, 3, 4, 2, 3, 4, 2] 0
211 [1, 2, 3, 4, 2, 3, 4] 0
212 [1, 2, 3, 4, 2, 3, 2] 0
213 [1, 2, 3, 4, 2, 3] 0
214 [1, 2, 3, 4, 2] 0
215 [1, 2, 3, 4, 3, 4] 0
216 [1, 2, 3, 4, 3] 0
217 [1, 2, 3, 4] 0
218 [1, 2, 3, 1, 2, 1] 0
219 [1, 2, 3, 1, 2] 0
220 [1, 2, 3, 1] 0
221 [1, 2, 3, 2] 0
222 [1, 2, 3] 0
223 [1, 2, 4, 1] 0
224 [1, 2, 4] 0
225 [1, 2, 1] 0
226 [1, 2] 0
227 [1, 3, 4, 3, 4] 0
228 [1, 3, 4, 3] 0
229 [1, 3, 4] 0
230 [1, 3] 0
231 [1, 4] 0
232 [1] 0
233 [2, 3, 4, 2, 3, 4, 2, 3, 4] 0
234 [2, 3, 4, 2, 3, 4, 2, 3] 0
235 [2, 3, 4, 2, 3, 4, 2] 0
236 [2, 3, 4, 2, 3, 4] 0
237 [2, 3, 4, 2, 3, 2] 0
238 [2, 3, 4, 2, 3] 0
239 [2, 3, 4, 2] 0
240 [2, 3, 4, 3, 4] 0
241 [2, 3, 4, 3] 0
242 [2, 3, 4] 0
243 [2, 3, 2] 0
244 [2, 3] 0
245 [2, 4] 0
246 [2] 0
247 [3, 4, 3, 4] 0
248 [3, 4, 3] 0
249 [3, 4] 0
250 [3] 0
251 [4] 0
252 [] 0
sage: A=CartanMatrix(['D',5])
....: c=[0,1,2,3,4]
....: num=0
....: for v in sortables(A,c):  # all the sortables!
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),K(c,v)).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4] 0
2 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3] 0
3 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 4] 0
4 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2] 0
5 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1] 0
6 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0] 0
7 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4] 0
8 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2] 0
9 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1] 0
10 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0] 0
11 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3] 0
12 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 4, 0, 1, 2] 0
13 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 4, 0, 1] 0
14 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 4, 0] 0
15 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 4] 0
16 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1] 0
17 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0] 0
18 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2] 0
19 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 0] 0
20 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1] 0
21 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0] 0
22 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4] 0
23 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3] 0
24 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 4] 0
25 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2] 0
26 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1] 0
27 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4] 0
28 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1] 0
29 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0] 0
30 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2] 0
31 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0] 0
32 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1] 0
33 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0] 0
34 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2] 0
35 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1] 0
36 [0, 1, 2, 3, 4, 0, 1, 2, 3] 0
37 [0, 1, 2, 3, 4, 0, 1, 2, 4, 0, 1, 2, 0, 1] 0
38 [0, 1, 2, 3, 4, 0, 1, 2, 4, 0, 1, 2, 0] 0
39 [0, 1, 2, 3, 4, 0, 1, 2, 4, 0, 1, 2] 0
40 [0, 1, 2, 3, 4, 0, 1, 2, 4, 0, 1, 0] 0
41 [0, 1, 2, 3, 4, 0, 1, 2, 4, 0, 1] 0
42 [0, 1, 2, 3, 4, 0, 1, 2, 4, 0] 0
43 [0, 1, 2, 3, 4, 0, 1, 2, 4, 1, 2] 0
44 [0, 1, 2, 3, 4, 0, 1, 2, 4, 1] 0
45 [0, 1, 2, 3, 4, 0, 1, 2, 4] 0
46 [0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0] 0
47 [0, 1, 2, 3, 4, 0, 1, 2, 0, 1] 0
48 [0, 1, 2, 3, 4, 0, 1, 2, 0] 0
49 [0, 1, 2, 3, 4, 0, 1, 2, 1] 0
50 [0, 1, 2, 3, 4, 0, 1, 2] 0
51 [0, 1, 2, 3, 4, 0, 1, 0] 0
52 [0, 1, 2, 3, 4, 0, 1] 0
53 [0, 1, 2, 3, 4, 0, 2, 3, 4] 0
54 [0, 1, 2, 3, 4, 0, 2, 3] 0
55 [0, 1, 2, 3, 4, 0, 2, 4] 0
56 [0, 1, 2, 3, 4, 0, 2] 0
57 [0, 1, 2, 3, 4, 0] 0
58 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
59 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
60 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 4] 0
61 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
62 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1] 0
63 [0, 1, 2, 3, 4, 1, 2, 3, 4] 0
64 [0, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
65 [0, 1, 2, 3, 4, 1, 2, 3, 1] 0
66 [0, 1, 2, 3, 4, 1, 2, 3] 0
67 [0, 1, 2, 3, 4, 1, 2, 4, 1, 2] 0
68 [0, 1, 2, 3, 4, 1, 2, 4, 1] 0
69 [0, 1, 2, 3, 4, 1, 2, 4] 0
70 [0, 1, 2, 3, 4, 1, 2, 1] 0
71 [0, 1, 2, 3, 4, 1, 2] 0
72 [0, 1, 2, 3, 4, 1] 0
73 [0, 1, 2, 3, 4, 2, 3, 4] 0
74 [0, 1, 2, 3, 4, 2, 3] 0
75 [0, 1, 2, 3, 4, 2, 4] 0
76 [0, 1, 2, 3, 4, 2] 0
77 [0, 1, 2, 3, 4] 0
78 [0, 1, 2, 3, 0, 1, 2, 0, 1, 0] 0
79 [0, 1, 2, 3, 0, 1, 2, 0, 1] 0
80 [0, 1, 2, 3, 0, 1, 2, 0] 0
81 [0, 1, 2, 3, 0, 1, 2, 1] 0
82 [0, 1, 2, 3, 0, 1, 2] 0
83 [0, 1, 2, 3, 0, 1, 0] 0
84 [0, 1, 2, 3, 0, 1] 0
85 [0, 1, 2, 3, 0, 2] 0
86 [0, 1, 2, 3, 0] 0
87 [0, 1, 2, 3, 1, 2, 1] 0
88 [0, 1, 2, 3, 1, 2] 0
89 [0, 1, 2, 3, 1] 0
90 [0, 1, 2, 3, 2] 0
91 [0, 1, 2, 3] 0
92 [0, 1, 2, 4, 0, 1, 2, 0, 1, 0] 0
93 [0, 1, 2, 4, 0, 1, 2, 0, 1] 0
94 [0, 1, 2, 4, 0, 1, 2, 0] 0
95 [0, 1, 2, 4, 0, 1, 2, 1] 0
96 [0, 1, 2, 4, 0, 1, 2] 0
97 [0, 1, 2, 4, 0, 1, 0] 0
98 [0, 1, 2, 4, 0, 1] 0
99 [0, 1, 2, 4, 0, 2] 0
100 [0, 1, 2, 4, 0] 0
101 [0, 1, 2, 4, 1, 2, 1] 0
102 [0, 1, 2, 4, 1, 2] 0
103 [0, 1, 2, 4, 1] 0
104 [0, 1, 2, 4, 2] 0
105 [0, 1, 2, 4] 0
106 [0, 1, 2, 0, 1, 0] 0
107 [0, 1, 2, 0, 1] 0
108 [0, 1, 2, 0] 0
109 [0, 1, 2, 1] 0
110 [0, 1, 2] 0
111 [0, 1, 3, 4, 0] 0
112 [0, 1, 3, 4] 0
113 [0, 1, 3, 0] 0
114 [0, 1, 3] 0
115 [0, 1, 4, 0] 0
116 [0, 1, 4] 0
117 [0, 1, 0] 0
118 [0, 1] 0
119 [0, 2, 3, 4, 2, 3, 4] 0
120 [0, 2, 3, 4, 2, 3] 0
121 [0, 2, 3, 4, 2, 4] 0
122 [0, 2, 3, 4, 2] 0
123 [0, 2, 3, 4] 0
124 [0, 2, 3, 2] 0
125 [0, 2, 3] 0
126 [0, 2, 4, 2] 0
127 [0, 2, 4] 0
128 [0, 2] 0
129 [0, 3, 4] 0
130 [0, 3] 0
131 [0, 4] 0
132 [0] 0
133 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
134 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
135 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 4] 0
136 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
137 [1, 2, 3, 4, 1, 2, 3, 4, 1] 0
138 [1, 2, 3, 4, 1, 2, 3, 4] 0
139 [1, 2, 3, 4, 1, 2, 3, 1, 2] 0
140 [1, 2, 3, 4, 1, 2, 3, 1] 0
141 [1, 2, 3, 4, 1, 2, 3] 0
142 [1, 2, 3, 4, 1, 2, 4, 1, 2] 0
143 [1, 2, 3, 4, 1, 2, 4, 1] 0
144 [1, 2, 3, 4, 1, 2, 4] 0
145 [1, 2, 3, 4, 1, 2, 1] 0
146 [1, 2, 3, 4, 1, 2] 0
147 [1, 2, 3, 4, 1] 0
148 [1, 2, 3, 4, 2, 3, 4] 0
149 [1, 2, 3, 4, 2, 3] 0
150 [1, 2, 3, 4, 2, 4] 0
151 [1, 2, 3, 4, 2] 0
152 [1, 2, 3, 4] 0
153 [1, 2, 3, 1, 2, 1] 0
154 [1, 2, 3, 1, 2] 0
155 [1, 2, 3, 1] 0
156 [1, 2, 3, 2] 0
157 [1, 2, 3] 0
158 [1, 2, 4, 1, 2, 1] 0
159 [1, 2, 4, 1, 2] 0
160 [1, 2, 4, 1] 0
161 [1, 2, 4, 2] 0
162 [1, 2, 4] 0
163 [1, 2, 1] 0
164 [1, 2] 0
165 [1, 3, 4] 0
166 [1, 3] 0
167 [1, 4] 0
168 [1] 0
169 [2, 3, 4, 2, 3, 4] 0
170 [2, 3, 4, 2, 3] 0
171 [2, 3, 4, 2, 4] 0
172 [2, 3, 4, 2] 0
173 [2, 3, 4] 0
174 [2, 3, 2] 0
175 [2, 3] 0
176 [2, 4, 2] 0
177 [2, 4] 0
178 [2] 0
179 [3, 4] 0
180 [3] 0
181 [4] 0
182 [] 0
sage: A=CartanMatrix(['B',2])
sage: A
[ 2 -1]
[-2  2]
sage: c=[1,0]
sage: B(A,c)
[ 0 -1]
[ 2  0]
sage: p_lambda_int(B(A,c),lam(A,[]),[[],[1],[0],1,0]])
  Cell In [633], line 1
    p_lambda_int(B(A,c),lam(A,[]),[[],[Integer(1)],[Integer(0)],Integer(1),Integer(0)]])
                                                                                      ^
SyntaxError: closing parenthesis ']' does not match opening parenthesis '('

sage: p_lambda_int(B(A,c),lam(A,[]),[[],[1],[0],[1,0]])
A 0-dimensional polyhedron in QQ^2 defined as the convex hull of 1 vertex
sage: p_lambda_int(B(A,c),lam(A,[]),[[],[1]])
A 1-dimensional polyhedron in QQ^2 defined as the convex hull of 1 vertex and 1 ray
sage: p_lambda_int(B(A,c),lam(A,[]),[[0],[1,0]])
A 1-dimensional polyhedron in QQ^2 defined as the convex hull of 2 vertices
sage: p_lambda_int(B(A,c),lam(A,[]),[[0],[1,0]]).vertices()
(A vertex at (1, 1), A vertex at (1, 0))
sage: p_lambda_int(B(A,c),lam(A,[]),[[],[1]]).rays()
(A ray in the direction (0, 1),)
sage: A=CartanMatrix(['C',2])
sage: p_lambda_int(B(A,c),lam(A,[]),[[],[1]]).rays()
(A ray in the direction (0, 1),)
sage: p_lambda_int(B(A,c),lam(A,[]),[[0],[1,0]]).vertices()
(A vertex at (1, 1), A vertex at (1, 0))
sage: p_lambda_int(B(A,c),lam(A,[]),[[],[1]])
A 1-dimensional polyhedron in QQ^2 defined as the convex hull of 1 vertex and 1 ray
sage: p_lambda_int(B(A,c),lam(A,[]),[[],[1]])
A 1-dimensional polyhedron in QQ^2 defined as the convex hull of 1 vertex and 1 ray
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: for v in sortables(A,c[1:]):
....:     for u in sortables(A,c[1:]):
....:         p_lambda_int(B(A,c),lam(A,v),[u,[c[0]]+u])
....:     input()
....: 
....: 
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays

''
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays

''
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays

''
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays

''
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays

''
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays

''
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: H=Polyhedron(lines=B(A,c).columns()[1:])
....: for v in sortables(A,c[1:]):
....:     for u in sortables(A,c[1:]):
....:         P=p_lambda_int(B(A,c),lam(A,v),[u,[c[0]]+u])
....:         H.translation(lam(A,v)).intersection(P)==P
....:     input()
....: 
True
True
True
True
True
True

''
True
True
True
True
True
True

''
True
True
True
True
True
True

''
True
True
True
True
True
True

''
True
True
True
True
True
True

''
True
True
True
True
True
True

''
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: H=Polyhedron(lines=B(A,c).columns()[1:])
....: for v in sortables(A,c[1:]):
....:     for u in sortables(A,c[1:]):
....:         P=p_lambda_int(B(A,c),lam(A,v),[u,[c[0]]+u])
....:         H.translation(lam(A,v)).intersection(P)==P
....:     input()
....: 
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True

''
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True

''
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True

''
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True

''
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True

''
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True

''
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True

''
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True

''
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True

''
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True

''
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True

''
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True

''
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True

''
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True

''
True
True
True
True

True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
''
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True

''
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True

''
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True

''
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True

''
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True

''
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: H=Polyhedron(lines=B(A,c).columns()[1:])
....: for v in sortables(A,c[1:]):
....:     for u in sortables(A,c[1:]):
....:         P=p_lambda_int(B(A,c),lam(A,v),[u,u+[c[0]]])
....:         H.translation(lam(A,v)).intersection(P)==P
....:     input()
....: 
False
False
False
False
False
False
False
False
False
False
False
False
False
False
True
True
True
True
True
True

''
False
False
False
False
False
False
False
False
False
False
False
False
False
False
True
True
True
True
True
True

''
False
False
False
False
False
False
False
False
False
False
False
False
False
False
True
True
True
True
True
True

''
False
False
False
False
False
False
False
False
False
False
False
False
False
False
True
True
True
True
True
True

''
False
False
False
False
False
False
False
False
False
False
False
False
False
False
True
True
True
True
True
True

''
False
False
False
False
False
False
False
False
False
False
False
False
False
False
True
True
True
True
True
True

''
False
False
False
False
False
False
False
False
False
False
False
False
False
False
True
True
True
True
True
True

''
False
False
False
False
False
False
False
False
False
False
False
False
False
False
True
True
True
True
True
True

''
False
False
False
False
False
False
False
False
False
False
False
False
False
False
True
True
True
True
True
True

''
False
False
False

False
False
False
False
False
False
False
False
False
False
False
True
True
True
True
True
True
''
False
False

False
False
False
False
False
False
False
False
False
False
False
False
True
True
True
True
True
True
''
False
False
False
False
False
False
False
False
False
False
False
False
False
False
True
True
True
True
True
True

''
False
False
False
False
False
False
False
False
False
False
False
False
False
False
True
True
True
True
True
True

''
False
False
False
False
False
False
False
False
False
False
False
False
False
False
True
True
True
True
True
True

''
False
False
False
False
False
False
False
False
False
False
False
False
False
False
True
True
True
True
True
True

''
False
False
False
False
False
False
False
False
False
False
False
False
False
False
True
True
True
True
True
True

''
False
False
False
False
False
False
False
False
False
False
False
False
False
False
True
True
True
True
True
True

''
False
False
False
False
False
False
False
False
False
False
False
False
False
False
True
True
True
True
True
True

''
False
False
False
False
False
False
False
False
False
False
False
False
False
False
True
True
True
True
True
True

''
False
False
False
False
False
False
False
False
False
False
False
False
False
False
True
True
True
True
True
True

''
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: H=Polyhedron(lines=B(A,c).columns()[1:])
....: for v in sortables(A,c[1:]):
....:     for u in sortables(A,c[1:]):
....:         P=p_lambda_int(B(A,c),lam(A,v),[u,u+[c[0]]])
....:         H.translation(lam(A,v)).intersection(P)==P
....:     input()
....: 
True
True
True
True
True
True

''
True
True
True
True
True
True

''
True
True
True
True
True
True

''
True
True
True
True
True
True

''
True
True
True
True
True

True
''
True
True
True
True
True
True

''
sage: 
sage: 
sage: 
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: H=Polyhedron(lines=B(A,c).columns()[1:])
....: for v in sortables(A,c[1:]):
....:     for u in sortables(A,c[1:]):
....:         p_lambda_int(B(A,c),lam(A,v),[u,u+[c[0]]])
....:     input()
....: 
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 4 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays

''
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays

''
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays

''
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays

''
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 4 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays

''
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 4 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays

''
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: H=Polyhedron(lines=B(A,c).columns()[1:])
....: for v in sortables(A,c[1:]):
....:     for u in sortables(A,c[1:]):
....:         p_lambda_int(B(A,c),lam(A,v),[u,[c[0]]+u])
....:     input()
....: 
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays

''
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays

''
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays

''
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays

''
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays

''
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays

''
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: H=Polyhedron(lines=B(A,c).columns()[1:])
....: for v in sortables(A,c[1:]):
....:     for u in sortables(A,c[1:]):
....:         p_lambda_int(B(A,c),lam(A,v),[u,[c[0]]+u]).rays()
....:     input()
(A ray in the direction (0, -1, 0), A ray in the direction (-1, -2, 1))
(A ray in the direction (0, -1, 0), A ray in the direction (-1, -1, 1))
(A ray in the direction (0, 1, 0), A ray in the direction (-1, 0, 1))
(A ray in the direction (0, 1, 0), A ray in the direction (-1, 1, 1))
(A ray in the direction (1, 0, -1), A ray in the direction (0, -1, 0))
(A ray in the direction (1, 0, -1), A ray in the direction (0, 1, 0))

''
(A ray in the direction (0, -1, 0), A ray in the direction (-1, -2, 1))
(A ray in the direction (0, -1, 0), A ray in the direction (-1, -1, 1))
(A ray in the direction (0, 1, 0), A ray in the direction (-1, 0, 1))
(A ray in the direction (0, 1, 0), A ray in the direction (-1, 1, 1))
(A ray in the direction (1, 0, -1), A ray in the direction (0, -1, 0))
(A ray in the direction (1, 0, -1), A ray in the direction (0, 1, 0))

''
(A ray in the direction (0, -1, 0), A ray in the direction (-1, -2, 1))
(A ray in the direction (0, -1, 0), A ray in the direction (-1, -1, 1))
(A ray in the direction (0, 1, 0), A ray in the direction (-1, 0, 1))
(A ray in the direction (0, 1, 0), A ray in the direction (-1, 1, 1))
(A ray in the direction (1, 0, -1), A ray in the direction (0, -1, 0))
(A ray in the direction (1, 0, -1), A ray in the direction (0, 1, 0))

''
(A ray in the direction (0, -1, 0), A ray in the direction (-1, -2, 1))
(A ray in the direction (0, -1, 0), A ray in the direction (-1, -1, 1))
(A ray in the direction (0, 1, 0), A ray in the direction (-1, 0, 1))
(A ray in the direction (0, 1, 0), A ray in the direction (-1, 1, 1))
(A ray in the direction (1, 0, -1), A ray in the direction (0, -1, 0))
(A ray in the direction (1, 0, -1), A ray in the direction (0, 1, 0))

''
(A ray in the direction (0, -1, 0), A ray in the direction (-1, -2, 1))
(A ray in the direction (0, -1, 0), A ray in the direction (-1, -1, 1))
(A ray in the direction (0, 1, 0), A ray in the direction (-1, 0, 1))
(A ray in the direction (0, 1, 0), A ray in the direction (-1, 1, 1))
(A ray in the direction (1, 0, -1), A ray in the direction (0, -1, 0))
(A ray in the direction (1, 0, -1), A ray in the direction (0, 1, 0))

''
(A ray in the direction (0, -1, 0), A ray in the direction (-1, -2, 1))
(A ray in the direction (0, -1, 0), A ray in the direction (-1, -1, 1))
(A ray in the direction (0, 1, 0), A ray in the direction (-1, 0, 1))
(A ray in the direction (0, 1, 0), A ray in the direction (-1, 1, 1))
(A ray in the direction (1, 0, -1), A ray in the direction (0, -1, 0))
(A ray in the direction (1, 0, -1), A ray in the direction (0, 1, 0))

''
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: H=Polyhedron(lines=B(A,c).columns()[1:])
....: for v in sortables(A,c[1:]):
....:     for u in sortables(A,c[1:]):
....:         p_lambda_int(B(A,c),lam(A,v),[u,u+[c[0]]]).rays()
....:     input()
....: 
(A ray in the direction (0, -1, 0), A ray in the direction (-1, -2, 1))
(A ray in the direction (-1, -2, 1), A ray in the direction (-1, -1, 1))
(A ray in the direction (-1, 0, 1), A ray in the direction (-1, -1, 1))
(A ray in the direction (0, 1, 0), A ray in the direction (-1, 0, 1))
(A ray in the direction (1, 0, -1), A ray in the direction (0, -1, 0))
(A ray in the direction (1, 0, -1), A ray in the direction (0, 1, 0))

''
(A ray in the direction (0, -1, 0), A ray in the direction (-1, -2, 1))
(A ray in the direction (-1, -2, 1), A ray in the direction (-1, -1, 1))
(A ray in the direction (-1, 0, 1), A ray in the direction (-1, -1, 1))
(A ray in the direction (0, 1, 0), A ray in the direction (-1, 0, 1))
(A ray in the direction (1, 0, -1), A ray in the direction (0, -1, 0))
(A ray in the direction (1, 0, -1), A ray in the direction (0, 1, 0))

''
(A ray in the direction (0, -1, 0), A ray in the direction (-1, -2, 1))
(A ray in the direction (-1, -2, 1), A ray in the direction (-1, -1, 1))
(A ray in the direction (-1, 0, 1), A ray in the direction (-1, -1, 1))
(A ray in the direction (0, 1, 0), A ray in the direction (-1, 0, 1))
(A ray in the direction (1, 0, -1), A ray in the direction (0, -1, 0))
(A ray in the direction (1, 0, -1), A ray in the direction (0, 1, 0))

''
(A ray in the direction (0, -1, 0), A ray in the direction (-1, -2, 1))
(A ray in the direction (-1, -2, 1), A ray in the direction (-1, -1, 1))
(A ray in the direction (-1, 0, 1), A ray in the direction (-1, -1, 1))
(A ray in the direction (0, 1, 0), A ray in the direction (-1, 0, 1))
(A ray in the direction (1, 0, -1), A ray in the direction (0, -1, 0))
(A ray in the direction (1, 0, -1), A ray in the direction (0, 1, 0))

''
(A ray in the direction (0, -1, 0), A ray in the direction (-1, -2, 1))
(A ray in the direction (-1, -1, 1), A ray in the direction (-1, -2, 1))
(A ray in the direction (-1, 0, 1), A ray in the direction (-1, -1, 1))
(A ray in the direction (0, 1, 0), A ray in the direction (-1, 0, 1))
(A ray in the direction (1, 0, -1), A ray in the direction (0, -1, 0))
(A ray in the direction (1, 0, -1), A ray in the direction (0, 1, 0))

''
(A ray in the direction (0, -1, 0), A ray in the direction (-1, -2, 1))
(A ray in the direction (-1, -2, 1), A ray in the direction (-1, -1, 1))
(A ray in the direction (-1, 0, 1), A ray in the direction (-1, -1, 1))
(A ray in the direction (0, 1, 0), A ray in the direction (-1, 0, 1))
(A ray in the direction (1, 0, -1), A ray in the direction (0, -1, 0))
(A ray in the direction (1, 0, -1), A ray in the direction (0, 1, 0))

''
### reloading attached file domination4.py modified at 17:03:06 ###
Traceback (most recent call last):

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/IPython/core/interactiveshell.py:3433 in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)

  Cell In [653], line 1
    sage.repl.load.load(sage.repl.load.base64.b64decode("L1VzZXJzL3JlYWRpbmcvZ2l0L2FmZmluZV9kb21pbmFuY2Uvc29mdHdhcmUvZG9taW5hdGlvbjQucHk="),globals(),True)

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/repl/load.py:252 in load
    code = compile(f.read(), fpath, 'exec')

  File ~/git/affine_dominance/software/domination4.py:184
    ) )           out=out+[k+[c[0]]]
    ^
SyntaxError: unmatched ')'

sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: H=Polyhedron(lines=B(A,c).columns()[1:])
....: for v in sortables(A,c[1:]):
....:     for u in sortables(A,c[1:]):
....:         p_lambda_int(B(A,c),lam(A,v),[u,u+[c[0]]]).rays()
....:     input()
....: 
(A ray in the direction (0, -1, 0), A ray in the direction (-1, -2, 1))
(A ray in the direction (-1, -2, 1), A ray in the direction (-1, -1, 1))
(A ray in the direction (-1, 0, 1), A ray in the direction (-1, -1, 1))
(A ray in the direction (0, 1, 0), A ray in the direction (-1, 0, 1))
(A ray in the direction (1, 0, -1), A ray in the direction (0, -1, 0))
(A ray in the direction (1, 0, -1), A ray in the direction (0, 1, 0))

''
(A ray in the direction (0, -1, 0), A ray in the direction (-1, -2, 1))
(A ray in the direction (-1, -2, 1), A ray in the direction (-1, -1, 1))
(A ray in the direction (-1, 0, 1), A ray in the direction (-1, -1, 1))
(A ray in the direction (0, 1, 0), A ray in the direction (-1, 0, 1))
(A ray in the direction (1, 0, -1), A ray in the direction (0, -1, 0))
(A ray in the direction (1, 0, -1), A ray in the direction (0, 1, 0))

''
(A ray in the direction (0, -1, 0), A ray in the direction (-1, -2, 1))
(A ray in the direction (-1, -2, 1), A ray in the direction (-1, -1, 1))
(A ray in the direction (-1, 0, 1), A ray in the direction (-1, -1, 1))
(A ray in the direction (0, 1, 0), A ray in the direction (-1, 0, 1))
(A ray in the direction (1, 0, -1), A ray in the direction (0, -1, 0))
(A ray in the direction (1, 0, -1), A ray in the direction (0, 1, 0))

''
(A ray in the direction (0, -1, 0), A ray in the direction (-1, -2, 1))
(A ray in the direction (-1, -2, 1), A ray in the direction (-1, -1, 1))
(A ray in the direction (-1, 0, 1), A ray in the direction (-1, -1, 1))
(A ray in the direction (0, 1, 0), A ray in the direction (-1, 0, 1))
(A ray in the direction (1, 0, -1), A ray in the direction (0, -1, 0))
(A ray in the direction (1, 0, -1), A ray in the direction (0, 1, 0))

''
(A ray in the direction (0, -1, 0), A ray in the direction (-1, -2, 1))
(A ray in the direction (-1, -1, 1), A ray in the direction (-1, -2, 1))
(A ray in the direction (-1, 0, 1), A ray in the direction (-1, -1, 1))
(A ray in the direction (0, 1, 0), A ray in the direction (-1, 0, 1))
(A ray in the direction (1, 0, -1), A ray in the direction (0, -1, 0))
(A ray in the direction (1, 0, -1), A ray in the direction (0, 1, 0))

''
(A ray in the direction (0, -1, 0), A ray in the direction (-1, -2, 1))
(A ray in the direction (-1, -2, 1), A ray in the direction (-1, -1, 1))
(A ray in the direction (-1, 0, 1), A ray in the direction (-1, -1, 1))
(A ray in the direction (0, 1, 0), A ray in the direction (-1, 0, 1))
(A ray in the direction (1, 0, -1), A ray in the direction (0, -1, 0))
(A ray in the direction (1, 0, -1), A ray in the direction (0, 1, 0))

''
### reloading attached file domination4.py modified at 17:03:37 ###
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: for v in sortables(A,c[1:]):
....:     for k in K(c,v):
....:         p_lambda_faster(B(A,c),lam(A,v),k)
....:     input()
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 lines
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 4 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex, 1 ray, 1 line
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays

''
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 lines
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 lines
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays

''
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 lines
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 lines
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex, 1 ray, 1 line
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays

''
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 lines
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex, 1 ray, 1 line
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 lines
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex, 1 ray, 1 line

''
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex, 1 ray, 1 line
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 lines
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex, 1 ray, 1 line
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays

''
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex, 1 ray, 1 line
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 lines
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex, 1 ray, 1 line
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays

''
### reloading attached file domination4.py modified at 20:23:09 ###
### reloading attached file domination4.py modified at 20:26:16 ###
Traceback (most recent call last):

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/IPython/core/interactiveshell.py:3433 in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)

  Cell In [655], line 1
    sage.repl.load.load(sage.repl.load.base64.b64decode("L1VzZXJzL3JlYWRpbmcvZ2l0L2FmZmluZV9kb21pbmFuY2Uvc29mdHdhcmUvZG9taW5hdGlvbjQucHk="),globals(),True)

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/repl/load.py:252 in load
    code = compile(f.read(), fpath, 'exec')

  File ~/git/affine_dominance/software/domination4.py:206
    elif
         ^
SyntaxError: invalid syntax

### reloading attached file domination4.py modified at 20:28:18 ###
Traceback (most recent call last):

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/IPython/core/interactiveshell.py:3433 in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)

  Cell In [655], line 1
    sage.repl.load.load(sage.repl.load.base64.b64decode("L1VzZXJzL3JlYWRpbmcvZ2l0L2FmZmluZV9kb21pbmFuY2Uvc29mdHdhcmUvZG9taW5hdGlvbjQucHk="),globals(),True)

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/repl/load.py:252 in load
    code = compile(f.read(), fpath, 'exec')

  File ~/git/affine_dominance/software/domination4.py:212
    out=out+[k+[c[0]]]
    ^
IndentationError: unexpected indent

### reloading attached file domination4.py modified at 23:35:46 ###
### reloading attached file domination4.py modified at 23:38:40 ###
Traceback (most recent call last):

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/IPython/core/interactiveshell.py:3433 in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)

  Cell In [655], line 1
    sage.repl.load.load(sage.repl.load.base64.b64decode("L1VzZXJzL3JlYWRpbmcvZ2l0L2FmZmluZV9kb21pbmFuY2Uvc29mdHdhcmUvZG9taW5hdGlvbjQucHk="),globals(),True)

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/repl/load.py:252 in load
    code = compile(f.read(), fpath, 'exec')

  File ~/git/affine_dominance/software/domination4.py:226
    def Kc(c,coxnum):  # powers of c
    ^
IndentationError: expected an indented block after function definition on line 220

### reloading attached file domination4.py modified at 23:43:19 ###
Traceback (most recent call last):

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/IPython/core/interactiveshell.py:3433 in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)

  Cell In [655], line 1
    sage.repl.load.load(sage.repl.load.base64.b64decode("L1VzZXJzL3JlYWRpbmcvZ2l0L2FmZmluZV9kb21pbmFuY2Uvc29mdHdhcmUvZG9taW5hdGlvbjQucHk="),globals(),True)

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/repl/load.py:252 in load
    code = compile(f.read(), fpath, 'exec')

  File ~/git/affine_dominance/software/domination4.py:218
    if k=[]:
       ^
SyntaxError: invalid syntax. Maybe you meant '==' or ':=' instead of '='?

### reloading attached file domination4.py modified at 23:44:11 ###
Traceback (most recent call last):

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/IPython/core/interactiveshell.py:3433 in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)

  Cell In [655], line 1
    sage.repl.load.load(sage.repl.load.base64.b64decode("L1VzZXJzL3JlYWRpbmcvZ2l0L2FmZmluZV9kb21pbmFuY2Uvc29mdHdhcmUvZG9taW5hdGlvbjQucHk="),globals(),True)

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/repl/load.py:252 in load
    code = compile(f.read(), fpath, 'exec')

  File ~/git/affine_dominance/software/domination4.py:218
    if k=[]:
       ^
SyntaxError: invalid syntax. Maybe you meant '==' or ':=' instead of '='?

### reloading attached file domination4.py modified at 23:44:27 ###
sage: K_insert(c,[])
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In [655], line 1
----> 1 K_insert(c,[])

File ~/git/affine_dominance/software/domination4.py:204, in K_insert(c, v)
    202 oldK=K_insert(c[1:],v)
    203 for k in oldK:
--> 204     newk = insert(c,k)
    205     if newk==[] or newk[-1]==c[-1]:
    206         out=out+[newk,newk+[c[0]]]

File ~/git/affine_dominance/software/domination4.py:221, in insert(c, k)
    219     return []
    220 elif k[0]==c[1]:
--> 221     return [c[0],k[0]]+insert(c,k[1:])
    222 else:
    223     return k[0]+insert(c,k[1:])

File ~/git/affine_dominance/software/domination4.py:223, in insert(c, k)
    221     return [c[0],k[0]]+insert(c,k[1:])
    222 else:
--> 223     return k[0]+insert(c,k[1:])

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/rings/integer.pyx:1764, in sage.rings.integer.Integer.__add__ (build/cythonized/sage/rings/integer.c:21739)()
   1762         return y
   1763 
-> 1764     return coercion_model.bin_op(left, right, operator.add)
   1765 
   1766 cpdef _add_(self, right) noexcept:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1276, in sage.structure.coerce.CoercionModel.bin_op (build/cythonized/sage/structure/coerce.c:16830)()
   1274     # We should really include the underlying error.
   1275     # This causes so much headache.
-> 1276     raise bin_op_exception(op, x, y)
   1277 
   1278 cpdef canonical_coercion(self, x, y) noexcept:

TypeError: unsupported operand parent(s) for +: 'Integer Ring' and '<class 'list'>'
sage: c
[0, 1, 2]
### reloading attached file domination4.py modified at 23:46:06 ###
sage: K_insert(c,[])
[[], [0], [0, 1], [0, 1, 2], [0, 1, 2, 0], [0, 1, 2, 0, 1]]
sage: A
[ 2 -1  0]
[-1  2 -2]
[ 0 -1  2]
sage: c
[0, 1, 2]
sage: for v in sortables(A,c):
....:     K_insert(c,v)
....: 
[[0, 1, 2, 0, 1, 2, 0, 1, 2],
 [0, 1, 2, 0, 1, 2, 0, 1, 2, 0],
 [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1],
 [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2],
 [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0],
 [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1]]
[[0, 1, 2, 0, 1, 2, 0, 1],
 [0, 1, 2, 0, 1, 2, 0, 1, 2],
 [0, 1, 2, 0, 1, 2, 0, 1, 2, 0],
 [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1],
 [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2],
 [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0]]
[[0, 1, 2, 0, 1, 2, 0],
 [0, 1, 2, 0, 1, 2, 0, 1],
 [0, 1, 2, 0, 1, 2, 0, 1, 2],
 [0, 1, 2, 0, 1, 2, 0, 1, 2, 0],
 [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1],
 [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2]]
[[0, 1, 2, 0, 1, 2],
 [0, 1, 2, 0, 1, 2, 0],
 [0, 1, 2, 0, 1, 2, 0, 1],
 [0, 1, 2, 0, 1, 2, 0, 1, 2],
 [0, 1, 2, 0, 1, 2, 0, 1, 2, 0],
 [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1]]
[[0, 1, 2, 0, 1, 2, 0],
 [0, 1, 2, 0, 1, 2, 0, 1],
 [0, 1, 2, 0, 1, 2, 0, 1, 2],
 [0, 1, 2, 0, 1, 2, 0, 1, 2, 0],
 [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1],
 [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2]]
[[0, 1, 2, 0, 1],
 [0, 1, 2, 0, 1, 2],
 [0, 1, 2, 0, 1, 2, 0],
 [0, 1, 2, 0, 1, 2, 0, 1],
 [0, 1, 2, 0, 1, 2, 0, 1, 2],
 [0, 1, 2, 0, 1, 2, 0, 1, 2, 0]]
[[0, 1, 2, 0],
 [0, 1, 2, 0, 1],
 [0, 1, 2, 0, 1, 2],
 [0, 1, 2, 0, 1, 2, 0],
 [0, 1, 2, 0, 1, 2, 0, 1],
 [0, 1, 2, 0, 1, 2, 0, 1, 2]]
[[0, 1, 2, 0, 1, 2],
 [0, 1, 2, 0, 1, 2, 0],
 [0, 1, 2, 0, 1, 2, 0, 1],
 [0, 1, 2, 0, 1, 2, 0, 1, 2],
 [0, 1, 2, 0, 1, 2, 0, 1, 2, 0],
 [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1]]
[[0, 1, 2, 0, 1],
 [0, 1, 2, 0, 1, 2],
 [0, 1, 2, 0, 1, 2, 0],
 [0, 1, 2, 0, 1, 2, 0, 1],
 [0, 1, 2, 0, 1, 2, 0, 1, 2],
 [0, 1, 2, 0, 1, 2, 0, 1, 2, 0]]
[[0, 1, 2],
 [0, 1, 2, 0],
 [0, 1, 2, 0, 1],
 [0, 1, 2, 0, 1, 2],
 [0, 1, 2, 0, 1, 2, 0],
 [0, 1, 2, 0, 1, 2, 0, 1]]
[[0, 1, 2, 0],
 [0, 1, 2, 0, 1],
 [0, 1, 2, 0, 1, 2],
 [0, 1, 2, 0, 1, 2, 0],
 [0, 1, 2, 0, 1, 2, 0, 1],
 [0, 1, 2, 0, 1, 2, 0, 1, 2]]
[[0, 1],
 [0, 1, 2],
 [0, 1, 2, 0],
 [0, 1, 2, 0, 1],
 [0, 1, 2, 0, 1, 2],
 [0, 1, 2, 0, 1, 2, 0]]
[[0, 1, 2],
 [0, 1, 2, 0],
 [0, 1, 2, 0, 1],
 [0, 1, 2, 0, 1, 2],
 [0, 1, 2, 0, 1, 2, 0],
 [0, 1, 2, 0, 1, 2, 0, 1]]
[[0], [0, 1], [0, 1, 2], [0, 1, 2, 0], [0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2]]
[[0, 1, 2, 0, 1, 2],
 [0, 1, 2, 0, 1, 2, 0],
 [0, 1, 2, 0, 1, 2, 0, 1],
 [0, 1, 2, 0, 1, 2, 0, 1, 2],
 [0, 1, 2, 0, 1, 2, 0, 1, 2, 0],
 [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1]]
[[0, 1, 2, 0, 1],
 [0, 1, 2, 0, 1, 2],
 [0, 1, 2, 0, 1, 2, 0],
 [0, 1, 2, 0, 1, 2, 0, 1],
 [0, 1, 2, 0, 1, 2, 0, 1, 2],
 [0, 1, 2, 0, 1, 2, 0, 1, 2, 0]]
[[0, 1, 2],
 [0, 1, 2, 0],
 [0, 1, 2, 0, 1],
 [0, 1, 2, 0, 1, 2],
 [0, 1, 2, 0, 1, 2, 0],
 [0, 1, 2, 0, 1, 2, 0, 1]]
[[0, 1],
 [0, 1, 2],
 [0, 1, 2, 0],
 [0, 1, 2, 0, 1],
 [0, 1, 2, 0, 1, 2],
 [0, 1, 2, 0, 1, 2, 0]]
[[0, 1, 2], [0, 1, 2, 0], [0, 1, 2, 0, 1], [], [0], [0, 1]]
[[], [0], [0, 1], [0, 1, 2], [0, 1, 2, 0], [0, 1, 2, 0, 1]]
sage: for v in sortables(A,c):
....:     p_lambda_int(B(A,c),lam(A,v),K_insert(c,v))
....: 
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 4 vertices
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),K_insert(c,v))
....:     if P.dimension()>0:
....:         print(v,K_insert(c,v))
....: 
[0, 1, 2, 1, 2] [[0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1]]
[0, 2] [[0, 1, 2], [0, 1, 2, 0], [0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1]]
[1, 2] [[0, 1, 2], [0, 1, 2, 0], [0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1]]
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),K_insert(c,v))
....:     if P.dimension()>0:
....:         print(v,K_insert(c,v))
[0, 1, 2, 1, 2] [[0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1]]
[0, 2] [[0, 1, 2], [0, 1, 2, 0], [0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1]]
[1, 2] [[0, 1, 2], [0, 1, 2, 0], [0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1]]
sage: K_insert([2],[])
[[], [2]]
sage: K_insert([1,2],[])
[[], [1], [1, 2], [1, 2, 1]]
sage: K_insert([1,2],[2])
[[1, 2], [1, 2, 1], [], [1]]
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),K_insert(c,v))
....:     if P.dimension()>0:
....:         print(v,K_insert(c,v))
....: 
[0, 1, 2, 1, 2] [[0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1]]
[0, 2] [[0, 1, 2], [0, 1, 2, 0], [0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1]]
[1, 2] [[0, 1, 2], [0, 1, 2, 0], [0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1]]
### reloading attached file domination4.py modified at 23:53:36 ###
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),K_insert(c,v))
....:     if P.dimension()>0:
....:         print(v,K_insert(c,v))
....: 
---------------------------------------------------------------------------
UnboundLocalError                         Traceback (most recent call last)
Cell In [668], line 4
      2 c=[Integer(0),Integer(1),Integer(2)]
      3 for v in sortables(A,c):
----> 4     P=p_lambda_int(B(A,c),lam(A,v),K_insert(c,v))
      5     if P.dimension()>Integer(0):
      6         print(v,K_insert(c,v))

File ~/git/affine_dominance/software/domination4.py:210, in K_insert(c, v)
    208             out=out+[newk]
    209 else:  # The "induction on length" case.  This is provably the right thing to do.
--> 210     for k in K_insert(c[1:]+[c[0]],v[1:]):
    211         if k!=[] and k[0]==v[0]:
    212             out=out+[k[1:]]

File ~/git/affine_dominance/software/domination4.py:210, in K_insert(c, v)
    208             out=out+[newk]
    209 else:  # The "induction on length" case.  This is provably the right thing to do.
--> 210     for k in K_insert(c[1:]+[c[0]],v[1:]):
    211         if k!=[] and k[0]==v[0]:
    212             out=out+[k[1:]]

    [... skipping similar frames: K_insert at line 210 (5 times)]

File ~/git/affine_dominance/software/domination4.py:210, in K_insert(c, v)
    208             out=out+[newk]
    209 else:  # The "induction on length" case.  This is provably the right thing to do.
--> 210     for k in K_insert(c[1:]+[c[0]],v[1:]):
    211         if k!=[] and k[0]==v[0]:
    212             out=out+[k[1:]]

File ~/git/affine_dominance/software/domination4.py:214, in K_insert(c, v)
    212             out=out+[k[1:]]
    213         else:
--> 214             out=out+[[v[0]]+k]
    215 return out

UnboundLocalError: cannot access local variable 'out' where it is not associated with a value
### reloading attached file domination4.py modified at 23:54:08 ###
### reloading attached file domination4.py modified at 23:54:13 ###
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),K_insert(c,v))
....:     if P.dimension()>0:
....:         print(v,K_insert(c,v))
....: 
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),K_insert(c,v))
....:     print(num,v,P,dimension())
....:     if P.dimension()>0:
....:         print("Failure!")
....:         break
....: 
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In [670], line 7
      5 num+=Integer(1)
      6 P=p_lambda_int(B(A,c),lam(A,v),K_insert(c,v))
----> 7 print(num,v,P,dimension())
      8 if P.dimension()>Integer(0):
      9     print("Failure!")

TypeError: dimension() missing 1 required positional argument: 'x'
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),K_insert(c,v))
....:     print(num,v,P.dimension())
....:     if P.dimension()>0:
....:         print("Failure!")
....:         break
....: 
1 [0, 1, 2, 0, 1, 2, 0, 1, 2] 0
2 [0, 1, 2, 0, 1, 2, 0, 1] 0
3 [0, 1, 2, 0, 1, 2, 0] 0
4 [0, 1, 2, 0, 1, 2] 0
5 [0, 1, 2, 0, 1, 0] 0
6 [0, 1, 2, 0, 1] 0
7 [0, 1, 2, 0] 0
8 [0, 1, 2, 1, 2] 0
9 [0, 1, 2, 1] 0
10 [0, 1, 2] 0
11 [0, 1, 0] 0
12 [0, 1] 0
13 [0, 2] 0
14 [0] 0
15 [1, 2, 1, 2] 0
16 [1, 2, 1] 0
17 [1, 2] 0
18 [1] 0
19 [2] 0
20 [] 0
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,4]
....: num=0
....: for v in sortables(A,c):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),K_insert(c,v))
....:     print(num,v,P.dimension())
....:     if P.dimension()>0:
....:         print("Failure!")
....:         break
....: 
---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
Cell In [672], line 4
      2 c=[Integer(0),Integer(1),Integer(2),Integer(4)]
      3 num=Integer(0)
----> 4 for v in sortables(A,c):
      5     num+=Integer(1)
      6     P=p_lambda_int(B(A,c),lam(A,v),K_insert(c,v))

File ~/git/affine_dominance/software/domination4.py:304, in sortables(A, c)
    303 def sortables(A,c):
--> 304     yield from sortables_remaining(A,c,[],vector([1]*A.nrows()))

File ~/git/affine_dominance/software/domination4.py:311, in sortables_remaining(A, c, sort, vec)
    309 else:
    310     if vec[c[0]]>0:
--> 311         yield from sortables_remaining(A,c[1:]+[c[0]],sort+[c[0]],reflect(A,vec,c[0]))
    312     yield from sortables_remaining(A,c[1:],sort,vec)

File ~/git/affine_dominance/software/domination4.py:311, in sortables_remaining(A, c, sort, vec)
    309 else:
    310     if vec[c[0]]>0:
--> 311         yield from sortables_remaining(A,c[1:]+[c[0]],sort+[c[0]],reflect(A,vec,c[0]))
    312     yield from sortables_remaining(A,c[1:],sort,vec)

File ~/git/affine_dominance/software/domination4.py:311, in sortables_remaining(A, c, sort, vec)
    309 else:
    310     if vec[c[0]]>0:
--> 311         yield from sortables_remaining(A,c[1:]+[c[0]],sort+[c[0]],reflect(A,vec,c[0]))
    312     yield from sortables_remaining(A,c[1:],sort,vec)

File ~/git/affine_dominance/software/domination4.py:310, in sortables_remaining(A, c, sort, vec)
    308     yield sort
    309 else:
--> 310     if vec[c[0]]>0:
    311         yield from sortables_remaining(A,c[1:]+[c[0]],sort+[c[0]],reflect(A,vec,c[0]))
    312     yield from sortables_remaining(A,c[1:],sort,vec)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/modules/free_module_element.pyx:1842, in sage.modules.free_module_element.FreeModuleElement.__getitem__ (build/cythonized/sage/modules/free_module_element.c:19571)()
   1840     n += d
   1841 if n < 0 or n >= d:
-> 1842     raise IndexError("vector index out of range")
   1843 return self.get_unsafe(n)
   1844 

IndexError: vector index out of range
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: num=0
....: for v in sortables(A,c):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),K_insert(c,v))
....:     print(num,v,P.dimension())
....:     if P.dimension()>0:
....:         print("Failure!")
....:         break
1 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3] 0
2 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2] 0
3 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1] 0
4 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0] 0
5 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3] 0
6 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 0, 1] 0
7 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 0] 0
8 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2] 0
9 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 0] 0
10 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1] 0
11 [0, 1, 2, 3, 0, 1, 2, 3, 0] 0
12 [0, 1, 2, 3, 0, 1, 2, 3, 1, 2, 3] 0
13 [0, 1, 2, 3, 0, 1, 2, 3, 1, 2] 0
14 [0, 1, 2, 3, 0, 1, 2, 3, 1] 0
15 [0, 1, 2, 3, 0, 1, 2, 3] 0
16 [0, 1, 2, 3, 0, 1, 2, 0, 1, 0] 0
17 [0, 1, 2, 3, 0, 1, 2, 0, 1] 0
18 [0, 1, 2, 3, 0, 1, 2, 0] 0
19 [0, 1, 2, 3, 0, 1, 2, 1] 0
20 [0, 1, 2, 3, 0, 1, 2] 0
21 [0, 1, 2, 3, 0, 1, 0] 0
22 [0, 1, 2, 3, 0, 1] 0
23 [0, 1, 2, 3, 0, 2, 3] 2
Failure!
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: num=0
....: for v in sortables(A,c):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),K_insert(c,v))
....:     print(num,v,P.dimension())
....:     if P.dimension()>0:
....:         print("Failure!")
....:         print(K_insert(c,v))
....:         break
....: 
1 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3] 0
2 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2] 0
3 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1] 0
4 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0] 0
5 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3] 0
6 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 0, 1] 0
7 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 0] 0
8 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2] 0
9 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 0] 0
10 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1] 0
11 [0, 1, 2, 3, 0, 1, 2, 3, 0] 0
12 [0, 1, 2, 3, 0, 1, 2, 3, 1, 2, 3] 0
13 [0, 1, 2, 3, 0, 1, 2, 3, 1, 2] 0
14 [0, 1, 2, 3, 0, 1, 2, 3, 1] 0
15 [0, 1, 2, 3, 0, 1, 2, 3] 0
16 [0, 1, 2, 3, 0, 1, 2, 0, 1, 0] 0
17 [0, 1, 2, 3, 0, 1, 2, 0, 1] 0
18 [0, 1, 2, 3, 0, 1, 2, 0] 0
19 [0, 1, 2, 3, 0, 1, 2, 1] 0
20 [0, 1, 2, 3, 0, 1, 2] 0
21 [0, 1, 2, 3, 0, 1, 0] 0
22 [0, 1, 2, 3, 0, 1] 0
23 [0, 1, 2, 3, 0, 2, 3] 2
Failure!
[[0, 1, 2, 3, 0], [0, 1, 2, 3, 0, 1], [0, 1, 2, 3, 0, 1, 2, 3], [0, 1, 2, 3, 0, 1, 2, 3, 0], [0, 1, 2, 3, 0, 1, 2, 3, 0, 1], [0, 1, 2, 3, 0, 1, 2, 3], [0, 1, 2, 3, 0, 1, 2, 3, 0], [0, 1, 2, 3, 0, 1, 2, 3, 0, 1], [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2], [0, 1, 2, 3, 0, 1, 2, 3], [0, 1, 2, 3, 0, 1, 2, 3, 0], [0, 1, 2, 3, 0, 1, 2, 3, 0, 1], [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2], [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3], [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0], [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1], [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2], [0, 1, 2, 3, 0, 1, 2, 3], [0, 1, 2, 3, 0, 1, 2, 3, 0], [0, 1, 2, 3, 0, 1, 2, 3, 0, 1], [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2], [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3], [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0], [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1], [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2]]
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),K_insert(c,v))
....:     if P.dimension()>0:
....:         print(v,K_insert(c,v))
....: 
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: for v in sortables(A,c):
....:     print(v,K_insert(c,v))
[0, 1, 2, 0, 1, 2, 0, 1, 2] [[0, 1, 2, 0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1]]
[0, 1, 2, 0, 1, 2, 0, 1] [[0, 1, 2, 0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0]]
[0, 1, 2, 0, 1, 2, 0] [[0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2]]
[0, 1, 2, 0, 1, 2] [[0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1]]
[0, 1, 2, 0, 1, 0] [[0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2]]
[0, 1, 2, 0, 1] [[0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0]]
[0, 1, 2, 0] [[0, 1, 2, 0], [0, 1, 2, 0, 1], [0, 1, 2, 0], [0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2], [0, 1, 2, 0], [0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2, 0, 1, 2], [0, 1, 2, 0], [0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2, 0, 1, 2]]
[0, 1, 2, 1, 2] [[0, 1, 2], [0, 1, 2, 0], [0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1]]
[0, 1, 2, 1] [[0, 1, 2], [0, 1, 2, 0], [0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0]]
[0, 1, 2] [[0, 1, 2], [0, 1, 2, 0], [0, 1, 2], [0, 1, 2, 0], [0, 1, 2, 0, 1], [0, 1, 2], [0, 1, 2, 0], [0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1], [0, 1, 2], [0, 1, 2, 0], [0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1]]
[0, 1, 0] [[0, 1], [0, 1, 2], [0, 1, 2, 0], [0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2], [0, 1, 2, 0], [0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2, 0, 1, 2], [0, 1, 2, 0], [0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2, 0, 1, 2]]
[0, 1] [[0, 1], [0, 1, 2], [0, 1], [0, 1, 2], [0, 1, 2, 0], [0, 1], [0, 1, 2], [0, 1, 2, 0], [0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0], [0, 1], [0, 1, 2], [0, 1, 2, 0], [0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0]]
[0, 2] [[0], [0, 1], [0, 1, 2], [0, 1, 2, 0], [0, 1, 2, 0, 1], [0, 1, 2], [0, 1, 2, 0], [0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1], [0, 1, 2], [0, 1, 2, 0], [0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1]]
[0] [[0], [0, 1], [0], [0, 1], [0, 1, 2], [0], [0, 1], [0, 1, 2], [0, 1, 2, 0], [0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2], [0], [0, 1], [0, 1, 2], [0, 1, 2, 0], [0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2]]
[1, 2, 1, 2] [[], [0], [0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1]]
[1, 2, 1] [[], [0], [0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0]]
[1, 2] [[], [0], [0, 1, 2], [0, 1, 2, 0], [0, 1, 2, 0, 1], [0, 1, 2], [0, 1, 2, 0], [0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1], [0, 1, 2], [0, 1, 2, 0], [0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1]]
[1] [[], [0], [0, 1], [0, 1, 2], [0, 1, 2, 0], [0, 1], [0, 1, 2], [0, 1, 2, 0], [0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0], [0, 1], [0, 1, 2], [0, 1, 2, 0], [0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0]]
[2] [[], [0], [], [0], [0, 1], [0, 1, 2], [0, 1, 2, 0], [0, 1, 2, 0, 1], [], [0], [0, 1], [0, 1, 2], [0, 1, 2, 0], [0, 1, 2, 0, 1], [], [0], [0, 1]]
[] [[], [0], [], [0], [0, 1], [], [0], [0, 1], [0, 1, 2], [0, 1, 2, 0], [0, 1, 2, 0, 1], [], [0], [0, 1], [0, 1, 2], [0, 1, 2, 0], [0, 1, 2, 0, 1]]
sage: A=CartanMatrix(['C',2])
....: c=[0,1]
....: for v in sortables(A,c):
....:     print(v,K_insert(c,v))
[0, 1, 0, 1] [[0, 1, 0, 1], [0, 1, 0, 1, 0], [0, 1, 0, 1], [0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1], [0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0]]
[0, 1, 0] [[0, 1, 0], [0, 1, 0, 1], [0, 1, 0], [0, 1, 0, 1], [0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1], [0, 1, 0], [0, 1, 0, 1], [0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1]]
[0, 1] [[0, 1], [0, 1, 0], [0, 1], [0, 1, 0], [0, 1, 0, 1], [0, 1, 0, 1, 0], [0, 1], [0, 1, 0], [0, 1, 0, 1], [0, 1, 0, 1, 0]]
[0] [[0], [0, 1], [0], [0, 1], [0, 1, 0], [0, 1, 0, 1], [0], [0, 1], [0, 1, 0], [0, 1, 0, 1]]
[1] [[], [0], [0, 1], [0, 1, 0], [], [0], [0, 1], [0, 1, 0], [], [0]]
[] [[], [0], [], [0], [0, 1], [0, 1, 0], [], [0], [0, 1], [0, 1, 0]]
sage: K_insert([1,2],[])
[[], [1], [], [1], [1, 2], [1, 2, 1], [], [1], [1, 2], [1, 2, 1]]
### reloading attached file domination4.py modified at 00:16:25 ###
sage: K_insert([1,2],[])
[[], [], [1], [], [1], [1, 2], [1, 2, 1]]
### reloading attached file domination4.py modified at 00:16:37 ###
sage: K_insert([1,2],[])
[[], [1], [1, 2], [1, 2, 1]]
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: num=0
....: for v in sortables(A,c):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),K_insert(c,v))
....:     print(num,v,P.dimension())
....:     if P.dimension()>0:
....:         print("Failure!")
....:         print(K_insert(c,v))
....:         break
....: 
1 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3] 0
2 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2] 0
3 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1] 0
4 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0] 0
5 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3] 0
6 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 0, 1] 0
7 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 0] 0
8 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2] 0
9 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 0] 2
Failure!
[[0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0], [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1], [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2], [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3], [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0], [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1], [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2], [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]]
sage: K_insert([0],[])
[[], [0]]
sage: K_insert([0],[0])
[[0], []]
sage: K_insert([0,1],[0])
[[0], [0, 1], [0, 1, 0], [0, 1, 0, 1]]
sage: K_insert([0,1],[])
[[], [0], [0, 1], [0, 1, 0]]
sage: K_insert([0,1],[1])
[[0, 1], [0, 1, 0], [], [0]]
sage: A=CartanMatrix(['C',2])
....: c=[0,1]
....: for v in sortables(A,c[1:]):
....:     print(v,K_insert(c,v))
....: 
[1] [[0, 1], [0, 1, 0], [], [0]]
[] [[], [0], [0, 1], [0, 1, 0]]
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: for v in sortables(A,c[1:]):
....:     print(v,K_insert(c,v))
[1, 2, 1, 2] [[0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1]]
[1, 2, 1] [[0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0]]
[1, 2] [[0, 1, 2], [0, 1, 2, 0], [0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1]]
[1] [[0, 1], [0, 1, 2], [0, 1, 2, 0], [0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0]]
[2] [[0, 1, 2], [0, 1, 2, 0], [0, 1, 2, 0, 1], [], [0], [0, 1]]
[] [[], [0], [0, 1], [0, 1, 2], [0, 1, 2, 0], [0, 1, 2, 0, 1]]
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: for v in sortables(A,c[1:]):
....:     print(v,"\n",K_insert(c[1:],v),"\n",K_insert(c,v))
[1, 2, 1, 2] 
 [[1, 2, 1, 2], [1, 2, 1, 2, 1], [1, 2, 1, 2, 1, 2], [1, 2, 1, 2, 1, 2, 1]] 
 [[0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1]]
[1, 2, 1] 
 [[1, 2, 1], [1, 2, 1, 2], [1, 2, 1, 2, 1], [1, 2, 1, 2, 1, 2]] 
 [[0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0]]
[1, 2] 
 [[1, 2], [1, 2, 1], [1, 2, 1, 2], [1, 2, 1, 2, 1]] 
 [[0, 1, 2], [0, 1, 2, 0], [0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1]]
[1] 
 [[1], [1, 2], [1, 2, 1], [1, 2, 1, 2]] 
 [[0, 1], [0, 1, 2], [0, 1, 2, 0], [0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0]]
[2] 
 [[1, 2], [1, 2, 1], [], [1]] 
 [[0, 1, 2], [0, 1, 2, 0], [0, 1, 2, 0, 1], [], [0], [0, 1]]
[] 
 [[], [1], [1, 2], [1, 2, 1]] 
 [[], [0], [0, 1], [0, 1, 2], [0, 1, 2, 0], [0, 1, 2, 0, 1]]
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: for v in sortables(A,c[1:]):
....:     print(v,"\n",K_insert(c[1:],v),"\n",K_insert(c,v),"\n")
....: 
[1, 2, 1, 2] 
 [[1, 2, 1, 2], [1, 2, 1, 2, 1], [1, 2, 1, 2, 1, 2], [1, 2, 1, 2, 1, 2, 1]] 
 [[0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1]] 

[1, 2, 1] 
 [[1, 2, 1], [1, 2, 1, 2], [1, 2, 1, 2, 1], [1, 2, 1, 2, 1, 2]] 
 [[0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0]] 

[1, 2] 
 [[1, 2], [1, 2, 1], [1, 2, 1, 2], [1, 2, 1, 2, 1]] 
 [[0, 1, 2], [0, 1, 2, 0], [0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1]] 

[1] 
 [[1], [1, 2], [1, 2, 1], [1, 2, 1, 2]] 
 [[0, 1], [0, 1, 2], [0, 1, 2, 0], [0, 1, 2, 0, 1], [0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2, 0]] 

[2] 
 [[1, 2], [1, 2, 1], [], [1]] 
 [[0, 1, 2], [0, 1, 2, 0], [0, 1, 2, 0, 1], [], [0], [0, 1]] 

[] 
 [[], [1], [1, 2], [1, 2, 1]] 
 [[], [0], [0, 1], [0, 1, 2], [0, 1, 2, 0], [0, 1, 2, 0, 1]] 

sage: insert([0,1,2],[1,2])
[0, 1, 2]
sage: insert([0,1,2],[1,2,1])
[0, 1, 2, 0, 1]
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: num=0
....: for v in sortables(A,c):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),K_insert(c,v))
....:     print(num,v,P.dimension())
....:     if P.dimension()>0:
....:         print("Failure!")
....:         print(v,"\n",K_insert(c[1:],v),"\n",K_insert(c,v),"\n")
....:         break
1 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3] 0
2 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2] 0
3 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1] 0
4 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0] 0
5 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3] 0
6 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 0, 1] 0
7 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 0] 0
8 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2] 0
9 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 0] 2
Failure!
[0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 0] 
 [[], [1], [1, 2], [1, 2, 3], [1, 2, 3, 1], [1, 2, 3, 1, 2]] 
 [[0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0], [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1], [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2], [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3], [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0], [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1], [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2], [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]] 

sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),K_insert(c,v))
....:     print(num,v,P.dimension())
....:     if P.dimension()>0:
....:         print("Failure!")
....:         print(v,"\n",K_insert(c[1:],v),"\n",K_insert(c,v),"\n")
....:         break
1 [1, 2, 3, 1, 2, 3, 1, 2, 3] 0
2 [1, 2, 3, 1, 2, 3, 1, 2] 0
3 [1, 2, 3, 1, 2, 3, 1] 0
4 [1, 2, 3, 1, 2, 3] 0
5 [1, 2, 3, 1, 2, 1] 0
6 [1, 2, 3, 1, 2] 0
7 [1, 2, 3, 1] 0
8 [1, 2, 3, 2, 3] 3
Failure!
[1, 2, 3, 2, 3] 
 [[1, 2, 3, 1, 2, 3], [1, 2, 3, 1, 2, 3, 1], [1, 2, 3, 1, 2, 3, 1, 2], [1, 2, 3, 1, 2, 3, 1, 2, 3], [1, 2, 3, 1, 2, 3, 1, 2, 3, 1], [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2]] 
 [[0, 1, 2, 3, 0, 1, 2, 3], [0, 1, 2, 3, 0, 1, 2, 3, 0], [0, 1, 2, 3, 0, 1, 2, 3, 0, 1], [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2], [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3], [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0], [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1], [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2]] 

### reloading attached file domination4.py modified at 13:26:39 ###
### reloading attached file domination4.py modified at 13:28:01 ###
### reloading attached file domination4.py modified at 13:32:33 ###
Traceback (most recent call last):

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/IPython/core/interactiveshell.py:3433 in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)

  Cell In [695], line 1
    sage.repl.load.load(sage.repl.load.base64.b64decode("L1VzZXJzL3JlYWRpbmcvZ2l0L2FmZmluZV9kb21pbmFuY2Uvc29mdHdhcmUvZG9taW5hdGlvbjQucHk="),globals(),True)

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/repl/load.py:252 in load
    code = compile(f.read(), fpath, 'exec')

  File ~/git/affine_dominance/software/domination4.py:176
    def B(A,c):  # Cartan matrix (assumes nonpositive off-diagonal entries) and Coxeter element (a list)
    ^
IndentationError: expected an indented block after function definition on line 171

### reloading attached file domination4.py modified at 13:32:52 ###
sage: P
A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 6 vertices
sage: P.vertices()+[0]
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In [696], line 1
----> 1 P.vertices()+[Integer(0)]

TypeError: can only concatenate tuple (not "list") to tuple
sage: P.vertices()+(0)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In [697], line 1
----> 1 P.vertices()+(Integer(0))

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/rings/integer.pyx:1764, in sage.rings.integer.Integer.__add__ (build/cythonized/sage/rings/integer.c:21739)()
   1762         return y
   1763 
-> 1764     return coercion_model.bin_op(left, right, operator.add)
   1765 
   1766 cpdef _add_(self, right) noexcept:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1276, in sage.structure.coerce.CoercionModel.bin_op (build/cythonized/sage/structure/coerce.c:16830)()
   1274     # We should really include the underlying error.
   1275     # This causes so much headache.
-> 1276     raise bin_op_exception(op, x, y)
   1277 
   1278 cpdef canonical_coercion(self, x, y) noexcept:

TypeError: unsupported operand parent(s) for +: '<class 'tuple'>' and 'Integer Ring'
sage: R=P.rays()
sage: R
()
sage: R=P.vertices()
sage: 
sage: P=p_lambda_int(B(A,c),lam(A,[]),[])
---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
Cell In [701], line 1
----> 1 P=p_lambda_int(B(A,c),lam(A,[]),[])

File ~/git/affine_dominance/software/domination4.py:125, in p_lambda_int(B, la, seqs)
    124 def p_lambda_int(B, la, seqs):
--> 125     P = p_lambda_faster(B, la, seqs[0])
    126     for s in seqs:
    127         P = P.intersection(p_lambda_faster(B, la, s))

IndexError: list index out of range
sage: P=p_lambda_int(B(A,c),lam(A,[]),[[]])
sage: P
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 4 rays
sage: P.rays()
(A ray in the direction (0, 0, 1, 0),
 A ray in the direction (1, 0, -1, 0),
 A ray in the direction (0, 1, 0, -1),
 A ray in the direction (0, -1, 0, 0))
sage: P.rays()[1]
A ray in the direction (1, 0, -1, 0)
sage: P.Vrep()
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
Cell In [706], line 1
----> 1 P.Vrep()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:489, in sage.structure.element.Element.__getattr__ (build/cythonized/sage/structure/element.c:11576)()
    487         AttributeError: 'LeftZeroSemigroup_with_category.element_class' object has no attribute 'blah_blah'...
    488     """
--> 489     return self.getattr_from_category(name)
    490 
    491 cdef getattr_from_category(self, name) noexcept:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:502, in sage.structure.element.Element.getattr_from_category (build/cythonized/sage/structure/element.c:11686)()
    500     else:
    501         cls = P._abstract_element_class
--> 502     return getattr_from_other_class(self, cls, name)
    503 
    504 def __dir__(self):

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/cpython/getattr.pyx:357, in sage.cpython.getattr.getattr_from_other_class (build/cythonized/sage/cpython/getattr.c:4357)()
    355     dummy_error_message.cls = type(self)
    356     dummy_error_message.name = name
--> 357     raise AttributeError(dummy_error_message)
    358 cdef PyObject* attr = instance_getattr(cls, name)
    359 if attr is NULL:

AttributeError: 'Polyhedra_QQ_ppl_with_category.element_class' object has no attribute 'Vrep'
sage: list(P.rays())
[A ray in the direction (0, 0, 1, 0),
 A ray in the direction (1, 0, -1, 0),
 A ray in the direction (0, 1, 0, -1),
 A ray in the direction (0, -1, 0, 0)]
sage: list(P.rays())+[(0,0,0,0)]
[A ray in the direction (0, 0, 1, 0),
 A ray in the direction (1, 0, -1, 0),
 A ray in the direction (0, 1, 0, -1),
 A ray in the direction (0, -1, 0, 0),
 (0, 0, 0, 0)]
### reloading attached file domination4.py modified at 14:06:57 ###
Traceback (most recent call last):

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/IPython/core/interactiveshell.py:3433 in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)

  Cell In [709], line 1
    sage.repl.load.load(sage.repl.load.base64.b64decode("L1VzZXJzL3JlYWRpbmcvZ2l0L2FmZmluZV9kb21pbmFuY2Uvc29mdHdhcmUvZG9taW5hdGlvbjQucHk="),globals(),True)

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/repl/load.py:252 in load
    code = compile(f.read(), fpath, 'exec')

  File ~/git/affine_dominance/software/domination4.py:172
    rays=list(r.vector() for r in P.rays();
                                          ^
SyntaxError: invalid syntax

### reloading attached file domination4.py modified at 14:07:04 ###
sage: list(r.vector() for r in P.rays())
[(0, 0, 1, 0), (1, 0, -1, 0), (0, 1, 0, -1), (0, -1, 0, 0)]
### reloading attached file domination4.py modified at 14:14:27 ###
Traceback (most recent call last):

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/IPython/core/interactiveshell.py:3433 in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)

  Cell In [710], line 1
    sage.repl.load.load(sage.repl.load.base64.b64decode("L1VzZXJzL3JlYWRpbmcvZ2l0L2FmZmluZV9kb21pbmFuY2Uvc29mdHdhcmUvZG9taW5hdGlvbjQucHk="),globals(),True)

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/repl/load.py:252 in load
    code = compile(f.read(), fpath, 'exec')

  File ~/git/affine_dominance/software/domination4.py:177
    rays=rays+[vertvec-
              ^
SyntaxError: '[' was never closed

sage: (1,2,3)-(4,1,-3)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In [710], line 1
----> 1 (Integer(1),Integer(2),Integer(3))-(Integer(4),Integer(1),-Integer(3))

TypeError: unsupported operand type(s) for -: 'tuple' and 'tuple'
sage: vector((1,2,3))-vector((4,1,-3))
(-3, 1, 6)
### reloading attached file domination4.py modified at 14:16:43 ###
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_int(B(A,c),lam(A,v),[[],[0,1],[2,0]])
....:     print(P,cone_at(P,lam(A,v))
  Cell In [712], line 5
    print(P,cone_at(P,lam(A,v))
                               ^
SyntaxError: incomplete input

sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_int(B(A,c),lam(A,v),[[],[0,1],[2,0]])
....:     print(P,cone_at(P,lam(A,v)))
....: 
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray
A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_int(B(A,c),lam(A,v),[[],[0,1],[2,0]])
....:     print(P,cone_at(P,lam(A,v)))
A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 4 vertices and 1 ray A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 3 rays
A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 4 vertices and 1 ray A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 3 rays
A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 4 vertices and 1 ray A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 3 rays
A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 4 vertices and 1 ray A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 3 rays
A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 4 vertices and 1 ray A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 3 rays
A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 4 vertices and 1 ray A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 3 rays
A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 4 vertices and 1 ray A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 3 rays
A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices and 1 ray A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays
A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices and 1 ray A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays
A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices and 1 ray A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays
A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 4 vertices and 1 ray A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 3 rays
A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices and 1 ray A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays
A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices and 1 ray A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays
A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices and 1 ray A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays
A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices and 1 ray A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays
A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices and 1 ray A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays
A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices and 1 ray A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays
A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices and 1 ray A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays
A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 1 ray A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 1 ray
A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 1 ray A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 1 ray
### reloading attached file domination4.py modified at 14:22:47 ###
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_cone(B(A,c),lam(A,v),[[],[0,1],[2,0]])
....:     print(P,"\n",P.vertices(),"\n",P.rays(),"\n",P.lines(),"\n\n")
....: 
A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 3 rays 
 (A vertex at (7, -1, -1, -1),) 
 (A ray in the direction (0, 0, 1, 0), A ray in the direction (1, 1, 0, -1), A ray in the direction (0, 1, 1, -1)) 
 () 


A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 3 rays 
 (A vertex at (7, -1, -3, 1),) 
 (A ray in the direction (0, 0, 1, 0), A ray in the direction (1, 1, 0, -1), A ray in the direction (0, 1, 1, -1)) 
 () 


A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 3 rays 
 (A vertex at (7, -2, -3, 2),) 
 (A ray in the direction (0, 0, 1, 0), A ray in the direction (1, 1, 0, -1), A ray in the direction (0, 1, 1, -1)) 
 () 


A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 3 rays 
 (A vertex at (6, -1, -4, 3),) 
 (A ray in the direction (0, 0, 1, 0), A ray in the direction (1, 1, 0, -1), A ray in the direction (0, 1, 1, -1)) 
 () 


A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 3 rays 
 (A vertex at (7, -4, -1, 2),) 
 (A ray in the direction (0, 0, 1, 0), A ray in the direction (1, 1, 0, -1), A ray in the direction (0, 1, 1, -1)) 
 () 


A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 3 rays 
 (A vertex at (6, -3, -2, 3),) 
 (A ray in the direction (0, 0, 1, 0), A ray in the direction (1, 1, 0, -1), A ray in the direction (0, 1, 1, -1)) 
 () 


A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 3 rays 
 (A vertex at (5, -3, -1, 3),) 
 (A ray in the direction (0, 0, 1, 0), A ray in the direction (1, 1, 0, -1), A ray in the direction (0, 1, 1, -1)) 
 () 


A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays 
 (A vertex at (6, -5, 4, -1),) 
 (A ray in the direction (0, 0, 1, 0), A ray in the direction (1, 1, -1, -1)) 
 () 


A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays 
 (A vertex at (6, -5, 2, 1),) 
 (A ray in the direction (0, 0, 1, 0), A ray in the direction (1, 1, -1, -1)) 
 () 


A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays 
 (A vertex at (5, -4, 1, 2),) 
 (A ray in the direction (0, 0, 1, 0), A ray in the direction (1, 1, -1, -1)) 
 () 


A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 3 rays 
 (A vertex at (3, -1, -1, 3),) 
 (A ray in the direction (0, 0, 1, 0), A ray in the direction (1, 1, 0, -1), A ray in the direction (0, 1, 1, -1)) 
 () 


A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays 
 (A vertex at (3, -2, 1, 2),) 
 (A ray in the direction (0, 0, 1, 0), A ray in the direction (1, 1, -1, -1)) 
 () 


A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays 
 (A vertex at (2, -1, 4, -1),) 
 (A ray in the direction (0, 0, 1, 0), A ray in the direction (1, 1, -1, -1)) 
 () 


A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays 
 (A vertex at (2, -1, 2, 1),) 
 (A ray in the direction (0, 0, 1, 0), A ray in the direction (1, 1, -1, -1)) 
 () 


A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays 
 (A vertex at (1, 5, -1, -1),) 
 (A ray in the direction (0, 0, 1, 0), A ray in the direction (0, 1, 1, -1)) 
 () 


A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays 
 (A vertex at (1, 5, -3, 1),) 
 (A ray in the direction (0, 0, 1, 0), A ray in the direction (0, 1, 1, -1)) 
 () 


A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays 
 (A vertex at (1, 4, -3, 2),) 
 (A ray in the direction (0, 0, 1, 0), A ray in the direction (0, 1, 1, -1)) 
 () 


A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays 
 (A vertex at (1, 2, -1, 2),) 
 (A ray in the direction (0, 0, 1, 0), A ray in the direction (0, 1, 1, -1)) 
 () 


A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 1 ray 
 (A vertex at (1, 1, 3, -1),) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 1 ray 
 (A vertex at (1, 1, 1, 1),) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_cone(B(A,c),lam(A,v),[[],[0,1],[2,0]])
....:     print(lam(A,v),P,"\n",P.vertices(),"\n",P.rays(),"\n",P.lines(),"\n\n"
....: )
(7, -1, -1, -1) A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 3 rays 
 (A vertex at (7, -1, -1, -1),) 
 (A ray in the direction (0, 0, 1, 0), A ray in the direction (1, 1, 0, -1), A ray in the direction (0, 1, 1, -1)) 
 () 


(7, -1, -3, 1) A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 3 rays 
 (A vertex at (7, -1, -3, 1),) 
 (A ray in the direction (0, 0, 1, 0), A ray in the direction (1, 1, 0, -1), A ray in the direction (0, 1, 1, -1)) 
 () 


(7, -2, -3, 2) A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 3 rays 
 (A vertex at (7, -2, -3, 2),) 
 (A ray in the direction (0, 0, 1, 0), A ray in the direction (1, 1, 0, -1), A ray in the direction (0, 1, 1, -1)) 
 () 


(6, -1, -4, 3) A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 3 rays 
 (A vertex at (6, -1, -4, 3),) 
 (A ray in the direction (0, 0, 1, 0), A ray in the direction (1, 1, 0, -1), A ray in the direction (0, 1, 1, -1)) 
 () 


(7, -4, -1, 2) A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 3 rays 
 (A vertex at (7, -4, -1, 2),) 
 (A ray in the direction (0, 0, 1, 0), A ray in the direction (1, 1, 0, -1), A ray in the direction (0, 1, 1, -1)) 
 () 


(6, -3, -2, 3) A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 3 rays 
 (A vertex at (6, -3, -2, 3),) 
 (A ray in the direction (0, 0, 1, 0), A ray in the direction (1, 1, 0, -1), A ray in the direction (0, 1, 1, -1)) 
 () 


(5, -3, -1, 3) A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 3 rays 
 (A vertex at (5, -3, -1, 3),) 
 (A ray in the direction (0, 0, 1, 0), A ray in the direction (1, 1, 0, -1), A ray in the direction (0, 1, 1, -1)) 
 () 


(6, -5, 4, -1) A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays 
 (A vertex at (6, -5, 4, -1),) 
 (A ray in the direction (0, 0, 1, 0), A ray in the direction (1, 1, -1, -1)) 
 () 


(6, -5, 2, 1) A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays 
 (A vertex at (6, -5, 2, 1),) 
 (A ray in the direction (0, 0, 1, 0), A ray in the direction (1, 1, -1, -1)) 
 () 


(5, -4, 1, 2) A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays 
 (A vertex at (5, -4, 1, 2),) 
 (A ray in the direction (0, 0, 1, 0), A ray in the direction (1, 1, -1, -1)) 
 () 


(3, -1, -1, 3) A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 3 rays 
 (A vertex at (3, -1, -1, 3),) 
 (A ray in the direction (0, 0, 1, 0), A ray in the direction (1, 1, 0, -1), A ray in the direction (0, 1, 1, -1)) 
 () 


(3, -2, 1, 2) A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays 
 (A vertex at (3, -2, 1, 2),) 
 (A ray in the direction (0, 0, 1, 0), A ray in the direction (1, 1, -1, -1)) 
 () 


(2, -1, 4, -1) A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays 
 (A vertex at (2, -1, 4, -1),) 
 (A ray in the direction (0, 0, 1, 0), A ray in the direction (1, 1, -1, -1)) 
 () 


(2, -1, 2, 1) A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays 
 (A vertex at (2, -1, 2, 1),) 
 (A ray in the direction (0, 0, 1, 0), A ray in the direction (1, 1, -1, -1)) 
 () 


(1, 5, -1, -1) A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays 
 (A vertex at (1, 5, -1, -1),) 
 (A ray in the direction (0, 0, 1, 0), A ray in the direction (0, 1, 1, -1)) 
 () 


(1, 5, -3, 1) A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays 
 (A vertex at (1, 5, -3, 1),) 
 (A ray in the direction (0, 0, 1, 0), A ray in the direction (0, 1, 1, -1)) 
 () 


(1, 4, -3, 2) A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays 
 (A vertex at (1, 4, -3, 2),) 
 (A ray in the direction (0, 0, 1, 0), A ray in the direction (0, 1, 1, -1)) 
 () 


(1, 2, -1, 2) A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays 
 (A vertex at (1, 2, -1, 2),) 
 (A ray in the direction (0, 0, 1, 0), A ray in the direction (0, 1, 1, -1)) 
 () 


(1, 1, 3, -1) A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 1 ray 
 (A vertex at (1, 1, 3, -1),) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


(1, 1, 1, 1) A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 1 ray 
 (A vertex at (1, 1, 1, 1),) 
 (A ray in the direction (0, 0, 1, 0),) 
 () 


sage: Polyhedron(rays=[(1,0),(-1,0)])
A 1-dimensional polyhedron in ZZ^2 defined as the convex hull of 1 vertex and 1 line
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_cone(B(A,c),lam(A,v),K(c,v))
....:     print(lam(A,v),P,"\n",P.vertices(),"\n",P.rays(),"\n",P.lines(),"\n\n"
....: )
(7, -1, -1, -1) A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex 
 (A vertex at (7, -1, -1, -1),) 
 () 
 () 


(7, -1, -3, 1) A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex 
 (A vertex at (7, -1, -3, 1),) 
 () 
 () 


(7, -2, -3, 2) A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex 
 (A vertex at (7, -2, -3, 2),) 
 () 
 () 


(6, -1, -4, 3) A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex 
 (A vertex at (6, -1, -4, 3),) 
 () 
 () 


(7, -4, -1, 2) A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex 
 (A vertex at (7, -4, -1, 2),) 
 () 
 () 


(6, -3, -2, 3) A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex 
 (A vertex at (6, -3, -2, 3),) 
 () 
 () 


(5, -3, -1, 3) A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex 
 (A vertex at (5, -3, -1, 3),) 
 () 
 () 


(6, -5, 4, -1) A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex 
 (A vertex at (6, -5, 4, -1),) 
 () 
 () 


(6, -5, 2, 1) A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex 
 (A vertex at (6, -5, 2, 1),) 
 () 
 () 


(5, -4, 1, 2) A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex 
 (A vertex at (5, -4, 1, 2),) 
 () 
 () 


(3, -1, -1, 3) A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex 
 (A vertex at (3, -1, -1, 3),) 
 () 
 () 


(3, -2, 1, 2) A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex 
 (A vertex at (3, -2, 1, 2),) 
 () 
 () 


(2, -1, 4, -1) A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex 
 (A vertex at (2, -1, 4, -1),) 
 () 
 () 


(2, -1, 2, 1) A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex 
 (A vertex at (2, -1, 2, 1),) 
 () 
 () 


(1, 5, -1, -1) A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex 
 (A vertex at (1, 5, -1, -1),) 
 () 
 () 


(1, 5, -3, 1) A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex 
 (A vertex at (1, 5, -3, 1),) 
 () 
 () 


(1, 4, -3, 2) A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex 
 (A vertex at (1, 4, -3, 2),) 
 () 
 () 


(1, 2, -1, 2) A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex 
 (A vertex at (1, 2, -1, 2),) 
 () 
 () 


(1, 1, 3, -1) A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex 
 (A vertex at (1, 1, 3, -1),) 
 () 
 () 


(1, 1, 1, 1) A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex 
 (A vertex at (1, 1, 1, 1),) 
 () 
 () 


sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_cone(B(A,c),lam(A,v),K(c,v))
....:     print(num,v,P.dimension())
....: 
1 [1, 2, 3, 1, 2, 3, 1, 2, 3] 0
2 [1, 2, 3, 1, 2, 3, 1, 2] 0
3 [1, 2, 3, 1, 2, 3, 1] 0
4 [1, 2, 3, 1, 2, 3] 0
5 [1, 2, 3, 1, 2, 1] 0
6 [1, 2, 3, 1, 2] 0
7 [1, 2, 3, 1] 0
8 [1, 2, 3, 2, 3] 0
9 [1, 2, 3, 2] 0
10 [1, 2, 3] 0
11 [1, 2, 1] 0
12 [1, 2] 0
13 [1, 3] 0
14 [1] 0
15 [2, 3, 2, 3] 0
16 [2, 3, 2] 0
17 [2, 3] 0
18 [2] 0
19 [3] 0
20 [] 0
sage: A=CartanMatrix(['C',7])
....: c=[0,1,2,3,4,5,6]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_cone(B(A,c),lam(A,v),K(c,v))
....:     print(num,v,P.dimension())
1 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6] 0
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [720], line 6
      4 for v in sortables(A,c[Integer(1):]):
      5     num+=Integer(1)
----> 6     P=p_lambda_cone(B(A,c),lam(A,v),K(c,v))
      7     print(num,v,P.dimension())

File ~/git/affine_dominance/software/domination4.py:185, in p_lambda_cone(B, la, seqs)
    183 P = cone_at(p_lambda_faster(B, la, seqs[0]),la)
    184 for s in seqs:
--> 185     P = P.intersection(cone_at(p_lambda_faster(B, la, s),la))
    186     if P.dimension()==0:
    187         break

File ~/git/affine_dominance/software/domination4.py:151, in p_lambda_faster(B, la, seq)
    148 #print("Hp:   ",Hp,Hp.vertices(),Hp.rays(),Hp.lines(),"\n")
    149 #print("Hm:   ",Hm,Hm.vertices(),Hm.rays(),Hm.lines(),"\n\n")
    150 Pp = P.intersection(Hp)
--> 151 Pm = P.intersection(Hm)
    152 if Pp.dimension() < rk:
    153     P=Em*Pm

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1371, in Polyhedron_base5.intersection(self, other)
   1369 parent = self.parent()
   1370 try:
-> 1371     intersection = parent.element_class(parent, None, [new_ieqs, new_eqns])
   1373     # Force calculation of the vertices.
   1374     _ = intersection.n_vertices()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:179, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    177 elif Hrep is not None:
    178     ieqs, eqns = Hrep
--> 179     self._init_from_Hrepresentation(ieqs, eqns, **kwds)
    180 else:
    181     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:129, in Polyhedron_ppl._init_from_Hrepresentation(self, ieqs, eqns, minimize, verbose)
    106 def _init_from_Hrepresentation(self, ieqs, eqns, minimize=True, verbose=False):
    107     """
    108     Construct polyhedron from H-representation data.
    109 
   (...)
    127         sage: Polyhedron_ppl._init_from_Hrepresentation(p, [], [])
    128     """
--> 129     cs = self._convert_constraints_to_ppl(ieqs, eqns)
    130     if cs.empty():
    131         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'universe')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:534, in Polyhedron_ppl._convert_constraints_to_ppl(ieqs, eqns)
    532     ieqs = []
    533 for ieq in ieqs:
--> 534     cs.insert(Polyhedron_ppl._convert_constraint_to_ppl(ieq, INEQUALITY))
    535 if eqns is None:
    536     eqns = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:509, in Polyhedron_ppl._convert_constraint_to_ppl(c, typ)
    507 A = dc[1:]
    508 if typ == INEQUALITY:
--> 509     return Linear_Expression(A, b) >= 0
    510 else:
    511     return Linear_Expression(A, b) == 0

File ppl/linear_algebra.pyx:654, in ppl.linear_algebra.Linear_Expression.__init__()

File ppl/linear_algebra.pyx:49, in ppl.linear_algebra.PPL_Coefficient_from_pyobject()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/rings/integer.pyx:914, in sage.rings.integer.Integer.__richcmp__ (build/cythonized/sage/rings/integer.c:16498)()
    912     c = mpz_cmp_d((<Integer>left).value, d)
    913 else:
--> 914     return coercion_model.richcmp(left, right, op)
    915 
    916 return rich_to_bool_sgn(op, c)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:2021, in sage.structure.coerce.CoercionModel.richcmp (build/cythonized/sage/structure/coerce.c:26173)()
   2019 # Coerce to a common parent
   2020 try:
-> 2021     x, y = self.canonical_coercion(x, y)
   2022 except (TypeError, NotImplementedError):
   2023     pass

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1422, in sage.structure.coerce.CoercionModel.canonical_coercion (build/cythonized/sage/structure/coerce.c:18956)()
   1420             self._record_exception()
   1421 
-> 1422     raise TypeError("no common canonical parent for objects with parents: '%s' and '%s'"%(xp, yp))
   1423 
   1424 cpdef coercion_maps(self, R, S) noexcept:

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['C',7])
....: c=[0,1,2,3,4,5,6]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),K(c,v))
....:     print(num,v,P.dimension())
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [721], line 6
      4 for v in sortables(A,c[Integer(1):]):
      5     num+=Integer(1)
----> 6     P=p_lambda_int(B(A,c),lam(A,v),K(c,v))
      7     print(num,v,P.dimension())

File ~/git/affine_dominance/software/domination4.py:127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_faster(B, la, seqs[0])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_faster(B, la, s))
    128     if P.dimension()==0:
    129         break

File ~/git/affine_dominance/software/domination4.py:159, in p_lambda_faster(B, la, seq)
    155         P=Ep*Pp
    156     else:
    157         #print("Pp:   ",Pp,Pp.vertices(),Pp.rays(),Pp.lines(),"\n")
    158         #print("Pm:   ",Pm,Pm.vertices(),Pm.rays(),Pm.lines(),"\n\n")
--> 159         P=(Ep*Pp).convex_hull(Em*Pm)
    160     B.mutate(k)
    161 return P

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4099, in sage.structure.element.Matrix.__mul__ (build/cythonized/sage/structure/element.c:35219)()
   4097 
   4098         if BOTH_ARE_ELEMENT(cl):
-> 4099             return coercion_model.bin_op(left, right, mul)
   4100 
   4101         cdef long value

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1222, in sage.structure.coerce.CoercionModel.bin_op (build/cythonized/sage/structure/coerce.c:15809)()
   1220 if action is not None:
   1221     if (<Action>action)._is_left:
-> 1222         return (<Action>action)._act_(x, y)
   1223     else:
   1224         return (<Action>action)._act_(y, x)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_actions.pyx:157, in sage.structure.coerce_actions.ActedUponAction._act_ (build/cythonized/sage/structure/coerce_actions.c:8579)()
    155     <... 'sage.structure.coerce_actions.ActedUponAction'>
    156 """
--> 157 return (<Element>x)._acted_upon_(g, not self._is_left)
    158 
    159 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:949, in sage.structure.element.Element._acted_upon_ (build/cythonized/sage/structure/element.c:16495)()
    947     return None
    948 
--> 949 cpdef _acted_upon_(self, x, bint self_on_left) noexcept:
    950     """
    951     Use this method to implement ``self`` acted on by x.

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1450, in Polyhedron_base5._acted_upon_(self, actor, self_on_left)
   1448         raise ValueError("matrices should act on the left")
   1449     else:
-> 1450         return self.linear_transformation(actor)
   1451 else:
   1452     return self.dilation(actor)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1879, in Polyhedron_base5.linear_transformation(self, linear_transf, new_base_ring)
   1873     pref_rep = 'Vrep' if self.n_vertices() <= self.n_inequalities() else 'Hrep'
   1875     return new_parent.element_class(new_parent, [new_vertices, new_rays, new_lines],
   1876                                     [new_inequalities, new_equations],
   1877                                     Vrep_minimal=True, Hrep_minimal=True, pref_rep=pref_rep)
-> 1879 return new_parent.element_class(new_parent, [tuple(new_vertices), tuple(new_rays), tuple(new_lines)], None)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:174, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    171     lines = tuple(lines)
    173 if vertices or rays or lines:
--> 174     self._init_from_Vrepresentation(vertices, rays, lines, **kwds)
    175 else:
    176     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:99, in Polyhedron_ppl._init_from_Vrepresentation(self, vertices, rays, lines, minimize, verbose)
     72 def _init_from_Vrepresentation(self, vertices, rays, lines, minimize=True, verbose=False):
     73     """
     74     Construct polyhedron from V-representation data.
     75 
   (...)
     97         sage: Polyhedron_ppl._init_from_Vrepresentation(p, [], [], [])
     98     """
---> 99     gs = self._convert_generators_to_ppl(vertices, rays, lines)
    100     if gs.empty():
    101         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'empty')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:477, in Polyhedron_ppl._convert_generators_to_ppl(vertices, rays, lines)
    475     rays = []
    476 for r in rays:
--> 477     gs.insert(Polyhedron_ppl._convert_generator_to_ppl(r, RAY))
    478 if lines is None:
    479     lines = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:442, in Polyhedron_ppl._convert_generator_to_ppl(v, typ)
    440 d = LCM_list([denominator(v_i) for v_i in v])
    441 if d.is_one():
--> 442     return ob(Linear_Expression(v, 0))
    443 else:
    444     dv = [ d*v_i for v_i in v ]

File ppl/linear_algebra.pyx:654, in ppl.linear_algebra.Linear_Expression.__init__()

File ppl/linear_algebra.pyx:49, in ppl.linear_algebra.PPL_Coefficient_from_pyobject()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:1107, in sage.structure.element.Element.__richcmp__ (build/cythonized/sage/structure/element.c:18121)()
   1105         return (<Element>self)._richcmp_(other, op)
   1106     else:
-> 1107         return coercion_model.richcmp(self, other, op)
   1108 
   1109 cpdef _richcmp_(left, right, int op) noexcept:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:2021, in sage.structure.coerce.CoercionModel.richcmp (build/cythonized/sage/structure/coerce.c:26173)()
   2019 # Coerce to a common parent
   2020 try:
-> 2021     x, y = self.canonical_coercion(x, y)
   2022 except (TypeError, NotImplementedError):
   2023     pass

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1422, in sage.structure.coerce.CoercionModel.canonical_coercion (build/cythonized/sage/structure/coerce.c:18956)()
   1420             self._record_exception()
   1421 
-> 1422     raise TypeError("no common canonical parent for objects with parents: '%s' and '%s'"%(xp, yp))
   1423 
   1424 cpdef coercion_maps(self, R, S) noexcept:

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),K(c,v))
....:     print(num,v,P.dimension())
1 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
2 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
3 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
4 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1] 0
5 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
6 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
7 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1] 0
8 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
9 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1] 0
10 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
11 [1, 2, 3, 4, 1, 2, 3, 4, 1] 0
12 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4] 0
13 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3] 0
14 [1, 2, 3, 4, 1, 2, 3, 4, 2] 0
15 [1, 2, 3, 4, 1, 2, 3, 4] 0
16 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
17 [1, 2, 3, 4, 1, 2, 3, 1, 2] 0
18 [1, 2, 3, 4, 1, 2, 3, 1] 0
19 [1, 2, 3, 4, 1, 2, 3, 2] 0
20 [1, 2, 3, 4, 1, 2, 3] 0
21 [1, 2, 3, 4, 1, 2, 1] 0
22 [1, 2, 3, 4, 1, 2] 0
23 [1, 2, 3, 4, 1, 3, 4] 0
24 [1, 2, 3, 4, 1, 3] 0
25 [1, 2, 3, 4, 1] 0
26 [1, 2, 3, 4, 2, 3, 4, 2, 3, 4] 0
27 [1, 2, 3, 4, 2, 3, 4, 2, 3] 0
28 [1, 2, 3, 4, 2, 3, 4, 2] 0
29 [1, 2, 3, 4, 2, 3, 4] 0
30 [1, 2, 3, 4, 2, 3, 2] 0
31 [1, 2, 3, 4, 2, 3] 0
32 [1, 2, 3, 4, 2] 0
33 [1, 2, 3, 4, 3, 4] 0
34 [1, 2, 3, 4, 3] 0
35 [1, 2, 3, 4] 0
36 [1, 2, 3, 1, 2, 1] 0
37 [1, 2, 3, 1, 2] 0
38 [1, 2, 3, 1] 0
39 [1, 2, 3, 2] 0
40 [1, 2, 3] 0
41 [1, 2, 4, 1] 0
42 [1, 2, 4] 0
43 [1, 2, 1] 0
44 [1, 2] 0
45 [1, 3, 4, 3, 4] 0
46 [1, 3, 4, 3] 0
47 [1, 3, 4] 0
48 [1, 3] 0
49 [1, 4] 0
50 [1] 0
51 [2, 3, 4, 2, 3, 4, 2, 3, 4] 0
52 [2, 3, 4, 2, 3, 4, 2, 3] 0
53 [2, 3, 4, 2, 3, 4, 2] 0
54 [2, 3, 4, 2, 3, 4] 0
55 [2, 3, 4, 2, 3, 2] 0
56 [2, 3, 4, 2, 3] 0
57 [2, 3, 4, 2] 0
58 [2, 3, 4, 3, 4] 0
59 [2, 3, 4, 3] 0
60 [2, 3, 4] 0
61 [2, 3, 2] 0
62 [2, 3] 0
63 [2, 4] 0
64 [2] 0
65 [3, 4, 3, 4] 0
66 [3, 4, 3] 0
67 [3, 4] 0
68 [3] 0
69 [4] 0
70 [] 0
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_cone(B(A,c),lam(A,v),K(c,v))
....:     print(num,v,P.dimension())
1 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
2 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
3 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
4 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1] 0
5 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
6 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
7 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1] 0
8 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
9 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1] 0
10 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
11 [1, 2, 3, 4, 1, 2, 3, 4, 1] 0
12 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4] 0
13 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3] 0
14 [1, 2, 3, 4, 1, 2, 3, 4, 2] 0
15 [1, 2, 3, 4, 1, 2, 3, 4] 0
16 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
17 [1, 2, 3, 4, 1, 2, 3, 1, 2] 0
18 [1, 2, 3, 4, 1, 2, 3, 1] 0
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [723], line 6
      4 for v in sortables(A,c[Integer(1):]):
      5     num+=Integer(1)
----> 6     P=p_lambda_cone(B(A,c),lam(A,v),K(c,v))
      7     print(num,v,P.dimension())

File ~/git/affine_dominance/software/domination4.py:185, in p_lambda_cone(B, la, seqs)
    183 P = cone_at(p_lambda_faster(B, la, seqs[0]),la)
    184 for s in seqs:
--> 185     P = P.intersection(cone_at(p_lambda_faster(B, la, s),la))
    186     if P.dimension()==0:
    187         break

File ~/git/affine_dominance/software/domination4.py:150, in p_lambda_faster(B, la, seq)
    147 Hm = Polyhedron(ieqs=[(0,)*(k+1)+(-1,)+(0,)*(m-k-1)])
    148 #print("Hp:   ",Hp,Hp.vertices(),Hp.rays(),Hp.lines(),"\n")
    149 #print("Hm:   ",Hm,Hm.vertices(),Hm.rays(),Hm.lines(),"\n\n")
--> 150 Pp = P.intersection(Hp)
    151 Pm = P.intersection(Hm)
    152 if Pp.dimension() < rk:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1371, in Polyhedron_base5.intersection(self, other)
   1369 parent = self.parent()
   1370 try:
-> 1371     intersection = parent.element_class(parent, None, [new_ieqs, new_eqns])
   1373     # Force calculation of the vertices.
   1374     _ = intersection.n_vertices()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:179, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    177 elif Hrep is not None:
    178     ieqs, eqns = Hrep
--> 179     self._init_from_Hrepresentation(ieqs, eqns, **kwds)
    180 else:
    181     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:129, in Polyhedron_ppl._init_from_Hrepresentation(self, ieqs, eqns, minimize, verbose)
    106 def _init_from_Hrepresentation(self, ieqs, eqns, minimize=True, verbose=False):
    107     """
    108     Construct polyhedron from H-representation data.
    109 
   (...)
    127         sage: Polyhedron_ppl._init_from_Hrepresentation(p, [], [])
    128     """
--> 129     cs = self._convert_constraints_to_ppl(ieqs, eqns)
    130     if cs.empty():
    131         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'universe')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:534, in Polyhedron_ppl._convert_constraints_to_ppl(ieqs, eqns)
    532     ieqs = []
    533 for ieq in ieqs:
--> 534     cs.insert(Polyhedron_ppl._convert_constraint_to_ppl(ieq, INEQUALITY))
    535 if eqns is None:
    536     eqns = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:509, in Polyhedron_ppl._convert_constraint_to_ppl(c, typ)
    507 A = dc[1:]
    508 if typ == INEQUALITY:
--> 509     return Linear_Expression(A, b) >= 0
    510 else:
    511     return Linear_Expression(A, b) == 0

File ppl/linear_algebra.pyx:654, in ppl.linear_algebra.Linear_Expression.__init__()

File ppl/linear_algebra.pyx:49, in ppl.linear_algebra.PPL_Coefficient_from_pyobject()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/rings/integer.pyx:914, in sage.rings.integer.Integer.__richcmp__ (build/cythonized/sage/rings/integer.c:16498)()
    912     c = mpz_cmp_d((<Integer>left).value, d)
    913 else:
--> 914     return coercion_model.richcmp(left, right, op)
    915 
    916 return rich_to_bool_sgn(op, c)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:2021, in sage.structure.coerce.CoercionModel.richcmp (build/cythonized/sage/structure/coerce.c:26173)()
   2019 # Coerce to a common parent
   2020 try:
-> 2021     x, y = self.canonical_coercion(x, y)
   2022 except (TypeError, NotImplementedError):
   2023     pass

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1422, in sage.structure.coerce.CoercionModel.canonical_coercion (build/cythonized/sage/structure/coerce.c:18956)()
   1420             self._record_exception()
   1421 
-> 1422     raise TypeError("no common canonical parent for objects with parents: '%s' and '%s'"%(xp, yp))
   1423 
   1424 cpdef coercion_maps(self, R, S) noexcept:

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_cone(B(A,c),lam(A,v),K(c,v))
....:     print(num,v,P.dimension())
....: 
1 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
2 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
3 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
4 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1] 0
5 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
6 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
7 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1] 0
8 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
9 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1] 0
10 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
11 [1, 2, 3, 4, 1, 2, 3, 4, 1] 0
12 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4] 0
13 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3] 0
14 [1, 2, 3, 4, 1, 2, 3, 4, 2] 0
15 [1, 2, 3, 4, 1, 2, 3, 4] 0
16 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
17 [1, 2, 3, 4, 1, 2, 3, 1, 2] 0
18 [1, 2, 3, 4, 1, 2, 3, 1] 0
19 [1, 2, 3, 4, 1, 2, 3, 2] 0
20 [1, 2, 3, 4, 1, 2, 3] 0
21 [1, 2, 3, 4, 1, 2, 1] 0
22 [1, 2, 3, 4, 1, 2] 0
23 [1, 2, 3, 4, 1, 3, 4] 0
24 [1, 2, 3, 4, 1, 3] 0
25 [1, 2, 3, 4, 1] 0
26 [1, 2, 3, 4, 2, 3, 4, 2, 3, 4] 0
27 [1, 2, 3, 4, 2, 3, 4, 2, 3] 0
28 [1, 2, 3, 4, 2, 3, 4, 2] 0
29 [1, 2, 3, 4, 2, 3, 4] 0
30 [1, 2, 3, 4, 2, 3, 2] 0
31 [1, 2, 3, 4, 2, 3] 0
32 [1, 2, 3, 4, 2] 0
33 [1, 2, 3, 4, 3, 4] 0
34 [1, 2, 3, 4, 3] 0
35 [1, 2, 3, 4] 0
36 [1, 2, 3, 1, 2, 1] 0
37 [1, 2, 3, 1, 2] 0
38 [1, 2, 3, 1] 0
39 [1, 2, 3, 2] 0
40 [1, 2, 3] 0
41 [1, 2, 4, 1] 0
42 [1, 2, 4] 0
43 [1, 2, 1] 0
44 [1, 2] 0
45 [1, 3, 4, 3, 4] 0
46 [1, 3, 4, 3] 0
47 [1, 3, 4] 0
48 [1, 3] 0
49 [1, 4] 0
50 [1] 0
51 [2, 3, 4, 2, 3, 4, 2, 3, 4] 0
52 [2, 3, 4, 2, 3, 4, 2, 3] 0
53 [2, 3, 4, 2, 3, 4, 2] 0
54 [2, 3, 4, 2, 3, 4] 0
55 [2, 3, 4, 2, 3, 2] 0
56 [2, 3, 4, 2, 3] 0
57 [2, 3, 4, 2] 0
58 [2, 3, 4, 3, 4] 0
59 [2, 3, 4, 3] 0
60 [2, 3, 4] 0
61 [2, 3, 2] 0
62 [2, 3] 0
63 [2, 4] 0
64 [2] 0
65 [3, 4, 3, 4] 0
66 [3, 4, 3] 0
67 [3, 4] 0
68 [3] 0
69 [4] 0
70 [] 0
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),K(c,v))
....:     print(num,v,P.dimension())
....: 
1 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
2 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
3 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
4 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1] 0
5 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
6 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
7 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1] 0
8 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
9 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1] 0
10 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
11 [1, 2, 3, 4, 1, 2, 3, 4, 1] 0
12 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4] 0
13 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3] 0
14 [1, 2, 3, 4, 1, 2, 3, 4, 2] 0
15 [1, 2, 3, 4, 1, 2, 3, 4] 0
16 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
17 [1, 2, 3, 4, 1, 2, 3, 1, 2] 0
18 [1, 2, 3, 4, 1, 2, 3, 1] 0
19 [1, 2, 3, 4, 1, 2, 3, 2] 0
20 [1, 2, 3, 4, 1, 2, 3] 0
21 [1, 2, 3, 4, 1, 2, 1] 0
22 [1, 2, 3, 4, 1, 2] 0
23 [1, 2, 3, 4, 1, 3, 4] 0
24 [1, 2, 3, 4, 1, 3] 0
25 [1, 2, 3, 4, 1] 0
26 [1, 2, 3, 4, 2, 3, 4, 2, 3, 4] 0
27 [1, 2, 3, 4, 2, 3, 4, 2, 3] 0
28 [1, 2, 3, 4, 2, 3, 4, 2] 0
29 [1, 2, 3, 4, 2, 3, 4] 0
30 [1, 2, 3, 4, 2, 3, 2] 0
31 [1, 2, 3, 4, 2, 3] 0
32 [1, 2, 3, 4, 2] 0
33 [1, 2, 3, 4, 3, 4] 0
34 [1, 2, 3, 4, 3] 0
35 [1, 2, 3, 4] 0
36 [1, 2, 3, 1, 2, 1] 0
37 [1, 2, 3, 1, 2] 0
38 [1, 2, 3, 1] 0
39 [1, 2, 3, 2] 0
40 [1, 2, 3] 0
41 [1, 2, 4, 1] 0
42 [1, 2, 4] 0
43 [1, 2, 1] 0
44 [1, 2] 0
45 [1, 3, 4, 3, 4] 0
46 [1, 3, 4, 3] 0
47 [1, 3, 4] 0
48 [1, 3] 0
49 [1, 4] 0
50 [1] 0
51 [2, 3, 4, 2, 3, 4, 2, 3, 4] 0
52 [2, 3, 4, 2, 3, 4, 2, 3] 0
53 [2, 3, 4, 2, 3, 4, 2] 0
54 [2, 3, 4, 2, 3, 4] 0
55 [2, 3, 4, 2, 3, 2] 0
56 [2, 3, 4, 2, 3] 0
57 [2, 3, 4, 2] 0
58 [2, 3, 4, 3, 4] 0
59 [2, 3, 4, 3] 0
60 [2, 3, 4] 0
61 [2, 3, 2] 0
62 [2, 3] 0
63 [2, 4] 0
64 [2] 0
65 [3, 4, 3, 4] 0
66 [3, 4, 3] 0
67 [3, 4] 0
68 [3] 0
69 [4] 0
70 [] 0
### reloading attached file domination4.py modified at 14:33:09 ###
sage: A=CartanMatrix(['A',2])
sage: c=[0,1]
sage: p_lambda_cone(B(A,c),lam(A,[]),[[]])
A 2-dimensional polyhedron in QQ^2 defined as the convex hull of 1 vertex and 2 rays
sage: p_lambda_cone(B(A,c),lam(A,[]),[[]]).rays()
(A ray in the direction (1, 0), A ray in the direction (0, -1))
sage: p_lambda_cone(B(A,c),lam(A,[]),[[1]]).rays()
(A ray in the direction (1, -1), A ray in the direction (-1, 0))
sage: p_lambda_cone(B(A,c),lam(A,[]),[[0]]).rays()
(A ray in the direction (1, 0), A ray in the direction (0, 1))
sage: p_lambda_cone(B(A,c),lam(A,[]),[[1]]).rays()
(A ray in the direction (1, -1), A ray in the direction (-1, 0))
sage: p_lambda_cone(B(A,c),lam(A,[]),[[0,1]]).rays()
(A ray in the direction (0, 1), A ray in the direction (-1, 0))
sage: p_lambda_cone(B(A,c),lam(A,[]),[[0,1,0]]).rays()
(A ray in the direction (-1, 1), A ray in the direction (0, -1))
sage: p_lambda_cone(B(A,c),lam(A,[1]),[[]]).rays()
(A ray in the direction (1, 0), A ray in the direction (0, -1))
sage: p_lambda_cone(B(A,c),lam(A,[1]),[[0]]).rays()
(A ray in the direction (1, 0), A ray in the direction (0, 1))
sage: p_lambda_cone(B(A,c),lam(A,[1]),[[1]]).rays()
(A ray in the direction (0, -1), A ray in the direction (-1, 0))
sage: p_lambda_cone(B(A,c),lam(A,[1]),[[0,1]]).rays()
(A ray in the direction (1, 1), A ray in the direction (-1, 0))
sage: p_lambda_cone(B(A,c),lam(A,[1]),[[0,1,0]]).rays()
(A ray in the direction (0, 1), A ray in the direction (-1, -1))
sage: A=CartanMatrix(['A',2])
sage: c=[0,1]
### reloading attached file domination4.py modified at 15:29:51 ###
### reloading attached file domination4.py modified at 15:31:02 ###
sage: A=CartanMatrix(['A',2])
sage: A=CartanMatrix(['A',2])
sage: %ed
IPython will make a temporary file named: /var/folders/d7/87rpjg0d6_1bk7t3g14zhssr0000gr/T/ipython_edit_zydox6mi/ipython_edit_z5m5h3pw.py
Editing... done. Executing edited code...
''
sage: A=CartanMatrix(['A',2])
....: c=[0,1]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_cone(B(A,c),lam(A,v),K(c[1:],v))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list(seq+[c[0]] for seq in K(c[1:]),v)
....: )
....:     print("parabolic",list(map(vector,P.vertices())))
....:     print("parabolic + c0",list(map(vector,Q.vertices())))
....: 
  Cell In [745], line 5
    Q=p_lambda_cone(B(A,c),lam(A,v),list(seq+[c[Integer(0)]] for seq in K(c[Integer(1):]),v))
                                         ^
SyntaxError: Generator expression must be parenthesized

sage: A=CartanMatrix(['A',2])
....: c=[0,1]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_cone(B(A,c),lam(A,v),K(c[1:],v))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list(seq+[c[0]] for seq in K(c[1:])),v
....: ))
....:     print("parabolic",list(map(vector,P.vertices())))
....:     print("parabolic + c0",list(map(vector,Q.vertices())))
  Cell In [746], line 5
    Q=p_lambda_cone(B(A,c),lam(A,v),list(seq+[c[Integer(0)]] for seq in K(c[Integer(1):])),v))
                                                                                             ^
SyntaxError: unmatched ')'

sage: A=CartanMatrix(['A',2])
....: c=[0,1]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_cone(B(A,c),lam(A,v),K(c[1:],v))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list(seq+[c[0]] for seq in K(c[1:])),v
....: )
....:     print("parabolic",list(map(vector,P.vertices())))
....:     print("parabolic + c0",list(map(vector,Q.vertices())))
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In [747], line 5
      3 for v in sortables(A,c[Integer(1):]):
      4     P=p_lambda_cone(B(A,c),lam(A,v),K(c[Integer(1):],v))
----> 5     Q=p_lambda_cone(B(A,c),lam(A,v),list(seq+[c[Integer(0)]] for seq in K(c[Integer(1):])),v)
      6     print("parabolic",list(map(vector,P.vertices()))) 
      7     print("parabolic + c0",list(map(vector,Q.vertices())))

TypeError: K() missing 1 required positional argument: 'v'
sage: A=CartanMatrix(['A',2])
....: c=[0,1]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_cone(B(A,c),lam(A,v),K(c[1:],v))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list(seq+[c[0]] for seq in K(c[1:],v))
....: )
....:     print("parabolic",list(map(vector,P.vertices())))
....:     print("parabolic + c0",list(map(vector,Q.vertices())))
parabolic [(2, -1)]
parabolic + c0 [(2, -1)]
parabolic [(1, 1)]
parabolic + c0 [(1, 1)]
sage: A=CartanMatrix(['A',2])
....: c=[0,1]
....: for v in sortables(A,c[1:]):
....:     p_lambda_cone(B(A,c),lam(A,v),K(c,v))
....: 
A 0-dimensional polyhedron in QQ^2 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^2 defined as the convex hull of 1 vertex
### reloading attached file domination4.py modified at 16:14:48 ###
### reloading attached file domination4.py modified at 16:15:23 ###
sage: A=CartanMatrix(['A',2])
....: c=[0,1]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_cone(B(A,c),lam(A,v),K(c[1:],v))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list(k+[c[0]] for k in K(c[1:],v)))
....:     print("parabolic",list(map(vector,P.vertices())))
....:     print("parabolic + c0",list(map(vector,Q.vertices())))
....: 
parabolic [(2, -1)]
parabolic + c0 [(2, -1)]
parabolic [(1, 1)]
parabolic + c0 [(1, 1)]
sage: A=CartanMatrix(['A',2])
....: c=[0,1]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_cone(B(A,c),lam(A,v),K(c[1:],v))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list(k+[c[0]] for k in K(c[1:],v)))
....:     print("parabolic",list(map(vector,P.vertices())))
....:     print("parabolic + c0",list(map(vector,Q.vertices())))
....:     print(P.intersection(Q))
....: 
parabolic [(2, -1)]
parabolic + c0 [(2, -1)]
A 0-dimensional polyhedron in QQ^2 defined as the convex hull of 1 vertex
parabolic [(1, 1)]
parabolic + c0 [(1, 1)]
A 0-dimensional polyhedron in QQ^2 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['A',2])
....: c=[0,1]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_cone(B(A,c),lam(A,v),K(c[1:],v))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list(k+[c[0]] for k in K(c[1:],v)))
....:     print("parabolic",list(map(vector,P.rays())))
....:     print("parabolic + c0",list(map(vector,Q.rays())))
....: 
parabolic [(0, -1)]
parabolic + c0 [(0, 1)]
parabolic [(1, -1), (0, -1)]
parabolic + c0 []
sage: A=CartanMatrix(['A',2])
....: c=[0,1]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_cone(B(A,c),lam(A,v),K(c[1:],v))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list(k+[c[0]] for k in K(c[1:],v)))
....:     print("\n",v)
....:     print("parabolic",list(map(vector,P.rays())))
....:     print("parabolic + c0",list(map(vector,Q.rays())))

 [1]
parabolic [(0, -1)]
parabolic + c0 [(0, 1)]

 []
parabolic [(1, -1), (0, -1)]
parabolic + c0 []
sage: A=CartanMatrix(['A',3])
....: c=[0,1,3]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_cone(B(A,c),lam(A,v),K(c[1:],v))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list(k+[c[0]] for k in K(c[1:],v)))
....:     print("\n",v)
....:     print("parabolic",list(map(vector,P.rays())))
....:     print("parabolic + c0",list(map(vector,Q.rays())))
---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
Cell In [754], line 3
      1 A=CartanMatrix(['A',Integer(3)])
      2 c=[Integer(0),Integer(1),Integer(3)]
----> 3 for v in sortables(A,c[Integer(1):]):
      4     P=p_lambda_cone(B(A,c),lam(A,v),K(c[Integer(1):],v))
      5     Q=p_lambda_cone(B(A,c),lam(A,v),list(k+[c[Integer(0)]] for k in K(c[Integer(1):],v)))

File ~/git/affine_dominance/software/domination4.py:330, in sortables(A, c)
    329 def sortables(A,c):
--> 330     yield from sortables_remaining(A,c,[],vector([1]*A.nrows()))

File ~/git/affine_dominance/software/domination4.py:337, in sortables_remaining(A, c, sort, vec)
    335 else:
    336     if vec[c[0]]>0:
--> 337         yield from sortables_remaining(A,c[1:]+[c[0]],sort+[c[0]],reflect(A,vec,c[0]))
    338     yield from sortables_remaining(A,c[1:],sort,vec)

File ~/git/affine_dominance/software/domination4.py:336, in sortables_remaining(A, c, sort, vec)
    334     yield sort
    335 else:
--> 336     if vec[c[0]]>0:
    337         yield from sortables_remaining(A,c[1:]+[c[0]],sort+[c[0]],reflect(A,vec,c[0]))
    338     yield from sortables_remaining(A,c[1:],sort,vec)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/modules/free_module_element.pyx:1842, in sage.modules.free_module_element.FreeModuleElement.__getitem__ (build/cythonized/sage/modules/free_module_element.c:19571)()
   1840     n += d
   1841 if n < 0 or n >= d:
-> 1842     raise IndexError("vector index out of range")
   1843 return self.get_unsafe(n)
   1844 

IndexError: vector index out of range
sage: A=CartanMatrix(['A',3])
....: c=[0,1,2]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_cone(B(A,c),lam(A,v),K(c[1:],v))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list(k+[c[0]] for k in K(c[1:],v)))
....:     print("\n",v)
....:     print("parabolic",list(map(vector,P.rays())))
....:     print("parabolic + c0",list(map(vector,Q.rays())))

 [1, 2, 1]
parabolic [(0, -1, 0)]
parabolic + c0 [(0, 1, 0)]

 [1, 2]
parabolic [(0, -1, 0)]
parabolic + c0 [(0, 1, 0)]

 [1]
parabolic [(1, 0, -1), (0, -1, 0)]
parabolic + c0 []

 [2]
parabolic [(1, -1, -1), (0, -1, 0)]
parabolic + c0 []

 []
parabolic [(1, 0, -1), (0, -1, 0)]
parabolic + c0 []
sage: A=CartanMatrix(['B',3])
....: c=[0,1,2]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_cone(B(A,c),lam(A,v),K(c[1:],v))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list(k+[c[0]] for k in K(c[1:],v)))
....:     print("\n",v)
....:     print("parabolic",list(map(vector,P.rays())))
....:     print("parabolic + c0",list(map(vector,Q.rays())))

 [1, 2, 1, 2]
parabolic [(0, -1, 0)]
parabolic + c0 [(0, 1, 0)]

 [1, 2, 1]
parabolic [(0, -1, 0), (-1, -2, 2)]
parabolic + c0 [(0, 1, 0), (-1, -1, 2)]

 [1, 2]
parabolic [(1, 1, -2), (0, -1, 0)]
parabolic + c0 []

 [1]
parabolic [(0, -1, 0), (1, 2, -2)]
parabolic + c0 []

 [2]
parabolic [(1, -1, -2), (0, -1, 0)]
parabolic + c0 []

 []
parabolic [(0, -1, 0), (1, 1, -2)]
parabolic + c0 []
sage: A=CartanMatrix(['B',3])
....: c=[0,1,2]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_cone(B(A,c),lam(A,v),K(c[1:],v))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list(k+[c[0]] for k in K(c[1:],v)))
....:     print("\n",v)
....:     print("parabolic",list(map(vector,P.rays())),list(map(vector,P.lines()
....: )))
....:     print("parabolic + c0",list(map(vector,Q.rays())),list(map(vector,Q.li
....: nes())))

 [1, 2, 1, 2]
parabolic [(0, -1, 0)] []
parabolic + c0 [(0, 1, 0)] []

 [1, 2, 1]
parabolic [(0, -1, 0), (-1, -2, 2)] []
parabolic + c0 [(0, 1, 0), (-1, -1, 2)] []

 [1, 2]
parabolic [(1, 1, -2), (0, -1, 0)] []
parabolic + c0 [] []

 [1]
parabolic [(0, -1, 0), (1, 2, -2)] []
parabolic + c0 [] []

 [2]
parabolic [(1, -1, -2), (0, -1, 0)] []
parabolic + c0 [] []

 []
parabolic [(0, -1, 0), (1, 1, -2)] []
parabolic + c0 [] []
sage: A=CartanMatrix(['B',4])
....: c=[0,1,2,3]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_cone(B(A,c),lam(A,v),K(c[1:],v))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list(k+[c[0]] for k in K(c[1:],v)))
....:     print("\n",v)
....:     print("parabolic",list(map(vector,P.rays())),list(map(vector,P.lines()
....: )))
....:     print("parabolic + c0",list(map(vector,Q.rays())),list(map(vector,Q.li
....: nes())))

 [1, 2, 3, 1, 2, 3, 1, 2, 3]
parabolic [(0, -1, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0)] []

 [1, 2, 3, 1, 2, 3, 1, 2]
parabolic [(0, -1, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0)] []

 [1, 2, 3, 1, 2, 3, 1]
parabolic [(0, -1, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0)] []

 [1, 2, 3, 1, 2, 3]
parabolic [(0, -1, 0, 0), (1, 0, 1, -2)] []
parabolic + c0 [] []

 [1, 2, 3, 1, 2, 1]
parabolic [(0, -1, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0)] []

 [1, 2, 3, 1, 2]
parabolic [(0, -1, 0, 0), (1, 0, 1, -2)] []
parabolic + c0 [] []

 [1, 2, 3, 1]
parabolic [(0, -1, 0, 0), (1, 0, 1, -2), (0, -1, 1, 0), (0, 0, 1, -2), (1, 1, 1, -4)] []
parabolic + c0 [] []

 [1, 2, 3, 2, 3]
parabolic [(0, -1, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0)] []

 [1, 2, 3, 2]
parabolic [(0, -1, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0)] []

 [1, 2, 3]
parabolic [(0, -1, 0, 0), (0, -1, 1, 0), (1, 0, 1, -2)] []
parabolic + c0 [] []

 [1, 2, 1]
parabolic [(0, -1, 0, 0), (1, 0, 1, -2), (1, 1, 1, -4), (2, 1, 0, -4)] []
parabolic + c0 [] []

 [1, 2]
parabolic [(0, -1, 0, 0), (1, 0, 1, -2), (2, 1, 0, -4)] []
parabolic + c0 [] []

 [1, 3]
parabolic [(1, 0, -1, -2), (0, -1, 0, 0)] []
parabolic + c0 [] []

 [1]
parabolic [(0, -1, 0, 0), (1, 0, 1, -2), (1, 0, -1, -2)] []
parabolic + c0 [] []

 [2, 3, 2, 3]
parabolic [(1, -1, -1, 0), (0, -1, 0, 0)] []
parabolic + c0 [] []

 [2, 3, 2]
parabolic [(1, -1, -1, 0), (0, -1, 0, 0)] []
parabolic + c0 [] []

 [2, 3]
parabolic [(1, -1, -1, 0), (1, 0, 1, -2), (0, -1, 0, 0), (1, -1, 0, 0)] []
parabolic + c0 [] []

 [2]
parabolic [(0, -1, 0, 0), (1, -1, -1, 0), (1, 0, 1, -2), (1, 1, 1, -4)] []
parabolic + c0 [] []

 [3]
parabolic [(1, 0, -1, -2), (1, -1, -1, 0), (0, -1, 0, 0)] []
parabolic + c0 [] []

 []
parabolic [(1, 0, 1, -2), (0, -1, 0, 0), (1, -1, -1, 0), (1, 0, -1, -2)] []
parabolic + c0 [] []
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_cone(B(A,c),lam(A,v),K(c[1:],v))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list(k+[c[0]] for k in K(c[1:],v)))
....:     print("\n",v)
....:     print("parabolic",list(map(vector,P.rays())),list(map(vector,P.lines()
....: )))
....:     print("parabolic + c0",list(map(vector,Q.rays())),list(map(vector,Q.li
....: nes())))
---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
Cell In [759], line 4
      2 c=[Integer(0),Integer(1),Integer(2),Integer(3)]
      3 for v in sortables(A,c[Integer(1):]):
----> 4     P=p_lambda_cone(B(A,c),lam(A,v),K(c[Integer(1):],v))
      5     Q=p_lambda_cone(B(A,c),lam(A,v),list(k+[c[Integer(0)]] for k in K(c[Integer(1):],v)))
      6     print("\n",v)

File ~/git/affine_dominance/software/domination4.py:199, in B(A, c)
    197     out[i,i]=0
    198     for j in range(i+1,n):
--> 199         out[c[i],c[j]]=-A[c[i],c[j]]
    200         out[c[j],c[i]]=A[c[j],c[i]]
    201 return out

IndexError: list index out of range
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_cone(B(A,c),lam(A,v),K(c[1:],v))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list(k+[c[0]] for k in K(c[1:],v)))
....:     print("\n",v)
....:     print("parabolic",list(map(vector,P.rays())),list(map(vector,P.lines()
....: )))
....:     print("parabolic + c0",list(map(vector,Q.rays())),list(map(vector,Q.li
....: nes())))


 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
parabolic [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
parabolic [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
parabolic [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1]
parabolic [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
parabolic [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1)] []
parabolic + c0 [] []

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2]
parabolic [(0, -2, -1, 0, 1), (0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0), (0, 0, -1, 0, 1)] []

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1]
parabolic [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
parabolic [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1)] []
parabolic + c0 [] []

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1]
parabolic [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
parabolic [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1)] []
parabolic + c0 [] []

 [1, 2, 3, 4, 1, 2, 3, 4, 1]
parabolic [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (1, 0, 1, 1, -2)] []
parabolic + c0 [] []
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [760], line 4
      2 c=[Integer(0),Integer(1),Integer(2),Integer(3),Integer(4)]
      3 for v in sortables(A,c[Integer(1):]):
----> 4     P=p_lambda_cone(B(A,c),lam(A,v),K(c[Integer(1):],v))
      5     Q=p_lambda_cone(B(A,c),lam(A,v),list(k+[c[Integer(0)]] for k in K(c[Integer(1):],v)))
      6     print("\n",v)

File ~/git/affine_dominance/software/domination4.py:186, in p_lambda_cone(B, la, seqs)
    184 P = cone_at(p_lambda_faster(B, la, seqs[0]),la)
    185 for s in seqs:
--> 186     P = P.intersection(cone_at(p_lambda_faster(B, la, s),la))
    187     if P.dimension()==0:
    188         break

File ~/git/affine_dominance/software/domination4.py:151, in p_lambda_faster(B, la, seq)
    148 #print("Hp:   ",Hp,Hp.vertices(),Hp.rays(),Hp.lines(),"\n")
    149 #print("Hm:   ",Hm,Hm.vertices(),Hm.rays(),Hm.lines(),"\n\n")
    150 Pp = P.intersection(Hp)
--> 151 Pm = P.intersection(Hm)
    152 if Pp.dimension() < rk:
    153     P=Em*Pm

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1371, in Polyhedron_base5.intersection(self, other)
   1369 parent = self.parent()
   1370 try:
-> 1371     intersection = parent.element_class(parent, None, [new_ieqs, new_eqns])
   1373     # Force calculation of the vertices.
   1374     _ = intersection.n_vertices()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:179, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    177 elif Hrep is not None:
    178     ieqs, eqns = Hrep
--> 179     self._init_from_Hrepresentation(ieqs, eqns, **kwds)
    180 else:
    181     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:133, in Polyhedron_ppl._init_from_Hrepresentation(self, ieqs, eqns, minimize, verbose)
    131     ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'universe')
    132 else:
--> 133     ppl_polyhedron = C_Polyhedron(cs)
    134 self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_cone(B(A,c),lam(A,v),K(c[1:],v))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list(k+[c[0]] for k in K(c[1:],v)))
....:     print("\n",v)
....:     print("parabolic",list(map(vector,P.rays())),list(map(vector,P.lines()
....: )))
....:     print("parabolic + c0",list(map(vector,Q.rays())),list(map(vector,Q.li
....: nes())))
....: 

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
parabolic [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
parabolic [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
parabolic [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1]
parabolic [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
parabolic [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1)] []
parabolic + c0 [] []

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2]
parabolic [(0, -2, -1, 0, 1), (0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0), (0, 0, -1, 0, 1)] []

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1]
parabolic [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
parabolic [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1)] []
parabolic + c0 [] []

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1]
parabolic [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
parabolic [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1)] []
parabolic + c0 [] []

 [1, 2, 3, 4, 1, 2, 3, 4, 1]
parabolic [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (1, 0, 1, 1, -2)] []
parabolic + c0 [] []

 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4]
parabolic [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []

 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3]
parabolic [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []

 [1, 2, 3, 4, 1, 2, 3, 4, 2]
parabolic [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []

 [1, 2, 3, 4, 1, 2, 3, 4]
parabolic [(1, 0, 0, 1, -1), (0, -1, 0, 0, 0)] []
parabolic + c0 [] []

 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
parabolic [(0, -1, 0, 1, 0), (0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0), (0, 1, 0, 1, 0)] []

 [1, 2, 3, 4, 1, 2, 3, 1, 2]
parabolic [(0, -1, 0, 0, 0), (0, -2, -1, 1, 1), (1, 0, 0, 1, -1), (0, -1, 0, 1, 0), (-1, -4, -1, 2, 2)] []
parabolic + c0 [] []

 [1, 2, 3, 4, 1, 2, 3, 1]
parabolic [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (1, 0, 1, 1, -2), (0, -2, 0, 1, 0)] []
parabolic + c0 [] []

 [1, 2, 3, 4, 1, 2, 3, 2]
parabolic [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []

 [1, 2, 3, 4, 1, 2, 3]
parabolic [(1, 0, 0, 1, -1), (0, -1, 0, 0, 0)] []
parabolic + c0 [] []

 [1, 2, 3, 4, 1, 2, 1]
parabolic [(0, -1, 0, 0, 0), (0, -1, 0, 1, 0), (1, 1, 1, 0, -2), (1, 0, 0, 1, -1), (0, 0, 1, 0, -1)] []
parabolic + c0 [] []

 [1, 2, 3, 4, 1, 2]
parabolic [(0, -1, 0, 0, 0), (0, -1, 0, 1, 0), (1, 0, 0, 1, -1), (1, 1, 1, 0, -2), (0, 0, 1, 0, -1)] []
parabolic + c0 [] []
^Z
[1]+  Stopped                 /Applications/SageMath-10-2.app/Contents/Frameworks/Sage.framework/Versions/Current/venv/bin/sage
logout
There are stopped jobs.
MA-C02K804RDR53:~ reading$ fg
/Applications/SageMath-10-2.app/Contents/Frameworks/Sage.framework/Versions/Current/venv/bin/sage

 [1, 2, 3, 4, 1, 3, 4]
parabolic [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []

 [1, 2, 3, 4, 1, 3]
parabolic [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []

 [1, 2, 3, 4, 1]
parabolic [(0, -1, 0, 0, 0), (0, -1, 0, 1, 0), (1, 0, 0, 1, -1)] []
parabolic + c0 [] []

 [1, 2, 3, 4, 2, 3, 4, 2, 3, 4]
parabolic [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []

 [1, 2, 3, 4, 2, 3, 4, 2, 3]
parabolic [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []

 [1, 2, 3, 4, 2, 3, 4, 2]
parabolic [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []

 [1, 2, 3, 4, 2, 3, 4]
parabolic [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1)] []
parabolic + c0 [] []

 [1, 2, 3, 4, 2, 3, 2]
parabolic [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []

 [1, 2, 3, 4, 2, 3]
parabolic [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1)] []
parabolic + c0 [] []

 [1, 2, 3, 4, 2]
parabolic [(0, -1, 0, 0, 0), (0, -1, 0, 1, 0), (1, 0, 0, 1, -1), (1, 0, 1, 1, -2), (0, -1, 1, 1, -1)] []
parabolic + c0 [] []

 [1, 2, 3, 4, 3, 4]
parabolic [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []

 [1, 2, 3, 4, 3]
parabolic [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []

 [1, 2, 3, 4]
parabolic [(0, -1, 0, 0, 0), (0, -1, 0, 1, 0), (1, 0, 0, 1, -1)] []
parabolic + c0 [] []

 [1, 2, 3, 1, 2, 1]
parabolic [(0, -1, 0, 1, 0), (1, -1, 0, 3, -1), (0, -1, 0, 0, 0), (2, 1, 0, 0, -2), (1, 1, 1, 0, -2), (1, 0, 1, 2, -2)] []
parabolic + c0 [] []

 [1, 2, 3, 1, 2]
parabolic [(1, 0, 0, 1, -1), (0, -1, 0, 0, 0), (2, 1, 0, 0, -2), (1, 1, 1, 0, -2)] []
parabolic + c0 [] []

 [1, 2, 3, 1]
parabolic [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (2, 1, 0, 0, -2)] []
parabolic + c0 [] []

 [1, 2, 3, 2]
parabolic [(0, -1, 0, 0, 0), (0, -1, 2, 2, -2), (2, 1, 0, 0, -2), (1, 0, 0, 1, -1), (0, -1, 1, 2, -1)] []
parabolic + c0 [] []

 [1, 2, 3]
parabolic [(0, -1, 0, 0, 0), (2, 1, 0, 0, -2), (1, 0, 0, 1, -1)] []
parabolic + c0 [] []

 [1, 2, 4, 1]
parabolic [(1, 0, 0, -1, -1), (0, -1, 0, 0, 0)] []
parabolic + c0 [] []

 [1, 2, 4]
parabolic [(1, 0, 0, -1, -1), (0, -1, 0, 0, 0)] []
parabolic + c0 [] []

 [1, 2, 1]
parabolic [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (1, 0, 0, -1, -1)] []
parabolic + c0 [] []

 [1, 2]
parabolic [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (0, -1, 1, 1, -1), (0, -1, 1, 0, -1), (1, 0, 0, -1, -1)] []
parabolic + c0 [] []

 [1, 3, 4, 3, 4]
parabolic [(1, 0, -1, -1, 0), (0, -1, 0, 0, 0)] []
parabolic + c0 [] []

 [1, 3, 4, 3]
parabolic [(1, 0, -1, -1, 0), (0, -1, 0, 0, 0)] []
parabolic + c0 [] []

 [1, 3, 4]
parabolic [(0, -1, 0, 0, 0), (1, 0, -1, -1, 0), (1, 0, -1, 0, 0), (1, 0, 0, 1, -1)] []
parabolic + c0 [] []

 [1, 3]
parabolic [(0, -1, 0, 0, 0), (1, 0, -1, -1, 0), (1, 0, 1, 1, -2), (1, 0, 0, 1, -1)] []
parabolic + c0 [] []

 [1, 4]
parabolic [(0, -1, 0, 0, 0), (1, 0, 0, -1, -1), (1, 0, -1, -1, 0)] []
parabolic + c0 [] []

 [1]
parabolic [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (1, 0, 0, -1, -1), (1, 0, -1, -1, 0)] []
parabolic + c0 [] []

 [2, 3, 4, 2, 3, 4, 2, 3, 4]
parabolic [(1, -1, -1, 0, 0), (0, -1, 0, 0, 0)] []
parabolic + c0 [] []

 [2, 3, 4, 2, 3, 4, 2, 3]
parabolic [(1, -1, -1, 0, 0), (0, -1, 0, 0, 0)] []
parabolic + c0 [] []

 [2, 3, 4, 2, 3, 4, 2]
parabolic [(1, -1, -1, 0, 0), (0, -1, 0, 0, 0)] []
parabolic + c0 [] []
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [761], line 4
      2 c=[Integer(0),Integer(1),Integer(2),Integer(3),Integer(4)]
      3 for v in sortables(A,c[Integer(1):]):
----> 4     P=p_lambda_cone(B(A,c),lam(A,v),K(c[Integer(1):],v))
      5     Q=p_lambda_cone(B(A,c),lam(A,v),list(k+[c[Integer(0)]] for k in K(c[Integer(1):],v)))
      6     print("\n",v)

File ~/git/affine_dominance/software/domination4.py:186, in p_lambda_cone(B, la, seqs)
    184 P = cone_at(p_lambda_faster(B, la, seqs[0]),la)
    185 for s in seqs:
--> 186     P = P.intersection(cone_at(p_lambda_faster(B, la, s),la))
    187     if P.dimension()==0:
    188         break

File ~/git/affine_dominance/software/domination4.py:159, in p_lambda_faster(B, la, seq)
    155         P=Ep*Pp
    156     else:
    157         #print("Pp:   ",Pp,Pp.vertices(),Pp.rays(),Pp.lines(),"\n")
    158         #print("Pm:   ",Pm,Pm.vertices(),Pm.rays(),Pm.lines(),"\n\n")
--> 159         P=(Ep*Pp).convex_hull(Em*Pm)
    160     B.mutate(k)
    161 return P

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4099, in sage.structure.element.Matrix.__mul__ (build/cythonized/sage/structure/element.c:35219)()
   4097 
   4098         if BOTH_ARE_ELEMENT(cl):
-> 4099             return coercion_model.bin_op(left, right, mul)
   4100 
   4101         cdef long value

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1222, in sage.structure.coerce.CoercionModel.bin_op (build/cythonized/sage/structure/coerce.c:15809)()
   1220 if action is not None:
   1221     if (<Action>action)._is_left:
-> 1222         return (<Action>action)._act_(x, y)
   1223     else:
   1224         return (<Action>action)._act_(y, x)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_actions.pyx:157, in sage.structure.coerce_actions.ActedUponAction._act_ (build/cythonized/sage/structure/coerce_actions.c:8579)()
    155     <... 'sage.structure.coerce_actions.ActedUponAction'>
    156 """
--> 157 return (<Element>x)._acted_upon_(g, not self._is_left)
    158 
    159 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:949, in sage.structure.element.Element._acted_upon_ (build/cythonized/sage/structure/element.c:16495)()
    947     return None
    948 
--> 949 cpdef _acted_upon_(self, x, bint self_on_left) noexcept:
    950     """
    951     Use this method to implement ``self`` acted on by x.

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1450, in Polyhedron_base5._acted_upon_(self, actor, self_on_left)
   1448         raise ValueError("matrices should act on the left")
   1449     else:
-> 1450         return self.linear_transformation(actor)
   1451 else:
   1452     return self.dilation(actor)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1879, in Polyhedron_base5.linear_transformation(self, linear_transf, new_base_ring)
   1873     pref_rep = 'Vrep' if self.n_vertices() <= self.n_inequalities() else 'Hrep'
   1875     return new_parent.element_class(new_parent, [new_vertices, new_rays, new_lines],
   1876                                     [new_inequalities, new_equations],
   1877                                     Vrep_minimal=True, Hrep_minimal=True, pref_rep=pref_rep)
-> 1879 return new_parent.element_class(new_parent, [tuple(new_vertices), tuple(new_rays), tuple(new_lines)], None)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:70, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
---> 70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:195, in Polyhedron_ppl.set_immutable(self)
    193         raise e
    194 if not hasattr(self, '_Hrepresentation'):
--> 195     self._init_Hrepresentation_from_ppl(True)
    196 self._is_mutable = False

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:344, in Polyhedron_ppl._init_Hrepresentation_from_ppl(self, minimize)
    342 for c in cs:
    343     if c.is_inequality():
--> 344         parent._make_Inequality(self, (c.inhomogeneous_term(),) + c.coefficients())
    345     elif c.is_equality():
    346         parent._make_Equation(self, (c.inhomogeneous_term(),) + c.coefficients())

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:1069, in Polyhedra_base._make_Inequality(self, polyhedron, data)
   1067 except IndexError:
   1068     obj = Inequality(self)
-> 1069 obj._set_data(polyhedron, data)
   1070 return obj

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/representation.py:439, in Hrepresentation._set_data(self, polyhedron, data)
    436 if len(data) != self._vector.degree():
    437     raise ValueError('H-representation data requires a list of length ambient_dim+1')
--> 439 self._vector[:] = data
    440 self._A[:] = data[1:]
    441 self._b = self._base_ring(data[0])

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/modules/free_module_element.pyx:1893, in sage.modules.free_module_element.FreeModuleElement.__setitem__ (build/cythonized/sage/modules/free_module_element.c:20047)()
   1891 if isinstance(i, slice):
   1892     PySlice_GetIndicesEx(i, d, &start, &stop, &step, &slicelength)
-> 1893     values = [R(x) for x in value]
   1894     if len(values) != slicelength:
   1895         raise IndexError("slice assignment would change dimension")

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/parent.pyx:901, in sage.structure.parent.Parent.__call__ (build/cythonized/sage/structure/parent.c:12658)()
    899 if mor is not None:
    900     if no_extra_args:
--> 901         return mor._call_(x)
    902     else:
    903         return mor._call_with_args(x, args, kwds)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:158, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_ (build/cythonized/sage/structure/coerce_maps.c:6834)()
    156 cdef Parent C = self._codomain
    157 try:
--> 158     return C._element_constructor(x)
    159 except Exception:
    160     if print_warnings:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/rings/rational.pyx:536, in sage.rings.rational.Rational.__init__ (build/cythonized/sage/rings/rational.cpp:14305)()
    534     """
    535     if x is not None:
--> 536         self.__set_value(x, base)
    537 
    538 def __reduce__(self):

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/rings/rational.pyx:670, in sage.rings.rational.Rational._Rational__set_value (build/cythonized/sage/rings/rational.cpp:16246)()
    668         raise TypeError("unable to convert {!r} to a rational".format(x))
    669 
--> 670 elif isinstance(x, fractions.Fraction):
    671     mpz_set(mpq_numref(self.value), (<integer.Integer> integer.Integer(x.numerator)).value)
    672     mpz_set(mpq_denref(self.value), (<integer.Integer> integer.Integer(x.denominator)).value)

File <frozen abc>:117, in __instancecheck__(cls, instance)

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: B(A,c)
[ 0  1  0  0  0]
[-1  0  1  0  0]
[ 0 -1  0  1  0]
[ 0  0 -1  0  2]
[ 0  0  0 -1  0]
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_cone(B(A,c),lam(A,v),K(c[1:],v))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list(k+[c[0]] for k in K(c[1:],v)))
....:     print("\n",v)
....:     print("parabolic",list(map(vector,P.rays())),list(map(vector,P.lines()
....: )))
....:     print("parabolic + c0",list(map(vector,Q.rays())),list(map(vector,Q.li
....: nes())))
....: 

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
parabolic [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
parabolic [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
parabolic [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1]
parabolic [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
parabolic [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1)] []
parabolic + c0 [] []

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2]
parabolic [(0, -2, -1, 0, 1), (0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0), (0, 0, -1, 0, 1)] []

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1]
parabolic [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
parabolic [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1)] []
parabolic + c0 [] []

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1]
parabolic [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
parabolic [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1)] []
parabolic + c0 [] []

 [1, 2, 3, 4, 1, 2, 3, 4, 1]
parabolic [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (1, 0, 1, 1, -2)] []
parabolic + c0 [] []

 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4]
parabolic [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []

 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3]
parabolic [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []

 [1, 2, 3, 4, 1, 2, 3, 4, 2]
parabolic [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []

 [1, 2, 3, 4, 1, 2, 3, 4]
parabolic [(1, 0, 0, 1, -1), (0, -1, 0, 0, 0)] []
parabolic + c0 [] []

 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
parabolic [(0, -1, 0, 1, 0), (0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0), (0, 1, 0, 1, 0)] []

 [1, 2, 3, 4, 1, 2, 3, 1, 2]
parabolic [(0, -1, 0, 0, 0), (0, -2, -1, 1, 1), (1, 0, 0, 1, -1), (0, -1, 0, 1, 0), (-1, -4, -1, 2, 2)] []
parabolic + c0 [] []

 [1, 2, 3, 4, 1, 2, 3, 1]
parabolic [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (1, 0, 1, 1, -2), (0, -2, 0, 1, 0)] []
parabolic + c0 [] []

 [1, 2, 3, 4, 1, 2, 3, 2]
parabolic [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []

 [1, 2, 3, 4, 1, 2, 3]
parabolic [(1, 0, 0, 1, -1), (0, -1, 0, 0, 0)] []
parabolic + c0 [] []

 [1, 2, 3, 4, 1, 2, 1]
parabolic [(0, -1, 0, 0, 0), (0, -1, 0, 1, 0), (1, 1, 1, 0, -2), (1, 0, 0, 1, -1), (0, 0, 1, 0, -1)] []
parabolic + c0 [] []

 [1, 2, 3, 4, 1, 2]
parabolic [(0, -1, 0, 0, 0), (0, -1, 0, 1, 0), (1, 0, 0, 1, -1), (1, 1, 1, 0, -2), (0, 0, 1, 0, -1)] []
parabolic + c0 [] []

 [1, 2, 3, 4, 1, 3, 4]
parabolic [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []

 [1, 2, 3, 4, 1, 3]
parabolic [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []

 [1, 2, 3, 4, 1]
parabolic [(0, -1, 0, 0, 0), (0, -1, 0, 1, 0), (1, 0, 0, 1, -1)] []
parabolic + c0 [] []

 [1, 2, 3, 4, 2, 3, 4, 2, 3, 4]
parabolic [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []

 [1, 2, 3, 4, 2, 3, 4, 2, 3]
parabolic [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []

 [1, 2, 3, 4, 2, 3, 4, 2]
parabolic [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []

 [1, 2, 3, 4, 2, 3, 4]
parabolic [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1)] []
parabolic + c0 [] []

 [1, 2, 3, 4, 2, 3, 2]
parabolic [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []

 [1, 2, 3, 4, 2, 3]
parabolic [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1)] []
parabolic + c0 [] []

 [1, 2, 3, 4, 2]
parabolic [(0, -1, 0, 0, 0), (0, -1, 0, 1, 0), (1, 0, 0, 1, -1), (1, 0, 1, 1, -2), (0, -1, 1, 1, -1)] []
parabolic + c0 [] []

 [1, 2, 3, 4, 3, 4]
parabolic [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []

 [1, 2, 3, 4, 3]
parabolic [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []

 [1, 2, 3, 4]
parabolic [(0, -1, 0, 0, 0), (0, -1, 0, 1, 0), (1, 0, 0, 1, -1)] []
parabolic + c0 [] []

 [1, 2, 3, 1, 2, 1]
parabolic [(0, -1, 0, 1, 0), (1, -1, 0, 3, -1), (0, -1, 0, 0, 0), (2, 1, 0, 0, -2), (1, 1, 1, 0, -2), (1, 0, 1, 2, -2)] []
parabolic + c0 [] []

 [1, 2, 3, 1, 2]
parabolic [(1, 0, 0, 1, -1), (0, -1, 0, 0, 0), (2, 1, 0, 0, -2), (1, 1, 1, 0, -2)] []
parabolic + c0 [] []

 [1, 2, 3, 1]
parabolic [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (2, 1, 0, 0, -2)] []
parabolic + c0 [] []

 [1, 2, 3, 2]
parabolic [(0, -1, 0, 0, 0), (0, -1, 2, 2, -2), (2, 1, 0, 0, -2), (1, 0, 0, 1, -1), (0, -1, 1, 2, -1)] []
parabolic + c0 [] []

 [1, 2, 3]
parabolic [(0, -1, 0, 0, 0), (2, 1, 0, 0, -2), (1, 0, 0, 1, -1)] []
parabolic + c0 [] []

 [1, 2, 4, 1]
parabolic [(1, 0, 0, -1, -1), (0, -1, 0, 0, 0)] []
parabolic + c0 [] []

 [1, 2, 4]
parabolic [(1, 0, 0, -1, -1), (0, -1, 0, 0, 0)] []
parabolic + c0 [] []

 [1, 2, 1]
parabolic [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (1, 0, 0, -1, -1)] []
parabolic + c0 [] []

 [1, 2]
parabolic [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (0, -1, 1, 1, -1), (0, -1, 1, 0, -1), (1, 0, 0, -1, -1)] []
parabolic + c0 [] []

 [1, 3, 4, 3, 4]
parabolic [(1, 0, -1, -1, 0), (0, -1, 0, 0, 0)] []
parabolic + c0 [] []

 [1, 3, 4, 3]
parabolic [(1, 0, -1, -1, 0), (0, -1, 0, 0, 0)] []
parabolic + c0 [] []

 [1, 3, 4]
parabolic [(0, -1, 0, 0, 0), (1, 0, -1, -1, 0), (1, 0, -1, 0, 0), (1, 0, 0, 1, -1)] []
parabolic + c0 [] []

 [1, 3]
parabolic [(0, -1, 0, 0, 0), (1, 0, -1, -1, 0), (1, 0, 1, 1, -2), (1, 0, 0, 1, -1)] []
parabolic + c0 [] []

 [1, 4]
parabolic [(0, -1, 0, 0, 0), (1, 0, 0, -1, -1), (1, 0, -1, -1, 0)] []
parabolic + c0 [] []

 [1]
parabolic [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (1, 0, 0, -1, -1), (1, 0, -1, -1, 0)] []
parabolic + c0 [] []

 [2, 3, 4, 2, 3, 4, 2, 3, 4]
parabolic [(1, -1, -1, 0, 0), (0, -1, 0, 0, 0)] []
parabolic + c0 [] []

 [2, 3, 4, 2, 3, 4, 2, 3]
parabolic [(1, -1, -1, 0, 0), (0, -1, 0, 0, 0)] []
parabolic + c0 [] []

 [2, 3, 4, 2, 3, 4, 2]
parabolic [(1, -1, -1, 0, 0), (0, -1, 0, 0, 0)] []
parabolic + c0 [] []

 [2, 3, 4, 2, 3, 4]
parabolic [(1, -1, -1, 0, 0), (0, -1, 0, 0, 0), (1, 0, 0, 1, -1)] []
parabolic + c0 [] []

 [2, 3, 4, 2, 3, 2]
parabolic [(1, -1, -1, 0, 0), (0, -1, 0, 0, 0), (0, -2, -1, 0, 1), (2, -2, -3, 0, 1)] []
parabolic + c0 [(0, 0, -1, 0, 1)] []

 [2, 3, 4, 2, 3]
parabolic [(1, -1, -1, 0, 0), (0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (2, -1, -2, 1, 0), (3, -3, -4, 1, 1)] []
parabolic + c0 [] []

 [2, 3, 4, 2]
parabolic [(1, -1, -1, 1, 0), (1, -1, -1, 0, 0), (0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (1, 0, 1, 1, -2)] []
parabolic + c0 [] []

 [2, 3, 4, 3, 4]
parabolic [(1, -1, -1, 0, 0), (0, -1, 0, 0, 0)] []
parabolic + c0 [] []

 [2, 3, 4, 3]
parabolic [(1, -1, -1, 0, 0), (0, -1, 0, 0, 0)] []
parabolic + c0 [] []

 [2, 3, 4]
parabolic [(1, 0, 0, 1, -1), (1, -1, -1, 0, 0), (0, -1, 0, 0, 0), (1, -1, -1, 1, 0)] []
parabolic + c0 [] []

 [2, 3, 2]
parabolic [(0, -1, 0, 1, 0), (1, -1, -1, 1, 0), (2, -1, -1, 3, -1), (0, -1, 0, 0, 0), (1, 1, 1, 0, -2), (1, -1, -1, 0, 0)] []
parabolic + c0 [] []

 [2, 3]
parabolic [(1, -1, -1, 0, 0), (0, -1, 0, 0, 0), (3, -3, -1, 4, -2), (1, 1, 1, 0, -2), (1, 0, 0, 1, -1)] []
parabolic + c0 [] []

 [2, 4]
parabolic [(1, 0, 0, -1, -1), (1, -1, -1, 0, 0), (0, -1, 0, 0, 0)] []
parabolic + c0 [] []

 [2]
parabolic [(1, -1, -1, 0, 0), (0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (1, 0, 0, -1, -1)] []
parabolic + c0 [] []

 [3, 4, 3, 4]
parabolic [(1, 0, -1, -1, 0), (0, -1, 0, 0, 0), (1, -1, -1, 0, 0)] []
parabolic + c0 [] []

 [3, 4, 3]
parabolic [(1, 0, -1, -1, 0), (0, -1, 0, 0, 0), (1, -1, -1, 0, 0), (1, -1, -2, -2, 1)] []
parabolic + c0 [] []

 [3, 4]
parabolic [(1, 0, -1, 0, 0), (1, 0, -1, -1, 0), (0, -1, 0, 0, 0), (1, 0, 0, 1, -1)] []
parabolic + c0 [] []

 [3]
parabolic [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (1, 0, -1, -1, 0), (1, 0, 1, 1, -2), (1, -1, -1, 0, 0), (2, -2, -1, 2, -1)] []
parabolic + c0 [] []

 [4]
parabolic [(1, 0, 0, -1, -1), (0, -1, 0, 0, 0), (1, -1, -1, 0, 0), (1, 0, -1, -1, 0)] []
parabolic + c0 [] []

 []
parabolic [(0, -1, 0, 0, 0), (1, 0, -1, -1, 0), (1, 0, 0, -1, -1), (1, 0, 0, 1, -1), (1, -1, -1, 0, 0)] []
parabolic + c0 [] []
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_cone(B(A,c),lam(A,v),K(c[1:],v))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list(k+[c[0]] for k in K(c[1:],v)))
....:     print("\n",v)
....:     print("parabolic",list(map(vector,P.rays())),list(map(vector,P.lines()
....: )))
....:     print("parabolic + c0",list(map(vector,Q.rays())),list(map(vector,Q.li
....: nes())))
....: 

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
parabolic [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
parabolic [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
parabolic [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1]
parabolic [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
parabolic [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1)] []
parabolic + c0 [] []

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2]
parabolic [(0, -2, -1, 0, 1), (0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0), (0, 0, -1, 0, 1)] []

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1]
parabolic [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
parabolic [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1)] []
parabolic + c0 [] []
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [764], line 5
      3 for v in sortables(A,c[Integer(1):]):
      4     P=p_lambda_cone(B(A,c),lam(A,v),K(c[Integer(1):],v))
----> 5     Q=p_lambda_cone(B(A,c),lam(A,v),list(k+[c[Integer(0)]] for k in K(c[Integer(1):],v)))
      6     print("\n",v)
      7     print("parabolic",list(map(vector,P.rays())),list(map(vector,P.lines()))) 

File ~/git/affine_dominance/software/domination4.py:186, in p_lambda_cone(B, la, seqs)
    184 P = cone_at(p_lambda_faster(B, la, seqs[0]),la)
    185 for s in seqs:
--> 186     P = P.intersection(cone_at(p_lambda_faster(B, la, s),la))
    187     if P.dimension()==0:
    188         break

File ~/git/affine_dominance/software/domination4.py:159, in p_lambda_faster(B, la, seq)
    155         P=Ep*Pp
    156     else:
    157         #print("Pp:   ",Pp,Pp.vertices(),Pp.rays(),Pp.lines(),"\n")
    158         #print("Pm:   ",Pm,Pm.vertices(),Pm.rays(),Pm.lines(),"\n\n")
--> 159         P=(Ep*Pp).convex_hull(Em*Pm)
    160     B.mutate(k)
    161 return P

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4099, in sage.structure.element.Matrix.__mul__ (build/cythonized/sage/structure/element.c:35219)()
   4097 
   4098         if BOTH_ARE_ELEMENT(cl):
-> 4099             return coercion_model.bin_op(left, right, mul)
   4100 
   4101         cdef long value

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1222, in sage.structure.coerce.CoercionModel.bin_op (build/cythonized/sage/structure/coerce.c:15809)()
   1220 if action is not None:
   1221     if (<Action>action)._is_left:
-> 1222         return (<Action>action)._act_(x, y)
   1223     else:
   1224         return (<Action>action)._act_(y, x)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_actions.pyx:157, in sage.structure.coerce_actions.ActedUponAction._act_ (build/cythonized/sage/structure/coerce_actions.c:8579)()
    155     <... 'sage.structure.coerce_actions.ActedUponAction'>
    156 """
--> 157 return (<Element>x)._acted_upon_(g, not self._is_left)
    158 
    159 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:949, in sage.structure.element.Element._acted_upon_ (build/cythonized/sage/structure/element.c:16495)()
    947     return None
    948 
--> 949 cpdef _acted_upon_(self, x, bint self_on_left) noexcept:
    950     """
    951     Use this method to implement ``self`` acted on by x.

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1450, in Polyhedron_base5._acted_upon_(self, actor, self_on_left)
   1448         raise ValueError("matrices should act on the left")
   1449     else:
-> 1450         return self.linear_transformation(actor)
   1451 else:
   1452     return self.dilation(actor)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1879, in Polyhedron_base5.linear_transformation(self, linear_transf, new_base_ring)
   1873     pref_rep = 'Vrep' if self.n_vertices() <= self.n_inequalities() else 'Hrep'
   1875     return new_parent.element_class(new_parent, [new_vertices, new_rays, new_lines],
   1876                                     [new_inequalities, new_equations],
   1877                                     Vrep_minimal=True, Hrep_minimal=True, pref_rep=pref_rep)
-> 1879 return new_parent.element_class(new_parent, [tuple(new_vertices), tuple(new_rays), tuple(new_lines)], None)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:174, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    171     lines = tuple(lines)
    173 if vertices or rays or lines:
--> 174     self._init_from_Vrepresentation(vertices, rays, lines, **kwds)
    175 else:
    176     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:99, in Polyhedron_ppl._init_from_Vrepresentation(self, vertices, rays, lines, minimize, verbose)
     72 def _init_from_Vrepresentation(self, vertices, rays, lines, minimize=True, verbose=False):
     73     """
     74     Construct polyhedron from V-representation data.
     75 
   (...)
     97         sage: Polyhedron_ppl._init_from_Vrepresentation(p, [], [], [])
     98     """
---> 99     gs = self._convert_generators_to_ppl(vertices, rays, lines)
    100     if gs.empty():
    101         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'empty')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:473, in Polyhedron_ppl._convert_generators_to_ppl(vertices, rays, lines)
    471     vertices = []
    472 for v in vertices:
--> 473     gs.insert(Polyhedron_ppl._convert_generator_to_ppl(v, VERTEX))
    474 if rays is None:
    475     rays = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:442, in Polyhedron_ppl._convert_generator_to_ppl(v, typ)
    440 d = LCM_list([denominator(v_i) for v_i in v])
    441 if d.is_one():
--> 442     return ob(Linear_Expression(v, 0))
    443 else:
    444     dv = [ d*v_i for v_i in v ]

File ppl/linear_algebra.pyx:654, in ppl.linear_algebra.Linear_Expression.__init__()

File ppl/linear_algebra.pyx:49, in ppl.linear_algebra.PPL_Coefficient_from_pyobject()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:1107, in sage.structure.element.Element.__richcmp__ (build/cythonized/sage/structure/element.c:18121)()
   1105         return (<Element>self)._richcmp_(other, op)
   1106     else:
-> 1107         return coercion_model.richcmp(self, other, op)
   1108 
   1109 cpdef _richcmp_(left, right, int op) noexcept:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:2021, in sage.structure.coerce.CoercionModel.richcmp (build/cythonized/sage/structure/coerce.c:26173)()
   2019 # Coerce to a common parent
   2020 try:
-> 2021     x, y = self.canonical_coercion(x, y)
   2022 except (TypeError, NotImplementedError):
   2023     pass

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1422, in sage.structure.coerce.CoercionModel.canonical_coercion (build/cythonized/sage/structure/coerce.c:18956)()
   1420             self._record_exception()
   1421 
-> 1422     raise TypeError("no common canonical parent for objects with parents: '%s' and '%s'"%(xp, yp))
   1423 
   1424 cpdef coercion_maps(self, R, S) noexcept:

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_cone(B(A,c),lam(A,v),K(c[1:],v))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list(k+[c[0]] for k in K(c[1:],v)))
....:     print("\n",v)
....:     print("parabolic     ",list(map(vector,P.rays())),list(map(vector,P.li
....: nes())))
....:     print("parabolic + c0",list(map(vector,Q.rays())),list(map(vector,Q.li
....: nes())))

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
parabolic      [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
parabolic      [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
parabolic      [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1]
parabolic      [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
parabolic      [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1)] []
parabolic + c0 [] []

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2]
parabolic      [(0, -2, -1, 0, 1), (0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0), (0, 0, -1, 0, 1)] []

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1]
parabolic      [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
parabolic      [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1)] []
parabolic + c0 [] []

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1]
parabolic      [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
parabolic      [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1)] []
parabolic + c0 [] []

 [1, 2, 3, 4, 1, 2, 3, 4, 1]
parabolic      [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (1, 0, 1, 1, -2)] []
parabolic + c0 [] []

 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4]
parabolic      [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []

 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3]
parabolic      [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []

 [1, 2, 3, 4, 1, 2, 3, 4, 2]
parabolic      [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []

 [1, 2, 3, 4, 1, 2, 3, 4]
parabolic      [(1, 0, 0, 1, -1), (0, -1, 0, 0, 0)] []
parabolic + c0 [] []

 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
parabolic      [(0, -1, 0, 1, 0), (0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0), (0, 1, 0, 1, 0)] []

 [1, 2, 3, 4, 1, 2, 3, 1, 2]
parabolic      [(0, -1, 0, 0, 0), (0, -2, -1, 1, 1), (1, 0, 0, 1, -1), (0, -1, 0, 1, 0), (-1, -4, -1, 2, 2)] []
parabolic + c0 [] []

 [1, 2, 3, 4, 1, 2, 3, 1]
parabolic      [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (1, 0, 1, 1, -2), (0, -2, 0, 1, 0)] []
parabolic + c0 [] []

 [1, 2, 3, 4, 1, 2, 3, 2]
parabolic      [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []

 [1, 2, 3, 4, 1, 2, 3]
parabolic      [(1, 0, 0, 1, -1), (0, -1, 0, 0, 0)] []
parabolic + c0 [] []

 [1, 2, 3, 4, 1, 2, 1]
parabolic      [(0, -1, 0, 0, 0), (0, -1, 0, 1, 0), (1, 1, 1, 0, -2), (1, 0, 0, 1, -1), (0, 0, 1, 0, -1)] []
parabolic + c0 [] []

 [1, 2, 3, 4, 1, 2]
parabolic      [(0, -1, 0, 0, 0), (0, -1, 0, 1, 0), (1, 0, 0, 1, -1), (1, 1, 1, 0, -2), (0, 0, 1, 0, -1)] []
parabolic + c0 [] []

 [1, 2, 3, 4, 1, 3, 4]
parabolic      [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []

 [1, 2, 3, 4, 1, 3]
parabolic      [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []

 [1, 2, 3, 4, 1]
parabolic      [(0, -1, 0, 0, 0), (0, -1, 0, 1, 0), (1, 0, 0, 1, -1)] []
parabolic + c0 [] []

 [1, 2, 3, 4, 2, 3, 4, 2, 3, 4]
parabolic      [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []

 [1, 2, 3, 4, 2, 3, 4, 2, 3]
parabolic      [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []

 [1, 2, 3, 4, 2, 3, 4, 2]
parabolic      [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []

 [1, 2, 3, 4, 2, 3, 4]
parabolic      [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1)] []
parabolic + c0 [] []

 [1, 2, 3, 4, 2, 3, 2]
parabolic      [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []

 [1, 2, 3, 4, 2, 3]
parabolic      [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1)] []
parabolic + c0 [] []

 [1, 2, 3, 4, 2]
parabolic      [(0, -1, 0, 0, 0), (0, -1, 0, 1, 0), (1, 0, 0, 1, -1), (1, 0, 1, 1, -2), (0, -1, 1, 1, -1)] []
parabolic + c0 [] []

 [1, 2, 3, 4, 3, 4]
parabolic      [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []

 [1, 2, 3, 4, 3]
parabolic      [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []

 [1, 2, 3, 4]
parabolic      [(0, -1, 0, 0, 0), (0, -1, 0, 1, 0), (1, 0, 0, 1, -1)] []
parabolic + c0 [] []

 [1, 2, 3, 1, 2, 1]
parabolic      [(0, -1, 0, 1, 0), (1, -1, 0, 3, -1), (0, -1, 0, 0, 0), (2, 1, 0, 0, -2), (1, 1, 1, 0, -2), (1, 0, 1, 2, -2)] []
parabolic + c0 [] []

 [1, 2, 3, 1, 2]
parabolic      [(1, 0, 0, 1, -1), (0, -1, 0, 0, 0), (2, 1, 0, 0, -2), (1, 1, 1, 0, -2)] []
parabolic + c0 [] []

 [1, 2, 3, 1]
parabolic      [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (2, 1, 0, 0, -2)] []
parabolic + c0 [] []

 [1, 2, 3, 2]
parabolic      [(0, -1, 0, 0, 0), (0, -1, 2, 2, -2), (2, 1, 0, 0, -2), (1, 0, 0, 1, -1), (0, -1, 1, 2, -1)] []
parabolic + c0 [] []

 [1, 2, 3]
parabolic      [(0, -1, 0, 0, 0), (2, 1, 0, 0, -2), (1, 0, 0, 1, -1)] []
parabolic + c0 [] []

 [1, 2, 4, 1]
parabolic      [(1, 0, 0, -1, -1), (0, -1, 0, 0, 0)] []
parabolic + c0 [] []

 [1, 2, 4]
parabolic      [(1, 0, 0, -1, -1), (0, -1, 0, 0, 0)] []
parabolic + c0 [] []

 [1, 2, 1]
parabolic      [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (1, 0, 0, -1, -1)] []
parabolic + c0 [] []

 [1, 2]
parabolic      [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (0, -1, 1, 1, -1), (0, -1, 1, 0, -1), (1, 0, 0, -1, -1)] []
parabolic + c0 [] []

 [1, 3, 4, 3, 4]
parabolic      [(1, 0, -1, -1, 0), (0, -1, 0, 0, 0)] []
parabolic + c0 [] []

 [1, 3, 4, 3]
parabolic      [(1, 0, -1, -1, 0), (0, -1, 0, 0, 0)] []
parabolic + c0 [] []

 [1, 3, 4]
parabolic      [(0, -1, 0, 0, 0), (1, 0, -1, -1, 0), (1, 0, -1, 0, 0), (1, 0, 0, 1, -1)] []
parabolic + c0 [] []

 [1, 3]
parabolic      [(0, -1, 0, 0, 0), (1, 0, -1, -1, 0), (1, 0, 1, 1, -2), (1, 0, 0, 1, -1)] []
parabolic + c0 [] []

 [1, 4]
parabolic      [(0, -1, 0, 0, 0), (1, 0, 0, -1, -1), (1, 0, -1, -1, 0)] []
parabolic + c0 [] []

 [1]
parabolic      [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (1, 0, 0, -1, -1), (1, 0, -1, -1, 0)] []
parabolic + c0 [] []

 [2, 3, 4, 2, 3, 4, 2, 3, 4]
parabolic      [(1, -1, -1, 0, 0), (0, -1, 0, 0, 0)] []
parabolic + c0 [] []

 [2, 3, 4, 2, 3, 4, 2, 3]
parabolic      [(1, -1, -1, 0, 0), (0, -1, 0, 0, 0)] []
parabolic + c0 [] []

 [2, 3, 4, 2, 3, 4, 2]
parabolic      [(1, -1, -1, 0, 0), (0, -1, 0, 0, 0)] []
parabolic + c0 [] []

 [2, 3, 4, 2, 3, 4]
parabolic      [(1, -1, -1, 0, 0), (0, -1, 0, 0, 0), (1, 0, 0, 1, -1)] []
parabolic + c0 [] []

 [2, 3, 4, 2, 3, 2]
parabolic      [(1, -1, -1, 0, 0), (0, -1, 0, 0, 0), (0, -2, -1, 0, 1), (2, -2, -3, 0, 1)] []
parabolic + c0 [(0, 0, -1, 0, 1)] []

 [2, 3, 4, 2, 3]
parabolic      [(1, -1, -1, 0, 0), (0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (2, -1, -2, 1, 0), (3, -3, -4, 1, 1)] []
parabolic + c0 [] []

 [2, 3, 4, 2]
parabolic      [(1, -1, -1, 1, 0), (1, -1, -1, 0, 0), (0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (1, 0, 1, 1, -2)] []
parabolic + c0 [] []

 [2, 3, 4, 3, 4]
parabolic      [(1, -1, -1, 0, 0), (0, -1, 0, 0, 0)] []
parabolic + c0 [] []

 [2, 3, 4, 3]
parabolic      [(1, -1, -1, 0, 0), (0, -1, 0, 0, 0)] []
parabolic + c0 [] []

 [2, 3, 4]
parabolic      [(1, 0, 0, 1, -1), (1, -1, -1, 0, 0), (0, -1, 0, 0, 0), (1, -1, -1, 1, 0)] []
parabolic + c0 [] []

 [2, 3, 2]
parabolic      [(0, -1, 0, 1, 0), (1, -1, -1, 1, 0), (2, -1, -1, 3, -1), (0, -1, 0, 0, 0), (1, 1, 1, 0, -2), (1, -1, -1, 0, 0)] []
parabolic + c0 [] []

 [2, 3]
parabolic      [(1, -1, -1, 0, 0), (0, -1, 0, 0, 0), (3, -3, -1, 4, -2), (1, 1, 1, 0, -2), (1, 0, 0, 1, -1)] []
parabolic + c0 [] []

 [2, 4]
parabolic      [(1, 0, 0, -1, -1), (1, -1, -1, 0, 0), (0, -1, 0, 0, 0)] []
parabolic + c0 [] []

 [2]
parabolic      [(1, -1, -1, 0, 0), (0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (1, 0, 0, -1, -1)] []
parabolic + c0 [] []

 [3, 4, 3, 4]
parabolic      [(1, 0, -1, -1, 0), (0, -1, 0, 0, 0), (1, -1, -1, 0, 0)] []
parabolic + c0 [] []

 [3, 4, 3]
parabolic      [(1, 0, -1, -1, 0), (0, -1, 0, 0, 0), (1, -1, -1, 0, 0), (1, -1, -2, -2, 1)] []
parabolic + c0 [] []

 [3, 4]
parabolic      [(1, 0, -1, 0, 0), (1, 0, -1, -1, 0), (0, -1, 0, 0, 0), (1, 0, 0, 1, -1)] []
parabolic + c0 [] []

 [3]
parabolic      [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (1, 0, -1, -1, 0), (1, 0, 1, 1, -2), (1, -1, -1, 0, 0), (2, -2, -1, 2, -1)] []
parabolic + c0 [] []

 [4]
parabolic      [(1, 0, 0, -1, -1), (0, -1, 0, 0, 0), (1, -1, -1, 0, 0), (1, 0, -1, -1, 0)] []
parabolic + c0 [] []

 []
parabolic      [(0, -1, 0, 0, 0), (1, 0, -1, -1, 0), (1, 0, 0, -1, -1), (1, 0, 0, 1, -1), (1, -1, -1, 0, 0)] []
parabolic + c0 [] []
sage: B(A,c)
[ 0  1  0  0  0]
[-1  0  1  0  0]
[ 0 -1  0  1  0]
[ 0  0 -1  0  2]
[ 0  0  0 -1  0]
sage: A=CartanMatrix(['C',5])
....: c=[4,0,1,3,2]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_cone(B(A,c),lam(A,v),K(c[1:],v))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list(k+[c[0]] for k in K(c[1:],v)))
....:     print("\n",v)
....:     print("parabolic     ",list(map(vector,P.rays())),list(map(vector,P.li
....: nes())))
....:     print("parabolic + c0",list(map(vector,Q.rays())),list(map(vector,Q.li
....: nes())))

 [0, 1, 3, 2, 0, 1, 3, 2, 0, 1]
parabolic      [(0, 0, 0, -1, 0)] []
parabolic + c0 [(0, 0, 0, 1, 0)] []

 [0, 1, 3, 2, 0, 1, 3, 2, 0]
parabolic      [(0, 0, 0, -1, 0)] []
parabolic + c0 [(0, 0, 0, 1, 0)] []

 [0, 1, 3, 2, 0, 1, 3, 2]
parabolic      [(0, 1, -1, 0, 1), (0, 0, 0, -1, 0)] []
parabolic + c0 [] []

 [0, 1, 3, 2, 0, 1, 3, 0]
parabolic      [(0, 0, 0, -1, 0)] []
parabolic + c0 [(0, 0, 0, 1, 0)] []

 [0, 1, 3, 2, 0, 1, 3]
parabolic      [(0, 0, 0, -1, 0), (0, 1, -1, 0, 1)] []
parabolic + c0 [] []
^Z
[1]+  Stopped                 /Applications/SageMath-10-2.app/Contents/Frameworks/Sage.framework/Versions/Current/venv/bin/sage
MA-C02K804RDR53:~ reading$ fg
/Applications/SageMath-10-2.app/Contents/Frameworks/Sage.framework/Versions/Current/venv/bin/sage

 [0, 1, 3, 2, 0, 1, 0]
parabolic      [(0, 0, 0, -1, 0)] []
parabolic + c0 [(0, 0, 0, 1, 0)] []

 [0, 1, 3, 2, 0, 1]
parabolic      [(0, 0, 0, -1, 0), (0, 1, -1, 0, 1)] []
parabolic + c0 [] []

 [0, 1, 3, 2, 0, 3]
parabolic      [(0, 0, 0, -1, 0), (0, 1, -1, 0, 1), (1, 1, -2, 0, 1)] []
parabolic + c0 [] []

 [0, 1, 3, 2, 0]
parabolic      [(0, 0, 0, -1, 0), (0, 1, 0, -1, 0), (0, 1, -1, 0, 1), (1, 1, -2, 0, 1)] []
parabolic + c0 [] []

 [0, 1, 3, 2, 1, 3, 2]
parabolic      [(0, 0, 0, -1, 0)] []
parabolic + c0 [(0, 0, 0, 1, 0)] []

 [0, 1, 3, 2, 1, 3]
parabolic      [(0, 0, 0, -1, 0)] []
parabolic + c0 [(0, 0, 0, 1, 0)] []

 [0, 1, 3, 2, 1]
parabolic      [(0, 0, 0, -1, 0)] []
parabolic + c0 [(0, 0, 0, 1, 0)] []

 [0, 1, 3, 2, 3]
parabolic      [(0, 1, -1, 0, 1), (0, 0, 0, -1, 0)] []
parabolic + c0 [] []

 [0, 1, 3, 2]
parabolic      [(0, 0, 0, -1, 0), (0, 1, -1, 0, 1)] []
parabolic + c0 [] []

 [0, 1, 3, 0]
parabolic      [(0, 1, -1, 0, 1), (0, 0, 0, -1, 0), (1, 1, -2, 0, 1), (1, 0, -2, 0, 1)] []
parabolic + c0 [] []

 [0, 1, 3]
parabolic      [(0, 0, 0, -1, 0), (0, 1, -1, 0, 1), (1, 0, -2, 0, 1)] []
parabolic + c0 [] []

 [0, 1, 2, 0, 1, 0]
parabolic      [(0, 0, 0, -1, 0), (0, 0, -1, -1, 1)] []
parabolic + c0 [] []

 [0, 1, 2, 0, 1]
parabolic      [(0, 0, -1, -1, 1), (0, 1, -1, 0, 1), (0, 0, 0, -1, 0), (-1, 1, -1, -2, 2)] []
parabolic + c0 [] []

 [0, 1, 2, 0]
parabolic      [(0, 0, -1, -1, 1), (0, 1, -1, 0, 1), (0, 0, 0, -1, 0), (1, 1, -2, 0, 1)] []
parabolic + c0 [] []

 [0, 1, 2, 1]
parabolic      [(0, 0, 0, -1, 0), (0, 0, -1, -1, 1)] []
parabolic + c0 [] []

 [0, 1, 2]
parabolic      [(0, 0, 0, -1, 0), (0, 1, -1, 0, 1), (0, 0, -1, -1, 1)] []
parabolic + c0 [] []

 [0, 1, 0]
parabolic      [(1, 0, -2, 0, 1), (0, 1, -1, 0, 1), (0, 0, 0, -1, 0), (1, 1, -2, 0, 1), (0, 0, -1, -1, 1)] []
parabolic + c0 [] []

 [0, 1]
parabolic      [(0, 1, -1, 0, 1), (0, 0, 0, -1, 0), (0, 0, -1, -1, 1), (1, 0, -2, 0, 1)] []
parabolic + c0 [] []

 [0, 3, 2, 3]
parabolic      [(0, 0, 0, -1, 0)] []
parabolic + c0 [(0, 0, 0, 1, 0)] []

 [0, 3, 2]
parabolic      [(0, 0, 0, -1, 0)] []
parabolic + c0 [(0, 0, 0, 1, 0)] []

 [0, 3]
parabolic      [(0, 0, 0, -1, 0), (0, 1, -1, 0, 1)] []
parabolic + c0 [] []

 [0, 2]
parabolic      [(0, 0, 0, -1, 0), (0, 0, -1, -1, 1)] []
parabolic + c0 [] []

 [0]
parabolic      [(0, 1, -1, 0, 1), (0, 0, 0, -1, 0), (0, 0, -1, -1, 1)] []
parabolic + c0 [] []

 [1, 3, 2, 1, 3, 2]
parabolic      [(0, 0, 0, -1, 0)] []
parabolic + c0 [(0, 0, 0, 1, 0)] []

 [1, 3, 2, 1, 3]
parabolic      [(0, 0, 0, -1, 0)] []
parabolic + c0 [(0, 0, 0, 1, 0)] []

 [1, 3, 2, 1]
parabolic      [(0, 0, 0, -1, 0)] []
parabolic + c0 [(0, 0, 0, 1, 0)] []

 [1, 3, 2, 3]
parabolic      [(0, 1, -1, 0, 1), (0, 0, 0, -1, 0)] []
parabolic + c0 [] []

 [1, 3, 2]
parabolic      [(0, 0, 0, -1, 0), (0, 1, -1, 0, 1)] []
parabolic + c0 [] []

 [1, 3]
parabolic      [(0, 0, 0, -1, 0), (1, 1, -2, 0, 1), (0, 1, -1, 0, 1)] []
parabolic + c0 [] []

 [1, 2, 1]
parabolic      [(0, 0, 0, -1, 0), (0, 0, -1, -1, 1)] []
parabolic + c0 [] []

 [1, 2]
parabolic      [(0, 1, -1, 0, 1), (0, 0, -1, -1, 1), (0, 0, 0, -1, 0)] []
parabolic + c0 [] []

 [1]
parabolic      [(0, 1, -1, 0, 1), (0, 0, 0, -1, 0), (1, 1, -2, 0, 1), (0, 0, -1, -1, 1)] []
parabolic + c0 [] []

 [3, 2, 3]
parabolic      [(0, 0, 0, -1, 0)] []
parabolic + c0 [(0, 0, 0, 1, 0)] []

 [3, 2]
parabolic      [(0, 0, 0, -1, 0)] []
parabolic + c0 [(0, 0, 0, 1, 0)] []

 [3]
parabolic      [(0, 0, 0, -1, 0), (0, 1, -1, 0, 1)] []
parabolic + c0 [] []

 [2]
parabolic      [(0, 0, 0, -1, 0), (0, 0, -1, -1, 1)] []
parabolic + c0 [] []

 []
parabolic      [(0, 1, -1, 0, 1), (0, 0, 0, -1, 0), (0, 0, -1, -1, 1)] []
parabolic + c0 [] []
sage: A=CartanMatrix(['D',4])
....: c=[0,1,3,2]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_cone(B(A,c),lam(A,v),K(c[1:],v))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list(k+[c[0]] for k in K(c[1:],v)))
....:     print("\n",v)
....:     print("parabolic     ",list(map(vector,P.rays())),list(map(vector,P.li
....: nes())))
....:     print("parabolic + c0",list(map(vector,Q.rays())),list(map(vector,Q.li
....: nes())))

 [1, 3, 2, 1, 3, 2]
parabolic      [(0, -1, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0)] []

 [1, 3, 2, 1, 3]
parabolic      [(0, -1, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0)] []

 [1, 3, 2, 1, 2]
parabolic      [(0, -1, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0)] []

 [1, 3, 2, 1]
parabolic      [(0, -1, 0, 0), (-1, -2, 1, 1)] []
parabolic + c0 [(0, 1, 0, 0), (-1, -1, 1, 1)] []

 [1, 3, 2]
parabolic      [(1, 1, -1, -1), (0, -1, 0, 0)] []
parabolic + c0 [] []

 [1, 3, 1]
parabolic      [(1, 0, -1, -1), (0, -1, 0, 0)] []
parabolic + c0 [] []

 [1, 3]
parabolic      [(1, 1, -1, -1), (0, -1, 0, 0)] []
parabolic + c0 [] []

 [1, 2, 1]
parabolic      [(1, 0, -1, -1), (0, -1, 0, 0)] []
parabolic + c0 [] []

 [1, 2]
parabolic      [(1, 1, -1, -1), (0, -1, 0, 0)] []
parabolic + c0 [] []

 [1]
parabolic      [(0, -1, 0, 0), (1, 2, -1, -1)] []
parabolic + c0 [] []

 [3, 2]
parabolic      [(1, -1, -1, -1), (0, -1, 0, 0)] []
parabolic + c0 [] []

 [3]
parabolic      [(1, 0, -1, -1), (0, -1, 0, 0)] []
parabolic + c0 [] []

 [2]
parabolic      [(1, 0, -1, -1), (0, -1, 0, 0)] []
parabolic + c0 [] []

 []
parabolic      [(0, -1, 0, 0), (1, 1, -1, -1)] []
parabolic + c0 [] []
sage: B(A,c)
[ 0  1  0  0]
[-1  0  1  1]
[ 0 -1  0  0]
[ 0 -1  0  0]
sage: A=CartanMatrix(['D',4])
....: c=[2,1,0,3]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_cone(B(A,c),lam(A,v),K(c[1:],v))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list(k+[c[0]] for k in K(c[1:],v)))
....:     print("\n",v)
....:     print("parabolic     ",list(map(vector,P.rays())),list(map(vector,P.li
....: nes())))
....:     print("parabolic + c0",list(map(vector,Q.rays())),list(map(vector,Q.li
....: nes())))

 [1, 0, 3, 1, 0, 3]
parabolic      [(0, -1, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0)] []

 [1, 0, 3, 1, 0]
parabolic      [(0, -1, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0)] []

 [1, 0, 3, 1, 3]
parabolic      [(0, -1, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0)] []

 [1, 0, 3, 1]
parabolic      [(1, -2, -1, 1), (0, -1, 0, 0)] []
parabolic + c0 [(1, -1, -1, 1), (0, 1, 0, 0)] []

 [1, 0, 3]
parabolic      [(-1, 1, 1, -1), (0, -1, 0, 0)] []
parabolic + c0 [] []

 [1, 0, 1]
parabolic      [(0, -1, 0, 0), (-1, 0, 1, -1)] []
parabolic + c0 [] []

 [1, 0]
parabolic      [(-1, 1, 1, -1), (0, -1, 0, 0)] []
parabolic + c0 [] []

 [1, 3, 1]
parabolic      [(0, -1, 0, 0), (-1, 0, 1, -1)] []
parabolic + c0 [] []

 [1, 3]
parabolic      [(-1, 1, 1, -1), (0, -1, 0, 0)] []
parabolic + c0 [] []

 [1]
parabolic      [(-1, 2, 1, -1), (0, -1, 0, 0)] []
parabolic + c0 [] []

 [0, 3]
parabolic      [(0, -1, 0, 0), (-1, -1, 1, -1)] []
parabolic + c0 [] []

 [0]
parabolic      [(0, -1, 0, 0), (-1, 0, 1, -1)] []
parabolic + c0 [] []

 [3]
parabolic      [(0, -1, 0, 0), (-1, 0, 1, -1)] []
parabolic + c0 [] []

 []
parabolic      [(-1, 1, 1, -1), (0, -1, 0, 0)] []
parabolic + c0 [] []
sage: B(A,c)
[ 0 -1  0  0]
[ 1  0 -1  1]
[ 0  1  0  0]
[ 0 -1  0  0]
sage: A=CartanMatrix(['A',2])
....: c=[0,1]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_cone(B(A,c),lam(A,v),K(c[1:],v))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list(k+[c[0]] for k in K(c[1:],v)))
....:     print("\n",v)
....:     print("parabolic     ",list(map(vector,P.rays())),list(map(vector,P.li
....: nes())))
....:     print("parabolic + c0",list(map(vector,Q.rays())),list(map(vector,Q.li
....: nes())))

 [1]
parabolic      [(0, -1)] []
parabolic + c0 [(0, 1)] []

 []
parabolic      [(1, -1), (0, -1)] []
parabolic + c0 [] []
sage: A=CartanMatrix(['A',2])
....: c=[0,1]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_cone(B(A,c),lam(A,v),list(sortables(A,c[1:]))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list(k+[c[0]] for k in K(c[1:],v)))
....:     print("\n",v)
....:     print("parabolic     ",list(map(vector,P.rays())),list(map(vector,P.li
....: nes())))
....:     print("parabolic + c0",list(map(vector,Q.rays())),list(map(vector,Q.li
....: nes())))
  Cell In [773], line 4
    P=p_lambda_cone(B(A,c),lam(A,v),list(sortables(A,c[Integer(1):]))
                   ^
SyntaxError: '(' was never closed

sage: A=CartanMatrix(['A',2])
....: c=[0,1]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_cone(B(A,c),lam(A,v),list(sortables(A,c[1:])))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list(k+[c[0]] for k in K(c[1:],v)))
....:     print("\n",v)
....:     print("parabolic     ",list(map(vector,P.rays())),list(map(vector,P.li
....: nes())))
....:     print("parabolic + c0",list(map(vector,Q.rays())),list(map(vector,Q.li
....: nes())))

 [1]
parabolic      [(0, -1)] []
parabolic + c0 [(0, 1)] []

 []
parabolic      [(1, -1), (0, -1)] []
parabolic + c0 [] []
sage: A=CartanMatrix(['D',4])
....: c=[2,1,0,3]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_cone(B(A,c),lam(A,v),list(sortables(A,c[1:])))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list(k+[c[0]] for k in K(c[1:],v)))
....:     print("\n",v)
....:     print("parabolic     ",list(map(vector,P.rays())),list(map(vector,P.li
....: nes())))
....:     print("parabolic + c0",list(map(vector,Q.rays())),list(map(vector,Q.li
....: nes())))

 [1, 0, 3, 1, 0, 3]
parabolic      [(0, -1, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0)] []

 [1, 0, 3, 1, 0]
parabolic      [(0, -1, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0)] []

 [1, 0, 3, 1, 3]
parabolic      [(0, -1, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0)] []

 [1, 0, 3, 1]
parabolic      [(0, -1, 0, 0)] []
parabolic + c0 [(1, -1, -1, 1), (0, 1, 0, 0)] []

 [1, 0, 3]
parabolic      [(-1, 1, 1, -1), (0, -1, 0, 0)] []
parabolic + c0 [] []

 [1, 0, 1]
parabolic      [(0, -1, 0, 0), (-1, 0, 1, -1)] []
parabolic + c0 [] []

 [1, 0]
parabolic      [(-1, 1, 1, -1), (0, -1, 0, 0)] []
parabolic + c0 [] []

 [1, 3, 1]
parabolic      [(0, -1, 0, 0), (-1, 0, 1, -1)] []
parabolic + c0 [] []

 [1, 3]
parabolic      [(-1, 1, 1, -1), (0, -1, 0, 0)] []
parabolic + c0 [] []

 [1]
parabolic      [(-1, 1, 1, -1), (0, -1, 0, 0)] []
parabolic + c0 [] []

 [0, 3]
parabolic      [(0, -1, 0, 0), (-1, -1, 1, -1)] []
parabolic + c0 [] []

 [0]
parabolic      [(0, -1, 0, 0), (-1, 0, 1, -1)] []
parabolic + c0 [] []

 [3]
parabolic      [(0, -1, 0, 0), (-1, 0, 1, -1)] []
parabolic + c0 [] []

 []
parabolic      [(-1, 1, 1, -1), (0, -1, 0, 0)] []
parabolic + c0 [] []
sage: A=CartanMatrix(['D',4])
....: c=[2,1,0,3]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_cone(B(A,c),lam(A,v),K(c[1:],v))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list(k+[c[0]] for k in K(c[1:],v)))
....:     print("\n",v)
....:     print("parabolic     ",list(map(vector,P.rays())),list(map(vector,P.li
....: nes())))
....:     print("parabolic + c0",list(map(vector,Q.rays())),list(map(vector,Q.li
....: nes())))
....: 

 [1, 0, 3, 1, 0, 3]
parabolic      [(0, -1, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0)] []

 [1, 0, 3, 1, 0]
parabolic      [(0, -1, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0)] []

 [1, 0, 3, 1, 3]
parabolic      [(0, -1, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0)] []

 [1, 0, 3, 1]
parabolic      [(1, -2, -1, 1), (0, -1, 0, 0)] []
parabolic + c0 [(1, -1, -1, 1), (0, 1, 0, 0)] []

 [1, 0, 3]
parabolic      [(-1, 1, 1, -1), (0, -1, 0, 0)] []
parabolic + c0 [] []

 [1, 0, 1]
parabolic      [(0, -1, 0, 0), (-1, 0, 1, -1)] []
parabolic + c0 [] []

 [1, 0]
parabolic      [(-1, 1, 1, -1), (0, -1, 0, 0)] []
parabolic + c0 [] []

 [1, 3, 1]
parabolic      [(0, -1, 0, 0), (-1, 0, 1, -1)] []
parabolic + c0 [] []

 [1, 3]
parabolic      [(-1, 1, 1, -1), (0, -1, 0, 0)] []
parabolic + c0 [] []

 [1]
parabolic      [(-1, 2, 1, -1), (0, -1, 0, 0)] []
parabolic + c0 [] []

 [0, 3]
parabolic      [(0, -1, 0, 0), (-1, -1, 1, -1)] []
parabolic + c0 [] []

 [0]
parabolic      [(0, -1, 0, 0), (-1, 0, 1, -1)] []
parabolic + c0 [] []

 [3]
parabolic      [(0, -1, 0, 0), (-1, 0, 1, -1)] []
parabolic + c0 [] []

 []
parabolic      [(-1, 1, 1, -1), (0, -1, 0, 0)] []
parabolic + c0 [] []
sage: B(A,c)
[ 0 -1  0  0]
[ 1  0 -1  1]
[ 0  1  0  0]
[ 0 -1  0  0]
sage: A=CartanMatrix(['D',4])
....: c=[2,1,0,3]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_cone(B(A,c),lam(A,v),list(sortables(A,c[1:])))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list(k+[c[0]] for k in K(c[1:],v)))
....:     print("\n",v)
....:     print("parabolic     ",list(map(vector,P.rays())),list(map(vector,P.li
....: nes())))
....:     print("parabolic + c0",list(map(vector,Q.rays())),list(map(vector,Q.li
....: nes())))
....: 

 [1, 0, 3, 1, 0, 3]
parabolic      [(0, -1, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0)] []

 [1, 0, 3, 1, 0]
parabolic      [(0, -1, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0)] []

 [1, 0, 3, 1, 3]
parabolic      [(0, -1, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0)] []

 [1, 0, 3, 1]
parabolic      [(0, -1, 0, 0)] []
parabolic + c0 [(1, -1, -1, 1), (0, 1, 0, 0)] []

 [1, 0, 3]
parabolic      [(-1, 1, 1, -1), (0, -1, 0, 0)] []
parabolic + c0 [] []

 [1, 0, 1]
parabolic      [(0, -1, 0, 0), (-1, 0, 1, -1)] []
parabolic + c0 [] []

 [1, 0]
parabolic      [(-1, 1, 1, -1), (0, -1, 0, 0)] []
parabolic + c0 [] []

 [1, 3, 1]
parabolic      [(0, -1, 0, 0), (-1, 0, 1, -1)] []
parabolic + c0 [] []

 [1, 3]
parabolic      [(-1, 1, 1, -1), (0, -1, 0, 0)] []
parabolic + c0 [] []

 [1]
parabolic      [(-1, 1, 1, -1), (0, -1, 0, 0)] []
parabolic + c0 [] []

 [0, 3]
parabolic      [(0, -1, 0, 0), (-1, -1, 1, -1)] []
parabolic + c0 [] []

 [0]
parabolic      [(0, -1, 0, 0), (-1, 0, 1, -1)] []
parabolic + c0 [] []

 [3]
parabolic      [(0, -1, 0, 0), (-1, 0, 1, -1)] []
parabolic + c0 [] []

 []
parabolic      [(-1, 1, 1, -1), (0, -1, 0, 0)] []
parabolic + c0 [] []
sage: B(A,c)
[ 0 -1  0  0]
[ 1  0 -1  1]
[ 0  1  0  0]
[ 0 -1  0  0]
### reloading attached file domination4.py modified at 19:00:21 ###
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kcrazy(c,v))
....:     print(num,v,P.dimension())
....: 
1 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
2 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 3
3 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 1
4 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1] 2
5 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 3
6 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2] 3
7 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1] 3
8 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 3
9 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1] 2
10 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 3
11 [1, 2, 3, 4, 1, 2, 3, 4, 1] 3
12 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4] 0
13 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3] 2
14 [1, 2, 3, 4, 1, 2, 3, 4, 2] 1
15 [1, 2, 3, 4, 1, 2, 3, 4] 2
16 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 3
17 [1, 2, 3, 4, 1, 2, 3, 1, 2] 3
18 [1, 2, 3, 4, 1, 2, 3, 1] 3
19 [1, 2, 3, 4, 1, 2, 3, 2] 2
20 [1, 2, 3, 4, 1, 2, 3] 2
21 [1, 2, 3, 4, 1, 2, 1] 3
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [780], line 6
      4 for v in sortables(A,c[Integer(1):]):
      5     num+=Integer(1)
----> 6     P=p_lambda_int(B(A,c),lam(A,v),Kcrazy(c,v))
      7     print(num,v,P.dimension())

File ~/git/affine_dominance/software/domination4.py:127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_faster(B, la, seqs[0])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_faster(B, la, s))
    128     if P.dimension()==0:
    129         break

File ~/git/affine_dominance/software/domination4.py:159, in p_lambda_faster(B, la, seq)
    155         P=Ep*Pp
    156     else:
    157         #print("Pp:   ",Pp,Pp.vertices(),Pp.rays(),Pp.lines(),"\n")
    158         #print("Pm:   ",Pm,Pm.vertices(),Pm.rays(),Pm.lines(),"\n\n")
--> 159         P=(Ep*Pp).convex_hull(Em*Pm)
    160     B.mutate(k)
    161 return P

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1312, in Polyhedron_base5.convex_hull(self, other)
   1310 hull_rays = self.rays() + other.rays()
   1311 hull_lines = self.lines() + other.lines()
-> 1312 return self.parent().element_class(self.parent(), [hull_vertices, hull_rays, hull_lines], None)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:70, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
---> 70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:195, in Polyhedron_ppl.set_immutable(self)
    193         raise e
    194 if not hasattr(self, '_Hrepresentation'):
--> 195     self._init_Hrepresentation_from_ppl(True)
    196 self._is_mutable = False

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:344, in Polyhedron_ppl._init_Hrepresentation_from_ppl(self, minimize)
    342 for c in cs:
    343     if c.is_inequality():
--> 344         parent._make_Inequality(self, (c.inhomogeneous_term(),) + c.coefficients())
    345     elif c.is_equality():
    346         parent._make_Equation(self, (c.inhomogeneous_term(),) + c.coefficients())

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:1069, in Polyhedra_base._make_Inequality(self, polyhedron, data)
   1067 except IndexError:
   1068     obj = Inequality(self)
-> 1069 obj._set_data(polyhedron, data)
   1070 return obj

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/representation.py:439, in Hrepresentation._set_data(self, polyhedron, data)
    436 if len(data) != self._vector.degree():
    437     raise ValueError('H-representation data requires a list of length ambient_dim+1')
--> 439 self._vector[:] = data
    440 self._A[:] = data[1:]
    441 self._b = self._base_ring(data[0])

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/modules/free_module_element.pyx:1893, in sage.modules.free_module_element.FreeModuleElement.__setitem__ (build/cythonized/sage/modules/free_module_element.c:20047)()
   1891 if isinstance(i, slice):
   1892     PySlice_GetIndicesEx(i, d, &start, &stop, &step, &slicelength)
-> 1893     values = [R(x) for x in value]
   1894     if len(values) != slicelength:
   1895         raise IndexError("slice assignment would change dimension")

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/parent.pyx:901, in sage.structure.parent.Parent.__call__ (build/cythonized/sage/structure/parent.c:12658)()
    899 if mor is not None:
    900     if no_extra_args:
--> 901         return mor._call_(x)
    902     else:
    903         return mor._call_with_args(x, args, kwds)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:158, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_ (build/cythonized/sage/structure/coerce_maps.c:6834)()
    156 cdef Parent C = self._codomain
    157 try:
--> 158     return C._element_constructor(x)
    159 except Exception:
    160     if print_warnings:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/rings/rational.pyx:536, in sage.rings.rational.Rational.__init__ (build/cythonized/sage/rings/rational.cpp:14305)()
    534     """
    535     if x is not None:
--> 536         self.__set_value(x, base)
    537 
    538 def __reduce__(self):

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/rings/rational.pyx:670, in sage.rings.rational.Rational._Rational__set_value (build/cythonized/sage/rings/rational.cpp:16246)()
    668         raise TypeError("unable to convert {!r} to a rational".format(x))
    669 
--> 670 elif isinstance(x, fractions.Fraction):
    671     mpz_set(mpq_numref(self.value), (<integer.Integer> integer.Integer(x.numerator)).value)
    672     mpz_set(mpq_denref(self.value), (<integer.Integer> integer.Integer(x.denominator)).value)

File <frozen abc>:117, in __instancecheck__(cls, instance)

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['D',4])
....: c=[2,1,0,3]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_cone(B(A,c),lam(A,v),list(sortables(A,c[1:])))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list(k+[c[0]] for k in K(c[1:],v)))
....:     print("\n",v)
....:     print("parabolic     ",list(map(vector,P.rays())),list(map(vector,P.li
....: nes())))
....:     print("parabolic + c0",list(map(vector,Q.rays())),list(map(vector,Q.li
....: nes())))
....: 

 [1, 0, 3, 1, 0, 3]
parabolic      [(0, -1, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0)] []

 [1, 0, 3, 1, 0]
parabolic      [(0, -1, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0)] []

 [1, 0, 3, 1, 3]
parabolic      [(0, -1, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0)] []

 [1, 0, 3, 1]
parabolic      [(0, -1, 0, 0)] []
parabolic + c0 [(1, -1, -1, 1), (0, 1, 0, 0)] []

 [1, 0, 3]
parabolic      [(-1, 1, 1, -1), (0, -1, 0, 0)] []
parabolic + c0 [] []

 [1, 0, 1]
parabolic      [(0, -1, 0, 0), (-1, 0, 1, -1)] []
parabolic + c0 [] []

 [1, 0]
parabolic      [(-1, 1, 1, -1), (0, -1, 0, 0)] []
parabolic + c0 [] []

 [1, 3, 1]
parabolic      [(0, -1, 0, 0), (-1, 0, 1, -1)] []
parabolic + c0 [] []

 [1, 3]
parabolic      [(-1, 1, 1, -1), (0, -1, 0, 0)] []
parabolic + c0 [] []

 [1]
parabolic      [(-1, 1, 1, -1), (0, -1, 0, 0)] []
parabolic + c0 [] []

 [0, 3]
parabolic      [(0, -1, 0, 0), (-1, -1, 1, -1)] []
parabolic + c0 [] []

 [0]
parabolic      [(0, -1, 0, 0), (-1, 0, 1, -1)] []
parabolic + c0 [] []

 [3]
parabolic      [(0, -1, 0, 0), (-1, 0, 1, -1)] []
parabolic + c0 [] []

 []
parabolic      [(-1, 1, 1, -1), (0, -1, 0, 0)] []
parabolic + c0 [] []
### reloading attached file domination4.py modified at 19:02:11 ###
sage: A=CartanMatrix(['D',4])
....: c=[2,1,0,3]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_cone(B(A,c),lam(A,v),list(sortables(A,c[1:])))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list(k+[c[0]] for k in K(c[1:],v)))
....:     print("\n",v)
....:     print("parabolic     ",list(map(vector,P.rays())),list(map(vector,P.li
....: nes())))
....:     print("parabolic + c0",list(map(vector,Q.rays())),list(map(vector,Q.li
....: nes())))
....: 

 [1, 0, 3, 1, 0, 3]
parabolic      [(0, -1, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0)] []

 [1, 0, 3, 1, 0]
parabolic      [(0, -1, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0)] []

 [1, 0, 3, 1, 3]
parabolic      [(0, -1, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0)] []

 [1, 0, 3, 1]
parabolic      [(0, -1, 0, 0)] []
parabolic + c0 [(1, -1, -1, 1), (0, 1, 0, 0)] []

 [1, 0, 3]
parabolic      [(-1, 1, 1, -1), (0, -1, 0, 0)] []
parabolic + c0 [] []

 [1, 0, 1]
parabolic      [(0, -1, 0, 0), (-1, 0, 1, -1)] []
parabolic + c0 [] []

 [1, 0]
parabolic      [(-1, 1, 1, -1), (0, -1, 0, 0)] []
parabolic + c0 [] []

 [1, 3, 1]
parabolic      [(0, -1, 0, 0), (-1, 0, 1, -1)] []
parabolic + c0 [] []

 [1, 3]
parabolic      [(-1, 1, 1, -1), (0, -1, 0, 0)] []
parabolic + c0 [] []

 [1]
parabolic      [(-1, 1, 1, -1), (0, -1, 0, 0)] []
parabolic + c0 [] []

 [0, 3]
parabolic      [(0, -1, 0, 0), (-1, -1, 1, -1)] []
parabolic + c0 [] []

 [0]
parabolic      [(0, -1, 0, 0), (-1, 0, 1, -1)] []
parabolic + c0 [] []

 [3]
parabolic      [(0, -1, 0, 0), (-1, 0, 1, -1)] []
parabolic + c0 [] []

 []
parabolic      [(-1, 1, 1, -1), (0, -1, 0, 0)] []
parabolic + c0 [] []
sage: A=CartanMatrix(['D',4])
....: c=[2,1,0,3]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_cone(B(A,c),lam(A,v),K(c[1:],v))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list(k+[c[0]] for k in K(c[1:],v)))
....:     print("\n",v)
....:     print("parabolic     ",list(map(vector,P.rays())),list(map(vector,P.li
....: nes())))
....:     print("parabolic + c0",list(map(vector,Q.rays())),list(map(vector,Q.li
....: nes())))
....: 

 [1, 0, 3, 1, 0, 3]
parabolic      [(0, -1, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0)] []

 [1, 0, 3, 1, 0]
parabolic      [(0, -1, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0)] []

 [1, 0, 3, 1, 3]
parabolic      [(0, -1, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0)] []

 [1, 0, 3, 1]
parabolic      [(1, -2, -1, 1), (0, -1, 0, 0)] []
parabolic + c0 [(1, -1, -1, 1), (0, 1, 0, 0)] []

 [1, 0, 3]
parabolic      [(-1, 1, 1, -1), (0, -1, 0, 0)] []
parabolic + c0 [] []

 [1, 0, 1]
parabolic      [(0, -1, 0, 0), (-1, 0, 1, -1)] []
parabolic + c0 [] []

 [1, 0]
parabolic      [(-1, 1, 1, -1), (0, -1, 0, 0)] []
parabolic + c0 [] []

 [1, 3, 1]
parabolic      [(0, -1, 0, 0), (-1, 0, 1, -1)] []
parabolic + c0 [] []

 [1, 3]
parabolic      [(-1, 1, 1, -1), (0, -1, 0, 0)] []
parabolic + c0 [] []

 [1]
parabolic      [(-1, 2, 1, -1), (0, -1, 0, 0)] []
parabolic + c0 [] []

 [0, 3]
parabolic      [(0, -1, 0, 0), (-1, -1, 1, -1)] []
parabolic + c0 [] []

 [0]
parabolic      [(0, -1, 0, 0), (-1, 0, 1, -1)] []
parabolic + c0 [] []

 [3]
parabolic      [(0, -1, 0, 0), (-1, 0, 1, -1)] []
parabolic + c0 [] []

 []
parabolic      [(-1, 1, 1, -1), (0, -1, 0, 0)] []
parabolic + c0 [] []
sage: A=CartanMatrix(['D',4])
....: c=[2,1,0,3]
....: for v in sortables(A,c[1:]):
....:     print("\n",v)
....:     for k in K(c[1:],v):
....:         print(k,p_lambda_cone(B(A,c),lam(A,v),[k,k+[c[0]]))
....: 
....: 
....: 
....: 
....: 
  Cell In [784], line 6
    print(k,p_lambda_cone(B(A,c),lam(A,v),[k,k+[c[Integer(0)]]))
                                                              ^
SyntaxError: closing parenthesis ')' does not match opening parenthesis '['

sage: A=CartanMatrix(['D',4])
....: c=[2,1,0,3]
....: for v in sortables(A,c[1:]):
....:     print("\n",v)
....:     for k in K(c[1:],v):
....:         print(k,p_lambda_cone(B(A,c),lam(A,v),[k,k+[c[0]]]))
....: 

 [1, 0, 3, 1, 0, 3]
[1, 0, 3, 1, 0, 3] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays
[1, 0, 3, 1, 0] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex, 1 ray, 1 line
[1, 0, 3, 1, 0, 3, 0] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex, 1 ray, 1 line
[1, 0, 3, 1] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays
[1, 0, 3, 1, 0, 3, 1] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays
[1, 0, 3, 1, 0, 1] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 lines
[1, 0, 3, 1, 0, 3, 0, 1] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 lines
[1, 0, 3] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex, 1 ray, 1 line

 [1, 0, 3, 1, 0]
[1, 0, 3, 1, 0] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex, 1 ray, 1 line
[1, 0, 3, 1] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays
[1, 0, 3, 1, 0, 1] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 lines
[1, 0, 3] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex, 1 ray, 1 line
[1, 0, 3, 1, 0, 3] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays
[1, 0, 3, 1, 3] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex, 1 ray, 1 line
[1, 0, 3, 1, 0, 1, 3] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex, 1 ray, 1 line
[1, 0] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 lines

 [1, 0, 3, 1, 3]
[1, 0, 3, 1, 3] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex, 1 ray, 1 line
[1, 0, 3, 1] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays
[1, 0, 3, 1, 3, 1] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 lines
[1, 0, 3] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex, 1 ray, 1 line
[1, 0, 3, 1, 3, 0] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays
[1, 0, 3, 1, 0] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex, 1 ray, 1 line
[1, 0, 3, 1, 3, 1, 0] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex, 1 ray, 1 line
[1, 0, 3, 0] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 lines

 [1, 0, 3, 1]
[1, 0, 3, 1] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays
[1, 0, 3] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex, 1 ray, 1 line
[1, 0, 3, 1, 3] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex, 1 ray, 1 line
[1, 0] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 lines
[1, 0, 3, 1, 0] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex, 1 ray, 1 line
[1, 0, 3, 0] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 lines
[1, 0, 3, 1, 3, 0] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays
[1] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex, 1 ray, 1 line

 [1, 0, 3]
[1, 0, 3] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex, 1 ray, 1 line
[1, 0] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 lines
[1, 0, 3, 0] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 lines
[1] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex, 1 ray, 1 line
[1, 0, 3, 1] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays
[1, 0, 1] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 lines
[1, 0, 3, 0, 1] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 lines
[] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays

 [1, 0, 1]
[1, 0, 1] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 lines
[1, 0] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 lines
[1, 0, 1, 0] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex, 1 ray, 1 line
[1] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex, 1 ray, 1 line
[1, 0, 1, 3] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex, 1 ray, 1 line
[1, 0, 3] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex, 1 ray, 1 line
[1, 0, 1, 0, 3] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays
[1, 3] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 lines

 [1, 0]
[1, 0] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 lines
[1] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex, 1 ray, 1 line
[1, 0, 1] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 lines
[] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays
[1, 0, 3] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex, 1 ray, 1 line
[1, 3] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 lines
[1, 0, 1, 3] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex, 1 ray, 1 line
[3] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex, 1 ray, 1 line

 [1, 3, 1]
[1, 3, 1] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 lines
[1, 3] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 lines
[1, 3, 1, 3] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex, 1 ray, 1 line
[1] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex, 1 ray, 1 line
[1, 3, 1, 0] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex, 1 ray, 1 line
[1, 3, 0] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex, 1 ray, 1 line
[1, 3, 1, 3, 0] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays
[1, 0] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 lines

 [1, 3]
[1, 3] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 lines
[1] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex, 1 ray, 1 line
[1, 3, 1] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 lines
[] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays
[1, 3, 0] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex, 1 ray, 1 line
[1, 0] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 lines
[1, 3, 1, 0] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex, 1 ray, 1 line
[0] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex, 1 ray, 1 line

 [1]
[1] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex, 1 ray, 1 line
[] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays
[1, 3] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 lines
[3] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex, 1 ray, 1 line
[1, 0] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 lines
[0] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex, 1 ray, 1 line
[1, 3, 0] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex, 1 ray, 1 line
[3, 0] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays

 [0, 3]
[0, 3] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays
[0] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex, 1 ray, 1 line
[0, 3, 0] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex, 1 ray, 1 line
[] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays
[0, 3, 1] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays
[0, 1] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 lines
[0, 3, 0, 1] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 lines
[1] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex, 1 ray, 1 line

 [0]
[0] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex, 1 ray, 1 line
[] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays
[0, 3] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays
[3] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex, 1 ray, 1 line
[0, 1] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 lines
[1] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex, 1 ray, 1 line
[0, 3, 1] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays
[3, 1] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 lines

 [3]
[3] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex, 1 ray, 1 line
[] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays
[3, 0] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays
[0] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex, 1 ray, 1 line
[3, 1] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 lines
[1] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex, 1 ray, 1 line
[3, 0, 1] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays
[0, 1] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 lines

 []
[] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays
[3] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex, 1 ray, 1 line
[0] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex, 1 ray, 1 line
[3, 0] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays
[1] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex, 1 ray, 1 line
[3, 1] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 lines
[0, 1] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 lines
[3, 0, 1] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 2 rays
sage: A=CartanMatrix(['D',4])
....: c=[2,1,0,3]
....: for v in sortables(A,c[1:]):
....:     print("\n",v)
....:     for k in K(c[1:],v):
....:         P=p_lambda_cone(B(A,c),lam(A,v),[k,k+[c[0]]])
....:         print(k,P.rays(),P.lines())
....: 

 [1, 0, 3, 1, 0, 3]
[1, 0, 3, 1, 0, 3] (A ray in the direction (0, -1, 0, 0), A ray in the direction (1, 0, -1, 1)) ()
[1, 0, 3, 1, 0] (A ray in the direction (1, 0, -1, 1),) (A line in the direction (0, 1, 0, 0),)
[1, 0, 3, 1, 0, 3, 0] (A ray in the direction (1, 0, -1, 1),) (A line in the direction (0, 1, 0, 0),)
[1, 0, 3, 1] (A ray in the direction (0, 1, 0, 0), A ray in the direction (1, -3, -1, 1)) ()
[1, 0, 3, 1, 0, 3, 1] (A ray in the direction (0, -1, 0, 0), A ray in the direction (-1, 0, 1, -1)) ()
[1, 0, 3, 1, 0, 1] () (A line in the direction (0, 1, 0, 0), A line in the direction (1, 0, -1, 1))
[1, 0, 3, 1, 0, 3, 0, 1] () (A line in the direction (0, 1, 0, 0), A line in the direction (1, 0, -1, 1))
[1, 0, 3] (A ray in the direction (0, 1, 0, 0),) (A line in the direction (1, -2, -1, 1),)

 [1, 0, 3, 1, 0]
[1, 0, 3, 1, 0] (A ray in the direction (1, 0, -1, 1),) (A line in the direction (0, 1, 0, 0),)
[1, 0, 3, 1] (A ray in the direction (0, 1, 0, 0), A ray in the direction (1, -3, -1, 1)) ()
[1, 0, 3, 1, 0, 1] () (A line in the direction (0, 1, 0, 0), A line in the direction (1, 0, -1, 1))
[1, 0, 3] (A ray in the direction (0, 1, 0, 0),) (A line in the direction (1, -2, -1, 1),)
[1, 0, 3, 1, 0, 3] (A ray in the direction (0, -1, 0, 0), A ray in the direction (1, -1, -1, 1)) ()
[1, 0, 3, 1, 3] (A ray in the direction (1, 0, -1, 1),) (A line in the direction (0, 1, 0, 0),)
[1, 0, 3, 1, 0, 1, 3] (A ray in the direction (-1, 0, 1, -1),) (A line in the direction (0, 1, 0, 0),)
[1, 0] () (A line in the direction (0, 1, 0, 0), A line in the direction (1, 0, -1, 1))

 [1, 0, 3, 1, 3]
[1, 0, 3, 1, 3] (A ray in the direction (1, 0, -1, 1),) (A line in the direction (0, 1, 0, 0),)
[1, 0, 3, 1] (A ray in the direction (0, 1, 0, 0), A ray in the direction (1, -3, -1, 1)) ()
[1, 0, 3, 1, 3, 1] () (A line in the direction (0, 1, 0, 0), A line in the direction (1, 0, -1, 1))
[1, 0, 3] (A ray in the direction (0, 1, 0, 0),) (A line in the direction (1, -2, -1, 1),)
[1, 0, 3, 1, 3, 0] (A ray in the direction (0, -1, 0, 0), A ray in the direction (1, -1, -1, 1)) ()
[1, 0, 3, 1, 0] (A ray in the direction (1, 0, -1, 1),) (A line in the direction (0, 1, 0, 0),)
[1, 0, 3, 1, 3, 1, 0] (A ray in the direction (-1, 0, 1, -1),) (A line in the direction (0, 1, 0, 0),)
[1, 0, 3, 0] () (A line in the direction (0, 1, 0, 0), A line in the direction (1, 0, -1, 1))

 [1, 0, 3, 1]
[1, 0, 3, 1] (A ray in the direction (0, 1, 0, 0), A ray in the direction (1, -3, -1, 1)) ()
[1, 0, 3] (A ray in the direction (0, 1, 0, 0),) (A line in the direction (1, -2, -1, 1),)
[1, 0, 3, 1, 3] (A ray in the direction (1, 0, -1, 1),) (A line in the direction (0, 1, 0, 0),)
[1, 0] () (A line in the direction (0, 1, 0, 0), A line in the direction (1, 0, -1, 1))
[1, 0, 3, 1, 0] (A ray in the direction (1, 0, -1, 1),) (A line in the direction (0, 1, 0, 0),)
[1, 0, 3, 0] () (A line in the direction (0, 1, 0, 0), A line in the direction (1, 0, -1, 1))
[1, 0, 3, 1, 3, 0] (A ray in the direction (0, -1, 0, 0), A ray in the direction (1, -2, -1, 1)) ()
[1] (A ray in the direction (0, 1, 0, 0),) (A line in the direction (1, -1, -1, 1),)

 [1, 0, 3]
[1, 0, 3] (A ray in the direction (0, 1, 0, 0),) (A line in the direction (1, -2, -1, 1),)
[1, 0] () (A line in the direction (0, 1, 0, 0), A line in the direction (1, 0, -1, 1))
[1, 0, 3, 0] () (A line in the direction (0, 1, 0, 0), A line in the direction (1, 0, -1, 1))
[1] (A ray in the direction (0, 1, 0, 0),) (A line in the direction (1, -1, -1, 1),)
[1, 0, 3, 1] (A ray in the direction (1, -1, -1, 1), A ray in the direction (0, -1, 0, 0)) ()
[1, 0, 1] () (A line in the direction (0, 1, 0, 0), A line in the direction (1, 0, -1, 1))
[1, 0, 3, 0, 1] () (A line in the direction (0, 1, 0, 0), A line in the direction (1, 0, -1, 1))
[] (A ray in the direction (0, 1, 0, 0), A ray in the direction (-1, 0, 1, -1)) ()

 [1, 0, 1]
[1, 0, 1] () (A line in the direction (0, 1, 0, 0), A line in the direction (1, 0, -1, 1))
[1, 0] () (A line in the direction (0, 1, 0, 0), A line in the direction (1, 0, -1, 1))
[1, 0, 1, 0] (A ray in the direction (-1, 0, 1, -1),) (A line in the direction (0, 1, 0, 0),)
[1] (A ray in the direction (0, 1, 0, 0),) (A line in the direction (1, -1, -1, 1),)
[1, 0, 1, 3] (A ray in the direction (0, -1, 0, 0),) (A line in the direction (1, 0, -1, 1),)
[1, 0, 3] (A ray in the direction (1, 0, -1, 1),) (A line in the direction (0, 1, 0, 0),)
[1, 0, 1, 0, 3] (A ray in the direction (0, -1, 0, 0), A ray in the direction (-1, 1, 1, -1)) ()
[1, 3] () (A line in the direction (0, 1, 0, 0), A line in the direction (1, 0, -1, 1))

 [1, 0]
[1, 0] () (A line in the direction (0, 1, 0, 0), A line in the direction (1, 0, -1, 1))
[1] (A ray in the direction (0, 1, 0, 0),) (A line in the direction (1, -1, -1, 1),)
[1, 0, 1] () (A line in the direction (0, 1, 0, 0), A line in the direction (1, 0, -1, 1))
[] (A ray in the direction (0, 1, 0, 0), A ray in the direction (-1, 0, 1, -1)) ()
[1, 0, 3] (A ray in the direction (1, 0, -1, 1),) (A line in the direction (0, 1, 0, 0),)
[1, 3] () (A line in the direction (0, 1, 0, 0), A line in the direction (1, 0, -1, 1))
[1, 0, 1, 3] (A ray in the direction (0, -1, 0, 0),) (A line in the direction (1, -1, -1, 1),)
[3] (A ray in the direction (-1, 0, 1, -1),) (A line in the direction (0, 1, 0, 0),)

 [1, 3, 1]
[1, 3, 1] () (A line in the direction (0, 1, 0, 0), A line in the direction (1, 0, -1, 1))
[1, 3] () (A line in the direction (0, 1, 0, 0), A line in the direction (1, 0, -1, 1))
[1, 3, 1, 3] (A ray in the direction (-1, 0, 1, -1),) (A line in the direction (0, 1, 0, 0),)
[1] (A ray in the direction (0, 1, 0, 0),) (A line in the direction (1, -1, -1, 1),)
[1, 3, 1, 0] (A ray in the direction (0, -1, 0, 0),) (A line in the direction (1, 0, -1, 1),)
[1, 3, 0] (A ray in the direction (1, 0, -1, 1),) (A line in the direction (0, 1, 0, 0),)
[1, 3, 1, 3, 0] (A ray in the direction (-1, 1, 1, -1), A ray in the direction (0, -1, 0, 0)) ()
[1, 0] () (A line in the direction (0, 1, 0, 0), A line in the direction (1, 0, -1, 1))

 [1, 3]
[1, 3] () (A line in the direction (0, 1, 0, 0), A line in the direction (1, 0, -1, 1))
[1] (A ray in the direction (0, 1, 0, 0),) (A line in the direction (1, -1, -1, 1),)
[1, 3, 1] () (A line in the direction (0, 1, 0, 0), A line in the direction (1, 0, -1, 1))
[] (A ray in the direction (0, 1, 0, 0), A ray in the direction (-1, 0, 1, -1)) ()
[1, 3, 0] (A ray in the direction (1, 0, -1, 1),) (A line in the direction (0, 1, 0, 0),)
[1, 0] () (A line in the direction (0, 1, 0, 0), A line in the direction (1, 0, -1, 1))
[1, 3, 1, 0] (A ray in the direction (0, -1, 0, 0),) (A line in the direction (1, -1, -1, 1),)
[0] (A ray in the direction (-1, 0, 1, -1),) (A line in the direction (0, 1, 0, 0),)

 [1]
[1] (A ray in the direction (0, 1, 0, 0),) (A line in the direction (1, -1, -1, 1),)
[] (A ray in the direction (0, 1, 0, 0), A ray in the direction (-1, 0, 1, -1)) ()
[1, 3] () (A line in the direction (0, 1, 0, 0), A line in the direction (1, 0, -1, 1))
[3] (A ray in the direction (-1, 0, 1, -1),) (A line in the direction (0, 1, 0, 0),)
[1, 0] () (A line in the direction (0, 1, 0, 0), A line in the direction (1, 0, -1, 1))
[0] (A ray in the direction (-1, 0, 1, -1),) (A line in the direction (0, 1, 0, 0),)
[1, 3, 0] (A ray in the direction (0, -1, 0, 0),) (A line in the direction (1, 0, -1, 1),)
[3, 0] (A ray in the direction (-1, 2, 1, -1), A ray in the direction (0, -1, 0, 0)) ()

 [0, 3]
[0, 3] (A ray in the direction (0, -1, 0, 0), A ray in the direction (-1, 0, 1, -1)) ()
[0] (A ray in the direction (-1, 0, 1, -1),) (A line in the direction (0, 1, 0, 0),)
[0, 3, 0] (A ray in the direction (-1, 0, 1, -1),) (A line in the direction (0, 1, 0, 0),)
[] (A ray in the direction (0, 1, 0, 0), A ray in the direction (-1, 0, 1, -1)) ()
[0, 3, 1] (A ray in the direction (1, 0, -1, 1), A ray in the direction (-1, -1, 1, -1)) ()
[0, 1] () (A line in the direction (0, 1, 0, 0), A line in the direction (1, 0, -1, 1))
[0, 3, 0, 1] () (A line in the direction (0, 1, 0, 0), A line in the direction (1, 0, -1, 1))
[1] (A ray in the direction (1, 0, -1, 1),) (A line in the direction (0, 1, 0, 0),)

 [0]
[0] (A ray in the direction (-1, 0, 1, -1),) (A line in the direction (0, 1, 0, 0),)
[] (A ray in the direction (0, 1, 0, 0), A ray in the direction (-1, 0, 1, -1)) ()
[0, 3] (A ray in the direction (-1, 1, 1, -1), A ray in the direction (0, -1, 0, 0)) ()
[3] (A ray in the direction (-1, 0, 1, -1),) (A line in the direction (0, 1, 0, 0),)
[0, 1] () (A line in the direction (0, 1, 0, 0), A line in the direction (1, 0, -1, 1))
[1] (A ray in the direction (1, 0, -1, 1),) (A line in the direction (0, 1, 0, 0),)
[0, 3, 1] (A ray in the direction (1, -1, -1, 1), A ray in the direction (-1, 0, 1, -1)) ()
[3, 1] () (A line in the direction (0, 1, 0, 0), A line in the direction (1, 0, -1, 1))

 [3]
[3] (A ray in the direction (-1, 0, 1, -1),) (A line in the direction (0, 1, 0, 0),)
[] (A ray in the direction (0, 1, 0, 0), A ray in the direction (-1, 0, 1, -1)) ()
[3, 0] (A ray in the direction (-1, 1, 1, -1), A ray in the direction (0, -1, 0, 0)) ()
[0] (A ray in the direction (-1, 0, 1, -1),) (A line in the direction (0, 1, 0, 0),)
[3, 1] () (A line in the direction (0, 1, 0, 0), A line in the direction (1, 0, -1, 1))
[1] (A ray in the direction (1, 0, -1, 1),) (A line in the direction (0, 1, 0, 0),)
[3, 0, 1] (A ray in the direction (1, -1, -1, 1), A ray in the direction (-1, 0, 1, -1)) ()
[0, 1] () (A line in the direction (0, 1, 0, 0), A line in the direction (1, 0, -1, 1))

 []
[] (A ray in the direction (0, 1, 0, 0), A ray in the direction (-1, 0, 1, -1)) ()
[3] (A ray in the direction (-1, 0, 1, -1),) (A line in the direction (0, 1, 0, 0),)
[0] (A ray in the direction (-1, 0, 1, -1),) (A line in the direction (0, 1, 0, 0),)
[3, 0] (A ray in the direction (-1, 2, 1, -1), A ray in the direction (0, -1, 0, 0)) ()
[1] (A ray in the direction (1, 0, -1, 1),) (A line in the direction (0, 1, 0, 0),)
[3, 1] () (A line in the direction (0, 1, 0, 0), A line in the direction (1, 0, -1, 1))
[0, 1] () (A line in the direction (0, 1, 0, 0), A line in the direction (1, 0, -1, 1))
[3, 0, 1] (A ray in the direction (1, -2, -1, 1), A ray in the direction (-1, 1, 1, -1)) ()
sage: A=CartanMatrix(['c',4])
....: c=[2,1,0,3]
....: for v in sortables(A,c[1:]):
....:     print("\n",v)
....:     for k in K(c[1:],v):
....:         P=p_lambda_cone(B(A,c),lam(A,v),[k,k+[c[0]]])
....:         print(k,P.rays(),P.lines())
....: 
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In [787], line 1
----> 1 A=CartanMatrix(['c',Integer(4)])
      2 c=[Integer(2),Integer(1),Integer(0),Integer(3)]
      3 for v in sortables(A,c[Integer(1):]):

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/misc/classcall_metaclass.pyx:320, in sage.misc.classcall_metaclass.ClasscallMetaclass.__call__ (build/cythonized/sage/misc/classcall_metaclass.c:3156)()
    318 """
    319 if cls.classcall is not None:
--> 320     return cls.classcall(cls, *args, **kwds)
    321 else:
    322     # Fast version of type.__call__(cls, *args, **kwds)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/combinat/root_system/cartan_matrix.py:318, in CartanMatrix.__classcall_private__(cls, data, index_set, cartan_type, cartan_type_check, borcherds)
    316         data[(reverse[j], reverse[i])] = -l
    317 else:
--> 318     M = matrix(data)
    319     if borcherds:
    320         if not is_borcherds_cartan_matrix(M):

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/constructor.pyx:648, in sage.matrix.constructor.matrix (build/cythonized/sage/matrix/constructor.c:5336)()
    646 """
    647 immutable = kwds.pop('immutable', False)
--> 648 M = MatrixArgs(*args, **kwds).matrix()
    649 if immutable:
    650     M.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/args.pyx:678, in sage.matrix.args.MatrixArgs.matrix (build/cythonized/sage/matrix/args.c:12864)()
    676     True
    677 """
--> 678 self.finalize()
    679 
    680 cdef Matrix M

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/args.pyx:902, in sage.matrix.args.MatrixArgs.finalize (build/cythonized/sage/matrix/args.c:14844)()
    900     self.typ = self.get_type()
    901     if self.typ == MA_ENTRIES_UNKNOWN:
--> 902         raise TypeError(f"unable to convert {self.entries!r} to a matrix")
    903 
    904 # Can we assume a square matrix?

TypeError: unable to convert ['c', 4] to a matrix
sage: A=CartanMatrix(['C',4])
....: c=[2,1,0,3]
....: for v in sortables(A,c[1:]):
....:     print("\n",v)
....:     for k in K(c[1:],v):
....:         P=p_lambda_cone(B(A,c),lam(A,v),[k,k+[c[0]]])
....:         print(k,P.rays(),P.lines())
....: 

 [1, 0, 3, 1]
[1, 0, 3, 1] (A ray in the direction (0, -1, 0, 0), A ray in the direction (1, 0, -1, 0), A ray in the direction (1, -1, -1, -1), A ray in the direction (0, -1, -1, -1), A ray in the direction (0, 0, -1, 0)) ()
[1, 0, 3] (A ray in the direction (0, 1, 0, 0), A ray in the direction (1, -2, -1, -1), A ray in the direction (1, -1, -1, 0), A ray in the direction (0, 0, -1, 0), A ray in the direction (0, -1, -1, -1)) ()
[1, 0, 3, 1, 3] (A ray in the direction (0, 0, 1, 0), A ray in the direction (0, -1, 0, 0), A ray in the direction (1, 0, -1, 0), A ray in the direction (1, -1, -1, -1)) ()
[1, 0] (A ray in the direction (0, 1, 0, 0), A ray in the direction (0, 0, 1, 0), A ray in the direction (1, -1, -1, 0), A ray in the direction (1, -2, -1, -1)) ()
[1, 0, 3, 1, 0] (A ray in the direction (0, -1, 0, 0), A ray in the direction (-1, 0, 1, 0), A ray in the direction (0, -1, -1, -1), A ray in the direction (0, 0, -1, 0)) ()
[1, 0, 3, 0] (A ray in the direction (-1, 1, 1, 0), A ray in the direction (1, 0, -1, 0), A ray in the direction (1, -1, -1, -1), A ray in the direction (0, -1, -1, -1), A ray in the direction (0, 0, -1, 0)) ()
[1, 0, 3, 1, 3, 0] (A ray in the direction (0, 0, 1, 0), A ray in the direction (-1, 0, 1, 0), A ray in the direction (0, -1, 0, 0)) ()
[1] (A ray in the direction (0, 0, 1, 0), A ray in the direction (-1, 1, 1, 0), A ray in the direction (1, 0, -1, 0), A ray in the direction (1, -1, -1, -1)) ()

 [1, 0, 3]
[1, 0, 3] (A ray in the direction (0, 1, 0, 0), A ray in the direction (1, -2, -1, -1), A ray in the direction (1, -1, -1, 0), A ray in the direction (0, 0, -1, 0), A ray in the direction (0, -1, -1, -1)) ()
[1, 0] (A ray in the direction (0, 1, 0, 0), A ray in the direction (0, 0, 1, 0), A ray in the direction (1, -1, -1, 0), A ray in the direction (1, -2, -1, -1)) ()
[1, 0, 3, 0] (A ray in the direction (-1, 1, 1, 0), A ray in the direction (1, 0, -1, 0), A ray in the direction (1, -1, -1, -1), A ray in the direction (0, -1, -1, -1), A ray in the direction (0, 0, -1, 0)) ()
[1] (A ray in the direction (0, 0, 1, 0), A ray in the direction (-1, 1, 1, 0), A ray in the direction (1, 0, -1, 0), A ray in the direction (1, -1, -1, -1)) ()
[1, 0, 3, 1] (A ray in the direction (0, -1, 0, 0), A ray in the direction (1, -1, -1, 0), A ray in the direction (1, -2, -1, -1), A ray in the direction (0, -1, -1, -1), A ray in the direction (0, 0, -1, 0)) ()
[1, 0, 1] (A ray in the direction (0, 0, 1, 0), A ray in the direction (0, -1, 0, 0), A ray in the direction (1, -1, -1, 0), A ray in the direction (1, -2, -1, -1)) ()
[1, 0, 3, 0, 1] (A ray in the direction (0, 1, 0, 0), A ray in the direction (-1, 0, 1, 0), A ray in the direction (0, -1, -1, -1), A ray in the direction (0, 0, -1, 0)) ()
[] (A ray in the direction (0, 0, 1, 0), A ray in the direction (0, 1, 0, 0), A ray in the direction (-1, 0, 1, 0)) ()

 [1, 0, 1]
[1, 0, 1] (A ray in the direction (0, 0, 1, 0), A ray in the direction (0, -1, 0, 0), A ray in the direction (1, 0, -1, 0), A ray in the direction (1, -1, -1, -1)) ()
[1, 0] (A ray in the direction (0, 1, 0, 0), A ray in the direction (0, 0, 1, 0), A ray in the direction (1, -1, -1, 0), A ray in the direction (1, -2, -1, -1)) ()
[1, 0, 1, 0] (A ray in the direction (0, 0, 1, 0), A ray in the direction (-1, 0, 1, 0), A ray in the direction (0, -1, 0, 0)) ()
[1] (A ray in the direction (0, 0, 1, 0), A ray in the direction (-1, 1, 1, 0), A ray in the direction (1, 0, -1, 0), A ray in the direction (1, -1, -1, -1)) ()
[1, 0, 1, 3] (A ray in the direction (0, -1, 0, 0), A ray in the direction (1, 0, -1, 0), A ray in the direction (1, -1, 1, -1), A ray in the direction (0, -1, 1, -1), A ray in the direction (0, 0, -1, 0)) ()
[1, 0, 3] (A ray in the direction (0, 1, 0, 0), A ray in the direction (1, -2, 1, -1), A ray in the direction (1, -1, -1, 0), A ray in the direction (0, 0, -1, 0), A ray in the direction (0, -1, 1, -1)) ()
[1, 0, 1, 0, 3] (A ray in the direction (0, -1, 0, 0), A ray in the direction (-1, 0, 1, 0), A ray in the direction (0, -1, 1, -1), A ray in the direction (0, 0, -1, 0)) ()
[1, 3] (A ray in the direction (-1, 1, 1, 0), A ray in the direction (1, 0, -1, 0), A ray in the direction (1, -1, 1, -1), A ray in the direction (0, -1, 1, -1), A ray in the direction (0, 0, -1, 0)) ()

 [1, 0]
[1, 0] (A ray in the direction (0, 1, 0, 0), A ray in the direction (0, 0, 1, 0), A ray in the direction (1, -1, -1, 0), A ray in the direction (1, -2, -1, -1)) ()
[1] (A ray in the direction (0, 0, 1, 0), A ray in the direction (-1, 1, 1, 0), A ray in the direction (1, 0, -1, 0), A ray in the direction (1, -1, -1, -1)) ()
[1, 0, 1] (A ray in the direction (0, 0, 1, 0), A ray in the direction (0, -1, 0, 0), A ray in the direction (1, -1, -1, 0), A ray in the direction (1, -2, -1, -1)) ()
[] (A ray in the direction (0, 0, 1, 0), A ray in the direction (0, 1, 0, 0), A ray in the direction (-1, 0, 1, 0)) ()
[1, 0, 3] (A ray in the direction (0, 1, 0, 0), A ray in the direction (1, -2, 1, -1), A ray in the direction (1, -1, -1, 0), A ray in the direction (0, 0, -1, 0), A ray in the direction (0, -1, 1, -1)) ()
[1, 3] (A ray in the direction (-1, 1, 1, 0), A ray in the direction (1, 0, -1, 0), A ray in the direction (1, -1, 1, -1), A ray in the direction (0, -1, 1, -1), A ray in the direction (0, 0, -1, 0)) ()
[1, 0, 1, 3] (A ray in the direction (0, -1, 0, 0), A ray in the direction (1, -1, -1, 0), A ray in the direction (1, -2, 1, -1), A ray in the direction (0, -1, 1, -1), A ray in the direction (0, 0, -1, 0)) ()
[3] (A ray in the direction (0, 1, 0, 0), A ray in the direction (-1, 0, 1, 0), A ray in the direction (0, -1, 1, -1), A ray in the direction (0, 0, -1, 0)) ()

 [1, 3]
[1, 3] (A ray in the direction (-1, 1, 1, 0), A ray in the direction (1, 0, -1, 0), A ray in the direction (1, -1, -1, -1), A ray in the direction (0, -1, -1, -1), A ray in the direction (0, 0, -1, 0)) ()
[1] (A ray in the direction (0, 0, 1, 0), A ray in the direction (-1, 1, 1, 0), A ray in the direction (1, 0, -1, 0), A ray in the direction (1, -1, -1, -1)) ()
[1, 3, 1] (A ray in the direction (0, 1, 0, 0), A ray in the direction (-1, 0, 1, 0), A ray in the direction (0, -1, -1, -1), A ray in the direction (0, 0, -1, 0)) ()
[] (A ray in the direction (0, 0, 1, 0), A ray in the direction (0, 1, 0, 0), A ray in the direction (-1, 0, 1, 0)) ()
[1, 3, 0] (A ray in the direction (1, 0, -1, 0), A ray in the direction (0, -1, 0, -1), A ray in the direction (-1, 0, 0, -1), A ray in the direction (0, 0, -1, 0), A ray in the direction (1, -1, -1, 0)) ()
[1, 0] (A ray in the direction (1, 0, -1, 0), A ray in the direction (0, 0, 1, 0), A ray in the direction (0, -1, 0, -1), A ray in the direction (1, -1, -1, 0)) ()
[1, 3, 1, 0] (A ray in the direction (-1, 1, 1, 0), A ray in the direction (0, -1, 0, 0), A ray in the direction (0, -1, -1, -1), A ray in the direction (0, 0, -1, 0)) ()
[0] (A ray in the direction (0, 0, 1, 0), A ray in the direction (0, -1, 0, 0), A ray in the direction (-1, 1, 1, 0)) ()

 [1]
[1] (A ray in the direction (0, 0, 1, 0), A ray in the direction (-1, 1, 1, 0), A ray in the direction (1, 0, -1, 0), A ray in the direction (1, -1, -1, -1)) ()
[] (A ray in the direction (0, 0, 1, 0), A ray in the direction (0, 1, 0, 0), A ray in the direction (-1, 0, 1, 0)) ()
[1, 3] (A ray in the direction (-1, 1, 1, 0), A ray in the direction (1, 0, -1, 0), A ray in the direction (1, -1, 1, -1), A ray in the direction (0, -1, 1, -1), A ray in the direction (0, 0, -1, 0)) ()
[3] (A ray in the direction (0, 1, 0, 0), A ray in the direction (-1, 0, 1, 0), A ray in the direction (0, -1, 1, -1), A ray in the direction (0, 0, -1, 0)) ()
[1, 0] (A ray in the direction (1, 0, -1, 0), A ray in the direction (0, 0, 1, 0), A ray in the direction (0, -1, 0, -1), A ray in the direction (1, -1, -1, 0)) ()
[0] (A ray in the direction (0, 0, 1, 0), A ray in the direction (0, -1, 0, 0), A ray in the direction (-1, 1, 1, 0)) ()
[1, 3, 0] (A ray in the direction (1, 0, -1, 0), A ray in the direction (0, -1, 2, -1), A ray in the direction (-1, 0, 2, -1), A ray in the direction (0, 0, -1, 0), A ray in the direction (1, -1, -1, 0)) ()
[3, 0] (A ray in the direction (-1, 1, 1, 0), A ray in the direction (0, -1, 0, 0), A ray in the direction (0, -1, 1, -1), A ray in the direction (0, 0, -1, 0)) ()

 [0, 3]
[0, 3] (A ray in the direction (0, -1, 0, 0), A ray in the direction (-1, 0, 1, 0), A ray in the direction (0, -1, -1, -1), A ray in the direction (0, 0, -1, 0)) ()
[0] (A ray in the direction (0, 0, 1, 0), A ray in the direction (-1, 0, 1, 0), A ray in the direction (0, -1, 0, 0)) ()
[0, 3, 0] (A ray in the direction (0, 1, 0, 0), A ray in the direction (-1, 0, 1, 0), A ray in the direction (0, -1, -1, -1), A ray in the direction (0, 0, -1, 0)) ()
[] (A ray in the direction (0, 0, 1, 0), A ray in the direction (0, 1, 0, 0), A ray in the direction (-1, 0, 1, 0)) ()
[0, 3, 1] (A ray in the direction (-1, -1, 1, 0), A ray in the direction (0, -1, 0, -1), A ray in the direction (1, 0, -1, 0), A ray in the direction (0, 0, -1, 0), A ray in the direction (-1, -1, 0, -1)) ()
[0, 1] (A ray in the direction (0, 0, 1, 0), A ray in the direction (-1, -1, 1, 0), A ray in the direction (1, 0, -1, 0), A ray in the direction (0, -1, 0, -1)) ()
[0, 3, 0, 1] (A ray in the direction (0, 1, 0, 0), A ray in the direction (0, -1, 0, -1), A ray in the direction (1, 0, -1, 0), A ray in the direction (0, 0, -1, 0), A ray in the direction (-1, -1, 0, -1)) ()
[1] (A ray in the direction (0, 0, 1, 0), A ray in the direction (0, 1, 0, 0), A ray in the direction (1, 0, -1, 0), A ray in the direction (0, -1, 0, -1)) ()

 [0]
[0] (A ray in the direction (0, 0, 1, 0), A ray in the direction (-1, 0, 1, 0), A ray in the direction (0, -1, 0, 0)) ()
[] (A ray in the direction (0, 0, 1, 0), A ray in the direction (0, 1, 0, 0), A ray in the direction (-1, 0, 1, 0)) ()
[0, 3] (A ray in the direction (0, -1, 0, 0), A ray in the direction (-1, 0, 1, 0), A ray in the direction (0, -1, 1, -1), A ray in the direction (0, 0, -1, 0)) ()
[3] (A ray in the direction (0, 1, 0, 0), A ray in the direction (-1, 0, 1, 0), A ray in the direction (0, -1, 1, -1), A ray in the direction (0, 0, -1, 0)) ()
[0, 1] (A ray in the direction (0, 0, 1, 0), A ray in the direction (-1, -1, 1, 0), A ray in the direction (1, 0, -1, 0), A ray in the direction (0, -1, 0, -1)) ()
[1] (A ray in the direction (0, 0, 1, 0), A ray in the direction (0, 1, 0, 0), A ray in the direction (1, 0, -1, 0), A ray in the direction (0, -1, 0, -1)) ()
[0, 3, 1] (A ray in the direction (-1, -1, 1, 0), A ray in the direction (0, -1, 2, -1), A ray in the direction (1, 0, -1, 0), A ray in the direction (0, 0, -1, 0), A ray in the direction (-1, -1, 2, -1)) ()
[3, 1] (A ray in the direction (0, 1, 0, 0), A ray in the direction (0, -1, 2, -1), A ray in the direction (1, 0, -1, 0), A ray in the direction (0, 0, -1, 0), A ray in the direction (-1, -1, 2, -1)) ()

 [3]
[3] (A ray in the direction (0, 1, 0, 0), A ray in the direction (-1, 0, 1, 0), A ray in the direction (0, -1, -1, -1), A ray in the direction (0, 0, -1, 0)) ()
[] (A ray in the direction (0, 0, 1, 0), A ray in the direction (0, 1, 0, 0), A ray in the direction (-1, 0, 1, 0)) ()
[3, 0] (A ray in the direction (-1, 1, 1, 0), A ray in the direction (0, -1, 0, 0), A ray in the direction (0, -1, -1, -1), A ray in the direction (0, 0, -1, 0)) ()
[0] (A ray in the direction (0, 0, 1, 0), A ray in the direction (0, -1, 0, 0), A ray in the direction (-1, 1, 1, 0)) ()
[3, 1] (A ray in the direction (0, 1, 0, 0), A ray in the direction (0, -1, 0, -1), A ray in the direction (1, 0, -1, 0), A ray in the direction (0, 0, -1, 0), A ray in the direction (-1, -1, 0, -1)) ()
[1] (A ray in the direction (0, 0, 1, 0), A ray in the direction (0, 1, 0, 0), A ray in the direction (1, 0, -1, 0), A ray in the direction (0, -1, 0, -1)) ()
[3, 0, 1] (A ray in the direction (-1, 0, 1, 0), A ray in the direction (-1, 0, 0, -1), A ray in the direction (0, -1, 0, -1), A ray in the direction (1, -1, -1, 0), A ray in the direction (0, 0, -1, 0)) ()
[0, 1] (A ray in the direction (0, 0, 1, 0), A ray in the direction (-1, 0, 1, 0), A ray in the direction (0, -1, 0, -1), A ray in the direction (1, -1, -1, 0)) ()

 []
[] (A ray in the direction (0, 0, 1, 0), A ray in the direction (0, 1, 0, 0), A ray in the direction (-1, 0, 1, 0)) ()
[3] (A ray in the direction (0, 1, 0, 0), A ray in the direction (-1, 0, 1, 0), A ray in the direction (0, -1, 1, -1), A ray in the direction (0, 0, -1, 0)) ()
[0] (A ray in the direction (0, 0, 1, 0), A ray in the direction (0, -1, 0, 0), A ray in the direction (-1, 1, 1, 0)) ()
[3, 0] (A ray in the direction (-1, 1, 1, 0), A ray in the direction (0, -1, 0, 0), A ray in the direction (0, -1, 1, -1), A ray in the direction (0, 0, -1, 0)) ()
[1] (A ray in the direction (0, 0, 1, 0), A ray in the direction (0, 1, 0, 0), A ray in the direction (1, 0, -1, 0), A ray in the direction (0, -1, 0, -1)) ()
[3, 1] (A ray in the direction (0, 1, 0, 0), A ray in the direction (0, -1, 2, -1), A ray in the direction (1, 0, -1, 0), A ray in the direction (0, 0, -1, 0), A ray in the direction (-1, -1, 2, -1)) ()
[0, 1] (A ray in the direction (0, 0, 1, 0), A ray in the direction (-1, 0, 1, 0), A ray in the direction (0, -1, 0, -1), A ray in the direction (1, -1, -1, 0)) ()
[3, 0, 1] (A ray in the direction (-1, 0, 1, 0), A ray in the direction (-1, 0, 2, -1), A ray in the direction (0, -1, 2, -1), A ray in the direction (1, -1, -1, 0), A ray in the direction (0, 0, -1, 0)) ()
sage: B(A,c)
[ 0 -1  0  0]
[ 1  0 -1  0]
[ 0  1  0  2]
[ 0  0 -1  0]
sage: A=CartanMatrix(['D',4])
....: c=[2,1,0,3]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_cone(B(A,c),lam(A,v),list(sortables(A,c[1:])))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list(k+[c[0]] for k in K(c[1:],v)))
....:     print("\n",v)
....:     print("parabolic     ",list(map(vector,P.rays())),list(map(vector,P.li
....: nes())))
....:     print("parabolic + c0",list(map(vector,Q.rays())),list(map(vector,Q.li
....: nes())))
....: 

 [1, 0, 3, 1, 0, 3]
parabolic      [(0, -1, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0)] []

 [1, 0, 3, 1, 0]
parabolic      [(0, -1, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0)] []

 [1, 0, 3, 1, 3]
parabolic      [(0, -1, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0)] []

 [1, 0, 3, 1]
parabolic      [(0, -1, 0, 0)] []
parabolic + c0 [(1, -1, -1, 1), (0, 1, 0, 0)] []

 [1, 0, 3]
parabolic      [(-1, 1, 1, -1), (0, -1, 0, 0)] []
parabolic + c0 [] []

 [1, 0, 1]
parabolic      [(0, -1, 0, 0), (-1, 0, 1, -1)] []
parabolic + c0 [] []

 [1, 0]
parabolic      [(-1, 1, 1, -1), (0, -1, 0, 0)] []
parabolic + c0 [] []

 [1, 3, 1]
parabolic      [(0, -1, 0, 0), (-1, 0, 1, -1)] []
parabolic + c0 [] []

 [1, 3]
parabolic      [(-1, 1, 1, -1), (0, -1, 0, 0)] []
parabolic + c0 [] []

 [1]
parabolic      [(-1, 1, 1, -1), (0, -1, 0, 0)] []
parabolic + c0 [] []

 [0, 3]
parabolic      [(0, -1, 0, 0), (-1, -1, 1, -1)] []
parabolic + c0 [] []

 [0]
parabolic      [(0, -1, 0, 0), (-1, 0, 1, -1)] []
parabolic + c0 [] []

 [3]
parabolic      [(0, -1, 0, 0), (-1, 0, 1, -1)] []
parabolic + c0 [] []

 []
parabolic      [(-1, 1, 1, -1), (0, -1, 0, 0)] []
parabolic + c0 [] []
sage: B(A,c)
[ 0 -1  0  0]
[ 1  0 -1  1]
[ 0  1  0  0]
[ 0 -1  0  0]
sage: A=CartanMatrix(['D',4])
....: c=[2,1,0,3]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_cone(B(A,c),lam(A,v),K(c[1:],v))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list(k+[c[0]] for k in K(c[1:],v)))
....:     print("\n",v)
....:     print("parabolic     ",list(map(vector,P.rays())),list(map(vector,P.li
....: nes())))
....:     print("parabolic + c0",list(map(vector,Q.rays())),list(map(vector,Q.li
....: nes())))
....: 

 [1, 0, 3, 1, 0, 3]
parabolic      [(0, -1, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0)] []

 [1, 0, 3, 1, 0]
parabolic      [(0, -1, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0)] []

 [1, 0, 3, 1, 3]
parabolic      [(0, -1, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0)] []

 [1, 0, 3, 1]
parabolic      [(1, -2, -1, 1), (0, -1, 0, 0)] []
parabolic + c0 [(1, -1, -1, 1), (0, 1, 0, 0)] []

 [1, 0, 3]
parabolic      [(-1, 1, 1, -1), (0, -1, 0, 0)] []
parabolic + c0 [] []

 [1, 0, 1]
parabolic      [(0, -1, 0, 0), (-1, 0, 1, -1)] []
parabolic + c0 [] []

 [1, 0]
parabolic      [(-1, 1, 1, -1), (0, -1, 0, 0)] []
parabolic + c0 [] []

 [1, 3, 1]
parabolic      [(0, -1, 0, 0), (-1, 0, 1, -1)] []
parabolic + c0 [] []

 [1, 3]
parabolic      [(-1, 1, 1, -1), (0, -1, 0, 0)] []
parabolic + c0 [] []

 [1]
parabolic      [(-1, 2, 1, -1), (0, -1, 0, 0)] []
parabolic + c0 [] []

 [0, 3]
parabolic      [(0, -1, 0, 0), (-1, -1, 1, -1)] []
parabolic + c0 [] []

 [0]
parabolic      [(0, -1, 0, 0), (-1, 0, 1, -1)] []
parabolic + c0 [] []

 [3]
parabolic      [(0, -1, 0, 0), (-1, 0, 1, -1)] []
parabolic + c0 [] []

 []
parabolic      [(-1, 1, 1, -1), (0, -1, 0, 0)] []
parabolic + c0 [] []
sage: A=CartanMatrix(['D',4])
....: c=[2,1,0,3]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_cone(B(A,c),lam(A,v),K(c[1:],v))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list(k+[c[0]] for k in K(c[1:],v)))
....:     print("\n",v)
....:     print("parabolic     ",list(map(vector,P.rays())),list(map(vector,P.li
....: nes())))
....:     print("parabolic + c0",list(map(vector,Q.rays())),list(map(vector,Q.li
....: nes())))
....:     print(P.intersection(Q).dimension())
....: 

 [1, 0, 3, 1, 0, 3]
parabolic      [(0, -1, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0)] []
0

 [1, 0, 3, 1, 0]
parabolic      [(0, -1, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0)] []
0

 [1, 0, 3, 1, 3]
parabolic      [(0, -1, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0)] []
0

 [1, 0, 3, 1]
parabolic      [(1, -2, -1, 1), (0, -1, 0, 0)] []
parabolic + c0 [(1, -1, -1, 1), (0, 1, 0, 0)] []
0

 [1, 0, 3]
parabolic      [(-1, 1, 1, -1), (0, -1, 0, 0)] []
parabolic + c0 [] []
0

 [1, 0, 1]
parabolic      [(0, -1, 0, 0), (-1, 0, 1, -1)] []
parabolic + c0 [] []
0

 [1, 0]
parabolic      [(-1, 1, 1, -1), (0, -1, 0, 0)] []
parabolic + c0 [] []
0

 [1, 3, 1]
parabolic      [(0, -1, 0, 0), (-1, 0, 1, -1)] []
parabolic + c0 [] []
0

 [1, 3]
parabolic      [(-1, 1, 1, -1), (0, -1, 0, 0)] []
parabolic + c0 [] []
0

 [1]
parabolic      [(-1, 2, 1, -1), (0, -1, 0, 0)] []
parabolic + c0 [] []
0

 [0, 3]
parabolic      [(0, -1, 0, 0), (-1, -1, 1, -1)] []
parabolic + c0 [] []
0

 [0]
parabolic      [(0, -1, 0, 0), (-1, 0, 1, -1)] []
parabolic + c0 [] []
0

 [3]
parabolic      [(0, -1, 0, 0), (-1, 0, 1, -1)] []
parabolic + c0 [] []
0

 []
parabolic      [(-1, 1, 1, -1), (0, -1, 0, 0)] []
parabolic + c0 [] []
0
sage: B(A,c)
[ 0 -1  0  0]
[ 1  0 -1  1]
[ 0  1  0  0]
[ 0 -1  0  0]
sage: 
sage: A=CartanMatrix(['D',4])
....: c=[2,1,0,3]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_cone(B(A,c),lam(A,v),K(c[1:],v))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list(k+[c[0]] for k in K(c[1:],v)))
....:     print("\n",v)
....:     print("parabolic     ",list(map(vector,P.rays())),list(map(vector,P.li
....: nes())))
....:     print("parabolic + c0",list(map(vector,Q.rays())),list(map(vector,Q.li
....: nes())))
....:     print(P.intersection(Q).dimension())
....: 

 [1, 0, 3, 1, 0, 3]
parabolic      [(0, -1, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0)] []
0

 [1, 0, 3, 1, 0]
parabolic      [(0, -1, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0)] []
0

 [1, 0, 3, 1, 3]
parabolic      [(0, -1, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0)] []
0

 [1, 0, 3, 1]
parabolic      [(1, -2, -1, 1), (0, -1, 0, 0)] []
parabolic + c0 [(1, -1, -1, 1), (0, 1, 0, 0)] []
0

 [1, 0, 3]
parabolic      [(-1, 1, 1, -1), (0, -1, 0, 0)] []
parabolic + c0 [] []
0

 [1, 0, 1]
parabolic      [(0, -1, 0, 0), (-1, 0, 1, -1)] []
parabolic + c0 [] []
0

 [1, 0]
parabolic      [(-1, 1, 1, -1), (0, -1, 0, 0)] []
parabolic + c0 [] []
0

 [1, 3, 1]
parabolic      [(0, -1, 0, 0), (-1, 0, 1, -1)] []
parabolic + c0 [] []
0

 [1, 3]
parabolic      [(-1, 1, 1, -1), (0, -1, 0, 0)] []
parabolic + c0 [] []
0

 [1]
parabolic      [(-1, 2, 1, -1), (0, -1, 0, 0)] []
parabolic + c0 [] []
0

 [0, 3]
parabolic      [(0, -1, 0, 0), (-1, -1, 1, -1)] []
parabolic + c0 [] []
0

 [0]
parabolic      [(0, -1, 0, 0), (-1, 0, 1, -1)] []
parabolic + c0 [] []
0

 [3]
parabolic      [(0, -1, 0, 0), (-1, 0, 1, -1)] []
parabolic + c0 [] []
0

 []
parabolic      [(-1, 1, 1, -1), (0, -1, 0, 0)] []
parabolic + c0 [] []
0
sage: A=CartanMatrix(['D',5])
....: c=[2,1,0,3,4]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_cone(B(A,c),lam(A,v),K(c[1:],v))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list(k+[c[0]] for k in K(c[1:],v)))
....:     print("\n",v)
....:     print("parabolic     ",list(map(vector,P.rays())),list(map(vector,P.li
....: nes())))
....:     print("parabolic + c0",list(map(vector,Q.rays())),list(map(vector,Q.li
....: nes())))
....:     print(P.intersection(Q).dimension())

 [1, 0, 3, 4, 1]
parabolic      [(0, -1, 0, -1, -1)] []
parabolic + c0 [(0, 1, 0, 1, 1)] []
0

 [1, 0, 3, 4]
parabolic      [(0, -1, 0, -1, -1)] []
parabolic + c0 [(0, 1, 0, 1, 1)] []
0

 [1, 0, 3, 1]
parabolic      [(0, -1, 1, -1, -1), (0, -1, 0, -1, -1)] []
parabolic + c0 [] []
0

 [1, 0, 3]
parabolic      [(0, -1, 1, -1, -1), (0, -1, 0, -1, -1)] []
parabolic + c0 [] []
0

 [1, 0, 4, 1]
parabolic      [(0, -1, 1, -1, -1), (0, -1, 0, -1, -1)] []
parabolic + c0 [] []
0

 [1, 0, 4]
parabolic      [(0, -1, 1, -1, -1), (0, -1, 0, -1, -1)] []
parabolic + c0 [] []
0

 [1, 0, 1]
parabolic      [(0, -1, 2, -1, -1), (0, -1, 0, -1, -1)] []
parabolic + c0 [] []
0

 [1, 0]
parabolic      [(0, -1, 2, -1, -1), (0, -1, 0, -1, -1)] []
parabolic + c0 [] []
0

 [1, 3, 4]
parabolic      [(0, -1, 0, -1, -1), (-1, 0, 1, -1, -1)] []
parabolic + c0 [] []
0

 [1, 3]
parabolic      [(0, -1, 1, -1, -1), (-1, 0, 2, -1, -1), (-1, 0, 1, -1, -1), (0, -1, 0, -1, -1)] []
parabolic + c0 [] []
0

 [1, 4]
parabolic      [(0, -1, 1, -1, -1), (-1, 0, 2, -1, -1), (-1, 0, 1, -1, -1), (0, -1, 0, -1, -1)] []
parabolic + c0 [] []
0

 [1]
parabolic      [(0, -1, 2, -1, -1), (-1, 0, 3, -1, -1), (-1, 0, 1, -1, -1), (0, -1, 0, -1, -1)] []
parabolic + c0 [] []
0

 [0, 3, 4]
parabolic      [(-1, -1, 1, -1, -1), (0, -1, 0, -1, -1)] []
parabolic + c0 [] []
0

 [0, 3]
parabolic      [(0, -1, 1, -1, -1), (-1, -1, 2, -1, -1), (-1, -1, 1, -1, -1), (0, -1, 0, -1, -1)] []
parabolic + c0 [] []
0

 [0, 4]
parabolic      [(0, -1, 1, -1, -1), (-1, -1, 2, -1, -1), (-1, -1, 1, -1, -1), (0, -1, 0, -1, -1)] []
parabolic + c0 [] []
0

 [0]
parabolic      [(0, -1, 2, -1, -1), (-1, -1, 3, -1, -1), (-1, -1, 1, -1, -1), (0, -1, 0, -1, -1)] []
parabolic + c0 [] []
0

 [3, 4]
parabolic      [(-1, 0, 1, -1, -1), (0, -1, 0, -1, -1), (-1, -1, 1, -1, -1)] []
parabolic + c0 [] []
0

 [3]
parabolic      [(-1, -1, 2, -1, -1), (-1, 0, 2, -1, -1), (0, -1, 1, -1, -1), (0, -1, 0, -1, -1), (-1, -1, 1, -1, -1), (-1, 0, 1, -1, -1)] []
parabolic + c0 [] []
0

 [4]
parabolic      [(-1, -1, 2, -1, -1), (-1, 0, 2, -1, -1), (0, -1, 1, -1, -1), (0, -1, 0, -1, -1), (-1, -1, 1, -1, -1), (-1, 0, 1, -1, -1)] []
parabolic + c0 [] []
0

 []
parabolic      [(-1, -1, 3, -1, -1), (-1, 0, 3, -1, -1), (0, -1, 2, -1, -1), (0, -1, 0, -1, -1), (-1, -1, 1, -1, -1), (-1, 0, 1, -1, -1)] []
parabolic + c0 [] []
0
sage: B(A,c)
[ 0 -1  0  0  0]
[ 1  0 -1  0  0]
[ 0  1  0  1  1]
[ 0  0 -1  0  0]
[ 0  0 -1  0  0]
sage: A=CartanMatrix(['D',5])
....: c=[0,1,2,3,4]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_cone(B(A,c),lam(A,v),K(c[1:],v))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list(k+[c[0]] for k in K(c[1:],v)))
....:     print("\n",v)
....:     print("parabolic     ",list(map(vector,P.rays())),list(map(vector,P.li
....: nes())))
....:     print("parabolic + c0",list(map(vector,Q.rays())),list(map(vector,Q.li
....: nes())))
....:     print(P.intersection(Q).dimension())

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
parabolic      [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []
0

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
parabolic      [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []
0

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 4]
parabolic      [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []
0

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
parabolic      [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []
0

 [1, 2, 3, 4, 1, 2, 3, 4, 1]
parabolic      [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []
0

 [1, 2, 3, 4, 1, 2, 3, 4]
parabolic      [(0, -1, 0, 0, 0), (1, 0, 1, -1, -1)] []
parabolic + c0 [] []
0

 [1, 2, 3, 4, 1, 2, 3, 1, 2]
parabolic      [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []
0

 [1, 2, 3, 4, 1, 2, 3, 1]
parabolic      [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []
0

 [1, 2, 3, 4, 1, 2, 3]
parabolic      [(0, -1, 0, 0, 0), (1, 0, 1, -1, -1), (0, -1, 1, 0, 0)] []
parabolic + c0 [] []
0

 [1, 2, 3, 4, 1, 2, 4, 1, 2]
parabolic      [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []
0

 [1, 2, 3, 4, 1, 2, 4, 1]
parabolic      [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []
0

 [1, 2, 3, 4, 1, 2, 4]
parabolic      [(0, -1, 0, 0, 0), (1, 0, 1, -1, -1), (0, -1, 1, 0, 0)] []
parabolic + c0 [] []
0

 [1, 2, 3, 4, 1, 2, 1]
parabolic      [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []
0

 [1, 2, 3, 4, 1, 2]
parabolic      [(0, -1, 0, 0, 0), (1, 0, 1, -1, -1)] []
parabolic + c0 [] []
0

 [1, 2, 3, 4, 1]
parabolic      [(0, -1, 0, 0, 0), (1, 0, 1, -1, -1), (0, -1, 1, 0, 0), (0, 0, 1, -1, -1), (1, 1, 1, -2, -2)] []
parabolic + c0 [] []
0

 [1, 2, 3, 4, 2, 3, 4]
parabolic      [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []
0

 [1, 2, 3, 4, 2, 3]
parabolic      [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []
0

 [1, 2, 3, 4, 2, 4]
parabolic      [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []
0

 [1, 2, 3, 4, 2]
parabolic      [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []
0

 [1, 2, 3, 4]
parabolic      [(0, -1, 0, 0, 0), (0, -1, 1, 0, 0), (1, 0, 1, -1, -1)] []
parabolic + c0 [] []
0

 [1, 2, 3, 1, 2, 1]
parabolic      [(1, 0, 0, -1, -1), (0, -1, 0, 0, 0)] []
parabolic + c0 [] []
0

 [1, 2, 3, 1, 2]
parabolic      [(1, 0, 0, -1, -1), (1, 0, 1, -1, -1), (0, -1, 0, 0, 0)] []
parabolic + c0 [] []
0

 [1, 2, 3, 1]
parabolic      [(1, 0, 1, -1, -1), (0, -1, 1, 0, 0), (0, -1, 0, 0, 0), (0, 0, 1, -1, -1), (1, 1, 1, -2, -2), (1, 0, 0, -1, -1)] []
parabolic + c0 [] []
0

 [1, 2, 3, 2]
parabolic      [(1, 0, 0, -1, -1), (0, -1, 0, 0, 0)] []
parabolic + c0 [] []
0

 [1, 2, 3]
parabolic      [(0, -1, 0, 0, 0), (0, -1, 1, 0, 0), (1, 0, 1, -1, -1), (1, 0, 0, -1, -1)] []
parabolic + c0 [] []
0

 [1, 2, 4, 1, 2, 1]
parabolic      [(1, 0, 0, -1, -1), (0, -1, 0, 0, 0)] []
parabolic + c0 [] []
0

 [1, 2, 4, 1, 2]
parabolic      [(1, 0, 0, -1, -1), (1, 0, 1, -1, -1), (0, -1, 0, 0, 0)] []
parabolic + c0 [] []
0

 [1, 2, 4, 1]
parabolic      [(1, 0, 1, -1, -1), (0, -1, 1, 0, 0), (0, -1, 0, 0, 0), (0, 0, 1, -1, -1), (1, 1, 1, -2, -2), (1, 0, 0, -1, -1)] []
parabolic + c0 [] []
0

 [1, 2, 4, 2]
parabolic      [(1, 0, 0, -1, -1), (0, -1, 0, 0, 0)] []
parabolic + c0 [] []
0

 [1, 2, 4]
parabolic      [(0, -1, 0, 0, 0), (0, -1, 1, 0, 0), (1, 0, 1, -1, -1), (1, 0, 0, -1, -1)] []
parabolic + c0 [] []
0

 [1, 2, 1]
parabolic      [(0, -1, 0, 0, 0), (1, 0, 1, -1, -1), (1, 1, 1, -2, -2), (2, 1, 0, -2, -2)] []
parabolic + c0 [] []
0

 [1, 2]
parabolic      [(0, -1, 0, 0, 0), (1, 0, 1, -1, -1), (2, 1, 0, -2, -2)] []
parabolic + c0 [] []
0

 [1, 3, 4]
parabolic      [(1, 0, -1, -1, -1), (0, -1, 0, 0, 0)] []
parabolic + c0 [] []
0

 [1, 3]
parabolic      [(0, -1, 0, 0, 0), (1, 0, 0, -1, -1), (1, 0, -1, -1, -1)] []
parabolic + c0 [] []
0

 [1, 4]
parabolic      [(0, -1, 0, 0, 0), (1, 0, 0, -1, -1), (1, 0, -1, -1, -1)] []
parabolic + c0 [] []
0

 [1]
parabolic      [(0, -1, 0, 0, 0), (1, 0, 1, -1, -1), (1, 0, -1, -1, -1)] []
parabolic + c0 [] []
0

 [2, 3, 4, 2, 3, 4]
parabolic      [(1, -1, -1, 0, 0), (0, -1, 0, 0, 0)] []
parabolic + c0 [] []
0

 [2, 3, 4, 2, 3]
parabolic      [(1, -1, -1, 0, 0), (0, -1, 0, 0, 0)] []
parabolic + c0 [] []
0

 [2, 3, 4, 2, 4]
parabolic      [(1, -1, -1, 0, 0), (0, -1, 0, 0, 0)] []
parabolic + c0 [] []
0

 [2, 3, 4, 2]
parabolic      [(1, -1, -1, 0, 0), (0, -1, 0, 0, 0)] []
parabolic + c0 [] []
0

 [2, 3, 4]
parabolic      [(1, -1, -1, 0, 0), (1, 0, 1, -1, -1), (0, -1, 0, 0, 0), (1, -1, 0, 0, 0)] []
parabolic + c0 [] []
0

 [2, 3, 2]
parabolic      [(1, 0, 0, -1, -1), (1, -1, -1, 0, 0), (0, -1, 0, 0, 0)] []
parabolic + c0 [] []
0

 [2, 3]
parabolic      [(0, -1, 0, 0, 0), (1, -1, 0, 0, 0), (1, 0, 1, -1, -1), (1, 0, 0, -1, -1), (1, -1, -1, 0, 0)] []
parabolic + c0 [] []
0

 [2, 4, 2]
parabolic      [(1, 0, 0, -1, -1), (1, -1, -1, 0, 0), (0, -1, 0, 0, 0)] []
parabolic + c0 [] []
0

 [2, 4]
parabolic      [(0, -1, 0, 0, 0), (1, -1, 0, 0, 0), (1, 0, 1, -1, -1), (1, 0, 0, -1, -1), (1, -1, -1, 0, 0)] []
parabolic + c0 [] []
0

 [2]
parabolic      [(0, -1, 0, 0, 0), (1, -1, -1, 0, 0), (1, 0, 1, -1, -1), (1, 1, 1, -2, -2)] []
parabolic + c0 [] []
0

 [3, 4]
parabolic      [(1, 0, -1, -1, -1), (0, -1, 0, 0, 0), (1, -1, -1, 0, 0)] []
parabolic + c0 [] []
0

 [3]
parabolic      [(1, 0, 0, -1, -1), (1, -1, -1, 0, 0), (0, -1, 0, 0, 0), (1, 0, -1, -1, -1)] []
parabolic + c0 [] []
0

 [4]
parabolic      [(1, 0, 0, -1, -1), (1, -1, -1, 0, 0), (0, -1, 0, 0, 0), (1, 0, -1, -1, -1)] []
parabolic + c0 [] []
0

 []
parabolic      [(1, 0, 1, -1, -1), (0, -1, 0, 0, 0), (1, 0, -1, -1, -1), (1, -1, -1, 0, 0)] []
parabolic + c0 [] []
0
sage: B(A,c)
[ 0  1  0  0  0]
[-1  0  1  0  0]
[ 0 -1  0  1  1]
[ 0  0 -1  0  0]
[ 0  0 -1  0  0]
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_cone(B(A,c),lam(A,v),K(c[1:],v))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list(k+[c[0]] for k in K(c[1:],v)))
....:     print("\n",v)
....:     print("parabolic     ",list(map(vector,P.rays())),list(map(vector,P.li
....: nes())))
....:     print("parabolic + c0",list(map(vector,Q.rays())),list(map(vector,Q.li
....: nes())))
....:     print(P.intersection(Q).dimension())

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
parabolic      [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []
0

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
parabolic      [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []
0

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
parabolic      [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []
0

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1]
parabolic      [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []
0

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
parabolic      [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1)] []
parabolic + c0 [] []
0

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2]
parabolic      [(0, -2, -1, 0, 1), (0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0), (0, 0, -1, 0, 1)] []
0

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1]
parabolic      [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []
0

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
parabolic      [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1)] []
parabolic + c0 [] []
0

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1]
parabolic      [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []
0

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
parabolic      [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1)] []
parabolic + c0 [] []
0

 [1, 2, 3, 4, 1, 2, 3, 4, 1]
parabolic      [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (1, 0, 1, 1, -2)] []
parabolic + c0 [] []
0

 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4]
parabolic      [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []
0

 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3]
parabolic      [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []
0

 [1, 2, 3, 4, 1, 2, 3, 4, 2]
parabolic      [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []
0

 [1, 2, 3, 4, 1, 2, 3, 4]
parabolic      [(1, 0, 0, 1, -1), (0, -1, 0, 0, 0)] []
parabolic + c0 [] []
0

 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
parabolic      [(0, -1, 0, 1, 0), (0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0), (0, 1, 0, 1, 0)] []
0

 [1, 2, 3, 4, 1, 2, 3, 1, 2]
parabolic      [(0, -1, 0, 0, 0), (0, -2, -1, 1, 1), (1, 0, 0, 1, -1), (0, -1, 0, 1, 0), (-1, -4, -1, 2, 2)] []
parabolic + c0 [] []
0

 [1, 2, 3, 4, 1, 2, 3, 1]
parabolic      [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (1, 0, 1, 1, -2), (0, -2, 0, 1, 0)] []
parabolic + c0 [] []
0

 [1, 2, 3, 4, 1, 2, 3, 2]
parabolic      [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []
0

 [1, 2, 3, 4, 1, 2, 3]
parabolic      [(1, 0, 0, 1, -1), (0, -1, 0, 0, 0)] []
parabolic + c0 [] []
0

 [1, 2, 3, 4, 1, 2, 1]
parabolic      [(0, -1, 0, 0, 0), (0, -1, 0, 1, 0), (1, 1, 1, 0, -2), (1, 0, 0, 1, -1), (0, 0, 1, 0, -1)] []
parabolic + c0 [] []
0

 [1, 2, 3, 4, 1, 2]
parabolic      [(0, -1, 0, 0, 0), (0, -1, 0, 1, 0), (1, 0, 0, 1, -1), (1, 1, 1, 0, -2), (0, 0, 1, 0, -1)] []
parabolic + c0 [] []
0

 [1, 2, 3, 4, 1, 3, 4]
parabolic      [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []
0

 [1, 2, 3, 4, 1, 3]
parabolic      [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []
0

 [1, 2, 3, 4, 1]
parabolic      [(0, -1, 0, 0, 0), (0, -1, 0, 1, 0), (1, 0, 0, 1, -1)] []
parabolic + c0 [] []
0

 [1, 2, 3, 4, 2, 3, 4, 2, 3, 4]
parabolic      [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []
0

 [1, 2, 3, 4, 2, 3, 4, 2, 3]
parabolic      [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []
0

 [1, 2, 3, 4, 2, 3, 4, 2]
parabolic      [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []
0

 [1, 2, 3, 4, 2, 3, 4]
parabolic      [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1)] []
parabolic + c0 [] []
0

 [1, 2, 3, 4, 2, 3, 2]
parabolic      [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []
0

 [1, 2, 3, 4, 2, 3]
parabolic      [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1)] []
parabolic + c0 [] []
0

 [1, 2, 3, 4, 2]
parabolic      [(0, -1, 0, 0, 0), (0, -1, 0, 1, 0), (1, 0, 0, 1, -1), (1, 0, 1, 1, -2), (0, -1, 1, 1, -1)] []
parabolic + c0 [] []
0

 [1, 2, 3, 4, 3, 4]
parabolic      [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []
0

 [1, 2, 3, 4, 3]
parabolic      [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0)] []
0

 [1, 2, 3, 4]
parabolic      [(0, -1, 0, 0, 0), (0, -1, 0, 1, 0), (1, 0, 0, 1, -1)] []
parabolic + c0 [] []
0

 [1, 2, 3, 1, 2, 1]
parabolic      [(0, -1, 0, 1, 0), (1, -1, 0, 3, -1), (0, -1, 0, 0, 0), (2, 1, 0, 0, -2), (1, 1, 1, 0, -2), (1, 0, 1, 2, -2)] []
parabolic + c0 [] []
0

 [1, 2, 3, 1, 2]
parabolic      [(1, 0, 0, 1, -1), (0, -1, 0, 0, 0), (2, 1, 0, 0, -2), (1, 1, 1, 0, -2)] []
parabolic + c0 [] []
0

 [1, 2, 3, 1]
parabolic      [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (2, 1, 0, 0, -2)] []
parabolic + c0 [] []
0

 [1, 2, 3, 2]
parabolic      [(0, -1, 0, 0, 0), (0, -1, 2, 2, -2), (2, 1, 0, 0, -2), (1, 0, 0, 1, -1), (0, -1, 1, 2, -1)] []
parabolic + c0 [] []
0

 [1, 2, 3]
parabolic      [(0, -1, 0, 0, 0), (2, 1, 0, 0, -2), (1, 0, 0, 1, -1)] []
parabolic + c0 [] []
0

 [1, 2, 4, 1]
parabolic      [(1, 0, 0, -1, -1), (0, -1, 0, 0, 0)] []
parabolic + c0 [] []
0

 [1, 2, 4]
parabolic      [(1, 0, 0, -1, -1), (0, -1, 0, 0, 0)] []
parabolic + c0 [] []
0

 [1, 2, 1]
parabolic      [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (1, 0, 0, -1, -1)] []
parabolic + c0 [] []
0

 [1, 2]
parabolic      [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (0, -1, 1, 1, -1), (0, -1, 1, 0, -1), (1, 0, 0, -1, -1)] []
parabolic + c0 [] []
0

 [1, 3, 4, 3, 4]
parabolic      [(1, 0, -1, -1, 0), (0, -1, 0, 0, 0)] []
parabolic + c0 [] []
0

 [1, 3, 4, 3]
parabolic      [(1, 0, -1, -1, 0), (0, -1, 0, 0, 0)] []
parabolic + c0 [] []
0

 [1, 3, 4]
parabolic      [(0, -1, 0, 0, 0), (1, 0, -1, -1, 0), (1, 0, -1, 0, 0), (1, 0, 0, 1, -1)] []
parabolic + c0 [] []
0

 [1, 3]
parabolic      [(0, -1, 0, 0, 0), (1, 0, -1, -1, 0), (1, 0, 1, 1, -2), (1, 0, 0, 1, -1)] []
parabolic + c0 [] []
0

 [1, 4]
parabolic      [(0, -1, 0, 0, 0), (1, 0, 0, -1, -1), (1, 0, -1, -1, 0)] []
parabolic + c0 [] []
0

 [1]
parabolic      [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (1, 0, 0, -1, -1), (1, 0, -1, -1, 0)] []
parabolic + c0 [] []
0

 [2, 3, 4, 2, 3, 4, 2, 3, 4]
parabolic      [(1, -1, -1, 0, 0), (0, -1, 0, 0, 0)] []
parabolic + c0 [] []
0

 [2, 3, 4, 2, 3, 4, 2, 3]
parabolic      [(1, -1, -1, 0, 0), (0, -1, 0, 0, 0)] []
parabolic + c0 [] []
0

 [2, 3, 4, 2, 3, 4, 2]
parabolic      [(1, -1, -1, 0, 0), (0, -1, 0, 0, 0)] []
parabolic + c0 [] []
0

 [2, 3, 4, 2, 3, 4]
parabolic      [(1, -1, -1, 0, 0), (0, -1, 0, 0, 0), (1, 0, 0, 1, -1)] []
parabolic + c0 [] []
0

 [2, 3, 4, 2, 3, 2]
parabolic      [(1, -1, -1, 0, 0), (0, -1, 0, 0, 0), (0, -2, -1, 0, 1), (2, -2, -3, 0, 1)] []
parabolic + c0 [(0, 0, -1, 0, 1)] []
0

 [2, 3, 4, 2, 3]
parabolic      [(1, -1, -1, 0, 0), (0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (2, -1, -2, 1, 0), (3, -3, -4, 1, 1)] []
parabolic + c0 [] []
0

 [2, 3, 4, 2]
parabolic      [(1, -1, -1, 1, 0), (1, -1, -1, 0, 0), (0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (1, 0, 1, 1, -2)] []
parabolic + c0 [] []
0

 [2, 3, 4, 3, 4]
parabolic      [(1, -1, -1, 0, 0), (0, -1, 0, 0, 0)] []
parabolic + c0 [] []
0

 [2, 3, 4, 3]
parabolic      [(1, -1, -1, 0, 0), (0, -1, 0, 0, 0)] []
parabolic + c0 [] []
0

 [2, 3, 4]
parabolic      [(1, 0, 0, 1, -1), (1, -1, -1, 0, 0), (0, -1, 0, 0, 0), (1, -1, -1, 1, 0)] []
parabolic + c0 [] []
0

 [2, 3, 2]
parabolic      [(0, -1, 0, 1, 0), (1, -1, -1, 1, 0), (2, -1, -1, 3, -1), (0, -1, 0, 0, 0), (1, 1, 1, 0, -2), (1, -1, -1, 0, 0)] []
parabolic + c0 [] []
0

 [2, 3]
parabolic      [(1, -1, -1, 0, 0), (0, -1, 0, 0, 0), (3, -3, -1, 4, -2), (1, 1, 1, 0, -2), (1, 0, 0, 1, -1)] []
parabolic + c0 [] []
0

 [2, 4]
parabolic      [(1, 0, 0, -1, -1), (1, -1, -1, 0, 0), (0, -1, 0, 0, 0)] []
parabolic + c0 [] []
0

 [2]
parabolic      [(1, -1, -1, 0, 0), (0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (1, 0, 0, -1, -1)] []
parabolic + c0 [] []
0

 [3, 4, 3, 4]
parabolic      [(1, 0, -1, -1, 0), (0, -1, 0, 0, 0), (1, -1, -1, 0, 0)] []
parabolic + c0 [] []
0

 [3, 4, 3]
parabolic      [(1, 0, -1, -1, 0), (0, -1, 0, 0, 0), (1, -1, -1, 0, 0), (1, -1, -2, -2, 1)] []
parabolic + c0 [] []
0

 [3, 4]
parabolic      [(1, 0, -1, 0, 0), (1, 0, -1, -1, 0), (0, -1, 0, 0, 0), (1, 0, 0, 1, -1)] []
parabolic + c0 [] []
0

 [3]
parabolic      [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (1, 0, -1, -1, 0), (1, 0, 1, 1, -2), (1, -1, -1, 0, 0), (2, -2, -1, 2, -1)] []
parabolic + c0 [] []
0

 [4]
parabolic      [(1, 0, 0, -1, -1), (0, -1, 0, 0, 0), (1, -1, -1, 0, 0), (1, 0, -1, -1, 0)] []
parabolic + c0 [] []
0

 []
parabolic      [(0, -1, 0, 0, 0), (1, 0, -1, -1, 0), (1, 0, 0, -1, -1), (1, 0, 0, 1, -1), (1, -1, -1, 0, 0)] []
parabolic + c0 [] []
0
sage: B(A,c)
[ 0  1  0  0  0]
[-1  0  1  0  0]
[ 0 -1  0  1  0]
[ 0  0 -1  0  2]
[ 0  0  0 -1  0]
### reloading attached file domination4.py modified at 14:24:50 ###
### reloading attached file domination4.py modified at 14:25:52 ###
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....: 
....: 
1 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
2 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
3 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
4 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1] 0
5 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
6 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
7 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1] 0
8 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
9 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1] 0
10 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
11 [1, 2, 3, 4, 1, 2, 3, 4, 1] 0
12 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4] 0
13 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3] 0
14 [1, 2, 3, 4, 1, 2, 3, 4, 2] 0
15 [1, 2, 3, 4, 1, 2, 3, 4] 0
16 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
17 [1, 2, 3, 4, 1, 2, 3, 1, 2] 0
18 [1, 2, 3, 4, 1, 2, 3, 1] 0
19 [1, 2, 3, 4, 1, 2, 3, 2] 0
20 [1, 2, 3, 4, 1, 2, 3] 0
21 [1, 2, 3, 4, 1, 2, 1] 0
22 [1, 2, 3, 4, 1, 2] 0
23 [1, 2, 3, 4, 1, 3, 4] 0
24 [1, 2, 3, 4, 1, 3] 0
25 [1, 2, 3, 4, 1] 0
26 [1, 2, 3, 4, 2, 3, 4, 2, 3, 4] 0
27 [1, 2, 3, 4, 2, 3, 4, 2, 3] 0
28 [1, 2, 3, 4, 2, 3, 4, 2] 0
29 [1, 2, 3, 4, 2, 3, 4] 0
30 [1, 2, 3, 4, 2, 3, 2] 0
31 [1, 2, 3, 4, 2, 3] 0
32 [1, 2, 3, 4, 2] 0
33 [1, 2, 3, 4, 3, 4] 0
34 [1, 2, 3, 4, 3] 0
35 [1, 2, 3, 4] 0
36 [1, 2, 3, 1, 2, 1] 0
37 [1, 2, 3, 1, 2] 0
38 [1, 2, 3, 1] 0
39 [1, 2, 3, 2] 0
40 [1, 2, 3] 0
41 [1, 2, 4, 1] 0
42 [1, 2, 4] 0
43 [1, 2, 1] 0
44 [1, 2] 0
45 [1, 3, 4, 3, 4] 0
46 [1, 3, 4, 3] 0
47 [1, 3, 4] 0
48 [1, 3] 0
49 [1, 4] 0
50 [1] 0
51 [2, 3, 4, 2, 3, 4, 2, 3, 4] 0
52 [2, 3, 4, 2, 3, 4, 2, 3] 0
53 [2, 3, 4, 2, 3, 4, 2] 0
54 [2, 3, 4, 2, 3, 4] 0
55 [2, 3, 4, 2, 3, 2] 0
56 [2, 3, 4, 2, 3] 0
57 [2, 3, 4, 2] 0
58 [2, 3, 4, 3, 4] 0
59 [2, 3, 4, 3] 0
60 [2, 3, 4] 0
61 [2, 3, 2] 0
62 [2, 3] 0
63 [2, 4] 0
64 [2] 0
65 [3, 4, 3, 4] 0
66 [3, 4, 3] 0
67 [3, 4] 0
68 [3] 0
69 [4] 0
70 [] 0
### reloading attached file domination4.py modified at 14:27:40 ###
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....: 
1 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
2 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
3 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
4 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1] 0
5 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
6 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
7 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1] 0
8 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
9 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1] 0
10 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
11 [1, 2, 3, 4, 1, 2, 3, 4, 1] 0
12 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4] 0
13 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3] 0
14 [1, 2, 3, 4, 1, 2, 3, 4, 2] 0
15 [1, 2, 3, 4, 1, 2, 3, 4] 0
16 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
17 [1, 2, 3, 4, 1, 2, 3, 1, 2] 0
18 [1, 2, 3, 4, 1, 2, 3, 1] 0
19 [1, 2, 3, 4, 1, 2, 3, 2] 0
20 [1, 2, 3, 4, 1, 2, 3] 0
21 [1, 2, 3, 4, 1, 2, 1] 0
22 [1, 2, 3, 4, 1, 2] 0
23 [1, 2, 3, 4, 1, 3, 4] 0
24 [1, 2, 3, 4, 1, 3] 0
25 [1, 2, 3, 4, 1] 0
26 [1, 2, 3, 4, 2, 3, 4, 2, 3, 4] 0
27 [1, 2, 3, 4, 2, 3, 4, 2, 3] 0
28 [1, 2, 3, 4, 2, 3, 4, 2] 0
29 [1, 2, 3, 4, 2, 3, 4] 0
30 [1, 2, 3, 4, 2, 3, 2] 0
31 [1, 2, 3, 4, 2, 3] 0
32 [1, 2, 3, 4, 2] 0
33 [1, 2, 3, 4, 3, 4] 0
34 [1, 2, 3, 4, 3] 0
35 [1, 2, 3, 4] 0
36 [1, 2, 3, 1, 2, 1] 0
37 [1, 2, 3, 1, 2] 0
38 [1, 2, 3, 1] 0
39 [1, 2, 3, 2] 0
40 [1, 2, 3] 0
41 [1, 2, 4, 1] 0
42 [1, 2, 4] 0
43 [1, 2, 1] 0
44 [1, 2] 0
45 [1, 3, 4, 3, 4] 0
46 [1, 3, 4, 3] 0
47 [1, 3, 4] 0
48 [1, 3] 0
49 [1, 4] 0
50 [1] 0
51 [2, 3, 4, 2, 3, 4, 2, 3, 4] 0
52 [2, 3, 4, 2, 3, 4, 2, 3] 0
53 [2, 3, 4, 2, 3, 4, 2] 0
54 [2, 3, 4, 2, 3, 4] 0
55 [2, 3, 4, 2, 3, 2] 0
56 [2, 3, 4, 2, 3] 0
57 [2, 3, 4, 2] 0
58 [2, 3, 4, 3, 4] 0
59 [2, 3, 4, 3] 0
60 [2, 3, 4] 0
61 [2, 3, 2] 0
62 [2, 3] 0
63 [2, 4] 0
64 [2] 0
65 [3, 4, 3, 4] 0
66 [3, 4, 3] 0
67 [3, 4] 0
68 [3] 0
69 [4] 0
70 [] 0
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....: 
1 [1, 2, 1, 2] 0
2 [1, 2, 1] 0
3 [1, 2] 1
Failure!
4 [1] 1
Failure!
5 [2] 0
6 [] 0
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....: 
1 [1, 2, 3, 1, 2, 3, 1, 2, 3] 0
2 [1, 2, 3, 1, 2, 3, 1, 2] 0
3 [1, 2, 3, 1, 2, 3, 1] 0
4 [1, 2, 3, 1, 2, 3] 0
5 [1, 2, 3, 1, 2, 1] 0
6 [1, 2, 3, 1, 2] 0
7 [1, 2, 3, 1] 0
8 [1, 2, 3, 2, 3] 0
9 [1, 2, 3, 2] 0
10 [1, 2, 3] 0
11 [1, 2, 1] 0
12 [1, 2] 0
13 [1, 3] 0
14 [1] 0
15 [2, 3, 2, 3] 0
16 [2, 3, 2] 0
17 [2, 3] 0
18 [2] 0
19 [3] 0
20 [] 0
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....: 
---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
Cell In [806], line 6
      4 for v in sortables(A,c[Integer(1):]):
      5     num+=Integer(1)
----> 6     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
      7     d=P.dimension()
      8     print(num,v,d)

File ~/git/affine_dominance/software/domination4.py:199, in B(A, c)
    197     out[i,i]=0
    198     for j in range(i+1,n):
--> 199         out[c[i],c[j]]=-A[c[i],c[j]]
    200         out[c[j],c[i]]=A[c[j],c[i]]
    201 return out

IndexError: list index out of range
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....: 
1 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
2 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
3 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
4 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1] 0
5 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
6 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
7 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1] 0
8 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
9 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1] 0
10 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
11 [1, 2, 3, 4, 1, 2, 3, 4, 1] 0
12 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4] 0
13 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3] 0
14 [1, 2, 3, 4, 1, 2, 3, 4, 2] 0
15 [1, 2, 3, 4, 1, 2, 3, 4] 0
16 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
17 [1, 2, 3, 4, 1, 2, 3, 1, 2] 0
18 [1, 2, 3, 4, 1, 2, 3, 1] 0
19 [1, 2, 3, 4, 1, 2, 3, 2] 0
20 [1, 2, 3, 4, 1, 2, 3] 0
21 [1, 2, 3, 4, 1, 2, 1] 0
22 [1, 2, 3, 4, 1, 2] 0
23 [1, 2, 3, 4, 1, 3, 4] 0
24 [1, 2, 3, 4, 1, 3] 0
25 [1, 2, 3, 4, 1] 0
26 [1, 2, 3, 4, 2, 3, 4, 2, 3, 4] 0
27 [1, 2, 3, 4, 2, 3, 4, 2, 3] 0
28 [1, 2, 3, 4, 2, 3, 4, 2] 0
29 [1, 2, 3, 4, 2, 3, 4] 0
30 [1, 2, 3, 4, 2, 3, 2] 0
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [807], line 6
      4 for v in sortables(A,c[Integer(1):]):
      5     num+=Integer(1)
----> 6     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
      7     d=P.dimension()
      8     print(num,v,d)

File ~/git/affine_dominance/software/domination4.py:127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_faster(B, la, seqs[0])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_faster(B, la, s))
    128     if P.dimension()==0:
    129         break

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1371, in Polyhedron_base5.intersection(self, other)
   1369 parent = self.parent()
   1370 try:
-> 1371     intersection = parent.element_class(parent, None, [new_ieqs, new_eqns])
   1373     # Force calculation of the vertices.
   1374     _ = intersection.n_vertices()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:179, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    177 elif Hrep is not None:
    178     ieqs, eqns = Hrep
--> 179     self._init_from_Hrepresentation(ieqs, eqns, **kwds)
    180 else:
    181     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:129, in Polyhedron_ppl._init_from_Hrepresentation(self, ieqs, eqns, minimize, verbose)
    106 def _init_from_Hrepresentation(self, ieqs, eqns, minimize=True, verbose=False):
    107     """
    108     Construct polyhedron from H-representation data.
    109 
   (...)
    127         sage: Polyhedron_ppl._init_from_Hrepresentation(p, [], [])
    128     """
--> 129     cs = self._convert_constraints_to_ppl(ieqs, eqns)
    130     if cs.empty():
    131         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'universe')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:534, in Polyhedron_ppl._convert_constraints_to_ppl(ieqs, eqns)
    532     ieqs = []
    533 for ieq in ieqs:
--> 534     cs.insert(Polyhedron_ppl._convert_constraint_to_ppl(ieq, INEQUALITY))
    535 if eqns is None:
    536     eqns = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:509, in Polyhedron_ppl._convert_constraint_to_ppl(c, typ)
    507 A = dc[1:]
    508 if typ == INEQUALITY:
--> 509     return Linear_Expression(A, b) >= 0
    510 else:
    511     return Linear_Expression(A, b) == 0

File ppl/linear_algebra.pyx:654, in ppl.linear_algebra.Linear_Expression.__init__()

File ppl/linear_algebra.pyx:49, in ppl.linear_algebra.PPL_Coefficient_from_pyobject()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/rings/integer.pyx:914, in sage.rings.integer.Integer.__richcmp__ (build/cythonized/sage/rings/integer.c:16498)()
    912     c = mpz_cmp_d((<Integer>left).value, d)
    913 else:
--> 914     return coercion_model.richcmp(left, right, op)
    915 
    916 return rich_to_bool_sgn(op, c)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:2021, in sage.structure.coerce.CoercionModel.richcmp (build/cythonized/sage/structure/coerce.c:26173)()
   2019 # Coerce to a common parent
   2020 try:
-> 2021     x, y = self.canonical_coercion(x, y)
   2022 except (TypeError, NotImplementedError):
   2023     pass

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1422, in sage.structure.coerce.CoercionModel.canonical_coercion (build/cythonized/sage/structure/coerce.c:18956)()
   1420             self._record_exception()
   1421 
-> 1422     raise TypeError("no common canonical parent for objects with parents: '%s' and '%s'"%(xp, yp))
   1423 
   1424 cpdef coercion_maps(self, R, S) noexcept:

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['C',6])
....: c=[0,1,2,3,4,5]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....: 
1 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5] 0
2 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4] 0
3 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3] 0
4 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2] 0
5 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1] 0
6 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5] 0
7 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] 0
8 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] 0
9 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1] 0
10 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4] 0
11 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2] 0
12 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1] 0
13 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3] 0
14 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 1] 0
15 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2] 0
16 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1] 0
17 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5] 0
18 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4] 0
19 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3] 0
20 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2] 0
21 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5] 0
22 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
23 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1] 0
24 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] 0
^C---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:1066, in Polyhedra_base._make_Inequality(self, polyhedron, data)
   1065 try:
-> 1066     obj = self._Inequality_pool.pop()
   1067 except IndexError:

IndexError: pop from empty list

During handling of the above exception, another exception occurred:

KeyboardInterrupt                         Traceback (most recent call last)
Cell In [808], line 6
      4 for v in sortables(A,c[Integer(1):]):
      5     num+=Integer(1)
----> 6     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
      7     d=P.dimension()
      8     print(num,v,d)

File ~/git/affine_dominance/software/domination4.py:127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_faster(B, la, seqs[0])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_faster(B, la, s))
    128     if P.dimension()==0:
    129         break

File ~/git/affine_dominance/software/domination4.py:151, in p_lambda_faster(B, la, seq)
    148 #print("Hp:   ",Hp,Hp.vertices(),Hp.rays(),Hp.lines(),"\n")
    149 #print("Hm:   ",Hm,Hm.vertices(),Hm.rays(),Hm.lines(),"\n\n")
    150 Pp = P.intersection(Hp)
--> 151 Pm = P.intersection(Hm)
    152 if Pp.dimension() < rk:
    153     P=Em*Pm

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1371, in Polyhedron_base5.intersection(self, other)
   1369 parent = self.parent()
   1370 try:
-> 1371     intersection = parent.element_class(parent, None, [new_ieqs, new_eqns])
   1373     # Force calculation of the vertices.
   1374     _ = intersection.n_vertices()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:70, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
---> 70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:195, in Polyhedron_ppl.set_immutable(self)
    193         raise e
    194 if not hasattr(self, '_Hrepresentation'):
--> 195     self._init_Hrepresentation_from_ppl(True)
    196 self._is_mutable = False

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:344, in Polyhedron_ppl._init_Hrepresentation_from_ppl(self, minimize)
    342 for c in cs:
    343     if c.is_inequality():
--> 344         parent._make_Inequality(self, (c.inhomogeneous_term(),) + c.coefficients())
    345     elif c.is_equality():
    346         parent._make_Equation(self, (c.inhomogeneous_term(),) + c.coefficients())

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:1068, in Polyhedra_base._make_Inequality(self, polyhedron, data)
   1066     obj = self._Inequality_pool.pop()
   1067 except IndexError:
-> 1068     obj = Inequality(self)
   1069 obj._set_data(polyhedron, data)
   1070 return obj

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/representation.py:410, in Hrepresentation.__init__(self, polyhedron_parent)
    408 self._base_ring = polyhedron_parent.base_ring()
    409 self._vector = polyhedron_parent.Hrepresentation_space()(0)
--> 410 self._A = polyhedron_parent.ambient_space()(0)
    411 self._b = polyhedron_parent.base_ring()(0)
    412 self._index = 0

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/misc/cachefunc.pyx:2329, in sage.misc.cachefunc.CachedMethodCallerNoArgs.__call__ (build/cythonized/sage/misc/cachefunc.c:16226)()
   2327 if self.cache is None:
   2328     f = self.f
-> 2329     self.cache = f(self._instance)
   2330 return self.cache
   2331 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:482, in Polyhedra_base.Vrepresentation_space(self)
    480 if self.base_ring() in Fields():
    481     from sage.modules.free_module import VectorSpace
--> 482     return VectorSpace(self.base_ring(), self.ambient_dim())
    483 else:
    484     from sage.modules.free_module import FreeModule

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/modules/free_module.py:571, in VectorSpace(K, dimension_or_basis_keys, sparse, inner_product_matrix, with_basis, dimension, basis_keys, **args)
    569 if sparse not in (True, False):
    570     raise TypeError("Argument sparse (= %s) must be a boolean." % sparse)
--> 571 return FreeModule(K, dimension_or_basis_keys, sparse, inner_product_matrix,
    572                   with_basis=with_basis, rank=dimension, basis_keys=basis_keys,
    573                   **args)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/modules/free_module.py:529, in FreeModule(base_ring, rank_or_basis_keys, sparse, inner_product_matrix, with_basis, rank, basis_keys, **args)
    527 elif with_basis == 'standard':
    528     if rank is not None:
--> 529         return FreeModuleFactory_with_standard_basis(base_ring, rank, sparse,
    530                                                     inner_product_matrix, **args)
    531     else:
    532         if inner_product_matrix is not None:

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_cone(B(A,c),lam(A,v),Kbackwards(c[1:],v))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list([c[0]+k] for k in Kbackwards(c[1:
....: ],v)))
....:     print("\n",v)
....:     print("parabolic     ",list(map(vector,P.rays())),list(map(vector,P.li
....: nes())))
....:     print("parabolic + c0",list(map(vector,Q.rays())),list(map(vector,Q.li
....: nes())))
....:     print(P.intersection(Q).dimension())
....: 
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In [809], line 5
      3 for v in sortables(A,c[Integer(1):]):
      4     P=p_lambda_cone(B(A,c),lam(A,v),Kbackwards(c[Integer(1):],v))
----> 5     Q=p_lambda_cone(B(A,c),lam(A,v),list([c[Integer(0)]+k] for k in Kbackwards(c[Integer(1):],v)))
      6     print("\n",v)
      7     print("parabolic     ",list(map(vector,P.rays())),list(map(vector,P.lines()))) 

Cell In [809], line 5, in <genexpr>(.0)
      3 for v in sortables(A,c[Integer(1):]):
      4     P=p_lambda_cone(B(A,c),lam(A,v),Kbackwards(c[Integer(1):],v))
----> 5     Q=p_lambda_cone(B(A,c),lam(A,v),list([c[Integer(0)]+k] for k in Kbackwards(c[Integer(1):],v)))
      6     print("\n",v)
      7     print("parabolic     ",list(map(vector,P.rays())),list(map(vector,P.lines()))) 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/rings/integer.pyx:1764, in sage.rings.integer.Integer.__add__ (build/cythonized/sage/rings/integer.c:21739)()
   1762         return y
   1763 
-> 1764     return coercion_model.bin_op(left, right, operator.add)
   1765 
   1766 cpdef _add_(self, right) noexcept:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1276, in sage.structure.coerce.CoercionModel.bin_op (build/cythonized/sage/structure/coerce.c:16830)()
   1274     # We should really include the underlying error.
   1275     # This causes so much headache.
-> 1276     raise bin_op_exception(op, x, y)
   1277 
   1278 cpdef canonical_coercion(self, x, y) noexcept:

TypeError: unsupported operand parent(s) for +: 'Integer Ring' and '<class 'list'>'
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_cone(B(A,c),lam(A,v),Kbackwards(c[1:],v))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list([c[0]]+k for k in Kbackwards(c[1:
....: ],v)))
....:     print("\n",v)
....:     print("parabolic     ",list(map(vector,P.rays())),list(map(vector,P.li
....: nes())))
....:     print("parabolic + c0",list(map(vector,Q.rays())),list(map(vector,Q.li
....: nes())))
....:     print(P.intersection(Q).dimension())
....: 

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
parabolic      [(0, -1, 0, 0, 0)] []
parabolic + c0 [(1, 1, -1, 0, 0), (0, 1, 0, 0, 0)] []
0

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
parabolic      [(0, -1, 0, 0, 0)] []
parabolic + c0 [(1, 1, -1, 0, 0), (0, 1, 0, 0, 0)] []
0

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
parabolic      [(0, -1, 0, 0, 0)] []
parabolic + c0 [(1, 1, -1, 0, 0), (0, 1, 0, 0, 0)] []
0

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1]
parabolic      [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0), (1, 2, 0, 1, -1), (1, 1, -1, 0, 0)] []
0

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
parabolic      [(1, 0, 0, 1, -1), (0, -1, 0, 0, 0)] []
parabolic + c0 [(1, 1, -1, 0, 0), (0, 1, 0, 0, 0)] []
0

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2]
parabolic      [(0, -1, 0, 0, 0)] []
parabolic + c0 [(1, 1, -1, 0, 0), (0, 1, 0, 0, 0)] []
0

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1]
parabolic      [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0), (1, 2, 0, 1, -1), (1, 1, -1, 0, 0)] []
0

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
parabolic      [(1, 0, 0, 1, -1), (0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] []
0

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1]
parabolic      [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0), (1, 1, -2, 0, 1), (1, 2, 0, 1, -1), (1, 1, -1, 0, 0), (1, 2, 1, 1, -2)] []
0

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
parabolic      [(1, 0, 0, 1, -1), (0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0), (1, 2, 1, 1, -2), (1, 1, -1, 0, 0)] []
0

 [1, 2, 3, 4, 1, 2, 3, 4, 1]
parabolic      [(1, 0, 0, 1, -1), (1, 0, 1, 1, -2), (0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] []
0

 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4]
parabolic      [(0, -1, 0, 1, 0), (0, -1, 0, 0, 0)] []
parabolic + c0 [(1, 1, -1, 1, 0), (1, 1, -1, 0, 0), (0, 1, 0, 0, 0), (0, 1, 0, 1, 0)] []
0

 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3]
parabolic      [(0, -1, 0, 1, 0), (0, -1, 0, 0, 0)] []
parabolic + c0 [(1, 1, -1, 1, 0), (1, 1, -1, 0, 0), (0, 1, 0, 0, 0), (0, 1, 0, 1, 0)] []
0

 [1, 2, 3, 4, 1, 2, 3, 4, 2]
parabolic      [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0), (0, 0, -1, 0, 1), (1, 1, -1, 0, 0), (1, 2, 0, 1, -1), (1, 0, -3, 0, 2), (2, 1, -3, 1, 1), (1, 1, -1, 1, 0)] []
0

 [1, 2, 3, 4, 1, 2, 3, 4]
parabolic      [(1, 0, 0, 1, -1), (0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] []
0

 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
parabolic      [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 0, -1, 0, 1), (0, 1, 0, 0, 0), (1, 1, 0, 1, -1), (1, 3, 1, 0, -2), (1, 1, -1, 0, 0), (1, 2, 1, 1, -2)] []
0

 [1, 2, 3, 4, 1, 2, 3, 1, 2]
parabolic      [(1, 0, 0, 1, -1), (0, -1, 0, 0, 0)] []
parabolic + c0 [(1, 3, 1, 0, -2), (1, 1, -1, 0, 0), (1, 1, 0, 1, -1), (0, 0, -1, 0, 1), (0, 1, 0, 0, 0), (1, 2, 1, 1, -2)] []
0

 [1, 2, 3, 4, 1, 2, 3, 1]
parabolic      [(1, 0, 0, 1, -1), (1, 0, 1, 1, -2), (0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0), (0, 0, -1, 0, 1), (1, 1, -1, 0, 0), (1, 3, 1, 0, -2)] []
0

 [1, 2, 3, 4, 1, 2, 3, 2]
parabolic      [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0), (1, 2, 0, 1, -1), (1, 3, 1, 0, -2), (1, 1, -1, 0, 0), (0, 0, -1, 0, 1), (1, 1, -1, 1, 0)] []
0
^Z
[1]+  Stopped                 /Applications/SageMath-10-2.app/Contents/Frameworks/Sage.framework/Versions/Current/venv/bin/sage
MA-C02K804RDR53:~ reading$ fg
/Applications/SageMath-10-2.app/Contents/Frameworks/Sage.framework/Versions/Current/venv/bin/sage

 [1, 2, 3, 4, 1, 2, 3]
parabolic      [(1, 0, 0, 1, -1), (0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0), (1, 3, 1, 0, -2), (1, 1, -1, 0, 0), (0, 0, -1, 0, 1)] []
0
^[[A
 [1, 2, 3, 4, 1, 2, 1]
parabolic      [(1, 0, 0, 1, -1), (1, 1, 1, 0, -2), (0, -1, 0, 0, 0), (0, -2, 0, 1, 0), (1, 0, 1, 1, -2)] []
parabolic + c0 [(2, 3, 0, 0, -2), (1, 1, -1, 0, 0), (0, 1, 0, 0, 0)] []
0

 [1, 2, 3, 4, 1, 2]
parabolic      [(1, 0, 0, 1, -1), (1, 1, 1, 0, -2), (0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0), (2, 3, 0, 0, -2), (1, 1, -1, 0, 0)] []
0

 [1, 2, 3, 4, 1, 3, 4]
parabolic      [(0, -1, 0, 0, 0)] []
parabolic + c0 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, 0, -1, -1), (1, 1, -1, 2, 0), (2, 2, -1, 1, -1)] []
0
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [810], line 5
      3 for v in sortables(A,c[Integer(1):]):
      4     P=p_lambda_cone(B(A,c),lam(A,v),Kbackwards(c[Integer(1):],v))
----> 5     Q=p_lambda_cone(B(A,c),lam(A,v),list([c[Integer(0)]]+k for k in Kbackwards(c[Integer(1):],v)))
      6     print("\n",v)
      7     print("parabolic     ",list(map(vector,P.rays())),list(map(vector,P.lines()))) 

File ~/git/affine_dominance/software/domination4.py:186, in p_lambda_cone(B, la, seqs)
    184 P = cone_at(p_lambda_faster(B, la, seqs[0]),la)
    185 for s in seqs:
--> 186     P = P.intersection(cone_at(p_lambda_faster(B, la, s),la))
    187     if P.dimension()==0:
    188         break

File ~/git/affine_dominance/software/domination4.py:147, in p_lambda_faster(B, la, seq)
    145 Em = E(B, k, -1)
    146 Hp = Polyhedron(ieqs=[(0,)*(k+1)+(1,)+(0,)*(m-k-1)])
--> 147 Hm = Polyhedron(ieqs=[(0,)*(k+1)+(-1,)+(0,)*(m-k-1)])
    148 #print("Hp:   ",Hp,Hp.vertices(),Hp.rays(),Hp.lines(),"\n")
    149 #print("Hm:   ",Hm,Hm.vertices(),Hm.rays(),Hm.lines(),"\n\n")
    150 Pp = P.intersection(Hp)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/constructor.py:768, in Polyhedron(vertices, rays, lines, ieqs, eqns, ambient_dim, base_ring, minimize, verbose, backend, mutable)
    766 if got_Vrep:
    767     Vrep = [vertices, rays, lines]
--> 768 return parent(Vrep, Hrep, convert=convert, verbose=verbose, mutable=mutable)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/parent.pyx:903, in sage.structure.parent.Parent.__call__ (build/cythonized/sage/structure/parent.c:12685)()
    901         return mor._call_(x)
    902     else:
--> 903         return mor._call_with_args(x, args, kwds)
    904 
    905 raise TypeError(_LazyString("No conversion defined from %s to %s", (R, self), {}))

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:177, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_with_args (build/cythonized/sage/structure/coerce_maps.c:7430)()
    175             return C._element_constructor(x, *args)
    176         else:
--> 177             return C._element_constructor(x, *args, **kwds)
    178 except Exception:
    179     if print_warnings:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:695, in Polyhedra_base._element_constructor_(self, *args, **kwds)
    693     if convert and Vrep:
    694         Vrep = [convert_base_ring(_) for _ in Vrep]
--> 695     return self.element_class(self, Vrep, Hrep, **kwds)
    696 if nargs == 1 and is_Polyhedron(args[0]):
    697     copy = kwds.pop('copy', args[0].parent() is not self)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:70, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
---> 70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:189, in Polyhedron_ppl.set_immutable(self)
    187 if not hasattr(self, '_Vrepresentation'):
    188     try:
--> 189         self._init_Vrepresentation_from_ppl(True)
    190     except TypeError as e:
    191         # Apparently the polyhedron is (no longer) integral.
    192         self._clear_cache()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:300, in Polyhedron_ppl._init_Vrepresentation_from_ppl(self, minimize)
    298     raise TypeError("Vrepresentation of mutable polyhedra cannot be recomputed")
    299 self._Vrepresentation = []
--> 300 gs = self._ppl_polyhedron.minimized_generators()
    301 parent = self.parent()
    302 for g in gs:

File ppl/polyhedron.pyx:340, in ppl.polyhedron.Polyhedron.minimized_generators()

KeyboardInterrupt: 
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_cone(B(A,c),lam(A,v),Kbackwards(c[1:],v))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list([c[0]]+k for k in Kbackwards(c[1:
....: ],v)))
....:     print("\n",v)
....:     print("parabolic     ",list(map(vector,P.rays())),list(map(vector,P.li
....: nes())))
....:     print("c0 + parabolic",list(map(vector,Q.rays())),list(map(vector,Q.li
....: nes())))
....:     print(P.intersection(Q).dimension())
....: 

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
parabolic      [(0, -1, 0, 0, 0)] []
c0 + parabolic [(1, 1, -1, 0, 0), (0, 1, 0, 0, 0)] []
0

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
parabolic      [(0, -1, 0, 0, 0)] []
c0 + parabolic [(1, 1, -1, 0, 0), (0, 1, 0, 0, 0)] []
0

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
parabolic      [(0, -1, 0, 0, 0)] []
c0 + parabolic [(1, 1, -1, 0, 0), (0, 1, 0, 0, 0)] []
0

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1]
parabolic      [(0, -1, 0, 0, 0)] []
c0 + parabolic [(0, 1, 0, 0, 0), (1, 2, 0, 1, -1), (1, 1, -1, 0, 0)] []
0

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
parabolic      [(1, 0, 0, 1, -1), (0, -1, 0, 0, 0)] []
c0 + parabolic [(1, 1, -1, 0, 0), (0, 1, 0, 0, 0)] []
0

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2]
parabolic      [(0, -1, 0, 0, 0)] []
c0 + parabolic [(1, 1, -1, 0, 0), (0, 1, 0, 0, 0)] []
0

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1]
parabolic      [(0, -1, 0, 0, 0)] []
c0 + parabolic [(0, 1, 0, 0, 0), (1, 2, 0, 1, -1), (1, 1, -1, 0, 0)] []
0

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
parabolic      [(1, 0, 0, 1, -1), (0, -1, 0, 0, 0)] []
c0 + parabolic [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] []
0

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1]
parabolic      [(0, -1, 0, 0, 0)] []
c0 + parabolic [(0, 1, 0, 0, 0), (1, 1, -2, 0, 1), (1, 2, 0, 1, -1), (1, 1, -1, 0, 0), (1, 2, 1, 1, -2)] []
0

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
parabolic      [(1, 0, 0, 1, -1), (0, -1, 0, 0, 0)] []
c0 + parabolic [(0, 1, 0, 0, 0), (1, 2, 1, 1, -2), (1, 1, -1, 0, 0)] []
0
^Z
[1]+  Stopped                 /Applications/SageMath-10-2.app/Contents/Frameworks/Sage.framework/Versions/Current/venv/bin/sage
MA-C02K804RDR53:~ reading$ fg
/Applications/SageMath-10-2.app/Contents/Frameworks/Sage.framework/Versions/Current/venv/bin/sage

 [1, 2, 3, 4, 1, 2, 3, 4, 1]
parabolic      [(1, 0, 0, 1, -1), (1, 0, 1, 1, -2), (0, -1, 0, 0, 0)] []
c0 + parabolic [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] []
0

 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4]
parabolic      [(0, -1, 0, 1, 0), (0, -1, 0, 0, 0)] []
c0 + parabolic [(1, 1, -1, 1, 0), (1, 1, -1, 0, 0), (0, 1, 0, 0, 0), (0, 1, 0, 1, 0)] []
0

 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3]
parabolic      [(0, -1, 0, 1, 0), (0, -1, 0, 0, 0)] []
c0 + parabolic [(1, 1, -1, 1, 0), (1, 1, -1, 0, 0), (0, 1, 0, 0, 0), (0, 1, 0, 1, 0)] []
0

 [1, 2, 3, 4, 1, 2, 3, 4, 2]
parabolic      [(0, -1, 0, 0, 0)] []
c0 + parabolic [(0, 1, 0, 0, 0), (0, 0, -1, 0, 1), (1, 1, -1, 0, 0), (1, 2, 0, 1, -1), (1, 0, -3, 0, 2), (2, 1, -3, 1, 1), (1, 1, -1, 1, 0)] []
0

 [1, 2, 3, 4, 1, 2, 3, 4]
parabolic      [(1, 0, 0, 1, -1), (0, -1, 0, 0, 0)] []
c0 + parabolic [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] []
0

 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
parabolic      [(0, -1, 0, 0, 0)] []
c0 + parabolic [(0, 0, -1, 0, 1), (0, 1, 0, 0, 0), (1, 1, 0, 1, -1), (1, 3, 1, 0, -2), (1, 1, -1, 0, 0), (1, 2, 1, 1, -2)] []
0

 [1, 2, 3, 4, 1, 2, 3, 1, 2]
parabolic      [(1, 0, 0, 1, -1), (0, -1, 0, 0, 0)] []
c0 + parabolic [(1, 3, 1, 0, -2), (1, 1, -1, 0, 0), (1, 1, 0, 1, -1), (0, 0, -1, 0, 1), (0, 1, 0, 0, 0), (1, 2, 1, 1, -2)] []
0

 [1, 2, 3, 4, 1, 2, 3, 1]
parabolic      [(1, 0, 0, 1, -1), (1, 0, 1, 1, -2), (0, -1, 0, 0, 0)] []
c0 + parabolic [(0, 1, 0, 0, 0), (0, 0, -1, 0, 1), (1, 1, -1, 0, 0), (1, 3, 1, 0, -2)] []
0

 [1, 2, 3, 4, 1, 2, 3, 2]
parabolic      [(0, -1, 0, 0, 0)] []
c0 + parabolic [(0, 1, 0, 0, 0), (1, 2, 0, 1, -1), (1, 3, 1, 0, -2), (1, 1, -1, 0, 0), (0, 0, -1, 0, 1), (1, 1, -1, 1, 0)] []
0

 [1, 2, 3, 4, 1, 2, 3]
parabolic      [(1, 0, 0, 1, -1), (0, -1, 0, 0, 0)] []
c0 + parabolic [(0, 1, 0, 0, 0), (1, 3, 1, 0, -2), (1, 1, -1, 0, 0), (0, 0, -1, 0, 1)] []
0
^Z
[1]+  Stopped                 /Applications/SageMath-10-2.app/Contents/Frameworks/Sage.framework/Versions/Current/venv/bin/sage
MA-C02K804RDR53:~ reading$ fg
/Applications/SageMath-10-2.app/Contents/Frameworks/Sage.framework/Versions/Current/venv/bin/sage

 [1, 2, 3, 4, 1, 2, 1]
parabolic      [(1, 0, 0, 1, -1), (1, 1, 1, 0, -2), (0, -1, 0, 0, 0), (0, -2, 0, 1, 0), (1, 0, 1, 1, -2)] []
c0 + parabolic [(2, 3, 0, 0, -2), (1, 1, -1, 0, 0), (0, 1, 0, 0, 0)] []
0

 [1, 2, 3, 4, 1, 2]
parabolic      [(1, 0, 0, 1, -1), (1, 1, 1, 0, -2), (0, -1, 0, 0, 0)] []
c0 + parabolic [(0, 1, 0, 0, 0), (2, 3, 0, 0, -2), (1, 1, -1, 0, 0)] []
0

 [1, 2, 3, 4, 1, 3, 4]
parabolic      [(0, -1, 0, 0, 0)] []
c0 + parabolic [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, 0, -1, -1), (1, 1, -1, 2, 0), (2, 2, -1, 1, -1)] []
0

 [1, 2, 3, 4, 1, 3]
parabolic      [(0, -1, 0, 0, 0)] []
c0 + parabolic [(0, 1, 0, 0, 0), (1, 2, 0, 1, -1), (2, 2, -1, 3, -1), (1, 1, -1, 2, 0), (1, 1, -1, 0, 0), (2, 2, -1, 1, -1), (1, 2, 0, -1, -1), (0, 1, 0, -1, 0)] []
0

 [1, 2, 3, 4, 1]
parabolic      [(1, 0, 0, 1, -1), (0, -1, 0, 0, 0)] []
c0 + parabolic [(0, 1, 0, 0, 0), (0, 0, -1, 1, 1), (2, 2, -1, 1, -1), (1, 2, 0, -1, -1), (1, 1, -1, 0, 0), (2, 3, 0, 0, -2)] []
0

 [1, 2, 3, 4, 2, 3, 4, 2, 3, 4]
parabolic      [(0, -1, 0, 0, 0)] []
c0 + parabolic [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, -1, -1, 0)] []
0

 [1, 2, 3, 4, 2, 3, 4, 2, 3]
parabolic      [(0, -1, 0, 0, 0)] []
c0 + parabolic [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, -1, -1, 0)] []
0

 [1, 2, 3, 4, 2, 3, 4, 2]
parabolic      [(0, -1, 1, 1, -1), (0, -1, 0, 0, 0)] []
c0 + parabolic [(1, 1, -1, 0, 0), (0, 1, 1, 1, -1), (1, 2, -1, -1, 0), (2, 5, -4, -4, 2), (0, 1, 0, 0, 0)] []
0

 [1, 2, 3, 4, 2, 3, 4]
parabolic      [(1, 0, 1, 2, -2), (1, 0, 0, 1, -1), (0, -1, 0, 0, 0), (0, -1, 1, 1, -1)] []
c0 + parabolic [(1, 2, -1, -1, 0), (1, 1, -1, 0, 0), (2, 3, -4, -2, 2), (0, 1, 0, 0, 0)] []
0

 [1, 2, 3, 4, 2, 3, 2]
parabolic      [(0, -1, 1, 1, -1), (0, -1, 0, 0, 0)] []
c0 + parabolic [(1, 1, -1, 0, 0), (0, 1, -1, -1, 1), (0, 1, 1, 1, -1), (1, 2, 1, 1, -2), (1, 2, -1, -1, 0)] []
0
^Z
[1]+  Stopped                 /Applications/SageMath-10-2.app/Contents/Frameworks/Sage.framework/Versions/Current/venv/bin/sage
MA-C02K804RDR53:~ reading$ fg
/Applications/SageMath-10-2.app/Contents/Frameworks/Sage.framework/Versions/Current/venv/bin/sage

 [1, 2, 3, 4, 2, 3]
parabolic      [(1, 0, 1, 2, -2), (0, -1, 1, 1, -1), (0, -1, 0, 0, 0), (1, 0, 0, 1, -1)] []
c0 + parabolic [(1, 1, -1, 0, 0), (1, 2, -1, -1, 0), (1, 2, 1, 1, -2), (0, 1, 0, 0, 0), (0, 1, -1, -1, 1)] []
0
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [811], line 5
      3 for v in sortables(A,c[Integer(1):]):
      4     P=p_lambda_cone(B(A,c),lam(A,v),Kbackwards(c[Integer(1):],v))
----> 5     Q=p_lambda_cone(B(A,c),lam(A,v),list([c[Integer(0)]]+k for k in Kbackwards(c[Integer(1):],v)))
      6     print("\n",v)
      7     print("parabolic     ",list(map(vector,P.rays())),list(map(vector,P.lines()))) 

File ~/git/affine_dominance/software/domination4.py:186, in p_lambda_cone(B, la, seqs)
    184 P = cone_at(p_lambda_faster(B, la, seqs[0]),la)
    185 for s in seqs:
--> 186     P = P.intersection(cone_at(p_lambda_faster(B, la, s),la))
    187     if P.dimension()==0:
    188         break

File ~/git/affine_dominance/software/domination4.py:159, in p_lambda_faster(B, la, seq)
    155         P=Ep*Pp
    156     else:
    157         #print("Pp:   ",Pp,Pp.vertices(),Pp.rays(),Pp.lines(),"\n")
    158         #print("Pm:   ",Pm,Pm.vertices(),Pm.rays(),Pm.lines(),"\n\n")
--> 159         P=(Ep*Pp).convex_hull(Em*Pm)
    160     B.mutate(k)
    161 return P

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1312, in Polyhedron_base5.convex_hull(self, other)
   1310 hull_rays = self.rays() + other.rays()
   1311 hull_lines = self.lines() + other.lines()
-> 1312 return self.parent().element_class(self.parent(), [hull_vertices, hull_rays, hull_lines], None)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:174, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    171     lines = tuple(lines)
    173 if vertices or rays or lines:
--> 174     self._init_from_Vrepresentation(vertices, rays, lines, **kwds)
    175 else:
    176     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:99, in Polyhedron_ppl._init_from_Vrepresentation(self, vertices, rays, lines, minimize, verbose)
     72 def _init_from_Vrepresentation(self, vertices, rays, lines, minimize=True, verbose=False):
     73     """
     74     Construct polyhedron from V-representation data.
     75 
   (...)
     97         sage: Polyhedron_ppl._init_from_Vrepresentation(p, [], [], [])
     98     """
---> 99     gs = self._convert_generators_to_ppl(vertices, rays, lines)
    100     if gs.empty():
    101         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'empty')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:473, in Polyhedron_ppl._convert_generators_to_ppl(vertices, rays, lines)
    471     vertices = []
    472 for v in vertices:
--> 473     gs.insert(Polyhedron_ppl._convert_generator_to_ppl(v, VERTEX))
    474 if rays is None:
    475     rays = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:442, in Polyhedron_ppl._convert_generator_to_ppl(v, typ)
    440 d = LCM_list([denominator(v_i) for v_i in v])
    441 if d.is_one():
--> 442     return ob(Linear_Expression(v, 0))
    443 else:
    444     dv = [ d*v_i for v_i in v ]

File ppl/linear_algebra.pyx:653, in ppl.linear_algebra.Linear_Expression.__init__()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/representation.py:81, in PolyhedronRepresentation.__getitem__(self, i)
     69     """
     70     Return the length of the representation data.
     71 
   (...)
     77         3
     78     """
     79     return self._vector.degree()
---> 81 def __getitem__(self, i):
     82     """
     83     Supports indexing.
     84 
   (...)
     90         2
     91     """
     92     return self._vector[i]

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: for v in sortables(A,c[1:]):
....:     for seq in Kbackwards(c[1:],v)
  Cell In [812], line 4
    for seq in Kbackwards(c[Integer(1):],v)
                                           ^
SyntaxError: expected ':'

sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: for v in sortables(A,c[1:]):
....:     for seq in Kbackwards(c[1:],v):
....:         p_lambda_cone(B(A,c),lam(A,c),[seq,[c[0]]+seq]).rays()
....:     input()
....: 
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [813], line 3
      1 A=CartanMatrix(['C',Integer(5)])
      2 c=[Integer(0),Integer(1),Integer(2),Integer(3),Integer(4)]
----> 3 for v in sortables(A,c[Integer(1):]):
      4     for seq in Kbackwards(c[Integer(1):],v):
      5         p_lambda_cone(B(A,c),lam(A,c),[seq,[c[Integer(0)]]+seq]).rays()

File ~/git/affine_dominance/software/domination4.py:349, in sortables(A, c)
    348 def sortables(A,c):
--> 349     yield from sortables_remaining(A,c,[],vector([1]*A.nrows()))

File ~/git/affine_dominance/software/domination4.py:356, in sortables_remaining(A, c, sort, vec)
    354 else:
    355     if vec[c[0]]>0:
--> 356         yield from sortables_remaining(A,c[1:]+[c[0]],sort+[c[0]],reflect(A,vec,c[0]))
    357     yield from sortables_remaining(A,c[1:],sort,vec)

File ~/git/affine_dominance/software/domination4.py:356, in sortables_remaining(A, c, sort, vec)
    354 else:
    355     if vec[c[0]]>0:
--> 356         yield from sortables_remaining(A,c[1:]+[c[0]],sort+[c[0]],reflect(A,vec,c[0]))
    357     yield from sortables_remaining(A,c[1:],sort,vec)

    [... skipping similar frames: sortables_remaining at line 356 (8 times)]

File ~/git/affine_dominance/software/domination4.py:356, in sortables_remaining(A, c, sort, vec)
    354 else:
    355     if vec[c[0]]>0:
--> 356         yield from sortables_remaining(A,c[1:]+[c[0]],sort+[c[0]],reflect(A,vec,c[0]))
    357     yield from sortables_remaining(A,c[1:],sort,vec)

File ~/git/affine_dominance/software/domination4.py:333, in reflect(A, vec, s)
    332 def reflect(A,vec,s):
--> 333     return vector(vec)-vec[s]*vector(A.column(s))

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:1356, in sage.structure.element.Element.__sub__ (build/cythonized/sage/structure/element.c:19436)()
   1354     return (<Element>left)._sub_(right)
   1355 if BOTH_ARE_ELEMENT(cl):
-> 1356     return coercion_model.bin_op(left, right, sub)
   1357 
   1358 try:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1228, in sage.structure.coerce.CoercionModel.bin_op (build/cythonized/sage/structure/coerce.c:15872)()
   1226 # Now coerce to a common parent and do the operation there
   1227 try:
-> 1228     xy = self.canonical_coercion(x, y)
   1229 except TypeError:
   1230     self._record_exception()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1344, in sage.structure.coerce.CoercionModel.canonical_coercion (build/cythonized/sage/structure/coerce.c:17323)()
   1342     x_elt = x
   1343 if y_map is not None:
-> 1344     y_elt = (<Map>y_map)._call_(y)
   1345 else:
   1346     y_elt = y

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:158, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_ (build/cythonized/sage/structure/coerce_maps.c:6834)()
    156 cdef Parent C = self._codomain
    157 try:
--> 158     return C._element_constructor(x)
    159 except Exception:
    160     if print_warnings:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/modules/free_module.py:2110, in FreeModule_generic._element_constructor_(self, x, coerce, copy, check)
   2107     A = self.ambient_module().sparse_module()
   2108     return A.span(self.basis())
-> 2110 def _element_constructor_(self, x, coerce=True, copy=True, check=True):
   2111     r"""
   2112     Create an element of this free module from ``x``.
   2113 
   (...)
   2151         True
   2152     """
   2153     if (isinstance(x, (int, sage.rings.integer.Integer)) and
   2154         x == 0):

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: for v in sortables(A,c[1:]):
....:     for seq in Kbackwards(c[1:],v):
....:         p_lambda_cone(B(A,c),lam(A,v),[seq,[c[0]]+seq]).rays()
....:     input()
....: 
(A ray in the direction (0, -1, 0, 1, 0),
 A ray in the direction (0, 0, 0, -1, 0),
 A ray in the direction (-1, 0, 1, 0, 0),
 A ray in the direction (0, 0, -1, 0, 1))
(A ray in the direction (-1, 0, 1, 0, 0),
 A ray in the direction (0, 0, -1, -2, 1),
 A ray in the direction (0, -1, 0, 1, 0),
 A ray in the direction (0, 0, 0, 1, 0))
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, -1, -1, 1, 1),
 A ray in the direction (0, 0, 0, -1, 0),
 A ray in the direction (-1, 0, 1, 0, 0))
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, -1, -1, -1, 1),
 A ray in the direction (-1, 0, 1, 0, 0))
(A ray in the direction (-1, -1, 1, 1, 0),
 A ray in the direction (0, 0, 0, -1, 0),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, -1, 0, 1))
(A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, -1, -2, 1),
 A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (-1, -1, 1, 1, 0))
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (-1, -1, 0, 1, 1),
 A ray in the direction (0, 0, 0, -1, 0),
 A ray in the direction (0, 1, 0, -1, 0))
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0),
 A ray in the direction (-1, -1, 0, 0, 1))
(A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, -1, 0, 1, 0),
 A ray in the direction (0, 0, 0, -1, 0),
 A ray in the direction (0, 0, -1, 0, 1))
(A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, 0, -1, -2, 1),
 A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, -1, 0, 1, 0))
(A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, -1, -1, 1, 1),
 A ray in the direction (0, 0, 0, -1, 0))
(A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, -1, -1, -1, 1))
(A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, 0, -1, 0, 1),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, -1, 0))
(A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, -1, -2, 1),
 A ray in the direction (0, 0, 0, 1, 0))
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, -1, 0))
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, 1, 0, -1, 0))

''
(A ray in the direction (-1, 0, 1, 0, 0),
 A ray in the direction (0, 0, -1, -2, 1),
 A ray in the direction (0, -1, 0, 1, 0),
 A ray in the direction (0, 0, 0, 1, 0))
(A ray in the direction (-1, 0, 1, 0, 0),
 A ray in the direction (0, 0, 1, 2, -1),
 A ray in the direction (0, -1, -1, -1, 1),
 A ray in the direction (0, 0, -1, -1, 1))
(A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, -1, -2, 1),
 A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (-1, -1, 1, 1, 0))
(A ray in the direction (0, 0, 1, 2, -1),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, -1, -1, 1),
 A ray in the direction (-1, -1, 0, -1, 1))
(A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, 0, -1, -2, 1),
 A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, -1, 0, 1, 0))
(A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 1, 2, -1),
 A ray in the direction (0, 0, -1, -1, 1),
 A ray in the direction (0, -1, -1, -1, 1))
(A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, -1, -2, 1),
 A ray in the direction (0, 0, 0, 1, 0))
(A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 1, 2, -1),
 A ray in the direction (0, 0, -1, -1, 1))
(A ray in the direction (0, 0, 0, -1, 0),
 A ray in the direction (0, -1, 0, 1, 0),
 A ray in the direction (-1, 0, 1, 0, 0),
 A ray in the direction (0, 0, -1, -2, 1))
(A ray in the direction (0, 0, 0, -1, 0),
 A ray in the direction (0, 0, 1, 2, -1),
 A ray in the direction (0, -1, -1, -1, 1),
 A ray in the direction (-1, 0, 1, 0, 0))
(A ray in the direction (0, 0, -1, -2, 1),
 A ray in the direction (-1, -1, 1, 1, 0),
 A ray in the direction (0, 0, 0, -1, 0),
 A ray in the direction (0, 1, 0, -1, 0))
(A ray in the direction (0, 0, 1, 2, -1),
 A ray in the direction (-1, -1, 0, -1, 1),
 A ray in the direction (0, 0, 0, -1, 0),
 A ray in the direction (0, 1, 0, -1, 0))
(A ray in the direction (0, 0, 0, -1, 0),
 A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, -1, 0, 1, 0),
 A ray in the direction (0, 0, -1, -2, 1))
(A ray in the direction (0, 0, 0, -1, 0),
 A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 1, 2, -1),
 A ray in the direction (0, -1, -1, -1, 1))
(A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, 0, -1, -2, 1),
 A ray in the direction (0, 0, 0, -1, 0),
 A ray in the direction (0, 1, 0, -1, 0))
(A ray in the direction (0, 0, 1, 2, -1),
 A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, -1, 0))
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [814], line 6
      4 for seq in Kbackwards(c[Integer(1):],v):
      5     p_lambda_cone(B(A,c),lam(A,v),[seq,[c[Integer(0)]]+seq]).rays()
----> 6 input()

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: for v in sortables(A,c[1:]):
....:     for seq in Kbackwards(c[1:],v):
....:         p_lambda_cone(B(A,c),lam(A,v),[seq,[c[0]]+seq]).rays()
....:     if input()=="q":
....:         break
....: 
(A ray in the direction (0, -1, 0, 1, 0),
 A ray in the direction (0, 0, 0, -1, 0),
 A ray in the direction (-1, 0, 1, 0, 0),
 A ray in the direction (0, 0, -1, 0, 1))
(A ray in the direction (-1, 0, 1, 0, 0),
 A ray in the direction (0, 0, -1, -2, 1),
 A ray in the direction (0, -1, 0, 1, 0),
 A ray in the direction (0, 0, 0, 1, 0))
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, -1, -1, 1, 1),
 A ray in the direction (0, 0, 0, -1, 0),
 A ray in the direction (-1, 0, 1, 0, 0))
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, -1, -1, -1, 1),
 A ray in the direction (-1, 0, 1, 0, 0))
(A ray in the direction (-1, -1, 1, 1, 0),
 A ray in the direction (0, 0, 0, -1, 0),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, -1, 0, 1))
(A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, -1, -2, 1),
 A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (-1, -1, 1, 1, 0))
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (-1, -1, 0, 1, 1),
 A ray in the direction (0, 0, 0, -1, 0),
 A ray in the direction (0, 1, 0, -1, 0))
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0),
 A ray in the direction (-1, -1, 0, 0, 1))
(A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, -1, 0, 1, 0),
 A ray in the direction (0, 0, 0, -1, 0),
 A ray in the direction (0, 0, -1, 0, 1))
(A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, 0, -1, -2, 1),
 A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, -1, 0, 1, 0))
(A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, -1, -1, 1, 1),
 A ray in the direction (0, 0, 0, -1, 0))
(A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, -1, -1, -1, 1))
(A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, 0, -1, 0, 1),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, -1, 0))
(A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, -1, -2, 1),
 A ray in the direction (0, 0, 0, 1, 0))
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, -1, 0))
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, 1, 0, -1, 0))

(A ray in the direction (-1, 0, 1, 0, 0),
 A ray in the direction (0, 0, -1, -2, 1),
 A ray in the direction (0, -1, 0, 1, 0),
 A ray in the direction (0, 0, 0, 1, 0))
(A ray in the direction (-1, 0, 1, 0, 0),
 A ray in the direction (0, 0, 1, 2, -1),
 A ray in the direction (0, -1, -1, -1, 1),
 A ray in the direction (0, 0, -1, -1, 1))
(A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, -1, -2, 1),
 A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (-1, -1, 1, 1, 0))
(A ray in the direction (0, 0, 1, 2, -1),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, -1, -1, 1),
 A ray in the direction (-1, -1, 0, -1, 1))
(A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, 0, -1, -2, 1),
 A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, -1, 0, 1, 0))
(A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 1, 2, -1),
 A ray in the direction (0, 0, -1, -1, 1),
 A ray in the direction (0, -1, -1, -1, 1))
(A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, -1, -2, 1),
 A ray in the direction (0, 0, 0, 1, 0))
(A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 1, 2, -1),
 A ray in the direction (0, 0, -1, -1, 1))
(A ray in the direction (0, 0, 0, -1, 0),
 A ray in the direction (0, -1, 0, 1, 0),
 A ray in the direction (-1, 0, 1, 0, 0),
 A ray in the direction (0, 0, -1, -2, 1))
(A ray in the direction (0, 0, 0, -1, 0),
 A ray in the direction (0, 0, 1, 2, -1),
 A ray in the direction (0, -1, -1, -1, 1),
 A ray in the direction (-1, 0, 1, 0, 0))
(A ray in the direction (0, 0, -1, -2, 1),
 A ray in the direction (-1, -1, 1, 1, 0),
 A ray in the direction (0, 0, 0, -1, 0),
 A ray in the direction (0, 1, 0, -1, 0))
(A ray in the direction (0, 0, 1, 2, -1),
 A ray in the direction (-1, -1, 0, -1, 1),
 A ray in the direction (0, 0, 0, -1, 0),
 A ray in the direction (0, 1, 0, -1, 0))
(A ray in the direction (0, 0, 0, -1, 0),
 A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, -1, 0, 1, 0),
 A ray in the direction (0, 0, -1, -2, 1))
(A ray in the direction (0, 0, 0, -1, 0),
 A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 1, 2, -1),
 A ray in the direction (0, -1, -1, -1, 1))
(A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, 0, -1, -2, 1),
 A ray in the direction (0, 0, 0, -1, 0),
 A ray in the direction (0, 1, 0, -1, 0))
(A ray in the direction (0, 0, 1, 2, -1),
 A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, -1, 0))
q
sage: A=CartanMatrix(['D',4])
....: c=[0,1,2,3]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
1 [1, 2, 3, 1, 2, 3] 0
2 [1, 2, 3, 1, 2] 0
3 [1, 2, 3, 1, 3] 0
4 [1, 2, 3, 1] 0
5 [1, 2, 3] 1
Failure!
6 [1, 2, 1] 0
7 [1, 2] 1
Failure!
8 [1, 3, 1] 0
9 [1, 3] 1
Failure!
10 [1] 1
Failure!
11 [2, 3] 0
12 [2] 0
13 [3] 0
14 [] 0
sage: A=CartanMatrix(['D',4])
....: c=[0,1,2,3]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
....: 
1 [1, 2, 3, 1, 2, 3] 0
2 [1, 2, 3, 1, 2] 0
3 [1, 2, 3, 1, 3] 0
4 [1, 2, 3, 1] 0
5 [1, 2, 3] 1
Failure!
sage: A=CartanMatrix(['D',5])
....: c=[0,1,2,3,4]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
1 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
2 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
3 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 4] 0
4 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
5 [1, 2, 3, 4, 1, 2, 3, 4, 1] 0
6 [1, 2, 3, 4, 1, 2, 3, 4] 0
7 [1, 2, 3, 4, 1, 2, 3, 1, 2] 0
8 [1, 2, 3, 4, 1, 2, 3, 1] 0
9 [1, 2, 3, 4, 1, 2, 3] 0
10 [1, 2, 3, 4, 1, 2, 4, 1, 2] 0
11 [1, 2, 3, 4, 1, 2, 4, 1] 0
12 [1, 2, 3, 4, 1, 2, 4] 0
13 [1, 2, 3, 4, 1, 2, 1] 0
14 [1, 2, 3, 4, 1, 2] 0
15 [1, 2, 3, 4, 1] 0
16 [1, 2, 3, 4, 2, 3, 4] 0
17 [1, 2, 3, 4, 2, 3] 0
18 [1, 2, 3, 4, 2, 4] 0
19 [1, 2, 3, 4, 2] 0
20 [1, 2, 3, 4] 0
21 [1, 2, 3, 1, 2, 1] 0
22 [1, 2, 3, 1, 2] 0
23 [1, 2, 3, 1] 0
24 [1, 2, 3, 2] 0
25 [1, 2, 3] 0
26 [1, 2, 4, 1, 2, 1] 0
27 [1, 2, 4, 1, 2] 0
28 [1, 2, 4, 1] 0
29 [1, 2, 4, 2] 0
30 [1, 2, 4] 0
31 [1, 2, 1] 0
32 [1, 2] 0
33 [1, 3, 4] 0
34 [1, 3] 0
35 [1, 4] 0
36 [1] 0
37 [2, 3, 4, 2, 3, 4] 0
38 [2, 3, 4, 2, 3] 0
39 [2, 3, 4, 2, 4] 0
40 [2, 3, 4, 2] 0
41 [2, 3, 4] 0
42 [2, 3, 2] 0
43 [2, 3] 0
44 [2, 4, 2] 0
45 [2, 4] 0
46 [2] 0
47 [3, 4] 0
48 [3] 0
49 [4] 0
50 [] 0
sage: A=CartanMatrix(['D',6])
....: c=[0,1,2,3,4,5]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
1 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5] 0
2 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4] 0
3 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 5] 0
4 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3] 0
5 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2] 0
6 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1] 0
7 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5] 0
8 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] 0
9 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] 0
10 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1] 0
11 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4] 0
12 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 5, 1, 2, 3] 0
13 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 5, 1, 2] 0
14 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 5, 1] 0
15 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 5] 0
16 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2] 0
17 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1] 0
18 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3] 0
19 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 1] 0
20 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2] 0
21 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1] 0
22 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5] 0
23 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4] 0
24 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 5] 0
25 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3] 0
26 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2] 0
27 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5] 0
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [819], line 6
      4 for v in sortables(A,c[Integer(1):]):
      5     num+=Integer(1)
----> 6     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
      7     d=P.dimension()
      8     print(num,v,d)

File ~/git/affine_dominance/software/domination4.py:127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_faster(B, la, seqs[0])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_faster(B, la, s))
    128     if P.dimension()==0:
    129         break

File ~/git/affine_dominance/software/domination4.py:159, in p_lambda_faster(B, la, seq)
    155         P=Ep*Pp
    156     else:
    157         #print("Pp:   ",Pp,Pp.vertices(),Pp.rays(),Pp.lines(),"\n")
    158         #print("Pm:   ",Pm,Pm.vertices(),Pm.rays(),Pm.lines(),"\n\n")
--> 159         P=(Ep*Pp).convex_hull(Em*Pm)
    160     B.mutate(k)
    161 return P

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1312, in Polyhedron_base5.convex_hull(self, other)
   1310 hull_rays = self.rays() + other.rays()
   1311 hull_lines = self.lines() + other.lines()
-> 1312 return self.parent().element_class(self.parent(), [hull_vertices, hull_rays, hull_lines], None)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:174, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    171     lines = tuple(lines)
    173 if vertices or rays or lines:
--> 174     self._init_from_Vrepresentation(vertices, rays, lines, **kwds)
    175 else:
    176     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:99, in Polyhedron_ppl._init_from_Vrepresentation(self, vertices, rays, lines, minimize, verbose)
     72 def _init_from_Vrepresentation(self, vertices, rays, lines, minimize=True, verbose=False):
     73     """
     74     Construct polyhedron from V-representation data.
     75 
   (...)
     97         sage: Polyhedron_ppl._init_from_Vrepresentation(p, [], [], [])
     98     """
---> 99     gs = self._convert_generators_to_ppl(vertices, rays, lines)
    100     if gs.empty():
    101         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'empty')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:473, in Polyhedron_ppl._convert_generators_to_ppl(vertices, rays, lines)
    471     vertices = []
    472 for v in vertices:
--> 473     gs.insert(Polyhedron_ppl._convert_generator_to_ppl(v, VERTEX))
    474 if rays is None:
    475     rays = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:442, in Polyhedron_ppl._convert_generator_to_ppl(v, typ)
    440 d = LCM_list([denominator(v_i) for v_i in v])
    441 if d.is_one():
--> 442     return ob(Linear_Expression(v, 0))
    443 else:
    444     dv = [ d*v_i for v_i in v ]

File ppl/linear_algebra.pyx:653, in ppl.linear_algebra.Linear_Expression.__init__()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/representation.py:81, in PolyhedronRepresentation.__getitem__(self, i)
     69     """
     70     Return the length of the representation data.
     71 
   (...)
     77         3
     78     """
     79     return self._vector.degree()
---> 81 def __getitem__(self, i):
     82     """
     83     Supports indexing.
     84 
   (...)
     90         2
     91     """
     92     return self._vector[i]

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['D',5])
....: c=[0,1,2,3,4]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
....: 
1 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [820], line 6
      4 for v in sortables(A,c[Integer(1):]):
      5     num+=Integer(1)
----> 6     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
      7     d=P.dimension()
      8     print(num,v,d)

File ~/git/affine_dominance/software/domination4.py:127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_faster(B, la, seqs[0])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_faster(B, la, s))
    128     if P.dimension()==0:
    129         break

File ~/git/affine_dominance/software/domination4.py:151, in p_lambda_faster(B, la, seq)
    148 #print("Hp:   ",Hp,Hp.vertices(),Hp.rays(),Hp.lines(),"\n")
    149 #print("Hm:   ",Hm,Hm.vertices(),Hm.rays(),Hm.lines(),"\n\n")
    150 Pp = P.intersection(Hp)
--> 151 Pm = P.intersection(Hm)
    152 if Pp.dimension() < rk:
    153     P=Em*Pm

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1371, in Polyhedron_base5.intersection(self, other)
   1369 parent = self.parent()
   1370 try:
-> 1371     intersection = parent.element_class(parent, None, [new_ieqs, new_eqns])
   1373     # Force calculation of the vertices.
   1374     _ = intersection.n_vertices()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:179, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    177 elif Hrep is not None:
    178     ieqs, eqns = Hrep
--> 179     self._init_from_Hrepresentation(ieqs, eqns, **kwds)
    180 else:
    181     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:129, in Polyhedron_ppl._init_from_Hrepresentation(self, ieqs, eqns, minimize, verbose)
    106 def _init_from_Hrepresentation(self, ieqs, eqns, minimize=True, verbose=False):
    107     """
    108     Construct polyhedron from H-representation data.
    109 
   (...)
    127         sage: Polyhedron_ppl._init_from_Hrepresentation(p, [], [])
    128     """
--> 129     cs = self._convert_constraints_to_ppl(ieqs, eqns)
    130     if cs.empty():
    131         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'universe')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:534, in Polyhedron_ppl._convert_constraints_to_ppl(ieqs, eqns)
    532     ieqs = []
    533 for ieq in ieqs:
--> 534     cs.insert(Polyhedron_ppl._convert_constraint_to_ppl(ieq, INEQUALITY))
    535 if eqns is None:
    536     eqns = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:509, in Polyhedron_ppl._convert_constraint_to_ppl(c, typ)
    507 A = dc[1:]
    508 if typ == INEQUALITY:
--> 509     return Linear_Expression(A, b) >= 0
    510 else:
    511     return Linear_Expression(A, b) == 0

File ppl/linear_algebra.pyx:655, in ppl.linear_algebra.Linear_Expression.__init__()

File ppl/linear_algebra.pyx:49, in ppl.linear_algebra.PPL_Coefficient_from_pyobject()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/rings/integer.pyx:914, in sage.rings.integer.Integer.__richcmp__ (build/cythonized/sage/rings/integer.c:16498)()
    912     c = mpz_cmp_d((<Integer>left).value, d)
    913 else:
--> 914     return coercion_model.richcmp(left, right, op)
    915 
    916 return rich_to_bool_sgn(op, c)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:2021, in sage.structure.coerce.CoercionModel.richcmp (build/cythonized/sage/structure/coerce.c:26173)()
   2019 # Coerce to a common parent
   2020 try:
-> 2021     x, y = self.canonical_coercion(x, y)
   2022 except (TypeError, NotImplementedError):
   2023     pass

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1422, in sage.structure.coerce.CoercionModel.canonical_coercion (build/cythonized/sage/structure/coerce.c:18956)()
   1420             self._record_exception()
   1421 
-> 1422     raise TypeError("no common canonical parent for objects with parents: '%s' and '%s'"%(xp, yp))
   1423 
   1424 cpdef coercion_maps(self, R, S) noexcept:

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: B(A,c)
[ 0  1  0  0  0]
[-1  0  1  0  0]
[ 0 -1  0  1  1]
[ 0  0 -1  0  0]
[ 0  0 -1  0  0]
sage: A=CartanMatrix(['D',5])
....: c=[4,0,1,2,3]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
1 [0, 1, 2, 3, 0, 1, 2, 0, 1, 0] 0
2 [0, 1, 2, 3, 0, 1, 2, 0, 1] 0
3 [0, 1, 2, 3, 0, 1, 2, 0] 0
4 [0, 1, 2, 3, 0, 1, 2, 1] 0
5 [0, 1, 2, 3, 0, 1, 2] 0
6 [0, 1, 2, 3, 0, 1, 0] 0
7 [0, 1, 2, 3, 0, 1] 0
8 [0, 1, 2, 3, 0, 2] 0
9 [0, 1, 2, 3, 0] 0
10 [0, 1, 2, 3, 1, 2, 1] 0
11 [0, 1, 2, 3, 1, 2] 0
12 [0, 1, 2, 3, 1] 0
13 [0, 1, 2, 3, 2] 0
14 [0, 1, 2, 3] 0
15 [0, 1, 2, 0, 1, 0] 0
16 [0, 1, 2, 0, 1] 0
17 [0, 1, 2, 0] 0
18 [0, 1, 2, 1] 0
19 [0, 1, 2] 0
20 [0, 1, 3, 0] 0
21 [0, 1, 3] 0
22 [0, 1, 0] 0
23 [0, 1] 0
24 [0, 2, 3, 2] 0
25 [0, 2, 3] 0
26 [0, 2] 0
27 [0, 3] 0
28 [0] 0
29 [1, 2, 3, 1, 2, 1] 0
30 [1, 2, 3, 1, 2] 0
31 [1, 2, 3, 1] 0
32 [1, 2, 3, 2] 0
33 [1, 2, 3] 0
34 [1, 2, 1] 0
35 [1, 2] 0
36 [1, 3] 0
37 [1] 0
38 [2, 3, 2] 0
39 [2, 3] 0
40 [2] 0
41 [3] 0
42 [] 0
sage: A=CartanMatrix(['D',5])
....: c=[4,3,0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
1 [3, 0, 1, 2, 3, 0, 1, 2, 0, 1] 0
2 [3, 0, 1, 2, 3, 0, 1, 2, 0] 0
3 [3, 0, 1, 2, 3, 0, 1, 2] 0
4 [3, 0, 1, 2, 3, 0, 1, 0] 0
5 [3, 0, 1, 2, 3, 0, 1] 0
6 [3, 0, 1, 2, 3, 0] 0
7 [3, 0, 1, 2, 3, 1, 2] 0
8 [3, 0, 1, 2, 3, 1] 0
9 [3, 0, 1, 2, 3] 0
10 [3, 0, 1, 2, 0, 1, 0] 0
11 [3, 0, 1, 2, 0, 1] 0
12 [3, 0, 1, 2, 0] 0
13 [3, 0, 1, 2, 1] 0
14 [3, 0, 1, 2] 0
15 [3, 0, 1, 0] 0
16 [3, 0, 1] 0
17 [3, 0, 2, 3] 0
18 [3, 0, 2] 0
19 [3, 0] 0
20 [3, 1, 2, 3, 1, 2] 0
21 [3, 1, 2, 3, 1] 0
22 [3, 1, 2, 3] 0
23 [3, 1, 2, 1] 0
24 [3, 1, 2] 0
25 [3, 1] 0
26 [3, 2, 3] 0
27 [3, 2] 0
28 [3] 0
29 [0, 1, 2, 0, 1, 0] 0
30 [0, 1, 2, 0, 1] 0
31 [0, 1, 2, 0] 0
32 [0, 1, 2, 1] 0
33 [0, 1, 2] 0
34 [0, 1, 0] 0
35 [0, 1] 0
36 [0, 2] 0
37 [0] 0
38 [1, 2, 1] 0
39 [1, 2] 0
40 [1] 0
41 [2] 0
42 [] 0
sage: A=CartanMatrix(['D',5])
....: c=[4,3,0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
....: 
1 [3, 0, 1, 2, 3, 0, 1, 2, 0, 1] 0
2 [3, 0, 1, 2, 3, 0, 1, 2, 0] 0
3 [3, 0, 1, 2, 3, 0, 1, 2] 0
4 [3, 0, 1, 2, 3, 0, 1, 0] 0
5 [3, 0, 1, 2, 3, 0, 1] 0
6 [3, 0, 1, 2, 3, 0] 0
7 [3, 0, 1, 2, 3, 1, 2] 0
8 [3, 0, 1, 2, 3, 1] 0
9 [3, 0, 1, 2, 3] 0
10 [3, 0, 1, 2, 0, 1, 0] 0
11 [3, 0, 1, 2, 0, 1] 0
12 [3, 0, 1, 2, 0] 0
13 [3, 0, 1, 2, 1] 0
14 [3, 0, 1, 2] 0
15 [3, 0, 1, 0] 0
16 [3, 0, 1] 0
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [824], line 6
      4 for v in sortables(A,c[Integer(1):]):
      5     num+=Integer(1)
----> 6     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
      7     d=P.dimension()
      8     print(num,v,d)

File ~/git/affine_dominance/software/domination4.py:127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_faster(B, la, seqs[0])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_faster(B, la, s))
    128     if P.dimension()==0:
    129         break

File ~/git/affine_dominance/software/domination4.py:159, in p_lambda_faster(B, la, seq)
    155         P=Ep*Pp
    156     else:
    157         #print("Pp:   ",Pp,Pp.vertices(),Pp.rays(),Pp.lines(),"\n")
    158         #print("Pm:   ",Pm,Pm.vertices(),Pm.rays(),Pm.lines(),"\n\n")
--> 159         P=(Ep*Pp).convex_hull(Em*Pm)
    160     B.mutate(k)
    161 return P

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4099, in sage.structure.element.Matrix.__mul__ (build/cythonized/sage/structure/element.c:35219)()
   4097 
   4098         if BOTH_ARE_ELEMENT(cl):
-> 4099             return coercion_model.bin_op(left, right, mul)
   4100 
   4101         cdef long value

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1222, in sage.structure.coerce.CoercionModel.bin_op (build/cythonized/sage/structure/coerce.c:15809)()
   1220 if action is not None:
   1221     if (<Action>action)._is_left:
-> 1222         return (<Action>action)._act_(x, y)
   1223     else:
   1224         return (<Action>action)._act_(y, x)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_actions.pyx:157, in sage.structure.coerce_actions.ActedUponAction._act_ (build/cythonized/sage/structure/coerce_actions.c:8579)()
    155     <... 'sage.structure.coerce_actions.ActedUponAction'>
    156 """
--> 157 return (<Element>x)._acted_upon_(g, not self._is_left)
    158 
    159 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:949, in sage.structure.element.Element._acted_upon_ (build/cythonized/sage/structure/element.c:16495)()
    947     return None
    948 
--> 949 cpdef _acted_upon_(self, x, bint self_on_left) noexcept:
    950     """
    951     Use this method to implement ``self`` acted on by x.

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1450, in Polyhedron_base5._acted_upon_(self, actor, self_on_left)
   1448         raise ValueError("matrices should act on the left")
   1449     else:
-> 1450         return self.linear_transformation(actor)
   1451 else:
   1452     return self.dilation(actor)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1879, in Polyhedron_base5.linear_transformation(self, linear_transf, new_base_ring)
   1873     pref_rep = 'Vrep' if self.n_vertices() <= self.n_inequalities() else 'Hrep'
   1875     return new_parent.element_class(new_parent, [new_vertices, new_rays, new_lines],
   1876                                     [new_inequalities, new_equations],
   1877                                     Vrep_minimal=True, Hrep_minimal=True, pref_rep=pref_rep)
-> 1879 return new_parent.element_class(new_parent, [tuple(new_vertices), tuple(new_rays), tuple(new_lines)], None)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:70, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
---> 70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:189, in Polyhedron_ppl.set_immutable(self)
    187 if not hasattr(self, '_Vrepresentation'):
    188     try:
--> 189         self._init_Vrepresentation_from_ppl(True)
    190     except TypeError as e:
    191         # Apparently the polyhedron is (no longer) integral.
    192         self._clear_cache()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:300, in Polyhedron_ppl._init_Vrepresentation_from_ppl(self, minimize)
    298     raise TypeError("Vrepresentation of mutable polyhedra cannot be recomputed")
    299 self._Vrepresentation = []
--> 300 gs = self._ppl_polyhedron.minimized_generators()
    301 parent = self.parent()
    302 for g in gs:

File ppl/polyhedron.pyx:340, in ppl.polyhedron.Polyhedron.minimized_generators()

KeyboardInterrupt: 
sage: A=CartanMatrix(['C',7])
....: c=[0,1,2,3,4,5,6]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
....: 
1 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6] 0
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [825], line 6
      4 for v in sortables(A,c[Integer(1):]):
      5     num+=Integer(1)
----> 6     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
      7     d=P.dimension()
      8     print(num,v,d)

File ~/git/affine_dominance/software/domination4.py:127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_faster(B, la, seqs[0])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_faster(B, la, s))
    128     if P.dimension()==0:
    129         break

File ~/git/affine_dominance/software/domination4.py:159, in p_lambda_faster(B, la, seq)
    155         P=Ep*Pp
    156     else:
    157         #print("Pp:   ",Pp,Pp.vertices(),Pp.rays(),Pp.lines(),"\n")
    158         #print("Pm:   ",Pm,Pm.vertices(),Pm.rays(),Pm.lines(),"\n\n")
--> 159         P=(Ep*Pp).convex_hull(Em*Pm)
    160     B.mutate(k)
    161 return P

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1312, in Polyhedron_base5.convex_hull(self, other)
   1310 hull_rays = self.rays() + other.rays()
   1311 hull_lines = self.lines() + other.lines()
-> 1312 return self.parent().element_class(self.parent(), [hull_vertices, hull_rays, hull_lines], None)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:174, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    171     lines = tuple(lines)
    173 if vertices or rays or lines:
--> 174     self._init_from_Vrepresentation(vertices, rays, lines, **kwds)
    175 else:
    176     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:99, in Polyhedron_ppl._init_from_Vrepresentation(self, vertices, rays, lines, minimize, verbose)
     72 def _init_from_Vrepresentation(self, vertices, rays, lines, minimize=True, verbose=False):
     73     """
     74     Construct polyhedron from V-representation data.
     75 
   (...)
     97         sage: Polyhedron_ppl._init_from_Vrepresentation(p, [], [], [])
     98     """
---> 99     gs = self._convert_generators_to_ppl(vertices, rays, lines)
    100     if gs.empty():
    101         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'empty')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:473, in Polyhedron_ppl._convert_generators_to_ppl(vertices, rays, lines)
    471     vertices = []
    472 for v in vertices:
--> 473     gs.insert(Polyhedron_ppl._convert_generator_to_ppl(v, VERTEX))
    474 if rays is None:
    475     rays = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:442, in Polyhedron_ppl._convert_generator_to_ppl(v, typ)
    440 d = LCM_list([denominator(v_i) for v_i in v])
    441 if d.is_one():
--> 442     return ob(Linear_Expression(v, 0))
    443 else:
    444     dv = [ d*v_i for v_i in v ]

File ppl/linear_algebra.pyx:654, in ppl.linear_algebra.Linear_Expression.__init__()

File ppl/linear_algebra.pyx:49, in ppl.linear_algebra.PPL_Coefficient_from_pyobject()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:1107, in sage.structure.element.Element.__richcmp__ (build/cythonized/sage/structure/element.c:18121)()
   1105         return (<Element>self)._richcmp_(other, op)
   1106     else:
-> 1107         return coercion_model.richcmp(self, other, op)
   1108 
   1109 cpdef _richcmp_(left, right, int op) noexcept:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:2021, in sage.structure.coerce.CoercionModel.richcmp (build/cythonized/sage/structure/coerce.c:26173)()
   2019 # Coerce to a common parent
   2020 try:
-> 2021     x, y = self.canonical_coercion(x, y)
   2022 except (TypeError, NotImplementedError):
   2023     pass

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1422, in sage.structure.coerce.CoercionModel.canonical_coercion (build/cythonized/sage/structure/coerce.c:18956)()
   1420             self._record_exception()
   1421 
-> 1422     raise TypeError("no common canonical parent for objects with parents: '%s' and '%s'"%(xp, yp))
   1423 
   1424 cpdef coercion_maps(self, R, S) noexcept:

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
1 [1, 2, 1, 2] 0
2 [1, 2, 1] 0
3 [1, 2] 1
Failure!
sage: A=CartanMatrix(['C',3])
....: c=[1,0,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
1 [0, 2] 0
2 [0] 0
3 [2] 0
4 [] 0
sage: A=CartanMatrix(['C',3])
....: c=[2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
1 [1, 0, 1] 0
2 [1, 0] 0
3 [1] 0
4 [0] 0
5 [] 0
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
....: 
1 [1, 2, 1, 2] 0
2 [1, 2, 1] 0
3 [1, 2] 1
Failure!
sage: A=CartanMatrix(['C',4])
....: c=[2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
....: 
---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
Cell In [830], line 6
      4 for v in sortables(A,c[Integer(1):]):
      5     num+=Integer(1)
----> 6     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
      7     d=P.dimension()
      8     print(num,v,d)

File ~/git/affine_dominance/software/domination4.py:199, in B(A, c)
    197     out[i,i]=0
    198     for j in range(i+1,n):
--> 199         out[c[i],c[j]]=-A[c[i],c[j]]
    200         out[c[j],c[i]]=A[c[j],c[i]]
    201 return out

IndexError: list index out of range
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
1 [1, 2, 3, 1, 2, 3, 1, 2, 3] 0
2 [1, 2, 3, 1, 2, 3, 1, 2] 0
3 [1, 2, 3, 1, 2, 3, 1] 0
4 [1, 2, 3, 1, 2, 3] 0
5 [1, 2, 3, 1, 2, 1] 0
6 [1, 2, 3, 1, 2] 0
7 [1, 2, 3, 1] 0
8 [1, 2, 3, 2, 3] 0
9 [1, 2, 3, 2] 0
10 [1, 2, 3] 0
11 [1, 2, 1] 0
12 [1, 2] 0
13 [1, 3] 0
14 [1] 0
15 [2, 3, 2, 3] 0
16 [2, 3, 2] 0
17 [2, 3] 0
18 [2] 0
19 [3] 0
20 [] 0
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
1 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
2 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
3 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
4 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1] 0
5 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
6 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
7 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1] 0
8 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
9 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1] 0
10 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
11 [1, 2, 3, 4, 1, 2, 3, 4, 1] 0
12 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4] 0
13 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3] 0
14 [1, 2, 3, 4, 1, 2, 3, 4, 2] 0
15 [1, 2, 3, 4, 1, 2, 3, 4] 0
16 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
17 [1, 2, 3, 4, 1, 2, 3, 1, 2] 0
18 [1, 2, 3, 4, 1, 2, 3, 1] 0
19 [1, 2, 3, 4, 1, 2, 3, 2] 0
20 [1, 2, 3, 4, 1, 2, 3] 0
21 [1, 2, 3, 4, 1, 2, 1] 0
22 [1, 2, 3, 4, 1, 2] 0
23 [1, 2, 3, 4, 1, 3, 4] 0
24 [1, 2, 3, 4, 1, 3] 0
25 [1, 2, 3, 4, 1] 0
26 [1, 2, 3, 4, 2, 3, 4, 2, 3, 4] 0
27 [1, 2, 3, 4, 2, 3, 4, 2, 3] 0
28 [1, 2, 3, 4, 2, 3, 4, 2] 0
29 [1, 2, 3, 4, 2, 3, 4] 0
30 [1, 2, 3, 4, 2, 3, 2] 0
31 [1, 2, 3, 4, 2, 3] 0
32 [1, 2, 3, 4, 2] 0
33 [1, 2, 3, 4, 3, 4] 0
34 [1, 2, 3, 4, 3] 0
35 [1, 2, 3, 4] 0
36 [1, 2, 3, 1, 2, 1] 0
37 [1, 2, 3, 1, 2] 0
38 [1, 2, 3, 1] 0
39 [1, 2, 3, 2] 0
40 [1, 2, 3] 0
41 [1, 2, 4, 1] 0
42 [1, 2, 4] 0
43 [1, 2, 1] 0
44 [1, 2] 0
45 [1, 3, 4, 3, 4] 0
46 [1, 3, 4, 3] 0
47 [1, 3, 4] 0
48 [1, 3] 0
49 [1, 4] 0
50 [1] 0
51 [2, 3, 4, 2, 3, 4, 2, 3, 4] 0
52 [2, 3, 4, 2, 3, 4, 2, 3] 0
53 [2, 3, 4, 2, 3, 4, 2] 0
54 [2, 3, 4, 2, 3, 4] 0
55 [2, 3, 4, 2, 3, 2] 0
56 [2, 3, 4, 2, 3] 0
57 [2, 3, 4, 2] 0
58 [2, 3, 4, 3, 4] 0
59 [2, 3, 4, 3] 0
60 [2, 3, 4] 0
61 [2, 3, 2] 0
62 [2, 3] 0
63 [2, 4] 0
64 [2] 0
65 [3, 4, 3, 4] 0
66 [3, 4, 3] 0
67 [3, 4] 0
68 [3] 0
69 [4] 0
70 [] 0
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_cone(B(A,c),lam(A,v),Kbackwards(c[1:],v))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list([c[0]]+k for k in Kbackwards(c[1:
....: ],v)))
....:     print("\n",v)
....:     print("parabolic     ",list(map(vector,P.rays())),list(map(vector,P.li
....: nes())))
....:     print("c0 + parabolic",list(map(vector,Q.rays())),list(map(vector,Q.li
....: nes())))
....:     print(P.intersection(Q).dimension())
....: 

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
parabolic      [(0, -1, 0, 0, 0)] []
c0 + parabolic [(1, 1, -1, 0, 0), (0, 1, 0, 0, 0)] []
0

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
parabolic      [(0, -1, 0, 0, 0)] []
c0 + parabolic [(1, 1, -1, 0, 0), (0, 1, 0, 0, 0)] []
0

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
parabolic      [(0, -1, 0, 0, 0)] []
c0 + parabolic [(1, 1, -1, 0, 0), (0, 1, 0, 0, 0)] []
0

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1]
parabolic      [(0, -1, 0, 0, 0)] []
c0 + parabolic [(0, 1, 0, 0, 0), (1, 2, 0, 1, -1), (1, 1, -1, 0, 0)] []
0

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
parabolic      [(1, 0, 0, 1, -1), (0, -1, 0, 0, 0)] []
c0 + parabolic [(1, 1, -1, 0, 0), (0, 1, 0, 0, 0)] []
0

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2]
parabolic      [(0, -1, 0, 0, 0)] []
c0 + parabolic [(1, 1, -1, 0, 0), (0, 1, 0, 0, 0)] []
0

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1]
parabolic      [(0, -1, 0, 0, 0)] []
c0 + parabolic [(0, 1, 0, 0, 0), (1, 2, 0, 1, -1), (1, 1, -1, 0, 0)] []
0
^Z
[1]+  Stopped                 /Applications/SageMath-10-2.app/Contents/Frameworks/Sage.framework/Versions/Current/venv/bin/sage
MA-C02K804RDR53:~ reading$ fg
/Applications/SageMath-10-2.app/Contents/Frameworks/Sage.framework/Versions/Current/venv/bin/sage

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
parabolic      [(1, 0, 0, 1, -1), (0, -1, 0, 0, 0)] []
c0 + parabolic [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] []
0

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1]
parabolic      [(0, -1, 0, 0, 0)] []
c0 + parabolic [(0, 1, 0, 0, 0), (1, 1, -2, 0, 1), (1, 2, 0, 1, -1), (1, 1, -1, 0, 0), (1, 2, 1, 1, -2)] []
0

 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
parabolic      [(1, 0, 0, 1, -1), (0, -1, 0, 0, 0)] []
c0 + parabolic [(0, 1, 0, 0, 0), (1, 2, 1, 1, -2), (1, 1, -1, 0, 0)] []
0

 [1, 2, 3, 4, 1, 2, 3, 4, 1]
parabolic      [(1, 0, 0, 1, -1), (1, 0, 1, 1, -2), (0, -1, 0, 0, 0)] []
c0 + parabolic [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] []
0

 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4]
parabolic      [(0, -1, 0, 1, 0), (0, -1, 0, 0, 0)] []
c0 + parabolic [(1, 1, -1, 1, 0), (1, 1, -1, 0, 0), (0, 1, 0, 0, 0), (0, 1, 0, 1, 0)] []
0

 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3]
parabolic      [(0, -1, 0, 1, 0), (0, -1, 0, 0, 0)] []
c0 + parabolic [(1, 1, -1, 1, 0), (1, 1, -1, 0, 0), (0, 1, 0, 0, 0), (0, 1, 0, 1, 0)] []
0

 [1, 2, 3, 4, 1, 2, 3, 4, 2]
parabolic      [(0, -1, 0, 0, 0)] []
c0 + parabolic [(0, 1, 0, 0, 0), (0, 0, -1, 0, 1), (1, 1, -1, 0, 0), (1, 2, 0, 1, -1), (1, 0, -3, 0, 2), (2, 1, -3, 1, 1), (1, 1, -1, 1, 0)] []
0

 [1, 2, 3, 4, 1, 2, 3, 4]
parabolic      [(1, 0, 0, 1, -1), (0, -1, 0, 0, 0)] []
c0 + parabolic [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] []
0

 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
parabolic      [(0, -1, 0, 0, 0)] []
c0 + parabolic [(0, 0, -1, 0, 1), (0, 1, 0, 0, 0), (1, 1, 0, 1, -1), (1, 3, 1, 0, -2), (1, 1, -1, 0, 0), (1, 2, 1, 1, -2)] []
0
^Z
[1]+  Stopped                 /Applications/SageMath-10-2.app/Contents/Frameworks/Sage.framework/Versions/Current/venv/bin/sage
MA-C02K804RDR53:~ reading$ fg
/Applications/SageMath-10-2.app/Contents/Frameworks/Sage.framework/Versions/Current/venv/bin/sage

 [1, 2, 3, 4, 1, 2, 3, 1, 2]
parabolic      [(1, 0, 0, 1, -1), (0, -1, 0, 0, 0)] []
c0 + parabolic [(1, 3, 1, 0, -2), (1, 1, -1, 0, 0), (1, 1, 0, 1, -1), (0, 0, -1, 0, 1), (0, 1, 0, 0, 0), (1, 2, 1, 1, -2)] []
0

 [1, 2, 3, 4, 1, 2, 3, 1]
parabolic      [(1, 0, 0, 1, -1), (1, 0, 1, 1, -2), (0, -1, 0, 0, 0)] []
c0 + parabolic [(0, 1, 0, 0, 0), (0, 0, -1, 0, 1), (1, 1, -1, 0, 0), (1, 3, 1, 0, -2)] []
0

 [1, 2, 3, 4, 1, 2, 3, 2]
parabolic      [(0, -1, 0, 0, 0)] []
c0 + parabolic [(0, 1, 0, 0, 0), (1, 2, 0, 1, -1), (1, 3, 1, 0, -2), (1, 1, -1, 0, 0), (0, 0, -1, 0, 1), (1, 1, -1, 1, 0)] []
0

 [1, 2, 3, 4, 1, 2, 3]
parabolic      [(1, 0, 0, 1, -1), (0, -1, 0, 0, 0)] []
c0 + parabolic [(0, 1, 0, 0, 0), (1, 3, 1, 0, -2), (1, 1, -1, 0, 0), (0, 0, -1, 0, 1)] []
0

 [1, 2, 3, 4, 1, 2, 1]
parabolic      [(1, 0, 0, 1, -1), (1, 1, 1, 0, -2), (0, -1, 0, 0, 0), (0, -2, 0, 1, 0), (1, 0, 1, 1, -2)] []
c0 + parabolic [(2, 3, 0, 0, -2), (1, 1, -1, 0, 0), (0, 1, 0, 0, 0)] []
0

 [1, 2, 3, 4, 1, 2]
parabolic      [(1, 0, 0, 1, -1), (1, 1, 1, 0, -2), (0, -1, 0, 0, 0)] []
c0 + parabolic [(0, 1, 0, 0, 0), (2, 3, 0, 0, -2), (1, 1, -1, 0, 0)] []
0

 [1, 2, 3, 4, 1, 3, 4]
parabolic      [(0, -1, 0, 0, 0)] []
c0 + parabolic [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, 0, -1, -1), (1, 1, -1, 2, 0), (2, 2, -1, 1, -1)] []
0

 [1, 2, 3, 4, 1, 3]
parabolic      [(0, -1, 0, 0, 0)] []
c0 + parabolic [(0, 1, 0, 0, 0), (1, 2, 0, 1, -1), (2, 2, -1, 3, -1), (1, 1, -1, 2, 0), (1, 1, -1, 0, 0), (2, 2, -1, 1, -1), (1, 2, 0, -1, -1), (0, 1, 0, -1, 0)] []
0
^Z
[1]+  Stopped                 /Applications/SageMath-10-2.app/Contents/Frameworks/Sage.framework/Versions/Current/venv/bin/sage
MA-C02K804RDR53:~ reading$ fg
/Applications/SageMath-10-2.app/Contents/Frameworks/Sage.framework/Versions/Current/venv/bin/sage

 [1, 2, 3, 4, 1]
parabolic      [(1, 0, 0, 1, -1), (0, -1, 0, 0, 0)] []
c0 + parabolic [(0, 1, 0, 0, 0), (0, 0, -1, 1, 1), (2, 2, -1, 1, -1), (1, 2, 0, -1, -1), (1, 1, -1, 0, 0), (2, 3, 0, 0, -2)] []
0
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [833], line 5
      3 for v in sortables(A,c[Integer(1):]):
      4     P=p_lambda_cone(B(A,c),lam(A,v),Kbackwards(c[Integer(1):],v))
----> 5     Q=p_lambda_cone(B(A,c),lam(A,v),list([c[Integer(0)]]+k for k in Kbackwards(c[Integer(1):],v)))
      6     print("\n",v)
      7     print("parabolic     ",list(map(vector,P.rays())),list(map(vector,P.lines()))) 

File ~/git/affine_dominance/software/domination4.py:186, in p_lambda_cone(B, la, seqs)
    184 P = cone_at(p_lambda_faster(B, la, seqs[0]),la)
    185 for s in seqs:
--> 186     P = P.intersection(cone_at(p_lambda_faster(B, la, s),la))
    187     if P.dimension()==0:
    188         break

File ~/git/affine_dominance/software/domination4.py:150, in p_lambda_faster(B, la, seq)
    147 Hm = Polyhedron(ieqs=[(0,)*(k+1)+(-1,)+(0,)*(m-k-1)])
    148 #print("Hp:   ",Hp,Hp.vertices(),Hp.rays(),Hp.lines(),"\n")
    149 #print("Hm:   ",Hm,Hm.vertices(),Hm.rays(),Hm.lines(),"\n\n")
--> 150 Pp = P.intersection(Hp)
    151 Pm = P.intersection(Hm)
    152 if Pp.dimension() < rk:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1371, in Polyhedron_base5.intersection(self, other)
   1369 parent = self.parent()
   1370 try:
-> 1371     intersection = parent.element_class(parent, None, [new_ieqs, new_eqns])
   1373     # Force calculation of the vertices.
   1374     _ = intersection.n_vertices()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:179, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    177 elif Hrep is not None:
    178     ieqs, eqns = Hrep
--> 179     self._init_from_Hrepresentation(ieqs, eqns, **kwds)
    180 else:
    181     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:129, in Polyhedron_ppl._init_from_Hrepresentation(self, ieqs, eqns, minimize, verbose)
    106 def _init_from_Hrepresentation(self, ieqs, eqns, minimize=True, verbose=False):
    107     """
    108     Construct polyhedron from H-representation data.
    109 
   (...)
    127         sage: Polyhedron_ppl._init_from_Hrepresentation(p, [], [])
    128     """
--> 129     cs = self._convert_constraints_to_ppl(ieqs, eqns)
    130     if cs.empty():
    131         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'universe')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:538, in Polyhedron_ppl._convert_constraints_to_ppl(ieqs, eqns)
    536     eqns = []
    537 for eqn in eqns:
--> 538     cs.insert(Polyhedron_ppl._convert_constraint_to_ppl(eqn, EQUATION))
    539 return cs

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:511, in Polyhedron_ppl._convert_constraint_to_ppl(c, typ)
    509     return Linear_Expression(A, b) >= 0
    510 else:
--> 511     return Linear_Expression(A, b) == 0

File ppl/linear_algebra.pyx:654, in ppl.linear_algebra.Linear_Expression.__init__()

File ppl/linear_algebra.pyx:49, in ppl.linear_algebra.PPL_Coefficient_from_pyobject()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/rings/integer.pyx:914, in sage.rings.integer.Integer.__richcmp__ (build/cythonized/sage/rings/integer.c:16498)()
    912     c = mpz_cmp_d((<Integer>left).value, d)
    913 else:
--> 914     return coercion_model.richcmp(left, right, op)
    915 
    916 return rich_to_bool_sgn(op, c)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:2021, in sage.structure.coerce.CoercionModel.richcmp (build/cythonized/sage/structure/coerce.c:26173)()
   2019 # Coerce to a common parent
   2020 try:
-> 2021     x, y = self.canonical_coercion(x, y)
   2022 except (TypeError, NotImplementedError):
   2023     pass

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1422, in sage.structure.coerce.CoercionModel.canonical_coercion (build/cythonized/sage/structure/coerce.c:18956)()
   1420             self._record_exception()
   1421 
-> 1422     raise TypeError("no common canonical parent for objects with parents: '%s' and '%s'"%(xp, yp))
   1423 
   1424 cpdef coercion_maps(self, R, S) noexcept:

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: for v in sortables(A,c[1:]):
....:     for seq in Kbackwards(c[1:],v):
....:         p_lambda_cone(B(A,c),lam(A,v),[seq,[c[0]]+seq]).rays()
....:     if input()=="q":
....:         break
....: 
(A ray in the direction (0, -1, 0, 1, 0),
 A ray in the direction (0, 0, 0, -1, 0),
 A ray in the direction (-1, 0, 1, 0, 0),
 A ray in the direction (0, 0, -1, 0, 1))
(A ray in the direction (-1, 0, 1, 0, 0),
 A ray in the direction (0, 0, -1, -2, 1),
 A ray in the direction (0, -1, 0, 1, 0),
 A ray in the direction (0, 0, 0, 1, 0))
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, -1, -1, 1, 1),
 A ray in the direction (0, 0, 0, -1, 0),
 A ray in the direction (-1, 0, 1, 0, 0))
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, -1, -1, -1, 1),
 A ray in the direction (-1, 0, 1, 0, 0))
(A ray in the direction (-1, -1, 1, 1, 0),
 A ray in the direction (0, 0, 0, -1, 0),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, -1, 0, 1))
(A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, -1, -2, 1),
 A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (-1, -1, 1, 1, 0))
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (-1, -1, 0, 1, 1),
 A ray in the direction (0, 0, 0, -1, 0),
 A ray in the direction (0, 1, 0, -1, 0))
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0),
 A ray in the direction (-1, -1, 0, 0, 1))
(A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, -1, 0, 1, 0),
 A ray in the direction (0, 0, 0, -1, 0),
 A ray in the direction (0, 0, -1, 0, 1))
(A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, 0, -1, -2, 1),
 A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, -1, 0, 1, 0))
(A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, -1, -1, 1, 1),
 A ray in the direction (0, 0, 0, -1, 0))
(A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, -1, -1, -1, 1))
(A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, 0, -1, 0, 1),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, -1, 0))
(A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, -1, -2, 1),
 A ray in the direction (0, 0, 0, 1, 0))
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, -1, 0))
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, 1, 0, -1, 0))

(A ray in the direction (-1, 0, 1, 0, 0),
 A ray in the direction (0, 0, -1, -2, 1),
 A ray in the direction (0, -1, 0, 1, 0),
 A ray in the direction (0, 0, 0, 1, 0))
(A ray in the direction (-1, 0, 1, 0, 0),
 A ray in the direction (0, 0, 1, 2, -1),
 A ray in the direction (0, -1, -1, -1, 1),
 A ray in the direction (0, 0, -1, -1, 1))
(A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, -1, -2, 1),
 A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (-1, -1, 1, 1, 0))
(A ray in the direction (0, 0, 1, 2, -1),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, -1, -1, 1),
 A ray in the direction (-1, -1, 0, -1, 1))
(A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, 0, -1, -2, 1),
 A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, -1, 0, 1, 0))
(A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 1, 2, -1),
 A ray in the direction (0, 0, -1, -1, 1),
 A ray in the direction (0, -1, -1, -1, 1))
(A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, -1, -2, 1),
 A ray in the direction (0, 0, 0, 1, 0))
(A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 1, 2, -1),
 A ray in the direction (0, 0, -1, -1, 1))
(A ray in the direction (0, 0, 0, -1, 0),
 A ray in the direction (0, -1, 0, 1, 0),
 A ray in the direction (-1, 0, 1, 0, 0),
 A ray in the direction (0, 0, -1, -2, 1))
(A ray in the direction (0, 0, 0, -1, 0),
 A ray in the direction (0, 0, 1, 2, -1),
 A ray in the direction (0, -1, -1, -1, 1),
 A ray in the direction (-1, 0, 1, 0, 0))
(A ray in the direction (0, 0, -1, -2, 1),
 A ray in the direction (-1, -1, 1, 1, 0),
 A ray in the direction (0, 0, 0, -1, 0),
 A ray in the direction (0, 1, 0, -1, 0))
(A ray in the direction (0, 0, 1, 2, -1),
 A ray in the direction (-1, -1, 0, -1, 1),
 A ray in the direction (0, 0, 0, -1, 0),
 A ray in the direction (0, 1, 0, -1, 0))
(A ray in the direction (0, 0, 0, -1, 0),
 A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, -1, 0, 1, 0),
 A ray in the direction (0, 0, -1, -2, 1))
(A ray in the direction (0, 0, 0, -1, 0),
 A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 1, 2, -1),
 A ray in the direction (0, -1, -1, -1, 1))
(A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, 0, -1, -2, 1),
 A ray in the direction (0, 0, 0, -1, 0),
 A ray in the direction (0, 1, 0, -1, 0))
(A ray in the direction (0, 0, 1, 2, -1),
 A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, -1, 0))
^[[A
(A ray in the direction (-1, 0, 1, 0, 0),
 A ray in the direction (0, 0, 1, 2, -1),
 A ray in the direction (0, -1, -1, -1, 1),
 A ray in the direction (0, 0, -1, -1, 1))
(A ray in the direction (0, 1, 1, 1, -1),
 A ray in the direction (0, -1, 0, 1, 0),
 A ray in the direction (0, 0, -1, -1, 1),
 A ray in the direction (-1, -1, 0, -1, 1))
(A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 1, 2, -1),
 A ray in the direction (0, 0, -1, -1, 1),
 A ray in the direction (0, -1, -1, -1, 1))
(A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, 0, -1, -1, 1),
 A ray in the direction (0, 1, 1, 1, -1),
 A ray in the direction (0, -1, 0, 1, 0))
(A ray in the direction (0, 0, 1, 1, -1),
 A ray in the direction (0, -1, -1, -1, 1),
 A ray in the direction (-1, 0, 1, 0, 0),
 A ray in the direction (0, 0, -1, 0, 1))
(A ray in the direction (-1, -1, 0, -1, 1),
 A ray in the direction (0, 0, 1, 1, -1),
 A ray in the direction (0, 1, 1, 1, -1),
 A ray in the direction (0, -1, -2, -1, 2))
(A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 1, 1, -1),
 A ray in the direction (0, -1, -1, -1, 1),
 A ray in the direction (0, 0, -1, 0, 1))
(A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, -1, -2, -1, 2),
 A ray in the direction (0, 1, 1, 1, -1),
 A ray in the direction (0, 0, 1, 1, -1))
(A ray in the direction (-1, 0, 1, 0, 0),
 A ray in the direction (0, -1, -1, -1, 1),
 A ray in the direction (0, 0, -1, -1, 1),
 A ray in the direction (0, 0, -1, -2, 1))
(A ray in the direction (0, 1, 1, 1, -1),
 A ray in the direction (0, 0, -1, -1, 1),
 A ray in the direction (-1, -1, 0, -1, 1),
 A ray in the direction (0, 0, -1, -2, 1))
(A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, 0, -1, -1, 1),
 A ray in the direction (0, -1, -1, -1, 1),
 A ray in the direction (0, 0, -1, -2, 1))
(A ray in the direction (0, 0, -1, -2, 1),
 A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, 1, 1, 1, -1),
 A ray in the direction (0, 0, -1, -1, 1))
(A ray in the direction (0, 0, 1, 1, -1),
 A ray in the direction (0, 0, -1, -2, 1),
 A ray in the direction (0, -1, -1, -1, 1),
 A ray in the direction (-1, 0, 1, 0, 0))
(A ray in the direction (0, 0, -1, -2, 1),
 A ray in the direction (-1, -1, 0, -1, 1),
 A ray in the direction (0, 0, 1, 1, -1),
 A ray in the direction (0, 1, 1, 1, -1))
(A ray in the direction (0, 0, 1, 1, -1),
 A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, -1, -1, -1, 1),
 A ray in the direction (0, 0, -1, -2, 1))
(A ray in the direction (0, 0, -1, -2, 1),
 A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, 1, 1, 1, -1),
 A ray in the direction (0, 0, 1, 1, -1))
q
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: for v in sortables(A,c[1:]):
....:     for seq in Kbackwards(c[1:],v):
....:         p_lambda_cone(B(A,c),lam(A,v),[seq,[c[0]]+seq]).rays().contains(B(
....: A,c).column(0))
....:     if input()=="q":
....:         break
....: 
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
Cell In [835], line 5
      3 for v in sortables(A,c[Integer(1):]):
      4     for seq in Kbackwards(c[Integer(1):],v):
----> 5         p_lambda_cone(B(A,c),lam(A,v),[seq,[c[Integer(0)]]+seq]).rays().contains(B(A,c).column(Integer(0)))
      6     if input()=="q":
      7         break

AttributeError: 'tuple' object has no attribute 'contains'
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: for v in sortables(A,c[1:]):
....:     for seq in Kbackwards(c[1:],v):
....:         p_lambda_cone(B(A,c),lam(A,v),[seq,[c[0]]+seq]).contains(B(A,c).co
....: lumn(0))
....:     if input()=="q":
....:         break
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False

False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False

False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
^[
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False

False
False
False
False
False

False


False

False

False

False
False

False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False

False

False

False

False

False
False


False
False

False

False

False

False

False
False

False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
^[[AFalse
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
q
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False

False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
q
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: n=0
....: for v in sortables(A,c[1:]):
....:     n+=1
....:     print(n,v)
....:     for seq in Kbackwards(c[1:],v):
....:         if p_lambda_cone(B(A,c),lam(A,v),[seq,[c[0]]+seq]).contains(B(A,c)
....: .column(0)):
....:             print("Containment")
....:             break
....: 
1 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
2 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
3 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
4 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1]
5 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
6 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2]
7 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1]
8 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
9 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1]
10 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
11 [1, 2, 3, 4, 1, 2, 3, 4, 1]
12 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4]
13 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3]
14 [1, 2, 3, 4, 1, 2, 3, 4, 2]
15 [1, 2, 3, 4, 1, 2, 3, 4]
16 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
17 [1, 2, 3, 4, 1, 2, 3, 1, 2]
18 [1, 2, 3, 4, 1, 2, 3, 1]
19 [1, 2, 3, 4, 1, 2, 3, 2]
20 [1, 2, 3, 4, 1, 2, 3]
21 [1, 2, 3, 4, 1, 2, 1]
22 [1, 2, 3, 4, 1, 2]
23 [1, 2, 3, 4, 1, 3, 4]
24 [1, 2, 3, 4, 1, 3]
25 [1, 2, 3, 4, 1]
26 [1, 2, 3, 4, 2, 3, 4, 2, 3, 4]
27 [1, 2, 3, 4, 2, 3, 4, 2, 3]
28 [1, 2, 3, 4, 2, 3, 4, 2]
29 [1, 2, 3, 4, 2, 3, 4]
30 [1, 2, 3, 4, 2, 3, 2]
31 [1, 2, 3, 4, 2, 3]
32 [1, 2, 3, 4, 2]
33 [1, 2, 3, 4, 3, 4]
34 [1, 2, 3, 4, 3]
35 [1, 2, 3, 4]
36 [1, 2, 3, 1, 2, 1]
37 [1, 2, 3, 1, 2]
38 [1, 2, 3, 1]
39 [1, 2, 3, 2]
40 [1, 2, 3]
41 [1, 2, 4, 1]
42 [1, 2, 4]
43 [1, 2, 1]
44 [1, 2]
45 [1, 3, 4, 3, 4]
46 [1, 3, 4, 3]
47 [1, 3, 4]
48 [1, 3]
49 [1, 4]
50 [1]
51 [2, 3, 4, 2, 3, 4, 2, 3, 4]
52 [2, 3, 4, 2, 3, 4, 2, 3]
53 [2, 3, 4, 2, 3, 4, 2]
54 [2, 3, 4, 2, 3, 4]
55 [2, 3, 4, 2, 3, 2]
56 [2, 3, 4, 2, 3]
57 [2, 3, 4, 2]
58 [2, 3, 4, 3, 4]
59 [2, 3, 4, 3]
60 [2, 3, 4]
61 [2, 3, 2]
62 [2, 3]
63 [2, 4]
64 [2]
65 [3, 4, 3, 4]
66 [3, 4, 3]
67 [3, 4]
68 [3]
69 [4]
70 []
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: for v in sortables(A,c[1:]):
....:     for seq in Kbackwards(c[1:],v):
....:         p_lambda_cone(B(A,c),lam(A,v),[seq,[c[0]]+seq]).contains(B(A,c).co
....: lumn(0))
....:     if input()=="q":
....:         break
....: 
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
q
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: for v in sortables(A,c[1:]):
....:     for seq in Kbackwards(c[1:],v):
....:         p_lambda_cone(B(A,c),lam(A,v),[seq,[c[0]]+seq]).rays()
....:     if input()=="q":
....:         break
....: 
(A ray in the direction (0, -1, 0, 1, 0),
 A ray in the direction (0, 0, 0, -1, 0),
 A ray in the direction (-1, 0, 1, 0, 0),
 A ray in the direction (0, 0, -1, 0, 1))
(A ray in the direction (-1, 0, 1, 0, 0),
 A ray in the direction (0, 0, -1, -2, 1),
 A ray in the direction (0, -1, 0, 1, 0),
 A ray in the direction (0, 0, 0, 1, 0))
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, -1, -1, 1, 1),
 A ray in the direction (0, 0, 0, -1, 0),
 A ray in the direction (-1, 0, 1, 0, 0))
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, -1, -1, -1, 1),
 A ray in the direction (-1, 0, 1, 0, 0))
(A ray in the direction (-1, -1, 1, 1, 0),
 A ray in the direction (0, 0, 0, -1, 0),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, -1, 0, 1))
(A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, -1, -2, 1),
 A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (-1, -1, 1, 1, 0))
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (-1, -1, 0, 1, 1),
 A ray in the direction (0, 0, 0, -1, 0),
 A ray in the direction (0, 1, 0, -1, 0))
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 1, 0, 0, 0),
 A ray in the direction (-1, -1, 0, 0, 1))
(A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, -1, 0, 1, 0),
 A ray in the direction (0, 0, 0, -1, 0),
 A ray in the direction (0, 0, -1, 0, 1))
(A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, 0, -1, -2, 1),
 A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, -1, 0, 1, 0))
(A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, -1, -1, 1, 1),
 A ray in the direction (0, 0, 0, -1, 0))
(A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, -1, -1, -1, 1))
(A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, 0, -1, 0, 1),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, -1, 0))
(A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, -1, -2, 1),
 A ray in the direction (0, 0, 0, 1, 0))
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, -1, 0))
(A ray in the direction (0, 0, 1, 0, -1),
 A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, 1, 0, -1, 0))
^[[A
(A ray in the direction (-1, 0, 1, 0, 0),
 A ray in the direction (0, 0, -1, -2, 1),
 A ray in the direction (0, -1, 0, 1, 0),
 A ray in the direction (0, 0, 0, 1, 0))
(A ray in the direction (-1, 0, 1, 0, 0),
 A ray in the direction (0, 0, 1, 2, -1),
 A ray in the direction (0, -1, -1, -1, 1),
 A ray in the direction (0, 0, -1, -1, 1))
(A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, -1, -2, 1),
 A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (-1, -1, 1, 1, 0))
(A ray in the direction (0, 0, 1, 2, -1),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, -1, -1, 1),
 A ray in the direction (-1, -1, 0, -1, 1))
(A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, 0, -1, -2, 1),
 A ray in the direction (0, 0, 0, 1, 0),
 A ray in the direction (0, -1, 0, 1, 0))
(A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 1, 2, -1),
 A ray in the direction (0, 0, -1, -1, 1),
 A ray in the direction (0, -1, -1, -1, 1))
(A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, -1, -2, 1),
 A ray in the direction (0, 0, 0, 1, 0))
(A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 1, 2, -1),
 A ray in the direction (0, 0, -1, -1, 1))
(A ray in the direction (0, 0, 0, -1, 0),
 A ray in the direction (0, -1, 0, 1, 0),
 A ray in the direction (-1, 0, 1, 0, 0),
 A ray in the direction (0, 0, -1, -2, 1))
(A ray in the direction (0, 0, 0, -1, 0),
 A ray in the direction (0, 0, 1, 2, -1),
 A ray in the direction (0, -1, -1, -1, 1),
 A ray in the direction (-1, 0, 1, 0, 0))
(A ray in the direction (0, 0, -1, -2, 1),
 A ray in the direction (-1, -1, 1, 1, 0),
 A ray in the direction (0, 0, 0, -1, 0),
 A ray in the direction (0, 1, 0, -1, 0))
(A ray in the direction (0, 0, 1, 2, -1),
 A ray in the direction (-1, -1, 0, -1, 1),
 A ray in the direction (0, 0, 0, -1, 0),
 A ray in the direction (0, 1, 0, -1, 0))
(A ray in the direction (0, 0, 0, -1, 0),
 A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, -1, 0, 1, 0),
 A ray in the direction (0, 0, -1, -2, 1))
(A ray in the direction (0, 0, 0, -1, 0),
 A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, 0, 1, 2, -1),
 A ray in the direction (0, -1, -1, -1, 1))
(A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, 0, -1, -2, 1),
 A ray in the direction (0, 0, 0, -1, 0),
 A ray in the direction (0, 1, 0, -1, 0))
(A ray in the direction (0, 0, 1, 2, -1),
 A ray in the direction (1, 0, -1, 0, 0),
 A ray in the direction (0, 1, 0, -1, 0),
 A ray in the direction (0, 0, 0, -1, 0))
q
sage: A=CartanMatrix(['D',4])
....: c=[0,1,2,3,4]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
Cell In [840], line 4
      2 c=[Integer(0),Integer(1),Integer(2),Integer(3),Integer(4)]
      3 num=Integer(0)
----> 4 for v in sortables(A,c[Integer(1):]):
      5     num+=Integer(1)
      6     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))

File ~/git/affine_dominance/software/domination4.py:349, in sortables(A, c)
    348 def sortables(A,c):
--> 349     yield from sortables_remaining(A,c,[],vector([1]*A.nrows()))

File ~/git/affine_dominance/software/domination4.py:356, in sortables_remaining(A, c, sort, vec)
    354 else:
    355     if vec[c[0]]>0:
--> 356         yield from sortables_remaining(A,c[1:]+[c[0]],sort+[c[0]],reflect(A,vec,c[0]))
    357     yield from sortables_remaining(A,c[1:],sort,vec)

File ~/git/affine_dominance/software/domination4.py:356, in sortables_remaining(A, c, sort, vec)
    354 else:
    355     if vec[c[0]]>0:
--> 356         yield from sortables_remaining(A,c[1:]+[c[0]],sort+[c[0]],reflect(A,vec,c[0]))
    357     yield from sortables_remaining(A,c[1:],sort,vec)

File ~/git/affine_dominance/software/domination4.py:356, in sortables_remaining(A, c, sort, vec)
    354 else:
    355     if vec[c[0]]>0:
--> 356         yield from sortables_remaining(A,c[1:]+[c[0]],sort+[c[0]],reflect(A,vec,c[0]))
    357     yield from sortables_remaining(A,c[1:],sort,vec)

File ~/git/affine_dominance/software/domination4.py:355, in sortables_remaining(A, c, sort, vec)
    353     yield sort
    354 else:
--> 355     if vec[c[0]]>0:
    356         yield from sortables_remaining(A,c[1:]+[c[0]],sort+[c[0]],reflect(A,vec,c[0]))
    357     yield from sortables_remaining(A,c[1:],sort,vec)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/modules/free_module_element.pyx:1842, in sage.modules.free_module_element.FreeModuleElement.__getitem__ (build/cythonized/sage/modules/free_module_element.c:19571)()
   1840     n += d
   1841 if n < 0 or n >= d:
-> 1842     raise IndexError("vector index out of range")
   1843 return self.get_unsafe(n)
   1844 

IndexError: vector index out of range
sage: A=CartanMatrix(['D',4])
....: c=[0,1,2,3]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
1 [1, 2, 3, 1, 2, 3] 0
2 [1, 2, 3, 1, 2] 0
3 [1, 2, 3, 1, 3] 0
4 [1, 2, 3, 1] 0
5 [1, 2, 3] 1
Failure!
sage: B(A,c)
[ 0  1  0  0]
[-1  0  1  1]
[ 0 -1  0  0]
[ 0 -1  0  0]
sage: A=CartanMatrix(['D',4])
....: c=[3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
1 [2, 1, 0, 2, 1, 2] 0
2 [2, 1, 0, 2, 1] 0
3 [2, 1, 0, 2] 1
Failure!
sage: A=CartanMatrix(['A',2])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
Cell In [844], line 4
      2 c=[Integer(0),Integer(1),Integer(2)]
      3 num=Integer(0)
----> 4 for v in sortables(A,c[Integer(1):]):
      5     num+=Integer(1)
      6     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))

File ~/git/affine_dominance/software/domination4.py:349, in sortables(A, c)
    348 def sortables(A,c):
--> 349     yield from sortables_remaining(A,c,[],vector([1]*A.nrows()))

File ~/git/affine_dominance/software/domination4.py:356, in sortables_remaining(A, c, sort, vec)
    354 else:
    355     if vec[c[0]]>0:
--> 356         yield from sortables_remaining(A,c[1:]+[c[0]],sort+[c[0]],reflect(A,vec,c[0]))
    357     yield from sortables_remaining(A,c[1:],sort,vec)

File ~/git/affine_dominance/software/domination4.py:355, in sortables_remaining(A, c, sort, vec)
    353     yield sort
    354 else:
--> 355     if vec[c[0]]>0:
    356         yield from sortables_remaining(A,c[1:]+[c[0]],sort+[c[0]],reflect(A,vec,c[0]))
    357     yield from sortables_remaining(A,c[1:],sort,vec)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/modules/free_module_element.pyx:1842, in sage.modules.free_module_element.FreeModuleElement.__getitem__ (build/cythonized/sage/modules/free_module_element.c:19571)()
   1840     n += d
   1841 if n < 0 or n >= d:
-> 1842     raise IndexError("vector index out of range")
   1843 return self.get_unsafe(n)
   1844 

IndexError: vector index out of range
sage: A=CartanMatrix(['A',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
1 [1, 2, 1] 0
2 [1, 2] 0
3 [1] 0
4 [2] 0
5 [] 0
sage: A=CartanMatrix(['A',3])
....: c=[0,2,1]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
1 [2, 1, 2] 0
2 [2, 1] 0
3 [2] 0
4 [1] 0
5 [] 0
sage: A=CartanMatrix(['A',3])
....: c=[1,0,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
1 [0, 2] 0
2 [0] 0
3 [2] 0
4 [] 0
sage: A=CartanMatrix(['A',3])
....: c=[2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
1 [1, 0, 1] 0
2 [1, 0] 0
3 [1] 0
4 [0] 0
5 [] 0
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
1 [1, 2, 1, 2] 0
2 [1, 2, 1] 0
3 [1, 2] 1
Failure!
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
....: 
1 [2, 1, 2, 1] 0
2 [2, 1, 2] 1
Failure!
sage: A=CartanMatrix(['C',3])
....: c=[1,0,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
1 [0, 2] 0
2 [0] 0
3 [2] 0
4 [] 0
sage: A=CartanMatrix(['C',3])
....: c=[2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
1 [1, 0, 1] 0
2 [1, 0] 0
3 [1] 0
4 [0] 0
5 [] 0
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
....: 
1 [2, 1, 2, 1] 0
2 [2, 1, 2] 1
Failure!
sage: B(A,c)
[ 0  1  0]
[-1  0 -2]
[ 0  1  0]
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
1 [1, 2, 1, 2] 0
2 [1, 2, 1] 0
3 [1, 2] 1
Failure!
sage: B(A,c)
[ 0  1  0]
[-1  0  2]
[ 0 -1  0]
sage: A=CartanMatrix(['D',4])
....: c=[0,1,2,3]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
....: 
1 [1, 2, 3, 1, 2, 3] 0
2 [1, 2, 3, 1, 2] 0
3 [1, 2, 3, 1, 3] 0
4 [1, 2, 3, 1] 0
5 [1, 2, 3] 1
Failure!
sage: A=CartanMatrix(['D',4])
....: c=[0,1,2,3]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
....: 
1 [1, 2, 3, 1, 2, 3] 0
2 [1, 2, 3, 1, 2] 0
3 [1, 2, 3, 1, 3] 0
4 [1, 2, 3, 1] 0
5 [1, 2, 3] 1
Failure!
sage: B(A,c)
[ 0  1  0  0]
[-1  0  1  1]
[ 0 -1  0  0]
[ 0 -1  0  0]
sage: A=CartanMatrix(['D',4])
....: c=[0,2,1,3]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
1 [2, 1, 3, 2, 1, 2] 0
2 [2, 1, 3, 2, 1] 0
3 [2, 1, 3, 2] 1
Failure!
sage: A=CartanMatrix(['D',4])
....: c=[0,2,3,1]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
1 [2, 3, 1, 2, 3, 1] 0
2 [2, 3, 1, 2, 3] 1
Failure!
sage: A=CartanMatrix(['D',4])
....: c=[2,3,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
....: 
1 [3, 1, 0, 3, 1, 3] 0
2 [3, 1, 0, 3, 1] 0
3 [3, 1, 0, 3] 1
Failure!
sage: A=CartanMatrix(['D',5])
....: c=[0,1,2,3,4]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
1 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
2 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
3 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 4] 0
4 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
5 [1, 2, 3, 4, 1, 2, 3, 4, 1] 0
6 [1, 2, 3, 4, 1, 2, 3, 4] 0
7 [1, 2, 3, 4, 1, 2, 3, 1, 2] 0
8 [1, 2, 3, 4, 1, 2, 3, 1] 0
9 [1, 2, 3, 4, 1, 2, 3] 0
10 [1, 2, 3, 4, 1, 2, 4, 1, 2] 0
11 [1, 2, 3, 4, 1, 2, 4, 1] 0
12 [1, 2, 3, 4, 1, 2, 4] 0
13 [1, 2, 3, 4, 1, 2, 1] 0
14 [1, 2, 3, 4, 1, 2] 0
15 [1, 2, 3, 4, 1] 0
16 [1, 2, 3, 4, 2, 3, 4] 0
17 [1, 2, 3, 4, 2, 3] 0
18 [1, 2, 3, 4, 2, 4] 0
19 [1, 2, 3, 4, 2] 0
20 [1, 2, 3, 4] 0
21 [1, 2, 3, 1, 2, 1] 0
22 [1, 2, 3, 1, 2] 0
23 [1, 2, 3, 1] 0
24 [1, 2, 3, 2] 0
25 [1, 2, 3] 0
26 [1, 2, 4, 1, 2, 1] 0
27 [1, 2, 4, 1, 2] 0
28 [1, 2, 4, 1] 0
29 [1, 2, 4, 2] 0
30 [1, 2, 4] 0
31 [1, 2, 1] 0
32 [1, 2] 0
33 [1, 3, 4] 0
34 [1, 3] 0
35 [1, 4] 0
36 [1] 0
37 [2, 3, 4, 2, 3, 4] 0
38 [2, 3, 4, 2, 3] 0
39 [2, 3, 4, 2, 4] 0
40 [2, 3, 4, 2] 0
41 [2, 3, 4] 0
42 [2, 3, 2] 0
43 [2, 3] 0
44 [2, 4, 2] 0
45 [2, 4] 0
46 [2] 0
47 [3, 4] 0
48 [3] 0
49 [4] 0
50 [] 0
sage: B(A,c)
[ 0  1  0  0  0]
[-1  0  1  0  0]
[ 0 -1  0  1  1]
[ 0  0 -1  0  0]
[ 0  0 -1  0  0]
sage: A=CartanMatrix(['D',5])
....: c=[1,0,2,3,4]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
1 [0, 2, 3, 4, 2, 3, 4] 0
2 [0, 2, 3, 4, 2, 3] 0
3 [0, 2, 3, 4, 2, 4] 0
4 [0, 2, 3, 4, 2] 0
5 [0, 2, 3, 4] 0
6 [0, 2, 3, 2] 0
7 [0, 2, 3] 0
8 [0, 2, 4, 2] 0
9 [0, 2, 4] 0
10 [0, 2] 0
11 [0, 3, 4] 0
12 [0, 3] 0
13 [0, 4] 0
14 [0] 0
15 [2, 3, 4, 2, 3, 4] 0
16 [2, 3, 4, 2, 3] 0
17 [2, 3, 4, 2, 4] 0
18 [2, 3, 4, 2] 0
19 [2, 3, 4] 0
20 [2, 3, 2] 0
21 [2, 3] 0
22 [2, 4, 2] 0
23 [2, 4] 0
24 [2] 0
25 [3, 4] 0
26 [3] 0
27 [4] 0
28 [] 0
sage: A=CartanMatrix(['D',5])
....: c=[0,2,1,3,4]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
....: 
1 [2, 1, 3, 4, 2, 1, 3, 4, 2, 1, 3, 4] 0
2 [2, 1, 3, 4, 2, 1, 3, 4, 2, 1, 3] 0
3 [2, 1, 3, 4, 2, 1, 3, 4, 2, 1, 4] 0
4 [2, 1, 3, 4, 2, 1, 3, 4, 2, 1] 0
5 [2, 1, 3, 4, 2, 1, 3, 4, 2, 3, 4] 0
6 [2, 1, 3, 4, 2, 1, 3, 4, 2, 3] 0
7 [2, 1, 3, 4, 2, 1, 3, 4, 2, 4] 0
8 [2, 1, 3, 4, 2, 1, 3, 4, 2] 0
9 [2, 1, 3, 4, 2, 1, 3, 4] 0
10 [2, 1, 3, 4, 2, 1, 3, 2] 0
11 [2, 1, 3, 4, 2, 1, 3] 0
12 [2, 1, 3, 4, 2, 1, 4, 2] 0
13 [2, 1, 3, 4, 2, 1, 4] 0
14 [2, 1, 3, 4, 2, 1] 0
15 [2, 1, 3, 4, 2, 3, 4, 2] 0
16 [2, 1, 3, 4, 2, 3, 4] 0
17 [2, 1, 3, 4, 2, 3] 0
18 [2, 1, 3, 4, 2, 4] 0
19 [2, 1, 3, 4, 2] 0
20 [2, 1, 3, 4] 0
21 [2, 1, 3, 2, 1, 3] 0
22 [2, 1, 3, 2, 1] 0
23 [2, 1, 3, 2, 3] 0
24 [2, 1, 3, 2] 0
25 [2, 1, 3] 0
26 [2, 1, 4, 2, 1, 4] 0
27 [2, 1, 4, 2, 1] 0
28 [2, 1, 4, 2, 4] 0
29 [2, 1, 4, 2] 0
30 [2, 1, 4] 0
31 [2, 1, 2] 0
32 [2, 1] 0
33 [2, 3, 4, 2, 3, 4] 0
34 [2, 3, 4, 2, 3] 0
35 [2, 3, 4, 2, 4] 0
36 [2, 3, 4, 2] 0
37 [2, 3, 4] 0
38 [2, 3, 2] 0
39 [2, 3] 0
40 [2, 4, 2] 0
41 [2, 4] 0
42 [2] 0
43 [1, 3, 4] 0
44 [1, 3] 0
45 [1, 4] 0
46 [1] 0
47 [3, 4] 0
48 [3] 0
49 [4] 0
50 [] 0
sage: A=CartanMatrix(['D',5])
....: c=[1,2,0,3,4]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
1 [2, 0, 3, 4, 2, 3, 4] 0
2 [2, 0, 3, 4, 2, 3] 0
3 [2, 0, 3, 4, 2, 4] 0
4 [2, 0, 3, 4, 2] 0
5 [2, 0, 3, 4] 0
6 [2, 0, 3, 2] 0
7 [2, 0, 3] 0
8 [2, 0, 4, 2] 0
9 [2, 0, 4] 0
10 [2, 0] 0
11 [2, 3, 4, 2, 3, 4] 0
12 [2, 3, 4, 2, 3] 0
13 [2, 3, 4, 2, 4] 0
14 [2, 3, 4, 2] 0
15 [2, 3, 4] 0
16 [2, 3, 2] 0
17 [2, 3] 0
18 [2, 4, 2] 0
19 [2, 4] 0
20 [2] 0
21 [0, 3, 4] 0
22 [0, 3] 0
23 [0, 4] 0
24 [0] 0
25 [3, 4] 0
26 [3] 0
27 [4] 0
28 [] 0
sage: A=CartanMatrix(['D',5])
....: c=[2,0,1,3,4]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
1 [0, 1, 3, 4, 0] 0
2 [0, 1, 3, 4] 0
3 [0, 1, 3, 0] 0
4 [0, 1, 3] 0
5 [0, 1, 4, 0] 0
6 [0, 1, 4] 0
7 [0, 1, 0] 0
8 [0, 1] 0
9 [0, 3, 4] 0
10 [0, 3] 0
11 [0, 4] 0
12 [0] 0
13 [1, 3, 4] 0
14 [1, 3] 0
15 [1, 4] 0
16 [1] 0
17 [3, 4] 0
18 [3] 0
19 [4] 0
20 [] 0
sage: A=CartanMatrix(['D',5])
....: c=[2,1,0,3,4]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
1 [1, 0, 3, 4, 1] 0
2 [1, 0, 3, 4] 0
3 [1, 0, 3, 1] 0
4 [1, 0, 3] 0
5 [1, 0, 4, 1] 0
6 [1, 0, 4] 0
7 [1, 0, 1] 0
8 [1, 0] 0
9 [1, 3, 4] 0
10 [1, 3] 0
11 [1, 4] 0
12 [1] 0
13 [0, 3, 4] 0
14 [0, 3] 0
15 [0, 4] 0
16 [0] 0
17 [3, 4] 0
18 [3] 0
19 [4] 0
20 [] 0
sage: A=CartanMatrix(['D',5])
....: c=[0,1,3,2,4]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
....: 
1 [1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4] 0
2 [1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2] 0
3 [1, 3, 2, 4, 1, 3, 2, 4, 1, 3] 0
4 [1, 3, 2, 4, 1, 3, 2, 4, 1] 0
5 [1, 3, 2, 4, 1, 3, 2, 4, 3] 0
6 [1, 3, 2, 4, 1, 3, 2, 4] 0
7 [1, 3, 2, 4, 1, 3, 2, 1, 3, 2] 0
8 [1, 3, 2, 4, 1, 3, 2, 1, 3] 0
9 [1, 3, 2, 4, 1, 3, 2, 1] 0
10 [1, 3, 2, 4, 1, 3, 2, 3] 0
11 [1, 3, 2, 4, 1, 3, 2] 0
12 [1, 3, 2, 4, 1, 3] 0
13 [1, 3, 2, 4, 1, 2, 1] 0
14 [1, 3, 2, 4, 1, 2] 0
15 [1, 3, 2, 4, 1] 0
16 [1, 3, 2, 4, 3, 2, 3] 0
17 [1, 3, 2, 4, 3, 2] 0
18 [1, 3, 2, 4, 3] 0
19 [1, 3, 2, 4, 2] 0
20 [1, 3, 2, 4] 0
21 [1, 3, 2, 1, 3, 2] 0
22 [1, 3, 2, 1, 3] 0
23 [1, 3, 2, 1] 0
24 [1, 3, 2, 3] 0
25 [1, 3, 2] 0
26 [1, 3, 4] 0
27 [1, 3] 0
28 [1, 2, 4, 1, 2, 1] 0
29 [1, 2, 4, 1, 2] 0
30 [1, 2, 4, 1] 0
31 [1, 2, 4, 2] 0
32 [1, 2, 4] 0
33 [1, 2, 1] 0
34 [1, 2] 0
35 [1, 4] 0
36 [1] 0
37 [3, 2, 4, 3, 2, 3] 0
38 [3, 2, 4, 3, 2] 0
39 [3, 2, 4, 3] 0
40 [3, 2, 4, 2] 0
41 [3, 2, 4] 0
42 [3, 2, 3] 0
43 [3, 2] 0
44 [3, 4] 0
45 [3] 0
46 [2, 4, 2] 0
47 [2, 4] 0
48 [2] 0
49 [4] 0
50 [] 0
sage: A=CartanMatrix(['D',5])
....: c=[1,0,3,2,4]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
1 [0, 3, 2, 4, 3, 2, 3] 0
2 [0, 3, 2, 4, 3, 2] 0
3 [0, 3, 2, 4, 3] 0
4 [0, 3, 2, 4, 2] 0
5 [0, 3, 2, 4] 0
6 [0, 3, 2, 3] 0
7 [0, 3, 2] 0
8 [0, 3, 4] 0
9 [0, 3] 0
10 [0, 2, 4, 2] 0
11 [0, 2, 4] 0
12 [0, 2] 0
13 [0, 4] 0
14 [0] 0
15 [3, 2, 4, 3, 2, 3] 0
16 [3, 2, 4, 3, 2] 0
17 [3, 2, 4, 3] 0
18 [3, 2, 4, 2] 0
19 [3, 2, 4] 0
20 [3, 2, 3] 0
21 [3, 2] 0
22 [3, 4] 0
23 [3] 0
24 [2, 4, 2] 0
25 [2, 4] 0
26 [2] 0
27 [4] 0
28 [] 0
sage: A=CartanMatrix(['D',5])
....: c=[0,3,2,1,4]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
....: 
1 [3, 2, 1, 4, 3, 2, 1, 4, 3, 2, 1, 4] 0
2 [3, 2, 1, 4, 3, 2, 1, 4, 3, 2, 1] 0
3 [3, 2, 1, 4, 3, 2, 1, 4, 3, 2, 4] 0
4 [3, 2, 1, 4, 3, 2, 1, 4, 3, 2] 0
5 [3, 2, 1, 4, 3, 2, 1, 4, 3] 0
6 [3, 2, 1, 4, 3, 2, 1, 4] 0
7 [3, 2, 1, 4, 3, 2, 1, 3, 2] 0
8 [3, 2, 1, 4, 3, 2, 1, 3] 0
9 [3, 2, 1, 4, 3, 2, 1] 0
10 [3, 2, 1, 4, 3, 2, 4, 3, 2] 0
11 [3, 2, 1, 4, 3, 2, 4, 3] 0
12 [3, 2, 1, 4, 3, 2, 4] 0
13 [3, 2, 1, 4, 3, 2, 3] 0
14 [3, 2, 1, 4, 3, 2] 0
15 [3, 2, 1, 4, 3] 0
16 [3, 2, 1, 4, 2, 1, 4] 0
17 [3, 2, 1, 4, 2, 1] 0
18 [3, 2, 1, 4, 2, 4] 0
19 [3, 2, 1, 4, 2] 0
20 [3, 2, 1, 4] 0
21 [3, 2, 1, 3, 2, 3] 0
22 [3, 2, 1, 3, 2] 0
23 [3, 2, 1, 3] 0
24 [3, 2, 1, 2] 0
25 [3, 2, 1] 0
26 [3, 2, 4, 3, 2, 3] 0
27 [3, 2, 4, 3, 2] 0
28 [3, 2, 4, 3] 0
29 [3, 2, 4, 2] 0
30 [3, 2, 4] 0
31 [3, 2, 3] 0
32 [3, 2] 0
33 [3, 1, 4] 0
34 [3, 1] 0
35 [3, 4] 0
36 [3] 0
37 [2, 1, 4, 2, 1, 4] 0
38 [2, 1, 4, 2, 1] 0
39 [2, 1, 4, 2, 4] 0
40 [2, 1, 4, 2] 0
41 [2, 1, 4] 0
42 [2, 1, 2] 0
43 [2, 1] 0
44 [2, 4, 2] 0
45 [2, 4] 0
46 [2] 0
47 [1, 4] 0
48 [1] 0
49 [4] 0
50 [] 0
sage: A=CartanMatrix(['D',5])
....: c=[1,3,2,0,4]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
1 [3, 2, 0, 4, 3, 2, 3] 0
2 [3, 2, 0, 4, 3, 2] 0
3 [3, 2, 0, 4, 3] 0
4 [3, 2, 0, 4, 2] 0
5 [3, 2, 0, 4] 0
6 [3, 2, 0, 3] 0
7 [3, 2, 0] 0
8 [3, 2, 4, 3, 2, 3] 0
9 [3, 2, 4, 3, 2] 0
10 [3, 2, 4, 3] 0
11 [3, 2, 4, 2] 0
12 [3, 2, 4] 0
13 [3, 2, 3] 0
14 [3, 2] 0
15 [3, 0, 4] 0
16 [3, 0] 0
17 [3, 4] 0
18 [3] 0
19 [2, 0, 4, 2] 0
20 [2, 0, 4] 0
21 [2, 0] 0
22 [2, 4, 2] 0
23 [2, 4] 0
24 [2] 0
25 [0, 4] 0
26 [0] 0
27 [4] 0
28 [] 0
sage: A=CartanMatrix(['D',5])
....: c=[3,2,0,1,4]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
....: 
1 [2, 0, 1, 4, 2, 0, 1, 4, 2, 0] 0
2 [2, 0, 1, 4, 2, 0, 1, 4, 2] 0
3 [2, 0, 1, 4, 2, 0, 1, 4, 0] 0
4 [2, 0, 1, 4, 2, 0, 1, 4] 0
5 [2, 0, 1, 4, 2, 0, 1, 0] 0
6 [2, 0, 1, 4, 2, 0, 1] 0
7 [2, 0, 1, 4, 2, 0, 4] 0
8 [2, 0, 1, 4, 2, 0] 0
9 [2, 0, 1, 4, 2, 1, 4] 0
10 [2, 0, 1, 4, 2, 1] 0
11 [2, 0, 1, 4, 2, 4] 0
12 [2, 0, 1, 4, 2] 0
13 [2, 0, 1, 4, 0] 0
14 [2, 0, 1, 4] 0
15 [2, 0, 1, 2, 0, 1] 0
16 [2, 0, 1, 2, 0] 0
17 [2, 0, 1, 2] 0
18 [2, 0, 1, 0] 0
19 [2, 0, 1] 0
20 [2, 0, 4, 2] 0
21 [2, 0, 4] 0
22 [2, 0] 0
23 [2, 1, 4, 2, 1, 4] 0
24 [2, 1, 4, 2, 1] 0
25 [2, 1, 4, 2, 4] 0
26 [2, 1, 4, 2] 0
27 [2, 1, 4] 0
28 [2, 1, 2] 0
29 [2, 1] 0
30 [2, 4, 2] 0
31 [2, 4] 0
32 [2] 0
33 [0, 1, 4, 0] 0
34 [0, 1, 4] 0
35 [0, 1, 0] 0
36 [0, 1] 0
37 [0, 4] 0
38 [0] 0
39 [1, 4] 0
40 [1] 0
41 [4] 0
42 [] 0
sage: A=CartanMatrix(['D',5])
....: c=[3,2,1,0,4]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
....: 
1 [2, 1, 0, 4, 2, 1, 0, 4, 2, 4] 0
2 [2, 1, 0, 4, 2, 1, 0, 4, 2] 0
3 [2, 1, 0, 4, 2, 1, 0, 4] 0
4 [2, 1, 0, 4, 2, 1, 0, 2] 0
5 [2, 1, 0, 4, 2, 1, 0] 0
6 [2, 1, 0, 4, 2, 1, 4, 2, 4] 0
7 [2, 1, 0, 4, 2, 1, 4, 2] 0
8 [2, 1, 0, 4, 2, 1, 4] 0
9 [2, 1, 0, 4, 2, 1, 2] 0
10 [2, 1, 0, 4, 2, 1] 0
11 [2, 1, 0, 4, 2, 4] 0
12 [2, 1, 0, 4, 2] 0
13 [2, 1, 0, 4, 1] 0
14 [2, 1, 0, 4] 0
15 [2, 1, 0, 2, 1, 2] 0
16 [2, 1, 0, 2, 1] 0
17 [2, 1, 0, 2] 0
18 [2, 1, 0, 1] 0
19 [2, 1, 0] 0
20 [2, 1, 4, 2, 1, 4] 0
21 [2, 1, 4, 2, 1] 0
22 [2, 1, 4, 2, 4] 0
23 [2, 1, 4, 2] 0
24 [2, 1, 4] 0
25 [2, 1, 2] 0
26 [2, 1] 0
27 [2, 0, 4, 2] 0
28 [2, 0, 4] 0
29 [2, 0] 0
30 [2, 4, 2] 0
31 [2, 4] 0
32 [2] 0
33 [1, 0, 4, 1] 0
34 [1, 0, 4] 0
35 [1, 0, 1] 0
36 [1, 0] 0
37 [1, 4] 0
38 [1] 0
39 [0, 4] 0
40 [0] 0
41 [4] 0
42 [] 0
sage: A=CartanMatrix(['D',5])
....: c=[0,1,3,4,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
....: 
1 [1, 3, 4, 2, 1, 3, 4, 2, 1, 3, 4, 2] 0
2 [1, 3, 4, 2, 1, 3, 4, 2, 1, 3, 4] 0
3 [1, 3, 4, 2, 1, 3, 4, 2, 1, 3] 0
4 [1, 3, 4, 2, 1, 3, 4, 2, 1, 4] 0
5 [1, 3, 4, 2, 1, 3, 4, 2, 1] 0
6 [1, 3, 4, 2, 1, 3, 4, 2, 3, 4] 0
7 [1, 3, 4, 2, 1, 3, 4, 2, 3] 0
8 [1, 3, 4, 2, 1, 3, 4, 2, 4] 0
9 [1, 3, 4, 2, 1, 3, 4, 2] 0
10 [1, 3, 4, 2, 1, 3, 4] 0
11 [1, 3, 4, 2, 1, 3, 2] 0
12 [1, 3, 4, 2, 1, 3] 0
13 [1, 3, 4, 2, 1, 4, 2] 0
14 [1, 3, 4, 2, 1, 4] 0
15 [1, 3, 4, 2, 1] 0
16 [1, 3, 4, 2, 3, 4, 2] 0
17 [1, 3, 4, 2, 3, 4] 0
18 [1, 3, 4, 2, 3] 0
19 [1, 3, 4, 2, 4] 0
20 [1, 3, 4, 2] 0
21 [1, 3, 4] 0
22 [1, 3, 2, 1, 3, 2] 0
23 [1, 3, 2, 1, 3] 0
24 [1, 3, 2, 1] 0
25 [1, 3, 2, 3] 0
26 [1, 3, 2] 0
27 [1, 3] 0
28 [1, 4, 2, 1, 4, 2] 0
29 [1, 4, 2, 1, 4] 0
30 [1, 4, 2, 1] 0
31 [1, 4, 2, 4] 0
32 [1, 4, 2] 0
33 [1, 4] 0
34 [1, 2, 1] 0
35 [1, 2] 0
36 [1] 0
37 [3, 4, 2, 3, 4, 2] 0
38 [3, 4, 2, 3, 4] 0
39 [3, 4, 2, 3] 0
40 [3, 4, 2, 4] 0
41 [3, 4, 2] 0
42 [3, 4] 0
43 [3, 2, 3] 0
44 [3, 2] 0
45 [3] 0
46 [4, 2, 4] 0
47 [4, 2] 0
48 [4] 0
49 [2] 0
50 [] 0
sage: A=CartanMatrix(['D',5])
....: c=[1,0,3,4,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
1 [0, 3, 4, 2, 3, 4, 2] 0
2 [0, 3, 4, 2, 3, 4] 0
3 [0, 3, 4, 2, 3] 0
4 [0, 3, 4, 2, 4] 0
5 [0, 3, 4, 2] 0
6 [0, 3, 4] 0
7 [0, 3, 2, 3] 0
8 [0, 3, 2] 0
9 [0, 3] 0
10 [0, 4, 2, 4] 0
11 [0, 4, 2] 0
12 [0, 4] 0
13 [0, 2] 0
14 [0] 0
15 [3, 4, 2, 3, 4, 2] 0
16 [3, 4, 2, 3, 4] 0
17 [3, 4, 2, 3] 0
18 [3, 4, 2, 4] 0
19 [3, 4, 2] 0
20 [3, 4] 0
21 [3, 2, 3] 0
22 [3, 2] 0
23 [3] 0
24 [4, 2, 4] 0
25 [4, 2] 0
26 [4] 0
27 [2] 0
28 [] 0
sage: A=CartanMatrix(['D',5])
....: c=[0,3,4,2,1]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
1 [3, 4, 2, 1, 3, 4, 2, 1, 3, 4, 2, 1] 0
2 [3, 4, 2, 1, 3, 4, 2, 1, 3, 4, 2] 0
3 [3, 4, 2, 1, 3, 4, 2, 1, 3, 4] 0
4 [3, 4, 2, 1, 3, 4, 2, 1, 3] 0
5 [3, 4, 2, 1, 3, 4, 2, 1, 4] 0
6 [3, 4, 2, 1, 3, 4, 2, 1] 0
7 [3, 4, 2, 1, 3, 4, 2, 3, 4, 2] 0
8 [3, 4, 2, 1, 3, 4, 2, 3, 4] 0
9 [3, 4, 2, 1, 3, 4, 2, 3] 0
10 [3, 4, 2, 1, 3, 4, 2, 4] 0
11 [3, 4, 2, 1, 3, 4, 2] 0
12 [3, 4, 2, 1, 3, 4] 0
13 [3, 4, 2, 1, 3, 2, 3] 0
14 [3, 4, 2, 1, 3, 2] 0
15 [3, 4, 2, 1, 3] 0
16 [3, 4, 2, 1, 4, 2, 4] 0
17 [3, 4, 2, 1, 4, 2] 0
18 [3, 4, 2, 1, 4] 0
19 [3, 4, 2, 1, 2] 0
20 [3, 4, 2, 1] 0
21 [3, 4, 2, 3, 4, 2] 0
22 [3, 4, 2, 3, 4] 0
23 [3, 4, 2, 3] 0
24 [3, 4, 2, 4] 0
25 [3, 4, 2] 0
26 [3, 4, 1] 0
27 [3, 4] 0
28 [3, 2, 1, 3, 2, 3] 0
29 [3, 2, 1, 3, 2] 0
30 [3, 2, 1, 3] 0
31 [3, 2, 1, 2] 0
32 [3, 2, 1] 0
33 [3, 2, 3] 0
34 [3, 2] 0
35 [3, 1] 0
36 [3] 0
37 [4, 2, 1, 4, 2, 4] 0
38 [4, 2, 1, 4, 2] 0
39 [4, 2, 1, 4] 0
40 [4, 2, 1, 2] 0
41 [4, 2, 1] 0
42 [4, 2, 4] 0
43 [4, 2] 0
44 [4, 1] 0
45 [4] 0
46 [2, 1, 2] 0
47 [2, 1] 0
48 [2] 0
49 [1] 0
50 [] 0
sage: A=CartanMatrix(['D',5])
....: c=[1,3,4,2,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
1 [3, 4, 2, 0, 3, 4, 2] 0
2 [3, 4, 2, 0, 3, 4] 0
3 [3, 4, 2, 0, 3] 0
4 [3, 4, 2, 0, 4] 0
5 [3, 4, 2, 0] 0
6 [3, 4, 2, 3, 4, 2] 0
7 [3, 4, 2, 3, 4] 0
8 [3, 4, 2, 3] 0
9 [3, 4, 2, 4] 0
10 [3, 4, 2] 0
11 [3, 4, 0] 0
12 [3, 4] 0
13 [3, 2, 0, 3] 0
14 [3, 2, 0] 0
15 [3, 2, 3] 0
16 [3, 2] 0
17 [3, 0] 0
18 [3] 0
19 [4, 2, 0, 4] 0
20 [4, 2, 0] 0
21 [4, 2, 4] 0
22 [4, 2] 0
23 [4, 0] 0
24 [4] 0
25 [2, 0] 0
26 [2] 0
27 [0] 0
28 [] 0
sage: A=CartanMatrix(['D',5])
....: c=[3,4,2,0,1]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
1 [4, 2, 0, 1, 4, 2, 0, 1, 4, 2] 0
2 [4, 2, 0, 1, 4, 2, 0, 1, 4] 0
3 [4, 2, 0, 1, 4, 2, 0, 1] 0
4 [4, 2, 0, 1, 4, 2, 0, 4] 0
5 [4, 2, 0, 1, 4, 2, 0] 0
6 [4, 2, 0, 1, 4, 2, 4] 0
7 [4, 2, 0, 1, 4, 2] 0
8 [4, 2, 0, 1, 4, 0] 0
9 [4, 2, 0, 1, 4] 0
10 [4, 2, 0, 1, 2, 0, 1] 0
11 [4, 2, 0, 1, 2, 0] 0
12 [4, 2, 0, 1, 2] 0
13 [4, 2, 0, 1, 0] 0
14 [4, 2, 0, 1] 0
15 [4, 2, 0, 4] 0
16 [4, 2, 0] 0
17 [4, 2, 1, 4, 2, 4] 0
18 [4, 2, 1, 4, 2] 0
19 [4, 2, 1, 4] 0
20 [4, 2, 1, 2] 0
21 [4, 2, 1] 0
22 [4, 2, 4] 0
23 [4, 2] 0
24 [4, 0, 1, 0] 0
25 [4, 0, 1] 0
26 [4, 0] 0
27 [4, 1] 0
28 [4] 0
29 [2, 0, 1, 2, 0, 1] 0
30 [2, 0, 1, 2, 0] 0
31 [2, 0, 1, 2] 0
32 [2, 0, 1, 0] 0
33 [2, 0, 1] 0
34 [2, 0] 0
35 [2, 1, 2] 0
36 [2, 1] 0
37 [2] 0
38 [0, 1, 0] 0
39 [0, 1] 0
40 [0] 0
41 [1] 0
42 [] 0
sage: A=CartanMatrix(['D',5])
....: c=[3,4,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
1 [4, 2, 1, 0, 4, 2, 1, 4, 2, 4] 0
2 [4, 2, 1, 0, 4, 2, 1, 4, 2] 0
3 [4, 2, 1, 0, 4, 2, 1, 4] 0
4 [4, 2, 1, 0, 4, 2, 1, 2] 0
5 [4, 2, 1, 0, 4, 2, 1] 0
6 [4, 2, 1, 0, 4, 2, 4] 0
7 [4, 2, 1, 0, 4, 2] 0
8 [4, 2, 1, 0, 4, 1] 0
9 [4, 2, 1, 0, 4] 0
10 [4, 2, 1, 0, 2, 1, 2] 0
11 [4, 2, 1, 0, 2, 1] 0
12 [4, 2, 1, 0, 2] 0
13 [4, 2, 1, 0, 1] 0
14 [4, 2, 1, 0] 0
15 [4, 2, 1, 4, 2, 4] 0
16 [4, 2, 1, 4, 2] 0
17 [4, 2, 1, 4] 0
18 [4, 2, 1, 2] 0
19 [4, 2, 1] 0
20 [4, 2, 0, 4] 0
21 [4, 2, 0] 0
22 [4, 2, 4] 0
23 [4, 2] 0
24 [4, 1, 0, 1] 0
25 [4, 1, 0] 0
26 [4, 1] 0
27 [4, 0] 0
28 [4] 0
29 [2, 1, 0, 2, 1, 2] 0
30 [2, 1, 0, 2, 1] 0
31 [2, 1, 0, 2] 0
32 [2, 1, 0, 1] 0
33 [2, 1, 0] 0
34 [2, 1, 2] 0
35 [2, 1] 0
36 [2, 0] 0
37 [2] 0
38 [1, 0, 1] 0
39 [1, 0] 0
40 [1] 0
41 [0] 0
42 [] 0
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
1 [1, 2, 3, 1, 2, 3, 1, 2, 3] 0
2 [1, 2, 3, 1, 2, 3, 1, 2] 0
3 [1, 2, 3, 1, 2, 3, 1] 0
4 [1, 2, 3, 1, 2, 3] 0
5 [1, 2, 3, 1, 2, 1] 0
6 [1, 2, 3, 1, 2] 0
7 [1, 2, 3, 1] 0
8 [1, 2, 3, 2, 3] 0
9 [1, 2, 3, 2] 0
10 [1, 2, 3] 0
11 [1, 2, 1] 0
12 [1, 2] 0
13 [1, 3] 0
14 [1] 0
15 [2, 3, 2, 3] 0
16 [2, 3, 2] 0
17 [2, 3] 0
18 [2] 0
19 [3] 0
20 [] 0
sage: A=CartanMatrix(['C',4])
....: c=[0,1,3,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
....: 
1 [1, 3, 2, 1, 3, 2, 1, 3, 2] 0
2 [1, 3, 2, 1, 3, 2, 1, 3] 0
3 [1, 3, 2, 1, 3, 2, 1] 0
4 [1, 3, 2, 1, 3, 2, 3] 0
5 [1, 3, 2, 1, 3, 2] 0
6 [1, 3, 2, 1, 3] 0
7 [1, 3, 2, 1] 0
8 [1, 3, 2, 3, 2] 0
9 [1, 3, 2, 3] 0
10 [1, 3, 2] 0
11 [1, 3] 0
12 [1, 2, 1] 0
13 [1, 2] 0
14 [1] 0
15 [3, 2, 3, 2] 0
16 [3, 2, 3] 0
17 [3, 2] 0
18 [3] 0
19 [2] 0
20 [] 0
sage: A=CartanMatrix(['C',4])
....: c=[0,2,1,3]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
1 [2, 1, 3, 2, 1, 3, 2, 1, 3] 0
2 [2, 1, 3, 2, 1, 3, 2, 1] 0
3 [2, 1, 3, 2, 1, 3, 2, 3] 0
4 [2, 1, 3, 2, 1, 3, 2] 0
5 [2, 1, 3, 2, 1, 3] 0
6 [2, 1, 3, 2, 1] 0
7 [2, 1, 3, 2, 3, 2] 0
8 [2, 1, 3, 2, 3] 0
9 [2, 1, 3, 2] 0
10 [2, 1, 3] 0
11 [2, 1, 2] 0
12 [2, 1] 0
13 [2, 3, 2, 3] 0
14 [2, 3, 2] 0
15 [2, 3] 0
16 [2] 0
17 [1, 3] 0
18 [1] 0
19 [3] 0
20 [] 0
sage: A=CartanMatrix(['C',4])
....: c=[0,3,2,1]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
1 [3, 2, 1, 3, 2, 1, 3, 2, 1] 0
2 [3, 2, 1, 3, 2, 1, 3, 2] 0
3 [3, 2, 1, 3, 2, 1, 3] 0
4 [3, 2, 1, 3, 2, 1] 0
5 [3, 2, 1, 3, 2, 3, 2] 0
6 [3, 2, 1, 3, 2, 3] 0
7 [3, 2, 1, 3, 2] 0
8 [3, 2, 1, 3] 0
9 [3, 2, 1, 2] 0
10 [3, 2, 1] 0
11 [3, 2, 3, 2] 0
12 [3, 2, 3] 0
13 [3, 2] 0
14 [3, 1] 0
15 [3] 0
16 [2, 1, 2] 0
17 [2, 1] 0
18 [2] 0
19 [1] 0
20 [] 0
sage: A=CartanMatrix(['C',4])
....: c=[1,2,3,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
1 [2, 3, 0, 2, 3] 0
2 [2, 3, 0, 2] 0
3 [2, 3, 0] 0
4 [2, 3, 2, 3] 0
5 [2, 3, 2] 0
6 [2, 3] 0
7 [2, 0] 0
8 [2] 0
9 [3, 0] 0
10 [3] 0
11 [0] 0
12 [] 0
sage: A=CartanMatrix(['C',4])
....: c=[1,3,2,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
1 [3, 2, 0, 3, 2] 0
2 [3, 2, 0, 3] 0
3 [3, 2, 0] 0
4 [3, 2, 3, 2] 0
5 [3, 2, 3] 0
6 [3, 2] 0
7 [3, 0] 0
8 [3] 0
9 [2, 0] 0
10 [2] 0
11 [0] 0
12 [] 0
sage: A=CartanMatrix(['C',4])
....: c=[2,1,3,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
1 [1, 3, 0, 1] 0
2 [1, 3, 0] 0
3 [1, 3] 0
4 [1, 0, 1] 0
5 [1, 0] 0
6 [1] 0
7 [3, 0] 0
8 [3] 0
9 [0] 0
10 [] 0
sage: A=CartanMatrix(['C',4])
....: c=[3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
1 [2, 1, 0, 2, 1, 2] 0
2 [2, 1, 0, 2, 1] 0
3 [2, 1, 0, 2] 0
4 [2, 1, 0, 1] 0
5 [2, 1, 0] 0
6 [2, 1, 2] 0
7 [2, 1] 0
8 [2, 0] 0
9 [2] 0
10 [1, 0, 1] 0
11 [1, 0] 0
12 [1] 0
13 [0] 0
14 [] 0
sage: B(A,c)
[ 0 -1  0  0]
[ 1  0 -1  0]
[ 0  1  0 -2]
[ 0  0  1  0]
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: for v in sortables(A,c[1:]):
....:     for seq in Kbackwards(c[1:],v):
....:         P=p_lambda_cone(B(A,c),lam(A,v),[[c[0]]+seq])
....:         Q=p_lambda_cone(B(A,c),lam(A,v),[seq])
....:         map(vector,P.rays())
....:     if input()=="q":
....:         break
....: 
<map object at 0x2c1b78c40>
<map object at 0x16f79f070>
<map object at 0x16d28fdf0>
<map object at 0x2c1b7a710>
<map object at 0x16d28ec20>
<map object at 0x16f79cfa0>
<map object at 0x16f79fdf0>
<map object at 0x2c23d3220>
<map object at 0x2c23d1c30>
<map object at 0x2c1b656f0>
<map object at 0x2c23d2d10>
<map object at 0x2c23d3d60>
<map object at 0x16d208a60>
<map object at 0x16cafbfa0>
<map object at 0x16d20ac80>
<map object at 0x16f79ead0>
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [891], line 8
      6     Q=p_lambda_cone(B(A,c),lam(A,v),[seq])
      7     map(vector,P.rays())
----> 8 if input()=="q":
      9     break

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: for v in sortables(A,c[1:]):
....:     for seq in Kbackwards(c[1:],v):
....:         P=p_lambda_cone(B(A,c),lam(A,v),[[c[0]]+seq])
....:         Q=p_lambda_cone(B(A,c),lam(A,v),[seq])
....:         print(list(map(vector,P.rays())),list(map(vector,Q.rays())))
....:     if input()=="q":
....:         break
....: 
[(-1, 0, 0, 0, 1)] [(0, 0, -1, 0, 1), (0, -1, 0, 1, 0), (0, 0, 0, -1, 0), (-1, 0, 1, 0, 0)]
[(1, 1, -1, 0, 0), (0, -1, 0, 1, 0), (0, 0, -1, -2, 1), (-1, 0, 1, 0, 0)] [(0, 0, 0, 1, 0), (0, 0, -1, -2, 1), (0, -1, 0, 0, 0), (-1, 0, 1, 0, 0)]
[] [(0, -1, -1, 1, 1), (0, 0, 1, 0, -1), (0, 0, 0, -1, 0), (-1, 0, 1, 0, 0)]
[] [(0, 0, 0, 1, 0), (0, -1, -1, -1, 1), (0, 0, 1, 0, -1), (-1, 0, 1, 0, 0)]
[(0, 0, -1, 0, 1), (-1, 0, 1, 0, 0)] [(0, 0, -1, 0, 1), (0, -1, 0, 0, 0), (-1, -1, 1, 1, 0), (0, 1, 0, -1, 0)]
[(1, 1, -1, 0, 0), (0, 0, -1, -2, 1), (-1, -1, 1, 1, 0), (0, 1, 0, -1, 0)] [(0, 0, -1, 0, 1), (-1, 0, 1, 0, 0)]
[(-1, 0, 0, 0, 1)] [(0, -1, 0, 0, 0), (-1, -1, 0, 1, 1), (0, 0, 1, 0, -1), (0, 1, 0, -1, 0)]
[(-1, 0, 0, 0, 1)] [(-1, 0, 0, 0, 1), (0, 0, 1, 0, -1)]
[(1, 0, -1, 0, 0), (0, 0, -1, 0, 1)] [(1, 0, -1, 0, 0), (0, 0, -1, 0, 1), (0, -1, 0, 1, 0), (0, 0, 0, -1, 0)]
[(1, 0, -1, 0, 0), (0, 1, 0, 0, 0), (0, -1, 0, 1, 0), (0, 0, -1, -2, 1)] [(1, 0, -1, 0, 0), (0, 0, 0, 1, 0), (0, 0, -1, -2, 1), (0, -1, 0, 0, 0)]
[(1, 0, 0, 0, -1)] [(1, 0, -1, 0, 0), (0, -1, -1, 1, 1), (0, 0, 1, 0, -1), (0, 0, 0, -1, 0)]
[(1, 0, 0, 0, -1)] [(1, 0, -1, 0, 0), (0, 0, 0, 1, 0), (0, -1, -1, -1, 1), (0, 0, 1, 0, -1)]
[(1, 0, -1, 0, 0), (0, 1, 0, 0, 0), (0, 0, 0, -1, 0), (0, 0, -1, 0, 1)] [(1, 0, -1, 0, 0), (0, 0, -1, 0, 1), (0, 1, 0, -1, 0), (0, -1, 0, 0, 0)]
[(1, 0, -1, 0, 0), (0, 1, 0, -1, 0), (0, 0, -1, -2, 1), (0, 0, 0, 1, 0)] [(1, 0, -1, 0, 0), (0, 0, -1, 0, 1)]
[(0, 0, 1, 0, -1), (1, 0, -1, 0, 0), (0, 1, 0, 0, 0), (0, 0, 0, -1, 0)] [(1, 0, -1, 0, 0), (0, 0, 1, 0, -1), (0, 1, 0, -1, 0), (0, -1, 0, 0, 0)]
[(0, 0, 1, 0, -1), (1, 0, -1, 0, 0), (0, 0, 0, 1, 0), (0, 1, 0, -1, 0)] [(1, 0, -1, 0, 0), (0, 0, 1, 0, -1)]
q   
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: for v in sortables(A,c[1:]):
....:     for seq in Kbackwards(c[1:],v):
....:         P=p_lambda_cone(B(A,c),lam(A,v),[[c[0]]+seq])
....:         Q=p_lambda_cone(B(A,c),lam(A,v),[seq])
....:         print(list(map(vector,P.rays())),list(map(vector,Q.rays())),"\n")
....:     if input()=="q":
....:         break
[(-1, 0, 0, 0, 1)] [(0, 0, -1, 0, 1), (0, -1, 0, 1, 0), (0, 0, 0, -1, 0), (-1, 0, 1, 0, 0)] 


[(1, 1, -1, 0, 0), (0, -1, 0, 1, 0), (0, 0, -1, -2, 1), (-1, 0, 1, 0, 0)] [(0, 0, 0, 1, 0), (0, 0, -1, -2, 1), (0, -1, 0, 0, 0), (-1, 0, 1, 0, 0)] 

[] [(0, -1, -1, 1, 1), (0, 0, 1, 0, -1), (0, 0, 0, -1, 0), (-1, 0, 1, 0, 0)] 

[] [(0, 0, 0, 1, 0), (0, -1, -1, -1, 1), (0, 0, 1, 0, -1), (-1, 0, 1, 0, 0)] 

[(0, 0, -1, 0, 1), (-1, 0, 1, 0, 0)] [(0, 0, -1, 0, 1), (0, -1, 0, 0, 0), (-1, -1, 1, 1, 0), (0, 1, 0, -1, 0)] 

[(1, 1, -1, 0, 0), (0, 0, -1, -2, 1), (-1, -1, 1, 1, 0), (0, 1, 0, -1, 0)] [(0, 0, -1, 0, 1), (-1, 0, 1, 0, 0)] 

[(-1, 0, 0, 0, 1)] [(0, -1, 0, 0, 0), (-1, -1, 0, 1, 1), (0, 0, 1, 0, -1), (0, 1, 0, -1, 0)] 

[(-1, 0, 0, 0, 1)] [(-1, 0, 0, 0, 1), (0, 0, 1, 0, -1)] 

[(1, 0, -1, 0, 0), (0, 0, -1, 0, 1)] [(1, 0, -1, 0, 0), (0, 0, -1, 0, 1), (0, -1, 0, 1, 0), (0, 0, 0, -1, 0)] 

[(1, 0, -1, 0, 0), (0, 1, 0, 0, 0), (0, -1, 0, 1, 0), (0, 0, -1, -2, 1)] [(1, 0, -1, 0, 0), (0, 0, 0, 1, 0), (0, 0, -1, -2, 1), (0, -1, 0, 0, 0)] 

[(1, 0, 0, 0, -1)] [(1, 0, -1, 0, 0), (0, -1, -1, 1, 1), (0, 0, 1, 0, -1), (0, 0, 0, -1, 0)] 

[(1, 0, 0, 0, -1)] [(1, 0, -1, 0, 0), (0, 0, 0, 1, 0), (0, -1, -1, -1, 1), (0, 0, 1, 0, -1)] 

[(1, 0, -1, 0, 0), (0, 1, 0, 0, 0), (0, 0, 0, -1, 0), (0, 0, -1, 0, 1)] [(1, 0, -1, 0, 0), (0, 0, -1, 0, 1), (0, 1, 0, -1, 0), (0, -1, 0, 0, 0)] 

[(1, 0, -1, 0, 0), (0, 1, 0, -1, 0), (0, 0, -1, -2, 1), (0, 0, 0, 1, 0)] [(1, 0, -1, 0, 0), (0, 0, -1, 0, 1)] 

[(0, 0, 1, 0, -1), (1, 0, -1, 0, 0), (0, 1, 0, 0, 0), (0, 0, 0, -1, 0)] [(1, 0, -1, 0, 0), (0, 0, 1, 0, -1), (0, 1, 0, -1, 0), (0, -1, 0, 0, 0)] 

[(0, 0, 1, 0, -1), (1, 0, -1, 0, 0), (0, 0, 0, 1, 0), (0, 1, 0, -1, 0)] [(1, 0, -1, 0, 0), (0, 0, 1, 0, -1)] 

[(1, 1, -1, 0, 0), (0, -1, 0, 1, 0), (0, 0, -1, -2, 1), (-1, 0, 1, 0, 0)] [(0, 0, 0, 1, 0), (0, 0, -1, -2, 1), (0, -1, 0, 0, 0), (-1, 0, 1, 0, 0)] 

[(1, 1, -1, 0, 0), (0, -1, -1, -1, 1), (0, 0, 1, 2, -1), (-1, 0, 1, 0, 0)] [(0, 0, -1, -1, 1), (0, 0, 1, 2, -1), (0, -1, 0, 0, 0), (-1, 0, 1, 0, 0)] 

[(1, 1, -1, 0, 0), (0, 0, -1, -2, 1), (-1, -1, 1, 1, 0), (0, 1, 0, -1, 0)] [(0, 0, -1, 0, 1), (-1, 0, 1, 0, 0)] 

[(1, 1, -1, 0, 0), (-1, -1, 0, -1, 1), (0, 0, 1, 2, -1), (0, 1, 0, -1, 0)] [(-1, 0, 0, 0, 1)] 

[(1, 0, -1, 0, 0), (0, 1, 0, 0, 0), (0, -1, 0, 1, 0), (0, 0, -1, -2, 1)] [(1, 0, -1, 0, 0), (0, 0, 0, 1, 0), (0, 0, -1, -2, 1), (0, -1, 0, 0, 0)] 

[(1, 0, -1, 0, 0), (0, 1, 0, 0, 0), (0, -1, -1, -1, 1), (0, 0, 1, 2, -1)] [(1, 0, -1, 0, 0), (0, 0, -1, -1, 1), (0, 0, 1, 2, -1), (0, -1, 0, 0, 0)] 

[(1, 0, -1, 0, 0), (0, 1, 0, -1, 0), (0, 0, -1, -2, 1), (0, 0, 0, 1, 0)] [(1, 0, -1, 0, 0), (0, 0, -1, 0, 1)] 

[(1, 0, -1, 0, 0), (0, 1, 0, -1, 0), (0, 0, 1, 2, -1), (0, 0, -1, -1, 1)] [(1, 0, 0, 0, -1)] 

[(-1, 0, 0, 0, 1)] [(0, 0, -1, -2, 1), (0, -1, 0, 1, 0), (0, 0, 0, -1, 0), (-1, 0, 1, 0, 0)] 

[] [(0, -1, -1, -1, 1), (0, 0, 1, 2, -1), (0, 0, 0, -1, 0), (-1, 0, 1, 0, 0)] 

[(0, 0, -1, 0, 1), (-1, 0, 1, 0, 0)] [(0, 0, -1, -2, 1), (0, -1, 0, 0, 0), (-1, -1, 1, 1, 0), (0, 1, 0, -1, 0)] 

[(-1, 0, 0, 0, 1)] [(0, -1, 0, 0, 0), (-1, -1, 0, -1, 1), (0, 0, 1, 2, -1), (0, 1, 0, -1, 0)] 

[(1, 0, -1, 0, 0), (0, 0, -1, 0, 1)] [(1, 0, -1, 0, 0), (0, 0, -1, -2, 1), (0, -1, 0, 1, 0), (0, 0, 0, -1, 0)] 

[(1, 0, 0, 0, -1)] [(1, 0, -1, 0, 0), (0, -1, -1, -1, 1), (0, 0, 1, 2, -1), (0, 0, 0, -1, 0)] 

[(0, 0, 0, -1, 0), (1, 0, -1, 0, 0), (0, 1, 0, 0, 0), (0, 0, -1, -2, 1)] [(1, 0, -1, 0, 0), (0, 0, -1, -2, 1), (0, 1, 0, -1, 0), (0, -1, 0, 0, 0)] 

[(0, 0, 0, -1, 0), (0, 0, 1, 2, -1), (1, 0, -1, 0, 0), (0, 1, 0, 0, 0)] [(1, 0, -1, 0, 0), (0, 0, 1, 2, -1), (0, 1, 0, -1, 0), (0, -1, 0, 0, 0)] 

q       
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: for v in sortables(A,c[1:]):
....:     print("sortable: ",v)
....:     for seq in Kbackwards(c[1:],v):
....:         P=p_lambda_cone(B(A,c),lam(A,v),[[c[0]]+seq])
....:         Q=p_lambda_cone(B(A,c),lam(A,v),[seq])
....:         print(list(map(vector,P.rays())),list(map(vector,Q.rays())),"\n")
....:     if input()=="q":
....:         break
sortable:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
[(-1, 0, 0, 0, 1)] [(0, 0, -1, 0, 1), (0, -1, 0, 1, 0), (0, 0, 0, -1, 0), (-1, 0, 1, 0, 0)] 

[(1, 1, -1, 0, 0), (0, -1, 0, 1, 0), (0, 0, -1, -2, 1), (-1, 0, 1, 0, 0)] [(0, 0, 0, 1, 0), (0, 0, -1, -2, 1), (0, -1, 0, 0, 0), (-1, 0, 1, 0, 0)] 

[] [(0, -1, -1, 1, 1), (0, 0, 1, 0, -1), (0, 0, 0, -1, 0), (-1, 0, 1, 0, 0)] 

[] [(0, 0, 0, 1, 0), (0, -1, -1, -1, 1), (0, 0, 1, 0, -1), (-1, 0, 1, 0, 0)] 

[(0, 0, -1, 0, 1), (-1, 0, 1, 0, 0)] [(0, 0, -1, 0, 1), (0, -1, 0, 0, 0), (-1, -1, 1, 1, 0), (0, 1, 0, -1, 0)] 

[(1, 1, -1, 0, 0), (0, 0, -1, -2, 1), (-1, -1, 1, 1, 0), (0, 1, 0, -1, 0)] [(0, 0, -1, 0, 1), (-1, 0, 1, 0, 0)] 

[(-1, 0, 0, 0, 1)] [(0, -1, 0, 0, 0), (-1, -1, 0, 1, 1), (0, 0, 1, 0, -1), (0, 1, 0, -1, 0)] 

[(-1, 0, 0, 0, 1)] [(-1, 0, 0, 0, 1), (0, 0, 1, 0, -1)] 

[(1, 0, -1, 0, 0), (0, 0, -1, 0, 1)] [(1, 0, -1, 0, 0), (0, 0, -1, 0, 1), (0, -1, 0, 1, 0), (0, 0, 0, -1, 0)] 

[(1, 0, -1, 0, 0), (0, 1, 0, 0, 0), (0, -1, 0, 1, 0), (0, 0, -1, -2, 1)] [(1, 0, -1, 0, 0), (0, 0, 0, 1, 0), (0, 0, -1, -2, 1), (0, -1, 0, 0, 0)] 

[(1, 0, 0, 0, -1)] [(1, 0, -1, 0, 0), (0, -1, -1, 1, 1), (0, 0, 1, 0, -1), (0, 0, 0, -1, 0)] 

[(1, 0, 0, 0, -1)] [(1, 0, -1, 0, 0), (0, 0, 0, 1, 0), (0, -1, -1, -1, 1), (0, 0, 1, 0, -1)] 

[(1, 0, -1, 0, 0), (0, 1, 0, 0, 0), (0, 0, 0, -1, 0), (0, 0, -1, 0, 1)] [(1, 0, -1, 0, 0), (0, 0, -1, 0, 1), (0, 1, 0, -1, 0), (0, -1, 0, 0, 0)] 

[(1, 0, -1, 0, 0), (0, 1, 0, -1, 0), (0, 0, -1, -2, 1), (0, 0, 0, 1, 0)] [(1, 0, -1, 0, 0), (0, 0, -1, 0, 1)] 

[(0, 0, 1, 0, -1), (1, 0, -1, 0, 0), (0, 1, 0, 0, 0), (0, 0, 0, -1, 0)] [(1, 0, -1, 0, 0), (0, 0, 1, 0, -1), (0, 1, 0, -1, 0), (0, -1, 0, 0, 0)] 

[(0, 0, 1, 0, -1), (1, 0, -1, 0, 0), (0, 0, 0, 1, 0), (0, 1, 0, -1, 0)] [(1, 0, -1, 0, 0), (0, 0, 1, 0, -1)] 

q
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: for v in sortables(A,c[1:]):
....:     print("sortable: ",v,"\n")
....:     for seq in Kbackwards(c[1:],v):
....:         P=p_lambda_cone(B(A,c),lam(A,v),[[c[0]]+seq])
....:         Q=p_lambda_cone(B(A,c),lam(A,v),[seq])
....:         print("sequence: ",seq,"\n",list(map(vector,P.rays())),list(map(ve
....: ctor,Q.rays())),"\n")
....:     if input()=="q":
....:         break
sortable:  [1, 2, 3, 1, 2, 3, 1, 2, 3] 

sequence:  [1, 2, 3, 1, 2, 3, 1, 2, 3] 
 [(1, 1, -1, 0), (0, -1, 0, 1), (-1, 0, 1, 0), (0, 0, -1, 0)] [(0, -1, 0, 1), (0, -1, 0, 0), (-1, 0, 1, 0), (0, 0, -1, 0)] 

sequence:  [1, 2, 3, 1, 2, 3, 1, 2] 
 [(0, 0, 1, 0), (1, 1, -1, 0), (0, -1, -2, 1), (-1, 0, 1, 0)] [(0, 0, 1, 0), (0, -1, -2, 1), (0, -1, 0, 0), (-1, 0, 1, 0)] 

sequence:  [1, 2, 3, 1, 2, 3, 1, 2, 3, 2] 
 [(1, 1, -1, 0), (-1, -1, 1, 1), (0, 1, 0, -1), (0, 0, -1, 0)] [(0, -1, 0, 0), (-1, -1, 1, 1), (0, 1, 0, -1), (0, 0, -1, 0)] 

sequence:  [1, 2, 3, 1, 2, 3, 1, 2, 3, 2, 3] 
 [(1, 1, -1, 0), (0, 0, 1, 0), (-1, -1, -1, 1), (0, 1, 0, -1)] [(0, -1, 0, 0), (0, 0, 1, 0), (-1, -1, -1, 1), (0, 1, 0, -1)] 

sequence:  [1, 2, 3, 1, 2, 3, 1, 2, 3, 1] 
 [(1, 0, -1, 0), (0, 1, 0, 0), (0, -1, 0, 1), (0, 0, -1, 0)] [(1, 0, -1, 0), (0, -1, 0, 1), (0, -1, 0, 0), (0, 0, -1, 0)] 

sequence:  [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 3] 
 [(0, 0, 1, 0), (1, 0, -1, 0), (0, 1, 0, 0), (0, -1, -2, 1)] [(0, 0, 1, 0), (1, 0, -1, 0), (0, -1, -2, 1), (0, -1, 0, 0)] 

sequence:  [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2] 
 [(1, 0, -1, 0), (0, 1, 0, 0), (0, 1, 0, -1), (0, 0, -1, 0)] [(1, 0, -1, 0), (0, 1, 0, -1), (0, -1, 0, 0), (0, 0, -1, 0)] 

sequence:  [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3] 
 [(0, 0, 1, 0), (1, 0, -1, 0), (0, 1, 0, 0), (0, 1, 0, -1)] [(0, 0, 1, 0), (1, 0, -1, 0), (0, 1, 0, -1), (0, -1, 0, 0)] 

^[[A^[[Aq
sortable:  [1, 2, 3, 1, 2, 3, 1, 2] 

sequence:  [1, 2, 3, 1, 2, 3, 1, 2] 
 [(0, 0, 1, 0), (1, 1, -1, 0), (0, -1, -2, 1), (-1, 0, 1, 0)] [(0, 0, 1, 0), (0, -1, -2, 1), (0, -1, 0, 0), (-1, 0, 1, 0)] 

sequence:  [1, 2, 3, 1, 2, 3, 1] 
 [(0, -1, -1, 1), (0, 1, 2, -1), (1, 1, -1, 0), (-1, -1, -1, 1)] [(0, -1, -1, 1), (0, 1, 2, -1), (0, -1, 0, 0), (-1, -1, -1, 1)] 

sequence:  [1, 2, 3, 1, 2, 3, 1, 2, 1] 
 [(0, 0, 1, 0), (1, 0, -1, 0), (0, 1, 0, 0), (0, -1, -2, 1)] [(0, 0, 1, 0), (1, 0, -1, 0), (0, -1, -2, 1), (0, -1, 0, 0)] 

sequence:  [1, 2, 3, 1, 2, 3, 1, 2, 1, 2] 
 [(0, -1, -1, 1), (0, 1, 2, -1), (1, 0, -1, 0), (0, 1, 0, 0)] [(0, -1, -1, 1), (0, 1, 2, -1), (1, 0, -1, 0), (0, -1, 0, 0)] 

sequence:  [1, 2, 3, 1, 2, 3, 1, 2, 3] 
 [(1, 1, -1, 0), (0, -1, -2, 1), (-1, 0, 1, 0), (0, 0, -1, 0)] [(0, -1, -2, 1), (0, -1, 0, 0), (-1, 0, 1, 0), (0, 0, -1, 0)] 

sequence:  [1, 2, 3, 1, 2, 3, 1, 2, 3, 2] 
 [(1, 1, -1, 0), (-1, -1, -1, 1), (0, 1, 2, -1), (0, 0, -1, 0)] [(0, -1, 0, 0), (-1, -1, -1, 1), (0, 1, 2, -1), (0, 0, -1, 0)] 

sequence:  [1, 2, 3, 1, 2, 3, 1, 2, 3, 1] 
 [(1, 0, -1, 0), (0, 1, 0, 0), (0, -1, -2, 1), (0, 0, -1, 0)] [(1, 0, -1, 0), (0, -1, -2, 1), (0, -1, 0, 0), (0, 0, -1, 0)] 

sequence:  [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2] 
 [(1, 0, -1, 0), (0, 1, 0, 0), (0, 1, 2, -1), (0, 0, -1, 0)] [(1, 0, -1, 0), (0, 1, 2, -1), (0, -1, 0, 0), (0, 0, -1, 0)] 

q
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: for v in sortables(A,c[1:]):
....:     print("sortable: ",v,"\n")
....:     for seq in Kbackwards(c[1:],v):
....:         P=p_lambda_cone(B(A,c),lam(A,v),[[c[0]]+seq])
....:         Q=p_lambda_cone(B(A,c),lam(A,v),[seq])
....:         print("sequence: ",seq,"\n",list(map(vector,P.rays())),"\n",list(m
....: ap(vector,Q.rays())),"\n")
....:     if input()=="q":
....:         break
sortable:  [1, 2, 3, 1, 2, 3, 1, 2, 3] 

sequence:  [1, 2, 3, 1, 2, 3, 1, 2, 3] 
 [(1, 1, -1, 0), (0, -1, 0, 1), (-1, 0, 1, 0), (0, 0, -1, 0)] 
 [(0, -1, 0, 1), (0, -1, 0, 0), (-1, 0, 1, 0), (0, 0, -1, 0)] 

sequence:  [1, 2, 3, 1, 2, 3, 1, 2] 
 [(0, 0, 1, 0), (1, 1, -1, 0), (0, -1, -2, 1), (-1, 0, 1, 0)] 
 [(0, 0, 1, 0), (0, -1, -2, 1), (0, -1, 0, 0), (-1, 0, 1, 0)] 

sequence:  [1, 2, 3, 1, 2, 3, 1, 2, 3, 2] 
 [(1, 1, -1, 0), (-1, -1, 1, 1), (0, 1, 0, -1), (0, 0, -1, 0)] 
 [(0, -1, 0, 0), (-1, -1, 1, 1), (0, 1, 0, -1), (0, 0, -1, 0)] 

sequence:  [1, 2, 3, 1, 2, 3, 1, 2, 3, 2, 3] 
 [(1, 1, -1, 0), (0, 0, 1, 0), (-1, -1, -1, 1), (0, 1, 0, -1)] 
 [(0, -1, 0, 0), (0, 0, 1, 0), (-1, -1, -1, 1), (0, 1, 0, -1)] 

sequence:  [1, 2, 3, 1, 2, 3, 1, 2, 3, 1] 
 [(1, 0, -1, 0), (0, 1, 0, 0), (0, -1, 0, 1), (0, 0, -1, 0)] 
 [(1, 0, -1, 0), (0, -1, 0, 1), (0, -1, 0, 0), (0, 0, -1, 0)] 

sequence:  [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 3] 
 [(0, 0, 1, 0), (1, 0, -1, 0), (0, 1, 0, 0), (0, -1, -2, 1)] 
 [(0, 0, 1, 0), (1, 0, -1, 0), (0, -1, -2, 1), (0, -1, 0, 0)] 

sequence:  [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2] 
 [(1, 0, -1, 0), (0, 1, 0, 0), (0, 1, 0, -1), (0, 0, -1, 0)] 
 [(1, 0, -1, 0), (0, 1, 0, -1), (0, -1, 0, 0), (0, 0, -1, 0)] 

sequence:  [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3] 
 [(0, 0, 1, 0), (1, 0, -1, 0), (0, 1, 0, 0), (0, 1, 0, -1)] 
 [(0, 0, 1, 0), (1, 0, -1, 0), (0, 1, 0, -1), (0, -1, 0, 0)] 

q
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: for v in sortables(A,c[1:]):
....:     print("sortable: ",v,"\n")
....:     for seq in Kbackwards(c[1:],v):
....:         P=p_lambda_cone(B(A,c),lam(A,v),[[c[0]]+seq])
....:         Q=p_lambda_cone(B(A,c),lam(A,v),[seq])
....:         print("sequence: ",seq,"\n",sort(list(map(vector,P.rays()))),"\n",
....: list(map(vector,Q.rays())),"\n")
....:     if input()=="q":
....:         break
sortable:  [1, 2, 3, 1, 2, 3, 1, 2, 3] 

---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
Cell In [897], line 8
      6     P=p_lambda_cone(B(A,c),lam(A,v),[[c[Integer(0)]]+seq])
      7     Q=p_lambda_cone(B(A,c),lam(A,v),[seq])
----> 8     print("sequence: ",seq,"\n",sort(list(map(vector,P.rays()))),"\n",list(map(vector,Q.rays())),"\n")
      9 if input()=="q":
     10     break

NameError: name 'sort' is not defined
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: for v in sortables(A,c[1:]):
....:     print("sortable: ",v,"\n")
....:     for seq in Kbackwards(c[1:],v):
....:         P=p_lambda_cone(B(A,c),lam(A,v),[[c[0]]+seq])
....:         Q=p_lambda_cone(B(A,c),lam(A,v),[seq])
....:         print("sequence: ",seq,"\n",list(map(vector,P.rays())).sort(),"\n"
....: ,list(map(vector,Q.rays())).sort(),"\n")
....:     if input()=="q":
....:         break
sortable:  [1, 2, 3, 1, 2, 3, 1, 2, 3] 

sequence:  [1, 2, 3, 1, 2, 3, 1, 2, 3] 
 None 
 None 

sequence:  [1, 2, 3, 1, 2, 3, 1, 2] 
 None 
 None 

sequence:  [1, 2, 3, 1, 2, 3, 1, 2, 3, 2] 
 None 
 None 

sequence:  [1, 2, 3, 1, 2, 3, 1, 2, 3, 2, 3] 
 None 
 None 

sequence:  [1, 2, 3, 1, 2, 3, 1, 2, 3, 1] 
 None 
 None 

sequence:  [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 3] 
 None 
 None 

sequence:  [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2] 
 None 
 None 

sequence:  [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3] 
 None 
 None 

q   
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: for v in sortables(A,c[1:]):
....:     print("sortable: ",v,"\n")
....:     for seq in Kbackwards(c[1:],v):
....:         P=p_lambda_cone(B(A,c),lam(A,v),[[c[0]]+seq])
....:         Q=p_lambda_cone(B(A,c),lam(A,v),[seq])
....:         print("sequence: ",seq,"\n",sorted(list(map(vector,P.rays()))),"\n
....: ",list(map(vector,Q.rays())).sort(),"\n")
....:     if input()=="q":
....:         break
sortable:  [1, 2, 3, 1, 2, 3, 1, 2, 3] 

sequence:  [1, 2, 3, 1, 2, 3, 1, 2, 3] 
 [(-1, 0, 1, 0), (0, -1, 0, 1), (0, 0, -1, 0), (1, 1, -1, 0)] 
 None 

sequence:  [1, 2, 3, 1, 2, 3, 1, 2] 
 [(-1, 0, 1, 0), (0, -1, -2, 1), (0, 0, 1, 0), (1, 1, -1, 0)] 
 None 

sequence:  [1, 2, 3, 1, 2, 3, 1, 2, 3, 2] 
 [(-1, -1, 1, 1), (0, 0, -1, 0), (0, 1, 0, -1), (1, 1, -1, 0)] 
 None 

sequence:  [1, 2, 3, 1, 2, 3, 1, 2, 3, 2, 3] 
 [(-1, -1, -1, 1), (0, 0, 1, 0), (0, 1, 0, -1), (1, 1, -1, 0)] 
 None 

sequence:  [1, 2, 3, 1, 2, 3, 1, 2, 3, 1] 
 [(0, -1, 0, 1), (0, 0, -1, 0), (0, 1, 0, 0), (1, 0, -1, 0)] 
 None 

sequence:  [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 3] 
 [(0, -1, -2, 1), (0, 0, 1, 0), (0, 1, 0, 0), (1, 0, -1, 0)] 
 None 

sequence:  [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2] 
 [(0, 0, -1, 0), (0, 1, 0, -1), (0, 1, 0, 0), (1, 0, -1, 0)] 
 None 

sequence:  [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3] 
 [(0, 0, 1, 0), (0, 1, 0, -1), (0, 1, 0, 0), (1, 0, -1, 0)] 
 None 

q   
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: for v in sortables(A,c[1:]):
....:     print("sortable: ",v,"\n")
....:     for seq in Kbackwards(c[1:],v):
....:         P=p_lambda_cone(B(A,c),lam(A,v),[[c[0]]+seq])
....:         Q=p_lambda_cone(B(A,c),lam(A,v),[seq])
....:         print("sequence: ",seq,"\n",sorted(list(map(vector,P.rays()))),"\n
....: ",sorted(list(map(vector,Q.rays()))),"\n")
....:     if input()=="q":
....:         break
sortable:  [1, 2, 3, 1, 2, 3, 1, 2, 3] 

sequence:  [1, 2, 3, 1, 2, 3, 1, 2, 3] 
 [(-1, 0, 1, 0), (0, -1, 0, 1), (0, 0, -1, 0), (1, 1, -1, 0)] 
 [(-1, 0, 1, 0), (0, -1, 0, 0), (0, -1, 0, 1), (0, 0, -1, 0)] 

sequence:  [1, 2, 3, 1, 2, 3, 1, 2] 
 [(-1, 0, 1, 0), (0, -1, -2, 1), (0, 0, 1, 0), (1, 1, -1, 0)] 
 [(-1, 0, 1, 0), (0, -1, -2, 1), (0, -1, 0, 0), (0, 0, 1, 0)] 

sequence:  [1, 2, 3, 1, 2, 3, 1, 2, 3, 2] 
 [(-1, -1, 1, 1), (0, 0, -1, 0), (0, 1, 0, -1), (1, 1, -1, 0)] 
 [(-1, -1, 1, 1), (0, -1, 0, 0), (0, 0, -1, 0), (0, 1, 0, -1)] 

sequence:  [1, 2, 3, 1, 2, 3, 1, 2, 3, 2, 3] 
 [(-1, -1, -1, 1), (0, 0, 1, 0), (0, 1, 0, -1), (1, 1, -1, 0)] 
 [(-1, -1, -1, 1), (0, -1, 0, 0), (0, 0, 1, 0), (0, 1, 0, -1)] 

sequence:  [1, 2, 3, 1, 2, 3, 1, 2, 3, 1] 
 [(0, -1, 0, 1), (0, 0, -1, 0), (0, 1, 0, 0), (1, 0, -1, 0)] 
 [(0, -1, 0, 0), (0, -1, 0, 1), (0, 0, -1, 0), (1, 0, -1, 0)] 

sequence:  [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 3] 
 [(0, -1, -2, 1), (0, 0, 1, 0), (0, 1, 0, 0), (1, 0, -1, 0)] 
 [(0, -1, -2, 1), (0, -1, 0, 0), (0, 0, 1, 0), (1, 0, -1, 0)] 

sequence:  [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2] 
 [(0, 0, -1, 0), (0, 1, 0, -1), (0, 1, 0, 0), (1, 0, -1, 0)] 
 [(0, -1, 0, 0), (0, 0, -1, 0), (0, 1, 0, -1), (1, 0, -1, 0)] 

sequence:  [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3] 
 [(0, 0, 1, 0), (0, 1, 0, -1), (0, 1, 0, 0), (1, 0, -1, 0)] 
 [(0, -1, 0, 0), (0, 0, 1, 0), (0, 1, 0, -1), (1, 0, -1, 0)] 

q
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: for v in sortables(A,c[1:]):
....:     print("sortable: ",v,"\n")
....:     for seq in Kbackwards(c[1:],v):
....:         P=p_lambda_cone(B(A,c),lam(A,v),[[c[0]]+seq])
....:         Q=p_lambda_cone(B(A,c),lam(A,v),[seq])
....:         print("sequence: ",seq,"\n",sorted(list(map(vector,P.rays()))),"\n
....: ",sorted(list(map(vector,Q.rays()))),"\n")
....:     if input()=="q":
....:         break
sortable:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 
 [(-1, 0, 0, 0, 1)] 
 [(-1, 0, 1, 0, 0), (0, -1, 0, 1, 0), (0, 0, -1, 0, 1), (0, 0, 0, -1, 0)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 
 [(-1, 0, 1, 0, 0), (0, -1, 0, 1, 0), (0, 0, -1, -2, 1), (1, 1, -1, 0, 0)] 
 [(-1, 0, 1, 0, 0), (0, -1, 0, 0, 0), (0, 0, -1, -2, 1), (0, 0, 0, 1, 0)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 3] 
 [] 
 [(-1, 0, 1, 0, 0), (0, -1, -1, 1, 1), (0, 0, 0, -1, 0), (0, 0, 1, 0, -1)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 3, 4] 
 [] 
 [(-1, 0, 1, 0, 0), (0, -1, -1, -1, 1), (0, 0, 0, 1, 0), (0, 0, 1, 0, -1)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 2] 
 [(-1, 0, 1, 0, 0), (0, 0, -1, 0, 1)] 
 [(-1, -1, 1, 1, 0), (0, -1, 0, 0, 0), (0, 0, -1, 0, 1), (0, 1, 0, -1, 0)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 2, 4] 
 [(-1, -1, 1, 1, 0), (0, 0, -1, -2, 1), (0, 1, 0, -1, 0), (1, 1, -1, 0, 0)] 
 [(-1, 0, 1, 0, 0), (0, 0, -1, 0, 1)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 2, 3] 
 [(-1, 0, 0, 0, 1)] 
 [(-1, -1, 0, 1, 1), (0, -1, 0, 0, 0), (0, 0, 1, 0, -1), (0, 1, 0, -1, 0)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4] 
 [(-1, 0, 0, 0, 1)] 
 [(-1, 0, 0, 0, 1), (0, 0, 1, 0, -1)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1] 
 [(0, 0, -1, 0, 1), (1, 0, -1, 0, 0)] 
 [(0, -1, 0, 1, 0), (0, 0, -1, 0, 1), (0, 0, 0, -1, 0), (1, 0, -1, 0, 0)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 4] 
 [(0, -1, 0, 1, 0), (0, 0, -1, -2, 1), (0, 1, 0, 0, 0), (1, 0, -1, 0, 0)] 
 [(0, -1, 0, 0, 0), (0, 0, -1, -2, 1), (0, 0, 0, 1, 0), (1, 0, -1, 0, 0)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 3] 
 [(1, 0, 0, 0, -1)] 
 [(0, -1, -1, 1, 1), (0, 0, 0, -1, 0), (0, 0, 1, 0, -1), (1, 0, -1, 0, 0)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 3, 4] 
 [(1, 0, 0, 0, -1)] 
 [(0, -1, -1, -1, 1), (0, 0, 0, 1, 0), (0, 0, 1, 0, -1), (1, 0, -1, 0, 0)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 
 [(0, 0, -1, 0, 1), (0, 0, 0, -1, 0), (0, 1, 0, 0, 0), (1, 0, -1, 0, 0)] 
 [(0, -1, 0, 0, 0), (0, 0, -1, 0, 1), (0, 1, 0, -1, 0), (1, 0, -1, 0, 0)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 4] 
 [(0, 0, -1, -2, 1), (0, 0, 0, 1, 0), (0, 1, 0, -1, 0), (1, 0, -1, 0, 0)] 
 [(0, 0, -1, 0, 1), (1, 0, -1, 0, 0)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 
 [(0, 0, 0, -1, 0), (0, 0, 1, 0, -1), (0, 1, 0, 0, 0), (1, 0, -1, 0, 0)] 
 [(0, -1, 0, 0, 0), (0, 0, 1, 0, -1), (0, 1, 0, -1, 0), (1, 0, -1, 0, 0)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 
 [(0, 0, 0, 1, 0), (0, 0, 1, 0, -1), (0, 1, 0, -1, 0), (1, 0, -1, 0, 0)] 
 [(0, 0, 1, 0, -1), (1, 0, -1, 0, 0)] 


sortable:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 
 [(-1, 0, 1, 0, 0), (0, -1, 0, 1, 0), (0, 0, -1, -2, 1), (1, 1, -1, 0, 0)] 
 [(-1, 0, 1, 0, 0), (0, -1, 0, 0, 0), (0, 0, -1, -2, 1), (0, 0, 0, 1, 0)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 
 [(-1, 0, 1, 0, 0), (0, -1, -1, -1, 1), (0, 0, 1, 2, -1), (1, 1, -1, 0, 0)] 
 [(-1, 0, 1, 0, 0), (0, -1, 0, 0, 0), (0, 0, -1, -1, 1), (0, 0, 1, 2, -1)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 2] 
 [(-1, -1, 1, 1, 0), (0, 0, -1, -2, 1), (0, 1, 0, -1, 0), (1, 1, -1, 0, 0)] 
 [(-1, 0, 1, 0, 0), (0, 0, -1, 0, 1)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 2, 3] 
 [(-1, -1, 0, -1, 1), (0, 0, 1, 2, -1), (0, 1, 0, -1, 0), (1, 1, -1, 0, 0)] 
 [(-1, 0, 0, 0, 1)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1] 
 [(0, -1, 0, 1, 0), (0, 0, -1, -2, 1), (0, 1, 0, 0, 0), (1, 0, -1, 0, 0)] 
 [(0, -1, 0, 0, 0), (0, 0, -1, -2, 1), (0, 0, 0, 1, 0), (1, 0, -1, 0, 0)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 3] 
 [(0, -1, -1, -1, 1), (0, 0, 1, 2, -1), (0, 1, 0, 0, 0), (1, 0, -1, 0, 0)] 
 [(0, -1, 0, 0, 0), (0, 0, -1, -1, 1), (0, 0, 1, 2, -1), (1, 0, -1, 0, 0)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2] 
 [(0, 0, -1, -2, 1), (0, 0, 0, 1, 0), (0, 1, 0, -1, 0), (1, 0, -1, 0, 0)] 
 [(0, 0, -1, 0, 1), (1, 0, -1, 0, 0)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2, 3] 
 [(0, 0, -1, -1, 1), (0, 0, 1, 2, -1), (0, 1, 0, -1, 0), (1, 0, -1, 0, 0)] 
 [(1, 0, 0, 0, -1)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 
 [(-1, 0, 0, 0, 1)] 
 [(-1, 0, 1, 0, 0), (0, -1, 0, 1, 0), (0, 0, -1, -2, 1), (0, 0, 0, -1, 0)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 3] 
 [] 
 [(-1, 0, 1, 0, 0), (0, -1, -1, -1, 1), (0, 0, 0, -1, 0), (0, 0, 1, 2, -1)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 2] 
 [(-1, 0, 1, 0, 0), (0, 0, -1, 0, 1)] 
 [(-1, -1, 1, 1, 0), (0, -1, 0, 0, 0), (0, 0, -1, -2, 1), (0, 1, 0, -1, 0)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 2, 3] 
 [(-1, 0, 0, 0, 1)] 
 [(-1, -1, 0, -1, 1), (0, -1, 0, 0, 0), (0, 0, 1, 2, -1), (0, 1, 0, -1, 0)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1] 
 [(0, 0, -1, 0, 1), (1, 0, -1, 0, 0)] 
 [(0, -1, 0, 1, 0), (0, 0, -1, -2, 1), (0, 0, 0, -1, 0), (1, 0, -1, 0, 0)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 3] 
 [(1, 0, 0, 0, -1)] 
 [(0, -1, -1, -1, 1), (0, 0, 0, -1, 0), (0, 0, 1, 2, -1), (1, 0, -1, 0, 0)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 
 [(0, 0, -1, -2, 1), (0, 0, 0, -1, 0), (0, 1, 0, 0, 0), (1, 0, -1, 0, 0)] 
 [(0, -1, 0, 0, 0), (0, 0, -1, -2, 1), (0, 1, 0, -1, 0), (1, 0, -1, 0, 0)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 
 [(0, 0, 0, -1, 0), (0, 0, 1, 2, -1), (0, 1, 0, 0, 0), (1, 0, -1, 0, 0)] 
 [(0, -1, 0, 0, 0), (0, 0, 1, 2, -1), (0, 1, 0, -1, 0), (1, 0, -1, 0, 0)] 

q
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: for v in sortables(A,c[1:]):
....:     print("sortable: ",v,"\n")
....:     for seq in Kbackwards(c[1:],v):
....:         P=p_lambda_cone(B(A,c),lam(A,v),[[c[0]]+seq])
....:         Q=p_lambda_cone(B(A,c),lam(A,v),[seq])
....:         print("sequence: ",seq,"\n",sorted(list(map(vector,P.rays()))),"\n
....: ",sorted(list(map(vector,Q.rays()))),"\n")
....:     if input()=="q":
....:         break
....: 
sortable:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 
 [(-1, 0, 0, 0, 1)] 
 [(-1, 0, 1, 0, 0), (0, -1, 0, 1, 0), (0, 0, -1, 0, 1), (0, 0, 0, -1, 0)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 
 [(-1, 0, 1, 0, 0), (0, -1, 0, 1, 0), (0, 0, -1, -2, 1), (1, 1, -1, 0, 0)] 
 [(-1, 0, 1, 0, 0), (0, -1, 0, 0, 0), (0, 0, -1, -2, 1), (0, 0, 0, 1, 0)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 3] 
 [] 
 [(-1, 0, 1, 0, 0), (0, -1, -1, 1, 1), (0, 0, 0, -1, 0), (0, 0, 1, 0, -1)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 3, 4] 
 [] 
 [(-1, 0, 1, 0, 0), (0, -1, -1, -1, 1), (0, 0, 0, 1, 0), (0, 0, 1, 0, -1)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 2] 
 [(-1, 0, 1, 0, 0), (0, 0, -1, 0, 1)] 
 [(-1, -1, 1, 1, 0), (0, -1, 0, 0, 0), (0, 0, -1, 0, 1), (0, 1, 0, -1, 0)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 2, 4] 
 [(-1, -1, 1, 1, 0), (0, 0, -1, -2, 1), (0, 1, 0, -1, 0), (1, 1, -1, 0, 0)] 
 [(-1, 0, 1, 0, 0), (0, 0, -1, 0, 1)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 2, 3] 
 [(-1, 0, 0, 0, 1)] 
 [(-1, -1, 0, 1, 1), (0, -1, 0, 0, 0), (0, 0, 1, 0, -1), (0, 1, 0, -1, 0)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4] 
 [(-1, 0, 0, 0, 1)] 
 [(-1, 0, 0, 0, 1), (0, 0, 1, 0, -1)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1] 
 [(0, 0, -1, 0, 1), (1, 0, -1, 0, 0)] 
 [(0, -1, 0, 1, 0), (0, 0, -1, 0, 1), (0, 0, 0, -1, 0), (1, 0, -1, 0, 0)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 4] 
 [(0, -1, 0, 1, 0), (0, 0, -1, -2, 1), (0, 1, 0, 0, 0), (1, 0, -1, 0, 0)] 
 [(0, -1, 0, 0, 0), (0, 0, -1, -2, 1), (0, 0, 0, 1, 0), (1, 0, -1, 0, 0)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 3] 
 [(1, 0, 0, 0, -1)] 
 [(0, -1, -1, 1, 1), (0, 0, 0, -1, 0), (0, 0, 1, 0, -1), (1, 0, -1, 0, 0)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 3, 4] 
 [(1, 0, 0, 0, -1)] 
 [(0, -1, -1, -1, 1), (0, 0, 0, 1, 0), (0, 0, 1, 0, -1), (1, 0, -1, 0, 0)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 
 [(0, 0, -1, 0, 1), (0, 0, 0, -1, 0), (0, 1, 0, 0, 0), (1, 0, -1, 0, 0)] 
 [(0, -1, 0, 0, 0), (0, 0, -1, 0, 1), (0, 1, 0, -1, 0), (1, 0, -1, 0, 0)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 4] 
 [(0, 0, -1, -2, 1), (0, 0, 0, 1, 0), (0, 1, 0, -1, 0), (1, 0, -1, 0, 0)] 
 [(0, 0, -1, 0, 1), (1, 0, -1, 0, 0)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 
 [(0, 0, 0, -1, 0), (0, 0, 1, 0, -1), (0, 1, 0, 0, 0), (1, 0, -1, 0, 0)] 
 [(0, -1, 0, 0, 0), (0, 0, 1, 0, -1), (0, 1, 0, -1, 0), (1, 0, -1, 0, 0)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 
 [(0, 0, 0, 1, 0), (0, 0, 1, 0, -1), (0, 1, 0, -1, 0), (1, 0, -1, 0, 0)] 
 [(0, 0, 1, 0, -1), (1, 0, -1, 0, 0)] 


sortable:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 
 [(-1, 0, 1, 0, 0), (0, -1, 0, 1, 0), (0, 0, -1, -2, 1), (1, 1, -1, 0, 0)] 
 [(-1, 0, 1, 0, 0), (0, -1, 0, 0, 0), (0, 0, -1, -2, 1), (0, 0, 0, 1, 0)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 
 [(-1, 0, 1, 0, 0), (0, -1, -1, -1, 1), (0, 0, 1, 2, -1), (1, 1, -1, 0, 0)] 
 [(-1, 0, 1, 0, 0), (0, -1, 0, 0, 0), (0, 0, -1, -1, 1), (0, 0, 1, 2, -1)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 2] 
 [(-1, -1, 1, 1, 0), (0, 0, -1, -2, 1), (0, 1, 0, -1, 0), (1, 1, -1, 0, 0)] 
 [(-1, 0, 1, 0, 0), (0, 0, -1, 0, 1)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 2, 3] 
 [(-1, -1, 0, -1, 1), (0, 0, 1, 2, -1), (0, 1, 0, -1, 0), (1, 1, -1, 0, 0)] 
 [(-1, 0, 0, 0, 1)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1] 
 [(0, -1, 0, 1, 0), (0, 0, -1, -2, 1), (0, 1, 0, 0, 0), (1, 0, -1, 0, 0)] 
 [(0, -1, 0, 0, 0), (0, 0, -1, -2, 1), (0, 0, 0, 1, 0), (1, 0, -1, 0, 0)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 3] 
 [(0, -1, -1, -1, 1), (0, 0, 1, 2, -1), (0, 1, 0, 0, 0), (1, 0, -1, 0, 0)] 
 [(0, -1, 0, 0, 0), (0, 0, -1, -1, 1), (0, 0, 1, 2, -1), (1, 0, -1, 0, 0)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2] 
 [(0, 0, -1, -2, 1), (0, 0, 0, 1, 0), (0, 1, 0, -1, 0), (1, 0, -1, 0, 0)] 
 [(0, 0, -1, 0, 1), (1, 0, -1, 0, 0)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2, 3] 
 [(0, 0, -1, -1, 1), (0, 0, 1, 2, -1), (0, 1, 0, -1, 0), (1, 0, -1, 0, 0)] 
 [(1, 0, 0, 0, -1)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 
 [(-1, 0, 0, 0, 1)] 
 [(-1, 0, 1, 0, 0), (0, -1, 0, 1, 0), (0, 0, -1, -2, 1), (0, 0, 0, -1, 0)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 3] 
 [] 
 [(-1, 0, 1, 0, 0), (0, -1, -1, -1, 1), (0, 0, 0, -1, 0), (0, 0, 1, 2, -1)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 2] 
 [(-1, 0, 1, 0, 0), (0, 0, -1, 0, 1)] 
 [(-1, -1, 1, 1, 0), (0, -1, 0, 0, 0), (0, 0, -1, -2, 1), (0, 1, 0, -1, 0)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 2, 3] 
 [(-1, 0, 0, 0, 1)] 
 [(-1, -1, 0, -1, 1), (0, -1, 0, 0, 0), (0, 0, 1, 2, -1), (0, 1, 0, -1, 0)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1] 
 [(0, 0, -1, 0, 1), (1, 0, -1, 0, 0)] 
 [(0, -1, 0, 1, 0), (0, 0, -1, -2, 1), (0, 0, 0, -1, 0), (1, 0, -1, 0, 0)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 3] 
 [(1, 0, 0, 0, -1)] 
 [(0, -1, -1, -1, 1), (0, 0, 0, -1, 0), (0, 0, 1, 2, -1), (1, 0, -1, 0, 0)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 
 [(0, 0, -1, -2, 1), (0, 0, 0, -1, 0), (0, 1, 0, 0, 0), (1, 0, -1, 0, 0)] 
 [(0, -1, 0, 0, 0), (0, 0, -1, -2, 1), (0, 1, 0, -1, 0), (1, 0, -1, 0, 0)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 
 [(0, 0, 0, -1, 0), (0, 0, 1, 2, -1), (0, 1, 0, 0, 0), (1, 0, -1, 0, 0)] 
 [(0, -1, 0, 0, 0), (0, 0, 1, 2, -1), (0, 1, 0, -1, 0), (1, 0, -1, 0, 0)] 


sortable:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 
 [(-1, 0, 1, 0, 0), (0, -1, -1, -1, 1), (0, 0, 1, 2, -1), (1, 1, -1, 0, 0)] 
 [(-1, 0, 1, 0, 0), (0, -1, 0, 0, 0), (0, 0, -1, -1, 1), (0, 0, 1, 2, -1)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1] 
 [(-1, -1, 0, -1, 1), (0, -1, 0, 1, 0), (0, 1, 1, 1, -1), (1, 1, -1, 0, 0)] 
 [(-1, 0, 0, -1, 1), (0, 0, 0, 1, 0)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1] 
 [(0, -1, -1, -1, 1), (0, 0, 1, 2, -1), (0, 1, 0, 0, 0), (1, 0, -1, 0, 0)] 
 [(0, -1, 0, 0, 0), (0, 0, -1, -1, 1), (0, 0, 1, 2, -1), (1, 0, -1, 0, 0)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1, 2] 
 [(0, -1, 0, 1, 0), (0, 0, -1, -1, 1), (0, 1, 1, 1, -1), (1, 0, -1, 0, 0)] 
 [(0, 0, 0, 1, 0), (1, 0, 0, 1, -1)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 4] 
 [(0, 0, 0, 1, 0)] 
 [(-1, 0, 1, 0, 0), (0, -1, -1, -1, 1), (0, 0, -1, 0, 1), (0, 0, 1, 1, -1)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 4, 2] 
 [(-1, 0, 0, -1, 1), (1, 0, 0, 2, -1)] 
 [(-1, -1, 0, -1, 1), (0, -1, -2, -1, 2), (0, -1, 0, 0, 0), (0, 1, 1, 1, -1)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 4, 1] 
 [(0, 0, 0, 1, 0), (1, 0, 0, 1, -1)] 
 [(0, -1, -1, -1, 1), (0, 0, -1, 0, 1), (0, 0, 1, 1, -1), (1, 0, -1, 0, 0)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 4, 1, 2] 
 [(0, -1, -2, -1, 2), (0, 0, 1, 1, -1), (0, 1, 0, 0, 0), (1, 0, -1, 0, 0)] 
 [(0, -1, -2, -1, 2), (0, -1, 0, 0, 0), (0, 1, 1, 1, -1), (1, 0, -1, 0, 0)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 
 [(-1, 0, 1, 0, 0), (0, -1, -1, -1, 1), (0, 0, -1, -2, 1), (1, 1, -1, 0, 0)] 
 [(-1, 0, 1, 0, 0), (0, -1, 0, 0, 0), (0, 0, -1, -2, 1), (0, 0, -1, -1, 1)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 2] 
 [(-1, -1, 0, -1, 1), (0, 0, -1, -2, 1), (0, 1, 1, 1, -1), (1, 1, -1, 0, 0)] 
 [(-1, 0, 0, -1, 1), (0, 0, 0, -1, 0)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1] 
 [(0, -1, -1, -1, 1), (0, 0, -1, -2, 1), (0, 1, 0, 0, 0), (1, 0, -1, 0, 0)] 
 [(0, -1, 0, 0, 0), (0, 0, -1, -2, 1), (0, 0, -1, -1, 1), (1, 0, -1, 0, 0)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2] 
 [(0, 0, -1, -2, 1), (0, 0, -1, -1, 1), (0, 1, 1, 1, -1), (1, 0, -1, 0, 0)] 
 [(0, 0, 0, -1, 0), (1, 0, 0, 1, -1)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 
 [(0, 0, 0, -1, 0)] 
 [(-1, 0, 1, 0, 0), (0, -1, -1, -1, 1), (0, 0, -1, -2, 1), (0, 0, 1, 1, -1)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 2] 
 [(-1, 0, 0, -1, 1), (0, 0, 0, -1, 0)] 
 [(-1, -1, 0, -1, 1), (0, -1, 0, 0, 0), (0, 0, -1, -2, 1), (0, 1, 1, 1, -1)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1] 
 [(0, 0, 0, -1, 0), (1, 0, 0, 1, -1)] 
 [(0, -1, -1, -1, 1), (0, 0, -1, -2, 1), (0, 0, 1, 1, -1), (1, 0, -1, 0, 0)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 
 [(0, 0, -1, -2, 1), (0, 0, 1, 1, -1), (0, 1, 0, 0, 0), (1, 0, -1, 0, 0)] 
 [(0, -1, 0, 0, 0), (0, 0, -1, -2, 1), (0, 1, 1, 1, -1), (1, 0, -1, 0, 0)] 


sortable:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1] 
 [(-1, -1, 0, -1, 1), (0, -1, 0, 1, 0), (0, 1, 1, 1, -1), (1, 1, -1, 0, 0)] 
 [(-1, 0, 0, -1, 1), (0, 0, 0, 1, 0)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 
 [(-1, 0, 1, 0, 0), (0, -1, 0, 1, 0), (0, 0, -1, -1, 1), (1, 1, 0, 1, -1)] 
 [(0, 0, 0, 1, 0)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 4] 
 [(-1, 0, 0, -1, 1), (1, 0, 0, 2, -1)] 
 [(-1, -1, 0, -1, 1), (0, -1, -2, -1, 2), (0, -1, 0, 0, 0), (0, 1, 1, 1, -1)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 4, 1] 
 [(-1, 0, 1, 0, 0), (0, -1, -2, -1, 2), (0, 0, 1, 1, -1), (1, 1, -1, 0, 0)] 
 [(-1, 0, 1, 0, 0), (0, -1, -2, -1, 2), (0, -1, 0, 0, 0), (1, 1, 0, 1, -1)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 3] 
 [(-1, -1, 0, -1, 1), (0, 0, 1, 2, -1), (0, 1, 0, -1, 0), (1, 1, -1, 0, 0)] 
 [(-1, 0, 0, 0, 1)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 3, 1] 
 [(-1, -1, 1, 1, 0), (0, 0, -1, -1, 1), (0, 1, 0, -1, 0), (1, 1, 0, 1, -1)] 
 [] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 3, 4] 
 [(-1, 0, 0, -2, 1), (0, 0, 0, 1, 0)] 
 [(-1, 0, 0, 0, 1)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 3, 4, 1] 
 [(-1, -1, -1, -1, 2), (0, 0, 1, 1, -1), (0, 1, 0, -1, 0), (1, 1, -1, 0, 0)] 
 [] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 
 [(-1, -1, 0, -1, 1), (0, -1, -1, -1, 1), (0, -1, 0, 1, 0), (1, 2, 0, 1, -1)] 
 [(-1, -1, 0, -1, 1), (0, -1, 0, 0, 0), (0, -1, 0, 1, 0), (0, 0, -1, -1, 1)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1] 
 [(0, -1, -1, -1, 1), (0, -1, 0, 1, 0), (0, 1, 0, 0, 0), (1, 1, 0, 1, -1)] 
 [(0, -1, 0, 0, 0), (0, -1, 0, 1, 0), (0, 0, -1, -1, 1), (1, 1, 0, 1, -1)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 4] 
 [(0, 0, 0, 1, 0)] 
 [(-1, -1, 0, -1, 1), (0, -1, -2, -1, 2), (0, -1, -1, -1, 1), (0, 0, 1, 1, -1)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 4, 1] 
 [(0, 0, 0, 1, 0), (1, 0, 0, 1, -1)] 
 [(0, -1, -2, -1, 2), (0, -1, -1, -1, 1), (0, 0, 1, 1, -1), (1, 1, 0, 1, -1)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 
 [(-1, -1, 0, -1, 1), (0, -1, -1, -1, 1), (0, 1, 0, -1, 0), (1, 2, 0, 1, -1)] 
 [(-1, -1, 0, -1, 1), (0, -1, 0, 0, 0), (0, 0, -1, -1, 1), (0, 1, 0, -1, 0)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1] 
 [(0, -1, -1, -1, 1), (0, 1, 0, -1, 0), (0, 1, 0, 0, 0), (1, 1, 0, 1, -1)] 
 [(0, -1, 0, 0, 0), (0, 0, -1, -1, 1), (0, 1, 0, -1, 0), (1, 1, 0, 1, -1)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 
 [(0, 0, 0, -1, 0)] 
 [(-1, -1, 0, -1, 1), (0, -1, -1, -1, 1), (0, 0, 1, 1, -1), (0, 1, 0, -1, 0)] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1] 
 [(0, 0, 0, -1, 0), (1, 0, 0, 1, -1)] 
 [(0, -1, -1, -1, 1), (0, 0, 1, 1, -1), (0, 1, 0, -1, 0), (1, 1, 0, 1, -1)] 

q                   
sage: A=CartanMatrix(['C',4])
....: c=[3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
....: 
1 [2, 1, 0, 2, 1, 2] 0
2 [2, 1, 0, 2, 1] 0
3 [2, 1, 0, 2] 0
4 [2, 1, 0, 1] 0
5 [2, 1, 0] 0
6 [2, 1, 2] 0
7 [2, 1] 0
8 [2, 0] 0
9 [2] 0
10 [1, 0, 1] 0
11 [1, 0] 0
12 [1] 0
13 [0] 0
14 [] 0
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
1 [1, 2, 1, 2] 0
2 [1, 2, 1] 0
3 [1, 2] 1
Failure!
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....: 
1 [1, 2, 1, 2] 0
2 [1, 2, 1] 0
3 [1, 2] 1
Failure!
4 [1] 1
Failure!
5 [2] 0
6 [] 0
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: seqs=list(sortables(A,c[1:]))+list([c[0]]+v for v in sortables(A,c[1:]))
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),seqs)
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....: 
1 [1, 2, 1, 2] 0
2 [1, 2, 1] 0
3 [1, 2] 1
Failure!
4 [1] 1
Failure!
5 [2] 0
6 [] 0
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v))
....:     d=P.dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!",Kbackwards(c,v))
....: 
1 [1, 2, 1, 2] 0
2 [1, 2, 1] 0
3 [1, 2] 1
Failure! [[1, 2], [1], [1, 2, 1], [1, 2, 1, 2], [0, 1, 2], [0, 1], [0, 1, 2, 1], [0, 1, 2, 1, 2]]
4 [1] 1
Failure! [[1], [], [1, 2], [1, 2, 1], [0, 1], [0], [0, 1, 2], [0, 1, 2, 1]]
5 [2] 0
6 [] 0
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: for v in sortables(A,c[1:]):
....:     print("sortable: ",v,"\n")
....:     for seq in Kbackwards(c[1:],v):
....:         P=p_lambda_cone(B(A,c),lam(A,v),[[c[0]]+seq])
....:         Q=p_lambda_cone(B(A,c),lam(A,v),[seq])
....:         print("sequence: ",seq,"\n",sorted(list(map(vector,P.rays()))),"\n
....: ",sorted(list(map(vector,Q.rays()))),"\n")
....:     if input()=="q":
....:         break
....: 
sortable:  [1, 2, 1, 2] 

sequence:  [1, 2, 1, 2] 
 [] 
 [(-1, 0, 1), (0, -1, 0)] 

sequence:  [1, 2, 1] 
 [] 
 [(-1, 0, 1)] 

sequence:  [1, 2, 1, 2, 1] 
 [(1, 0, -1)] 
 [(0, -1, 0), (1, 0, -1)] 

sequence:  [1, 2, 1, 2, 1, 2] 
 [(0, 1, 0), (1, 0, -1)] 
 [(1, 0, -1)] 


sortable:  [1, 2, 1] 

sequence:  [1, 2, 1] 
 [] 
 [(-1, 0, 1)] 

sequence:  [1, 2] 
 [(0, 1, 0)] 
 [] 

sequence:  [1, 2, 1, 2] 
 [] 
 [(-1, -2, 1), (0, -1, 0)] 

sequence:  [1, 2, 1, 2, 1] 
 [(1, 0, -1)] 
 [(0, -1, 0), (1, 2, -1)] 


sortable:  [1, 2] 

sequence:  [1, 2] 
 [(0, 1, 0)] 
 [] 

sequence:  [1] 
 [(-1, 0, 1), (1, 1, -1)] 
 [] 

sequence:  [1, 2, 1] 
 [] 
 [(0, -1, 0)] 

sequence:  [1, 2, 1, 2] 
 [] 
 [(-1, -2, 1), (1, 1, -1)] 

q       
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: for v in sortables(A,c[1:]):
....:     print("sortable: ",v,"\n")
....:     for seq in Kbackwards(c[1:],v):
....:         P=p_lambda_cone(B(A,c),lam(A,v),[[c[0]]+seq])
....:         Q=p_lambda_cone(B(A,c),lam(A,v),[seq])
....:         print("sequence: ",seq,"\n",sorted(list(map(vector,P.rays()))),P.l
....: ines(),"\n",sorted(list(map(vector,Q.rays()))),Q.lines(),"\n")
....:     if input()=="q":
....:         break
sortable:  [1, 2, 1, 2] 

sequence:  [1, 2, 1, 2] 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(-1, 0, 1), (0, -1, 0)] () 

sequence:  [1, 2, 1] 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(-1, 0, 1)] (A line in the direction (0, 1, 0),) 

sequence:  [1, 2, 1, 2, 1] 
 [(1, 0, -1)] (A line in the direction (0, 1, 0),) 
 [(0, -1, 0), (1, 0, -1)] () 

sequence:  [1, 2, 1, 2, 1, 2] 
 [(0, 1, 0), (1, 0, -1)] () 
 [(1, 0, -1)] (A line in the direction (0, 1, 0),) 


sortable:  [1, 2, 1] 

sequence:  [1, 2, 1] 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(-1, 0, 1)] (A line in the direction (0, 1, 0),) 

sequence:  [1, 2] 
 [(0, 1, 0)] (A line in the direction (1, 1, -1),) 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 

sequence:  [1, 2, 1, 2] 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(-1, -2, 1), (0, -1, 0)] () 

sequence:  [1, 2, 1, 2, 1] 
 [(1, 0, -1)] (A line in the direction (0, 1, 0),) 
 [(0, -1, 0), (1, 2, -1)] () 


sortable:  [1, 2] 

sequence:  [1, 2] 
 [(0, 1, 0)] (A line in the direction (1, 1, -1),) 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 

sequence:  [1] 
 [(-1, 0, 1), (1, 1, -1)] () 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 

sequence:  [1, 2, 1] 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(0, -1, 0)] (A line in the direction (1, 1, -1),) 

sequence:  [1, 2, 1, 2] 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(-1, -2, 1), (1, 1, -1)] () 


sortable:  [1] 

sequence:  [1] 
 [(-1, 0, 1), (1, 1, -1)] () 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 

sequence:  [] 
 [(0, 1, 0), (1, 0, -1)] () 
 [(1, 0, -1)] (A line in the direction (0, 1, 0),) 

sequence:  [1, 2] 
 [(0, 1, 0)] (A line in the direction (1, 1, -1),) 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 

sequence:  [1, 2, 1] 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(0, -1, 0)] (A line in the direction (1, 1, -1),) 

        
sortable:  [2] 

sequence:  [2] 
 [(1, 0, -1)] (A line in the direction (0, 1, 0),) 
 [(0, -1, 0), (1, 0, -1)] () 

sequence:  [] 
 [(0, 1, 0), (1, 0, -1)] () 
 [(1, 0, -1)] (A line in the direction (0, 1, 0),) 

sequence:  [1, 2] 
 [(-1, 0, 1)] (A line in the direction (0, 1, 0),) 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 

sequence:  [1] 
 [(-1, 0, 1), (0, 1, 0)] () 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 

q
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: for v in sortables(A,c[1:]):
....:     print("sortable: ",v,"\n")
....:     for seq in Kbackwards(c[1:],v):
....:         P=p_lambda_cone(B(A,c),lam(A,v),[[c[0]]+seq])
....:         Q=p_lambda_cone(B(A,c),lam(A,v),[seq])
....:         R=P.intersection(Q)
....:         print("sequence: ",seq,"\n",sorted(list(map(vector,P.rays()))),P.l
....: ines(),"\n",sorted(list(map(vector,Q.rays()))),Q.lines(),"\n",sorted(list(
....: map(vector,R.rays()))),R.lines(),"\n")
....:     if input()=="q":
....:         break
....: 
sortable:  [1, 2, 1, 2] 

sequence:  [1, 2, 1, 2] 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(-1, 0, 1), (0, -1, 0)] () 
 [(-1, 0, 1), (0, -1, 0)] () 

sequence:  [1, 2, 1] 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(-1, 0, 1)] (A line in the direction (0, 1, 0),) 
 [(-1, 0, 1)] (A line in the direction (0, 1, 0),) 

sequence:  [1, 2, 1, 2, 1] 
 [(1, 0, -1)] (A line in the direction (0, 1, 0),) 
 [(0, -1, 0), (1, 0, -1)] () 
 [(0, -1, 0), (1, 0, -1)] () 

sequence:  [1, 2, 1, 2, 1, 2] 
 [(0, 1, 0), (1, 0, -1)] () 
 [(1, 0, -1)] (A line in the direction (0, 1, 0),) 
 [(0, 1, 0), (1, 0, -1)] () 


sortable:  [1, 2, 1] 

sequence:  [1, 2, 1] 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(-1, 0, 1)] (A line in the direction (0, 1, 0),) 
 [(-1, 0, 1)] (A line in the direction (0, 1, 0),) 

sequence:  [1, 2] 
 [(0, 1, 0)] (A line in the direction (1, 1, -1),) 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(0, 1, 0)] (A line in the direction (1, 1, -1),) 

sequence:  [1, 2, 1, 2] 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(-1, -2, 1), (0, -1, 0)] () 
 [(-1, -2, 1), (0, -1, 0)] () 

sequence:  [1, 2, 1, 2, 1] 
 [(1, 0, -1)] (A line in the direction (0, 1, 0),) 
 [(0, -1, 0), (1, 2, -1)] () 
 [(0, -1, 0), (1, 2, -1)] () 


sortable:  [1, 2] 

sequence:  [1, 2] 
 [(0, 1, 0)] (A line in the direction (1, 1, -1),) 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(0, 1, 0)] (A line in the direction (1, 1, -1),) 

sequence:  [1] 
 [(-1, 0, 1), (1, 1, -1)] () 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(-1, 0, 1), (1, 1, -1)] () 

sequence:  [1, 2, 1] 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(0, -1, 0)] (A line in the direction (1, 1, -1),) 
 [(0, -1, 0)] (A line in the direction (1, 1, -1),) 

sequence:  [1, 2, 1, 2] 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(-1, -2, 1), (1, 1, -1)] () 
 [(-1, -2, 1), (1, 1, -1)] () 


sortable:  [1] 

sequence:  [1] 
 [(-1, 0, 1), (1, 1, -1)] () 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(-1, 0, 1), (1, 1, -1)] () 

sequence:  [] 
 [(0, 1, 0), (1, 0, -1)] () 
 [(1, 0, -1)] (A line in the direction (0, 1, 0),) 
 [(0, 1, 0), (1, 0, -1)] () 

sequence:  [1, 2] 
 [(0, 1, 0)] (A line in the direction (1, 1, -1),) 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(0, 1, 0)] (A line in the direction (1, 1, -1),) 

sequence:  [1, 2, 1] 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(0, -1, 0)] (A line in the direction (1, 1, -1),) 
 [(0, -1, 0)] (A line in the direction (1, 1, -1),) 


sortable:  [2] 

sequence:  [2] 
 [(1, 0, -1)] (A line in the direction (0, 1, 0),) 
 [(0, -1, 0), (1, 0, -1)] () 
 [(0, -1, 0), (1, 0, -1)] () 

sequence:  [] 
 [(0, 1, 0), (1, 0, -1)] () 
 [(1, 0, -1)] (A line in the direction (0, 1, 0),) 
 [(0, 1, 0), (1, 0, -1)] () 

sequence:  [1, 2] 
 [(-1, 0, 1)] (A line in the direction (0, 1, 0),) 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(-1, 0, 1)] (A line in the direction (0, 1, 0),) 

sequence:  [1] 
 [(-1, 0, 1), (0, 1, 0)] () 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(-1, 0, 1), (0, 1, 0)] () 


sortable:  [] 

sequence:  [] 
 [(0, 1, 0), (1, 0, -1)] () 
 [(1, 0, -1)] (A line in the direction (0, 1, 0),) 
 [(0, 1, 0), (1, 0, -1)] () 

sequence:  [2] 
 [(1, 0, -1)] (A line in the direction (0, 1, 0),) 
 [(0, -1, 0), (1, 2, -1)] () 
 [(0, -1, 0), (1, 2, -1)] () 

sequence:  [1] 
 [(-1, 0, 1), (0, 1, 0)] () 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(-1, 0, 1), (0, 1, 0)] () 

sequence:  [1, 2] 
 [(-1, 0, 1)] (A line in the direction (0, 1, 0),) 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(-1, 0, 1)] (A line in the direction (0, 1, 0),) 


sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: for v in sortables(A,c[1:]):
....:     print("sortable: ",v,"\n")
....:     for seq in Kbackwards(c[1:],v):
....:         P=p_lambda_cone(B(A,c),lam(A,v),[[c[0]]+seq])
....:         Q=p_lambda_cone(B(A,c),lam(A,v),[seq])
....:         R=P.intersection(Q)
....:         print("sequence: ",seq,"\n",sorted(list(map(vector,P.rays()))),P.l
....: ines(),"\n",sorted(list(map(vector,Q.rays()))),Q.lines(),"\n",sorted(list(
....: map(vector,R.rays()))),R.lines(),"\n")
....:     if input()=="q":
....:         break
....: 
sortable:  [1, 2, 1, 2] 

sequence:  [1, 2, 1, 2] 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(-1, 0, 1), (0, -1, 0)] () 
 [(-1, 0, 1), (0, -1, 0)] () 

sequence:  [1, 2, 1] 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(-1, 0, 1)] (A line in the direction (0, 1, 0),) 
 [(-1, 0, 1)] (A line in the direction (0, 1, 0),) 

sequence:  [1, 2, 1, 2, 1] 
 [(1, 0, -1)] (A line in the direction (0, 1, 0),) 
 [(0, -1, 0), (1, 0, -1)] () 
 [(0, -1, 0), (1, 0, -1)] () 

sequence:  [1, 2, 1, 2, 1, 2] 
 [(0, 1, 0), (1, 0, -1)] () 
 [(1, 0, -1)] (A line in the direction (0, 1, 0),) 
 [(0, 1, 0), (1, 0, -1)] () 


sortable:  [1, 2, 1] 

sequence:  [1, 2, 1] 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(-1, 0, 1)] (A line in the direction (0, 1, 0),) 
 [(-1, 0, 1)] (A line in the direction (0, 1, 0),) 

sequence:  [1, 2] 
 [(0, 1, 0)] (A line in the direction (1, 1, -1),) 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(0, 1, 0)] (A line in the direction (1, 1, -1),) 

sequence:  [1, 2, 1, 2] 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(-1, -2, 1), (0, -1, 0)] () 
 [(-1, -2, 1), (0, -1, 0)] () 

sequence:  [1, 2, 1, 2, 1] 
 [(1, 0, -1)] (A line in the direction (0, 1, 0),) 
 [(0, -1, 0), (1, 2, -1)] () 
 [(0, -1, 0), (1, 2, -1)] () 


sortable:  [1, 2] 

sequence:  [1, 2] 
 [(0, 1, 0)] (A line in the direction (1, 1, -1),) 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(0, 1, 0)] (A line in the direction (1, 1, -1),) 

sequence:  [1] 
 [(-1, 0, 1), (1, 1, -1)] () 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(-1, 0, 1), (1, 1, -1)] () 

sequence:  [1, 2, 1] 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(0, -1, 0)] (A line in the direction (1, 1, -1),) 
 [(0, -1, 0)] (A line in the direction (1, 1, -1),) 

sequence:  [1, 2, 1, 2] 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(-1, -2, 1), (1, 1, -1)] () 
 [(-1, -2, 1), (1, 1, -1)] () 


sortable:  [1] 

sequence:  [1] 
 [(-1, 0, 1), (1, 1, -1)] () 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(-1, 0, 1), (1, 1, -1)] () 

sequence:  [] 
 [(0, 1, 0), (1, 0, -1)] () 
 [(1, 0, -1)] (A line in the direction (0, 1, 0),) 
 [(0, 1, 0), (1, 0, -1)] () 

sequence:  [1, 2] 
 [(0, 1, 0)] (A line in the direction (1, 1, -1),) 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(0, 1, 0)] (A line in the direction (1, 1, -1),) 

sequence:  [1, 2, 1] 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(0, -1, 0)] (A line in the direction (1, 1, -1),) 
 [(0, -1, 0)] (A line in the direction (1, 1, -1),) 


sortable:  [2] 

sequence:  [2] 
 [(1, 0, -1)] (A line in the direction (0, 1, 0),) 
 [(0, -1, 0), (1, 0, -1)] () 
 [(0, -1, 0), (1, 0, -1)] () 

sequence:  [] 
 [(0, 1, 0), (1, 0, -1)] () 
 [(1, 0, -1)] (A line in the direction (0, 1, 0),) 
 [(0, 1, 0), (1, 0, -1)] () 

sequence:  [1, 2] 
 [(-1, 0, 1)] (A line in the direction (0, 1, 0),) 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(-1, 0, 1)] (A line in the direction (0, 1, 0),) 

sequence:  [1] 
 [(-1, 0, 1), (0, 1, 0)] () 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(-1, 0, 1), (0, 1, 0)] () 


sortable:  [] 

sequence:  [] 
 [(0, 1, 0), (1, 0, -1)] () 
 [(1, 0, -1)] (A line in the direction (0, 1, 0),) 
 [(0, 1, 0), (1, 0, -1)] () 

sequence:  [2] 
 [(1, 0, -1)] (A line in the direction (0, 1, 0),) 
 [(0, -1, 0), (1, 2, -1)] () 
 [(0, -1, 0), (1, 2, -1)] () 

sequence:  [1] 
 [(-1, 0, 1), (0, 1, 0)] () 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(-1, 0, 1), (0, 1, 0)] () 

sequence:  [1, 2] 
 [(-1, 0, 1)] (A line in the direction (0, 1, 0),) 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(-1, 0, 1)] (A line in the direction (0, 1, 0),) 


sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: for v in sortables(A,c[1:]):
....:     print("sortable: ",v,"\n")
....:     for seq in Kbackwards(c[1:],v):
....:         P=p_lambda_cone(B(A,c),lam(A,v),[[c[0]]+seq])
....:         Q=p_lambda_cone(B(A,c),lam(A,v),[seq])
....:         R=P.intersection(Q)
....:         print("sequence: ",seq,"\n",sorted(list(map(vector,P.rays()))),P.l
....: ines(),"\n",sorted(list(map(vector,Q.rays()))),Q.lines(),"\n",sorted(list(
....: map(vector,R.rays()))),R.lines(),"\n")
....:     if input()=="q":
....:         break
....: 
sortable:  [1, 2, 1, 2] 

sequence:  [1, 2, 1, 2] 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(-1, 0, 1), (0, -1, 0)] () 
 [(-1, 0, 1), (0, -1, 0)] () 

sequence:  [1, 2, 1] 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(-1, 0, 1)] (A line in the direction (0, 1, 0),) 
 [(-1, 0, 1)] (A line in the direction (0, 1, 0),) 

sequence:  [1, 2, 1, 2, 1] 
 [(1, 0, -1)] (A line in the direction (0, 1, 0),) 
 [(0, -1, 0), (1, 0, -1)] () 
 [(0, -1, 0), (1, 0, -1)] () 

sequence:  [1, 2, 1, 2, 1, 2] 
 [(0, 1, 0), (1, 0, -1)] () 
 [(1, 0, -1)] (A line in the direction (0, 1, 0),) 
 [(0, 1, 0), (1, 0, -1)] () 


sortable:  [1, 2, 1] 

sequence:  [1, 2, 1] 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(-1, 0, 1)] (A line in the direction (0, 1, 0),) 
 [(-1, 0, 1)] (A line in the direction (0, 1, 0),) 

sequence:  [1, 2] 
 [(0, 1, 0)] (A line in the direction (1, 1, -1),) 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(0, 1, 0)] (A line in the direction (1, 1, -1),) 

sequence:  [1, 2, 1, 2] 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(-1, -2, 1), (0, -1, 0)] () 
 [(-1, -2, 1), (0, -1, 0)] () 

sequence:  [1, 2, 1, 2, 1] 
 [(1, 0, -1)] (A line in the direction (0, 1, 0),) 
 [(0, -1, 0), (1, 2, -1)] () 
 [(0, -1, 0), (1, 2, -1)] () 


sortable:  [1, 2] 

sequence:  [1, 2] 
 [(0, 1, 0)] (A line in the direction (1, 1, -1),) 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(0, 1, 0)] (A line in the direction (1, 1, -1),) 

sequence:  [1] 
 [(-1, 0, 1), (1, 1, -1)] () 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(-1, 0, 1), (1, 1, -1)] () 

sequence:  [1, 2, 1] 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(0, -1, 0)] (A line in the direction (1, 1, -1),) 
 [(0, -1, 0)] (A line in the direction (1, 1, -1),) 

sequence:  [1, 2, 1, 2] 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(-1, -2, 1), (1, 1, -1)] () 
 [(-1, -2, 1), (1, 1, -1)] () 

q
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: for v in sortables(A,c[1:]):
....:     print("sortable: ",v,"\n")
....:     for seq in Kbackwards(c[1:],v):
....:         P=p_lambda_cone(B(A,c),lam(A,v),[[c[0]]+seq])
....:         Q=p_lambda_cone(B(A,c),lam(A,v),[seq])
....:         R=P.intersection(Q)
....:         print("sequence: ",seq,"\n",sorted(list(map(vector,P.rays()))),P.l
....: ines(),"\n",sorted(list(map(vector,Q.rays()))),Q.lines(),"\n",sorted(list(
....: map(vector,R.rays()))),R.lines(),"\n")
....:     if input()=="q":
....:         break
....: 
sortable:  [1, 2, 1, 2] 

sequence:  [1, 2, 1, 2] 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(-1, 0, 1), (0, -1, 0)] () 
 [(-1, 0, 1), (0, -1, 0)] () 

sequence:  [1, 2, 1] 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(-1, 0, 1)] (A line in the direction (0, 1, 0),) 
 [(-1, 0, 1)] (A line in the direction (0, 1, 0),) 

sequence:  [1, 2, 1, 2, 1] 
 [(1, 0, -1)] (A line in the direction (0, 1, 0),) 
 [(0, -1, 0), (1, 0, -1)] () 
 [(0, -1, 0), (1, 0, -1)] () 

sequence:  [1, 2, 1, 2, 1, 2] 
 [(0, 1, 0), (1, 0, -1)] () 
 [(1, 0, -1)] (A line in the direction (0, 1, 0),) 
 [(0, 1, 0), (1, 0, -1)] () 

q
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: for v in sortables(A,c[1:]):
....:     print("sortable: ",v,"\n")
....:     for seq in Kbackwards(c[1:],v):
....:         P=p_lambda_cone(B(A,c),lam(A,v),[[c[0]]+seq])
....:         Q=p_lambda_cone(B(A,c),lam(A,v),[seq])
....:         R=P.intersection(Q)
....:         Bprime=block_matrix([[B(A,c)[:,:c[0]],matrix(A.nrows(),1),B(A,c)[:
....: ,c[0]+1]]])
....:         S=p_lambda_cone(Bprime,lam(A,v),[seq])
....:         print("sequence: ",seq,"\n",sorted(list(map(vector,P.rays()))),P.l
....: ines(),"\n",sorted(list(map(vector,Q.rays()))),Q.lines(),"\n",sorted(list(
....: map(vector,R.rays()))),R.lines(),"\n")
....:     if input()=="q":
....:         break
....: 
sortable:  [1, 2, 1, 2] 

---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
Cell In [914], line 10
      8     R=P.intersection(Q)
      9     Bprime=block_matrix([[B(A,c)[:,:c[Integer(0)]],matrix(A.nrows(),Integer(1)),B(A,c)[:,c[Integer(0)]+Integer(1)]]])
---> 10     S=p_lambda_cone(Bprime,lam(A,v),[seq])
     11     print("sequence: ",seq,"\n",sorted(list(map(vector,P.rays()))),P.lines(),"\n",sorted(list(map(vector,Q.rays()))),Q.lines(),"\n",sorted(list(map(vector,R.rays()))),R.lines(),"\n")
     12 if input()=="q":

File ~/git/affine_dominance/software/domination4.py:184, in p_lambda_cone(B, la, seqs)
    183 def p_lambda_cone(B, la, seqs):
--> 184     P = cone_at(p_lambda_faster(B, la, seqs[0]),la)
    185     for s in seqs:
    186         P = P.intersection(cone_at(p_lambda_faster(B, la, s),la))

File ~/git/affine_dominance/software/domination4.py:141, in p_lambda_faster(B, la, seq)
    139     B.mutate(k)
    140 B, la  = B[:,:-1], B[:,-1] 
--> 141 P = Polyhedron(rays=B.columns(),base_ring=QQ).translation(la)
    142 #print("P:   ",P,P.vertices(),P.rays(),P.lines(),"\n")
    143 for k in reversed(seq):

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/constructor.py:768, in Polyhedron(vertices, rays, lines, ieqs, eqns, ambient_dim, base_ring, minimize, verbose, backend, mutable)
    766 if got_Vrep:
    767     Vrep = [vertices, rays, lines]
--> 768 return parent(Vrep, Hrep, convert=convert, verbose=verbose, mutable=mutable)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/parent.pyx:903, in sage.structure.parent.Parent.__call__ (build/cythonized/sage/structure/parent.c:12685)()
    901         return mor._call_(x)
    902     else:
--> 903         return mor._call_with_args(x, args, kwds)
    904 
    905 raise TypeError(_LazyString("No conversion defined from %s to %s", (R, self), {}))

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:182, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_with_args (build/cythonized/sage/structure/coerce_maps.c:7540)()
    180     print(type(C), C)
    181     print(type(C._element_constructor), C._element_constructor)
--> 182 raise
    183 
    184 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:177, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_with_args (build/cythonized/sage/structure/coerce_maps.c:7430)()
    175             return C._element_constructor(x, *args)
    176         else:
--> 177             return C._element_constructor(x, *args, **kwds)
    178 except Exception:
    179     if print_warnings:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:695, in Polyhedra_base._element_constructor_(self, *args, **kwds)
    693     if convert and Vrep:
    694         Vrep = [convert_base_ring(_) for _ in Vrep]
--> 695     return self.element_class(self, Vrep, Hrep, **kwds)
    696 if nargs == 1 and is_Polyhedron(args[0]):
    697     copy = kwds.pop('copy', args[0].parent() is not self)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:174, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    171     lines = tuple(lines)
    173 if vertices or rays or lines:
--> 174     self._init_from_Vrepresentation(vertices, rays, lines, **kwds)
    175 else:
    176     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:99, in Polyhedron_ppl._init_from_Vrepresentation(self, vertices, rays, lines, minimize, verbose)
     72 def _init_from_Vrepresentation(self, vertices, rays, lines, minimize=True, verbose=False):
     73     """
     74     Construct polyhedron from V-representation data.
     75 
   (...)
     97         sage: Polyhedron_ppl._init_from_Vrepresentation(p, [], [], [])
     98     """
---> 99     gs = self._convert_generators_to_ppl(vertices, rays, lines)
    100     if gs.empty():
    101         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'empty')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:477, in Polyhedron_ppl._convert_generators_to_ppl(vertices, rays, lines)
    475     rays = []
    476 for r in rays:
--> 477     gs.insert(Polyhedron_ppl._convert_generator_to_ppl(r, RAY))
    478 if lines is None:
    479     lines = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:442, in Polyhedron_ppl._convert_generator_to_ppl(v, typ)
    440 d = LCM_list([denominator(v_i) for v_i in v])
    441 if d.is_one():
--> 442     return ob(Linear_Expression(v, 0))
    443 else:
    444     dv = [ d*v_i for v_i in v ]

File ppl/generator.pyx:205, in ppl.generator.Generator.ray()

File ppl/generator.pyx:201, in ppl.generator.Generator.ray()

ValueError: PPL::ray(e):
e == 0, but the origin cannot be a ray.
sage: block_matrix([[B(A,c)[:,:c[0]],matrix(A.nrows(),1),B(A,c)[:,c[0]+1]]])
[| 0| 1]
[| 0| 0]
[| 0|-1]
sage: A
[ 2 -1  0]
[-1  2 -2]
[ 0 -1  2]
sage: c
[0, 1, 2]
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: for v in sortables(A,c[1:]):
....:     print("sortable: ",v,"\n")
....:     for seq in Kbackwards(c[1:],v):
....:         P=p_lambda_cone(B(A,c),lam(A,v),[[c[0]]+seq])
....:         Q=p_lambda_cone(B(A,c),lam(A,v),[seq])
....:         R=P.intersection(Q)
....:         Bprime=B(A,c)
....:         Bprime.setcolumn(c[0],[0]*A.nrows())
....:         S=p_lambda_cone(Bprime,lam(A,v),[seq])
....:         print("sequence: ",seq,"\n",sorted(list(map(vector,P.rays()))),P.l
....: ines(),"\n",sorted(list(map(vector,Q.rays()))),Q.lines(),"\n",sorted(list(
....: map(vector,R.rays()))),R.lines(),"\n")
....:     if input()=="q":
....:         break
....: 
sortable:  [1, 2, 1, 2] 

---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
Cell In [918], line 10
      8 R=P.intersection(Q)
      9 Bprime=B(A,c)
---> 10 Bprime.setcolumn(c[Integer(0)],[Integer(0)]*A.nrows())
     11 S=p_lambda_cone(Bprime,lam(A,v),[seq])
     12 print("sequence: ",seq,"\n",sorted(list(map(vector,P.rays()))),P.lines(),"\n",sorted(list(map(vector,Q.rays()))),Q.lines(),"\n",sorted(list(map(vector,R.rays()))),R.lines(),"\n")

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:489, in sage.structure.element.Element.__getattr__ (build/cythonized/sage/structure/element.c:11576)()
    487         AttributeError: 'LeftZeroSemigroup_with_category.element_class' object has no attribute 'blah_blah'...
    488     """
--> 489     return self.getattr_from_category(name)
    490 
    491 cdef getattr_from_category(self, name) noexcept:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:502, in sage.structure.element.Element.getattr_from_category (build/cythonized/sage/structure/element.c:11686)()
    500     else:
    501         cls = P._abstract_element_class
--> 502     return getattr_from_other_class(self, cls, name)
    503 
    504 def __dir__(self):

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/cpython/getattr.pyx:362, in sage.cpython.getattr.getattr_from_other_class (build/cythonized/sage/cpython/getattr.c:4424)()
    360     dummy_error_message.cls = type(self)
    361     dummy_error_message.name = name
--> 362     raise AttributeError(dummy_error_message)
    363 attribute = <object>attr
    364 # Check for a descriptor (__get__ in Python)

AttributeError: 'sage.matrix.matrix_integer_dense.Matrix_integer_dense' object has no attribute 'setcolumn'
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: for v in sortables(A,c[1:]):
....:     print("sortable: ",v,"\n")
....:     for seq in Kbackwards(c[1:],v):
....:         P=p_lambda_cone(B(A,c),lam(A,v),[[c[0]]+seq])
....:         Q=p_lambda_cone(B(A,c),lam(A,v),[seq])
....:         R=P.intersection(Q)
....:         Bprime=B(A,c)
....:         Bprime.set_column(c[0],[0]*A.nrows())
....:         S=p_lambda_cone(Bprime,lam(A,v),[seq])
....:         print("sequence: ",seq,"\n",sorted(list(map(vector,P.rays()))),P.l
....: ines(),"\n",sorted(list(map(vector,Q.rays()))),Q.lines(),"\n",sorted(list(
....: map(vector,R.rays()))),R.lines(),"\n")
....:     if input()=="q":
....:         break
sortable:  [1, 2, 1, 2] 

---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
Cell In [919], line 11
      9     Bprime=B(A,c)
     10     Bprime.set_column(c[Integer(0)],[Integer(0)]*A.nrows())
---> 11     S=p_lambda_cone(Bprime,lam(A,v),[seq])
     12     print("sequence: ",seq,"\n",sorted(list(map(vector,P.rays()))),P.lines(),"\n",sorted(list(map(vector,Q.rays()))),Q.lines(),"\n",sorted(list(map(vector,R.rays()))),R.lines(),"\n")
     13 if input()=="q":

File ~/git/affine_dominance/software/domination4.py:184, in p_lambda_cone(B, la, seqs)
    183 def p_lambda_cone(B, la, seqs):
--> 184     P = cone_at(p_lambda_faster(B, la, seqs[0]),la)
    185     for s in seqs:
    186         P = P.intersection(cone_at(p_lambda_faster(B, la, s),la))

File ~/git/affine_dominance/software/domination4.py:141, in p_lambda_faster(B, la, seq)
    139     B.mutate(k)
    140 B, la  = B[:,:-1], B[:,-1] 
--> 141 P = Polyhedron(rays=B.columns(),base_ring=QQ).translation(la)
    142 #print("P:   ",P,P.vertices(),P.rays(),P.lines(),"\n")
    143 for k in reversed(seq):

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/constructor.py:768, in Polyhedron(vertices, rays, lines, ieqs, eqns, ambient_dim, base_ring, minimize, verbose, backend, mutable)
    766 if got_Vrep:
    767     Vrep = [vertices, rays, lines]
--> 768 return parent(Vrep, Hrep, convert=convert, verbose=verbose, mutable=mutable)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/parent.pyx:903, in sage.structure.parent.Parent.__call__ (build/cythonized/sage/structure/parent.c:12685)()
    901         return mor._call_(x)
    902     else:
--> 903         return mor._call_with_args(x, args, kwds)
    904 
    905 raise TypeError(_LazyString("No conversion defined from %s to %s", (R, self), {}))

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:182, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_with_args (build/cythonized/sage/structure/coerce_maps.c:7540)()
    180     print(type(C), C)
    181     print(type(C._element_constructor), C._element_constructor)
--> 182 raise
    183 
    184 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:177, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_with_args (build/cythonized/sage/structure/coerce_maps.c:7430)()
    175             return C._element_constructor(x, *args)
    176         else:
--> 177             return C._element_constructor(x, *args, **kwds)
    178 except Exception:
    179     if print_warnings:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:695, in Polyhedra_base._element_constructor_(self, *args, **kwds)
    693     if convert and Vrep:
    694         Vrep = [convert_base_ring(_) for _ in Vrep]
--> 695     return self.element_class(self, Vrep, Hrep, **kwds)
    696 if nargs == 1 and is_Polyhedron(args[0]):
    697     copy = kwds.pop('copy', args[0].parent() is not self)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:174, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    171     lines = tuple(lines)
    173 if vertices or rays or lines:
--> 174     self._init_from_Vrepresentation(vertices, rays, lines, **kwds)
    175 else:
    176     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:99, in Polyhedron_ppl._init_from_Vrepresentation(self, vertices, rays, lines, minimize, verbose)
     72 def _init_from_Vrepresentation(self, vertices, rays, lines, minimize=True, verbose=False):
     73     """
     74     Construct polyhedron from V-representation data.
     75 
   (...)
     97         sage: Polyhedron_ppl._init_from_Vrepresentation(p, [], [], [])
     98     """
---> 99     gs = self._convert_generators_to_ppl(vertices, rays, lines)
    100     if gs.empty():
    101         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'empty')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:477, in Polyhedron_ppl._convert_generators_to_ppl(vertices, rays, lines)
    475     rays = []
    476 for r in rays:
--> 477     gs.insert(Polyhedron_ppl._convert_generator_to_ppl(r, RAY))
    478 if lines is None:
    479     lines = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:442, in Polyhedron_ppl._convert_generator_to_ppl(v, typ)
    440 d = LCM_list([denominator(v_i) for v_i in v])
    441 if d.is_one():
--> 442     return ob(Linear_Expression(v, 0))
    443 else:
    444     dv = [ d*v_i for v_i in v ]

File ppl/generator.pyx:205, in ppl.generator.Generator.ray()

File ppl/generator.pyx:201, in ppl.generator.Generator.ray()

ValueError: PPL::ray(e):
e == 0, but the origin cannot be a ray.
### reloading attached file domination4.py modified at 13:55:22 ###
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: for v in sortables(A,c[1:]):
....:     print("sortable: ",v,"\n")
....:     for seq in Kbackwards(c[1:],v):
....:         P=p_lambda_cone(B(A,c),lam(A,v),[[c[0]]+seq])
....:         Q=p_lambda_cone(B(A,c),lam(A,v),[seq])
....:         R=P.intersection(Q)
....:         Bprime=B(A,c)
....:         Bprime.set_column(c[0],[0]*A.nrows())
....:         S=p_lambda_cone(Bprime,lam(A,v),[seq])
....:         print("sequence: ",seq,"\n",sorted(list(map(vector,P.rays()))),P.l
....: ines(),"\n",sorted(list(map(vector,Q.rays()))),Q.lines(),"\n",sorted(list(
....: map(vector,R.rays()))),R.lines(),"\n")
....:     if input()=="q":
....:         break
....: 
sortable:  [1, 2, 1, 2] 

sequence:  [1, 2, 1, 2] 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(-1, 0, 1), (0, -1, 0)] () 
 [(-1, 0, 1), (0, -1, 0)] () 

sequence:  [1, 2, 1] 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(-1, 0, 1)] (A line in the direction (0, 1, 0),) 
 [(-1, 0, 1)] (A line in the direction (0, 1, 0),) 

sequence:  [1, 2, 1, 2, 1] 
 [(1, 0, -1)] (A line in the direction (0, 1, 0),) 
 [(0, -1, 0), (1, 0, -1)] () 
 [(0, -1, 0), (1, 0, -1)] () 

sequence:  [1, 2, 1, 2, 1, 2] 
 [(0, 1, 0), (1, 0, -1)] () 
 [(1, 0, -1)] (A line in the direction (0, 1, 0),) 
 [(0, 1, 0), (1, 0, -1)] () 

q
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: for v in sortables(A,c[1:]):
....:     print("sortable: ",v,"\n")
....:     for seq in Kbackwards(c[1:],v):
....:         P=p_lambda_cone(B(A,c),lam(A,v),[[c[0]]+seq])
....:         Q=p_lambda_cone(B(A,c),lam(A,v),[seq])
....:         R=P.intersection(Q)
....:         Bprime=B(A,c)
....:         Bprime.set_column(c[0],[0]*A.nrows())
....:         S=p_lambda_cone(Bprime,lam(A,v),[seq])
....:         print("sequence: ",seq,"\n",sorted(list(map(vector,P.rays()))),P.l
....: ines(),"\n",sorted(list(map(vector,Q.rays()))),Q.lines(),"\n",sorted(list(
....: map(vector,R.rays()))),R.lines(),"\n",sorted(list(
....: ....: map(vector,S.rays()))),S.lines(),"\n")
....:     if input()=="q":
....:         break
  Cell In [921], line 13
    Ellipsis.: map(vector,S.rays()))),S.lines(),"\n")
             ^
SyntaxError: invalid syntax

sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: for v in sortables(A,c[1:]):
....:     print("sortable: ",v,"\n")
....:     for seq in Kbackwards(c[1:],v):
....:         P=p_lambda_cone(B(A,c),lam(A,v),[[c[0]]+seq])
....:         Q=p_lambda_cone(B(A,c),lam(A,v),[seq])
....:         R=P.intersection(Q)
....:         Bprime=B(A,c)
....:         Bprime.set_column(c[0],[0]*A.nrows())
....:         S=p_lambda_cone(Bprime,lam(A,v),[seq])
....:         print("sequence: ",seq,"\n",sorted(list(map(vector,P.rays()))),P.l
....: ines(),"\n",sorted(list(map(vector,Q.rays()))),Q.lines(),"\n",sorted(list(
....: map(vector,R.rays()))),R.lines(),"\n",sorted(list(map(vector,S.rays()))),S
....: .lines(),"\n")
....:     if input()=="q":
....:         break
....: 
sortable:  [1, 2, 1, 2] 

sequence:  [1, 2, 1, 2] 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(-1, 0, 1), (0, -1, 0)] () 
 [(-1, 0, 1), (0, -1, 0)] () 
 [(-1, 0, 1), (0, -1, 0)] () 

sequence:  [1, 2, 1] 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(-1, 0, 1)] (A line in the direction (0, 1, 0),) 
 [(-1, 0, 1)] (A line in the direction (0, 1, 0),) 
 [(-1, -2, 1), (0, 1, 0)] () 

sequence:  [1, 2, 1, 2, 1] 
 [(1, 0, -1)] (A line in the direction (0, 1, 0),) 
 [(0, -1, 0), (1, 0, -1)] () 
 [(0, -1, 0), (1, 0, -1)] () 
 [(0, -1, 0), (1, 0, -1)] () 

sequence:  [1, 2, 1, 2, 1, 2] 
 [(0, 1, 0), (1, 0, -1)] () 
 [(1, 0, -1)] (A line in the direction (0, 1, 0),) 
 [(0, 1, 0), (1, 0, -1)] () 
 [(0, 1, 0), (1, 0, -1)] () 


sortable:  [1, 2, 1] 

sequence:  [1, 2, 1] 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(-1, 0, 1)] (A line in the direction (0, 1, 0),) 
 [(-1, 0, 1)] (A line in the direction (0, 1, 0),) 
 [(-1, -2, 1), (0, 1, 0)] () 

sequence:  [1, 2] 
 [(0, 1, 0)] (A line in the direction (1, 1, -1),) 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(0, 1, 0)] (A line in the direction (1, 1, -1),) 
 [(-1, -1, 1), (1, 2, -1)] () 

sequence:  [1, 2, 1, 2] 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(-1, -2, 1), (0, -1, 0)] () 
 [(-1, -2, 1), (0, -1, 0)] () 
 [(-1, -2, 1), (0, -1, 0)] () 

sequence:  [1, 2, 1, 2, 1] 
 [(1, 0, -1)] (A line in the direction (0, 1, 0),) 
 [(0, -1, 0), (1, 2, -1)] () 
 [(0, -1, 0), (1, 2, -1)] () 
 [(0, -1, 0), (1, 2, -1)] () 


sortable:  [1, 2] 

sequence:  [1, 2] 
 [(0, 1, 0)] (A line in the direction (1, 1, -1),) 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(0, 1, 0)] (A line in the direction (1, 1, -1),) 
 [(-1, -1, 1), (1, 2, -1)] () 

sequence:  [1] 
 [(-1, 0, 1), (1, 1, -1)] () 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(-1, 0, 1), (1, 1, -1)] () 
 [(-1, 0, 1), (1, 1, -1)] () 

sequence:  [1, 2, 1] 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(0, -1, 0)] (A line in the direction (1, 1, -1),) 
 [(0, -1, 0)] (A line in the direction (1, 1, -1),) 
 [(-1, -2, 1), (-1, -1, 1)] () 

sequence:  [1, 2, 1, 2] 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(-1, -2, 1), (1, 1, -1)] () 
 [(-1, -2, 1), (1, 1, -1)] () 
 [(-1, -2, 1), (1, 1, -1)] () 

q
sage: B(A,c)
[ 0  1  0]
[-1  0  2]
[ 0 -1  0]
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: for v in sortables(A,c[1:]):
....:     print("sortable: ",v,"\n")
....:     for seq in sortables(A,c[1:]):
....:         P=p_lambda_cone(B(A,c),lam(A,v),[[c[0]]+seq])
....:         Q=p_lambda_cone(B(A,c),lam(A,v),[seq])
....:         R=P.intersection(Q)
....:         Bprime=B(A,c)
....:         Bprime.set_column(c[0],[0]*A.nrows())
....:         S=p_lambda_cone(Bprime,lam(A,v),[seq])
....:         print("sequence: ",seq,"\n",sorted(list(map(vector,P.rays()))),P.l
....: ines(),"\n",sorted(list(map(vector,Q.rays()))),Q.lines(),"\n",sorted(list(
....: map(vector,R.rays()))),R.lines(),"\n",sorted(list(map(vector,S.rays()))),S
....: .lines(),"\n")
....:     if input()=="q":
....:         break
....: 
sortable:  [1, 2, 1, 2] 

sequence:  [1, 2, 1, 2] 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(-1, 0, 1), (0, -1, 0)] () 
 [(-1, 0, 1), (0, -1, 0)] () 
 [(-1, 0, 1), (0, -1, 0)] () 

sequence:  [1, 2, 1] 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(-1, 0, 1)] (A line in the direction (0, 1, 0),) 
 [(-1, 0, 1)] (A line in the direction (0, 1, 0),) 
 [(-1, -2, 1), (0, 1, 0)] () 

sequence:  [1, 2] 
 [(0, 1, 0)] (A line in the direction (1, 1, -1),) 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(0, 1, 0)] (A line in the direction (1, 1, -1),) 
 [(-1, -1, 1), (1, 2, -1)] () 

sequence:  [1] 
 [(-1, 0, 1), (1, 1, -1)] () 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(-1, 0, 1), (1, 1, -1)] () 
 [(-1, 0, 1), (1, 1, -1)] () 

sequence:  [2] 
 [(1, 0, -1)] (A line in the direction (0, 1, 0),) 
 [(0, -1, 0), (1, 0, -1)] () 
 [(0, -1, 0), (1, 0, -1)] () 
 [(0, -1, 0), (1, 0, -1)] () 

sequence:  [] 
 [(0, 1, 0), (1, 0, -1)] () 
 [(1, 0, -1)] (A line in the direction (0, 1, 0),) 
 [(0, 1, 0), (1, 0, -1)] () 
 [(0, 1, 0), (1, 0, -1)] () 


sortable:  [1, 2, 1] 

sequence:  [1, 2, 1, 2] 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(-1, -2, 1), (0, -1, 0)] () 
 [(-1, -2, 1), (0, -1, 0)] () 
 [(-1, -2, 1), (0, -1, 0)] () 

sequence:  [1, 2, 1] 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(-1, 0, 1)] (A line in the direction (0, 1, 0),) 
 [(-1, 0, 1)] (A line in the direction (0, 1, 0),) 
 [(-1, -2, 1), (0, 1, 0)] () 

sequence:  [1, 2] 
 [(0, 1, 0)] (A line in the direction (1, 1, -1),) 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(0, 1, 0)] (A line in the direction (1, 1, -1),) 
 [(-1, -1, 1), (1, 2, -1)] () 

sequence:  [1] 
 [(-1, 0, 1), (1, 1, -1)] () 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(-1, 0, 1), (1, 1, -1)] () 
 [(-1, 0, 1), (1, 1, -1)] () 

sequence:  [2] 
 [(1, 0, -1)] (A line in the direction (0, 1, 0),) 
 [(0, -1, 0), (1, 2, -1)] () 
 [(0, -1, 0), (1, 2, -1)] () 
 [(0, -1, 0), (1, 2, -1)] () 

sequence:  [] 
 [(0, 1, 0), (1, 0, -1)] () 
 [(1, 0, -1)] (A line in the direction (0, 1, 0),) 
 [(0, 1, 0), (1, 0, -1)] () 
 [(0, 1, 0), (1, 0, -1)] () 


sortable:  [1, 2] 

sequence:  [1, 2, 1, 2] 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(-1, -2, 1), (1, 1, -1)] () 
 [(-1, -2, 1), (1, 1, -1)] () 
 [(-1, -2, 1), (1, 1, -1)] () 

sequence:  [1, 2, 1] 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(0, -1, 0)] (A line in the direction (1, 1, -1),) 
 [(0, -1, 0)] (A line in the direction (1, 1, -1),) 
 [(-1, -2, 1), (-1, -1, 1)] () 

sequence:  [1, 2] 
 [(0, 1, 0)] (A line in the direction (1, 1, -1),) 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(0, 1, 0)] (A line in the direction (1, 1, -1),) 
 [(-1, -1, 1), (1, 2, -1)] () 

sequence:  [1] 
 [(-1, 0, 1), (1, 1, -1)] () 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(-1, 0, 1), (1, 1, -1)] () 
 [(-1, 0, 1), (1, 1, -1)] () 

sequence:  [2] 
 [(1, 0, -1)] (A line in the direction (0, 1, 0),) 
 [(0, -1, 0), (1, 2, -1)] () 
 [(0, -1, 0), (1, 2, -1)] () 
 [(0, -1, 0), (1, 2, -1)] () 

sequence:  [] 
 [(0, 1, 0), (1, 0, -1)] () 
 [(1, 0, -1)] (A line in the direction (0, 1, 0),) 
 [(0, 1, 0), (1, 0, -1)] () 
 [(0, 1, 0), (1, 0, -1)] () 

q
sage: B(A,c)
[ 0  1  0]
[-1  0  2]
[ 0 -1  0]
sage: lam(A,[1,2])
(4, -3, 2)
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: for v in sortables(A,c[1:]):
....:     print("sortable: ",v,"\n")
....:     for seq in sortables(A,c[1:]):
....:         P=p_lambda_cone(B(A,c),lam(A,v),[seq])
....:         Q=p_lambda_cone(B(A,c),lam(A,v),[[c[0]]+seq])
....:         R=P.intersection(Q)
....:         Bprime=B(A,c)
....:         Bprime.set_column(c[0],[0]*A.nrows())
....:         S=p_lambda_cone(Bprime,lam(A,v),[seq])
....:         print("sequence: ",seq,"\n",sorted(list(map(vector,P.rays()))),P.l
....: ines(),"\n",sorted(list(map(vector,Q.rays()))),Q.lines(),"\n",sorted(list(
....: map(vector,R.rays()))),R.lines(),"\n",sorted(list(map(vector,S.rays()))),S
....: .lines(),"\n")
....:     if input()=="q":
....:         break
....: 
sortable:  [1, 2, 1, 2] 

sequence:  [1, 2, 1, 2] 
 [(-1, 0, 1), (0, -1, 0)] () 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(-1, 0, 1), (0, -1, 0)] () 
 [(-1, 0, 1), (0, -1, 0)] () 

sequence:  [1, 2, 1] 
 [(-1, 0, 1)] (A line in the direction (0, 1, 0),) 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(-1, 0, 1)] (A line in the direction (0, 1, 0),) 
 [(-1, -2, 1), (0, 1, 0)] () 

sequence:  [1, 2] 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(0, 1, 0)] (A line in the direction (1, 1, -1),) 
 [(0, 1, 0)] (A line in the direction (1, 1, -1),) 
 [(-1, -1, 1), (1, 2, -1)] () 

sequence:  [1] 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(-1, 0, 1), (1, 1, -1)] () 
 [(-1, 0, 1), (1, 1, -1)] () 
 [(-1, 0, 1), (1, 1, -1)] () 

sequence:  [2] 
 [(0, -1, 0), (1, 0, -1)] () 
 [(1, 0, -1)] (A line in the direction (0, 1, 0),) 
 [(0, -1, 0), (1, 0, -1)] () 
 [(0, -1, 0), (1, 0, -1)] () 

sequence:  [] 
 [(1, 0, -1)] (A line in the direction (0, 1, 0),) 
 [(0, 1, 0), (1, 0, -1)] () 
 [(0, 1, 0), (1, 0, -1)] () 
 [(0, 1, 0), (1, 0, -1)] () 


sortable:  [1, 2, 1] 

sequence:  [1, 2, 1, 2] 
 [(-1, -2, 1), (0, -1, 0)] () 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(-1, -2, 1), (0, -1, 0)] () 
 [(-1, -2, 1), (0, -1, 0)] () 

sequence:  [1, 2, 1] 
 [(-1, 0, 1)] (A line in the direction (0, 1, 0),) 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(-1, 0, 1)] (A line in the direction (0, 1, 0),) 
 [(-1, -2, 1), (0, 1, 0)] () 

sequence:  [1, 2] 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(0, 1, 0)] (A line in the direction (1, 1, -1),) 
 [(0, 1, 0)] (A line in the direction (1, 1, -1),) 
 [(-1, -1, 1), (1, 2, -1)] () 

sequence:  [1] 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(-1, 0, 1), (1, 1, -1)] () 
 [(-1, 0, 1), (1, 1, -1)] () 
 [(-1, 0, 1), (1, 1, -1)] () 

sequence:  [2] 
 [(0, -1, 0), (1, 2, -1)] () 
 [(1, 0, -1)] (A line in the direction (0, 1, 0),) 
 [(0, -1, 0), (1, 2, -1)] () 
 [(0, -1, 0), (1, 2, -1)] () 

sequence:  [] 
 [(1, 0, -1)] (A line in the direction (0, 1, 0),) 
 [(0, 1, 0), (1, 0, -1)] () 
 [(0, 1, 0), (1, 0, -1)] () 
 [(0, 1, 0), (1, 0, -1)] () 


sortable:  [1, 2] 

sequence:  [1, 2, 1, 2] 
 [(-1, -2, 1), (1, 1, -1)] () 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(-1, -2, 1), (1, 1, -1)] () 
 [(-1, -2, 1), (1, 1, -1)] () 

sequence:  [1, 2, 1] 
 [(0, -1, 0)] (A line in the direction (1, 1, -1),) 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(0, -1, 0)] (A line in the direction (1, 1, -1),) 
 [(-1, -2, 1), (-1, -1, 1)] () 

sequence:  [1, 2] 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(0, 1, 0)] (A line in the direction (1, 1, -1),) 
 [(0, 1, 0)] (A line in the direction (1, 1, -1),) 
 [(-1, -1, 1), (1, 2, -1)] () 

sequence:  [1] 
 [] (A line in the direction (0, 1, 0), A line in the direction (1, 0, -1)) 
 [(-1, 0, 1), (1, 1, -1)] () 
 [(-1, 0, 1), (1, 1, -1)] () 
 [(-1, 0, 1), (1, 1, -1)] () 

sequence:  [2] 
 [(0, -1, 0), (1, 2, -1)] () 
 [(1, 0, -1)] (A line in the direction (0, 1, 0),) 
 [(0, -1, 0), (1, 2, -1)] () 
 [(0, -1, 0), (1, 2, -1)] () 

sequence:  [] 
 [(1, 0, -1)] (A line in the direction (0, 1, 0),) 
 [(0, 1, 0), (1, 0, -1)] () 
 [(0, 1, 0), (1, 0, -1)] () 
 [(0, 1, 0), (1, 0, -1)] () 

q
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: for v in sortables(A,c[1:]):
....:     print("sortable: ",v,"\n")
....:     for seq in sortables(A,c[1:]):
....:         P=p_lambda_cone(B(A,c),lam(A,v),[seq])
....:         Q=p_lambda_cone(B(A,c),lam(A,v),[[c[0]]+seq])
....:         R=P.intersection(Q)
....:         Bprime=B(A,c)
....:         Bprime.set_column(c[0],[0]*A.nrows())
....:         S=p_lambda_cone(Bprime,lam(A,v),[seq])
....:         print("sequence: ",seq,"\n",sorted(list(map(vector,P.rays()))),P.l
....: ines(),"\n",sorted(list(map(vector,Q.rays()))),Q.lines(),"\n",sorted(list(
....: map(vector,R.rays()))),R.lines(),"\n",sorted(list(map(vector,S.rays()))),S
....: .lines(),"\n")
....:     if input()=="q":
....:         break
sortable:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 
 [(-1, 0, 1, 0, 0), (0, -1, 0, 1, 0), (0, 0, -1, 0, 1), (0, 0, 0, -1, 0)] () 
 [(-1, 0, 0, 0, 1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 
 [(-1, 0, 1, 0, 0), (0, -1, 0, 1, 0), (0, 0, -1, 0, 1), (0, 0, 0, -1, 0)] () 
 [(-1, 0, 1, 0, 0), (0, -1, 0, 1, 0), (0, 0, -1, 0, 1), (0, 0, 0, -1, 0)] () 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 
 [(-1, 0, 1, 0, 0), (0, -1, 0, 0, 0), (0, 0, -1, -2, 1), (0, 0, 0, 1, 0)] () 
 [(-1, 0, 1, 0, 0), (0, -1, 0, 1, 0), (0, 0, -1, -2, 1), (1, 1, -1, 0, 0)] () 
 [(-1, 0, 1, 0, 0), (0, -1, 0, 1, 0), (0, 0, -1, -2, 1), (0, 0, 0, 1, 0)] () 
 [(-1, 0, 1, 0, 0), (0, -1, 0, 1, 0), (0, 0, -1, -2, 1), (0, 0, 0, 1, 0)] () 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 
 [(-1, 0, 1, 0, 0), (0, -1, 0, 0, 0), (0, 0, -1, -1, 1), (0, 0, 1, 2, -1)] () 
 [(-1, 0, 1, 0, 0), (0, -1, -1, -1, 1), (0, 0, 1, 2, -1), (1, 1, -1, 0, 0)] () 
 [(-1, 0, 1, 0, 0), (0, -1, -1, -1, 1), (0, 0, -1, -1, 1), (0, 0, 1, 2, -1)] () 
 [(-1, 0, 1, 0, 0), (0, -1, -1, -1, 1), (0, 0, -1, -1, 1), (0, 0, 1, 2, -1)] () 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1] 
 [(-1, 0, 0, -1, 1), (0, 0, 0, 1, 0)] (A line in the direction (0, 1, 0, 0, 0), A line in the direction (0, 0, 1, 1, -1)) 
 [(-1, -1, 0, -1, 1), (0, -1, 0, 1, 0), (0, 1, 1, 1, -1), (1, 1, -1, 0, 0)] () 
 [(-1, -1, 0, -1, 1), (0, -1, 0, 1, 0), (0, 0, -1, -1, 1), (0, 1, 1, 1, -1)] () 
 [(-1, -1, 0, -1, 1), (0, -1, 0, 1, 0), (0, 0, -1, -1, 1), (0, 1, 1, 1, -1)] () 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 
 [(0, 0, 0, 1, 0)] (A line in the direction (0, 0, 1, 1, -1), A line in the direction (1, 0, 0, 1, -1), A line in the direction (0, 1, 0, 0, 0)) 
 [(-1, 0, 1, 0, 0), (0, -1, 0, 1, 0), (0, 0, -1, -1, 1), (1, 1, 0, 1, -1)] () 
 [(-1, 0, 1, 0, 0), (0, -1, 0, 1, 0), (0, 0, -1, -1, 1), (1, 1, 0, 1, -1)] () 
 [(-1, 0, 1, 0, 0), (0, -1, 0, 1, 0), (0, 0, -1, -1, 1), (1, 1, 0, 1, -1)] () 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2] 
 [(-1, 0, 1, 0, 0), (0, -1, -1, -1, 1), (0, 0, -1, 0, 1), (0, 0, 1, 1, -1)] () 
 [(0, 0, 0, 1, 0)] (A line in the direction (0, 0, 1, 1, -1), A line in the direction (1, 0, 0, 1, -1), A line in the direction (0, 1, 0, 0, 0)) 
 [(-1, 0, 1, 0, 0), (0, -1, -1, -1, 1), (0, 0, -1, 0, 1), (0, 0, 1, 1, -1)] () 
 [(-1, 0, 1, 0, 0), (0, -1, -1, -1, 1), (0, 0, -1, 0, 1), (0, 0, 1, 1, -1)] () 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1] 
 [(-1, -1, 0, -1, 1), (0, -1, -2, -1, 2), (0, -1, 0, 0, 0), (0, 1, 1, 1, -1)] () 
 [(-1, 0, 0, -1, 1), (1, 0, 0, 2, -1)] (A line in the direction (0, 0, 1, 1, -1), A line in the direction (1, 1, 0, 1, -1)) 
 [(-1, -1, 0, -1, 1), (0, -1, -2, -1, 2), (0, 0, 1, 1, -1), (0, 1, 1, 1, -1)] () 
 [(-1, -1, 0, -1, 1), (0, -1, -2, -1, 2), (0, 0, 1, 1, -1), (0, 1, 1, 1, -1)] () 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 
 [(-1, 0, 1, 0, 0), (0, -1, -2, -1, 2), (0, -1, 0, 0, 0), (1, 1, 0, 1, -1)] () 
 [(-1, 0, 1, 0, 0), (0, -1, -2, -1, 2), (0, 0, 1, 1, -1), (1, 1, -1, 0, 0)] () 
 [(-1, 0, 1, 0, 0), (0, -1, -2, -1, 2), (0, 0, 1, 1, -1), (1, 1, 0, 1, -1)] () 
 [(-1, 0, 1, 0, 0), (0, -1, -2, -1, 2), (0, 0, 1, 1, -1), (1, 1, 0, 1, -1)] () 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1] 
 [(-1, -1, 0, -1, 1), (0, -1, 0, 0, 0), (0, 0, -1, 0, 1), (0, 1, 2, 1, -2)] () 
 [(0, 0, 0, 1, 0)] (A line in the direction (0, 0, 1, 1, -1), A line in the direction (1, 0, 0, 2, -1), A line in the direction (0, 1, 0, -1, 0)) 
 [(-1, -1, 0, -1, 1), (0, -1, -1, 0, 1), (0, 0, -1, 0, 1), (0, 1, 2, 1, -2)] () 
 [(-1, -1, 0, -1, 1), (0, -1, -1, 0, 1), (0, 0, -1, 0, 1), (0, 1, 2, 1, -2)] () 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 
 [(-1, -1, -1, -1, 2), (0, -1, 0, 0, 0), (0, 1, 2, 1, -2), (1, 1, 0, 1, -1)] () 
 [(-1, -1, -1, -1, 2), (0, -1, -1, 0, 1), (0, 1, 2, 1, -2), (1, 1, -1, 0, 0)] () 
 [(-1, -1, -1, -1, 2), (0, -1, -1, 0, 1), (0, 1, 2, 1, -2), (1, 1, 0, 1, -1)] () 
 [(-1, -1, -1, -1, 2), (0, -1, -1, 0, 1), (0, 1, 2, 1, -2), (1, 1, 0, 1, -1)] () 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1] 
 [(-1, 0, 1, 0, 0), (0, -1, 0, 0, 0), (0, 0, -1, 0, 1), (1, 1, 1, 1, -2)] () 
 [(-1, 0, 1, 0, 0), (0, -1, -1, 0, 1), (1, 1, -1, 0, 0), (1, 1, 1, 1, -2)] () 
 [(-1, 0, 1, 0, 0), (0, -1, -1, 0, 1), (0, 0, -1, 0, 1), (1, 1, 1, 1, -2)] () 
 [(-1, 0, 1, 0, 0), (0, -1, -1, 0, 1), (0, 0, -1, 0, 1), (1, 1, 1, 1, -2)] () 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4] 
 [(-1, 0, 1, 0, 0), (0, -1, -1, 1, 1), (0, 0, 0, -1, 0), (0, 0, 1, 0, -1)] () 
 [] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, 0, 0, -1), A line in the direction (0, 1, 0, 0, 0), A line in the direction (0, 0, 1, 0, -1)) 
 [(-1, 0, 1, 0, 0), (0, -1, -1, 1, 1), (0, 0, 0, -1, 0), (0, 0, 1, 0, -1)] () 
 [(-1, 0, 1, 0, 0), (0, -1, -1, 1, 1), (0, 0, 0, -1, 0), (0, 0, 1, 0, -1)] () 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 2, 3] 
 [(-1, 0, 1, 0, 0), (0, -1, -1, -1, 1), (0, 0, 0, 1, 0), (0, 0, 1, 0, -1)] () 
 [] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, 0, 0, -1), A line in the direction (0, 1, 0, 0, 0), A line in the direction (0, 0, 1, 0, -1)) 
 [(-1, 0, 1, 0, 0), (0, -1, -1, -1, 1), (0, 0, 0, 1, 0), (0, 0, 1, 0, -1)] () 
 [(-1, 0, 1, 0, 0), (0, -1, -1, -1, 1), (0, 0, 0, 1, 0), (0, 0, 1, 0, -1)] () 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 2] 
 [(-1, -1, 0, -1, 1), (0, -1, -1, 0, 1), (0, 0, 1, 0, -1), (0, 1, 1, 1, -1)] () 
 [] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, 0, 0, -1), A line in the direction (0, 1, 0, 0, 0), A line in the direction (0, 0, 1, 0, -1)) 
 [(-1, -1, 0, -1, 1), (0, -1, -1, 0, 1), (0, 0, 1, 0, -1), (0, 1, 1, 1, -1)] () 
 [(-1, -1, 0, -1, 1), (0, -1, -1, 0, 1), (0, 0, 1, 0, -1), (0, 1, 1, 1, -1)] () 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4] 
 [(-1, 0, 1, 0, 0), (0, -1, -1, 0, 1), (0, 0, 1, 0, -1), (1, 1, 0, 1, -1)] () 
 [(0, 0, 0, 1, 0)] (A line in the direction (0, 0, 1, 0, -1), A line in the direction (1, 0, 0, 0, -1), A line in the direction (0, 1, 0, 0, 0)) 
 [(-1, 0, 1, 0, 0), (0, -1, -1, 0, 1), (0, 0, 1, 0, -1), (1, 1, 0, 1, -1)] () 
 [(-1, 0, 1, 0, 0), (0, -1, -1, 0, 1), (0, 0, 1, 0, -1), (1, 1, 0, 1, -1)] () 

sequence:  [1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 
 [(-1, 0, 0, -1, 1), (0, 0, 0, 1, 0)] (A line in the direction (0, 0, 1, 0, -1), A line in the direction (0, 1, 0, 0, 0)) 
 [(0, 0, 0, 1, 0)] (A line in the direction (0, 0, 1, 1, -1), A line in the direction (1, 0, 0, 2, -1), A line in the direction (0, 1, 0, -1, 0)) 
 [(-1, 0, 1, -1, 0), (0, 0, -1, 0, 1), (0, 0, 1, 1, -1)] (A line in the direction (0, 1, 1, 0, -1),) 
 [(-1, -1, 0, -1, 1), (0, -1, 0, 1, 0), (0, 0, -1, 0, 1), (0, 1, 1, 0, -1)] () 

sequence:  [1, 2, 3, 4, 1, 2, 3, 1, 2] 
 [(0, 0, 0, 1, 0)] (A line in the direction (0, 0, 1, 0, -1), A line in the direction (1, 0, 0, 1, -1), A line in the direction (0, 1, 0, 0, 0)) 
 [(-1, -1, -1, -1, 2), (0, -1, 0, 1, 0), (0, 1, 1, 0, -1), (1, 1, -1, 0, 0)] () 
 [(-1, -1, -1, -1, 2), (0, -1, 0, 1, 0), (0, 1, 1, 0, -1), (1, 0, -1, 1, 0)] () 
 [(-1, -1, -1, -1, 2), (0, -1, 0, 1, 0), (0, 1, 1, 0, -1), (1, 1, 0, 1, -1)] () 

sequence:  [1, 2, 3, 4, 1, 2, 3, 1] 
 [(-1, 0, 0, 0, 1), (1, 0, 0, 1, -1)] (A line in the direction (0, 0, 1, 0, -1), A line in the direction (0, 1, 0, 0, 0)) 
 [(-1, -2, -1, 0, 2), (0, 1, 1, 0, -1), (1, 1, -1, 0, 0), (1, 1, 1, 1, -2)] () 
 [(-1, -2, -1, 0, 2), (0, -1, -2, 0, 2), (0, 1, 1, 0, -1), (1, 1, 1, 1, -2)] () 
 [(-1, -2, -1, 0, 2), (0, 0, -1, 0, 1), (0, 1, 1, 0, -1), (1, 1, 1, 1, -2)] () 

sequence:  [1, 2, 3, 4, 1, 2, 3, 2] 
 [(-1, -1, 0, -1, 1), (0, -1, -1, 1, 1), (0, -1, 0, 0, 0), (0, 1, 1, 0, -1)] () 
 [] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, 0, 0, -1), A line in the direction (0, 1, 0, 0, 0), A line in the direction (0, 0, 1, 0, -1)) 
 [(-1, -1, 0, -1, 1), (0, -1, -1, 1, 1), (0, -1, 0, 0, 0), (0, 1, 1, 0, -1)] () 
 [(-1, -1, 0, -1, 1), (0, -1, -1, 1, 1), (0, 0, 1, 0, -1), (0, 1, 1, 0, -1)] () 

sequence:  [1, 2, 3, 4, 1, 2, 3] 
 [(-1, -2, -1, 0, 2), (0, -1, 0, 0, 0), (0, 1, 1, 0, -1), (1, 1, 0, 1, -1)] () 
 [(0, 0, 0, 1, 0)] (A line in the direction (0, 0, 1, 0, -1), A line in the direction (1, 0, 0, 0, -1), A line in the direction (0, 1, 0, 0, 0)) 
 [(-1, -2, -1, 0, 2), (0, -1, 0, 0, 0), (0, 1, 1, 0, -1), (1, 1, 0, 1, -1)] () 
 [(-1, -2, -1, 0, 2), (0, 0, 1, 0, -1), (0, 1, 1, 0, -1), (1, 1, 0, 1, -1)] () 

sequence:  [1, 2, 3, 4, 1, 2, 1] 
 [(0, 0, 0, 1, 0)] (A line in the direction (0, 0, 1, 0, -1), A line in the direction (1, 0, 0, 0, -1), A line in the direction (0, 1, 0, 0, 0)) 
 [(-1, -1, 0, 0, 1), (0, -1, 0, 1, 0), (1, 1, -1, 0, 0), (1, 2, 1, 0, -2)] () 
 [(-1, -1, 0, 0, 1), (0, -1, 0, 1, 0), (1, 1, -1, 0, 0), (1, 2, 1, 0, -2)] () 
 [(-1, -1, 0, 0, 1), (0, -1, 0, 1, 0), (0, 0, -1, 0, 1), (1, 2, 1, 0, -2)] () 

sequence:  [1, 2, 3, 4, 1, 2] 
 [(-1, -1, 0, 0, 1), (0, -1, -1, 1, 1), (0, -1, 0, 0, 0), (1, 2, 1, 0, -2)] () 
 [(-1, 0, 0, 0, 1), (1, 0, 0, 1, -1)] (A line in the direction (0, 0, 1, 0, -1), A line in the direction (1, 1, 0, 0, -1)) 
 [(-1, -1, 0, 0, 1), (0, -1, -1, 1, 1), (1, 1, 1, 0, -2), (1, 2, 1, 0, -2)] () 
 [(-1, -1, 0, 0, 1), (0, -1, -1, 1, 1), (0, 0, 1, 0, -1), (1, 2, 1, 0, -2)] () 

sequence:  [1, 2, 3, 4, 1, 3, 4] 
 [(-1, -1, 0, 1, 1), (0, -1, 0, 1, 0), (0, 0, 0, -1, 0), (0, 1, 1, -1, -1)] () 
 [] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, 0, 0, -1), A line in the direction (0, 1, 0, 0, 0), A line in the direction (0, 0, 1, 0, -1)) 
 [(-1, -1, 0, 1, 1), (0, -1, 0, 1, 0), (0, 0, 0, -1, 0), (0, 1, 1, -1, -1)] () 
 [(-1, -1, 0, 1, 1), (0, -1, 0, 1, 0), (0, 0, 0, -1, 0), (0, 1, 1, -1, -1)] () 

sequence:  [1, 2, 3, 4, 1, 3] 
 [(-1, -1, 0, -1, 1), (0, -1, 0, 0, 0), (0, 0, 0, 1, 0), (0, 1, 1, -1, -1)] () 
 [] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, 0, 0, -1), A line in the direction (0, 1, 0, 0, 0), A line in the direction (0, 0, 1, 0, -1)) 
 [(-1, -1, 0, -1, 1), (0, -1, 0, 0, 0), (0, 0, 0, 1, 0), (0, 1, 1, -1, -1)] () 
 [(-1, -1, 0, -1, 1), (0, -1, 0, 1, 0), (0, 0, 0, 1, 0), (0, 1, 1, -1, -1)] () 

sequence:  [1, 2, 3, 4, 1] 
 [(-1, -1, 0, 0, 1), (0, -1, 0, 0, 0), (0, 1, 1, -1, -1), (1, 1, 0, 1, -1)] () 
 [(0, 0, 0, 1, 0)] (A line in the direction (0, 0, 1, 0, -1), A line in the direction (1, 0, 0, 1, -1), A line in the direction (0, 1, 0, -1, 0)) 
 [(-1, -1, 0, 0, 1), (0, 1, 1, -1, -1), (1, 0, 0, 1, -1), (1, 1, 0, 1, -1)] () 
 [(-1, -1, 0, 0, 1), (0, -1, 0, 1, 0), (0, 1, 1, -1, -1), (1, 1, 0, 1, -1)] () 

sequence:  [1, 2, 3, 4, 2, 3, 4, 2, 3, 4] 
 [(-1, -1, 1, 1, 0), (0, -1, 0, 0, 0), (0, 0, -1, 0, 1), (0, 1, 0, -1, 0)] () 
 [(-1, 0, 1, 0, 0), (0, 0, -1, 0, 1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 1, -1, 0, 0)) 
 [(-1, -1, 1, 1, 0), (0, 0, -1, 0, 1), (0, 0, 0, -1, 0), (0, 1, 0, -1, 0)] () 
 [(-1, -1, 1, 1, 0), (0, 0, -1, 0, 1), (0, 0, 0, -1, 0), (0, 1, 0, -1, 0)] () 

sequence:  [1, 2, 3, 4, 2, 3, 4, 2, 3] 
 [(-1, 0, 1, 0, 0), (0, 0, -1, 0, 1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (0, 1, 0, 0, 0)) 
 [(-1, -1, 1, 1, 0), (0, 0, -1, -2, 1), (0, 1, 0, -1, 0), (1, 1, -1, 0, 0)] () 
 [(-1, -1, 1, 1, 0), (0, 0, -1, -2, 1), (0, 0, 0, 1, 0), (0, 1, 0, -1, 0)] () 
 [(-1, -1, 1, 1, 0), (0, 0, -1, -2, 1), (0, 0, 0, 1, 0), (0, 1, 0, -1, 0)] () 

sequence:  [1, 2, 3, 4, 2, 3, 4, 2] 
 [(-1, 0, 0, 0, 1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (0, 0, 1, 0, -1), A line in the direction (0, 1, 0, 0, 0)) 
 [(-1, -1, 0, -1, 1), (0, 0, 1, 2, -1), (0, 1, 0, -1, 0), (1, 1, -1, 0, 0)] () 
 [(-1, -1, 0, -1, 1), (0, 0, -1, -1, 1), (0, 0, 1, 2, -1), (0, 1, 0, -1, 0)] () 
 [(-1, -1, 0, -1, 1), (0, 0, -1, -1, 1), (0, 0, 1, 2, -1), (0, 1, 0, -1, 0)] () 

sequence:  [1, 2, 3, 4, 2, 3, 4] 
 [] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, 0, 0, -1), A line in the direction (0, 1, 0, 0, 0), A line in the direction (0, 0, 1, 0, -1)) 
 [(-1, -1, 1, 1, 0), (0, 0, -1, -1, 1), (0, 1, 0, -1, 0), (1, 1, 0, 1, -1)] () 
 [(-1, -1, 1, 1, 0), (0, 0, -1, -1, 1), (0, 1, 0, -1, 0), (1, 1, 0, 1, -1)] () 
 [(-1, -1, 1, 1, 0), (0, 0, -1, -1, 1), (0, 1, 0, -1, 0), (1, 1, 0, 1, -1)] () 

sequence:  [1, 2, 3, 4, 2, 3, 2] 
 [(-1, 0, 0, 0, 1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (0, 0, 1, 0, -1), A line in the direction (0, 1, 0, 0, 0)) 
 [(-1, 0, 0, -2, 1), (0, 0, 0, 1, 0)] (A line in the direction (0, 0, 1, 1, -1), A line in the direction (1, 1, 0, 1, -1)) 
 [(-1, -1, 0, -1, 1), (0, 0, 0, 1, 0), (0, 1, 0, -1, 0)] (A line in the direction (0, 0, 1, 1, -1),) 
 [(-1, -1, 0, -1, 1), (0, 0, -1, 0, 1), (0, 0, 1, 1, -1), (0, 1, 0, -1, 0)] () 

sequence:  [1, 2, 3, 4, 2, 3] 
 [] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, 0, 0, -1), A line in the direction (0, 1, 0, 0, 0), A line in the direction (0, 0, 1, 0, -1)) 
 [(-1, -1, -1, -1, 2), (0, 0, 1, 1, -1), (0, 1, 0, -1, 0), (1, 1, -1, 0, 0)] () 
 [(-1, -1, -1, -1, 2), (0, 0, 1, 1, -1), (0, 1, 0, -1, 0), (1, 1, -1, 0, 0)] () 
 [(-1, -1, -1, -1, 2), (0, 0, 1, 1, -1), (0, 1, 0, -1, 0), (1, 1, 0, 1, -1)] () 

sequence:  [1, 2, 3, 4, 2] 
 [] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, 0, 0, -1), A line in the direction (0, 1, 0, 0, 0), A line in the direction (0, 0, 1, 0, -1)) 
 [(-1, -1, 0, 0, 1), (0, 1, 0, -1, 0), (1, 1, -1, 0, 0), (1, 1, 1, 1, -2)] () 
 [(-1, -1, 0, 0, 1), (0, 1, 0, -1, 0), (1, 1, -1, 0, 0), (1, 1, 1, 1, -2)] () 
 [(-1, -1, 0, 0, 1), (0, 0, -1, 0, 1), (0, 1, 0, -1, 0), (1, 1, 1, 1, -2)] () 

sequence:  [1, 2, 3, 4, 3, 4] 
 [(-1, -1, 0, 1, 1), (0, -1, 0, 0, 0), (0, 0, 1, 0, -1), (0, 1, 0, -1, 0)] () 
 [(-1, 0, 0, 0, 1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (0, 0, 1, 0, -1), A line in the direction (1, 1, 0, 0, -1)) 
 [(-1, -1, 0, 1, 1), (0, 0, 0, -1, 0), (0, 0, 1, 0, -1), (0, 1, 0, -1, 0)] () 
 [(-1, -1, 0, 1, 1), (0, 0, 0, -1, 0), (0, 0, 1, 0, -1), (0, 1, 0, -1, 0)] () 

sequence:  [1, 2, 3, 4, 3] 
 [(-1, 0, 0, 0, 1), (0, 0, 1, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (0, 1, 0, 0, 0)) 
 [(-1, 0, 0, 0, 1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (0, 0, 1, 0, -1), A line in the direction (1, 1, 0, 0, -1)) 
 [(-1, -1, 0, 0, 1), (0, 0, 1, 0, -1), (0, 1, 0, 0, 0)] (A line in the direction (0, 0, 0, 1, 0),) 
 [(-1, -1, 0, -1, 1), (0, 0, 0, 1, 0), (0, 0, 1, 0, -1), (0, 1, 0, -1, 0)] () 

sequence:  [1, 2, 3, 4] 
 [(0, 0, 1, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, 0, 0, -1), A line in the direction (0, 1, 0, 0, 0)) 
 [(-1, 0, 0, -1, 1), (0, 0, 0, 1, 0)] (A line in the direction (0, 0, 1, 0, -1), A line in the direction (1, 1, 0, 0, -1)) 
 [(-1, 0, 0, -1, 1), (0, 0, 0, 1, 0), (0, 0, 1, 0, -1)] (A line in the direction (1, 1, 0, 0, -1),) 
 [(-1, -1, 0, 0, 1), (0, 0, 1, 0, -1), (0, 1, 0, -1, 0), (1, 1, 0, 1, -1)] () 

sequence:  [1, 2, 3, 1, 2, 1] 
 [(0, 0, 0, 1, 0)] (A line in the direction (0, 0, 1, 0, -1), A line in the direction (1, 0, 0, 0, -1), A line in the direction (0, 1, 0, 0, 0)) 
 [(-1, 0, 1, 0, 0), (0, -1, 0, 1, 0), (0, 0, -1, 0, 1), (1, 1, 0, 0, -1)] () 
 [(-1, 0, 1, 0, 0), (0, -1, 0, 1, 0), (0, 0, -1, 0, 1), (1, 1, 0, 0, -1)] () 
 [(-1, 0, 1, 0, 0), (0, -1, 0, 1, 0), (0, 0, -1, 0, 1), (1, 1, 0, 0, -1)] () 

sequence:  [1, 2, 3, 1, 2] 
 [(-1, 0, 1, 0, 0), (0, -1, -1, 1, 1), (0, -1, 0, 0, 0), (1, 1, 0, 0, -1)] () 
 [(-1, 0, 1, 0, 0), (0, -1, -1, 1, 1), (0, 0, 1, 0, -1), (1, 1, -1, 0, 0)] () 
 [(-1, 0, 1, 0, 0), (0, -1, -1, 1, 1), (0, 0, 1, 0, -1), (1, 1, 0, 0, -1)] () 
 [(-1, 0, 1, 0, 0), (0, -1, -1, 1, 1), (0, 0, 1, 0, -1), (1, 1, 0, 0, -1)] () 

sequence:  [1, 2, 3, 1] 
 [(-1, -1, 0, 1, 1), (0, -1, 0, 0, 0), (0, 1, 1, -1, -1), (1, 1, 0, 0, -1)] () 
 [(-1, -1, 0, 1, 1), (0, -1, 0, 1, 0), (0, 1, 1, -1, -1), (1, 1, -1, 0, 0)] () 
 [(-1, -1, 0, 1, 1), (0, -1, 0, 1, 0), (0, 1, 1, -1, -1), (1, 1, 0, 0, -1)] () 
 [(-1, -1, 0, 1, 1), (0, -1, 0, 1, 0), (0, 1, 1, -1, -1), (1, 1, 0, 0, -1)] () 

sequence:  [1, 2, 3, 2] 
 [] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, 0, 0, -1), A line in the direction (0, 1, 0, 0, 0), A line in the direction (0, 0, 1, 0, -1)) 
 [(-1, -1, 1, 1, 0), (0, 0, -1, 0, 1), (0, 1, 0, -1, 0), (1, 1, 0, 0, -1)] () 
 [(-1, -1, 1, 1, 0), (0, 0, -1, 0, 1), (0, 1, 0, -1, 0), (1, 1, 0, 0, -1)] () 
 [(-1, -1, 1, 1, 0), (0, 0, -1, 0, 1), (0, 1, 0, -1, 0), (1, 1, 0, 0, -1)] () 

sequence:  [1, 2, 3] 
 [(0, 0, 1, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, 0, 0, -1), A line in the direction (0, 1, 0, 0, 0)) 
 [(-1, -1, 0, 1, 1), (0, 0, 1, 0, -1), (0, 1, 0, -1, 0), (1, 1, -1, 0, 0)] () 
 [(-1, -1, 0, 1, 1), (0, 0, 1, 0, -1), (0, 1, 0, -1, 0), (1, 1, 0, 0, -1)] () 
 [(-1, -1, 0, 1, 1), (0, 0, 1, 0, -1), (0, 1, 0, -1, 0), (1, 1, 0, 0, -1)] () 

sequence:  [1, 2, 4, 1] 
 [(-1, 0, 1, 0, 0), (0, -1, 0, 1, 0), (0, 0, 0, -1, 0), (1, 1, 0, -1, -1)] () 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 
 [(-1, 0, 1, 0, 0), (0, -1, 0, 1, 0), (0, 0, 0, -1, 0), (1, 1, 0, -1, -1)] () 
 [(-1, 0, 1, 0, 0), (0, -1, 0, 1, 0), (0, 0, 0, -1, 0), (1, 1, 0, -1, -1)] () 

sequence:  [1, 2, 4] 
 [(-1, -1, 1, 1, 0), (0, -1, 0, 0, 0), (0, 1, 0, -1, 0), (1, 1, 0, -1, -1)] () 
 [(-1, 0, 1, 0, 0), (0, 0, 1, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 1, -1, 0, 0)) 
 [(-1, -1, 1, 1, 0), (0, 0, 0, -1, 0), (0, 1, 0, -1, 0), (1, 1, 0, -1, -1)] () 
 [(-1, -1, 1, 1, 0), (0, 0, 0, -1, 0), (0, 1, 0, -1, 0), (1, 1, 0, -1, -1)] () 

sequence:  [1, 2, 1] 
 [(-1, 0, 1, 0, 0), (0, -1, 0, 0, 0), (0, 0, 0, 1, 0), (1, 1, 0, -1, -1)] () 
 [(-1, 0, 1, 0, 0), (0, -1, 0, 1, 0), (1, 1, -1, 0, 0), (1, 1, 0, -1, -1)] () 
 [(-1, 0, 1, 0, 0), (0, -1, 0, 1, 0), (0, 0, 0, 1, 0), (1, 1, 0, -1, -1)] () 
 [(-1, 0, 1, 0, 0), (0, -1, 0, 1, 0), (0, 0, 0, 1, 0), (1, 1, 0, -1, -1)] () 

sequence:  [1, 2] 
 [(-1, 0, 1, 0, 0), (1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (0, 1, 0, 0, 0)) 
 [(-1, -1, 1, 1, 0), (0, 1, 0, -1, 0), (1, 1, -1, 0, 0), (1, 1, 0, -1, -1)] () 
 [(-1, -1, 1, 1, 0), (0, 0, 0, 1, 0), (0, 1, 0, -1, 0), (1, 1, 0, -1, -1)] () 
 [(-1, -1, 1, 1, 0), (0, 0, 0, 1, 0), (0, 1, 0, -1, 0), (1, 1, 0, -1, -1)] () 

sequence:  [1, 3, 4, 3, 4] 
 [(-1, 0, 1, 0, 0), (0, -1, 0, 0, 0), (0, 0, -1, 0, 1), (1, 1, -1, -1, 0)] () 
 [(-1, 0, 1, 0, 0), (0, 0, -1, 0, 1), (0, 0, 0, -1, 0), (1, 1, -1, 0, 0)] () 
 [(-1, 0, 1, 0, 0), (0, 0, -1, 0, 1), (0, 0, 0, -1, 0), (1, 1, -1, -1, 0)] () 
 [(-1, 0, 1, 0, 0), (0, 0, -1, 0, 1), (0, 0, 0, -1, 0), (1, 1, -1, -1, 0)] () 

sequence:  [1, 3, 4, 3] 
 [(-1, 0, 0, 0, 1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 
 [(-1, 0, 1, 0, 0), (0, 0, -1, -2, 1), (0, 0, 0, 1, 0), (1, 1, -1, -1, 0)] () 
 [(-1, 0, 1, 0, 0), (0, 0, -1, -2, 1), (0, 0, 0, 1, 0), (1, 1, -1, -1, 0)] () 
 [(-1, 0, 1, 0, 0), (0, 0, -1, -2, 1), (0, 0, 0, 1, 0), (1, 1, -1, -1, 0)] () 

sequence:  [1, 3, 4] 
 [] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, 0, 0, -1), A line in the direction (0, 1, 0, 0, 0), A line in the direction (0, 0, 1, 0, -1)) 
 [(-1, 0, 1, 0, 0), (0, 0, -1, -1, 1), (0, 0, 1, 2, -1), (1, 1, -1, -1, 0)] () 
 [(-1, 0, 1, 0, 0), (0, 0, -1, -1, 1), (0, 0, 1, 2, -1), (1, 1, -1, -1, 0)] () 
 [(-1, 0, 1, 0, 0), (0, 0, -1, -1, 1), (0, 0, 1, 2, -1), (1, 1, -1, -1, 0)] () 

sequence:  [1, 3] 
 [] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, 0, 0, -1), A line in the direction (0, 1, 0, 0, 0), A line in the direction (0, 0, 1, 0, -1)) 
 [(-1, 0, 1, 0, 0), (0, 0, -1, 0, 1), (0, 0, 1, 1, -1), (1, 1, -1, -1, 0)] () 
 [(-1, 0, 1, 0, 0), (0, 0, -1, 0, 1), (0, 0, 1, 1, -1), (1, 1, -1, -1, 0)] () 
 [(-1, 0, 1, 0, 0), (0, 0, -1, 0, 1), (0, 0, 1, 1, -1), (1, 1, -1, -1, 0)] () 

sequence:  [1, 4] 
 [(-1, 0, 1, 0, 0), (0, -1, 0, 0, 0), (0, 0, 1, 0, -1), (1, 1, -1, -1, 0)] () 
 [(-1, 0, 1, 0, 0), (0, 0, 0, -1, 0), (0, 0, 1, 0, -1), (1, 1, -1, 0, 0)] () 
 [(-1, 0, 1, 0, 0), (0, 0, 0, -1, 0), (0, 0, 1, 0, -1), (1, 1, -1, -1, 0)] () 
 [(-1, 0, 1, 0, 0), (0, 0, 0, -1, 0), (0, 0, 1, 0, -1), (1, 1, -1, -1, 0)] () 

sequence:  [1] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 
 [(-1, 0, 1, 0, 0), (0, 0, 0, 1, 0), (0, 0, 1, 0, -1), (1, 1, -1, -1, 0)] () 
 [(-1, 0, 1, 0, 0), (0, 0, 0, 1, 0), (0, 0, 1, 0, -1), (1, 1, -1, -1, 0)] () 
 [(-1, 0, 1, 0, 0), (0, 0, 0, 1, 0), (0, 0, 1, 0, -1), (1, 1, -1, -1, 0)] () 

sequence:  [2, 3, 4, 2, 3, 4, 2, 3, 4] 
 [(0, -1, 0, 1, 0), (0, 0, -1, 0, 1), (0, 0, 0, -1, 0), (1, 0, -1, 0, 0)] () 
 [(0, 0, -1, 0, 1), (1, 0, -1, 0, 0)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (0, 1, 0, 0, 0)) 
 [(0, -1, 0, 1, 0), (0, 0, -1, 0, 1), (0, 0, 0, -1, 0), (1, 0, -1, 0, 0)] () 
 [(0, -1, 0, 1, 0), (0, 0, -1, 0, 1), (0, 0, 0, -1, 0), (1, 0, -1, 0, 0)] () 

sequence:  [2, 3, 4, 2, 3, 4, 2, 3] 
 [(0, -1, 0, 0, 0), (0, 0, -1, -2, 1), (0, 0, 0, 1, 0), (1, 0, -1, 0, 0)] () 
 [(0, -1, 0, 1, 0), (0, 0, -1, -2, 1), (0, 1, 0, 0, 0), (1, 0, -1, 0, 0)] () 
 [(0, -1, 0, 1, 0), (0, 0, -1, -2, 1), (0, 0, 0, 1, 0), (1, 0, -1, 0, 0)] () 
 [(0, -1, 0, 1, 0), (0, 0, -1, -2, 1), (0, 0, 0, 1, 0), (1, 0, -1, 0, 0)] () 

sequence:  [2, 3, 4, 2, 3, 4, 2] 
 [(0, -1, 0, 0, 0), (0, 0, -1, -1, 1), (0, 0, 1, 2, -1), (1, 0, -1, 0, 0)] () 
 [(0, -1, -1, -1, 1), (0, 0, 1, 2, -1), (0, 1, 0, 0, 0), (1, 0, -1, 0, 0)] () 
 [(0, -1, -1, -1, 1), (0, 0, -1, -1, 1), (0, 0, 1, 2, -1), (1, 0, -1, 0, 0)] () 
 [(0, -1, -1, -1, 1), (0, 0, -1, -1, 1), (0, 0, 1, 2, -1), (1, 0, -1, 0, 0)] () 

sequence:  [2, 3, 4, 2, 3, 4] 
 [(0, 0, 0, 1, 0), (1, 0, 0, 1, -1)] (A line in the direction (0, 0, 1, 1, -1), A line in the direction (0, 1, 0, 0, 0)) 
 [(0, -1, 0, 1, 0), (0, 0, -1, -1, 1), (0, 1, 1, 1, -1), (1, 0, -1, 0, 0)] () 
 [(0, -1, 0, 1, 0), (0, 0, -1, -1, 1), (0, 1, 1, 1, -1), (1, 0, -1, 0, 0)] () 
 [(0, -1, 0, 1, 0), (0, 0, -1, -1, 1), (0, 1, 1, 1, -1), (1, 0, -1, 0, 0)] () 

sequence:  [2, 3, 4, 2, 3, 2] 
 [(0, -1, -1, -1, 1), (0, 0, -1, 0, 1), (0, 0, 1, 1, -1), (1, 0, -1, 0, 0)] () 
 [(0, 0, 0, 1, 0), (1, 0, 0, 1, -1)] (A line in the direction (0, 0, 1, 1, -1), A line in the direction (0, 1, 0, 0, 0)) 
 [(0, -1, -1, -1, 1), (0, 0, -1, 0, 1), (0, 0, 1, 1, -1), (1, 0, -1, 0, 0)] () 
 [(0, -1, -1, -1, 1), (0, 0, -1, 0, 1), (0, 0, 1, 1, -1), (1, 0, -1, 0, 0)] () 

sequence:  [2, 3, 4, 2, 3] 
 [(0, -1, -2, -1, 2), (0, -1, 0, 0, 0), (0, 1, 1, 1, -1), (1, 0, -1, 0, 0)] () 
 [(0, -1, -2, -1, 2), (0, 0, 1, 1, -1), (0, 1, 0, 0, 0), (1, 0, -1, 0, 0)] () 
 [(0, -1, -2, -1, 2), (0, 0, 1, 1, -1), (0, 1, 1, 1, -1), (1, 0, -1, 0, 0)] () 
 [(0, -1, -2, -1, 2), (0, 0, 1, 1, -1), (0, 1, 1, 1, -1), (1, 0, -1, 0, 0)] () 

sequence:  [2, 3, 4, 2] 
 [(0, -1, 0, 0, 0), (0, 0, -1, 0, 1), (0, 1, 2, 1, -2), (1, 0, -1, 0, 0)] () 
 [(0, -1, -1, 0, 1), (0, 1, 0, 0, 0), (0, 1, 2, 1, -2), (1, 0, -1, 0, 0)] () 
 [(0, -1, -1, 0, 1), (0, 0, -1, 0, 1), (0, 1, 2, 1, -2), (1, 0, -1, 0, 0)] () 
 [(0, -1, -1, 0, 1), (0, 0, -1, 0, 1), (0, 1, 2, 1, -2), (1, 0, -1, 0, 0)] () 

sequence:  [2, 3, 4, 3, 4] 
 [(0, -1, -1, 1, 1), (0, 0, 0, -1, 0), (0, 0, 1, 0, -1), (1, 0, -1, 0, 0)] () 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (0, 0, 1, 0, -1), A line in the direction (0, 1, 0, 0, 0)) 
 [(0, -1, -1, 1, 1), (0, 0, 0, -1, 0), (0, 0, 1, 0, -1), (1, 0, -1, 0, 0)] () 
 [(0, -1, -1, 1, 1), (0, 0, 0, -1, 0), (0, 0, 1, 0, -1), (1, 0, -1, 0, 0)] () 

sequence:  [2, 3, 4, 3] 
 [(0, -1, -1, -1, 1), (0, 0, 0, 1, 0), (0, 0, 1, 0, -1), (1, 0, -1, 0, 0)] () 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (0, 0, 1, 0, -1), A line in the direction (0, 1, 0, 0, 0)) 
 [(0, -1, -1, -1, 1), (0, 0, 0, 1, 0), (0, 0, 1, 0, -1), (1, 0, -1, 0, 0)] () 
 [(0, -1, -1, -1, 1), (0, 0, 0, 1, 0), (0, 0, 1, 0, -1), (1, 0, -1, 0, 0)] () 

sequence:  [2, 3, 4] 
 [(0, -1, -1, 0, 1), (0, 0, 1, 0, -1), (0, 1, 1, 1, -1), (1, 0, -1, 0, 0)] () 
 [(0, 0, 0, 1, 0), (1, 0, 0, 0, -1)] (A line in the direction (0, 0, 1, 0, -1), A line in the direction (0, 1, 0, 0, 0)) 
 [(0, -1, -1, 0, 1), (0, 0, 1, 0, -1), (0, 1, 1, 1, -1), (1, 0, -1, 0, 0)] () 
 [(0, -1, -1, 0, 1), (0, 0, 1, 0, -1), (0, 1, 1, 1, -1), (1, 0, -1, 0, 0)] () 

sequence:  [2, 3, 2] 
 [(0, 0, 0, 1, 0), (1, 0, 0, 0, -1)] (A line in the direction (0, 0, 1, 0, -1), A line in the direction (0, 1, 0, 0, 0)) 
 [(0, -1, 0, 1, 0), (0, 0, -1, 0, 1), (0, 1, 1, 0, -1), (1, 0, -1, 0, 0)] () 
 [(0, -1, 0, 1, 0), (0, 0, -1, 0, 1), (0, 1, 1, 0, -1), (1, 0, -1, 0, 0)] () 
 [(0, -1, 0, 1, 0), (0, 0, -1, 0, 1), (0, 1, 1, 0, -1), (1, 0, -1, 0, 0)] () 

sequence:  [2, 3] 
 [(0, -1, -1, 1, 1), (0, -1, 0, 0, 0), (0, 1, 1, 0, -1), (1, 0, -1, 0, 0)] () 
 [(0, -1, -1, 1, 1), (0, 0, 1, 0, -1), (0, 1, 0, 0, 0), (1, 0, -1, 0, 0)] () 
 [(0, -1, -1, 1, 1), (0, 0, 1, 0, -1), (0, 1, 1, 0, -1), (1, 0, -1, 0, 0)] () 
 [(0, -1, -1, 1, 1), (0, 0, 1, 0, -1), (0, 1, 1, 0, -1), (1, 0, -1, 0, 0)] () 

sequence:  [2, 4] 
 [(0, -1, 0, 1, 0), (0, 0, 0, -1, 0), (0, 1, 1, -1, -1), (1, 0, -1, 0, 0)] () 
 [(0, 0, 1, 0, -1), (1, 0, -1, 0, 0)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (0, 1, 0, 0, 0)) 
 [(0, -1, 0, 1, 0), (0, 0, 0, -1, 0), (0, 1, 1, -1, -1), (1, 0, -1, 0, 0)] () 
 [(0, -1, 0, 1, 0), (0, 0, 0, -1, 0), (0, 1, 1, -1, -1), (1, 0, -1, 0, 0)] () 

sequence:  [2] 
 [(0, -1, 0, 0, 0), (0, 0, 0, 1, 0), (0, 1, 1, -1, -1), (1, 0, -1, 0, 0)] () 
 [(0, -1, 0, 1, 0), (0, 1, 0, 0, 0), (0, 1, 1, -1, -1), (1, 0, -1, 0, 0)] () 
 [(0, -1, 0, 1, 0), (0, 0, 0, 1, 0), (0, 1, 1, -1, -1), (1, 0, -1, 0, 0)] () 
 [(0, -1, 0, 1, 0), (0, 0, 0, 1, 0), (0, 1, 1, -1, -1), (1, 0, -1, 0, 0)] () 

sequence:  [3, 4, 3, 4] 
 [(0, -1, 0, 0, 0), (0, 0, -1, 0, 1), (0, 1, 0, -1, 0), (1, 0, -1, 0, 0)] () 
 [(0, 0, -1, 0, 1), (0, 0, 0, -1, 0), (0, 1, 0, 0, 0), (1, 0, -1, 0, 0)] () 
 [(0, 0, -1, 0, 1), (0, 0, 0, -1, 0), (0, 1, 0, -1, 0), (1, 0, -1, 0, 0)] () 
 [(0, 0, -1, 0, 1), (0, 0, 0, -1, 0), (0, 1, 0, -1, 0), (1, 0, -1, 0, 0)] () 

sequence:  [3, 4, 3] 
 [(0, 0, -1, 0, 1), (1, 0, -1, 0, 0)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (0, 1, 0, 0, 0)) 
 [(0, 0, -1, -2, 1), (0, 0, 0, 1, 0), (0, 1, 0, -1, 0), (1, 0, -1, 0, 0)] () 
 [(0, 0, -1, -2, 1), (0, 0, 0, 1, 0), (0, 1, 0, -1, 0), (1, 0, -1, 0, 0)] () 
 [(0, 0, -1, -2, 1), (0, 0, 0, 1, 0), (0, 1, 0, -1, 0), (1, 0, -1, 0, 0)] () 

sequence:  [3, 4] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (0, 0, 1, 0, -1), A line in the direction (0, 1, 0, 0, 0)) 
 [(0, 0, -1, -1, 1), (0, 0, 1, 2, -1), (0, 1, 0, -1, 0), (1, 0, -1, 0, 0)] () 
 [(0, 0, -1, -1, 1), (0, 0, 1, 2, -1), (0, 1, 0, -1, 0), (1, 0, -1, 0, 0)] () 
 [(0, 0, -1, -1, 1), (0, 0, 1, 2, -1), (0, 1, 0, -1, 0), (1, 0, -1, 0, 0)] () 

sequence:  [3] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (0, 0, 1, 0, -1), A line in the direction (0, 1, 0, 0, 0)) 
 [(0, 0, -1, 0, 1), (0, 0, 1, 1, -1), (0, 1, 0, -1, 0), (1, 0, -1, 0, 0)] () 
 [(0, 0, -1, 0, 1), (0, 0, 1, 1, -1), (0, 1, 0, -1, 0), (1, 0, -1, 0, 0)] () 
 [(0, 0, -1, 0, 1), (0, 0, 1, 1, -1), (0, 1, 0, -1, 0), (1, 0, -1, 0, 0)] () 

sequence:  [4] 
 [(0, -1, 0, 0, 0), (0, 0, 1, 0, -1), (0, 1, 0, -1, 0), (1, 0, -1, 0, 0)] () 
 [(0, 0, 0, -1, 0), (0, 0, 1, 0, -1), (0, 1, 0, 0, 0), (1, 0, -1, 0, 0)] () 
 [(0, 0, 0, -1, 0), (0, 0, 1, 0, -1), (0, 1, 0, -1, 0), (1, 0, -1, 0, 0)] () 
 [(0, 0, 0, -1, 0), (0, 0, 1, 0, -1), (0, 1, 0, -1, 0), (1, 0, -1, 0, 0)] () 

sequence:  [] 
 [(0, 0, 1, 0, -1), (1, 0, -1, 0, 0)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (0, 1, 0, 0, 0)) 
 [(0, 0, 0, 1, 0), (0, 0, 1, 0, -1), (0, 1, 0, -1, 0), (1, 0, -1, 0, 0)] () 
 [(0, 0, 0, 1, 0), (0, 0, 1, 0, -1), (0, 1, 0, -1, 0), (1, 0, -1, 0, 0)] () 
 [(0, 0, 0, 1, 0), (0, 0, 1, 0, -1), (0, 1, 0, -1, 0), (1, 0, -1, 0, 0)] () 

q
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: for v in sortables(A,c[1:]):
....:     print("sortable: ",v,"\n")
....:     for seq in sortables(A,c[1:]):
....:         P=p_lambda_cone(B(A,c),lam(A,v),[seq])
....:         Q=p_lambda_cone(B(A,c),lam(A,v),[[c[0]]+seq])
....:         R=P.intersection(Q)
....:         Bprime=B(A,c)
....:         Bprime.set_column(c[0],[0]*A.nrows())
....:         S=p_lambda_cone(Bprime,lam(A,v),[seq])
....:         if R!=S:
....:             print("sequence: ",seq,"\n",sorted(list(map(vector,P.rays())))
....: ,P.lines(),"\n",sorted(list(map(vector,Q.rays()))),Q.lines(),"\n",sorted(l
....: ist(map(vector,R.rays()))),R.lines(),"\n",sorted(list(map(vector,S.rays())
....: )),S.lines(),"\n")
....:     if input()=="q":
....:         break
....: 
sortable:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 
 [(-1, 0, 0, -1, 1), (0, 0, 0, 1, 0)] (A line in the direction (0, 0, 1, 0, -1), A line in the direction (0, 1, 0, 0, 0)) 
 [(0, 0, 0, 1, 0)] (A line in the direction (0, 0, 1, 1, -1), A line in the direction (1, 0, 0, 2, -1), A line in the direction (0, 1, 0, -1, 0)) 
 [(-1, 0, 1, -1, 0), (0, 0, -1, 0, 1), (0, 0, 1, 1, -1)] (A line in the direction (0, 1, 1, 0, -1),) 
 [(-1, -1, 0, -1, 1), (0, -1, 0, 1, 0), (0, 0, -1, 0, 1), (0, 1, 1, 0, -1)] () 

sequence:  [1, 2, 3, 4, 1, 2, 3, 1, 2] 
 [(0, 0, 0, 1, 0)] (A line in the direction (0, 0, 1, 0, -1), A line in the direction (1, 0, 0, 1, -1), A line in the direction (0, 1, 0, 0, 0)) 
 [(-1, -1, -1, -1, 2), (0, -1, 0, 1, 0), (0, 1, 1, 0, -1), (1, 1, -1, 0, 0)] () 
 [(-1, -1, -1, -1, 2), (0, -1, 0, 1, 0), (0, 1, 1, 0, -1), (1, 0, -1, 1, 0)] () 
 [(-1, -1, -1, -1, 2), (0, -1, 0, 1, 0), (0, 1, 1, 0, -1), (1, 1, 0, 1, -1)] () 

sequence:  [1, 2, 3, 4, 1, 2, 3, 1] 
 [(-1, 0, 0, 0, 1), (1, 0, 0, 1, -1)] (A line in the direction (0, 0, 1, 0, -1), A line in the direction (0, 1, 0, 0, 0)) 
 [(-1, -2, -1, 0, 2), (0, 1, 1, 0, -1), (1, 1, -1, 0, 0), (1, 1, 1, 1, -2)] () 
 [(-1, -2, -1, 0, 2), (0, -1, -2, 0, 2), (0, 1, 1, 0, -1), (1, 1, 1, 1, -2)] () 
 [(-1, -2, -1, 0, 2), (0, 0, -1, 0, 1), (0, 1, 1, 0, -1), (1, 1, 1, 1, -2)] () 

sequence:  [1, 2, 3, 4, 1, 2, 3, 2] 
 [(-1, -1, 0, -1, 1), (0, -1, -1, 1, 1), (0, -1, 0, 0, 0), (0, 1, 1, 0, -1)] () 
 [] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, 0, 0, -1), A line in the direction (0, 1, 0, 0, 0), A line in the direction (0, 0, 1, 0, -1)) 
 [(-1, -1, 0, -1, 1), (0, -1, -1, 1, 1), (0, -1, 0, 0, 0), (0, 1, 1, 0, -1)] () 
 [(-1, -1, 0, -1, 1), (0, -1, -1, 1, 1), (0, 0, 1, 0, -1), (0, 1, 1, 0, -1)] () 

sequence:  [1, 2, 3, 4, 1, 2, 3] 
 [(-1, -2, -1, 0, 2), (0, -1, 0, 0, 0), (0, 1, 1, 0, -1), (1, 1, 0, 1, -1)] () 
 [(0, 0, 0, 1, 0)] (A line in the direction (0, 0, 1, 0, -1), A line in the direction (1, 0, 0, 0, -1), A line in the direction (0, 1, 0, 0, 0)) 
 [(-1, -2, -1, 0, 2), (0, -1, 0, 0, 0), (0, 1, 1, 0, -1), (1, 1, 0, 1, -1)] () 
 [(-1, -2, -1, 0, 2), (0, 0, 1, 0, -1), (0, 1, 1, 0, -1), (1, 1, 0, 1, -1)] () 

sequence:  [1, 2, 3, 4, 1, 2, 1] 
 [(0, 0, 0, 1, 0)] (A line in the direction (0, 0, 1, 0, -1), A line in the direction (1, 0, 0, 0, -1), A line in the direction (0, 1, 0, 0, 0)) 
 [(-1, -1, 0, 0, 1), (0, -1, 0, 1, 0), (1, 1, -1, 0, 0), (1, 2, 1, 0, -2)] () 
 [(-1, -1, 0, 0, 1), (0, -1, 0, 1, 0), (1, 1, -1, 0, 0), (1, 2, 1, 0, -2)] () 
 [(-1, -1, 0, 0, 1), (0, -1, 0, 1, 0), (0, 0, -1, 0, 1), (1, 2, 1, 0, -2)] () 

sequence:  [1, 2, 3, 4, 1, 2] 
 [(-1, -1, 0, 0, 1), (0, -1, -1, 1, 1), (0, -1, 0, 0, 0), (1, 2, 1, 0, -2)] () 
 [(-1, 0, 0, 0, 1), (1, 0, 0, 1, -1)] (A line in the direction (0, 0, 1, 0, -1), A line in the direction (1, 1, 0, 0, -1)) 
 [(-1, -1, 0, 0, 1), (0, -1, -1, 1, 1), (1, 1, 1, 0, -2), (1, 2, 1, 0, -2)] () 
 [(-1, -1, 0, 0, 1), (0, -1, -1, 1, 1), (0, 0, 1, 0, -1), (1, 2, 1, 0, -2)] () 

sequence:  [1, 2, 3, 4, 1, 3] 
 [(-1, -1, 0, -1, 1), (0, -1, 0, 0, 0), (0, 0, 0, 1, 0), (0, 1, 1, -1, -1)] () 
 [] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, 0, 0, -1), A line in the direction (0, 1, 0, 0, 0), A line in the direction (0, 0, 1, 0, -1)) 
 [(-1, -1, 0, -1, 1), (0, -1, 0, 0, 0), (0, 0, 0, 1, 0), (0, 1, 1, -1, -1)] () 
 [(-1, -1, 0, -1, 1), (0, -1, 0, 1, 0), (0, 0, 0, 1, 0), (0, 1, 1, -1, -1)] () 

sequence:  [1, 2, 3, 4, 1] 
 [(-1, -1, 0, 0, 1), (0, -1, 0, 0, 0), (0, 1, 1, -1, -1), (1, 1, 0, 1, -1)] () 
 [(0, 0, 0, 1, 0)] (A line in the direction (0, 0, 1, 0, -1), A line in the direction (1, 0, 0, 1, -1), A line in the direction (0, 1, 0, -1, 0)) 
 [(-1, -1, 0, 0, 1), (0, 1, 1, -1, -1), (1, 0, 0, 1, -1), (1, 1, 0, 1, -1)] () 
 [(-1, -1, 0, 0, 1), (0, -1, 0, 1, 0), (0, 1, 1, -1, -1), (1, 1, 0, 1, -1)] () 

sequence:  [1, 2, 3, 4, 2, 3, 2] 
 [(-1, 0, 0, 0, 1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (0, 0, 1, 0, -1), A line in the direction (0, 1, 0, 0, 0)) 
 [(-1, 0, 0, -2, 1), (0, 0, 0, 1, 0)] (A line in the direction (0, 0, 1, 1, -1), A line in the direction (1, 1, 0, 1, -1)) 
 [(-1, -1, 0, -1, 1), (0, 0, 0, 1, 0), (0, 1, 0, -1, 0)] (A line in the direction (0, 0, 1, 1, -1),) 
 [(-1, -1, 0, -1, 1), (0, 0, -1, 0, 1), (0, 0, 1, 1, -1), (0, 1, 0, -1, 0)] () 

sequence:  [1, 2, 3, 4, 2, 3] 
 [] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, 0, 0, -1), A line in the direction (0, 1, 0, 0, 0), A line in the direction (0, 0, 1, 0, -1)) 
 [(-1, -1, -1, -1, 2), (0, 0, 1, 1, -1), (0, 1, 0, -1, 0), (1, 1, -1, 0, 0)] () 
 [(-1, -1, -1, -1, 2), (0, 0, 1, 1, -1), (0, 1, 0, -1, 0), (1, 1, -1, 0, 0)] () 
 [(-1, -1, -1, -1, 2), (0, 0, 1, 1, -1), (0, 1, 0, -1, 0), (1, 1, 0, 1, -1)] () 

sequence:  [1, 2, 3, 4, 2] 
 [] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, 0, 0, -1), A line in the direction (0, 1, 0, 0, 0), A line in the direction (0, 0, 1, 0, -1)) 
 [(-1, -1, 0, 0, 1), (0, 1, 0, -1, 0), (1, 1, -1, 0, 0), (1, 1, 1, 1, -2)] () 
 [(-1, -1, 0, 0, 1), (0, 1, 0, -1, 0), (1, 1, -1, 0, 0), (1, 1, 1, 1, -2)] () 
 [(-1, -1, 0, 0, 1), (0, 0, -1, 0, 1), (0, 1, 0, -1, 0), (1, 1, 1, 1, -2)] () 

sequence:  [1, 2, 3, 4, 3] 
 [(-1, 0, 0, 0, 1), (0, 0, 1, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (0, 1, 0, 0, 0)) 
 [(-1, 0, 0, 0, 1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (0, 0, 1, 0, -1), A line in the direction (1, 1, 0, 0, -1)) 
 [(-1, -1, 0, 0, 1), (0, 0, 1, 0, -1), (0, 1, 0, 0, 0)] (A line in the direction (0, 0, 0, 1, 0),) 
 [(-1, -1, 0, -1, 1), (0, 0, 0, 1, 0), (0, 0, 1, 0, -1), (0, 1, 0, -1, 0)] () 

sequence:  [1, 2, 3, 4] 
 [(0, 0, 1, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, 0, 0, -1), A line in the direction (0, 1, 0, 0, 0)) 
 [(-1, 0, 0, -1, 1), (0, 0, 0, 1, 0)] (A line in the direction (0, 0, 1, 0, -1), A line in the direction (1, 1, 0, 0, -1)) 
 [(-1, 0, 0, -1, 1), (0, 0, 0, 1, 0), (0, 0, 1, 0, -1)] (A line in the direction (1, 1, 0, 0, -1),) 
 [(-1, -1, 0, 0, 1), (0, 0, 1, 0, -1), (0, 1, 0, -1, 0), (1, 1, 0, 1, -1)] () 

q       
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: for v in sortables(A,c[1:]):
....:     print("sortable: ",v,"\n")
....:     for seq in Kbackwards(c[1:],v):
....:         P=p_lambda_cone(B(A,c),lam(A,v),[seq])
....:         Q=p_lambda_cone(B(A,c),lam(A,v),[[c[0]]+seq])
....:         R=P.intersection(Q)
....:         Bprime=B(A,c)
....:         Bprime.set_column(c[0],[0]*A.nrows())
....:         S=p_lambda_cone(Bprime,lam(A,v),[seq])
....:         if R!=S:
....:             print("sequence: ",seq,"\n",sorted(list(map(vector,P.rays())))
....: ,P.lines(),"\n",sorted(list(map(vector,Q.rays()))),Q.lines(),"\n",sorted(l
....: ist(map(vector,R.rays()))),R.lines(),"\n",sorted(list(map(vector,S.rays())
....: )),S.lines(),"\n")
....:     if input()=="q":
....:         break
sortable:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4] 
 [(-1, 0, 0, 0, 1), (0, 0, 1, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (0, 1, 0, 0, 0)) 
 [(-1, 0, 0, 0, 1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (0, 0, 1, 0, -1), A line in the direction (1, 1, 0, 0, -1)) 
 [(-1, -1, 0, 0, 1), (0, 0, 1, 0, -1), (0, 1, 0, 0, 0)] (A line in the direction (0, 0, 0, 1, 0),) 
 [(-1, -1, 0, -1, 1), (0, 0, 0, 1, 0), (0, 0, 1, 0, -1), (0, 1, 0, -1, 0)] () 


sortable:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 


sortable:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 


sortable:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1] 


sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 3, 4] 
 [(-1, 0, 0, 0, 1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (0, 0, 1, 0, -1), A line in the direction (0, 1, 0, 0, 0)) 
 [(-1, 0, 0, -2, 1), (0, 0, 0, 1, 0)] (A line in the direction (0, 0, 1, 1, -1), A line in the direction (1, 1, 0, 1, -1)) 
 [(-1, -1, 0, -1, 1), (0, 0, 0, 1, 0), (0, 1, 0, -1, 0)] (A line in the direction (0, 0, 1, 1, -1),) 
 [(-1, -1, 0, -1, 1), (0, 0, -1, 0, 1), (0, 0, 1, 1, -1), (0, 1, 0, -1, 0)] () 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 3, 4, 1] 
 [] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, 0, 0, -1), A line in the direction (0, 1, 0, 0, 0), A line in the direction (0, 0, 1, 0, -1)) 
 [(-1, -1, -1, -1, 2), (0, 0, 1, 1, -1), (0, 1, 0, -1, 0), (1, 1, -1, 0, 0)] () 
 [(-1, -1, -1, -1, 2), (0, 0, 1, 1, -1), (0, 1, 0, -1, 0), (1, 1, -1, 0, 0)] () 
 [(-1, -1, -1, -1, 2), (0, 0, 1, 1, -1), (0, 1, 0, -1, 0), (1, 1, 0, 1, -1)] () 

sortable:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 3, 4] 
 [] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, 0, 0, -1), A line in the direction (0, 1, 0, 0, 0), A line in the direction (0, 0, 1, 0, -1)) 
 [(-1, -1, -1, -1, 2), (0, 0, 1, 1, -1), (0, 1, 0, -1, 0), (1, 1, -1, 0, 0)] () 
 [(-1, -1, -1, -1, 2), (0, 0, 1, 1, -1), (0, 1, 0, -1, 0), (1, 1, -1, 0, 0)] () 
 [(-1, -1, -1, -1, 2), (0, 0, 1, 1, -1), (0, 1, 0, -1, 0), (1, 1, 0, 1, -1)] () 


sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 3, 4] 
 [(0, 0, 0, -1, 0)] (A line in the direction (0, 0, 1, 1, -1), A line in the direction (1, 0, 0, 1, -1), A line in the direction (0, 1, 0, -1, 0)) 
 [(-1, 0, 0, -2, 1), (0, 0, 0, 1, 0)] (A line in the direction (0, 0, 1, 1, -1), A line in the direction (1, 1, 0, 1, -1)) 
 [(-1, -1, 0, -1, 1), (-1, -1, 0, 0, 1), (0, 1, 0, -1, 0)] (A line in the direction (0, 0, 1, 1, -1),) 
 [(-1, -1, -1, -1, 2), (-1, -1, 0, -1, 1), (0, 0, 1, 1, -1), (0, 1, 0, -1, 0)] () 

sortable:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2] 

q
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     print("sortable: ",v,"\n")
....:     for seq in Kbackwards(c[1:],v):
....:         P=p_lambda_cone(B(A,c),lam(A,v),[seq])
....:         Q=p_lambda_cone(B(A,c),lam(A,v),[[c[0]]+seq])
....:         R=P.intersection(Q)
....:         Bprime=B(A,c)
....:         Bprime.set_column(c[0],[0]*A.nrows())
....:         S=p_lambda_cone(Bprime,lam(A,v),[seq])
....:         if R!=S:
....:             print("sequence: ",seq,"\n",sorted(list(map(vector,P.rays())))
....: ,P.lines(),"\n",sorted(list(map(vector,Q.rays()))),Q.lines(),"\n",sorted(l
....: ist(map(vector,R.rays()))),R.lines(),"\n",sorted(list(map(vector,S.rays())
....: )),S.lines(),"\n")
....:             if input()=="q":
....:                 break
....: 
sortable:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4] 
 [(-1, 0, 0, 0, 1), (0, 0, 1, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (0, 1, 0, 0, 0)) 
 [(-1, 0, 0, 0, 1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (0, 0, 1, 0, -1), A line in the direction (1, 1, 0, 0, -1)) 
 [(-1, -1, 0, 0, 1), (0, 0, 1, 0, -1), (0, 1, 0, 0, 0)] (A line in the direction (0, 0, 0, 1, 0),) 
 [(-1, -1, 0, -1, 1), (0, 0, 0, 1, 0), (0, 0, 1, 0, -1), (0, 1, 0, -1, 0)] () 


sortable:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 

sortable:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 

sortable:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 3, 4] 
 [(-1, 0, 0, 0, 1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (0, 0, 1, 0, -1), A line in the direction (0, 1, 0, 0, 0)) 
 [(-1, 0, 0, -2, 1), (0, 0, 0, 1, 0)] (A line in the direction (0, 0, 1, 1, -1), A line in the direction (1, 1, 0, 1, -1)) 
 [(-1, -1, 0, -1, 1), (0, 0, 0, 1, 0), (0, 1, 0, -1, 0)] (A line in the direction (0, 0, 1, 1, -1),) 
 [(-1, -1, 0, -1, 1), (0, 0, -1, 0, 1), (0, 0, 1, 1, -1), (0, 1, 0, -1, 0)] () 


sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 3, 4, 1] 
 [] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, 0, 0, -1), A line in the direction (0, 1, 0, 0, 0), A line in the direction (0, 0, 1, 0, -1)) 
 [(-1, -1, -1, -1, 2), (0, 0, 1, 1, -1), (0, 1, 0, -1, 0), (1, 1, -1, 0, 0)] () 
 [(-1, -1, -1, -1, 2), (0, 0, 1, 1, -1), (0, 1, 0, -1, 0), (1, 1, -1, 0, 0)] () 
 [(-1, -1, -1, -1, 2), (0, 0, 1, 1, -1), (0, 1, 0, -1, 0), (1, 1, 0, 1, -1)] () 


sortable:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 3, 4] 
 [] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, 0, 0, -1), A line in the direction (0, 1, 0, 0, 0), A line in the direction (0, 0, 1, 0, -1)) 
 [(-1, -1, -1, -1, 2), (0, 0, 1, 1, -1), (0, 1, 0, -1, 0), (1, 1, -1, 0, 0)] () 
 [(-1, -1, -1, -1, 2), (0, 0, 1, 1, -1), (0, 1, 0, -1, 0), (1, 1, -1, 0, 0)] () 
 [(-1, -1, -1, -1, 2), (0, 0, 1, 1, -1), (0, 1, 0, -1, 0), (1, 1, 0, 1, -1)] () 


sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 3, 4] 
 [(0, 0, 0, -1, 0)] (A line in the direction (0, 0, 1, 1, -1), A line in the direction (1, 0, 0, 1, -1), A line in the direction (0, 1, 0, -1, 0)) 
 [(-1, 0, 0, -2, 1), (0, 0, 0, 1, 0)] (A line in the direction (0, 0, 1, 1, -1), A line in the direction (1, 1, 0, 1, -1)) 
 [(-1, -1, 0, -1, 1), (-1, -1, 0, 0, 1), (0, 1, 0, -1, 0)] (A line in the direction (0, 0, 1, 1, -1),) 
 [(-1, -1, -1, -1, 2), (-1, -1, 0, -1, 1), (0, 0, 1, 1, -1), (0, 1, 0, -1, 0)] () 


sortable:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2] 

sortable:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1] 

sortable:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 

sortable:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 4, 1] 
 [(-1, 0, 0, -1, 1), (0, 0, 0, 1, 0)] (A line in the direction (0, 0, 1, 0, -1), A line in the direction (0, 1, 0, 0, 0)) 
 [(0, 0, 0, 1, 0)] (A line in the direction (0, 0, 1, 1, -1), A line in the direction (1, 0, 0, 2, -1), A line in the direction (0, 1, 0, -1, 0)) 
 [(-1, 0, 1, -1, 0), (0, 0, -1, 0, 1), (0, 0, 1, 1, -1)] (A line in the direction (0, 1, 1, 0, -1),) 
 [(-1, -1, 0, -1, 1), (0, -1, 0, 1, 0), (0, 0, -1, 0, 1), (0, 1, 1, 0, -1)] () 

q
sortable:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 4] 
 [(0, 0, 0, 1, 0)] (A line in the direction (0, 0, 1, 0, -1), A line in the direction (1, 0, 0, 1, -1), A line in the direction (0, 1, 0, 0, 0)) 
 [(-1, -1, -1, -1, 2), (0, -1, 0, 1, 0), (0, 1, 1, 0, -1), (1, 1, -1, 0, 0)] () 
 [(-1, -1, -1, -1, 2), (0, -1, 0, 1, 0), (0, 1, 1, 0, -1), (1, 0, -1, 1, 0)] () 
 [(-1, -1, -1, -1, 2), (0, -1, 0, 1, 0), (0, 1, 1, 0, -1), (1, 1, 0, 1, -1)] () 

q
sortable:  [1, 2, 3, 4, 1, 2, 3, 4, 1] 

sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 4] 
 [(-1, 0, 0, 0, 1), (1, 0, 0, 1, -1)] (A line in the direction (0, 0, 1, 0, -1), A line in the direction (0, 1, 0, 0, 0)) 
 [(-1, -2, -1, 0, 2), (0, 1, 1, 0, -1), (1, 1, -1, 0, 0), (1, 1, 1, 1, -2)] () 
 [(-1, -2, -1, 0, 2), (0, -1, -2, 0, 2), (0, 1, 1, 0, -1), (1, 1, 1, 1, -2)] () 
 [(-1, -2, -1, 0, 2), (0, 0, -1, 0, 1), (0, 1, 1, 0, -1), (1, 1, 1, 1, -2)] () 

^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [931], line 16
     14 if R!=S:
     15     print("sequence: ",seq,"\n",sorted(list(map(vector,P.rays()))),P.lines(),"\n",sorted(list(map(vector,Q.rays()))),Q.lines(),"\n",sorted(list(map(vector,R.rays()))),R.lines(),"\n",sorted(list(map(vector,S.rays()))),S.lines(),"\n")
---> 16     if input()=="q":
     17         break

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),list(sortables(A,c[1:])))
....:     Q=p_lambda_int(B(A,c),lam(A,v),list([c[0]]+v for v in sortables(A,c[1:
....: ])))
....: 

sage: 
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),list(sortables(A,c[1:])))
....:     Q=p_lambda_int(B(A,c),lam(A,v),list([c[0]]+v for v in sortables(A,c[1:
....: ])))
....: 
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),list(sortables(A,c[1:])))
....:     Q=p_lambda_int(B(A,c),lam(A,v),list([c[0]]+v for v in sortables(A,c[1:
....: ])))
....:     R=P.intersection(Q)
....:         print("sequence: ",seq,"\n",sorted(list(map(vector,P.rays()))),P.l
....: ines(),"\n",sorted(list(map(vector,Q.rays()))),Q.lines(),"\n")
....:         if input()=="q":
....:         break
....: 
....: 
  Cell In [934], line 9
    print("sequence: ",seq,"\n",sorted(list(map(vector,P.rays()))),P.lines(),"\n",sorted(list(map(vector,Q.rays()))),Q.lines(),"\n")
    ^
IndentationError: unexpected indent

sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),list(sortables(A,c[1:])))
....:     Q=p_lambda_int(B(A,c),lam(A,v),list([c[0]]+v for v in sortables(A,c[1:
....: ])))
....:     R=P.intersection(Q)
....:     print("sequence: ",seq,"\n",sorted(list(map(vector,P.rays()))),P.lines
....: (),"\n",sorted(list(map(vector,Q.rays()))),Q.lines(),"\n")
....:     if input()=="q":
....:         break
sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 4] 
 [(0, -1, 0)] () 
 [(0, 1, 0)] () 

        
sequence:  [1, 2, 3, 4, 1, 2, 3, 4, 1, 4] 
 [(0, -1, 0)] () 
 [(0, 1, 0)] () 

q           
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),list(sortables(A,c[1:])))
....:     Q=p_lambda_int(B(A,c),lam(A,v),list([c[0]]+v for v in sortables(A,c[1:
....: ])))
....:     R=P.intersection(Q)
....:     print(sorted(list(map(vector,P.rays()))),P.lines(),"\n",sorted(list(ma
....: p(vector,Q.rays()))),Q.lines(),"\n")
....: if input()=="q":
....:     break
[(0, -1, 0)] () 
 [(0, 1, 0)] () 

[(0, -1, 0)] () 
 [(0, 1, 0)] () 

[(0, -1, 0)] () 
 [(0, 1, 0)] () 

[(0, -1, 0)] () 
 [(0, 1, 0)] () 

[(0, -1, 0)] () 
 [(0, 1, 0)] () 

[(0, -1, 0)] () 
 [(0, 1, 0)] () 

  Cell In [936], line 11
    break
    ^
SyntaxError: 'break' outside loop

sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),list(sortables(A,c[1:])))
....:     Q=p_lambda_int(B(A,c),lam(A,v),list([c[0]]+v for v in sortables(A,c[1:
....: ])))
....:     R=P.intersection(Q)
....:     print(sorted(list(map(vector,P.rays()))),P.lines(),"\n",sorted(list(ma
....: p(vector,Q.rays()))),Q.lines(),"\n")
....:     if input()=="q":
....:         break
....: 
[(0, -1, 0)] () 
 [(0, 1, 0)] () 

q       
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),list(sortables(A,c[1:])))
....:     Q=p_lambda_int(B(A,c),lam(A,v),list([c[0]]+v for v in sortables(A,c[1:
....: ])))
....:     R=P.intersection(Q)
....:     print(sorted(list(map(vector,P.rays()))),P.lines(),"\n",sorted(list(ma
....: p(vector,Q.rays()))),Q.lines(),"\n")
....: 
[(0, -1, 0)] () 
 [(0, 1, 0)] () 

[(0, -1, 0)] () 
 [(0, 1, 0)] () 

[(0, -1, 0)] () 
 [(0, 1, 0)] () 

[(0, -1, 0)] () 
 [(0, 1, 0)] () 

[(0, -1, 0)] () 
 [(0, 1, 0)] () 

[(0, -1, 0)] () 
 [(0, 1, 0)] () 

sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),list(sortables(A,c[1:])))
....:     Q=p_lambda_int(B(A,c),lam(A,v),list([c[0]]+v for v in sortables(A,c[1:
....: ])))
....:     R=P.intersection(Q)
....:     print(num,v,"\n",sorted(list(map(vector,P.rays()))),P.lines(),"\n",sor
....: ted(list(map(vector,Q.rays()))),Q.lines(),"\n")
1 [1, 2, 1, 2] 
 [(0, -1, 0)] () 
 [(0, 1, 0)] () 

2 [1, 2, 1] 
 [(0, -1, 0)] () 
 [(0, 1, 0)] () 

3 [1, 2] 
 [(0, -1, 0)] () 
 [(0, 1, 0)] () 

4 [1] 
 [(0, -1, 0)] () 
 [(0, 1, 0)] () 

5 [2] 
 [(0, -1, 0)] () 
 [(0, 1, 0)] () 

6 [] 
 [(0, -1, 0)] () 
 [(0, 1, 0)] () 

sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),list(sortables(A,c[1:])))
....:     Q=p_lambda_int(B(A,c),lam(A,v),list([c[0]]+v for v in sortables(A,c[1:
....: ])))
....:     R=P.intersection(Q)
....:     print(num,v,"\n",sorted(list(map(vector,P.rays()))),P.lines(),"\n",sor
....: ted(map(vector,Q.rays())),Q.lines(),"\n")
1 [1, 2, 1, 2] 
 [(0, -1, 0)] () 
 [(0, 1, 0)] () 

2 [1, 2, 1] 
 [(0, -1, 0)] () 
 [(0, 1, 0)] () 

3 [1, 2] 
 [(0, -1, 0)] () 
 [(0, 1, 0)] () 

4 [1] 
 [(0, -1, 0)] () 
 [(0, 1, 0)] () 

5 [2] 
 [(0, -1, 0)] () 
 [(0, 1, 0)] () 

6 [] 
 [(0, -1, 0)] () 
 [(0, 1, 0)] () 

sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),list(sortables(A,c[1:])))
....:     Q=p_lambda_int(B(A,c),lam(A,v),list([c[0]]+v for v in sortables(A,c[1:
....: ])))
....:     R=P.intersection(Q)
....:     print(num,v,"\n",sorted(map(vector,P.rays())),P.lines(),"\n",sorted(ma
....: p(vector,Q.rays())),Q.lines(),"\n")
1 [1, 2, 1, 2] 
 [(0, -1, 0)] () 
 [(0, 1, 0)] () 

2 [1, 2, 1] 
 [(0, -1, 0)] () 
 [(0, 1, 0)] () 

3 [1, 2] 
 [(0, -1, 0)] () 
 [(0, 1, 0)] () 

4 [1] 
 [(0, -1, 0)] () 
 [(0, 1, 0)] () 

5 [2] 
 [(0, -1, 0)] () 
 [(0, 1, 0)] () 

6 [] 
 [(0, -1, 0)] () 
 [(0, 1, 0)] () 

sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_cone(B(A,c),lam(A,v),list(sortables(A,c[1:])))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list([c[0]]+v for v in sortables(A,c[1
....: :])))
....:     R=P.intersection(Q)
....:     print(num,v,"\n",sorted(map(vector,P.rays())),P.lines(),"\n",sorted(ma
....: p(vector,Q.rays())),Q.lines(),"\n")
1 [1, 2, 1, 2] 
 [(0, -1, 0)] () 
 [(0, 1, 0), (1, 1, -1)] () 

2 [1, 2, 1] 
 [(0, -1, 0)] () 
 [(0, 1, 0), (1, 1, -1)] () 

3 [1, 2] 
 [(0, -1, 0), (1, 1, -1)] () 
 [(0, 1, 0), (1, 1, -1)] () 

4 [1] 
 [(0, -1, 0), (1, 1, -1)] () 
 [(0, 1, 0), (1, 1, -1)] () 

5 [2] 
 [(0, -1, 0), (1, -1, -1)] () 
 [(0, 1, 0)] () 

6 [] 
 [(0, -1, 0), (1, 1, -1)] () 
 [(0, 1, 0)] () 

sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_cone(B(A,c),lam(A,v),list(sortables(A,c[1:])))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list([c[0]]+v for v in sortables(A,c[1
....: :])))
....:     R=P.intersection(Q)
....:     print(num,v,"\n",sorted(map(vector,P.rays())),P.lines(),"\n",sorted(ma
....: p(vector,Q.rays())),Q.lines(),"\n",sorted(map(vector(R.rays())),R.lines())
....: )
....: 
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In [943], line 9
      7 Q=p_lambda_cone(B(A,c),lam(A,v),list([c[Integer(0)]]+v for v in sortables(A,c[Integer(1):])))
      8 R=P.intersection(Q)
----> 9 print(num,v,"\n",sorted(map(vector,P.rays())),P.lines(),"\n",sorted(map(vector,Q.rays())),Q.lines(),"\n",sorted(map(vector(R.rays())),R.lines()))

TypeError: map() must have at least two arguments.
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_cone(B(A,c),lam(A,v),list(sortables(A,c[1:])))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list([c[0]]+v for v in sortables(A,c[1
....: :])))
....:     R=P.intersection(Q)
....:     print(num,v,"\n",sorted(map(vector,P.rays())),P.lines(),"\n",sorted(ma
....: p(vector,Q.rays())),Q.lines(),"\n",sorted(map(vector,R.rays())),R.lines())
....: )
  Cell In [944], line 9
    print(num,v,"\n",sorted(map(vector,P.rays())),P.lines(),"\n",sorted(map(vector,Q.rays())),Q.lines(),"\n",sorted(map(vector,R.rays())),R.lines()))
                                                                                                                                                    ^
SyntaxError: unmatched ')'

sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_cone(B(A,c),lam(A,v),list(sortables(A,c[1:])))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list([c[0]]+v for v in sortables(A,c[1
....: :])))
....:     R=P.intersection(Q)
....:     print(num,v,"\n",sorted(map(vector,P.rays())),P.lines(),"\n",sorted(ma
....: p(vector,Q.rays())),Q.lines(),"\n",sorted(map(vector,R.rays())),R.lines())
....: )
  Cell In [945], line 9
    print(num,v,"\n",sorted(map(vector,P.rays())),P.lines(),"\n",sorted(map(vector,Q.rays())),Q.lines(),"\n",sorted(map(vector,R.rays())),R.lines()))
                                                                                                                                                    ^
SyntaxError: unmatched ')'

sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_cone(B(A,c),lam(A,v),list(sortables(A,c[1:])))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list([c[0]]+v for v in sortables(A,c[1
....: :])))
....:     R=P.intersection(Q)
....:     print(num,v,"\n",sorted(map(vector,P.rays())),P.lines(),"\n",sorted(ma
....: p(vector,Q.rays())),Q.lines(),"\n",sorted(map(vector,R.rays())),R.lines())
....: 
....: 
1 [1, 2, 1, 2] 
 [(0, -1, 0)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [] ()
2 [1, 2, 1] 
 [(0, -1, 0)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [] ()
3 [1, 2] 
 [(0, -1, 0), (1, 1, -1)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [(1, 1, -1)] ()
4 [1] 
 [(0, -1, 0), (1, 1, -1)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [(1, 1, -1)] ()
5 [2] 
 [(0, -1, 0), (1, -1, -1)] () 
 [(0, 1, 0)] () 
 [] ()
6 [] 
 [(0, -1, 0), (1, 1, -1)] () 
 [(0, 1, 0)] () 
 [] ()
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_cone(B(A,c),lam(A,v),list(sortables(A,c[1:])))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list([c[0]]+v for v in sortables(A,c[1
....: :])))
....:     R=P.intersection(Q)
....:     print(num,v,"\n",sorted(map(vector,P.rays())),P.lines(),"\n",sorted(ma
....: p(vector,Q.rays())),Q.lines(),"\n",sorted(map(vector,R.rays())),R.lines())
....: 

1 [1, 2, 3, 1, 2, 3, 1, 2, 3] 
 [(0, -1, 0, 0)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0)] () 
 [] ()
2 [1, 2, 3, 1, 2, 3, 1, 2] 
 [(0, -1, 0, 0)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0)] () 
 [] ()
3 [1, 2, 3, 1, 2, 3, 1] 
 [(0, -1, 0, 0)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (1, 2, 1, -1)] () 
 [] ()
4 [1, 2, 3, 1, 2, 3] 
 [(0, -1, 0, 0), (1, 0, 1, -1)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0)] () 
 [] ()
5 [1, 2, 3, 1, 2, 1] 
 [(0, -1, 0, 0)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (1, 2, 1, -1), (1, 3, 1, -2)] () 
 [] ()
6 [1, 2, 3, 1, 2] 
 [(0, -1, 0, 0), (1, 0, 1, -1)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (1, 3, 1, -2)] () 
 [] ()
7 [1, 2, 3, 1] 
 [(0, -1, 0, 0), (1, 0, 1, -1), (1, 1, 1, -2)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (2, 3, 0, -2)] () 
 [] ()
8 [1, 2, 3, 2, 3] 
 [(0, -1, 0, 0)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (1, 2, -1, -1)] () 
 [] ()
9 [1, 2, 3, 2] 
 [(0, -1, 0, 0)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (1, 2, -1, -1), (1, 2, 1, -1)] () 
 [] ()
10 [1, 2, 3] 
 [(0, -1, 0, 0), (1, 0, 1, -1)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (1, 2, -1, -1), (2, 3, 0, -2)] () 
 [] ()
11 [1, 2, 1] 
 [(0, -1, 0, 0), (1, 0, 1, -1), (1, 1, 1, -2), (2, 1, 0, -2)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0)] () 
 [] ()
12 [1, 2] 
 [(0, -1, 0, 0), (1, 0, 1, -1), (2, 1, 0, -2)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (1, 2, -1, -1)] () 
 [] ()
13 [1, 3] 
 [(0, -1, 0, 0), (1, 0, -1, -1)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0)] () 
 [] ()
14 [1] 
 [(0, -1, 0, 0), (1, 0, -1, -1), (1, 0, 1, -1)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0)] () 
 [] ()
15 [2, 3, 2, 3] 
 [(0, -1, 0, 0), (1, -1, -1, 0)] () 
 [(0, 1, 0, 0)] () 
 [] ()
16 [2, 3, 2] 
 [(0, -1, 0, 0), (1, -1, -1, 0)] () 
 [(0, 1, 0, 0)] () 
 [] ()
17 [2, 3] 
 [(0, -1, 0, 0), (1, -1, -1, 0), (1, 0, 1, -1)] () 
 [(0, 1, 0, 0)] () 
 [] ()
18 [2] 
 [(0, -1, 0, 0), (1, -1, -1, 0), (1, 0, 1, -1), (1, 1, 1, -2)] () 
 [(0, 1, 0, 0)] () 
 [] ()
19 [3] 
 [(0, -1, 0, 0), (1, -1, -1, 0), (1, 0, -1, -1)] () 
 [(0, 1, 0, 0)] () 
 [] ()
20 [] 
 [(0, -1, 0, 0), (1, -1, -1, 0), (1, 0, -1, -1), (1, 0, 1, -1)] () 
 [(0, 1, 0, 0)] () 
 [] ()
sage: 
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_cone(B(A,c),lam(A,v),list(sortables(A,c[1:])))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list([c[0]]+v for v in sortables(A,c[1
....: :])))
....:     R=P.intersection(Q)
....:     print(num,v,"\n",sorted(map(vector,P.rays())),P.lines(),"\n",sorted(ma
....: p(vector,Q.rays())),Q.lines(),"\n",sorted(map(vector,R.rays())),R.lines(),
....: "\n")
....: 
1 [1, 2, 3, 1, 2, 3, 1, 2, 3] 
 [(0, -1, 0, 0)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0)] () 
 [] () 

2 [1, 2, 3, 1, 2, 3, 1, 2] 
 [(0, -1, 0, 0)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0)] () 
 [] () 

3 [1, 2, 3, 1, 2, 3, 1] 
 [(0, -1, 0, 0)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (1, 2, 1, -1)] () 
 [] () 

4 [1, 2, 3, 1, 2, 3] 
 [(0, -1, 0, 0), (1, 0, 1, -1)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0)] () 
 [] () 

5 [1, 2, 3, 1, 2, 1] 
 [(0, -1, 0, 0)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (1, 2, 1, -1), (1, 3, 1, -2)] () 
 [] () 

6 [1, 2, 3, 1, 2] 
 [(0, -1, 0, 0), (1, 0, 1, -1)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (1, 3, 1, -2)] () 
 [] () 

7 [1, 2, 3, 1] 
 [(0, -1, 0, 0), (1, 0, 1, -1), (1, 1, 1, -2)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (2, 3, 0, -2)] () 
 [] () 

8 [1, 2, 3, 2, 3] 
 [(0, -1, 0, 0)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (1, 2, -1, -1)] () 
 [] () 

9 [1, 2, 3, 2] 
 [(0, -1, 0, 0)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (1, 2, -1, -1), (1, 2, 1, -1)] () 
 [] () 

10 [1, 2, 3] 
 [(0, -1, 0, 0), (1, 0, 1, -1)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (1, 2, -1, -1), (2, 3, 0, -2)] () 
 [] () 

11 [1, 2, 1] 
 [(0, -1, 0, 0), (1, 0, 1, -1), (1, 1, 1, -2), (2, 1, 0, -2)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0)] () 
 [] () 

12 [1, 2] 
 [(0, -1, 0, 0), (1, 0, 1, -1), (2, 1, 0, -2)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (1, 2, -1, -1)] () 
 [] () 

13 [1, 3] 
 [(0, -1, 0, 0), (1, 0, -1, -1)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0)] () 
 [] () 

14 [1] 
 [(0, -1, 0, 0), (1, 0, -1, -1), (1, 0, 1, -1)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0)] () 
 [] () 

15 [2, 3, 2, 3] 
 [(0, -1, 0, 0), (1, -1, -1, 0)] () 
 [(0, 1, 0, 0)] () 
 [] () 

16 [2, 3, 2] 
 [(0, -1, 0, 0), (1, -1, -1, 0)] () 
 [(0, 1, 0, 0)] () 
 [] () 

17 [2, 3] 
 [(0, -1, 0, 0), (1, -1, -1, 0), (1, 0, 1, -1)] () 
 [(0, 1, 0, 0)] () 
 [] () 

18 [2] 
 [(0, -1, 0, 0), (1, -1, -1, 0), (1, 0, 1, -1), (1, 1, 1, -2)] () 
 [(0, 1, 0, 0)] () 
 [] () 

19 [3] 
 [(0, -1, 0, 0), (1, -1, -1, 0), (1, 0, -1, -1)] () 
 [(0, 1, 0, 0)] () 
 [] () 

20 [] 
 [(0, -1, 0, 0), (1, -1, -1, 0), (1, 0, -1, -1), (1, 0, 1, -1)] () 
 [(0, 1, 0, 0)] () 
 [] () 

sage: B(A,c)
[ 0  1  0  0]
[-1  0  1  0]
[ 0 -1  0  2]
[ 0  0 -1  0]
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_cone(B(A,c),lam(A,v),list(sortables(A,c[1:])))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list([c[0]]+v for v in sortables(A,c[1
....: :])))
....:     R=P.intersection(Q)
....:     print(num,v,"\n",sorted(map(vector,P.rays())),P.lines(),"\n",sorted(ma
....: p(vector,Q.rays())),Q.lines(),"\n",sorted(map(vector,R.rays())),R.lines(),
....: "\n")
1 [1, 2, 1, 2] 
 [(0, -1, 0)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [] () 

2 [1, 2, 1] 
 [(0, -1, 0)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [] () 

3 [1, 2] 
 [(0, -1, 0), (1, 1, -1)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [(1, 1, -1)] () 

4 [1] 
 [(0, -1, 0), (1, 1, -1)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [(1, 1, -1)] () 

5 [2] 
 [(0, -1, 0), (1, -1, -1)] () 
 [(0, 1, 0)] () 
 [] () 

6 [] 
 [(0, -1, 0), (1, 1, -1)] () 
 [(0, 1, 0)] () 
 [] () 

sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_cone(B(A,c),lam(A,v),list(sortables(A,c[1:])))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list([c[0]]+v for v in sortables(A,c[1
....: :])))
....:     R=P.intersection(Q)
....:     print(num,v,"\n",sorted(map(vector,P.rays())),P.lines(),"\n",sorted(ma
....: p(vector,Q.rays())),Q.lines(),"\n",sorted(map(vector,R.rays())),R.lines(),
....: "\n")
....: 
1 [1, 2, 3, 1, 2, 3, 1, 2, 3] 
 [(0, -1, 0, 0)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0)] () 
 [] () 

2 [1, 2, 3, 1, 2, 3, 1, 2] 
 [(0, -1, 0, 0)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0)] () 
 [] () 

3 [1, 2, 3, 1, 2, 3, 1] 
 [(0, -1, 0, 0)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (1, 2, 1, -1)] () 
 [] () 

4 [1, 2, 3, 1, 2, 3] 
 [(0, -1, 0, 0), (1, 0, 1, -1)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0)] () 
 [] () 

5 [1, 2, 3, 1, 2, 1] 
 [(0, -1, 0, 0)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (1, 2, 1, -1), (1, 3, 1, -2)] () 
 [] () 

6 [1, 2, 3, 1, 2] 
 [(0, -1, 0, 0), (1, 0, 1, -1)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (1, 3, 1, -2)] () 
 [] () 

7 [1, 2, 3, 1] 
 [(0, -1, 0, 0), (1, 0, 1, -1), (1, 1, 1, -2)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (2, 3, 0, -2)] () 
 [] () 

8 [1, 2, 3, 2, 3] 
 [(0, -1, 0, 0)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (1, 2, -1, -1)] () 
 [] () 

9 [1, 2, 3, 2] 
 [(0, -1, 0, 0)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (1, 2, -1, -1), (1, 2, 1, -1)] () 
 [] () 

10 [1, 2, 3] 
 [(0, -1, 0, 0), (1, 0, 1, -1)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (1, 2, -1, -1), (2, 3, 0, -2)] () 
 [] () 

11 [1, 2, 1] 
 [(0, -1, 0, 0), (1, 0, 1, -1), (1, 1, 1, -2), (2, 1, 0, -2)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0)] () 
 [] () 

12 [1, 2] 
 [(0, -1, 0, 0), (1, 0, 1, -1), (2, 1, 0, -2)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (1, 2, -1, -1)] () 
 [] () 

13 [1, 3] 
 [(0, -1, 0, 0), (1, 0, -1, -1)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0)] () 
 [] () 

14 [1] 
 [(0, -1, 0, 0), (1, 0, -1, -1), (1, 0, 1, -1)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0)] () 
 [] () 

15 [2, 3, 2, 3] 
 [(0, -1, 0, 0), (1, -1, -1, 0)] () 
 [(0, 1, 0, 0)] () 
 [] () 

16 [2, 3, 2] 
 [(0, -1, 0, 0), (1, -1, -1, 0)] () 
 [(0, 1, 0, 0)] () 
 [] () 

17 [2, 3] 
 [(0, -1, 0, 0), (1, -1, -1, 0), (1, 0, 1, -1)] () 
 [(0, 1, 0, 0)] () 
 [] () 

18 [2] 
 [(0, -1, 0, 0), (1, -1, -1, 0), (1, 0, 1, -1), (1, 1, 1, -2)] () 
 [(0, 1, 0, 0)] () 
 [] () 

19 [3] 
 [(0, -1, 0, 0), (1, -1, -1, 0), (1, 0, -1, -1)] () 
 [(0, 1, 0, 0)] () 
 [] () 

20 [] 
 [(0, -1, 0, 0), (1, -1, -1, 0), (1, 0, -1, -1), (1, 0, 1, -1)] () 
 [(0, 1, 0, 0)] () 
 [] () 

sage: B(A,c)
[ 0  1  0  0]
[-1  0  1  0]
[ 0 -1  0  2]
[ 0  0 -1  0]
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_cone(B(A,c),lam(A,v),list(sortables(A,c[1:])))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list([c[0]]+v for v in sortables(A,c[1
....: :])))
....:     R=P.intersection(Q)
....:     print(num,v,"\n",sorted(map(vector,P.rays())),P.lines(),"\n",sorted(ma
....: p(vector,Q.rays())),Q.lines(),"\n",sorted(map(vector,R.rays())),R.lines(),
....: "\n")
....: 
1 [1, 2, 3, 1, 2, 3, 1, 2, 3] 
 [(0, -1, 0, 0)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0)] () 
 [] () 

2 [1, 2, 3, 1, 2, 3, 1, 2] 
 [(0, -1, 0, 0)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0)] () 
 [] () 

3 [1, 2, 3, 1, 2, 3, 1] 
 [(0, -1, 0, 0)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (1, 2, 1, -1)] () 
 [] () 

4 [1, 2, 3, 1, 2, 3] 
 [(0, -1, 0, 0), (1, 0, 1, -1)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0)] () 
 [] () 

5 [1, 2, 3, 1, 2, 1] 
 [(0, -1, 0, 0)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (1, 2, 1, -1), (1, 3, 1, -2)] () 
 [] () 

6 [1, 2, 3, 1, 2] 
 [(0, -1, 0, 0), (1, 0, 1, -1)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (1, 3, 1, -2)] () 
 [] () 

7 [1, 2, 3, 1] 
 [(0, -1, 0, 0), (1, 0, 1, -1), (1, 1, 1, -2)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (2, 3, 0, -2)] () 
 [] () 

8 [1, 2, 3, 2, 3] 
 [(0, -1, 0, 0)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (1, 2, -1, -1)] () 
 [] () 

9 [1, 2, 3, 2] 
 [(0, -1, 0, 0)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (1, 2, -1, -1), (1, 2, 1, -1)] () 
 [] () 

10 [1, 2, 3] 
 [(0, -1, 0, 0), (1, 0, 1, -1)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (1, 2, -1, -1), (2, 3, 0, -2)] () 
 [] () 

11 [1, 2, 1] 
 [(0, -1, 0, 0), (1, 0, 1, -1), (1, 1, 1, -2), (2, 1, 0, -2)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0)] () 
 [] () 

12 [1, 2] 
 [(0, -1, 0, 0), (1, 0, 1, -1), (2, 1, 0, -2)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (1, 2, -1, -1)] () 
 [] () 

13 [1, 3] 
 [(0, -1, 0, 0), (1, 0, -1, -1)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0)] () 
 [] () 

14 [1] 
 [(0, -1, 0, 0), (1, 0, -1, -1), (1, 0, 1, -1)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0)] () 
 [] () 

15 [2, 3, 2, 3] 
 [(0, -1, 0, 0), (1, -1, -1, 0)] () 
 [(0, 1, 0, 0)] () 
 [] () 

16 [2, 3, 2] 
 [(0, -1, 0, 0), (1, -1, -1, 0)] () 
 [(0, 1, 0, 0)] () 
 [] () 

17 [2, 3] 
 [(0, -1, 0, 0), (1, -1, -1, 0), (1, 0, 1, -1)] () 
 [(0, 1, 0, 0)] () 
 [] () 

18 [2] 
 [(0, -1, 0, 0), (1, -1, -1, 0), (1, 0, 1, -1), (1, 1, 1, -2)] () 
 [(0, 1, 0, 0)] () 
 [] () 

19 [3] 
 [(0, -1, 0, 0), (1, -1, -1, 0), (1, 0, -1, -1)] () 
 [(0, 1, 0, 0)] () 
 [] () 

20 [] 
 [(0, -1, 0, 0), (1, -1, -1, 0), (1, 0, -1, -1), (1, 0, 1, -1)] () 
 [(0, 1, 0, 0)] () 
 [] () 

sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_cone(B(A,c),lam(A,v),list(sortables(A,c[1:])))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list([c[0]]+v for v in sortables(A,c[1
....: :])))
....:     R=P.intersection(Q)
....:     print(num,v,"\n",sorted(map(vector,P.rays())),P.lines(),"\n",sorted(ma
....: p(vector,Q.rays())),Q.lines(),"\n",sorted(map(vector,R.rays())),R.lines(),
....: "\n")
1 [1, 2, 1, 2] 
 [(0, -1, 0)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [] () 

2 [1, 2, 1] 
 [(0, -1, 0)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [] () 

3 [1, 2] 
 [(0, -1, 0), (1, 1, -1)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [(1, 1, -1)] () 

4 [1] 
 [(0, -1, 0), (1, 1, -1)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [(1, 1, -1)] () 

5 [2] 
 [(0, -1, 0), (1, -1, -1)] () 
 [(0, 1, 0)] () 
 [] () 

6 [] 
 [(0, -1, 0), (1, 1, -1)] () 
 [(0, 1, 0)] () 
 [] () 

sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_cone(B(A,c),lam(A,v),list(sortables(A,c[1:])))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list([c[0]]+v for v in sortables(A,c[1
....: :])))
....:     R=P.intersection(Q)
....:     print(num,v,"\n",sorted(map(vector,P.rays())),P.lines(),"\n",sorted(ma
....: p(vector,Q.rays())),Q.lines(),"\n",sorted(map(vector,R.rays())),R.lines(),
....: "\n")
1 [1, 2, 3, 1, 2, 3, 1, 2, 3] 
 [(0, -1, 0, 0)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0)] () 
 [] () 

2 [1, 2, 3, 1, 2, 3, 1, 2] 
 [(0, -1, 0, 0)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0)] () 
 [] () 

3 [1, 2, 3, 1, 2, 3, 1] 
 [(0, -1, 0, 0)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (1, 2, 1, -1)] () 
 [] () 

4 [1, 2, 3, 1, 2, 3] 
 [(0, -1, 0, 0), (1, 0, 1, -1)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0)] () 
 [] () 

5 [1, 2, 3, 1, 2, 1] 
 [(0, -1, 0, 0)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (1, 2, 1, -1), (1, 3, 1, -2)] () 
 [] () 

6 [1, 2, 3, 1, 2] 
 [(0, -1, 0, 0), (1, 0, 1, -1)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (1, 3, 1, -2)] () 
 [] () 

7 [1, 2, 3, 1] 
 [(0, -1, 0, 0), (1, 0, 1, -1), (1, 1, 1, -2)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (2, 3, 0, -2)] () 
 [] () 

8 [1, 2, 3, 2, 3] 
 [(0, -1, 0, 0)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (1, 2, -1, -1)] () 
 [] () 

9 [1, 2, 3, 2] 
 [(0, -1, 0, 0)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (1, 2, -1, -1), (1, 2, 1, -1)] () 
 [] () 

10 [1, 2, 3] 
 [(0, -1, 0, 0), (1, 0, 1, -1)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (1, 2, -1, -1), (2, 3, 0, -2)] () 
 [] () 

11 [1, 2, 1] 
 [(0, -1, 0, 0), (1, 0, 1, -1), (1, 1, 1, -2), (2, 1, 0, -2)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0)] () 
 [] () 

12 [1, 2] 
 [(0, -1, 0, 0), (1, 0, 1, -1), (2, 1, 0, -2)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (1, 2, -1, -1)] () 
 [] () 

13 [1, 3] 
 [(0, -1, 0, 0), (1, 0, -1, -1)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0)] () 
 [] () 

14 [1] 
 [(0, -1, 0, 0), (1, 0, -1, -1), (1, 0, 1, -1)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0)] () 
 [] () 

15 [2, 3, 2, 3] 
 [(0, -1, 0, 0), (1, -1, -1, 0)] () 
 [(0, 1, 0, 0)] () 
 [] () 

16 [2, 3, 2] 
 [(0, -1, 0, 0), (1, -1, -1, 0)] () 
 [(0, 1, 0, 0)] () 
 [] () 

17 [2, 3] 
 [(0, -1, 0, 0), (1, -1, -1, 0), (1, 0, 1, -1)] () 
 [(0, 1, 0, 0)] () 
 [] () 

18 [2] 
 [(0, -1, 0, 0), (1, -1, -1, 0), (1, 0, 1, -1), (1, 1, 1, -2)] () 
 [(0, 1, 0, 0)] () 
 [] () 

19 [3] 
 [(0, -1, 0, 0), (1, -1, -1, 0), (1, 0, -1, -1)] () 
 [(0, 1, 0, 0)] () 
 [] () 

20 [] 
 [(0, -1, 0, 0), (1, -1, -1, 0), (1, 0, -1, -1), (1, 0, 1, -1)] () 
 [(0, 1, 0, 0)] () 
 [] () 

sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_cone(B(A,c),lam(A,v),list(sortables(A,c[1:])))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list([c[0]]+v for v in sortables(A,c[1
....: :])))
....:     R=P.intersection(Q)
....:     print(num,v,"\n",sorted(map(vector,P.rays())),P.lines(),"\n",sorted(ma
....: p(vector,Q.rays())),Q.lines(),"\n",sorted(map(vector,R.rays())),R.lines(),
....: "\n")
1 [2, 1, 2, 1] 
 [(0, -1, 0)] () 
 [(0, 1, 0), (1, -1, 1)] () 
 [] () 

2 [2, 1, 2] 
 [(0, -1, 0), (1, -1, 1)] () 
 [(0, 1, 0), (1, -1, 1)] () 
 [(1, -1, 1)] () 

3 [2, 1] 
 [(0, -1, 0), (1, -1, 1)] () 
 [(0, 1, 0), (1, -1, 1)] () 
 [(1, -1, 1)] () 

4 [2] 
 [(0, -1, 0), (1, -1, 1)] () 
 [(0, 1, 0)] () 
 [] () 

5 [1] 
 [(0, -1, 0)] () 
 [(0, 1, 0), (1, 1, 1)] () 
 [] () 

6 [] 
 [(0, -1, 0), (1, -1, 1)] () 
 [(0, 1, 0)] () 
 [] () 

sage: B(A,c)
[ 0  1  0]
[-1  0 -2]
[ 0  1  0]
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_cone(B(A,c),lam(A,v),list(sortables(A,c[1:])))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list([c[0]]+v for v in sortables(A,c[1
....: :])))
....:     R=P.intersection(Q)
....:     print(num,v,"\n",sorted(map(vector,P.rays())),P.lines(),"\n",sorted(ma
....: p(vector,Q.rays())),Q.lines(),"\n",sorted(map(vector,R.rays())),R.lines(),
....: "\n")
....: 
1 [1, 2, 3, 1, 2, 3, 1, 2, 3] 
 [(0, -1, 0, 0)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0)] () 
 [] () 

2 [1, 2, 3, 1, 2, 3, 1, 2] 
 [(0, -1, 0, 0)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0)] () 
 [] () 

3 [1, 2, 3, 1, 2, 3, 1] 
 [(0, -1, 0, 0)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (1, 2, 1, -1)] () 
 [] () 

4 [1, 2, 3, 1, 2, 3] 
 [(0, -1, 0, 0), (1, 0, 1, -1)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0)] () 
 [] () 

5 [1, 2, 3, 1, 2, 1] 
 [(0, -1, 0, 0)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (1, 2, 1, -1), (1, 3, 1, -2)] () 
 [] () 

6 [1, 2, 3, 1, 2] 
 [(0, -1, 0, 0), (1, 0, 1, -1)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (1, 3, 1, -2)] () 
 [] () 

7 [1, 2, 3, 1] 
 [(0, -1, 0, 0), (1, 0, 1, -1), (1, 1, 1, -2)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (2, 3, 0, -2)] () 
 [] () 

8 [1, 2, 3, 2, 3] 
 [(0, -1, 0, 0)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (1, 2, -1, -1)] () 
 [] () 

9 [1, 2, 3, 2] 
 [(0, -1, 0, 0)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (1, 2, -1, -1), (1, 2, 1, -1)] () 
 [] () 

10 [1, 2, 3] 
 [(0, -1, 0, 0), (1, 0, 1, -1)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (1, 2, -1, -1), (2, 3, 0, -2)] () 
 [] () 

11 [1, 2, 1] 
 [(0, -1, 0, 0), (1, 0, 1, -1), (1, 1, 1, -2), (2, 1, 0, -2)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0)] () 
 [] () 

12 [1, 2] 
 [(0, -1, 0, 0), (1, 0, 1, -1), (2, 1, 0, -2)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (1, 2, -1, -1)] () 
 [] () 

13 [1, 3] 
 [(0, -1, 0, 0), (1, 0, -1, -1)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0)] () 
 [] () 

14 [1] 
 [(0, -1, 0, 0), (1, 0, -1, -1), (1, 0, 1, -1)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0)] () 
 [] () 

15 [2, 3, 2, 3] 
 [(0, -1, 0, 0), (1, -1, -1, 0)] () 
 [(0, 1, 0, 0)] () 
 [] () 

16 [2, 3, 2] 
 [(0, -1, 0, 0), (1, -1, -1, 0)] () 
 [(0, 1, 0, 0)] () 
 [] () 

17 [2, 3] 
 [(0, -1, 0, 0), (1, -1, -1, 0), (1, 0, 1, -1)] () 
 [(0, 1, 0, 0)] () 
 [] () 

18 [2] 
 [(0, -1, 0, 0), (1, -1, -1, 0), (1, 0, 1, -1), (1, 1, 1, -2)] () 
 [(0, 1, 0, 0)] () 
 [] () 

19 [3] 
 [(0, -1, 0, 0), (1, -1, -1, 0), (1, 0, -1, -1)] () 
 [(0, 1, 0, 0)] () 
 [] () 

20 [] 
 [(0, -1, 0, 0), (1, -1, -1, 0), (1, 0, -1, -1), (1, 0, 1, -1)] () 
 [(0, 1, 0, 0)] () 
 [] () 

sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: B(A,c)
[ 0  1  0  0]
[-1  0  1  0]
[ 0 -1  0  2]
[ 0  0 -1  0]
sage: A=CartanMatrix(['C',4])
....: c=[1,2,3,0]
....: B(A,c)
[ 0 -1  0  0]
[ 1  0  1  0]
[ 0 -1  0  2]
[ 0  0 -1  0]
sage: A=CartanMatrix(['C',4])
....: c=[2,3,0,1]
....: B(A,c)
[ 0  1  0  0]
[-1  0 -1  0]
[ 0  1  0  2]
[ 0  0 -1  0]
sage: A=CartanMatrix(['C',4])
....: c=[3,0,1,2]
....: B(A,c)
[ 0  1  0  0]
[-1  0  1  0]
[ 0 -1  0 -2]
[ 0  0  1  0]
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: B(A,c)
[ 0  1  0  0  0]
[-1  0  1  0  0]
[ 0 -1  0  1  0]
[ 0  0 -1  0  2]
[ 0  0  0 -1  0]
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_cone(B(A,c),lam(A,v),list(sortables(A,c[1:])))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list([c[0]]+v for v in sortables(A,c[1
....: :])))
....:     R=P.intersection(Q)
....:     print(num,v,"\n",sorted(map(vector,P.rays())),P.lines(),"\n",sorted(ma
....: p(vector,Q.rays())),Q.lines(),"\n",sorted(map(vector,R.rays())),R.lines(),
....: "\n")
....: 
1 [1, 2, 3, 1, 2, 3, 1, 2, 3] 
 [(0, -1, 0, 0)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0)] () 
 [] () 

2 [1, 2, 3, 1, 2, 3, 1, 2] 
 [(0, -1, 0, 0)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0)] () 
 [] () 

3 [1, 2, 3, 1, 2, 3, 1] 
 [(0, -1, 0, 0)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (1, 2, 1, -1)] () 
 [] () 

4 [1, 2, 3, 1, 2, 3] 
 [(0, -1, 0, 0), (1, 0, 1, -1)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0)] () 
 [] () 

5 [1, 2, 3, 1, 2, 1] 
 [(0, -1, 0, 0)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (1, 2, 1, -1), (1, 3, 1, -2)] () 
 [] () 

6 [1, 2, 3, 1, 2] 
 [(0, -1, 0, 0), (1, 0, 1, -1)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (1, 3, 1, -2)] () 
 [] () 

7 [1, 2, 3, 1] 
 [(0, -1, 0, 0), (1, 0, 1, -1), (1, 1, 1, -2)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (2, 3, 0, -2)] () 
 [] () 

8 [1, 2, 3, 2, 3] 
 [(0, -1, 0, 0)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (1, 2, -1, -1)] () 
 [] () 

9 [1, 2, 3, 2] 
 [(0, -1, 0, 0)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (1, 2, -1, -1), (1, 2, 1, -1)] () 
 [] () 

10 [1, 2, 3] 
 [(0, -1, 0, 0), (1, 0, 1, -1)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (1, 2, -1, -1), (2, 3, 0, -2)] () 
 [] () 

11 [1, 2, 1] 
 [(0, -1, 0, 0), (1, 0, 1, -1), (1, 1, 1, -2), (2, 1, 0, -2)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0)] () 
 [] () 

12 [1, 2] 
 [(0, -1, 0, 0), (1, 0, 1, -1), (2, 1, 0, -2)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (1, 2, -1, -1)] () 
 [] () 

13 [1, 3] 
 [(0, -1, 0, 0), (1, 0, -1, -1)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0)] () 
 [] () 

14 [1] 
 [(0, -1, 0, 0), (1, 0, -1, -1), (1, 0, 1, -1)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0)] () 
 [] () 

15 [2, 3, 2, 3] 
 [(0, -1, 0, 0), (1, -1, -1, 0)] () 
 [(0, 1, 0, 0)] () 
 [] () 

16 [2, 3, 2] 
 [(0, -1, 0, 0), (1, -1, -1, 0)] () 
 [(0, 1, 0, 0)] () 
 [] () 

17 [2, 3] 
 [(0, -1, 0, 0), (1, -1, -1, 0), (1, 0, 1, -1)] () 
 [(0, 1, 0, 0)] () 
 [] () 

18 [2] 
 [(0, -1, 0, 0), (1, -1, -1, 0), (1, 0, 1, -1), (1, 1, 1, -2)] () 
 [(0, 1, 0, 0)] () 
 [] () 

19 [3] 
 [(0, -1, 0, 0), (1, -1, -1, 0), (1, 0, -1, -1)] () 
 [(0, 1, 0, 0)] () 
 [] () 

20 [] 
 [(0, -1, 0, 0), (1, -1, -1, 0), (1, 0, -1, -1), (1, 0, 1, -1)] () 
 [(0, 1, 0, 0)] () 
 [] () 

sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_cone(B(A,c),lam(A,v),list(sortables(A,c[1:])))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list([c[0]]+v for v in sortables(A,c[1
....: :])))
....:     R=P.intersection(Q)
....:     print(num,v,"\n",sorted(map(vector,P.rays())),P.lines(),"\n",sorted(ma
....: p(vector,Q.rays())),Q.lines(),"\n",sorted(map(vector,R.rays())),R.lines(),
....: "\n")
1 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] () 
 [] () 

2 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] () 
 [] () 

3 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] () 
 [] () 

4 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, 0, 1, -1)] () 
 [] () 

5 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 
 [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] () 
 [] () 

6 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] () 
 [] () 

7 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, 0, 1, -1)] () 
 [] () 

8 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 
 [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] () 
 [] () 

9 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, 0, 1, -1), (1, 2, 1, 1, -2)] () 
 [] () 

10 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 
 [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, 1, 1, -2)] () 
 [] () 

11 [1, 2, 3, 4, 1, 2, 3, 4, 1] 
 [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (1, 0, 1, 1, -2)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] () 
 [] () 

12 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] () 
 [] () 

13 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] () 
 [] () 

14 [1, 2, 3, 4, 1, 2, 3, 4, 2] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, 0, 1, -1)] () 
 [] () 

15 [1, 2, 3, 4, 1, 2, 3, 4] 
 [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] () 
 [] () 

16 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, 0, 1, -1), (1, 2, 1, 1, -2), (1, 3, 1, 0, -2)] () 
 [] () 

17 [1, 2, 3, 4, 1, 2, 3, 1, 2] 
 [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, 1, 1, -2), (1, 3, 1, 0, -2)] () 
 [] () 

18 [1, 2, 3, 4, 1, 2, 3, 1] 
 [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (1, 0, 1, 1, -2)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 3, 1, 0, -2)] () 
 [] () 

19 [1, 2, 3, 4, 1, 2, 3, 2] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, 0, 1, -1), (1, 3, 1, 0, -2)] () 
 [] () 

20 [1, 2, 3, 4, 1, 2, 3] 
 [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 3, 1, 0, -2)] () 
 [] () 

21 [1, 2, 3, 4, 1, 2, 1] 
 [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (1, 0, 1, 1, -2), (1, 1, 1, 0, -2)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (2, 3, 0, 0, -2)] () 
 [] () 

22 [1, 2, 3, 4, 1, 2] 
 [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (1, 1, 1, 0, -2)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (2, 3, 0, 0, -2)] () 
 [] () 

23 [1, 2, 3, 4, 1, 3, 4] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, 0, -1, -1)] () 
 [] () 

24 [1, 2, 3, 4, 1, 3] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, 0, -1, -1), (1, 2, 0, 1, -1)] () 
 [] () 

25 [1, 2, 3, 4, 1] 
 [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, 0, -1, -1), (2, 3, 0, 0, -2)] () 
 [] () 

26 [1, 2, 3, 4, 2, 3, 4, 2, 3, 4] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, -1, -1, 0)] () 
 [] () 

27 [1, 2, 3, 4, 2, 3, 4, 2, 3] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, -1, -1, 0)] () 
 [] () 

28 [1, 2, 3, 4, 2, 3, 4, 2] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, -1, -1, 0), (1, 2, 0, 1, -1)] () 
 [] () 

29 [1, 2, 3, 4, 2, 3, 4] 
 [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, -1, -1, 0)] () 
 [] () 

30 [1, 2, 3, 4, 2, 3, 2] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, -1, -1, 0), (1, 2, 0, 1, -1), (1, 2, 1, 1, -2)] () 
 [] () 

31 [1, 2, 3, 4, 2, 3] 
 [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, -1, -1, 0), (1, 2, 1, 1, -2)] () 
 [] () 

32 [1, 2, 3, 4, 2] 
 [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (1, 0, 1, 1, -2)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, -1, -1, 0), (2, 3, 0, 0, -2)] () 
 [] () 

33 [1, 2, 3, 4, 3, 4] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, -1, -1, 0), (1, 2, 0, -1, -1)] () 
 [] () 

34 [1, 2, 3, 4, 3] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, -1, -1, 0), (1, 2, 0, -1, -1), (1, 2, 0, 1, -1)] () 
 [] () 

35 [1, 2, 3, 4] 
 [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, -1, -1, 0), (1, 2, 0, -1, -1), (2, 3, 0, 0, -2)] () 
 [] () 

36 [1, 2, 3, 1, 2, 1] 
 [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (1, 0, 1, 1, -2), (1, 1, 1, 0, -2), (2, 1, 0, 0, -2)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] () 
 [] () 

37 [1, 2, 3, 1, 2] 
 [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (1, 1, 1, 0, -2), (2, 1, 0, 0, -2)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] () 
 [] () 

38 [1, 2, 3, 1] 
 [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (2, 1, 0, 0, -2)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, 0, -1, -1)] () 
 [] () 

39 [1, 2, 3, 2] 
 [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (1, 0, 1, 1, -2), (2, 1, 0, 0, -2)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, -1, -1, 0)] () 
 [] () 

40 [1, 2, 3] 
 [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (2, 1, 0, 0, -2)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, -1, -1, 0), (1, 2, 0, -1, -1)] () 
 [] () 

41 [1, 2, 4, 1] 
 [(0, -1, 0, 0, 0), (1, 0, 0, -1, -1)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] () 
 [] () 

42 [1, 2, 4] 
 [(0, -1, 0, 0, 0), (1, 0, 0, -1, -1)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, -1, -1, 0)] () 
 [] () 

43 [1, 2, 1] 
 [(0, -1, 0, 0, 0), (1, 0, 0, -1, -1), (1, 0, 0, 1, -1)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] () 
 [] () 

44 [1, 2] 
 [(0, -1, 0, 0, 0), (1, 0, 0, -1, -1), (1, 0, 0, 1, -1)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, -1, -1, 0)] () 
 [] () 

45 [1, 3, 4, 3, 4] 
 [(0, -1, 0, 0, 0), (1, 0, -1, -1, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] () 
 [] () 

46 [1, 3, 4, 3] 
 [(0, -1, 0, 0, 0), (1, 0, -1, -1, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] () 
 [] () 

47 [1, 3, 4] 
 [(0, -1, 0, 0, 0), (1, 0, -1, -1, 0), (1, 0, 0, 1, -1)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] () 
 [] () 

48 [1, 3] 
 [(0, -1, 0, 0, 0), (1, 0, -1, -1, 0), (1, 0, 0, 1, -1), (1, 0, 1, 1, -2)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] () 
 [] () 

49 [1, 4] 
 [(0, -1, 0, 0, 0), (1, 0, -1, -1, 0), (1, 0, 0, -1, -1)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] () 
 [] () 

50 [1] 
 [(0, -1, 0, 0, 0), (1, 0, -1, -1, 0), (1, 0, 0, -1, -1), (1, 0, 0, 1, -1)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] () 
 [] () 

51 [2, 3, 4, 2, 3, 4, 2, 3, 4] 
 [(0, -1, 0, 0, 0), (1, -1, -1, 0, 0)] () 
 [(0, 1, 0, 0, 0)] () 
 [] () 

52 [2, 3, 4, 2, 3, 4, 2, 3] 
 [(0, -1, 0, 0, 0), (1, -1, -1, 0, 0)] () 
 [(0, 1, 0, 0, 0)] () 
 [] () 

53 [2, 3, 4, 2, 3, 4, 2] 
 [(0, -1, 0, 0, 0), (1, -1, -1, 0, 0)] () 
 [(0, 1, 0, 0, 0)] () 
 [] () 

54 [2, 3, 4, 2, 3, 4] 
 [(0, -1, 0, 0, 0), (1, -1, -1, 0, 0), (1, 0, 0, 1, -1)] () 
 [(0, 1, 0, 0, 0)] () 
 [] () 

55 [2, 3, 4, 2, 3, 2] 
 [(0, -1, 0, 0, 0), (1, -1, -1, 0, 0)] () 
 [(0, 1, 0, 0, 0)] () 
 [] () 

56 [2, 3, 4, 2, 3] 
 [(0, -1, 0, 0, 0), (1, -1, -1, 0, 0), (1, 0, 0, 1, -1)] () 
 [(0, 1, 0, 0, 0)] () 
 [] () 

57 [2, 3, 4, 2] 
 [(0, -1, 0, 0, 0), (1, -1, -1, 0, 0), (1, 0, 0, 1, -1), (1, 0, 1, 1, -2)] () 
 [(0, 1, 0, 0, 0)] () 
 [] () 

58 [2, 3, 4, 3, 4] 
 [(0, -1, 0, 0, 0), (1, -1, -1, 0, 0)] () 
 [(0, 1, 0, 0, 0)] () 
 [] () 

59 [2, 3, 4, 3] 
 [(0, -1, 0, 0, 0), (1, -1, -1, 0, 0)] () 
 [(0, 1, 0, 0, 0)] () 
 [] () 

60 [2, 3, 4] 
 [(0, -1, 0, 0, 0), (1, -1, -1, 0, 0), (1, 0, 0, 1, -1)] () 
 [(0, 1, 0, 0, 0)] () 
 [] () 

61 [2, 3, 2] 
 [(0, -1, 0, 0, 0), (1, -1, -1, 0, 0), (1, 0, 0, 1, -1), (1, 0, 1, 1, -2), (1, 1, 1, 0, -2)] () 
 [(0, 1, 0, 0, 0)] () 
 [] () 

62 [2, 3] 
 [(0, -1, 0, 0, 0), (1, -1, -1, 0, 0), (1, 0, 0, 1, -1), (1, 1, 1, 0, -2)] () 
 [(0, 1, 0, 0, 0)] () 
 [] () 

63 [2, 4] 
 [(0, -1, 0, 0, 0), (1, -1, -1, 0, 0), (1, 0, 0, -1, -1)] () 
 [(0, 1, 0, 0, 0)] () 
 [] () 

64 [2] 
 [(0, -1, 0, 0, 0), (1, -1, -1, 0, 0), (1, 0, 0, -1, -1), (1, 0, 0, 1, -1)] () 
 [(0, 1, 0, 0, 0)] () 
 [] () 

65 [3, 4, 3, 4] 
 [(0, -1, 0, 0, 0), (1, -1, -1, 0, 0), (1, 0, -1, -1, 0)] () 
 [(0, 1, 0, 0, 0)] () 
 [] () 

66 [3, 4, 3] 
 [(0, -1, 0, 0, 0), (1, -1, -1, 0, 0), (1, 0, -1, -1, 0)] () 
 [(0, 1, 0, 0, 0)] () 
 [] () 

67 [3, 4] 
 [(0, -1, 0, 0, 0), (1, -1, -1, 0, 0), (1, 0, -1, -1, 0), (1, 0, 0, 1, -1)] () 
 [(0, 1, 0, 0, 0)] () 
 [] () 

68 [3] 
 [(0, -1, 0, 0, 0), (1, -1, -1, 0, 0), (1, 0, -1, -1, 0), (1, 0, 0, 1, -1), (1, 0, 1, 1, -2)] () 
 [(0, 1, 0, 0, 0)] () 
 [] () 

69 [4] 
 [(0, -1, 0, 0, 0), (1, -1, -1, 0, 0), (1, 0, -1, -1, 0), (1, 0, 0, -1, -1)] () 
 [(0, 1, 0, 0, 0)] () 
 [] () 

70 [] 
 [(0, -1, 0, 0, 0), (1, -1, -1, 0, 0), (1, 0, -1, -1, 0), (1, 0, 0, -1, -1), (1, 0, 0, 1, -1)] () 
 [(0, 1, 0, 0, 0)] () 
 [] () 

sage: A=CartanMatrix(['C',5])
....: c=[1,2,3,4,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_cone(B(A,c),lam(A,v),list(sortables(A,c[1:])))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list([c[0]]+v for v in sortables(A,c[1
....: :])))
....:     R=P.intersection(Q)
....:     print(num,v,"\n",sorted(map(vector,P.rays())),P.lines(),"\n",sorted(ma
....: p(vector,Q.rays())),Q.lines(),"\n",sorted(map(vector,R.rays())),R.lines(),
....: "\n")
1 [2, 3, 4, 0, 2, 3, 4, 2, 3, 4] 
 [(-1, 0, -1, 0, 0)] () 
 [(1, 0, 1, 0, 0), (1, 1, 1, -1, 0), (1, 1, 1, 0, 0), (1, 2, 1, -1, 0)] () 
 [] () 

2 [2, 3, 4, 0, 2, 3, 4, 2, 3] 
 [(-1, 0, -1, 0, 0)] () 
 [(1, 0, 1, 0, 0), (1, 1, 1, -1, 0), (1, 1, 1, 0, 0), (1, 2, 1, -1, 0)] () 
 [] () 

3 [2, 3, 4, 0, 2, 3, 4, 2] 
 [(-1, 0, -1, 0, 0)] () 
 [(1, 0, 1, 0, 0), (1, 1, 1, -1, 0), (1, 1, 1, 0, 0), (1, 1, 2, 1, -1), (1, 2, 1, -1, 0), (1, 2, 2, 1, -1)] () 
 [] () 

4 [2, 3, 4, 0, 2, 3, 4] 
 [(-1, 0, -1, 0, 0), (-1, 1, 0, 1, -1)] () 
 [(1, 0, 1, 0, 0), (1, 1, 1, -1, 0), (1, 1, 1, 0, 0), (1, 2, 1, -1, 0)] () 
 [] () 

5 [2, 3, 4, 0, 2, 3, 2] 
 [(-1, 0, -1, 0, 0)] () 
 [(1, 0, 1, 0, 0), (1, 1, 1, -1, 0), (1, 1, 1, 0, 0), (1, 1, 2, 1, -1), (1, 1, 3, 1, -2), (1, 2, 1, -1, 0), (1, 2, 2, 1, -1), (1, 2, 3, 1, -2)] () 
 [] () 

6 [2, 3, 4, 0, 2, 3] 
 [(-1, 0, -1, 0, 0), (-1, 1, 0, 1, -1)] () 
 [(1, 0, 1, 0, 0), (1, 1, 1, -1, 0), (1, 1, 1, 0, 0), (1, 1, 3, 1, -2), (1, 2, 1, -1, 0), (1, 2, 3, 1, -2)] () 
 [] () 

7 [2, 3, 4, 0, 2] 
 [(-1, 0, -1, 0, 0), (-1, 1, 0, 1, -1), (-1, 1, 1, 1, -2)] () 
 [(1, 0, 1, 0, 0), (1, 1, 1, -1, 0), (1, 1, 1, 0, 0), (1, 2, 1, -1, 0), (1, 2, 3, 0, -2), (1, 3, 3, 0, -2)] () 
 [] () 

8 [2, 3, 4, 0, 3, 4] 
 [(-1, 0, -1, 0, 0)] () 
 [(1, 0, 1, 0, 0), (1, 1, 1, -1, 0), (1, 1, 1, 0, 0), (1, 1, 2, -1, -1), (1, 2, 1, -1, 0), (1, 2, 2, -1, -1)] () 
 [] () 

9 [2, 3, 4, 0, 3] 
 [(-1, 0, -1, 0, 0)] () 
 [(1, 0, 1, 0, 0), (1, 1, 1, -1, 0), (1, 1, 1, 0, 0), (1, 1, 2, -1, -1), (1, 1, 2, 1, -1), (1, 2, 1, -1, 0), (1, 2, 2, -1, -1), (1, 2, 2, 1, -1)] () 
 [] () 

10 [2, 3, 4, 0] 
 [(-1, 0, -1, 0, 0), (-1, 1, 0, 1, -1)] () 
 [(1, 0, 1, 0, 0), (1, 1, 1, -1, 0), (1, 1, 1, 0, 0), (1, 1, 2, -1, -1), (1, 2, 1, -1, 0), (1, 2, 2, -1, -1), (1, 2, 3, 0, -2), (1, 3, 3, 0, -2)] () 
 [] () 

11 [2, 3, 4, 2, 3, 4, 2, 3, 4] 
 [(-1, 0, -1, 0, 0), (-1, 1, -1, 0, 0)] () 
 [(1, 0, 1, 0, 0), (1, 1, 1, -1, 0)] () 
 [] () 

12 [2, 3, 4, 2, 3, 4, 2, 3] 
 [(-1, 0, -1, 0, 0), (-1, 1, -1, 0, 0)] () 
 [(1, 0, 1, 0, 0), (1, 1, 1, -1, 0)] () 
 [] () 

13 [2, 3, 4, 2, 3, 4, 2] 
 [(-1, 0, -1, 0, 0), (-1, 1, -1, 0, 0)] () 
 [(1, 0, 1, 0, 0), (1, 1, 1, -1, 0), (1, 1, 2, 1, -1)] () 
 [] () 

14 [2, 3, 4, 2, 3, 4] 
 [(-1, 0, -1, 0, 0), (-1, 1, -1, 0, 0), (-1, 1, 0, 1, -1), (-1, 2, 0, 1, -1)] () 
 [(1, 0, 1, 0, 0), (1, 1, 1, -1, 0)] () 
 [] () 

15 [2, 3, 4, 2, 3, 2] 
 [(-1, 0, -1, 0, 0), (-1, 1, -1, 0, 0)] () 
 [(1, 0, 1, 0, 0), (1, 1, 1, -1, 0), (1, 1, 2, 1, -1), (1, 1, 3, 1, -2)] () 
 [] () 

16 [2, 3, 4, 2, 3] 
 [(-1, 0, -1, 0, 0), (-1, 1, -1, 0, 0), (-1, 1, 0, 1, -1), (-1, 2, 0, 1, -1)] () 
 [(1, 0, 1, 0, 0), (1, 1, 1, -1, 0), (1, 1, 3, 1, -2)] () 
 [] () 

17 [2, 3, 4, 2] 
 [(-1, 0, -1, 0, 0), (-1, 1, -1, 0, 0), (-1, 1, 0, 1, -1), (-1, 1, 1, 1, -2), (-1, 2, 0, 1, -1), (-1, 2, 1, 1, -2)] () 
 [(1, 0, 1, 0, 0), (1, 1, 1, -1, 0), (1, 2, 3, 0, -2)] () 
 [] () 

18 [2, 3, 4, 3, 4] 
 [(-1, 0, -1, 0, 0), (-1, 1, -1, 0, 0)] () 
 [(1, 0, 1, 0, 0), (1, 1, 1, -1, 0), (1, 1, 2, -1, -1)] () 
 [] () 

19 [2, 3, 4, 3] 
 [(-1, 0, -1, 0, 0), (-1, 1, -1, 0, 0)] () 
 [(1, 0, 1, 0, 0), (1, 1, 1, -1, 0), (1, 1, 2, -1, -1), (1, 1, 2, 1, -1)] () 
 [] () 

20 [2, 3, 4] 
 [(-1, 0, -1, 0, 0), (-1, 1, -1, 0, 0), (-1, 1, 0, 1, -1), (-1, 2, 0, 1, -1)] () 
 [(1, 0, 1, 0, 0), (1, 1, 1, -1, 0), (1, 1, 2, -1, -1), (1, 2, 3, 0, -2)] () 
 [] () 

21 [2, 3, 0, 2] 
 [(-1, 0, -1, 0, 0), (-1, 1, 0, 1, -1), (-1, 1, 1, 1, -2), (-1, 2, 1, 0, -2)] () 
 [(1, 0, 1, 0, 0), (1, 1, 1, -1, 0), (1, 1, 1, 0, 0), (1, 2, 1, -1, 0)] () 
 [] () 

22 [2, 3, 0] 
 [(-1, 0, -1, 0, 0), (-1, 1, 0, 1, -1), (-1, 2, 1, 0, -2)] () 
 [(1, 0, 1, 0, 0), (1, 1, 1, -1, 0), (1, 1, 1, 0, 0), (1, 1, 2, -1, -1), (1, 2, 1, -1, 0), (1, 2, 2, -1, -1)] () 
 [] () 

23 [2, 3, 2] 
 [(-1, 0, -1, 0, 0), (-1, 1, -1, 0, 0), (-1, 1, 0, 1, -1), (-1, 1, 1, 1, -2), (-1, 2, 0, 1, -1), (-1, 2, 1, 0, -2), (-1, 2, 1, 1, -2), (-1, 3, 1, 0, -2)] () 
 [(1, 0, 1, 0, 0), (1, 1, 1, -1, 0)] () 
 [] () 

24 [2, 3] 
 [(-1, 0, -1, 0, 0), (-1, 1, -1, 0, 0), (-1, 1, 0, 1, -1), (-1, 2, 0, 1, -1), (-1, 2, 1, 0, -2), (-1, 3, 1, 0, -2)] () 
 [(1, 0, 1, 0, 0), (1, 1, 1, -1, 0), (1, 1, 2, -1, -1)] () 
 [] () 

25 [2, 4, 0] 
 [(-1, 0, -1, 0, 0), (-1, 1, 0, -1, -1)] () 
 [(1, 0, 1, 0, 0), (1, 1, 1, -1, 0), (1, 1, 1, 0, 0), (1, 2, 1, -1, 0)] () 
 [] () 

26 [2, 4] 
 [(-1, 0, -1, 0, 0), (-1, 1, -1, 0, 0), (-1, 1, 0, -1, -1), (-1, 2, 0, -1, -1)] () 
 [(1, 0, 1, 0, 0), (1, 1, 1, -1, 0)] () 
 [] () 

27 [2, 0] 
 [(-1, 0, -1, 0, 0), (-1, 1, 0, -1, -1), (-1, 1, 0, 1, -1)] () 
 [(1, 0, 1, 0, 0), (1, 1, 1, -1, 0), (1, 1, 1, 0, 0), (1, 2, 1, -1, 0)] () 
 [] () 

28 [2] 
 [(-1, 0, -1, 0, 0), (-1, 1, -1, 0, 0), (-1, 1, 0, -1, -1), (-1, 1, 0, 1, -1), (-1, 2, 0, -1, -1), (-1, 2, 0, 1, -1)] () 
 [(1, 0, 1, 0, 0), (1, 1, 1, -1, 0)] () 
 [] () 

29 [3, 4, 0, 3, 4] 
 [(-1, 0, -1, 0, 0), (-1, 1, -1, -1, 0)] () 
 [(1, 0, 1, 0, 0), (1, 1, 1, 0, 0)] () 
 [] () 

30 [3, 4, 0, 3] 
 [(-1, 0, -1, 0, 0), (-1, 1, -1, -1, 0)] () 
 [(1, 0, 1, 0, 0), (1, 1, 1, 0, 0)] () 
 [] () 

31 [3, 4, 0] 
 [(-1, 0, -1, 0, 0), (-1, 1, -1, -1, 0), (-1, 1, 0, 1, -1)] () 
 [(1, 0, 1, 0, 0), (1, 1, 1, 0, 0)] () 
 [] () 

32 [3, 4, 3, 4] 
 [(-1, 0, -1, 0, 0), (-1, 1, -1, -1, 0), (-1, 1, -1, 0, 0), (-1, 2, -1, -1, 0)] () 
 [(1, 0, 1, 0, 0)] () 
 [] () 

33 [3, 4, 3] 
 [(-1, 0, -1, 0, 0), (-1, 1, -1, -1, 0), (-1, 1, -1, 0, 0), (-1, 2, -1, -1, 0)] () 
 [(1, 0, 1, 0, 0)] () 
 [] () 

34 [3, 4] 
 [(-1, 0, -1, 0, 0), (-1, 1, -1, -1, 0), (-1, 1, -1, 0, 0), (-1, 1, 0, 1, -1), (-1, 2, -1, -1, 0), (-1, 2, 0, 1, -1)] () 
 [(1, 0, 1, 0, 0)] () 
 [] () 

35 [3, 0] 
 [(-1, 0, -1, 0, 0), (-1, 1, -1, -1, 0), (-1, 1, 0, 1, -1), (-1, 1, 1, 1, -2)] () 
 [(1, 0, 1, 0, 0), (1, 1, 1, 0, 0)] () 
 [] () 

36 [3] 
 [(-1, 0, -1, 0, 0), (-1, 1, -1, -1, 0), (-1, 1, -1, 0, 0), (-1, 1, 0, 1, -1), (-1, 1, 1, 1, -2), (-1, 2, -1, -1, 0), (-1, 2, 0, 1, -1), (-1, 2, 1, 1, -2)] () 
 [(1, 0, 1, 0, 0)] () 
 [] () 

37 [4, 0] 
 [(-1, 0, -1, 0, 0), (-1, 1, -1, -1, 0), (-1, 1, 0, -1, -1)] () 
 [(1, 0, 1, 0, 0), (1, 1, 1, 0, 0)] () 
 [] () 

38 [4] 
 [(-1, 0, -1, 0, 0), (-1, 1, -1, -1, 0), (-1, 1, -1, 0, 0), (-1, 1, 0, -1, -1), (-1, 2, -1, -1, 0), (-1, 2, 0, -1, -1)] () 
 [(1, 0, 1, 0, 0)] () 
 [] () 

39 [0] 
 [(-1, 0, -1, 0, 0), (-1, 1, -1, -1, 0), (-1, 1, 0, -1, -1), (-1, 1, 0, 1, -1)] () 
 [(1, 0, 1, 0, 0), (1, 1, 1, 0, 0)] () 
 [] () 

40 [] 
 [(-1, 0, -1, 0, 0), (-1, 1, -1, -1, 0), (-1, 1, -1, 0, 0), (-1, 1, 0, -1, -1), (-1, 1, 0, 1, -1), (-1, 2, -1, -1, 0), (-1, 2, 0, -1, -1), (-1, 2, 0, 1, -1)] () 
 [(1, 0, 1, 0, 0)] () 
 [] () 

sage: A=CartanMatrix(['C',5])
....: c=[2,3,4,0,1]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_cone(B(A,c),lam(A,v),list(sortables(A,c[1:])))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list([c[0]]+v for v in sortables(A,c[1
....: :])))
....:     R=P.intersection(Q)
....:     print(num,v,"\n",sorted(map(vector,P.rays())),P.lines(),"\n",sorted(ma
....: p(vector,Q.rays())),Q.lines(),"\n",sorted(map(vector,R.rays())),R.lines(),
....: "\n")
1 [3, 4, 0, 1, 3, 4, 0] 
 [(0, -1, 0, -1, 0)] () 
 [(0, 1, 0, 1, 0), (0, 1, 1, 1, -1), (1, 0, 1, 1, 0), (1, 0, 2, 1, -1), (1, 1, 1, 1, 0), (1, 1, 2, 1, -1)] () 
 [] () 

2 [3, 4, 0, 1, 3, 4] 
 [(0, -1, 0, -1, 0), (1, -1, 1, -1, 0)] () 
 [(0, 1, 0, 1, 0), (0, 1, 1, 1, -1), (1, 0, 1, 1, 0), (1, 0, 2, 1, -1)] () 
 [] () 

3 [3, 4, 0, 1, 3, 0] 
 [(0, -1, 0, -1, 0)] () 
 [(0, 1, 0, 1, 0), (0, 1, 1, 1, -1), (0, 1, 1, 3, -1), (1, 0, 1, 1, 0), (1, 0, 2, 1, -1), (1, 0, 2, 3, -1), (1, 1, 1, 1, 0), (1, 1, 2, 1, -1)] () 
 [] () 

4 [3, 4, 0, 1, 3] 
 [(0, -1, 0, -1, 0), (1, -1, 1, -1, 0)] () 
 [(0, 1, 0, 1, 0), (0, 1, 1, 1, -1), (0, 1, 1, 3, -1), (1, 0, 1, 1, 0), (1, 0, 2, 1, -1), (1, 0, 2, 3, -1)] () 
 [] () 

5 [3, 4, 0, 1, 0] 
 [(0, -1, 0, -1, 0), (0, -1, 1, 1, -1)] () 
 [(0, 1, 0, 1, 0), (0, 1, 1, 1, -1), (0, 1, 2, 3, -2), (1, 0, 1, 1, 0), (1, 0, 2, 1, -1), (1, 0, 3, 3, -2), (1, 1, 1, 1, 0), (1, 1, 2, 1, -1)] () 
 [] () 

6 [3, 4, 0, 1] 
 [(0, -1, 0, -1, 0), (0, -1, 1, 1, -1), (1, -1, 1, -1, 0), (1, -1, 2, 1, -1)] () 
 [(0, 1, 0, 1, 0), (0, 1, 1, 1, -1), (0, 1, 2, 3, -2), (1, 0, 1, 1, 0), (1, 0, 2, 1, -1), (1, 0, 3, 3, -2)] () 
 [] () 

7 [3, 4, 0, 3, 4] 
 [(0, -1, 0, -1, 0), (1, -2, 1, -1, 0), (1, -1, 1, -1, 0)] () 
 [(0, 1, 0, 1, 0), (0, 1, 1, 1, -1)] () 
 [] () 

8 [3, 4, 0, 3] 
 [(0, -1, 0, -1, 0), (1, -2, 1, -1, 0), (1, -1, 1, -1, 0)] () 
 [(0, 1, 0, 1, 0), (0, 1, 1, 1, -1), (0, 1, 1, 3, -1)] () 
 [] () 

9 [3, 4, 0] 
 [(0, -1, 0, -1, 0), (0, -1, 1, 1, -1), (1, -2, 1, -1, 0), (1, -2, 2, 1, -1), (1, -1, 1, -1, 0), (1, -1, 2, 1, -1)] () 
 [(0, 1, 0, 1, 0), (0, 1, 1, 1, -1), (0, 1, 2, 3, -2)] () 
 [] () 

10 [3, 4, 1, 3, 4] 
 [(0, -1, 0, -1, 0)] () 
 [(0, 1, 0, 1, 0), (0, 1, 1, 1, -1), (1, 1, 1, 1, 0), (1, 1, 2, 1, -1)] () 
 [] () 

11 [3, 4, 1, 3] 
 [(0, -1, 0, -1, 0)] () 
 [(0, 1, 0, 1, 0), (0, 1, 1, 1, -1), (0, 1, 1, 3, -1), (1, 1, 1, 1, 0), (1, 1, 2, 1, -1), (1, 1, 2, 3, -1)] () 
 [] () 

12 [3, 4, 1] 
 [(0, -1, 0, -1, 0), (0, -1, 1, 1, -1)] () 
 [(0, 1, 0, 1, 0), (0, 1, 1, 1, -1), (0, 1, 2, 3, -2), (1, 1, 1, 1, 0), (1, 1, 2, 1, -1), (1, 1, 3, 3, -2)] () 
 [] () 

13 [3, 4, 3, 4] 
 [(0, -1, 0, -1, 0), (1, -1, 1, -1, 0)] () 
 [(0, 1, 0, 1, 0), (0, 1, 1, 1, -1)] () 
 [] () 

14 [3, 4, 3] 
 [(0, -1, 0, -1, 0), (1, -1, 1, -1, 0)] () 
 [(0, 1, 0, 1, 0), (0, 1, 1, 1, -1), (0, 1, 1, 3, -1)] () 
 [] () 

15 [3, 4] 
 [(0, -1, 0, -1, 0), (0, -1, 1, 1, -1), (1, -1, 1, -1, 0), (1, -1, 2, 1, -1)] () 
 [(0, 1, 0, 1, 0), (0, 1, 1, 1, -1), (0, 1, 2, 3, -2)] () 
 [] () 

16 [3, 0, 1, 0] 
 [(0, -1, 0, -1, 0), (0, -1, 1, 1, -1), (0, -1, 2, 1, -2)] () 
 [(0, 1, 0, 1, 0), (0, 1, 1, 1, -1), (1, 0, 1, 1, 0), (1, 0, 2, 1, -1), (1, 1, 1, 1, 0), (1, 1, 2, 1, -1)] () 
 [] () 

17 [3, 0, 1] 
 [(0, -1, 0, -1, 0), (0, -1, 1, 1, -1), (0, -1, 2, 1, -2), (1, -1, 1, -1, 0), (1, -1, 2, 1, -1), (1, -1, 3, 1, -2)] () 
 [(0, 1, 0, 1, 0), (0, 1, 1, 1, -1), (1, 0, 1, 1, 0), (1, 0, 2, 1, -1)] () 
 [] () 

18 [3, 0] 
 [(0, -1, 0, -1, 0), (0, -1, 1, 1, -1), (0, -1, 2, 1, -2), (1, -2, 1, -1, 0), (1, -2, 2, 1, -1), (1, -1, 1, -1, 0), (1, -1, 2, 1, -1), (1, -1, 3, 1, -2)] () 
 [(0, 1, 0, 1, 0), (0, 1, 1, 1, -1)] () 
 [] () 

19 [3, 1] 
 [(0, -1, 0, -1, 0), (0, -1, 1, 1, -1), (0, -1, 2, 1, -2)] () 
 [(0, 1, 0, 1, 0), (0, 1, 1, 1, -1), (1, 1, 1, 1, 0), (1, 1, 2, 1, -1)] () 
 [] () 

20 [3] 
 [(0, -1, 0, -1, 0), (0, -1, 1, 1, -1), (0, -1, 2, 1, -2), (1, -1, 1, -1, 0), (1, -1, 2, 1, -1), (1, -1, 3, 1, -2)] () 
 [(0, 1, 0, 1, 0), (0, 1, 1, 1, -1)] () 
 [] () 

21 [4, 0, 1, 0] 
 [(0, -1, 0, -1, 0), (0, -1, 1, -1, -1)] () 
 [(0, 1, 0, 1, 0), (1, 0, 1, 1, 0), (1, 1, 1, 1, 0)] () 
 [] () 

22 [4, 0, 1] 
 [(0, -1, 0, -1, 0), (0, -1, 1, -1, -1), (1, -1, 1, -1, 0), (1, -1, 2, -1, -1)] () 
 [(0, 1, 0, 1, 0), (1, 0, 1, 1, 0)] () 
 [] () 

23 [4, 0] 
 [(0, -1, 0, -1, 0), (0, -1, 1, -1, -1), (1, -2, 1, -1, 0), (1, -2, 2, -1, -1), (1, -1, 1, -1, 0), (1, -1, 2, -1, -1)] () 
 [(0, 1, 0, 1, 0)] () 
 [] () 

24 [4, 1] 
 [(0, -1, 0, -1, 0), (0, -1, 1, -1, -1)] () 
 [(0, 1, 0, 1, 0), (1, 1, 1, 1, 0)] () 
 [] () 

25 [4] 
 [(0, -1, 0, -1, 0), (0, -1, 1, -1, -1), (1, -1, 1, -1, 0), (1, -1, 2, -1, -1)] () 
 [(0, 1, 0, 1, 0)] () 
 [] () 

26 [0, 1, 0] 
 [(0, -1, 0, -1, 0), (0, -1, 1, -1, -1), (0, -1, 1, 1, -1)] () 
 [(0, 1, 0, 1, 0), (1, 0, 1, 1, 0), (1, 1, 1, 1, 0)] () 
 [] () 

27 [0, 1] 
 [(0, -1, 0, -1, 0), (0, -1, 1, -1, -1), (0, -1, 1, 1, -1), (1, -1, 1, -1, 0), (1, -1, 2, -1, -1), (1, -1, 2, 1, -1)] () 
 [(0, 1, 0, 1, 0), (1, 0, 1, 1, 0)] () 
 [] () 

28 [0] 
 [(0, -1, 0, -1, 0), (0, -1, 1, -1, -1), (0, -1, 1, 1, -1), (1, -2, 1, -1, 0), (1, -2, 2, 1, -1), (1, -1, 1, -1, 0), (1, -1, 2, -1, -1), (1, -1, 2, 1, -1)] () 
 [(0, 1, 0, 1, 0)] () 
 [] () 

29 [1] 
 [(0, -1, 0, -1, 0), (0, -1, 1, -1, -1), (0, -1, 1, 1, -1)] () 
 [(0, 1, 0, 1, 0), (1, 1, 1, 1, 0)] () 
 [] () 

30 [] 
 [(0, -1, 0, -1, 0), (0, -1, 1, -1, -1), (0, -1, 1, 1, -1), (1, -1, 1, -1, 0), (1, -1, 2, -1, -1), (1, -1, 2, 1, -1)] () 
 [(0, 1, 0, 1, 0)] () 
 [] () 

sage: A=CartanMatrix(['C',5])
....: c=[3,4,0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_cone(B(A,c),lam(A,v),list(sortables(A,c[1:])))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list([c[0]]+v for v in sortables(A,c[1
....: :])))
....:     R=P.intersection(Q)
....:     print(num,v,"\n",sorted(map(vector,P.rays())),P.lines(),"\n",sorted(ma
....: p(vector,Q.rays())),Q.lines(),"\n",sorted(map(vector,R.rays())),R.lines(),
....: "\n")
1 [4, 0, 1, 2, 0, 1, 0] 
 [(0, 0, -1, 0, -1)] () 
 [(0, 0, 1, 0, 1), (0, 0, 1, 2, 1), (0, 1, 1, 1, 1), (0, 1, 1, 3, 1), (1, 0, 0, 1, 1), (1, 0, 0, 3, 1), (1, 1, 0, 1, 1), (1, 1, 0, 3, 1)] () 
 [] () 

2 [4, 0, 1, 2, 0, 1] 
 [(0, 0, -1, 0, -1), (0, 1, -1, 1, -1)] () 
 [(0, 0, 1, 0, 1), (0, 0, 1, 2, 1), (1, 0, 0, 1, 1), (1, 0, 0, 3, 1), (1, 1, 0, 1, 1), (1, 1, 0, 3, 1)] () 
 [] () 

3 [4, 0, 1, 2, 0] 
 [(0, 0, -1, 0, -1), (0, 1, -1, 1, -1), (1, 1, -2, 1, -1)] () 
 [(0, 0, 1, 0, 1), (0, 0, 1, 2, 1), (1, 0, 0, 1, 1), (1, 0, 0, 3, 1)] () 
 [] () 

4 [4, 0, 1, 2, 1] 
 [(0, 0, -1, 0, -1)] () 
 [(0, 0, 1, 0, 1), (0, 0, 1, 2, 1), (0, 1, 1, 1, 1), (0, 1, 1, 3, 1), (1, 0, 0, 1, 1), (1, 0, 0, 3, 1)] () 
 [] () 

5 [4, 0, 1, 2] 
 [(0, 0, -1, 0, -1), (0, 1, -1, 1, -1)] () 
 [(0, 0, 1, 0, 1), (0, 0, 1, 2, 1), (1, 0, 0, 1, 1), (1, 0, 0, 3, 1)] () 
 [] () 

6 [4, 0, 1, 0] 
 [(0, 0, -1, 0, -1), (0, 1, -1, 1, -1), (1, 0, -2, 1, -1), (1, 1, -2, 1, -1)] () 
 [(0, 0, 1, 0, 1), (0, 0, 1, 2, 1)] () 
 [] () 

7 [4, 0, 1] 
 [(0, 0, -1, 0, -1), (0, 1, -1, 1, -1), (1, 0, -2, 1, -1)] () 
 [(0, 0, 1, 0, 1), (0, 0, 1, 2, 1)] () 
 [] () 

8 [4, 0, 2] 
 [(0, 0, -1, 0, -1)] () 
 [(0, 0, 1, 0, 1), (0, 0, 1, 2, 1), (0, 1, 1, 1, 1), (0, 1, 1, 3, 1)] () 
 [] () 

9 [4, 0] 
 [(0, 0, -1, 0, -1), (0, 1, -1, 1, -1)] () 
 [(0, 0, 1, 0, 1), (0, 0, 1, 2, 1)] () 
 [] () 

10 [4, 1, 2, 1] 
 [(0, 0, -1, 0, -1)] () 
 [(0, 0, 1, 0, 1), (0, 0, 1, 2, 1), (0, 1, 1, 1, 1), (0, 1, 1, 3, 1), (1, 1, 0, 1, 1), (1, 1, 0, 3, 1)] () 
 [] () 

11 [4, 1, 2] 
 [(0, 0, -1, 0, -1), (0, 1, -1, 1, -1)] () 
 [(0, 0, 1, 0, 1), (0, 0, 1, 2, 1), (1, 1, 0, 1, 1), (1, 1, 0, 3, 1)] () 
 [] () 

12 [4, 1] 
 [(0, 0, -1, 0, -1), (0, 1, -1, 1, -1), (1, 1, -2, 1, -1)] () 
 [(0, 0, 1, 0, 1), (0, 0, 1, 2, 1)] () 
 [] () 

13 [4, 2] 
 [(0, 0, -1, 0, -1)] () 
 [(0, 0, 1, 0, 1), (0, 0, 1, 2, 1), (0, 1, 1, 1, 1), (0, 1, 1, 3, 1)] () 
 [] () 

14 [4] 
 [(0, 0, -1, 0, -1), (0, 1, -1, 1, -1)] () 
 [(0, 0, 1, 0, 1), (0, 0, 1, 2, 1)] () 
 [] () 

15 [0, 1, 2, 0, 1, 0] 
 [(0, 0, -1, 0, -1), (0, 0, -1, 2, -1)] () 
 [(0, 0, 1, 0, 1), (0, 1, 1, 1, 1), (1, 0, 0, 1, 1), (1, 1, 0, 1, 1)] () 
 [] () 

16 [0, 1, 2, 0, 1] 
 [(0, 0, -1, 0, -1), (0, 0, -1, 2, -1), (0, 1, -1, 1, -1), (0, 1, -1, 3, -1)] () 
 [(0, 0, 1, 0, 1), (1, 0, 0, 1, 1), (1, 1, 0, 1, 1)] () 
 [] () 

17 [0, 1, 2, 0] 
 [(0, 0, -1, 0, -1), (0, 0, -1, 2, -1), (0, 1, -1, 1, -1), (0, 1, -1, 3, -1), (1, 1, -2, 1, -1), (1, 1, -2, 3, -1)] () 
 [(0, 0, 1, 0, 1), (1, 0, 0, 1, 1)] () 
 [] () 

18 [0, 1, 2, 1] 
 [(0, 0, -1, 0, -1), (0, 0, -1, 2, -1)] () 
 [(0, 0, 1, 0, 1), (0, 1, 1, 1, 1), (1, 0, 0, 1, 1)] () 
 [] () 

19 [0, 1, 2] 
 [(0, 0, -1, 0, -1), (0, 0, -1, 2, -1), (0, 1, -1, 1, -1), (0, 1, -1, 3, -1)] () 
 [(0, 0, 1, 0, 1), (1, 0, 0, 1, 1)] () 
 [] () 

20 [0, 1, 0] 
 [(0, 0, -1, 0, -1), (0, 0, -1, 2, -1), (0, 1, -1, 1, -1), (0, 1, -1, 3, -1), (1, 0, -2, 1, -1), (1, 0, -2, 3, -1), (1, 1, -2, 1, -1), (1, 1, -2, 3, -1)] () 
 [(0, 0, 1, 0, 1)] () 
 [] () 

21 [0, 1] 
 [(0, 0, -1, 0, -1), (0, 0, -1, 2, -1), (0, 1, -1, 1, -1), (0, 1, -1, 3, -1), (1, 0, -2, 1, -1), (1, 0, -2, 3, -1)] () 
 [(0, 0, 1, 0, 1)] () 
 [] () 

22 [0, 2] 
 [(0, 0, -1, 0, -1), (0, 0, -1, 2, -1)] () 
 [(0, 0, 1, 0, 1), (0, 1, 1, 1, 1)] () 
 [] () 

23 [0] 
 [(0, 0, -1, 0, -1), (0, 0, -1, 2, -1), (0, 1, -1, 1, -1), (0, 1, -1, 3, -1)] () 
 [(0, 0, 1, 0, 1)] () 
 [] () 

24 [1, 2, 1] 
 [(0, 0, -1, 0, -1), (0, 0, -1, 2, -1)] () 
 [(0, 0, 1, 0, 1), (0, 1, 1, 1, 1), (1, 1, 0, 1, 1)] () 
 [] () 

25 [1, 2] 
 [(0, 0, -1, 0, -1), (0, 0, -1, 2, -1), (0, 1, -1, 1, -1), (0, 1, -1, 3, -1)] () 
 [(0, 0, 1, 0, 1), (1, 1, 0, 1, 1)] () 
 [] () 

26 [1] 
 [(0, 0, -1, 0, -1), (0, 0, -1, 2, -1), (0, 1, -1, 1, -1), (0, 1, -1, 3, -1), (1, 1, -2, 1, -1), (1, 1, -2, 3, -1)] () 
 [(0, 0, 1, 0, 1)] () 
 [] () 

27 [2] 
 [(0, 0, -1, 0, -1), (0, 0, -1, 2, -1)] () 
 [(0, 0, 1, 0, 1), (0, 1, 1, 1, 1)] () 
 [] () 

28 [] 
 [(0, 0, -1, 0, -1), (0, 0, -1, 2, -1), (0, 1, -1, 1, -1), (0, 1, -1, 3, -1)] () 
 [(0, 0, 1, 0, 1)] () 
 [] () 

sage: A=CartanMatrix(['C',5])
....: c=[4,0,1,2,3]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_cone(B(A,c),lam(A,v),list(sortables(A,c[1:])))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list([c[0]]+v for v in sortables(A,c[1
....: :])))
....:     R=P.intersection(Q)
....:     print(num,v,"\n",sorted(map(vector,P.rays())),P.lines(),"\n",sorted(ma
....: p(vector,Q.rays())),Q.lines(),"\n",sorted(map(vector,R.rays())),R.lines(),
....: "\n")
1 [0, 1, 2, 3, 0, 1, 2, 0, 1, 0] 
 [(0, 0, 0, -1, 0)] () 
 [(0, 0, 0, 1, 0), (0, 0, 1, 1, 1), (0, 1, 1, 0, 1), (1, 0, 0, 0, 1), (1, 1, 0, 0, 1)] () 
 [] () 

2 [0, 1, 2, 3, 0, 1, 2, 0, 1] 
 [(0, 0, 0, -1, 0), (0, 0, 1, -1, 1)] () 
 [(0, 0, 0, 1, 0), (0, 1, 1, 0, 1), (1, 0, 0, 0, 1), (1, 1, 0, 0, 1)] () 
 [] () 

3 [0, 1, 2, 3, 0, 1, 2, 0] 
 [(0, 0, 0, -1, 0), (0, 0, 1, -1, 1), (0, 1, 1, -2, 1)] () 
 [(0, 0, 0, 1, 0), (1, 0, 0, 0, 1), (1, 1, 0, 0, 1)] () 
 [] () 

4 [0, 1, 2, 3, 0, 1, 2, 1] 
 [(0, 0, 0, -1, 0)] () 
 [(0, 0, 0, 1, 0), (0, 0, 1, 1, 1), (1, 0, 0, 0, 1), (1, 1, 0, 0, 1)] () 
 [] () 

5 [0, 1, 2, 3, 0, 1, 2] 
 [(0, 0, 0, -1, 0), (0, 0, 1, -1, 1)] () 
 [(0, 0, 0, 1, 0), (1, 0, 0, 0, 1), (1, 1, 0, 0, 1)] () 
 [] () 

6 [0, 1, 2, 3, 0, 1, 0] 
 [(0, 0, 0, -1, 0), (0, 0, 1, -1, 1), (0, 1, 1, -2, 1), (1, 1, 0, -2, 1)] () 
 [(0, 0, 0, 1, 0), (1, 0, 0, 0, 1)] () 
 [] () 

7 [0, 1, 2, 3, 0, 1] 
 [(0, 0, 0, -1, 0), (0, 0, 1, -1, 1), (1, 1, 0, -2, 1)] () 
 [(0, 0, 0, 1, 0), (1, 0, 0, 0, 1)] () 
 [] () 

8 [0, 1, 2, 3, 0, 2] 
 [(0, 0, 0, -1, 0)] () 
 [(0, 0, 0, 1, 0), (0, 0, 1, 1, 1), (1, 0, 0, 0, 1)] () 
 [] () 

9 [0, 1, 2, 3, 0] 
 [(0, 0, 0, -1, 0), (0, 0, 1, -1, 1)] () 
 [(0, 0, 0, 1, 0), (1, 0, 0, 0, 1)] () 
 [] () 

10 [0, 1, 2, 3, 1, 2, 1] 
 [(0, 0, 0, -1, 0)] () 
 [(0, 0, 0, 1, 0), (0, 0, 1, 1, 1), (0, 1, 1, 0, 1), (1, 0, 0, 0, 1)] () 
 [] () 

11 [0, 1, 2, 3, 1, 2] 
 [(0, 0, 0, -1, 0), (0, 0, 1, -1, 1)] () 
 [(0, 0, 0, 1, 0), (0, 1, 1, 0, 1), (1, 0, 0, 0, 1)] () 
 [] () 

12 [0, 1, 2, 3, 1] 
 [(0, 0, 0, -1, 0), (0, 0, 1, -1, 1), (0, 1, 1, -2, 1)] () 
 [(0, 0, 0, 1, 0), (1, 0, 0, 0, 1)] () 
 [] () 

13 [0, 1, 2, 3, 2] 
 [(0, 0, 0, -1, 0)] () 
 [(0, 0, 0, 1, 0), (0, 0, 1, 1, 1), (1, 0, 0, 0, 1)] () 
 [] () 

14 [0, 1, 2, 3] 
 [(0, 0, 0, -1, 0), (0, 0, 1, -1, 1)] () 
 [(0, 0, 0, 1, 0), (1, 0, 0, 0, 1)] () 
 [] () 

15 [0, 1, 2, 0, 1, 0] 
 [(0, 0, 0, -1, 0), (0, 0, 1, -1, 1), (0, 1, 1, -2, 1), (1, 0, 0, -2, 1), (1, 1, 0, -2, 1)] () 
 [(0, 0, 0, 1, 0)] () 
 [] () 

16 [0, 1, 2, 0, 1] 
 [(0, 0, 0, -1, 0), (0, 0, 1, -1, 1), (1, 0, 0, -2, 1), (1, 1, 0, -2, 1)] () 
 [(0, 0, 0, 1, 0)] () 
 [] () 

17 [0, 1, 2, 0] 
 [(0, 0, 0, -1, 0), (0, 0, 1, -1, 1), (1, 0, 0, -2, 1)] () 
 [(0, 0, 0, 1, 0)] () 
 [] () 

18 [0, 1, 2, 1] 
 [(0, 0, 0, -1, 0), (0, 0, 1, -1, 1), (0, 1, 1, -2, 1), (1, 0, 0, -2, 1)] () 
 [(0, 0, 0, 1, 0)] () 
 [] () 

19 [0, 1, 2] 
 [(0, 0, 0, -1, 0), (0, 0, 1, -1, 1), (1, 0, 0, -2, 1)] () 
 [(0, 0, 0, 1, 0)] () 
 [] () 

20 [0, 1, 3, 0] 
 [(0, 0, 0, -1, 0)] () 
 [(0, 0, 0, 1, 0), (0, 0, 1, 1, 1)] () 
 [] () 

21 [0, 1, 3] 
 [(0, 0, 0, -1, 0)] () 
 [(0, 0, 0, 1, 0), (0, 0, 1, 1, 1)] () 
 [] () 

22 [0, 1, 0] 
 [(0, 0, 0, -1, 0), (0, 0, 1, -1, 1)] () 
 [(0, 0, 0, 1, 0)] () 
 [] () 

23 [0, 1] 
 [(0, 0, 0, -1, 0), (0, 0, 1, -1, 1)] () 
 [(0, 0, 0, 1, 0)] () 
 [] () 

24 [0, 2, 3, 2] 
 [(0, 0, 0, -1, 0)] () 
 [(0, 0, 0, 1, 0), (0, 0, 1, 1, 1), (0, 1, 1, 0, 1)] () 
 [] () 

25 [0, 2, 3] 
 [(0, 0, 0, -1, 0), (0, 0, 1, -1, 1)] () 
 [(0, 0, 0, 1, 0), (0, 1, 1, 0, 1)] () 
 [] () 

26 [0, 2] 
 [(0, 0, 0, -1, 0), (0, 0, 1, -1, 1), (0, 1, 1, -2, 1)] () 
 [(0, 0, 0, 1, 0)] () 
 [] () 

27 [0, 3] 
 [(0, 0, 0, -1, 0)] () 
 [(0, 0, 0, 1, 0), (0, 0, 1, 1, 1)] () 
 [] () 

28 [0] 
 [(0, 0, 0, -1, 0), (0, 0, 1, -1, 1)] () 
 [(0, 0, 0, 1, 0)] () 
 [] () 

29 [1, 2, 3, 1, 2, 1] 
 [(0, 0, 0, -1, 0)] () 
 [(0, 0, 0, 1, 0), (0, 0, 1, 1, 1), (0, 1, 1, 0, 1), (1, 1, 0, 0, 1)] () 
 [] () 

30 [1, 2, 3, 1, 2] 
 [(0, 0, 0, -1, 0), (0, 0, 1, -1, 1)] () 
 [(0, 0, 0, 1, 0), (0, 1, 1, 0, 1), (1, 1, 0, 0, 1)] () 
 [] () 

31 [1, 2, 3, 1] 
 [(0, 0, 0, -1, 0), (0, 0, 1, -1, 1), (0, 1, 1, -2, 1)] () 
 [(0, 0, 0, 1, 0), (1, 1, 0, 0, 1)] () 
 [] () 

32 [1, 2, 3, 2] 
 [(0, 0, 0, -1, 0)] () 
 [(0, 0, 0, 1, 0), (0, 0, 1, 1, 1), (1, 1, 0, 0, 1)] () 
 [] () 

33 [1, 2, 3] 
 [(0, 0, 0, -1, 0), (0, 0, 1, -1, 1)] () 
 [(0, 0, 0, 1, 0), (1, 1, 0, 0, 1)] () 
 [] () 

34 [1, 2, 1] 
 [(0, 0, 0, -1, 0), (0, 0, 1, -1, 1), (0, 1, 1, -2, 1), (1, 1, 0, -2, 1)] () 
 [(0, 0, 0, 1, 0)] () 
 [] () 

35 [1, 2] 
 [(0, 0, 0, -1, 0), (0, 0, 1, -1, 1), (1, 1, 0, -2, 1)] () 
 [(0, 0, 0, 1, 0)] () 
 [] () 

36 [1, 3] 
 [(0, 0, 0, -1, 0)] () 
 [(0, 0, 0, 1, 0), (0, 0, 1, 1, 1)] () 
 [] () 

37 [1] 
 [(0, 0, 0, -1, 0), (0, 0, 1, -1, 1)] () 
 [(0, 0, 0, 1, 0)] () 
 [] () 

38 [2, 3, 2] 
 [(0, 0, 0, -1, 0)] () 
 [(0, 0, 0, 1, 0), (0, 0, 1, 1, 1), (0, 1, 1, 0, 1)] () 
 [] () 

39 [2, 3] 
 [(0, 0, 0, -1, 0), (0, 0, 1, -1, 1)] () 
 [(0, 0, 0, 1, 0), (0, 1, 1, 0, 1)] () 
 [] () 

40 [2] 
 [(0, 0, 0, -1, 0), (0, 0, 1, -1, 1), (0, 1, 1, -2, 1)] () 
 [(0, 0, 0, 1, 0)] () 
 [] () 

41 [3] 
 [(0, 0, 0, -1, 0)] () 
 [(0, 0, 0, 1, 0), (0, 0, 1, 1, 1)] () 
 [] () 

42 [] 
 [(0, 0, 0, -1, 0), (0, 0, 1, -1, 1)] () 
 [(0, 0, 0, 1, 0)] () 
 [] () 

sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_cone(B(A,c),lam(A,v),list(sortables(A,c[1:])))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list([c[0]]+v for v in sortables(A,c[1
....: :])))
....:     R=P.intersection(Q)
....:     print(num,v,"\n",sorted(map(vector,P.rays())),P.lines(),"\n",sorted(ma
....: p(vector,Q.rays())),Q.lines(),"\n",sorted(map(vector,R.rays())),R.lines(),
....: "\n")
1 [1, 2, 1, 2] 
 [(0, -1, 0)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [] () 

2 [1, 2, 1] 
 [(0, -1, 0)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [] () 

3 [1, 2] 
 [(0, -1, 0), (1, 1, -1)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [(1, 1, -1)] () 

4 [1] 
 [(0, -1, 0), (1, 1, -1)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [(1, 1, -1)] () 

5 [2] 
 [(0, -1, 0), (1, -1, -1)] () 
 [(0, 1, 0)] () 
 [] () 

6 [] 
 [(0, -1, 0), (1, 1, -1)] () 
 [(0, 1, 0)] () 
 [] () 

sage: B(A,c)
[ 0  1  0]
[-1  0  2]
[ 0 -1  0]
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_cone(B(A,c),lam(A,v),list(sortables(A,c[1:])))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list([c[0]]+v for v in sortables(A,c[1
....: :])))
....:     R=P.intersection(Q)
....:     print(num,v,"\n",sorted(map(vector,P.rays())),P.lines(),"\n",sorted(ma
....: p(vector,Q.rays())),Q.lines(),"\n",sorted(map(vector,R.rays())),R.lines(),
....: "\n")
1 [2, 1, 2, 1] 
 [(0, -1, 0)] () 
 [(0, 1, 0), (1, -1, 1)] () 
 [] () 

2 [2, 1, 2] 
 [(0, -1, 0), (1, -1, 1)] () 
 [(0, 1, 0), (1, -1, 1)] () 
 [(1, -1, 1)] () 

3 [2, 1] 
 [(0, -1, 0), (1, -1, 1)] () 
 [(0, 1, 0), (1, -1, 1)] () 
 [(1, -1, 1)] () 

4 [2] 
 [(0, -1, 0), (1, -1, 1)] () 
 [(0, 1, 0)] () 
 [] () 

5 [1] 
 [(0, -1, 0)] () 
 [(0, 1, 0), (1, 1, 1)] () 
 [] () 

6 [] 
 [(0, -1, 0), (1, -1, 1)] () 
 [(0, 1, 0)] () 
 [] () 

sage: B(A,c)
[ 0  1  0]
[-1  0 -2]
[ 0  1  0]
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_cone(B(A,c),lam(A,v),list(sortables(A,c[1:])))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list([c[0]]+v for v in sortables(A,c[1
....: :])))
....:     R=P.intersection(Q)
....:     print(num,v,"\n",sorted(map(vector,P.rays())),P.lines(),"\n",sorted(ma
....: p(vector,Q.rays())),Q.lines(),"\n",sorted(map(vector,R.rays())),R.lines(),
....: "\n")
1 [1, 2, 3, 1, 2, 3, 1, 2, 3] 
 [(0, -1, 0, 0)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0)] () 
 [] () 

2 [1, 2, 3, 1, 2, 3, 1, 2] 
 [(0, -1, 0, 0)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0)] () 
 [] () 

3 [1, 2, 3, 1, 2, 3, 1] 
 [(0, -1, 0, 0)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (1, 2, 1, -1)] () 
 [] () 

4 [1, 2, 3, 1, 2, 3] 
 [(0, -1, 0, 0), (1, 0, 1, -1)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0)] () 
 [] () 

5 [1, 2, 3, 1, 2, 1] 
 [(0, -1, 0, 0)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (1, 2, 1, -1), (1, 3, 1, -2)] () 
 [] () 

6 [1, 2, 3, 1, 2] 
 [(0, -1, 0, 0), (1, 0, 1, -1)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (1, 3, 1, -2)] () 
 [] () 

7 [1, 2, 3, 1] 
 [(0, -1, 0, 0), (1, 0, 1, -1), (1, 1, 1, -2)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (2, 3, 0, -2)] () 
 [] () 

8 [1, 2, 3, 2, 3] 
 [(0, -1, 0, 0)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (1, 2, -1, -1)] () 
 [] () 

9 [1, 2, 3, 2] 
 [(0, -1, 0, 0)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (1, 2, -1, -1), (1, 2, 1, -1)] () 
 [] () 

10 [1, 2, 3] 
 [(0, -1, 0, 0), (1, 0, 1, -1)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (1, 2, -1, -1), (2, 3, 0, -2)] () 
 [] () 

11 [1, 2, 1] 
 [(0, -1, 0, 0), (1, 0, 1, -1), (1, 1, 1, -2), (2, 1, 0, -2)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0)] () 
 [] () 

12 [1, 2] 
 [(0, -1, 0, 0), (1, 0, 1, -1), (2, 1, 0, -2)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (1, 2, -1, -1)] () 
 [] () 

13 [1, 3] 
 [(0, -1, 0, 0), (1, 0, -1, -1)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0)] () 
 [] () 

14 [1] 
 [(0, -1, 0, 0), (1, 0, -1, -1), (1, 0, 1, -1)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0)] () 
 [] () 

15 [2, 3, 2, 3] 
 [(0, -1, 0, 0), (1, -1, -1, 0)] () 
 [(0, 1, 0, 0)] () 
 [] () 

16 [2, 3, 2] 
 [(0, -1, 0, 0), (1, -1, -1, 0)] () 
 [(0, 1, 0, 0)] () 
 [] () 

17 [2, 3] 
 [(0, -1, 0, 0), (1, -1, -1, 0), (1, 0, 1, -1)] () 
 [(0, 1, 0, 0)] () 
 [] () 

18 [2] 
 [(0, -1, 0, 0), (1, -1, -1, 0), (1, 0, 1, -1), (1, 1, 1, -2)] () 
 [(0, 1, 0, 0)] () 
 [] () 

19 [3] 
 [(0, -1, 0, 0), (1, -1, -1, 0), (1, 0, -1, -1)] () 
 [(0, 1, 0, 0)] () 
 [] () 

20 [] 
 [(0, -1, 0, 0), (1, -1, -1, 0), (1, 0, -1, -1), (1, 0, 1, -1)] () 
 [(0, 1, 0, 0)] () 
 [] () 

sage: B(A,c)
[ 0  1  0  0]
[-1  0  1  0]
[ 0 -1  0  2]
[ 0  0 -1  0]
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_cone(B(A,c),lam(A,v),list(sortables(A,c[1:])))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list([c[0]]+v for v in sortables(A,c[1
....: :])))
....:     R=P.intersection(Q)
....:     print(num,v,"\n",sorted(map(vector,P.rays())),P.lines(),"\n",sorted(ma
....: p(vector,Q.rays())),Q.lines(),"\n",sorted(map(vector,R.rays())),R.lines(),
....: "\n")
1 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] () 
 [] () 

2 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] () 
 [] () 

3 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] () 
 [] () 

4 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, 0, 1, -1)] () 
 [] () 

5 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 
 [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] () 
 [] () 

6 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] () 
 [] () 

7 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, 0, 1, -1)] () 
 [] () 

8 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 
 [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] () 
 [] () 

9 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, 0, 1, -1), (1, 2, 1, 1, -2)] () 
 [] () 

10 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 
 [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, 1, 1, -2)] () 
 [] () 

11 [1, 2, 3, 4, 1, 2, 3, 4, 1] 
 [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (1, 0, 1, 1, -2)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] () 
 [] () 

12 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] () 
 [] () 

13 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] () 
 [] () 

14 [1, 2, 3, 4, 1, 2, 3, 4, 2] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, 0, 1, -1)] () 
 [] () 

15 [1, 2, 3, 4, 1, 2, 3, 4] 
 [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] () 
 [] () 

16 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, 0, 1, -1), (1, 2, 1, 1, -2), (1, 3, 1, 0, -2)] () 
 [] () 

17 [1, 2, 3, 4, 1, 2, 3, 1, 2] 
 [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, 1, 1, -2), (1, 3, 1, 0, -2)] () 
 [] () 

18 [1, 2, 3, 4, 1, 2, 3, 1] 
 [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (1, 0, 1, 1, -2)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 3, 1, 0, -2)] () 
 [] () 

19 [1, 2, 3, 4, 1, 2, 3, 2] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, 0, 1, -1), (1, 3, 1, 0, -2)] () 
 [] () 

20 [1, 2, 3, 4, 1, 2, 3] 
 [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 3, 1, 0, -2)] () 
 [] () 

21 [1, 2, 3, 4, 1, 2, 1] 
 [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (1, 0, 1, 1, -2), (1, 1, 1, 0, -2)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (2, 3, 0, 0, -2)] () 
 [] () 

22 [1, 2, 3, 4, 1, 2] 
 [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (1, 1, 1, 0, -2)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (2, 3, 0, 0, -2)] () 
 [] () 

23 [1, 2, 3, 4, 1, 3, 4] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, 0, -1, -1)] () 
 [] () 

24 [1, 2, 3, 4, 1, 3] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, 0, -1, -1), (1, 2, 0, 1, -1)] () 
 [] () 

25 [1, 2, 3, 4, 1] 
 [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, 0, -1, -1), (2, 3, 0, 0, -2)] () 
 [] () 

26 [1, 2, 3, 4, 2, 3, 4, 2, 3, 4] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, -1, -1, 0)] () 
 [] () 

27 [1, 2, 3, 4, 2, 3, 4, 2, 3] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, -1, -1, 0)] () 
 [] () 

28 [1, 2, 3, 4, 2, 3, 4, 2] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, -1, -1, 0), (1, 2, 0, 1, -1)] () 
 [] () 

29 [1, 2, 3, 4, 2, 3, 4] 
 [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, -1, -1, 0)] () 
 [] () 

30 [1, 2, 3, 4, 2, 3, 2] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, -1, -1, 0), (1, 2, 0, 1, -1), (1, 2, 1, 1, -2)] () 
 [] () 

31 [1, 2, 3, 4, 2, 3] 
 [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, -1, -1, 0), (1, 2, 1, 1, -2)] () 
 [] () 

32 [1, 2, 3, 4, 2] 
 [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (1, 0, 1, 1, -2)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, -1, -1, 0), (2, 3, 0, 0, -2)] () 
 [] () 

33 [1, 2, 3, 4, 3, 4] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, -1, -1, 0), (1, 2, 0, -1, -1)] () 
 [] () 

34 [1, 2, 3, 4, 3] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, -1, -1, 0), (1, 2, 0, -1, -1), (1, 2, 0, 1, -1)] () 
 [] () 

35 [1, 2, 3, 4] 
 [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, -1, -1, 0), (1, 2, 0, -1, -1), (2, 3, 0, 0, -2)] () 
 [] () 

36 [1, 2, 3, 1, 2, 1] 
 [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (1, 0, 1, 1, -2), (1, 1, 1, 0, -2), (2, 1, 0, 0, -2)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] () 
 [] () 

37 [1, 2, 3, 1, 2] 
 [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (1, 1, 1, 0, -2), (2, 1, 0, 0, -2)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] () 
 [] () 

38 [1, 2, 3, 1] 
 [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (2, 1, 0, 0, -2)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, 0, -1, -1)] () 
 [] () 

39 [1, 2, 3, 2] 
 [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (1, 0, 1, 1, -2), (2, 1, 0, 0, -2)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, -1, -1, 0)] () 
 [] () 

40 [1, 2, 3] 
 [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (2, 1, 0, 0, -2)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, -1, -1, 0), (1, 2, 0, -1, -1)] () 
 [] () 

41 [1, 2, 4, 1] 
 [(0, -1, 0, 0, 0), (1, 0, 0, -1, -1)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] () 
 [] () 

42 [1, 2, 4] 
 [(0, -1, 0, 0, 0), (1, 0, 0, -1, -1)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, -1, -1, 0)] () 
 [] () 

43 [1, 2, 1] 
 [(0, -1, 0, 0, 0), (1, 0, 0, -1, -1), (1, 0, 0, 1, -1)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] () 
 [] () 

44 [1, 2] 
 [(0, -1, 0, 0, 0), (1, 0, 0, -1, -1), (1, 0, 0, 1, -1)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, -1, -1, 0)] () 
 [] () 

45 [1, 3, 4, 3, 4] 
 [(0, -1, 0, 0, 0), (1, 0, -1, -1, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] () 
 [] () 

46 [1, 3, 4, 3] 
 [(0, -1, 0, 0, 0), (1, 0, -1, -1, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] () 
 [] () 

47 [1, 3, 4] 
 [(0, -1, 0, 0, 0), (1, 0, -1, -1, 0), (1, 0, 0, 1, -1)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] () 
 [] () 

48 [1, 3] 
 [(0, -1, 0, 0, 0), (1, 0, -1, -1, 0), (1, 0, 0, 1, -1), (1, 0, 1, 1, -2)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] () 
 [] () 

49 [1, 4] 
 [(0, -1, 0, 0, 0), (1, 0, -1, -1, 0), (1, 0, 0, -1, -1)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] () 
 [] () 

50 [1] 
 [(0, -1, 0, 0, 0), (1, 0, -1, -1, 0), (1, 0, 0, -1, -1), (1, 0, 0, 1, -1)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] () 
 [] () 

51 [2, 3, 4, 2, 3, 4, 2, 3, 4] 
 [(0, -1, 0, 0, 0), (1, -1, -1, 0, 0)] () 
 [(0, 1, 0, 0, 0)] () 
 [] () 

52 [2, 3, 4, 2, 3, 4, 2, 3] 
 [(0, -1, 0, 0, 0), (1, -1, -1, 0, 0)] () 
 [(0, 1, 0, 0, 0)] () 
 [] () 

53 [2, 3, 4, 2, 3, 4, 2] 
 [(0, -1, 0, 0, 0), (1, -1, -1, 0, 0)] () 
 [(0, 1, 0, 0, 0)] () 
 [] () 

54 [2, 3, 4, 2, 3, 4] 
 [(0, -1, 0, 0, 0), (1, -1, -1, 0, 0), (1, 0, 0, 1, -1)] () 
 [(0, 1, 0, 0, 0)] () 
 [] () 

55 [2, 3, 4, 2, 3, 2] 
 [(0, -1, 0, 0, 0), (1, -1, -1, 0, 0)] () 
 [(0, 1, 0, 0, 0)] () 
 [] () 

56 [2, 3, 4, 2, 3] 
 [(0, -1, 0, 0, 0), (1, -1, -1, 0, 0), (1, 0, 0, 1, -1)] () 
 [(0, 1, 0, 0, 0)] () 
 [] () 

57 [2, 3, 4, 2] 
 [(0, -1, 0, 0, 0), (1, -1, -1, 0, 0), (1, 0, 0, 1, -1), (1, 0, 1, 1, -2)] () 
 [(0, 1, 0, 0, 0)] () 
 [] () 

58 [2, 3, 4, 3, 4] 
 [(0, -1, 0, 0, 0), (1, -1, -1, 0, 0)] () 
 [(0, 1, 0, 0, 0)] () 
 [] () 

59 [2, 3, 4, 3] 
 [(0, -1, 0, 0, 0), (1, -1, -1, 0, 0)] () 
 [(0, 1, 0, 0, 0)] () 
 [] () 

60 [2, 3, 4] 
 [(0, -1, 0, 0, 0), (1, -1, -1, 0, 0), (1, 0, 0, 1, -1)] () 
 [(0, 1, 0, 0, 0)] () 
 [] () 

61 [2, 3, 2] 
 [(0, -1, 0, 0, 0), (1, -1, -1, 0, 0), (1, 0, 0, 1, -1), (1, 0, 1, 1, -2), (1, 1, 1, 0, -2)] () 
 [(0, 1, 0, 0, 0)] () 
 [] () 

62 [2, 3] 
 [(0, -1, 0, 0, 0), (1, -1, -1, 0, 0), (1, 0, 0, 1, -1), (1, 1, 1, 0, -2)] () 
 [(0, 1, 0, 0, 0)] () 
 [] () 

63 [2, 4] 
 [(0, -1, 0, 0, 0), (1, -1, -1, 0, 0), (1, 0, 0, -1, -1)] () 
 [(0, 1, 0, 0, 0)] () 
 [] () 

64 [2] 
 [(0, -1, 0, 0, 0), (1, -1, -1, 0, 0), (1, 0, 0, -1, -1), (1, 0, 0, 1, -1)] () 
 [(0, 1, 0, 0, 0)] () 
 [] () 

65 [3, 4, 3, 4] 
 [(0, -1, 0, 0, 0), (1, -1, -1, 0, 0), (1, 0, -1, -1, 0)] () 
 [(0, 1, 0, 0, 0)] () 
 [] () 

66 [3, 4, 3] 
 [(0, -1, 0, 0, 0), (1, -1, -1, 0, 0), (1, 0, -1, -1, 0)] () 
 [(0, 1, 0, 0, 0)] () 
 [] () 

67 [3, 4] 
 [(0, -1, 0, 0, 0), (1, -1, -1, 0, 0), (1, 0, -1, -1, 0), (1, 0, 0, 1, -1)] () 
 [(0, 1, 0, 0, 0)] () 
 [] () 

68 [3] 
 [(0, -1, 0, 0, 0), (1, -1, -1, 0, 0), (1, 0, -1, -1, 0), (1, 0, 0, 1, -1), (1, 0, 1, 1, -2)] () 
 [(0, 1, 0, 0, 0)] () 
 [] () 

69 [4] 
 [(0, -1, 0, 0, 0), (1, -1, -1, 0, 0), (1, 0, -1, -1, 0), (1, 0, 0, -1, -1)] () 
 [(0, 1, 0, 0, 0)] () 
 [] () 

70 [] 
 [(0, -1, 0, 0, 0), (1, -1, -1, 0, 0), (1, 0, -1, -1, 0), (1, 0, 0, -1, -1), (1, 0, 0, 1, -1)] () 
 [(0, 1, 0, 0, 0)] () 
 [] () 

sage: B(A,c)
[ 0  1  0  0  0]
[-1  0  1  0  0]
[ 0 -1  0  1  0]
[ 0  0 -1  0  2]
[ 0  0  0 -1  0]
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: for v in sortables(A,c[1;]):
....:     P=p_lambda_cone(B(A,c),lam(A,v),[[1]])
  Cell In [978], line 3
    for v in sortables(A,c[Integer(1);]):
                                     ^
SyntaxError: invalid syntax

sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_cone(B(A,c),lam(A,v),[[1]])
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_cone(B(A,c),lam(A,v),[[1]])
....:     print(num,v,"\n",sorted(map(vector,P.rays())),P.lines(),"\n")
....: 
1 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

2 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

3 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

4 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

5 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

6 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

7 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

8 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

9 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

10 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

11 [1, 2, 3, 4, 1, 2, 3, 4, 1] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

12 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

13 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

14 [1, 2, 3, 4, 1, 2, 3, 4, 2] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

15 [1, 2, 3, 4, 1, 2, 3, 4] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

16 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

17 [1, 2, 3, 4, 1, 2, 3, 1, 2] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

18 [1, 2, 3, 4, 1, 2, 3, 1] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

19 [1, 2, 3, 4, 1, 2, 3, 2] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

20 [1, 2, 3, 4, 1, 2, 3] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

21 [1, 2, 3, 4, 1, 2, 1] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

22 [1, 2, 3, 4, 1, 2] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

23 [1, 2, 3, 4, 1, 3, 4] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

24 [1, 2, 3, 4, 1, 3] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

25 [1, 2, 3, 4, 1] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

26 [1, 2, 3, 4, 2, 3, 4, 2, 3, 4] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

27 [1, 2, 3, 4, 2, 3, 4, 2, 3] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

28 [1, 2, 3, 4, 2, 3, 4, 2] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

29 [1, 2, 3, 4, 2, 3, 4] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

30 [1, 2, 3, 4, 2, 3, 2] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

31 [1, 2, 3, 4, 2, 3] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

32 [1, 2, 3, 4, 2] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

33 [1, 2, 3, 4, 3, 4] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

34 [1, 2, 3, 4, 3] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

35 [1, 2, 3, 4] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

36 [1, 2, 3, 1, 2, 1] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

37 [1, 2, 3, 1, 2] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

38 [1, 2, 3, 1] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

39 [1, 2, 3, 2] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

40 [1, 2, 3] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

41 [1, 2, 4, 1] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

42 [1, 2, 4] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

43 [1, 2, 1] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

44 [1, 2] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

45 [1, 3, 4, 3, 4] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

46 [1, 3, 4, 3] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

47 [1, 3, 4] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

48 [1, 3] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

49 [1, 4] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

50 [1] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

51 [2, 3, 4, 2, 3, 4, 2, 3, 4] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

52 [2, 3, 4, 2, 3, 4, 2, 3] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

53 [2, 3, 4, 2, 3, 4, 2] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

54 [2, 3, 4, 2, 3, 4] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

55 [2, 3, 4, 2, 3, 2] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

56 [2, 3, 4, 2, 3] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

57 [2, 3, 4, 2] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

58 [2, 3, 4, 3, 4] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

59 [2, 3, 4, 3] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

60 [2, 3, 4] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

61 [2, 3, 2] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

62 [2, 3] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

63 [2, 4] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

64 [2] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

65 [3, 4, 3, 4] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

66 [3, 4, 3] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

67 [3, 4] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

68 [3] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

69 [4] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

70 [] 
 [(1, 0, 0, 0, -1)] (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: num=0
....: Q=p_lambda_cone(B(A,c),lam(A,[]),[[1]])
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_cone(B(A,c),lam(A,v),[[1]])
....:     print(num,v,"\n",sorted(map(vector,P.rays()))==sorted(map(vector,Q.ray
....: s())),Q.lines()==P.lines(),"\n")
....: 
1 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 
 True True 

2 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 
 True True 

3 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 
 True True 

4 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1] 
 True True 

5 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 
 True True 

6 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2] 
 True True 

7 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1] 
 True True 

8 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 
 True True 

9 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1] 
 True True 

10 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 
 True True 

11 [1, 2, 3, 4, 1, 2, 3, 4, 1] 
 True True 

12 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4] 
 True True 

13 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3] 
 True True 

14 [1, 2, 3, 4, 1, 2, 3, 4, 2] 
 True True 

15 [1, 2, 3, 4, 1, 2, 3, 4] 
 True True 

16 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 
 True True 

17 [1, 2, 3, 4, 1, 2, 3, 1, 2] 
 True True 

18 [1, 2, 3, 4, 1, 2, 3, 1] 
 True True 

19 [1, 2, 3, 4, 1, 2, 3, 2] 
 True True 

20 [1, 2, 3, 4, 1, 2, 3] 
 True True 

21 [1, 2, 3, 4, 1, 2, 1] 
 True True 

22 [1, 2, 3, 4, 1, 2] 
 True True 

23 [1, 2, 3, 4, 1, 3, 4] 
 True True 

24 [1, 2, 3, 4, 1, 3] 
 True True 

25 [1, 2, 3, 4, 1] 
 True True 

26 [1, 2, 3, 4, 2, 3, 4, 2, 3, 4] 
 True True 

27 [1, 2, 3, 4, 2, 3, 4, 2, 3] 
 True True 

28 [1, 2, 3, 4, 2, 3, 4, 2] 
 True True 

29 [1, 2, 3, 4, 2, 3, 4] 
 True True 

30 [1, 2, 3, 4, 2, 3, 2] 
 True True 

31 [1, 2, 3, 4, 2, 3] 
 True True 

32 [1, 2, 3, 4, 2] 
 True True 

33 [1, 2, 3, 4, 3, 4] 
 True True 

34 [1, 2, 3, 4, 3] 
 True True 

35 [1, 2, 3, 4] 
 True True 

36 [1, 2, 3, 1, 2, 1] 
 True True 

37 [1, 2, 3, 1, 2] 
 True True 

38 [1, 2, 3, 1] 
 True True 

39 [1, 2, 3, 2] 
 True True 

40 [1, 2, 3] 
 True True 

41 [1, 2, 4, 1] 
 True True 

42 [1, 2, 4] 
 True True 

43 [1, 2, 1] 
 True True 

44 [1, 2] 
 True True 

45 [1, 3, 4, 3, 4] 
 True True 

46 [1, 3, 4, 3] 
 True True 

47 [1, 3, 4] 
 True True 

48 [1, 3] 
 True True 

49 [1, 4] 
 True True 

50 [1] 
 True True 

51 [2, 3, 4, 2, 3, 4, 2, 3, 4] 
 True True 

52 [2, 3, 4, 2, 3, 4, 2, 3] 
 True True 

53 [2, 3, 4, 2, 3, 4, 2] 
 True True 

54 [2, 3, 4, 2, 3, 4] 
 True True 

55 [2, 3, 4, 2, 3, 2] 
 True True 

56 [2, 3, 4, 2, 3] 
 True True 

57 [2, 3, 4, 2] 
 True True 

58 [2, 3, 4, 3, 4] 
 True True 

59 [2, 3, 4, 3] 
 True True 

60 [2, 3, 4] 
 True True 

61 [2, 3, 2] 
 True True 

62 [2, 3] 
 True True 

63 [2, 4] 
 True True 

64 [2] 
 True True 

65 [3, 4, 3, 4] 
 True True 

66 [3, 4, 3] 
 True True 

67 [3, 4] 
 True True 

68 [3] 
 True True 

69 [4] 
 True True 

70 [] 
 True True 

sage: 
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: num=0
....: Q=p_lambda_cone(B(A,c),lam(A,[]),[[1]])
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_cone(B(A,c),lam(A,v),[[1]])
....:     print(num,sorted(map(vector,P.rays()))==sorted(map(vector,Q.rays())),Q
....: .lines()==P.lines())
1 True True
2 True True
3 True True
4 True True
5 True True
6 True True
7 True True
8 True True
9 True True
10 True True
11 True True
12 True True
13 True True
14 True True
15 True True
16 True True
17 True True
18 True True
19 True True
20 True True
21 True True
22 True True
23 True True
24 True True
25 True True
26 True True
27 True True
28 True True
29 True True
30 True True
31 True True
32 True True
33 True True
34 True True
35 True True
36 True True
37 True True
38 True True
39 True True
40 True True
41 True True
42 True True
43 True True
44 True True
45 True True
46 True True
47 True True
48 True True
49 True True
50 True True
51 True True
52 True True
53 True True
54 True True
55 True True
56 True True
57 True True
58 True True
59 True True
60 True True
61 True True
62 True True
63 True True
64 True True
65 True True
66 True True
67 True True
68 True True
69 True True
70 True True
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: num=0
....: Q=p_lambda_cone(B(A,c),lam(A,[]),[[1,2]])
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_cone(B(A,c),lam(A,v),[[1,2]])
....:     print(num,sorted(map(vector,P.rays()))==sorted(map(vector,Q.rays())),Q
....: .lines()==P.lines())
1 False False
2 False False
3 False False
4 False False
5 False False
6 False False
7 False False
8 False False
9 False False
10 False False
11 False False
12 False False
13 False False
14 False False
15 False False
16 False False
17 False False
18 False False
19 False False
20 False False
21 False False
22 False False
23 False False
24 False False
25 False False
26 False False
27 False False
28 False False
29 False False
30 False False
31 False False
32 False False
33 False False
34 False False
35 False False
36 False False
37 False False
38 False False
39 False False
40 False False
41 False False
42 False False
43 False False
44 False False
45 True True
46 True True
47 True True
48 True True
49 True True
50 True True
51 False False
52 False False
53 False False
54 False False
55 False False
56 False False
57 False False
58 False False
59 False False
60 False False
61 False False
62 False False
63 False False
64 False False
65 True True
66 True True
67 True True
68 True True
69 True True
70 True True
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: num=0
....: Q=p_lambda_cone(B(A,c),lam(A,[]),[[1]])
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_cone(B(A,c),lam(A,v),[[1]])
....:     print(num,sorted(map(vector,P.rays()))==sorted(map(vector,Q.rays())),s
....: orted(Q.lines())==sorted(P.lines()))
....: 
1 True True
2 True True
3 True True
4 True True
5 True True
6 True True
7 True True
8 True True
9 True True
10 True True
11 True True
12 True True
13 True True
14 True True
15 True True
16 True True
17 True True
18 True True
19 True True
20 True True
21 True True
22 True True
23 True True
24 True True
25 True True
26 True True
27 True True
28 True True
29 True True
30 True True
31 True True
32 True True
33 True True
34 True True
35 True True
36 True True
37 True True
38 True True
39 True True
40 True True
41 True True
42 True True
43 True True
44 True True
45 True True
46 True True
47 True True
48 True True
49 True True
50 True True
51 True True
52 True True
53 True True
54 True True
55 True True
56 True True
57 True True
58 True True
59 True True
60 True True
61 True True
62 True True
63 True True
64 True True
65 True True
66 True True
67 True True
68 True True
69 True True
70 True True
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: num=0
....: Q=p_lambda_cone(B(A,c),lam(A,[]),[[1,2]])
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_cone(B(A,c),lam(A,v),[[1,2]])
....:     print(num,sorted(map(vector,P.rays()))==sorted(map(vector,Q.rays())),s
....: orted(Q.lines())==sorted(P.lines()))
1 False False
2 False False
3 False False
4 False False
5 False False
6 False False
7 False False
8 False False
9 False False
10 False False
11 False False
12 False False
13 False False
14 False False
15 False False
16 False False
17 False False
18 False False
19 False False
20 False False
21 False False
22 False False
23 False False
24 False False
25 False False
26 False False
27 False False
28 False False
29 False False
30 False False
31 False False
32 False False
33 False False
34 False False
35 False False
36 False False
37 False False
38 False False
39 False False
40 False False
41 False False
42 False False
43 False False
44 False False
45 True True
46 True True
47 True True
48 True True
49 True True
50 True True
51 False False
52 False False
53 False False
54 False False
55 False False
56 False False
57 False False
58 False False
59 False False
60 False False
61 False False
62 False False
63 False False
64 False False
65 True True
66 True True
67 True True
68 True True
69 True True
70 True True
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: num=0
....: Q=p_lambda_cone(B(A,c),lam(A,[]),[[1]])
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_cone(B(A,c),lam(A,v),[[1]])
....:     print(num,sorted(map(vector,P.rays()))==sorted(map(vector,Q.rays())),s
....: orted(Q.lines())==sorted(P.lines()))
....: 
1 True True
2 True True
3 True True
4 True True
5 True True
6 True True
7 True True
8 True True
9 True True
10 True True
11 True True
12 True True
13 True True
14 True True
15 True True
16 True True
17 True True
18 True True
19 True True
20 True True
21 True True
22 True True
23 True True
24 True True
25 True True
26 True True
27 True True
28 True True
29 True True
30 True True
31 True True
32 True True
33 True True
34 True True
35 True True
36 True True
37 True True
38 True True
39 True True
40 True True
41 True True
42 True True
43 True True
44 True True
45 True True
46 True True
47 True True
48 True True
49 True True
50 True True
51 True True
52 True True
53 True True
54 True True
55 True True
56 True True
57 True True
58 True True
59 True True
60 True True
61 True True
62 True True
63 True True
64 True True
65 True True
66 True True
67 True True
68 True True
69 True True
70 True True
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: num=0
....: Q=p_lambda_cone(B(A,c),lam(A,[]),[[2]])
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_cone(B(A,c),lam(A,v),[[2]])
....:     print(num,sorted(map(vector,P.rays()))==sorted(map(vector,Q.rays())),s
....: orted(Q.lines())==sorted(P.lines()))
1 False True
2 False True
3 False True
4 False True
5 False True
6 False True
7 False True
8 False True
9 False True
10 False True
11 False True
12 False True
13 False True
14 False True
15 False True
16 False True
17 False True
18 False True
19 False True
20 False True
21 False True
22 False True
23 False True
24 False True
25 False True
26 True True
27 True True
28 True True
29 True True
30 True True
31 True True
32 True True
33 True True
34 True True
35 True True
36 False True
37 False True
38 False True
39 True True
40 True True
41 False True
42 True True
43 False True
44 True True
45 True True
46 True True
47 True True
48 True True
49 True True
50 True True
51 False True
52 False True
53 False True
54 False True
55 False True
56 False True
57 False True
58 False True
59 False True
60 False True
61 False True
62 False True
63 False True
64 False True
65 True True
66 True True
67 True True
68 True True
69 True True
70 True True
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: num=0
....: Q=p_lambda_cone(B(A,c),lam(A,[]),[[3]])
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_cone(B(A,c),lam(A,v),[[3]])
....:     print(num,sorted(map(vector,P.rays()))==sorted(map(vector,Q.rays())),s
....: orted(Q.lines())==sorted(P.lines()))
1 True True
2 True True
3 True True
4 True True
5 True True
6 True True
7 True True
8 True True
9 True True
10 True True
11 True True
12 True True
13 True True
14 True True
15 True True
16 True True
17 True True
18 True True
19 True True
20 True True
21 True True
22 True True
23 True True
24 True True
25 True True
26 True True
27 True True
28 True True
29 True True
30 True True
31 True True
32 True True
33 True True
34 True True
35 True True
36 True True
37 True True
38 True True
39 True True
40 True True
41 True True
42 True True
43 True True
44 True True
45 True True
46 True True
47 True True
48 True True
49 True True
50 True True
51 True True
52 True True
53 True True
54 True True
55 True True
56 True True
57 True True
58 True True
59 True True
60 True True
61 True True
62 True True
63 True True
64 True True
65 True True
66 True True
67 True True
68 True True
69 True True
70 True True
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: num=0
....: Q=p_lambda_cone(B(A,c),lam(A,[]),[[4]])
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_cone(B(A,c),lam(A,v),[[4]])
....:     print(num,sorted(map(vector,P.rays()))==sorted(map(vector,Q.rays())),s
....: orted(Q.lines())==sorted(P.lines()))
1 False True
2 True True
3 True True
4 True True
5 True True
6 True True
7 True True
8 True True
9 True True
10 True True
11 True True
12 False True
13 True True
14 True True
15 True True
16 True True
17 True True
18 True True
19 True True
20 True True
21 True True
22 True True
23 False True
24 True True
25 True True
26 False True
27 True True
28 True True
29 True True
30 True True
31 True True
32 True True
33 False True
34 True True
35 True True
36 True True
37 True True
38 True True
39 True True
40 True True
41 False True
42 False True
43 True True
44 True True
45 False True
46 True True
47 True True
48 True True
49 False True
50 True True
51 False True
52 True True
53 True True
54 True True
55 True True
56 True True
57 True True
58 False True
59 True True
60 True True
61 True True
62 True True
63 False True
64 True True
65 False True
66 True True
67 True True
68 True True
69 False True
70 True True
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: num=0
....: Q=p_lambda_cone(B(A,c),lam(A,[]),[[1]])
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_cone(B(A,c),lam(A,v),[[1]])
....:     print(num,sorted(map(vector,P.rays()))==sorted(map(vector,Q.rays())),s
....: orted(Q.lines())==sorted(P.lines()))
....: print(Q,"\n",Q.vertices(),"\n",Q.rays(),Q.lines(),"\n")
1 True True
2 True True
3 True True
4 True True
5 True True
6 True True
7 True True
8 True True
9 True True
10 True True
11 True True
12 True True
13 True True
14 True True
15 True True
16 True True
17 True True
18 True True
19 True True
20 True True
21 True True
22 True True
23 True True
24 True True
25 True True
26 True True
27 True True
28 True True
29 True True
30 True True
31 True True
32 True True
33 True True
34 True True
35 True True
36 True True
37 True True
38 True True
39 True True
40 True True
41 True True
42 True True
43 True True
44 True True
45 True True
46 True True
47 True True
48 True True
49 True True
50 True True
51 True True
52 True True
53 True True
54 True True
55 True True
56 True True
57 True True
58 True True
59 True True
60 True True
61 True True
62 True True
63 True True
64 True True
65 True True
66 True True
67 True True
68 True True
69 True True
70 True True
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex, 1 ray, 3 lines 
 (A vertex at (2, 0, 0, 0, 1),) 
 (A ray in the direction (1, 0, 0, 0, -1),) (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: num=0
....: Q=p_lambda_cone(B(A,c),lam(A,[]),[[1]])
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_cone(B(A,c),lam(A,v),[[1]])
....:     print(num,sorted(map(vector,P.rays()))==sorted(map(vector,Q.rays())),s
....: orted(Q.lines())==sorted(P.lines()))
....: print(Q,"\n",Q.rays(),"\n",Q.lines(),"\n")
1 True True
2 True True
3 True True
4 True True
5 True True
6 True True
7 True True
8 True True
9 True True
10 True True
11 True True
12 True True
13 True True
14 True True
15 True True
16 True True
17 True True
18 True True
19 True True
20 True True
21 True True
22 True True
23 True True
24 True True
25 True True
26 True True
27 True True
28 True True
29 True True
30 True True
31 True True
32 True True
33 True True
34 True True
35 True True
36 True True
37 True True
38 True True
39 True True
40 True True
41 True True
42 True True
43 True True
44 True True
45 True True
46 True True
47 True True
48 True True
49 True True
50 True True
51 True True
52 True True
53 True True
54 True True
55 True True
56 True True
57 True True
58 True True
59 True True
60 True True
61 True True
62 True True
63 True True
64 True True
65 True True
66 True True
67 True True
68 True True
69 True True
70 True True
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex, 1 ray, 3 lines 
 (A ray in the direction (1, 0, 0, 0, -1),) 
 (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

sage: B(A,c)
[ 0  1  0  0  0]
[-1  0  1  0  0]
[ 0 -1  0  1  0]
[ 0  0 -1  0  2]
[ 0  0  0 -1  0]
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: num=0
....: Q=p_lambda_cone(B(A,c),lam(A,[]),[[c[0]]])
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_cone(B(A,c),lam(A,v),[[c[0]]])
....:     print(num,sorted(map(vector,P.rays()))==sorted(map(vector,Q.rays())),s
....: orted(Q.lines())==sorted(P.lines()))
....: print(Q,"\n",Q.rays(),"\n",Q.lines(),"\n")
1 True True
2 True True
3 True True
4 True True
5 True True
6 True True
7 True True
8 True True
9 True True
10 True True
11 True True
12 True True
13 True True
14 True True
15 True True
16 True True
17 True True
18 True True
19 True True
20 True True
21 True True
22 True True
23 True True
24 True True
25 True True
26 True True
27 True True
28 True True
29 True True
30 True True
31 True True
32 True True
33 True True
34 True True
35 True True
36 True True
37 True True
38 True True
39 True True
40 True True
41 True True
42 True True
43 True True
44 True True
45 True True
46 True True
47 True True
48 True True
49 True True
50 True True
51 True True
52 True True
53 True True
54 True True
55 True True
56 True True
57 True True
58 True True
59 True True
60 True True
61 True True
62 True True
63 True True
64 True True
65 True True
66 True True
67 True True
68 True True
69 True True
70 True True
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays 
 (A ray in the direction (0, 0, 1, 0, -1), A ray in the direction (1, 0, -1, 0, 0), A ray in the direction (0, 0, 0, 1, 0), A ray in the direction (0, 1, 0, -1, 0)) 
 () 

sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: num=0
....: Q=p_lambda_cone(B(A,c),lam(A,[]),[[1]])
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_cone(B(A,c),lam(A,v),[[1]])
....:     print(num,sorted(map(vector,P.rays()))==sorted(map(vector,Q.rays())),s
....: orted(Q.lines())==sorted(P.lines()))
....: print(Q,"\n",Q.rays(),"\n",Q.lines(),"\n")
1 True True
2 True True
3 True True
4 True True
5 True True
6 True True
7 True True
8 True True
9 True True
10 True True
11 True True
12 True True
13 True True
14 True True
15 True True
16 True True
17 True True
18 True True
19 True True
20 True True
21 True True
22 True True
23 True True
24 True True
25 True True
26 True True
27 True True
28 True True
29 True True
30 True True
31 True True
32 True True
33 True True
34 True True
35 True True
36 True True
37 True True
38 True True
39 True True
40 True True
41 True True
42 True True
43 True True
44 True True
45 True True
46 True True
47 True True
48 True True
49 True True
50 True True
51 True True
52 True True
53 True True
54 True True
55 True True
56 True True
57 True True
58 True True
59 True True
60 True True
61 True True
62 True True
63 True True
64 True True
65 True True
66 True True
67 True True
68 True True
69 True True
70 True True
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex, 1 ray, 3 lines 
 (A ray in the direction (1, 0, 0, 0, -1),) 
 (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: num=0
....: Q=p_lambda_cone(B(A,c),lam(A,[]),[[c[1]]])
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_cone(B(A,c),lam(A,v),[[c[1]]])
....:     print(num,sorted(map(vector,P.rays()))==sorted(map(vector,Q.rays())),s
....: orted(Q.lines())==sorted(P.lines()))
....: print(Q,"\n",Q.rays(),"\n",Q.lines(),"\n")
1 True True
2 True True
3 True True
4 True True
5 True True
6 True True
7 True True
8 True True
9 True True
10 True True
11 True True
12 True True
13 True True
14 True True
15 True True
16 True True
17 True True
18 True True
19 True True
20 True True
21 True True
22 True True
23 True True
24 True True
25 True True
26 True True
27 True True
28 True True
29 True True
30 True True
31 True True
32 True True
33 True True
34 True True
35 True True
36 True True
37 True True
38 True True
39 True True
40 True True
41 True True
42 True True
43 True True
44 True True
45 True True
46 True True
47 True True
48 True True
49 True True
50 True True
51 True True
52 True True
53 True True
54 True True
55 True True
56 True True
57 True True
58 True True
59 True True
60 True True
61 True True
62 True True
63 True True
64 True True
65 True True
66 True True
67 True True
68 True True
69 True True
70 True True
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex, 1 ray, 3 lines 
 (A ray in the direction (1, 0, 0, 0, -1),) 
 (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

sage: A=CartanMatrix(['C',5])
....: c=[0,2,1,3,4]
....: num=0
....: Q=p_lambda_cone(B(A,c),lam(A,[]),[[c[1]]])
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_cone(B(A,c),lam(A,v),[[c[1]]])
....:     print(num,sorted(map(vector,P.rays()))==sorted(map(vector,Q.rays())),s
....: orted(Q.lines())==sorted(P.lines()))
....: print(Q,"\n",Q.rays(),"\n",Q.lines(),"\n")
1 False True
2 False True
3 False True
4 False True
5 False True
6 False True
7 False True
8 False True
9 False True
10 False True
11 False True
12 False True
13 False True
14 False True
15 False True
16 False True
17 False True
18 False True
19 False True
20 False True
21 False True
22 False True
23 False True
24 False True
25 False True
26 False True
27 False True
28 False True
29 False True
30 False True
31 False True
32 False True
33 False True
34 False True
35 False True
36 False True
37 False True
38 False True
39 False True
40 False True
41 False True
42 False True
43 False True
44 False True
45 False True
46 False True
47 False True
48 False True
49 False True
50 False True
51 False True
52 False True
53 False True
54 False True
55 False True
56 False True
57 False True
58 False True
59 True True
60 True True
61 True True
62 True True
63 True True
64 True True
65 True True
66 True True
67 True True
68 True True
69 True True
70 True True
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays 
 (A ray in the direction (1, 0, 1, 0, 0), A ray in the direction (0, 1, 0, 1, 0), A ray in the direction (0, 0, 1, 0, -1), A ray in the direction (0, -1, 0, 0, 0)) 
 () 

sage: A=CartanMatrix(['C',5])
....: c=[0,2,1,3,4]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_cone(B(A,c),lam(A,v),list(sortables(A,c[1:])))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list([c[0]]+v for v in sortables(A,c[1
....: :])))
....:     R=P.intersection(Q)
....:     print(num,v,"\n",sorted(map(vector,P.rays())),P.lines(),"\n",sorted(ma
....: p(vector,Q.rays())),Q.lines(),"\n",sorted(map(vector,R.rays())),R.lines(),
....: "\n")
1 [2, 1, 3, 4, 2, 1, 3, 4, 2, 1, 3, 4, 2, 1, 3, 4] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 0, 1, -1, 0), (1, 1, 1, 0, 0)] () 
 [] () 

2 [2, 1, 3, 4, 2, 1, 3, 4, 2, 1, 3, 4, 2, 1, 3] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 0, 1, -1, 0), (1, 1, 1, 0, 0)] () 
 [] () 

3 [2, 1, 3, 4, 2, 1, 3, 4, 2, 1, 3, 4, 2, 1] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 0, 1, -1, 0), (1, 0, 2, 1, -1), (1, 1, 1, 0, 0)] () 
 [] () 

4 [2, 1, 3, 4, 2, 1, 3, 4, 2, 1, 3, 4, 2, 3, 4] 
 [(0, -1, 0, 0, 0), (1, -1, 1, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 0, 1, -1, 0)] () 
 [] () 

5 [2, 1, 3, 4, 2, 1, 3, 4, 2, 1, 3, 4, 2, 3] 
 [(0, -1, 0, 0, 0), (1, -1, 1, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 0, 1, -1, 0)] () 
 [] () 

6 [2, 1, 3, 4, 2, 1, 3, 4, 2, 1, 3, 4, 2] 
 [(0, -1, 0, 0, 0), (1, -1, 1, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 0, 1, -1, 0), (1, 0, 2, 1, -1)] () 
 [] () 

7 [2, 1, 3, 4, 2, 1, 3, 4, 2, 1, 3, 4] 
 [(0, -1, 0, 0, 0), (1, -2, 2, 1, -1), (1, -1, 1, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 0, 1, -1, 0)] () 
 [] () 

8 [2, 1, 3, 4, 2, 1, 3, 4, 2, 1, 3, 2, 1] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 0, 1, -1, 0), (1, 0, 2, 1, -1), (1, 0, 3, 1, -2), (1, 1, 1, 0, 0)] () 
 [] () 

9 [2, 1, 3, 4, 2, 1, 3, 4, 2, 1, 3, 2] 
 [(0, -1, 0, 0, 0), (1, -1, 1, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 0, 1, -1, 0), (1, 0, 2, 1, -1), (1, 0, 3, 1, -2)] () 
 [] () 

10 [2, 1, 3, 4, 2, 1, 3, 4, 2, 1, 3] 
 [(0, -1, 0, 0, 0), (1, -2, 2, 1, -1), (1, -1, 1, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 0, 1, -1, 0), (1, 0, 3, 1, -2)] () 
 [] () 

11 [2, 1, 3, 4, 2, 1, 3, 4, 2, 1] 
 [(0, -1, 0, 0, 0), (1, -2, 2, 1, -1), (1, -2, 3, 1, -2), (1, -1, 1, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 0, 1, -1, 0), (2, -1, 4, 0, -2)] () 
 [] () 

12 [2, 1, 3, 4, 2, 1, 3, 4, 2, 3, 4, 2] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 0, 1, -1, 0), (1, 1, 1, 0, 0)] () 
 [] () 

13 [2, 1, 3, 4, 2, 1, 3, 4, 2, 3, 4] 
 [(0, -1, 0, 0, 0), (1, -1, 1, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 0, 1, -1, 0)] () 
 [] () 

14 [2, 1, 3, 4, 2, 1, 3, 4, 2, 3, 2] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 0, 1, -1, 0), (1, 0, 3, 1, -2), (1, 1, 1, 0, 0)] () 
 [] () 

15 [2, 1, 3, 4, 2, 1, 3, 4, 2, 3] 
 [(0, -1, 0, 0, 0), (1, -1, 1, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 0, 1, -1, 0), (1, 0, 3, 1, -2)] () 
 [] () 

16 [2, 1, 3, 4, 2, 1, 3, 4, 2] 
 [(0, -1, 0, 0, 0), (1, -2, 3, 1, -2), (1, -1, 1, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 0, 1, -1, 0), (2, -1, 4, 0, -2)] () 
 [] () 

17 [2, 1, 3, 4, 2, 1, 3, 4, 3] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, -1, 3, 0, -2), (1, 0, 1, -1, 0), (1, 1, 1, 0, 0)] () 
 [] () 

18 [2, 1, 3, 4, 2, 1, 3, 4] 
 [(0, -1, 0, 0, 0), (1, -1, 1, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, -1, 3, 0, -2), (1, 0, 1, -1, 0), (2, -1, 4, 0, -2)] () 
 [] () 

19 [2, 1, 3, 4, 2, 1, 3, 2, 1] 
 [(0, -1, 0, 0, 0), (1, -2, 2, 1, -1), (1, -2, 3, 1, -2), (1, -1, 1, 0, 0), (2, -3, 4, 0, -2)] () 
 [(0, 1, 0, 0, 0), (1, 0, 1, -1, 0)] () 
 [] () 

20 [2, 1, 3, 4, 2, 1, 3, 2] 
 [(0, -1, 0, 0, 0), (1, -2, 3, 1, -2), (1, -1, 1, 0, 0), (2, -3, 4, 0, -2)] () 
 [(0, 1, 0, 0, 0), (1, 0, 1, -1, 0)] () 
 [] () 

21 [2, 1, 3, 4, 2, 1, 3] 
 [(0, -1, 0, 0, 0), (1, -1, 1, 0, 0), (2, -3, 4, 0, -2)] () 
 [(0, 1, 0, 0, 0), (1, -1, 3, 0, -2), (1, 0, 1, -1, 0)] () 
 [] () 

22 [2, 1, 3, 4, 2, 1] 
 [(0, -1, 0, 0, 0), (1, -3, 3, 0, -2), (1, -1, 1, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 0, 1, -1, 0)] () 
 [] () 

23 [2, 1, 3, 4, 2, 3, 4, 2, 3, 4, 2] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 0, 1, -1, 0), (1, 0, 2, -1, -1), (1, 1, 1, 0, 0)] () 
 [] () 

24 [2, 1, 3, 4, 2, 3, 4, 2, 3, 4] 
 [(0, -1, 0, 0, 0), (1, -1, 1, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 0, 1, -1, 0), (1, 0, 2, -1, -1)] () 
 [] () 

25 [2, 1, 3, 4, 2, 3, 4, 2, 3, 2] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 0, 1, -1, 0), (1, 0, 2, -1, -1), (1, 0, 2, 1, -1), (1, 1, 1, 0, 0)] () 
 [] () 

26 [2, 1, 3, 4, 2, 3, 4, 2, 3] 
 [(0, -1, 0, 0, 0), (1, -1, 1, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 0, 1, -1, 0), (1, 0, 2, -1, -1), (1, 0, 2, 1, -1)] () 
 [] () 

27 [2, 1, 3, 4, 2, 3, 4, 2] 
 [(0, -1, 0, 0, 0), (1, -2, 2, 1, -1), (1, -1, 1, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 0, 1, -1, 0), (1, 0, 2, -1, -1), (2, -1, 4, 0, -2)] () 
 [] () 

28 [2, 1, 3, 4, 2, 3, 4, 3] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, -1, 3, 0, -2), (1, 0, 1, -1, 0), (1, 0, 2, -1, -1), (1, 1, 1, 0, 0)] () 
 [] () 

29 [2, 1, 3, 4, 2, 3, 4] 
 [(0, -1, 0, 0, 0), (1, -1, 1, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, -1, 3, 0, -2), (1, 0, 1, -1, 0), (1, 0, 2, -1, -1), (2, -1, 4, 0, -2)] () 
 [] () 

30 [2, 1, 3, 4, 2, 3, 2] 
 [(0, -1, 0, 0, 0), (1, -2, 2, 1, -1), (1, -1, 1, 0, 0), (2, -3, 4, 0, -2)] () 
 [(0, 1, 0, 0, 0), (1, 0, 1, -1, 0), (1, 0, 2, -1, -1)] () 
 [] () 

31 [2, 1, 3, 4, 2, 3] 
 [(0, -1, 0, 0, 0), (1, -1, 1, 0, 0), (2, -3, 4, 0, -2)] () 
 [(0, 1, 0, 0, 0), (1, -1, 3, 0, -2), (1, 0, 1, -1, 0), (1, 0, 2, -1, -1)] () 
 [] () 

32 [2, 1, 3, 4, 2] 
 [(0, -1, 0, 0, 0), (1, -3, 3, 0, -2), (1, -1, 1, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 0, 1, -1, 0), (1, 0, 2, -1, -1)] () 
 [] () 

33 [2, 1, 3, 4, 3, 4] 
 [(0, -1, 0, 0, 0), (1, -2, 2, -1, -1), (1, -1, 1, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 0, 1, -1, 0)] () 
 [] () 

34 [2, 1, 3, 4, 3] 
 [(0, -1, 0, 0, 0), (1, -2, 2, -1, -1), (1, -2, 2, 1, -1), (1, -1, 1, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 0, 1, -1, 0)] () 
 [] () 

35 [2, 1, 3, 4] 
 [(0, -1, 0, 0, 0), (1, -3, 3, 0, -2), (1, -2, 2, -1, -1), (1, -1, 1, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 0, 1, -1, 0)] () 
 [] () 

36 [2, 1, 3, 2, 1, 3] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 0, 1, -1, 0), (1, 1, 1, 0, 0)] () 
 [] () 

37 [2, 1, 3, 2, 1] 
 [(0, -1, 0, 0, 0), (1, -1, 1, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 0, 1, -1, 0)] () 
 [] () 

38 [2, 1, 3, 2, 3] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 0, 1, -1, 0), (1, 0, 2, -1, -1), (1, 1, 1, 0, 0)] () 
 [] () 

39 [2, 1, 3, 2] 
 [(0, -1, 0, 0, 0), (1, -1, 1, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 0, 1, -1, 0), (1, 0, 2, -1, -1)] () 
 [] () 

40 [2, 1, 3] 
 [(0, -1, 0, 0, 0), (1, -2, 2, -1, -1), (1, -1, 1, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 0, 1, -1, 0)] () 
 [] () 

41 [2, 1, 4, 2] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 0, 1, -1, 0), (1, 1, 1, 0, 0)] () 
 [] () 

42 [2, 1, 4] 
 [(0, -1, 0, 0, 0), (1, -1, 1, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 0, 1, -1, 0)] () 
 [] () 

43 [2, 1, 2] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 0, 1, -1, 0), (1, 1, 1, 0, 0)] () 
 [] () 

44 [2, 1] 
 [(0, -1, 0, 0, 0), (1, -1, 1, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 0, 1, -1, 0)] () 
 [] () 

45 [2, 3, 4, 2, 3, 4, 2, 3, 4] 
 [(0, -1, 0, 0, 0), (1, -2, 1, -1, 0), (1, -1, 1, 0, 0)] () 
 [(0, 1, 0, 0, 0)] () 
 [] () 

46 [2, 3, 4, 2, 3, 4, 2, 3] 
 [(0, -1, 0, 0, 0), (1, -2, 1, -1, 0), (1, -1, 1, 0, 0)] () 
 [(0, 1, 0, 0, 0)] () 
 [] () 

47 [2, 3, 4, 2, 3, 4, 2] 
 [(0, -1, 0, 0, 0), (1, -2, 1, -1, 0), (1, -2, 2, 1, -1), (1, -1, 1, 0, 0)] () 
 [(0, 1, 0, 0, 0)] () 
 [] () 

48 [2, 3, 4, 2, 3, 4] 
 [(0, -1, 0, 0, 0), (1, -2, 1, -1, 0), (1, -1, 1, 0, 0)] () 
 [(0, 1, 0, 0, 0)] () 
 [] () 

49 [2, 3, 4, 2, 3, 2] 
 [(0, -1, 0, 0, 0), (1, -2, 1, -1, 0), (1, -2, 2, 1, -1), (1, -2, 3, 1, -2), (1, -1, 1, 0, 0)] () 
 [(0, 1, 0, 0, 0)] () 
 [] () 

50 [2, 3, 4, 2, 3] 
 [(0, -1, 0, 0, 0), (1, -2, 1, -1, 0), (1, -2, 3, 1, -2), (1, -1, 1, 0, 0)] () 
 [(0, 1, 0, 0, 0)] () 
 [] () 

51 [2, 3, 4, 2] 
 [(0, -1, 0, 0, 0), (1, -3, 3, 0, -2), (1, -2, 1, -1, 0), (1, -1, 1, 0, 0)] () 
 [(0, 1, 0, 0, 0)] () 
 [] () 

52 [2, 3, 4, 3, 4] 
 [(0, -1, 0, 0, 0), (1, -2, 1, -1, 0), (1, -2, 2, -1, -1), (1, -1, 1, 0, 0)] () 
 [(0, 1, 0, 0, 0)] () 
 [] () 

53 [2, 3, 4, 3] 
 [(0, -1, 0, 0, 0), (1, -2, 1, -1, 0), (1, -2, 2, -1, -1), (1, -2, 2, 1, -1), (1, -1, 1, 0, 0)] () 
 [(0, 1, 0, 0, 0)] () 
 [] () 

54 [2, 3, 4] 
 [(0, -1, 0, 0, 0), (1, -3, 3, 0, -2), (1, -2, 1, -1, 0), (1, -2, 2, -1, -1), (1, -1, 1, 0, 0)] () 
 [(0, 1, 0, 0, 0)] () 
 [] () 

55 [2, 3, 2] 
 [(0, -1, 0, 0, 0), (1, -2, 1, -1, 0), (1, -1, 1, 0, 0)] () 
 [(0, 1, 0, 0, 0)] () 
 [] () 

56 [2, 3] 
 [(0, -1, 0, 0, 0), (1, -2, 1, -1, 0), (1, -2, 2, -1, -1), (1, -1, 1, 0, 0)] () 
 [(0, 1, 0, 0, 0)] () 
 [] () 

57 [2, 4] 
 [(0, -1, 0, 0, 0), (1, -2, 1, -1, 0), (1, -1, 1, 0, 0)] () 
 [(0, 1, 0, 0, 0)] () 
 [] () 

58 [2] 
 [(0, -1, 0, 0, 0), (1, -2, 1, -1, 0), (1, -1, 1, 0, 0)] () 
 [(0, 1, 0, 0, 0)] () 
 [] () 

59 [1, 3, 4, 3, 4] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, 1, 0, 0)] () 
 [] () 

60 [1, 3, 4, 3] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, 1, 0, 0)] () 
 [] () 

61 [1, 3, 4] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, 1, 0, 0)] () 
 [] () 

62 [1, 3] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, 1, 0, 0)] () 
 [] () 

63 [1, 4] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, 1, 0, 0)] () 
 [] () 

64 [1] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, 1, 0, 0)] () 
 [] () 

65 [3, 4, 3, 4] 
 [(0, -1, 0, 0, 0), (1, -1, 1, 0, 0)] () 
 [(0, 1, 0, 0, 0)] () 
 [] () 

66 [3, 4, 3] 
 [(0, -1, 0, 0, 0), (1, -1, 1, 0, 0)] () 
 [(0, 1, 0, 0, 0)] () 
 [] () 

67 [3, 4] 
 [(0, -1, 0, 0, 0), (1, -1, 1, 0, 0)] () 
 [(0, 1, 0, 0, 0)] () 
 [] () 

68 [3] 
 [(0, -1, 0, 0, 0), (1, -1, 1, 0, 0)] () 
 [(0, 1, 0, 0, 0)] () 
 [] () 

69 [4] 
 [(0, -1, 0, 0, 0), (1, -1, 1, 0, 0)] () 
 [(0, 1, 0, 0, 0)] () 
 [] () 

70 [] 
 [(0, -1, 0, 0, 0), (1, -1, 1, 0, 0)] () 
 [(0, 1, 0, 0, 0)] () 
 [] () 

sage: P=Polyhedron(rays=[(1,-1,-1,0,0),(-1,0,1,0,0),(0,1,0,-1,0),(0,0,1,0,-1),(0
....: ,0,0,2,0)])
sage: P.rays()
(A ray in the direction (1, 0, 0, 0, -1),)
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: num=0
....: Q=p_lambda_cone(B(A,c),lam(A,[]),[[c[1]]])
....: print(Q,"\n",Q.rays(),"\n",Q.lines(),"\n")
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex, 1 ray, 3 lines 
 (A ray in the direction (1, 0, 0, 0, -1),) 
 (A line in the direction (0, 0, 0, 1, 0), A line in the direction (1, 0, -1, 0, 0), A line in the direction (0, 1, 0, 0, 0)) 

sage: P=Polyhedron(rays=[(1,-1,-1,0,0),(-1,0,1,0,0),(0,1,0,-1,0),(0,0,1,0,-1),(0
....: ,0,0,2,0)])
sage: P.rays()
(A ray in the direction (1, 0, 0, 0, -1),)
sage: P.lines()
(A line in the direction (0, 0, 0, 1, 0),
 A line in the direction (1, 0, -1, 0, 0),
 A line in the direction (0, 1, 0, 0, 0))
sage: B(A,c)
[ 0  1  0  0  0]
[-1  0  1  0  0]
[ 0 -1  0  1  0]
[ 0  0 -1  0  2]
[ 0  0  0 -1  0]
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: B(A,c)
[ 0  1  0  0  0]
[-1  0  1  0  0]
[ 0 -1  0  1  0]
[ 0  0 -1  0  2]
[ 0  0  0 -1  0]
sage: A=CartanMatrix(['C',7])
....: c=[0,1,2,3,4,5,6]
....: B(A,c)
[ 0  1  0  0  0  0  0]
[-1  0  1  0  0  0  0]
[ 0 -1  0  1  0  0  0]
[ 0  0 -1  0  1  0  0]
[ 0  0  0 -1  0  1  0]
[ 0  0  0  0 -1  0  2]
[ 0  0  0  0  0 -1  0]
sage: A=CartanMatrix(['D',7])
....: c=[0,1,2,3,4,5,6]
....: B(A,c)
[ 0  1  0  0  0  0  0]
[-1  0  1  0  0  0  0]
[ 0 -1  0  1  0  0  0]
[ 0  0 -1  0  1  0  0]
[ 0  0  0 -1  0  1  1]
[ 0  0  0  0 -1  0  0]
[ 0  0  0  0 -1  0  0]
sage: A=CartanMatrix(['D',7])
....: c=[0,1,2,3,4,5,6]
....: B(A,c).determinant()
0
sage: A=CartanMatrix(['D',7])
....: c=[0,1,2,3,4,5,6]
....: B(A,c).rank()
6
sage: A=CartanMatrix(['D',8])
....: c=[0,1,2,3,4,5,6,7]
....: B(A,c).rank()
6
sage: A=CartanMatrix(['D',8])
....: c=[0,1,2,3,4,5,6,7]
....: B(A,c)
[ 0  1  0  0  0  0  0  0]
[-1  0  1  0  0  0  0  0]
[ 0 -1  0  1  0  0  0  0]
[ 0  0 -1  0  1  0  0  0]
[ 0  0  0 -1  0  1  0  0]
[ 0  0  0  0 -1  0  1  1]
[ 0  0  0  0  0 -1  0  0]
[ 0  0  0  0  0 -1  0  0]
sage: A=CartanMatrix(['D',7])
....: c=[0,1,2,3,4,5,6]
....: B(A,c)
[ 0  1  0  0  0  0  0]
[-1  0  1  0  0  0  0]
[ 0 -1  0  1  0  0  0]
[ 0  0 -1  0  1  0  0]
[ 0  0  0 -1  0  1  1]
[ 0  0  0  0 -1  0  0]
[ 0  0  0  0 -1  0  0]
sage: A=CartanMatrix(['C',7])
....: c=[0,1,2,3,4,5,6]
....: B(A,c)
[ 0  1  0  0  0  0  0]
[-1  0  1  0  0  0  0]
[ 0 -1  0  1  0  0  0]
[ 0  0 -1  0  1  0  0]
[ 0  0  0 -1  0  1  0]
[ 0  0  0  0 -1  0  2]
[ 0  0  0  0  0 -1  0]
sage: A=CartanMatrix(['C',7])
....: c=[2,3,4,5,6,0,1]
....: B(A,c)
[ 0  1  0  0  0  0  0]
[-1  0 -1  0  0  0  0]
[ 0  1  0  1  0  0  0]
[ 0  0 -1  0  1  0  0]
[ 0  0  0 -1  0  1  0]
[ 0  0  0  0 -1  0  2]
[ 0  0  0  0  0 -1  0]
sage: A=CartanMatrix(['C',7])
....: c=[0,1,2,3,4,5,6]
....: B(A,c)
[ 0  1  0  0  0  0  0]
[-1  0  1  0  0  0  0]
[ 0 -1  0  1  0  0  0]
[ 0  0 -1  0  1  0  0]
[ 0  0  0 -1  0  1  0]
[ 0  0  0  0 -1  0  2]
[ 0  0  0  0  0 -1  0]
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_cone(B(A,c),lam(A,v),list(sortables(A,c[1:])))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list([c[0]]+v for v in sortables(A,c[1
....: :])))
....:     R=P.intersection(Q)
....:     print(num,v,"\n",sorted(map(vector,P.rays())),P.lines(),"\n",sorted(ma
....: p(vector,Q.rays())),Q.lines(),"\n",sorted(map(vector,R.rays())),R.lines(),
....: "\n")
1 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] () 
 [] () 

2 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] () 
 [] () 

3 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] () 
 [] () 

4 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, 0, 1, -1)] () 
 [] () 

5 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 
 [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] () 
 [] () 

6 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] () 
 [] () 

^Z
[1]+  Stopped                 /Applications/SageMath-10-2.app/Contents/Frameworks/Sage.framework/Versions/Current/venv/bin/sage
MA-C02K804RDR53:~ reading$ fg
/Applications/SageMath-10-2.app/Contents/Frameworks/Sage.framework/Versions/Current/venv/bin/sage
7 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, 0, 1, -1)] () 
 [] () 

8 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 
 [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] () 
 [] () 

9 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, 0, 1, -1), (1, 2, 1, 1, -2)] () 
 [] () 

10 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 
 [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, 1, 1, -2)] () 
 [] () 

11 [1, 2, 3, 4, 1, 2, 3, 4, 1] 
 [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (1, 0, 1, 1, -2)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] () 
 [] () 

12 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] () 
 [] () 

13 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] () 
 [] () 

14 [1, 2, 3, 4, 1, 2, 3, 4, 2] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, 0, 1, -1)] () 
 [] () 

15 [1, 2, 3, 4, 1, 2, 3, 4] 
 [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] () 
 [] () 

16 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, 0, 1, -1), (1, 2, 1, 1, -2), (1, 3, 1, 0, -2)] () 
 [] () 

^Z
[1]+  Stopped                 /Applications/SageMath-10-2.app/Contents/Frameworks/Sage.framework/Versions/Current/venv/bin/sage
MA-C02K804RDR53:~ reading$ fg
/Applications/SageMath-10-2.app/Contents/Frameworks/Sage.framework/Versions/Current/venv/bin/sage
17 [1, 2, 3, 4, 1, 2, 3, 1, 2] 
 [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, 1, 1, -2), (1, 3, 1, 0, -2)] () 
 [] () 

18 [1, 2, 3, 4, 1, 2, 3, 1] 
 [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (1, 0, 1, 1, -2)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 3, 1, 0, -2)] () 
 [] () 

19 [1, 2, 3, 4, 1, 2, 3, 2] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, 0, 1, -1), (1, 3, 1, 0, -2)] () 
 [] () 

20 [1, 2, 3, 4, 1, 2, 3] 
 [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 3, 1, 0, -2)] () 
 [] () 

21 [1, 2, 3, 4, 1, 2, 1] 
 [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (1, 0, 1, 1, -2), (1, 1, 1, 0, -2)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (2, 3, 0, 0, -2)] () 
 [] () 

22 [1, 2, 3, 4, 1, 2] 
 [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (1, 1, 1, 0, -2)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (2, 3, 0, 0, -2)] () 
 [] () 

23 [1, 2, 3, 4, 1, 3, 4] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, 0, -1, -1)] () 
 [] () 

24 [1, 2, 3, 4, 1, 3] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, 0, -1, -1), (1, 2, 0, 1, -1)] () 
 [] () 

25 [1, 2, 3, 4, 1] 
 [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, 0, -1, -1), (2, 3, 0, 0, -2)] () 
 [] () 

26 [1, 2, 3, 4, 2, 3, 4, 2, 3, 4] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, -1, -1, 0)] () 
 [] () 

27 [1, 2, 3, 4, 2, 3, 4, 2, 3] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, -1, -1, 0)] () 
 [] () 

^Z
[1]+  Stopped                 /Applications/SageMath-10-2.app/Contents/Frameworks/Sage.framework/Versions/Current/venv/bin/sage
MA-C02K804RDR53:~ reading$ fg
/Applications/SageMath-10-2.app/Contents/Frameworks/Sage.framework/Versions/Current/venv/bin/sage
28 [1, 2, 3, 4, 2, 3, 4, 2] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, -1, -1, 0), (1, 2, 0, 1, -1)] () 
 [] () 

29 [1, 2, 3, 4, 2, 3, 4] 
 [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, -1, -1, 0)] () 
 [] () 

30 [1, 2, 3, 4, 2, 3, 2] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, -1, -1, 0), (1, 2, 0, 1, -1), (1, 2, 1, 1, -2)] () 
 [] () 

31 [1, 2, 3, 4, 2, 3] 
 [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, -1, -1, 0), (1, 2, 1, 1, -2)] () 
 [] () 

32 [1, 2, 3, 4, 2] 
 [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (1, 0, 1, 1, -2)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, -1, -1, 0), (2, 3, 0, 0, -2)] () 
 [] () 

33 [1, 2, 3, 4, 3, 4] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, -1, -1, 0), (1, 2, 0, -1, -1)] () 
 [] () 

34 [1, 2, 3, 4, 3] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, -1, -1, 0), (1, 2, 0, -1, -1), (1, 2, 0, 1, -1)] () 
 [] () 

35 [1, 2, 3, 4] 
 [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, -1, -1, 0), (1, 2, 0, -1, -1), (2, 3, 0, 0, -2)] () 
 [] () 

36 [1, 2, 3, 1, 2, 1] 
 [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (1, 0, 1, 1, -2), (1, 1, 1, 0, -2), (2, 1, 0, 0, -2)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] () 
 [] () 

37 [1, 2, 3, 1, 2] 
 [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (1, 1, 1, 0, -2), (2, 1, 0, 0, -2)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] () 
 [] () 

38 [1, 2, 3, 1] 
 [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (2, 1, 0, 0, -2)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, 0, -1, -1)] () 
 [] () 

39 [1, 2, 3, 2] 
 [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (1, 0, 1, 1, -2), (2, 1, 0, 0, -2)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, -1, -1, 0)] () 
 [] () 

40 [1, 2, 3] 
 [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (2, 1, 0, 0, -2)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, -1, -1, 0), (1, 2, 0, -1, -1)] () 
 [] () 

41 [1, 2, 4, 1] 
 [(0, -1, 0, 0, 0), (1, 0, 0, -1, -1)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] () 
 [] () 

42 [1, 2, 4] 
 [(0, -1, 0, 0, 0), (1, 0, 0, -1, -1)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, -1, -1, 0)] () 
 [] () 

^Z
[1]+  Stopped                 /Applications/SageMath-10-2.app/Contents/Frameworks/Sage.framework/Versions/Current/venv/bin/sage
MA-C02K804RDR53:~ reading$ fg
/Applications/SageMath-10-2.app/Contents/Frameworks/Sage.framework/Versions/Current/venv/bin/sage
^[[A43 [1, 2, 1] 
 [(0, -1, 0, 0, 0), (1, 0, 0, -1, -1), (1, 0, 0, 1, -1)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] () 
 [] () 

^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [1016], line 6
      4 for v in sortables(A,c[Integer(1):]):
      5     num+=Integer(1)
----> 6     P=p_lambda_cone(B(A,c),lam(A,v),list(sortables(A,c[Integer(1):])))
      7     Q=p_lambda_cone(B(A,c),lam(A,v),list([c[Integer(0)]]+v for v in sortables(A,c[Integer(1):])))
      8     R=P.intersection(Q)

File ~/git/affine_dominance/software/domination4.py:188, in p_lambda_cone(B, la, seqs)
    186 P = cone_at(p_lambda_faster(B, la, seqs[0]),la)
    187 for s in seqs:
--> 188     P = P.intersection(cone_at(p_lambda_faster(B, la, s),la))
    189     if P.dimension()==0:
    190         break

File ~/git/affine_dominance/software/domination4.py:153, in p_lambda_faster(B, la, seq)
    150 #print("Hp:   ",Hp,Hp.vertices(),Hp.rays(),Hp.lines(),"\n")
    151 #print("Hm:   ",Hm,Hm.vertices(),Hm.rays(),Hm.lines(),"\n\n")
    152 Pp = P.intersection(Hp)
--> 153 Pm = P.intersection(Hm)
    154 if Pp.dimension() < rk:
    155     P=Em*Pm

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1371, in Polyhedron_base5.intersection(self, other)
   1369 parent = self.parent()
   1370 try:
-> 1371     intersection = parent.element_class(parent, None, [new_ieqs, new_eqns])
   1373     # Force calculation of the vertices.
   1374     _ = intersection.n_vertices()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:179, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    177 elif Hrep is not None:
    178     ieqs, eqns = Hrep
--> 179     self._init_from_Hrepresentation(ieqs, eqns, **kwds)
    180 else:
    181     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:129, in Polyhedron_ppl._init_from_Hrepresentation(self, ieqs, eqns, minimize, verbose)
    106 def _init_from_Hrepresentation(self, ieqs, eqns, minimize=True, verbose=False):
    107     """
    108     Construct polyhedron from H-representation data.
    109 
   (...)
    127         sage: Polyhedron_ppl._init_from_Hrepresentation(p, [], [])
    128     """
--> 129     cs = self._convert_constraints_to_ppl(ieqs, eqns)
    130     if cs.empty():
    131         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'universe')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:534, in Polyhedron_ppl._convert_constraints_to_ppl(ieqs, eqns)
    532     ieqs = []
    533 for ieq in ieqs:
--> 534     cs.insert(Polyhedron_ppl._convert_constraint_to_ppl(ieq, INEQUALITY))
    535 if eqns is None:
    536     eqns = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:509, in Polyhedron_ppl._convert_constraint_to_ppl(c, typ)
    507 A = dc[1:]
    508 if typ == INEQUALITY:
--> 509     return Linear_Expression(A, b) >= 0
    510 else:
    511     return Linear_Expression(A, b) == 0

File ppl/linear_algebra.pyx:654, in ppl.linear_algebra.Linear_Expression.__init__()

File ppl/linear_algebra.pyx:49, in ppl.linear_algebra.PPL_Coefficient_from_pyobject()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/rings/integer.pyx:914, in sage.rings.integer.Integer.__richcmp__ (build/cythonized/sage/rings/integer.c:16498)()
    912     c = mpz_cmp_d((<Integer>left).value, d)
    913 else:
--> 914     return coercion_model.richcmp(left, right, op)
    915 
    916 return rich_to_bool_sgn(op, c)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:2021, in sage.structure.coerce.CoercionModel.richcmp (build/cythonized/sage/structure/coerce.c:26173)()
   2019 # Coerce to a common parent
   2020 try:
-> 2021     x, y = self.canonical_coercion(x, y)
   2022 except (TypeError, NotImplementedError):
   2023     pass

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1422, in sage.structure.coerce.CoercionModel.canonical_coercion (build/cythonized/sage/structure/coerce.c:18956)()
   1420             self._record_exception()
   1421 
-> 1422     raise TypeError("no common canonical parent for objects with parents: '%s' and '%s'"%(xp, yp))
   1423 
   1424 cpdef coercion_maps(self, R, S) noexcept:

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['C',7])
....: c=[0,1,2,3,4,5,6]
....: B(A,c)
[ 0  1  0  0  0  0  0]
[-1  0  1  0  0  0  0]
[ 0 -1  0  1  0  0  0]
[ 0  0 -1  0  1  0  0]
[ 0  0  0 -1  0  1  0]
[ 0  0  0  0 -1  0  2]
[ 0  0  0  0  0 -1  0]
sage: A=CartanMatrix(['C',7])
....: c=[1,2,3,4,5,6,0]
....: B(A,c)
[ 0 -1  0  0  0  0  0]
[ 1  0  1  0  0  0  0]
[ 0 -1  0  1  0  0  0]
[ 0  0 -1  0  1  0  0]
[ 0  0  0 -1  0  1  0]
[ 0  0  0  0 -1  0  2]
[ 0  0  0  0  0 -1  0]
sage: A=CartanMatrix(['C',7])
....: c=[2,3,4,5,6,0,1]
....: B(A,c)
[ 0  1  0  0  0  0  0]
[-1  0 -1  0  0  0  0]
[ 0  1  0  1  0  0  0]
[ 0  0 -1  0  1  0  0]
[ 0  0  0 -1  0  1  0]
[ 0  0  0  0 -1  0  2]
[ 0  0  0  0  0 -1  0]
sage: A=CartanMatrix(['C',7])
....: c=[3,4,5,6,0,1,2]
....: B(A,c)
[ 0  1  0  0  0  0  0]
[-1  0  1  0  0  0  0]
[ 0 -1  0 -1  0  0  0]
[ 0  0  1  0  1  0  0]
[ 0  0  0 -1  0  1  0]
[ 0  0  0  0 -1  0  2]
[ 0  0  0  0  0 -1  0]
sage: A=CartanMatrix(['C',7])
....: c=[4,5,6,0,1,2,3]
....: B(A,c)
[ 0  1  0  0  0  0  0]
[-1  0  1  0  0  0  0]
[ 0 -1  0  1  0  0  0]
[ 0  0 -1  0 -1  0  0]
[ 0  0  0  1  0  1  0]
[ 0  0  0  0 -1  0  2]
[ 0  0  0  0  0 -1  0]
sage: A=CartanMatrix(['C',7])
....: c=[5,6,0,1,2,3,4]
....: B(A,c)
[ 0  1  0  0  0  0  0]
[-1  0  1  0  0  0  0]
[ 0 -1  0  1  0  0  0]
[ 0  0 -1  0  1  0  0]
[ 0  0  0 -1  0 -1  0]
[ 0  0  0  0  1  0  2]
[ 0  0  0  0  0 -1  0]
sage: A=CartanMatrix(['C',7])
....: c=[6,0,1,2,3,4,5]
....: B(A,c)
[ 0  1  0  0  0  0  0]
[-1  0  1  0  0  0  0]
[ 0 -1  0  1  0  0  0]
[ 0  0 -1  0  1  0  0]
[ 0  0  0 -1  0  1  0]
[ 0  0  0  0 -1  0 -2]
[ 0  0  0  0  0  1  0]
sage: A=CartanMatrix(['A',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_cone(B(A,c),lam(A,v),list(sortables(A,c[1:])))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list([c[0]]+v for v in sortables(A,c[1
....: :])))
....:     R=P.intersection(Q)
....:     print(num,v,"\n",sorted(map(vector,P.rays())),P.lines(),"\n",sorted(ma
....: p(vector,Q.rays())),Q.lines(),"\n",sorted(map(vector,R.rays())),R.lines(),
....: "\n")
1 [1, 2, 1] 
 [(0, -1, 0)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [] () 

2 [1, 2] 
 [(0, -1, 0)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [] () 

3 [1] 
 [(0, -1, 0), (1, 0, -1)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [] () 

4 [2] 
 [(0, -1, 0), (1, -1, -1)] () 
 [(0, 1, 0)] () 
 [] () 

5 [] 
 [(0, -1, 0), (1, 0, -1)] () 
 [(0, 1, 0)] () 
 [] () 

sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_cone(B(A,c),lam(A,v),list(sortables(A,c[1:])))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list([c[0]]+v for v in sortables(A,c[1
....: :])))
....:     R=P.intersection(Q)
....:     print(num,v,"\n",sorted(map(vector,P.rays())),P.lines(),"\n",sorted(ma
....: p(vector,Q.rays())),Q.lines(),"\n",sorted(map(vector,R.rays())),R.lines(),
....: "\n")
1 [1, 2, 1, 2] 
 [(0, -1, 0)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [] () 

2 [1, 2, 1] 
 [(0, -1, 0)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [] () 

3 [1, 2] 
 [(0, -1, 0), (1, 1, -1)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [(1, 1, -1)] () 

4 [1] 
 [(0, -1, 0), (1, 1, -1)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [(1, 1, -1)] () 

5 [2] 
 [(0, -1, 0), (1, -1, -1)] () 
 [(0, 1, 0)] () 
 [] () 

6 [] 
 [(0, -1, 0), (1, 1, -1)] () 
 [(0, 1, 0)] () 
 [] () 

sage: def lam(A,v):
....:         n=A.nrows()
....:     out=vector([randint(1,5) for _ in range(n)])
....:     for s in reversed(v):
....:         out=reflect(A,out,s)
....:     return out
....: 
....: 
  File <tokenize>:3
    out=vector([randint(1,5) for _ in range(n)])
    ^
IndentationError: unindent does not match any outer indentation level

sage: def lam(A,v):
....:     n=A.nrows()
....:     out=vector([randint(1,5) for _ in range(n)])
....:     for s in reversed(v):
....:         out=reflect(A,out,s)
....:     return out
sage: lam(A,[1,2])
(12, -7, 6)
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_cone(B(A,c),lam(A,v),list(sortables(A,c[1:])))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list([c[0]]+v for v in sortables(A,c[1
....: :])))
....:     R=P.intersection(Q)
....:     print(num,v,"\n",sorted(map(vector,P.rays())),P.lines(),"\n",sorted(ma
....: p(vector,Q.rays())),Q.lines(),"\n",sorted(map(vector,R.rays())),R.lines(),
....: "\n")
....: 
1 [1, 2, 1, 2] 
 [(0, -1, 0)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [] () 

2 [1, 2, 1] 
 [(0, -1, 0)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [] () 

3 [1, 2] 
 [(0, -1, 0), (1, 1, -1)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [] () 

4 [1] 
 [(0, -1, 0), (1, 1, -1)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [] () 

5 [2] 
 [(0, -1, 0), (1, -1, -1)] () 
 [(0, 1, 0)] () 
 [] () 

6 [] 
 [(0, -1, 0), (1, 1, -1)] () 
 [(0, 1, 0)] () 
 [] () 

### reloading attached file domination4.py modified at 13:22:15 ###
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_cone(B(A,c),lam(A,v),list(sortables(A,c[1:])))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list([c[0]]+v for v in sortables(A,c[1
....: :])))
....:     R=P.intersection(Q)
....:     print(num,v,"\n",sorted(map(vector,P.rays())),P.lines(),"\n",sorted(ma
....: p(vector,Q.rays())),Q.lines(),"\n",sorted(map(vector,R.rays())),R.lines(),
....: "\n")
....: 
1 [1, 2, 1, 2] 
 [(0, -1, 0)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [] () 

2 [1, 2, 1] 
 [(0, -1, 0)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [] () 

3 [1, 2] 
 [(0, -1, 0), (1, 1, -1)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [(1, 1, -1)] () 

4 [1] 
 [(0, -1, 0), (1, 1, -1)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [(1, 1, -1)] () 

5 [2] 
 [(0, -1, 0), (1, -1, -1)] () 
 [(0, 1, 0)] () 
 [] () 

6 [] 
 [(0, -1, 0), (1, 1, -1)] () 
 [(0, 1, 0)] () 
 [] () 

sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c):
....:     num+=1
....:     print(num,v,p_lambda_cone(B(A,c),lam(A,v),list(sortables(A,c))))
....: 
1 [0, 1, 2, 0, 1, 2, 0, 1, 2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
2 [0, 1, 2, 0, 1, 2, 0, 1] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
3 [0, 1, 2, 0, 1, 2, 0] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
4 [0, 1, 2, 0, 1, 2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
5 [0, 1, 2, 0, 1, 0] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
6 [0, 1, 2, 0, 1] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
7 [0, 1, 2, 0] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
8 [0, 1, 2, 1, 2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
9 [0, 1, 2, 1] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
10 [0, 1, 2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
11 [0, 1, 0] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
12 [0, 1] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
13 [0, 2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
14 [0] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
15 [1, 2, 1, 2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
16 [1, 2, 1] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
17 [1, 2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
18 [1] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
19 [2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
20 [] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: def lam(A,v):
....:     n=A.nrows()
....:     out=vector([randint(1,5) for _ in range(n)])
....:     for s in reversed(v):
....:         out=reflect(A,out,s)
....:     return out
....: 
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c):
....:     num+=1
....:     print(num,v,p_lambda_cone(B(A,c),lam(A,v),list(sortables(A,c))))
....: 
1 [0, 1, 2, 0, 1, 2, 0, 1, 2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
2 [0, 1, 2, 0, 1, 2, 0, 1] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
3 [0, 1, 2, 0, 1, 2, 0] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
4 [0, 1, 2, 0, 1, 2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
5 [0, 1, 2, 0, 1, 0] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
6 [0, 1, 2, 0, 1] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
7 [0, 1, 2, 0] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
8 [0, 1, 2, 1, 2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
9 [0, 1, 2, 1] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
10 [0, 1, 2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
11 [0, 1, 0] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
12 [0, 1] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
13 [0, 2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
14 [0] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
15 [1, 2, 1, 2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
16 [1, 2, 1] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
17 [1, 2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
18 [1] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
19 [2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
20 [] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: lam(A,[1,2])
(14, -11, 8)
sage: lam(A,[1,2])
(8, -6, 4)
sage: lam(A,[1,2])
(15, -14, 9)
sage: lam(A,[1,2])
(11, -8, 6)
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c):
....:     num+=1
....:     print(num,v,p_lambda_cone(B(A,c),lam(A,v),list(sortables(A,c))))
....: 
1 [0, 1, 2, 0, 1, 2, 0, 1, 2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
2 [0, 1, 2, 0, 1, 2, 0, 1] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
3 [0, 1, 2, 0, 1, 2, 0] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
4 [0, 1, 2, 0, 1, 2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
5 [0, 1, 2, 0, 1, 0] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
6 [0, 1, 2, 0, 1] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
7 [0, 1, 2, 0] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
8 [0, 1, 2, 1, 2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
9 [0, 1, 2, 1] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
10 [0, 1, 2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
11 [0, 1, 0] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
12 [0, 1] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
13 [0, 2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
14 [0] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
15 [1, 2, 1, 2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
16 [1, 2, 1] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
17 [1, 2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
18 [1] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
19 [2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
20 [] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c):
....:     num+=1
....:     print(num,v,p_lambda_cone(B(A,c),lam(A,v),list(sortables(A,c))))
....: 
1 [0, 1, 2, 0, 1, 2, 0, 1, 2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
2 [0, 1, 2, 0, 1, 2, 0, 1] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex

3 [0, 1, 2, 0, 1, 2, 0] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
4 [0, 1, 2, 0, 1, 2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
5 [0, 1, 2, 0, 1, 0] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
6 [0, 1, 2, 0, 1] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
7 [0, 1, 2, 0] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
8 [0, 1, 2, 1, 2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
9 [0, 1, 2, 1] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
10 [0, 1, 2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
11 [0, 1, 0] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
12 [0, 1] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
13 [0, 2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
14 [0] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
15 [1, 2, 1, 2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
16 [1, 2, 1] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
17 [1, 2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
18 [1] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
19 [2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
20 [] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: 
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c):
....:     num+=1
....:     print(num,v,p_lambda_cone(B(A,c),lam(A,v),list(sortables(A,c))))
....: 
1 [0, 1, 2, 0, 1, 2, 0, 1, 2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
2 [0, 1, 2, 0, 1, 2, 0, 1] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
3 [0, 1, 2, 0, 1, 2, 0] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
4 [0, 1, 2, 0, 1, 2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
5 [0, 1, 2, 0, 1, 0] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
6 [0, 1, 2, 0, 1] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
7 [0, 1, 2, 0] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
8 [0, 1, 2, 1, 2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
9 [0, 1, 2, 1] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
10 [0, 1, 2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
11 [0, 1, 0] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
12 [0, 1] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
13 [0, 2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
14 [0] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
15 [1, 2, 1, 2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
16 [1, 2, 1] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
17 [1, 2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
18 [1] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
19 [2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
20 [] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: 
sage: 
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_cone(B(A,c),lam(A,v),list(sortables(A,c[1:])))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list([c[0]]+v for v in sortables(A,c[1
....: :])))
....:     R=P.intersection(Q)
....:     print(num,v,"\n",sorted(map(vector,P.rays())),P.lines(),"\n",sorted(ma
....: p(vector,Q.rays())),Q.lines(),"\n",sorted(map(vector,R.rays())),R.lines(),
....: "\n")
....: 
1 [1, 2, 1, 2] 
 [(0, -1, 0)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [] () 

2 [1, 2, 1] 
 [(0, -1, 0)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [] () 

3 [1, 2] 
 [(0, -1, 0), (1, 1, -1)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [] () 

4 [1] 
 [(0, -1, 0), (1, 1, -1)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [] () 

5 [2] 
 [(0, -1, 0), (1, -1, -1)] () 
 [(0, 1, 0)] () 
 [] () 

6 [] 
 [(0, -1, 0), (1, 1, -1)] () 
 [(0, 1, 0)] () 
 [] () 

sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_cone(B(A,c),lam(A,v),list(sortables(A,c[1:])))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list([c[0]]+v for v in sortables(A,c[1
....: :])))
....:     R=P.intersection(Q)
....:     print(num,v,"\n",sorted(map(vector,P.rays())),P.lines(),"\n",sorted(ma
....: p(vector,Q.rays())),Q.lines(),"\n",sorted(map(vector,R.rays())),R.lines(),
....: "\n")
....: 
1 [1, 2, 1, 2] 
 [(0, -1, 0)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [] () 

2 [1, 2, 1] 
 [(0, -1, 0)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [] () 

3 [1, 2] 
 [(0, -1, 0), (1, 1, -1)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [] () 

4 [1] 
 [(0, -1, 0), (1, 1, -1)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [] () 

5 [2] 
 [(0, -1, 0), (1, -1, -1)] () 
 [(0, 1, 0)] () 
 [] () 

6 [] 
 [(0, -1, 0), (1, 1, -1)] () 
 [(0, 1, 0)] () 
 [] () 

sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_cone(B(A,c),lam(A,v),list(sortables(A,c[1:])))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list([c[0]]+v for v in sortables(A,c[1
....: :])))
....:     R=P.intersection(Q)
....:     print(num,v,"\n",sorted(map(vector,P.rays())),P.lines(),"\n",sorted(ma
....: p(vector,Q.rays())),Q.lines(),"\n",sorted(map(vector,R.rays())),R.lines(),
....: "\n")
....: 
1 [1, 2, 1, 2] 
 [(0, -1, 0)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [] () 

2 [1, 2, 1] 
 [(0, -1, 0)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [] () 

3 [1, 2] 
 [(0, -1, 0), (1, 1, -1)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [] () 

4 [1] 
 [(0, -1, 0), (1, 1, -1)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [] () 

5 [2] 
 [(0, -1, 0), (1, -1, -1)] () 
 [(0, 1, 0)] () 
 [] () 

6 [] 
 [(0, -1, 0), (1, 1, -1)] () 
 [(0, 1, 0)] () 
 [] () 

sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_cone(B(A,c),lam(A,v),list(sortables(A,c[1:])))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list([c[0]]+v for v in sortables(A,c[1
....: :])))
....:     R=P.intersection(Q)
....:     print(num,v,"\n",sorted(map(vector,P.rays())),P.lines(),"\n",sorted(ma
....: p(vector,Q.rays())),Q.lines(),"\n",sorted(map(vector,R.rays())),R.lines(),
....: "\n")
....: 
1 [1, 2, 1, 2] 
 [(0, -1, 0)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [] () 

2 [1, 2, 1] 
 [(0, -1, 0)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [] () 

3 [1, 2] 
 [(0, -1, 0), (1, 1, -1)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [] () 

4 [1] 
 [(0, -1, 0), (1, 1, -1)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [] () 

5 [2] 
 [(0, -1, 0), (1, -1, -1)] () 
 [(0, 1, 0)] () 
 [] () 

6 [] 
 [(0, -1, 0), (1, 1, -1)] () 
 [(0, 1, 0)] () 
 [] () 

sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_cone(B(A,c),lam(A,v),list(sortables(A,c[1:])))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list([c[0]]+v for v in sortables(A,c[1
....: :])))
....:     R=P.intersection(Q)
....:     print(num,v,"\n",sorted(map(vector,P.rays())),P.lines(),"\n",sorted(ma
....: p(vector,Q.rays())),Q.lines(),"\n",sorted(map(vector,R.rays())),R.lines(),
....: "\n")
....: 
1 [1, 2, 1, 2] 
 [(0, -1, 0)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [] () 

2 [1, 2, 1] 
 [(0, -1, 0)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [] () 

3 [1, 2] 
 [(0, -1, 0), (1, 1, -1)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [] () 

4 [1] 
 [(0, -1, 0), (1, 1, -1)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [] () 

5 [2] 
 [(0, -1, 0), (1, -1, -1)] () 
 [(0, 1, 0)] () 
 [] () 

6 [] 
 [(0, -1, 0), (1, 1, -1)] () 
 [(0, 1, 0)] () 
 [] () 

sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c):
....:     print(lam(A,v))
....: 
(-4, -2, -5)
(-3, -5, 1)
(-8, -8, 6)
(-2, -11, 9)
(-11, -2, 4)
(-3, -6, 7)
(-11, -2, 9)
(-18, 15, -4)
(-19, 6, 4)
(-12, 1, 7)
(-2, -1, 7)
(-6, 1, 6)
(-3, 16, -4)
(-5, 7, 4)
(11, -4, -1)
(16, -7, 1)
(8, -5, 4)
(6, -4, 7)
(2, 3, -1)
(4, 1, 3)
### reloading attached file domination4.py modified at 13:29:07 ###
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c):
....:     print(lam(A,v))
....: 
(-1, -1, -1)
(-1, -3, 1)
(-2, -3, 2)
(-1, -4, 3)
(-4, -1, 2)
(-3, -2, 3)
(-3, -1, 3)
(-5, 4, -1)
(-5, 2, 1)
(-4, 1, 2)
(-1, -1, 3)
(-2, 1, 2)
(-1, 4, -1)
(-1, 2, 1)
(5, -1, -1)
(5, -3, 1)
(4, -3, 2)
(2, -1, 2)
(1, 3, -1)
(1, 1, 1)
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     print(lam(A,v))
....: 
(5, -1, -1)
(5, -3, 1)
(4, -3, 2)
(2, -1, 2)
(1, 3, -1)
(1, 1, 1)
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     print(v,lam(A,v))
....: 
[1, 2, 1, 2] (5, -1, -1)
[1, 2, 1] (5, -3, 1)
[1, 2] (4, -3, 2)
[1] (2, -1, 2)
[2] (1, 3, -1)
[] (1, 1, 1)
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c):
....:     print(v,lam(A,v))
[0, 1, 2, 0, 1, 2, 0, 1, 2] (-1, -1, -1)
[0, 1, 2, 0, 1, 2, 0, 1] (-1, -3, 1)
[0, 1, 2, 0, 1, 2, 0] (-2, -3, 2)
[0, 1, 2, 0, 1, 2] (-1, -4, 3)
[0, 1, 2, 0, 1, 0] (-4, -1, 2)
[0, 1, 2, 0, 1] (-3, -2, 3)
[0, 1, 2, 0] (-3, -1, 3)
[0, 1, 2, 1, 2] (-5, 4, -1)
[0, 1, 2, 1] (-5, 2, 1)
[0, 1, 2] (-4, 1, 2)
[0, 1, 0] (-1, -1, 3)
[0, 1] (-2, 1, 2)
[0, 2] (-1, 4, -1)
[0] (-1, 2, 1)
[1, 2, 1, 2] (5, -1, -1)
[1, 2, 1] (5, -3, 1)
[1, 2] (4, -3, 2)
[1] (2, -1, 2)
[2] (1, 3, -1)
[] (1, 1, 1)
sage: 
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_cone(B(A,c),lam(A,v),list(sortables(A,c[1:])))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list([c[0]]+v for v in sortables(A,c[1
....: :])))
....:     R=P.intersection(Q)
....:     print(num,v,"\n",sorted(map(vector,P.rays())),P.lines(),"\n",sorted(ma
....: p(vector,Q.rays())),Q.lines(),"\n",sorted(map(vector,R.rays())),R.lines(),
....: "\n")
....: 
1 [1, 2, 1, 2] 
 [(0, -1, 0)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [] () 

2 [1, 2, 1] 
 [(0, -1, 0)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [] () 

3 [1, 2] 
 [(0, -1, 0), (1, 1, -1)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [(1, 1, -1)] () 

4 [1] 
 [(0, -1, 0), (1, 1, -1)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [(1, 1, -1)] () 

5 [2] 
 [(0, -1, 0), (1, -1, -1)] () 
 [(0, 1, 0)] () 
 [] () 

6 [] 
 [(0, -1, 0), (1, 1, -1)] () 
 [(0, 1, 0)] () 
 [] () 

sage: def lam(A,v):
....:     n=A.nrows()
....:     out=vector([randint(1,5) for _ in range(n)])
....:     for s in reversed(v):
....:         out=reflect(A,out,s)
....:     return out
....: 
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_cone(B(A,c),lam(A,v),list(sortables(A,c[1:])))
....:     Q=p_lambda_cone(B(A,c),lam(A,v),list([c[0]]+v for v in sortables(A,c[1
....: :])))
....:     R=P.intersection(Q)
....:     print(num,v,"\n",sorted(map(vector,P.rays())),P.lines(),"\n",sorted(ma
....: p(vector,Q.rays())),Q.lines(),"\n",sorted(map(vector,R.rays())),R.lines(),
....: "\n")
....: 
1 [1, 2, 1, 2] 
 [(0, -1, 0)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [] () 

2 [1, 2, 1] 
 [(0, -1, 0)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [] () 

3 [1, 2] 
 [(0, -1, 0), (1, 1, -1)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [] () 

4 [1] 
 [(0, -1, 0), (1, 1, -1)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [] () 

5 [2] 
 [(0, -1, 0), (1, -1, -1)] () 
 [(0, 1, 0)] () 
 [] () 

6 [] 
 [(0, -1, 0), (1, 1, -1)] () 
 [(0, 1, 0)] () 
 [] () 

sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     p_lambda_int(B(A,c),lam(A,v),list(sortables(A,c[1:]))+list([c[0]]+v fo
....: r v in sortables(A,c[1:])))
....: 
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices
A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     p_lambda_int(B(A,c),lam(A,v),list(sortables(A,c[1:]))+list([c[0]]+v fo
....: r v in sortables(A,c[1:])))
....: 
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices
A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: lam(A,[1,2])
(13, -10, 7)
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     p_lambda_int(B(A,c),lam(A,v),list(sortables(A,c[1:]))+list([c[0]]+v fo
....: r v in sortables(A,c[1:]))).vertices()
....: 
(A vertex at (16, -5, -1),)
(A vertex at (16, -9, 2),)
(A vertex at (8, -5, 3), A vertex at (9, -4, 2))
(A vertex at (9, -5, 8), A vertex at (14, 0, 3))
(A vertex at (3, 11, -5),)
(A vertex at (5, 2, 3),)
sage: A=CartanMatrix(['A',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     p_lambda_int(B(A,c),lam(A,v),list(sortables(A,c[1:]))+list([c[0]]+v fo
....: r v in sortables(A,c[1:]))).vertices()
(A vertex at (8, -1, -3),)
(A vertex at (8, -7, 2),)
(A vertex at (6, -4, 7),)
(A vertex at (1, 5, -3),)
(A vertex at (5, 5, 3),)
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: la=lam(A,c)
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_cone(B(A,c),la,list(sortables(A,c[1:])))
....:     Q=p_lambda_cone(B(A,c),la,list([c[0]]+v for v in sortables(A,c[1:])))
....:     R=P.intersection(Q)
....:     print(num,v,"\n",sorted(map(vector,P.rays())),P.lines(),"\n",sorted(ma
....: p(vector,Q.rays())),Q.lines(),"\n",sorted(map(vector,R.rays())),R.lines(),
....: "\n")
1 [1, 2, 1, 2] 
 [(0, -1, 0), (1, 1, -1)] () 
 [(0, 1, 0), (1, 0, -1)] () 
 [(1, 0, -1), (1, 1, -1)] () 

2 [1, 2, 1] 
 [(0, -1, 0), (1, 1, -1)] () 
 [(0, 1, 0), (1, 0, -1)] () 
 [(1, 0, -1), (1, 1, -1)] () 

3 [1, 2] 
 [(0, -1, 0), (1, 1, -1)] () 
 [(0, 1, 0), (1, 0, -1)] () 
 [(1, 0, -1), (1, 1, -1)] () 

4 [1] 
 [(0, -1, 0), (1, 1, -1)] () 
 [(0, 1, 0), (1, 0, -1)] () 
 [(1, 0, -1), (1, 1, -1)] () 

5 [2] 
 [(0, -1, 0), (1, 1, -1)] () 
 [(0, 1, 0), (1, 0, -1)] () 
 [(1, 0, -1), (1, 1, -1)] () 

6 [] 
 [(0, -1, 0), (1, 1, -1)] () 
 [(0, 1, 0), (1, 0, -1)] () 
 [(1, 0, -1), (1, 1, -1)] () 

sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     la=lam(A,v)
....:     num+=1
....:     P=p_lambda_cone(B(A,c),la,list(sortables(A,c[1:])))
....:     Q=p_lambda_cone(B(A,c),la,list([c[0]]+v for v in sortables(A,c[1:])))
....:     R=P.intersection(Q)
....:     print(num,v,"\n",sorted(map(vector,P.rays())),P.lines(),"\n",sorted(ma
....: p(vector,Q.rays())),Q.lines(),"\n",sorted(map(vector,R.rays())),R.lines(),
....: "\n")
1 [1, 2, 1, 2] 
 [(0, -1, 0)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [] () 

2 [1, 2, 1] 
 [(0, -1, 0)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [] () 

3 [1, 2] 
 [(0, -1, 0), (1, 1, -1)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [(1, 1, -1)] () 

4 [1] 
 [(0, -1, 0), (1, 1, -1)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [(1, 1, -1)] () 

5 [2] 
 [(0, -1, 0), (1, -1, -1)] () 
 [(0, 1, 0)] () 
 [] () 

6 [] 
 [(0, -1, 0), (1, 1, -1)] () 
 [(0, 1, 0)] () 
 [] () 

sage: lam(A,[1,2])
(10, -6, 5)
sage: lam(A,[1,2])
(10, -7, 4)
sage: lam(A,[1,2])
(8, -4, 3)
sage: lam(A,[1,2])
(14, -13, 9)
### reloading attached file domination4.py modified at 17:59:28 ###
sage: lam(A,[1,2])
(4, -3, 2)
sage: lam(A,[1,2])
(4, -3, 2)
sage: lam(A,[1,2])
(4, -3, 2)
sage: lam(A,[1,2])
(4, -3, 2)
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     la=lam(A,v)
....:     num+=1
....:     P=p_lambda_cone(B(A,c),la,list(sortables(A,c[1:])))
....:     Q=p_lambda_cone(B(A,c),la,list([c[0]]+v for v in sortables(A,c[1:])))
....:     R=P.intersection(Q)
....:     print(num,v,"\n",sorted(map(vector,P.rays())),P.lines(),"\n",sorted(ma
....: p(vector,Q.rays())),Q.lines(),"\n",sorted(map(vector,R.rays())),R.lines(),
....: "\n")
....: 
1 [1, 2, 1, 2] 
 [(0, -1, 0)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [] () 

2 [1, 2, 1] 
 [(0, -1, 0)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [] () 

3 [1, 2] 
 [(0, -1, 0), (1, 1, -1)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [(1, 1, -1)] () 

4 [1] 
 [(0, -1, 0), (1, 1, -1)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [(1, 1, -1)] () 

5 [2] 
 [(0, -1, 0), (1, -1, -1)] () 
 [(0, 1, 0)] () 
 [] () 

6 [] 
 [(0, -1, 0), (1, 1, -1)] () 
 [(0, 1, 0)] () 
 [] () 

sage: A=CartanMatrix(['D',4])
....: c=[0,1,2,3]
....: num=0
....: for v in sortables(A,c[1:]):
....:     la=lam(A,v)
....:     num+=1
....:     P=p_lambda_cone(B(A,c),la,list(sortables(A,c[1:])))
....:     Q=p_lambda_cone(B(A,c),la,list([c[0]]+v for v in sortables(A,c[1:])))
....:     R=P.intersection(Q)
....:     print(num,v,"\n",sorted(map(vector,P.rays())),P.lines(),"\n",sorted(ma
....: p(vector,Q.rays())),Q.lines(),"\n",sorted(map(vector,R.rays())),R.lines(),
....: "\n")
1 [1, 2, 3, 1, 2, 3] 
 [(0, -1, 0, 0)] () 
 [(0, 1, 0, 0), (1, 1, -1, -1)] () 
 [] () 

2 [1, 2, 3, 1, 2] 
 [(0, -1, 0, 0)] () 
 [(0, 1, 0, 0), (1, 1, -1, -1)] () 
 [] () 

3 [1, 2, 3, 1, 3] 
 [(0, -1, 0, 0)] () 
 [(0, 1, 0, 0), (1, 1, -1, -1)] () 
 [] () 

4 [1, 2, 3, 1] 
 [(0, -1, 0, 0)] () 
 [(0, 1, 0, 0), (1, 1, -1, -1)] () 
 [] () 

5 [1, 2, 3] 
 [(0, -1, 0, 0), (1, 1, -1, -1)] () 
 [(0, 1, 0, 0), (1, 1, -1, -1)] () 
 [(1, 1, -1, -1)] () 

6 [1, 2, 1] 
 [(0, -1, 0, 0), (1, 0, -1, -1)] () 
 [(0, 1, 0, 0), (1, 1, -1, -1)] () 
 [] () 

7 [1, 2] 
 [(0, -1, 0, 0), (1, 1, -1, -1)] () 
 [(0, 1, 0, 0), (1, 1, -1, -1)] () 
 [(1, 1, -1, -1)] () 

8 [1, 3, 1] 
 [(0, -1, 0, 0), (1, 0, -1, -1)] () 
 [(0, 1, 0, 0), (1, 1, -1, -1)] () 
 [] () 

9 [1, 3] 
 [(0, -1, 0, 0), (1, 1, -1, -1)] () 
 [(0, 1, 0, 0), (1, 1, -1, -1)] () 
 [(1, 1, -1, -1)] () 

10 [1] 
 [(0, -1, 0, 0), (1, 1, -1, -1)] () 
 [(0, 1, 0, 0), (1, 1, -1, -1)] () 
 [(1, 1, -1, -1)] () 

11 [2, 3] 
 [(0, -1, 0, 0), (1, -1, -1, -1)] () 
 [(0, 1, 0, 0)] () 
 [] () 

12 [2] 
 [(0, -1, 0, 0), (1, 0, -1, -1)] () 
 [(0, 1, 0, 0)] () 
 [] () 

13 [3] 
 [(0, -1, 0, 0), (1, 0, -1, -1)] () 
 [(0, 1, 0, 0)] () 
 [] () 

14 [] 
 [(0, -1, 0, 0), (1, 1, -1, -1)] () 
 [(0, 1, 0, 0)] () 
 [] () 

sage: B(A,c).rank()
2
sage: B(A,c)
[ 0  1  0  0]
[-1  0  1  1]
[ 0 -1  0  0]
[ 0 -1  0  0]
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     la=lam(A,v)
....:     num+=1
....:     P=p_lambda_cone(B(A,c),la,list(sortables(A,c[1:])))
....:     Q=p_lambda_cone(B(A,c),la,list([c[0]]+v for v in sortables(A,c[1:])))
....:     R=P.intersection(Q)
....:     print(num,v,"\n",sorted(map(vector,P.rays())),P.lines(),"\n",sorted(ma
....: p(vector,Q.rays())),Q.lines(),"\n",sorted(map(vector,R.rays())),R.lines(),
....: "\n")
1 [1, 2, 1, 2] 
 [(0, -1, 0)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [] () 

2 [1, 2, 1] 
 [(0, -1, 0)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [] () 

3 [1, 2] 
 [(0, -1, 0), (1, 1, -1)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [(1, 1, -1)] () 

4 [1] 
 [(0, -1, 0), (1, 1, -1)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [(1, 1, -1)] () 

5 [2] 
 [(0, -1, 0), (1, -1, -1)] () 
 [(0, 1, 0)] () 
 [] () 

6 [] 
 [(0, -1, 0), (1, 1, -1)] () 
 [(0, 1, 0)] () 
 [] () 

sage: B(A,c)
[ 0  1  0]
[-1  0  2]
[ 0 -1  0]
sage: A=CartanMatrix(['D',4])
....: c=[0,1,2,3]
....: num=0
....: for v in sortables(A,c[1:]):
....:     la=lam(A,v)
....:     num+=1
....:     P=p_lambda_cone(B(A,c),la,list(sortables(A,c[1:])))
....:     Q=p_lambda_cone(B(A,c),la,list([c[0]]+v for v in sortables(A,c[1:])))
....:     R=P.intersection(Q)
....:     print(num,v,"\n",sorted(map(vector,P.rays())),P.lines(),"\n",sorted(ma
....: p(vector,Q.rays())),Q.lines(),"\n",sorted(map(vector,R.rays())),R.lines(),
....: "\n")
....: 
1 [1, 2, 3, 1, 2, 3] 
 [(0, -1, 0, 0)] () 
 [(0, 1, 0, 0), (1, 1, -1, -1)] () 
 [] () 

2 [1, 2, 3, 1, 2] 
 [(0, -1, 0, 0)] () 
 [(0, 1, 0, 0), (1, 1, -1, -1)] () 
 [] () 

3 [1, 2, 3, 1, 3] 
 [(0, -1, 0, 0)] () 
 [(0, 1, 0, 0), (1, 1, -1, -1)] () 
 [] () 

4 [1, 2, 3, 1] 
 [(0, -1, 0, 0)] () 
 [(0, 1, 0, 0), (1, 1, -1, -1)] () 
 [] () 

5 [1, 2, 3] 
 [(0, -1, 0, 0), (1, 1, -1, -1)] () 
 [(0, 1, 0, 0), (1, 1, -1, -1)] () 
 [(1, 1, -1, -1)] () 

6 [1, 2, 1] 
 [(0, -1, 0, 0), (1, 0, -1, -1)] () 
 [(0, 1, 0, 0), (1, 1, -1, -1)] () 
 [] () 

7 [1, 2] 
 [(0, -1, 0, 0), (1, 1, -1, -1)] () 
 [(0, 1, 0, 0), (1, 1, -1, -1)] () 
 [(1, 1, -1, -1)] () 

8 [1, 3, 1] 
 [(0, -1, 0, 0), (1, 0, -1, -1)] () 
 [(0, 1, 0, 0), (1, 1, -1, -1)] () 
 [] () 

9 [1, 3] 
 [(0, -1, 0, 0), (1, 1, -1, -1)] () 
 [(0, 1, 0, 0), (1, 1, -1, -1)] () 
 [(1, 1, -1, -1)] () 

10 [1] 
 [(0, -1, 0, 0), (1, 1, -1, -1)] () 
 [(0, 1, 0, 0), (1, 1, -1, -1)] () 
 [(1, 1, -1, -1)] () 

11 [2, 3] 
 [(0, -1, 0, 0), (1, -1, -1, -1)] () 
 [(0, 1, 0, 0)] () 
 [] () 

12 [2] 
 [(0, -1, 0, 0), (1, 0, -1, -1)] () 
 [(0, 1, 0, 0)] () 
 [] () 

13 [3] 
 [(0, -1, 0, 0), (1, 0, -1, -1)] () 
 [(0, 1, 0, 0)] () 
 [] () 

14 [] 
 [(0, -1, 0, 0), (1, 1, -1, -1)] () 
 [(0, 1, 0, 0)] () 
 [] () 

sage: B(A,c)
[ 0  1  0  0]
[-1  0  1  1]
[ 0 -1  0  0]
[ 0 -1  0  0]
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: num=0
....: for v in sortables(A,c[1:]):
....:     la=lam(A,v)
....:     num+=1
....:     P=p_lambda_cone(B(A,c),la,list(sortables(A,c[1:])))
....:     Q=p_lambda_cone(B(A,c),la,list([c[0]]+v for v in sortables(A,c[1:])))
....:     R=P.intersection(Q)
....:     print(num,v,"\n",sorted(map(vector,P.rays())),P.lines(),"\n",sorted(ma
....: p(vector,Q.rays())),Q.lines(),"\n",sorted(map(vector,R.rays())),R.lines(),
....: "\n")
1 [1, 2, 3, 1, 2, 3, 1, 2, 3] 
 [(0, -1, 0, 0)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0)] () 
 [] () 

2 [1, 2, 3, 1, 2, 3, 1, 2] 
 [(0, -1, 0, 0)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0)] () 
 [] () 

3 [1, 2, 3, 1, 2, 3, 1] 
 [(0, -1, 0, 0)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (1, 2, 1, -1)] () 
 [] () 

4 [1, 2, 3, 1, 2, 3] 
 [(0, -1, 0, 0), (1, 0, 1, -1)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0)] () 
 [] () 

5 [1, 2, 3, 1, 2, 1] 
 [(0, -1, 0, 0)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (1, 2, 1, -1), (1, 3, 1, -2)] () 
 [] () 

6 [1, 2, 3, 1, 2] 
 [(0, -1, 0, 0), (1, 0, 1, -1)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (1, 3, 1, -2)] () 
 [] () 

7 [1, 2, 3, 1] 
 [(0, -1, 0, 0), (1, 0, 1, -1), (1, 1, 1, -2)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (2, 3, 0, -2)] () 
 [] () 

8 [1, 2, 3, 2, 3] 
 [(0, -1, 0, 0)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (1, 2, -1, -1)] () 
 [] () 

9 [1, 2, 3, 2] 
 [(0, -1, 0, 0)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (1, 2, -1, -1), (1, 2, 1, -1)] () 
 [] () 

10 [1, 2, 3] 
 [(0, -1, 0, 0), (1, 0, 1, -1)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (1, 2, -1, -1), (2, 3, 0, -2)] () 
 [] () 

11 [1, 2, 1] 
 [(0, -1, 0, 0), (1, 0, 1, -1), (1, 1, 1, -2), (2, 1, 0, -2)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0)] () 
 [] () 

12 [1, 2] 
 [(0, -1, 0, 0), (1, 0, 1, -1), (2, 1, 0, -2)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0), (1, 2, -1, -1)] () 
 [] () 

13 [1, 3] 
 [(0, -1, 0, 0), (1, 0, -1, -1)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0)] () 
 [] () 

14 [1] 
 [(0, -1, 0, 0), (1, 0, -1, -1), (1, 0, 1, -1)] () 
 [(0, 1, 0, 0), (1, 1, -1, 0)] () 
 [] () 

15 [2, 3, 2, 3] 
 [(0, -1, 0, 0), (1, -1, -1, 0)] () 
 [(0, 1, 0, 0)] () 
 [] () 

16 [2, 3, 2] 
 [(0, -1, 0, 0), (1, -1, -1, 0)] () 
 [(0, 1, 0, 0)] () 
 [] () 

17 [2, 3] 
 [(0, -1, 0, 0), (1, -1, -1, 0), (1, 0, 1, -1)] () 
 [(0, 1, 0, 0)] () 
 [] () 

18 [2] 
 [(0, -1, 0, 0), (1, -1, -1, 0), (1, 0, 1, -1), (1, 1, 1, -2)] () 
 [(0, 1, 0, 0)] () 
 [] () 

19 [3] 
 [(0, -1, 0, 0), (1, -1, -1, 0), (1, 0, -1, -1)] () 
 [(0, 1, 0, 0)] () 
 [] () 

20 [] 
 [(0, -1, 0, 0), (1, -1, -1, 0), (1, 0, -1, -1), (1, 0, 1, -1)] () 
 [(0, 1, 0, 0)] () 
 [] () 

sage: B(A,c)
[ 0  1  0  0]
[-1  0  1  0]
[ 0 -1  0  2]
[ 0  0 -1  0]
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: num=0
....: for v in sortables(A,c[1:]):
....:     la=lam(A,v)
....:     num+=1
....:     P=p_lambda_cone(B(A,c),la,list(sortables(A,c[1:])))
....:     Q=p_lambda_cone(B(A,c),la,list([c[0]]+v for v in sortables(A,c[1:])))
....:     R=P.intersection(Q)
....:     print(num,v,"\n",sorted(map(vector,P.rays())),P.lines(),"\n",sorted(ma
....: p(vector,Q.rays())),Q.lines(),"\n",sorted(map(vector,R.rays())),R.lines(),
....: "\n")
1 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] () 
 [] () 

2 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] () 
 [] () 

3 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] () 
 [] () 

4 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, 0, 1, -1)] () 
 [] () 

5 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 
 [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] () 
 [] () 

6 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] () 
 [] () 

^Z
[1]+  Stopped                 /Applications/SageMath-10-2.app/Contents/Frameworks/Sage.framework/Versions/Current/venv/bin/sage
MA-C02K804RDR53:~ reading$ fg
/Applications/SageMath-10-2.app/Contents/Frameworks/Sage.framework/Versions/Current/venv/bin/sage
7 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, 0, 1, -1)] () 
 [] () 

8 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 
 [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] () 
 [] () 

^Z
[1]+  Stopped                 /Applications/SageMath-10-2.app/Contents/Frameworks/Sage.framework/Versions/Current/venv/bin/sage
MA-C02K804RDR53:~ reading$ fg
/Applications/SageMath-10-2.app/Contents/Frameworks/Sage.framework/Versions/Current/venv/bin/sage
9 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, 0, 1, -1), (1, 2, 1, 1, -2)] () 
 [] () 

^Z
[1]+  Stopped                 /Applications/SageMath-10-2.app/Contents/Frameworks/Sage.framework/Versions/Current/venv/bin/sage
MA-C02K804RDR53:~ reading$ fg
/Applications/SageMath-10-2.app/Contents/Frameworks/Sage.framework/Versions/Current/venv/bin/sage
10 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 
 [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0), (1, 2, 1, 1, -2)] () 
 [] () 

11 [1, 2, 3, 4, 1, 2, 3, 4, 1] 
 [(0, -1, 0, 0, 0), (1, 0, 0, 1, -1), (1, 0, 1, 1, -2)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] () 
 [] () 

12 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] () 
 [] () 

^Z
[1]+  Stopped                 /Applications/SageMath-10-2.app/Contents/Frameworks/Sage.framework/Versions/Current/venv/bin/sage
MA-C02K804RDR53:~ reading$ fg
/Applications/SageMath-10-2.app/Contents/Frameworks/Sage.framework/Versions/Current/venv/bin/sage
13 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] () 
 [] () 

^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [1080], line 7
      5 la=lam(A,v)
      6 num+=Integer(1)
----> 7 P=p_lambda_cone(B(A,c),la,list(sortables(A,c[Integer(1):])))
      8 Q=p_lambda_cone(B(A,c),la,list([c[Integer(0)]]+v for v in sortables(A,c[Integer(1):])))
      9 R=P.intersection(Q)

File ~/git/affine_dominance/software/domination4.py:188, in p_lambda_cone(B, la, seqs)
    186 P = cone_at(p_lambda_faster(B, la, seqs[0]),la)
    187 for s in seqs:
--> 188     P = P.intersection(cone_at(p_lambda_faster(B, la, s),la))
    189     if P.dimension()==0:
    190         break

File ~/git/affine_dominance/software/domination4.py:152, in p_lambda_faster(B, la, seq)
    149 Hm = Polyhedron(ieqs=[(0,)*(k+1)+(-1,)+(0,)*(m-k-1)])
    150 #print("Hp:   ",Hp,Hp.vertices(),Hp.rays(),Hp.lines(),"\n")
    151 #print("Hm:   ",Hm,Hm.vertices(),Hm.rays(),Hm.lines(),"\n\n")
--> 152 Pp = P.intersection(Hp)
    153 Pm = P.intersection(Hm)
    154 if Pp.dimension() < rk:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1371, in Polyhedron_base5.intersection(self, other)
   1369 parent = self.parent()
   1370 try:
-> 1371     intersection = parent.element_class(parent, None, [new_ieqs, new_eqns])
   1373     # Force calculation of the vertices.
   1374     _ = intersection.n_vertices()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:179, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    177 elif Hrep is not None:
    178     ieqs, eqns = Hrep
--> 179     self._init_from_Hrepresentation(ieqs, eqns, **kwds)
    180 else:
    181     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:129, in Polyhedron_ppl._init_from_Hrepresentation(self, ieqs, eqns, minimize, verbose)
    106 def _init_from_Hrepresentation(self, ieqs, eqns, minimize=True, verbose=False):
    107     """
    108     Construct polyhedron from H-representation data.
    109 
   (...)
    127         sage: Polyhedron_ppl._init_from_Hrepresentation(p, [], [])
    128     """
--> 129     cs = self._convert_constraints_to_ppl(ieqs, eqns)
    130     if cs.empty():
    131         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'universe')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:534, in Polyhedron_ppl._convert_constraints_to_ppl(ieqs, eqns)
    532     ieqs = []
    533 for ieq in ieqs:
--> 534     cs.insert(Polyhedron_ppl._convert_constraint_to_ppl(ieq, INEQUALITY))
    535 if eqns is None:
    536     eqns = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:509, in Polyhedron_ppl._convert_constraint_to_ppl(c, typ)
    507 A = dc[1:]
    508 if typ == INEQUALITY:
--> 509     return Linear_Expression(A, b) >= 0
    510 else:
    511     return Linear_Expression(A, b) == 0

File ppl/linear_algebra.pyx:654, in ppl.linear_algebra.Linear_Expression.__init__()

File ppl/linear_algebra.pyx:49, in ppl.linear_algebra.PPL_Coefficient_from_pyobject()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/rings/integer.pyx:914, in sage.rings.integer.Integer.__richcmp__ (build/cythonized/sage/rings/integer.c:16498)()
    912     c = mpz_cmp_d((<Integer>left).value, d)
    913 else:
--> 914     return coercion_model.richcmp(left, right, op)
    915 
    916 return rich_to_bool_sgn(op, c)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:2021, in sage.structure.coerce.CoercionModel.richcmp (build/cythonized/sage/structure/coerce.c:26173)()
   2019 # Coerce to a common parent
   2020 try:
-> 2021     x, y = self.canonical_coercion(x, y)
   2022 except (TypeError, NotImplementedError):
   2023     pass

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1422, in sage.structure.coerce.CoercionModel.canonical_coercion (build/cythonized/sage/structure/coerce.c:18956)()
   1420             self._record_exception()
   1421 
-> 1422     raise TypeError("no common canonical parent for objects with parents: '%s' and '%s'"%(xp, yp))
   1423 
   1424 cpdef coercion_maps(self, R, S) noexcept:

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     la=lam(A,v)
....:     num+=1
....:     P=p_lambda_cone(B(A,c),la,list(sortables(A,c[1:])))
....:     Q=p_lambda_cone(B(A,c),la,list([c[0]]+v for v in sortables(A,c[1:])))
....:     R=P.intersection(Q)
....:     print(num,v,"\n",sorted(map(vector,P.rays())),P.lines(),"\n",sorted(ma
....: p(vector,Q.rays())),Q.lines(),"\n",sorted(map(vector,R.rays())),R.lines(),
....: "\n")
1 [1, 2, 1, 2] 
 [(0, -1, 0)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [] () 

2 [1, 2, 1] 
 [(0, -1, 0)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [] () 

3 [1, 2] 
 [(0, -1, 0), (1, 1, -1)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [(1, 1, -1)] () 

4 [1] 
 [(0, -1, 0), (1, 1, -1)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [(1, 1, -1)] () 

5 [2] 
 [(0, -1, 0), (1, -1, -1)] () 
 [(0, 1, 0)] () 
 [] () 

6 [] 
 [(0, -1, 0), (1, 1, -1)] () 
 [(0, 1, 0)] () 
 [] () 

sage: B(A,c)
[ 0  1  0]
[-1  0  2]
[ 0 -1  0]
sage: A=CartanMatrix(['B',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     la=lam(A,v)
....:     num+=1
....:     P=p_lambda_cone(B(A,c),la,list(sortables(A,c[1:])))
....:     Q=p_lambda_cone(B(A,c),la,list([c[0]]+v for v in sortables(A,c[1:])))
....:     R=P.intersection(Q)
....:     print(num,v,"\n",sorted(map(vector,P.rays())),P.lines(),"\n",sorted(ma
....: p(vector,Q.rays())),Q.lines(),"\n",sorted(map(vector,R.rays())),R.lines(),
....: "\n")
1 [1, 2, 1, 2] 
 [(0, -1, 0)] () 
 [(0, 1, 0), (1, 1, -2)] () 
 [] () 

2 [1, 2, 1] 
 [(0, -1, 0)] () 
 [(0, 1, 0), (1, 1, -2)] () 
 [] () 

3 [1, 2] 
 [(0, -1, 0), (1, 1, -2)] () 
 [(0, 1, 0), (1, 1, -2)] () 
 [(1, 1, -2)] () 

4 [1] 
 [(0, -1, 0), (1, 1, -2)] () 
 [(0, 1, 0), (1, 1, -2)] () 
 [(1, 1, -2)] () 

5 [2] 
 [(0, -1, 0), (1, -1, -2)] () 
 [(0, 1, 0)] () 
 [] () 

6 [] 
 [(0, -1, 0), (1, 1, -2)] () 
 [(0, 1, 0)] () 
 [] () 

sage: A=CartanMatrix(['A',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     la=lam(A,v)
....:     num+=1
....:     P=p_lambda_cone(B(A,c),la,list(sortables(A,c[1:])))
....:     Q=p_lambda_cone(B(A,c),la,list([c[0]]+v for v in sortables(A,c[1:])))
....:     R=P.intersection(Q)
....:     print(num,v,"\n",sorted(map(vector,P.rays())),P.lines(),"\n",sorted(ma
....: p(vector,Q.rays())),Q.lines(),"\n",sorted(map(vector,R.rays())),R.lines(),
....: "\n")
1 [1, 2, 1] 
 [(0, -1, 0)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [] () 

2 [1, 2] 
 [(0, -1, 0)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [] () 

3 [1] 
 [(0, -1, 0), (1, 0, -1)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [] () 

4 [2] 
 [(0, -1, 0), (1, -1, -1)] () 
 [(0, 1, 0)] () 
 [] () 

5 [] 
 [(0, -1, 0), (1, 0, -1)] () 
 [(0, 1, 0)] () 
 [] () 

sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     la=lam(A,v)
....:     num+=1
....:     P=p_lambda_cone(B(A,c),la,list(sortables(A,c[1:])))
....:     Q=p_lambda_cone(B(A,c),la,list([c[0]]+v for v in sortables(A,c[1:])))
....:     R=P.intersection(Q)
....:     print(num,v,"\n",sorted(map(vector,P.rays())),P.lines(),"\n",sorted(ma
....: p(vector,Q.rays())),Q.lines(),"\n",sorted(map(vector,R.rays())),R.lines(),
....: "\n")
1 [1, 2, 1, 2] 
 [(0, -1, 0)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [] () 

2 [1, 2, 1] 
 [(0, -1, 0)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [] () 

3 [1, 2] 
 [(0, -1, 0), (1, 1, -1)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [(1, 1, -1)] () 

4 [1] 
 [(0, -1, 0), (1, 1, -1)] () 
 [(0, 1, 0), (1, 1, -1)] () 
 [(1, 1, -1)] () 

5 [2] 
 [(0, -1, 0), (1, -1, -1)] () 
 [(0, 1, 0)] () 
 [] () 

6 [] 
 [(0, -1, 0), (1, 1, -1)] () 
 [(0, 1, 0)] () 
 [] () 

sage: A=CartanMatrix(['C',3])
....: c=[2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     la=lam(A,v)
....:     num+=1
....:     P=p_lambda_cone(B(A,c),la,list(sortables(A,c[1:])))
....:     Q=p_lambda_cone(B(A,c),la,list([c[0]]+v for v in sortables(A,c[1:])))
....:     R=P.intersection(Q)
....:     print(num,v,"\n",sorted(map(vector,P.rays())),P.lines(),"\n",sorted(ma
....: p(vector,Q.rays())),Q.lines(),"\n",sorted(map(vector,R.rays())),R.lines(),
....: "\n")
1 [1, 0, 1] 
 [(0, -1, 0)] () 
 [(-1, 1, 1), (0, 1, 0)] () 
 [] () 

2 [1, 0] 
 [(0, -1, 0)] () 
 [(-1, 1, 1), (0, 1, 0)] () 
 [] () 

3 [1] 
 [(-1, 0, 1), (0, -1, 0)] () 
 [(-1, 1, 1), (0, 1, 0)] () 
 [] () 

4 [0] 
 [(-1, -1, 1), (0, -1, 0)] () 
 [(0, 1, 0)] () 
 [] () 

5 [] 
 [(-1, 0, 1), (0, -1, 0)] () 
 [(0, 1, 0)] () 
 [] () 

sage: B(A,c)
[ 0 -1  0]
[ 1  0 -2]
[ 0  1  0]
sage: A=CartanMatrix(['B',3])
....: c=[2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     la=lam(A,v)
....:     num+=1
....:     P=p_lambda_cone(B(A,c),la,list(sortables(A,c[1:])))
....:     Q=p_lambda_cone(B(A,c),la,list([c[0]]+v for v in sortables(A,c[1:])))
....:     R=P.intersection(Q)
....:     print(num,v,"\n",sorted(map(vector,P.rays())),P.lines(),"\n",sorted(ma
....: p(vector,Q.rays())),Q.lines(),"\n",sorted(map(vector,R.rays())),R.lines(),
....: "\n")
1 [1, 0, 1] 
 [(0, -1, 0)] () 
 [(-1, 1, 2), (0, 1, 0)] () 
 [] () 

2 [1, 0] 
 [(0, -1, 0)] () 
 [(-1, 1, 2), (0, 1, 0)] () 
 [] () 

3 [1] 
 [(-1, 0, 2), (0, -1, 0)] () 
 [(-1, 1, 2), (0, 1, 0)] () 
 [] () 

4 [0] 
 [(-1, -1, 2), (0, -1, 0)] () 
 [(0, 1, 0)] () 
 [] () 

5 [] 
 [(-1, 0, 2), (0, -1, 0)] () 
 [(0, 1, 0)] () 
 [] () 

sage: B(A,c)
[ 0 -1  0]
[ 1  0 -1]
[ 0  2  0]
sage: A=CartanMatrix(['B',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     la=lam(A,v)
....:     num+=1
....:     P=p_lambda_cone(B(A,c),la,list(sortables(A,c[1:])))
....:     Q=p_lambda_cone(B(A,c),la,list([c[0]]+v for v in sortables(A,c[1:])))
....:     R=P.intersection(Q)
....:     print(num,v,"\n",sorted(map(vector,P.rays())),P.lines(),"\n",sorted(ma
....: p(vector,Q.rays())),Q.lines(),"\n",sorted(map(vector,R.rays())),R.lines(),
....: "\n")
1 [1, 2, 1, 2] 
 [(0, -1, 0)] () 
 [(0, 1, 0), (1, 1, -2)] () 
 [] () 

2 [1, 2, 1] 
 [(0, -1, 0)] () 
 [(0, 1, 0), (1, 1, -2)] () 
 [] () 

3 [1, 2] 
 [(0, -1, 0), (1, 1, -2)] () 
 [(0, 1, 0), (1, 1, -2)] () 
 [(1, 1, -2)] () 

4 [1] 
 [(0, -1, 0), (1, 1, -2)] () 
 [(0, 1, 0), (1, 1, -2)] () 
 [(1, 1, -2)] () 

5 [2] 
 [(0, -1, 0), (1, -1, -2)] () 
 [(0, 1, 0)] () 
 [] () 

6 [] 
 [(0, -1, 0), (1, 1, -2)] () 
 [(0, 1, 0)] () 
 [] () 

sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: num=0
....: for v in sortables(A,c[1:]):
....:     la=lam(A,v)
....:     num+=1
....:     P=p_lambda_cone(B(A,c),la,list(sortables(A,c[1:])))
....:     Q=p_lambda_cone(B(A,c),la,list([c[0]]+v for v in sortables(A,c[1:])))
....:     R=P.intersection(Q)
....:     print(num,v,"\n",sorted(map(vector,P.rays())),P.lines(),"\n",sorted(ma
....: p(vector,Q.rays())),Q.lines(),"\n",sorted(map(vector,R.rays())),R.lines(),
....: "\n")

1 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] () 
 [] () 

2 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 
 [(0, -1, 0, 0, 0)] () 
 [(0, 1, 0, 0, 0), (1, 1, -1, 0, 0)] () 
 [] () 

^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [1091], line 8
      6 num+=Integer(1)
      7 P=p_lambda_cone(B(A,c),la,list(sortables(A,c[Integer(1):])))
----> 8 Q=p_lambda_cone(B(A,c),la,list([c[Integer(0)]]+v for v in sortables(A,c[Integer(1):])))
      9 R=P.intersection(Q)
     10 print(num,v,"\n",sorted(map(vector,P.rays())),P.lines(),"\n",sorted(map(vector,Q.rays())),Q.lines(),"\n",sorted(map(vector,R.rays())),R.lines(),"\n")

File ~/git/affine_dominance/software/domination4.py:188, in p_lambda_cone(B, la, seqs)
    186 P = cone_at(p_lambda_faster(B, la, seqs[0]),la)
    187 for s in seqs:
--> 188     P = P.intersection(cone_at(p_lambda_faster(B, la, s),la))
    189     if P.dimension()==0:
    190         break

File ~/git/affine_dominance/software/domination4.py:161, in p_lambda_faster(B, la, seq)
    157         P=Ep*Pp
    158     else:
    159         #print("Pp:   ",Pp,Pp.vertices(),Pp.rays(),Pp.lines(),"\n")
    160         #print("Pm:   ",Pm,Pm.vertices(),Pm.rays(),Pm.lines(),"\n\n")
--> 161         P=(Ep*Pp).convex_hull(Em*Pm)
    162     B.mutate(k)
    163 return P

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4099, in sage.structure.element.Matrix.__mul__ (build/cythonized/sage/structure/element.c:35219)()
   4097 
   4098         if BOTH_ARE_ELEMENT(cl):
-> 4099             return coercion_model.bin_op(left, right, mul)
   4100 
   4101         cdef long value

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1222, in sage.structure.coerce.CoercionModel.bin_op (build/cythonized/sage/structure/coerce.c:15809)()
   1220 if action is not None:
   1221     if (<Action>action)._is_left:
-> 1222         return (<Action>action)._act_(x, y)
   1223     else:
   1224         return (<Action>action)._act_(y, x)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_actions.pyx:157, in sage.structure.coerce_actions.ActedUponAction._act_ (build/cythonized/sage/structure/coerce_actions.c:8579)()
    155     <... 'sage.structure.coerce_actions.ActedUponAction'>
    156 """
--> 157 return (<Element>x)._acted_upon_(g, not self._is_left)
    158 
    159 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:949, in sage.structure.element.Element._acted_upon_ (build/cythonized/sage/structure/element.c:16495)()
    947     return None
    948 
--> 949 cpdef _acted_upon_(self, x, bint self_on_left) noexcept:
    950     """
    951     Use this method to implement ``self`` acted on by x.

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1450, in Polyhedron_base5._acted_upon_(self, actor, self_on_left)
   1448         raise ValueError("matrices should act on the left")
   1449     else:
-> 1450         return self.linear_transformation(actor)
   1451 else:
   1452     return self.dilation(actor)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1879, in Polyhedron_base5.linear_transformation(self, linear_transf, new_base_ring)
   1873     pref_rep = 'Vrep' if self.n_vertices() <= self.n_inequalities() else 'Hrep'
   1875     return new_parent.element_class(new_parent, [new_vertices, new_rays, new_lines],
   1876                                     [new_inequalities, new_equations],
   1877                                     Vrep_minimal=True, Hrep_minimal=True, pref_rep=pref_rep)
-> 1879 return new_parent.element_class(new_parent, [tuple(new_vertices), tuple(new_rays), tuple(new_lines)], None)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:174, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    171     lines = tuple(lines)
    173 if vertices or rays or lines:
--> 174     self._init_from_Vrepresentation(vertices, rays, lines, **kwds)
    175 else:
    176     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:99, in Polyhedron_ppl._init_from_Vrepresentation(self, vertices, rays, lines, minimize, verbose)
     72 def _init_from_Vrepresentation(self, vertices, rays, lines, minimize=True, verbose=False):
     73     """
     74     Construct polyhedron from V-representation data.
     75 
   (...)
     97         sage: Polyhedron_ppl._init_from_Vrepresentation(p, [], [], [])
     98     """
---> 99     gs = self._convert_generators_to_ppl(vertices, rays, lines)
    100     if gs.empty():
    101         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'empty')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:481, in Polyhedron_ppl._convert_generators_to_ppl(vertices, rays, lines)
    479     lines = []
    480 for l in lines:
--> 481     gs.insert(Polyhedron_ppl._convert_generator_to_ppl(l, LINE))
    482 return gs

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:442, in Polyhedron_ppl._convert_generator_to_ppl(v, typ)
    440 d = LCM_list([denominator(v_i) for v_i in v])
    441 if d.is_one():
--> 442     return ob(Linear_Expression(v, 0))
    443 else:
    444     dv = [ d*v_i for v_i in v ]

File ppl/linear_algebra.pyx:654, in ppl.linear_algebra.Linear_Expression.__init__()

File ppl/linear_algebra.pyx:49, in ppl.linear_algebra.PPL_Coefficient_from_pyobject()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:1107, in sage.structure.element.Element.__richcmp__ (build/cythonized/sage/structure/element.c:18121)()
   1105         return (<Element>self)._richcmp_(other, op)
   1106     else:
-> 1107         return coercion_model.richcmp(self, other, op)
   1108 
   1109 cpdef _richcmp_(left, right, int op) noexcept:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:2021, in sage.structure.coerce.CoercionModel.richcmp (build/cythonized/sage/structure/coerce.c:26173)()
   2019 # Coerce to a common parent
   2020 try:
-> 2021     x, y = self.canonical_coercion(x, y)
   2022 except (TypeError, NotImplementedError):
   2023     pass

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1422, in sage.structure.coerce.CoercionModel.canonical_coercion (build/cythonized/sage/structure/coerce.c:18956)()
   1420             self._record_exception()
   1421 
-> 1422     raise TypeError("no common canonical parent for objects with parents: '%s' and '%s'"%(xp, yp))
   1423 
   1424 cpdef coercion_maps(self, R, S) noexcept:

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['D',4])
....: c=[0,1,2,3]
....: num=0
....: for v in sortables(A,c[1:]):
....:     la=lam(A,v)
....:     num+=1
....:     P=p_lambda_cone(B(A,c),la,list(sortables(A,c[1:])))
....:     Q=p_lambda_cone(B(A,c),la,list([c[0]]+v for v in sortables(A,c[1:])))
....:     R=P.intersection(Q)
....:     print(num,v,"\n",sorted(map(vector,P.rays())),P.lines(),"\n",sorted(ma
....: p(vector,Q.rays())),Q.lines(),"\n",sorted(map(vector,R.rays())),R.lines(),
....: "\n")
1 [1, 2, 3, 1, 2, 3] 
 [(0, -1, 0, 0)] () 
 [(0, 1, 0, 0), (1, 1, -1, -1)] () 
 [] () 

2 [1, 2, 3, 1, 2] 
 [(0, -1, 0, 0)] () 
 [(0, 1, 0, 0), (1, 1, -1, -1)] () 
 [] () 

3 [1, 2, 3, 1, 3] 
 [(0, -1, 0, 0)] () 
 [(0, 1, 0, 0), (1, 1, -1, -1)] () 
 [] () 

4 [1, 2, 3, 1] 
 [(0, -1, 0, 0)] () 
 [(0, 1, 0, 0), (1, 1, -1, -1)] () 
 [] () 

5 [1, 2, 3] 
 [(0, -1, 0, 0), (1, 1, -1, -1)] () 
 [(0, 1, 0, 0), (1, 1, -1, -1)] () 
 [(1, 1, -1, -1)] () 

6 [1, 2, 1] 
 [(0, -1, 0, 0), (1, 0, -1, -1)] () 
 [(0, 1, 0, 0), (1, 1, -1, -1)] () 
 [] () 

7 [1, 2] 
 [(0, -1, 0, 0), (1, 1, -1, -1)] () 
 [(0, 1, 0, 0), (1, 1, -1, -1)] () 
 [(1, 1, -1, -1)] () 

8 [1, 3, 1] 
 [(0, -1, 0, 0), (1, 0, -1, -1)] () 
 [(0, 1, 0, 0), (1, 1, -1, -1)] () 
 [] () 

9 [1, 3] 
 [(0, -1, 0, 0), (1, 1, -1, -1)] () 
 [(0, 1, 0, 0), (1, 1, -1, -1)] () 
 [(1, 1, -1, -1)] () 

10 [1] 
 [(0, -1, 0, 0), (1, 1, -1, -1)] () 
 [(0, 1, 0, 0), (1, 1, -1, -1)] () 
 [(1, 1, -1, -1)] () 

11 [2, 3] 
 [(0, -1, 0, 0), (1, -1, -1, -1)] () 
 [(0, 1, 0, 0)] () 
 [] () 

12 [2] 
 [(0, -1, 0, 0), (1, 0, -1, -1)] () 
 [(0, 1, 0, 0)] () 
 [] () 

13 [3] 
 [(0, -1, 0, 0), (1, 0, -1, -1)] () 
 [(0, 1, 0, 0)] () 
 [] () 

14 [] 
 [(0, -1, 0, 0), (1, 1, -1, -1)] () 
 [(0, 1, 0, 0)] () 
 [] () 

sage: B(A,c)
[ 0  1  0  0]
[-1  0  1  1]
[ 0 -1  0  0]
[ 0 -1  0  0]
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: la=lam(A,[])
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_faster(B(A,c),la,v)
....:     P.plot()
....: 
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: la=lam(A,[])
....: colors=rainbow(25)
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_faster(B(A,c),la,v)
....:     P.plot(fill=colors(num))
....:     num+=1
....: 
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In [1095], line 8
      6 for v in sortables(A,c[Integer(1):]):
      7     P=p_lambda_faster(B(A,c),la,v)
----> 8     P.plot(fill=colors(num))
      9     num+=Integer(1)

TypeError: 'list' object is not callable
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: la=lam(A,[])
....: colors=rainbow(25)
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_faster(B(A,c),la,v)
....:     P.plot(fill=colors[num])
....:     num+=1
....: 
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: la=lam(A,[])
....: colors=rainbow(25)
....: plots=[]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_faster(B(A,c),la,v)
....:     plots=plots+[P.plot(fill=colors[num])]
....:     num+=1
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: la=lam(A,[])
....: colors=rainbow(25)
....: plots=[]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_faster(B(A,c),la,v)
....:     plots=plots+[P.plot(fill=colors[num])]
....:     num+=1
....:     sum(plots)
....: 
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: la=lam(A,[])
....: colors=rainbow(25)
....: plots=[point(la).plot()]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_faster(B(A,c),la,v)
....:     plots=plots+[P.plot(fill=colors[num])]
....:     num+=1
....:     sum(plots)
....: 
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: la=lam(A,[])
....: colors=rainbow(8)
....: plots=[point(la).plot()]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_faster(B(A,c),la,v)
....:     plots=plots+[P.plot(fill=colors[num])]
....:     num+=1
....:     sum(plots)
....: 
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: la=lam(A,[])
....: colors=rainbow(8)
....: plots=[point(la).plot()]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_faster(B(A,c),la,v)
....:     plots=plots+[P.plot(fill=colors[num])]
....:     num+=1
....: sum(plots)
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: la=lam(A,[])
....: colors=rainbow(8)
....: plots=[point(la).plot()]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_faster(B(A,c),la,v)
....:     plots=plots+[P.plot(fill=colors[num])]
....:     num+=1
....: sum(plots)
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: la=lam(A,[])
....: colors=rainbow(8)
....: plots=[point(la).plot(size=3)]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_faster(B(A,c),la,v)
....:     plots=plots+[P.plot(fill=colors[num])]
....:     num+=1
....: sum(plots)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In [1103], line 6
      4 la=lam(A,[])
      5 colors=rainbow(Integer(8))
----> 6 plots=[point(la).plot(size=Integer(3))]
      7 for v in sortables(A,c[Integer(1):]):
      8     P=p_lambda_faster(B(A,c),la,v)

TypeError: plot() got an unexpected keyword argument 'size'
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: la=lam(A,[])
....: colors=rainbow(8)
....: plots=[point(la,size=10).plot()]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_faster(B(A,c),la,v)
....:     plots=plots+[P.plot(fill=colors[num])]
....:     num+=1
....: sum(plots)
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: la=lam(A,[])
....: colors=rainbow(8)
....: plots=[point(la,size=50).plot()]
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_faster(B(A,c),la,v)
....:     plots=plots+[P.plot(fill=colors[num])]
....:     num+=1
....: sum(plots)
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['D',4])
....: c=[0,1,2,3]
....: colors=rainbow(3)
....: for v in sortables(A,c[1:]):
....:     la=lam(A,v)
....:     P=p_lambda_cone(B(A,c),la,list(sortables(A,c[1:])))
....:     Q=p_lambda_cone(B(A,c),la,list([c[0]]+v for v in sortables(A,c[1:])))
....:     P.plot(fill=colors[0])+Q.plot(fill=colors[1])
---------------------------------------------------------------------------
KeyError                                  Traceback (most recent call last)
File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/misc/cachefunc.pyx:1962, in sage.misc.cachefunc.CachedMethodCaller.__call__ (build/cythonized/sage/misc/cachefunc.c:13372)()
   1961 try:
-> 1962     return cache[k]
   1963 except TypeError:  # k is not hashable

KeyError: ((True, False, False, False, True, True, False), ())

During handling of the above exception, another exception occurred:

NotImplementedError                       Traceback (most recent call last)
Cell In [1106], line 8
      6 P=p_lambda_cone(B(A,c),la,list(sortables(A,c[Integer(1):])))
      7 Q=p_lambda_cone(B(A,c),la,list([c[Integer(0)]]+v for v in sortables(A,c[Integer(1):])))
----> 8 P.plot(fill=colors[Integer(0)])+Q.plot(fill=colors[Integer(1)])

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base6.py:450, in Polyhedron_base6.plot(self, point, line, polygon, wireframe, fill, position, orthonormal, **kwds)
    447     else:
    448         return polyhedron.projection()
--> 450 projection = project(self, orthonormal)
    451 try:
    452     plot_method = projection.plot

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base6.py:441, in Polyhedron_base6.plot.<locals>.project(polyhedron, ortho)
    439 elif polyhedron.dim() <= 3:
    440     if ortho:
--> 441         return polyhedron.affine_hull_projection(orthonormal=True, extend=True).projection()
    442     else:
    443         return polyhedron.affine_hull_projection().projection()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base6.py:1513, in Polyhedron_base6.affine_hull_projection(self, as_polyhedron, as_affine_map, orthogonal, orthonormal, extend, minimal, return_all_data, as_convex_set)
   1511 if as_polyhedron is not None:
   1512     as_convex_set = as_polyhedron
-> 1513 return super().affine_hull_projection(
   1514     as_convex_set=as_convex_set, as_affine_map=as_affine_map,
   1515     orthogonal=orthogonal, orthonormal=orthonormal,
   1516     extend=extend, minimal=minimal,
   1517     return_all_data=return_all_data)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/convex_set.py:424, in ConvexSet_base.affine_hull_projection(self, as_convex_set, as_affine_map, orthogonal, orthonormal, extend, minimal, return_all_data, **kwds)
    421     as_convex_set = True
    422     as_affine_map = True
--> 424 result = self._affine_hull_projection(
    425     as_convex_set=as_convex_set, as_affine_map=as_affine_map, as_section_map=return_all_data,
    426     orthogonal=orthogonal, orthonormal=orthonormal,
    427     extend=extend, minimal=minimal, **kwds)
    429 # assemble result
    430 if return_all_data or (as_convex_set and as_affine_map):

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/misc/cachefunc.pyx:1967, in sage.misc.cachefunc.CachedMethodCaller.__call__ (build/cythonized/sage/misc/cachefunc.c:13508)()
   1965         return cache[k]
   1966 except KeyError:
-> 1967     w = self._instance_call(*args, **kwds)
   1968     cache[k] = w
   1969     return w

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/misc/cachefunc.pyx:1842, in sage.misc.cachefunc.CachedMethodCaller._instance_call (build/cythonized/sage/misc/cachefunc.c:12957)()
   1840         True
   1841     """
-> 1842     return self.f(self._instance, *args, **kwds)
   1843 
   1844 cdef fix_args_kwds(self, tuple args, dict kwds) noexcept:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base6.py:1006, in Polyhedron_base6._affine_hull_projection(self, as_convex_set, as_affine_map, as_section_map, orthogonal, orthonormal, extend, minimal)
   1003 elif orthogonal or orthonormal:
   1004     # see TODO
   1005     if not self.is_compact():
-> 1006         raise NotImplementedError('"orthogonal=True" and "orthonormal=True" work only for compact polyhedra')
   1007     affine_basis = self.an_affine_basis()
   1008     v0 = affine_basis[0].vector()

NotImplementedError: "orthogonal=True" and "orthonormal=True" work only for compact polyhedra
sage: A=CartanMatrix(['D',4])
....: c=[0,1,2,3]
....: colors=rainbow(3)
....: for v in sortables(A,c[1:]):
....:     la=lam(A,v)
....:     P=p_lambda_cone(B(A,c),la,list(sortables(A,c[1:])))
....:     Q=p_lambda_cone(B(A,c),la,list([c[0]]+v for v in sortables(A,c[1:])))
....:     P.plot(fill=colors[0])
....: 
---------------------------------------------------------------------------
KeyError                                  Traceback (most recent call last)
File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/misc/cachefunc.pyx:1962, in sage.misc.cachefunc.CachedMethodCaller.__call__ (build/cythonized/sage/misc/cachefunc.c:13372)()
   1961 try:
-> 1962     return cache[k]
   1963 except TypeError:  # k is not hashable

KeyError: ((True, False, False, False, True, True, False), ())

During handling of the above exception, another exception occurred:

NotImplementedError                       Traceback (most recent call last)
Cell In [1107], line 8
      6 P=p_lambda_cone(B(A,c),la,list(sortables(A,c[Integer(1):])))
      7 Q=p_lambda_cone(B(A,c),la,list([c[Integer(0)]]+v for v in sortables(A,c[Integer(1):])))
----> 8 P.plot(fill=colors[Integer(0)])

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base6.py:450, in Polyhedron_base6.plot(self, point, line, polygon, wireframe, fill, position, orthonormal, **kwds)
    447     else:
    448         return polyhedron.projection()
--> 450 projection = project(self, orthonormal)
    451 try:
    452     plot_method = projection.plot

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base6.py:441, in Polyhedron_base6.plot.<locals>.project(polyhedron, ortho)
    439 elif polyhedron.dim() <= 3:
    440     if ortho:
--> 441         return polyhedron.affine_hull_projection(orthonormal=True, extend=True).projection()
    442     else:
    443         return polyhedron.affine_hull_projection().projection()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base6.py:1513, in Polyhedron_base6.affine_hull_projection(self, as_polyhedron, as_affine_map, orthogonal, orthonormal, extend, minimal, return_all_data, as_convex_set)
   1511 if as_polyhedron is not None:
   1512     as_convex_set = as_polyhedron
-> 1513 return super().affine_hull_projection(
   1514     as_convex_set=as_convex_set, as_affine_map=as_affine_map,
   1515     orthogonal=orthogonal, orthonormal=orthonormal,
   1516     extend=extend, minimal=minimal,
   1517     return_all_data=return_all_data)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/convex_set.py:424, in ConvexSet_base.affine_hull_projection(self, as_convex_set, as_affine_map, orthogonal, orthonormal, extend, minimal, return_all_data, **kwds)
    421     as_convex_set = True
    422     as_affine_map = True
--> 424 result = self._affine_hull_projection(
    425     as_convex_set=as_convex_set, as_affine_map=as_affine_map, as_section_map=return_all_data,
    426     orthogonal=orthogonal, orthonormal=orthonormal,
    427     extend=extend, minimal=minimal, **kwds)
    429 # assemble result
    430 if return_all_data or (as_convex_set and as_affine_map):

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/misc/cachefunc.pyx:1967, in sage.misc.cachefunc.CachedMethodCaller.__call__ (build/cythonized/sage/misc/cachefunc.c:13508)()
   1965         return cache[k]
   1966 except KeyError:
-> 1967     w = self._instance_call(*args, **kwds)
   1968     cache[k] = w
   1969     return w

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/misc/cachefunc.pyx:1842, in sage.misc.cachefunc.CachedMethodCaller._instance_call (build/cythonized/sage/misc/cachefunc.c:12957)()
   1840         True
   1841     """
-> 1842     return self.f(self._instance, *args, **kwds)
   1843 
   1844 cdef fix_args_kwds(self, tuple args, dict kwds) noexcept:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base6.py:1006, in Polyhedron_base6._affine_hull_projection(self, as_convex_set, as_affine_map, as_section_map, orthogonal, orthonormal, extend, minimal)
   1003 elif orthogonal or orthonormal:
   1004     # see TODO
   1005     if not self.is_compact():
-> 1006         raise NotImplementedError('"orthogonal=True" and "orthonormal=True" work only for compact polyhedra')
   1007     affine_basis = self.an_affine_basis()
   1008     v0 = affine_basis[0].vector()

NotImplementedError: "orthogonal=True" and "orthonormal=True" work only for compact polyhedra
sage: A=CartanMatrix(['D',4])
....: c=[0,1,2,3]
....: colors=rainbow(3)
....: for v in sortables(A,c[1:]):
....:     la=lam(A,v)
....:     P=p_lambda_int(B(A,c),la,list(sortables(A,c[1:])))
....:     Q=p_lambda_int(B(A,c),la,list([c[0]]+v for v in sortables(A,c[1:])))
....:     P.plot(fill=colors[0])
....: 
---------------------------------------------------------------------------
KeyError                                  Traceback (most recent call last)
File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/misc/cachefunc.pyx:1962, in sage.misc.cachefunc.CachedMethodCaller.__call__ (build/cythonized/sage/misc/cachefunc.c:13372)()
   1961 try:
-> 1962     return cache[k]
   1963 except TypeError:  # k is not hashable

KeyError: ((True, False, False, False, True, True, False), ())

During handling of the above exception, another exception occurred:

NotImplementedError                       Traceback (most recent call last)
Cell In [1108], line 8
      6 P=p_lambda_int(B(A,c),la,list(sortables(A,c[Integer(1):])))
      7 Q=p_lambda_int(B(A,c),la,list([c[Integer(0)]]+v for v in sortables(A,c[Integer(1):])))
----> 8 P.plot(fill=colors[Integer(0)])

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base6.py:450, in Polyhedron_base6.plot(self, point, line, polygon, wireframe, fill, position, orthonormal, **kwds)
    447     else:
    448         return polyhedron.projection()
--> 450 projection = project(self, orthonormal)
    451 try:
    452     plot_method = projection.plot

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base6.py:441, in Polyhedron_base6.plot.<locals>.project(polyhedron, ortho)
    439 elif polyhedron.dim() <= 3:
    440     if ortho:
--> 441         return polyhedron.affine_hull_projection(orthonormal=True, extend=True).projection()
    442     else:
    443         return polyhedron.affine_hull_projection().projection()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base6.py:1513, in Polyhedron_base6.affine_hull_projection(self, as_polyhedron, as_affine_map, orthogonal, orthonormal, extend, minimal, return_all_data, as_convex_set)
   1511 if as_polyhedron is not None:
   1512     as_convex_set = as_polyhedron
-> 1513 return super().affine_hull_projection(
   1514     as_convex_set=as_convex_set, as_affine_map=as_affine_map,
   1515     orthogonal=orthogonal, orthonormal=orthonormal,
   1516     extend=extend, minimal=minimal,
   1517     return_all_data=return_all_data)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/convex_set.py:424, in ConvexSet_base.affine_hull_projection(self, as_convex_set, as_affine_map, orthogonal, orthonormal, extend, minimal, return_all_data, **kwds)
    421     as_convex_set = True
    422     as_affine_map = True
--> 424 result = self._affine_hull_projection(
    425     as_convex_set=as_convex_set, as_affine_map=as_affine_map, as_section_map=return_all_data,
    426     orthogonal=orthogonal, orthonormal=orthonormal,
    427     extend=extend, minimal=minimal, **kwds)
    429 # assemble result
    430 if return_all_data or (as_convex_set and as_affine_map):

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/misc/cachefunc.pyx:1967, in sage.misc.cachefunc.CachedMethodCaller.__call__ (build/cythonized/sage/misc/cachefunc.c:13508)()
   1965         return cache[k]
   1966 except KeyError:
-> 1967     w = self._instance_call(*args, **kwds)
   1968     cache[k] = w
   1969     return w

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/misc/cachefunc.pyx:1842, in sage.misc.cachefunc.CachedMethodCaller._instance_call (build/cythonized/sage/misc/cachefunc.c:12957)()
   1840         True
   1841     """
-> 1842     return self.f(self._instance, *args, **kwds)
   1843 
   1844 cdef fix_args_kwds(self, tuple args, dict kwds) noexcept:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base6.py:1006, in Polyhedron_base6._affine_hull_projection(self, as_convex_set, as_affine_map, as_section_map, orthogonal, orthonormal, extend, minimal)
   1003 elif orthogonal or orthonormal:
   1004     # see TODO
   1005     if not self.is_compact():
-> 1006         raise NotImplementedError('"orthogonal=True" and "orthonormal=True" work only for compact polyhedra')
   1007     affine_basis = self.an_affine_basis()
   1008     v0 = affine_basis[0].vector()

NotImplementedError: "orthogonal=True" and "orthonormal=True" work only for compact polyhedra
sage: A=CartanMatrix(['D',4])
....: c=[0,1,2,3]
....: colors=rainbow(3)
....: for v in sortables(A,c[1:]):
....:     la=lam(A,v)
....:     P=p_lambda_int(B(A,c),la,list(sortables(A,c[1:])))
....:     Q=p_lambda_int(B(A,c),la,list([c[0]]+v for v in sortables(A,c[1:])))
....:     P.plot()
---------------------------------------------------------------------------
KeyError                                  Traceback (most recent call last)
File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/misc/cachefunc.pyx:1962, in sage.misc.cachefunc.CachedMethodCaller.__call__ (build/cythonized/sage/misc/cachefunc.c:13372)()
   1961 try:
-> 1962     return cache[k]
   1963 except TypeError:  # k is not hashable

KeyError: ((True, False, False, False, True, True, False), ())

During handling of the above exception, another exception occurred:

NotImplementedError                       Traceback (most recent call last)
Cell In [1109], line 8
      6 P=p_lambda_int(B(A,c),la,list(sortables(A,c[Integer(1):])))
      7 Q=p_lambda_int(B(A,c),la,list([c[Integer(0)]]+v for v in sortables(A,c[Integer(1):])))
----> 8 P.plot()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base6.py:450, in Polyhedron_base6.plot(self, point, line, polygon, wireframe, fill, position, orthonormal, **kwds)
    447     else:
    448         return polyhedron.projection()
--> 450 projection = project(self, orthonormal)
    451 try:
    452     plot_method = projection.plot

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base6.py:441, in Polyhedron_base6.plot.<locals>.project(polyhedron, ortho)
    439 elif polyhedron.dim() <= 3:
    440     if ortho:
--> 441         return polyhedron.affine_hull_projection(orthonormal=True, extend=True).projection()
    442     else:
    443         return polyhedron.affine_hull_projection().projection()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base6.py:1513, in Polyhedron_base6.affine_hull_projection(self, as_polyhedron, as_affine_map, orthogonal, orthonormal, extend, minimal, return_all_data, as_convex_set)
   1511 if as_polyhedron is not None:
   1512     as_convex_set = as_polyhedron
-> 1513 return super().affine_hull_projection(
   1514     as_convex_set=as_convex_set, as_affine_map=as_affine_map,
   1515     orthogonal=orthogonal, orthonormal=orthonormal,
   1516     extend=extend, minimal=minimal,
   1517     return_all_data=return_all_data)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/convex_set.py:424, in ConvexSet_base.affine_hull_projection(self, as_convex_set, as_affine_map, orthogonal, orthonormal, extend, minimal, return_all_data, **kwds)
    421     as_convex_set = True
    422     as_affine_map = True
--> 424 result = self._affine_hull_projection(
    425     as_convex_set=as_convex_set, as_affine_map=as_affine_map, as_section_map=return_all_data,
    426     orthogonal=orthogonal, orthonormal=orthonormal,
    427     extend=extend, minimal=minimal, **kwds)
    429 # assemble result
    430 if return_all_data or (as_convex_set and as_affine_map):

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/misc/cachefunc.pyx:1967, in sage.misc.cachefunc.CachedMethodCaller.__call__ (build/cythonized/sage/misc/cachefunc.c:13508)()
   1965         return cache[k]
   1966 except KeyError:
-> 1967     w = self._instance_call(*args, **kwds)
   1968     cache[k] = w
   1969     return w

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/misc/cachefunc.pyx:1842, in sage.misc.cachefunc.CachedMethodCaller._instance_call (build/cythonized/sage/misc/cachefunc.c:12957)()
   1840         True
   1841     """
-> 1842     return self.f(self._instance, *args, **kwds)
   1843 
   1844 cdef fix_args_kwds(self, tuple args, dict kwds) noexcept:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base6.py:1006, in Polyhedron_base6._affine_hull_projection(self, as_convex_set, as_affine_map, as_section_map, orthogonal, orthonormal, extend, minimal)
   1003 elif orthogonal or orthonormal:
   1004     # see TODO
   1005     if not self.is_compact():
-> 1006         raise NotImplementedError('"orthogonal=True" and "orthonormal=True" work only for compact polyhedra')
   1007     affine_basis = self.an_affine_basis()
   1008     v0 = affine_basis[0].vector()

NotImplementedError: "orthogonal=True" and "orthonormal=True" work only for compact polyhedra
sage: A=CartanMatrix(['D',4])
....: c=[0,1,2,3]
....: colors=rainbow(3)
....: for v in sortables(A,c[1:]):
....:     la=lam(A,v)
....:     P=p_lambda_int(B(A,c),la,list(sortables(A,c[1:])))
....:     Q=p_lambda_int(B(A,c),la,list([c[0]]+v for v in sortables(A,c[1:])))
....:     P
....: 
A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 1 ray
A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 1 ray
A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 1 ray
A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex and 1 ray
A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices and 1 ray
A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices and 1 ray
A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices and 1 ray
A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices and 1 ray
A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices and 1 ray
A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices and 1 ray
A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices and 1 ray
A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices and 1 ray
A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices and 1 ray
A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices and 1 ray
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: colors=rainbow(3)
....: for v in sortables(A,c[1:]):
....:     la=lam(A,v)
....:     P=p_lambda_int(B(A,c),la,list(sortables(A,c[1:])))
....:     Q=p_lambda_int(B(A,c),la,list([c[0]]+v for v in sortables(A,c[1:])))
....:     P
....: 
A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray
A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 1 ray
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 1 ray
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: colors=rainbow(3)
....: for v in sortables(A,c[1:]):
....:     la=lam(A,v)
....:     P=p_lambda_int(B(A,c),la,list(sortables(A,c[1:])))
....:     Q=p_lambda_int(B(A,c),la,list([c[0]]+v for v in sortables(A,c[1:])))
....:     P.plot()
....: 
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: colors=rainbow(3)
....: for v in sortables(A,c[1:]):
....:     la=lam(A,v)
....:     P=p_lambda_int(B(A,c),la,list(sortables(A,c[1:])))
....:     Q=p_lambda_int(B(A,c),la,list([c[0]]+v for v in sortables(A,c[1:])))
....:     P.plot(fill=colors[0])+Q.plot(fill=colors(1))
....: 
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In [1113], line 8
      6 P=p_lambda_int(B(A,c),la,list(sortables(A,c[Integer(1):])))
      7 Q=p_lambda_int(B(A,c),la,list([c[Integer(0)]]+v for v in sortables(A,c[Integer(1):])))
----> 8 P.plot(fill=colors[Integer(0)])+Q.plot(fill=colors(Integer(1)))

TypeError: 'list' object is not callable
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: colors=rainbow(3)
....: for v in sortables(A,c[1:]):
....:     la=lam(A,v)
....:     P=p_lambda_int(B(A,c),la,list(sortables(A,c[1:])))
....:     Q=p_lambda_int(B(A,c),la,list([c[0]]+v for v in sortables(A,c[1:])))
....:     P.plot(fill=colors[0])+Q.plot(fill=colors[1])
....: 
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['A',3])
....: c=[0,1,2]
....: colors=rainbow(3)
....: for v in sortables(A,c[1:]):
....:     la=lam(A,v)
....:     P=p_lambda_int(B(A,c),la,list(sortables(A,c[1:])))
....:     Q=p_lambda_int(B(A,c),la,list([c[0]]+v for v in sortables(A,c[1:])))
....:     P.plot(fill=colors[0])+Q.plot(fill=colors[1])
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: colors=rainbow(3)
....: for v in sortables(A,c[1:]):
....:     la=lam(A,v)
....:     P=p_lambda_int(B(A,c),la,list(sortables(A,c[1:])))
....:     Q=p_lambda_int(B(A,c),la,list([c[0]]+v for v in sortables(A,c[1:])))
....:     P.plot(fill=colors[0])+Q.plot(fill=colors[1])
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: colors=rainbow(3)
....: for v in sortables(A,c[1:]):
....:     la=lam(A,v)
....:     P=p_lambda_int(B(A,c),la,list(sortables(A,c[1:])))
....:     Q=p_lambda_int(B(A,c),la,list([c[0]]+v for v in sortables(A,c[1:])))
....:     P.plot(fill=colors[0])+Q.plot(fill=colors[1])
....: 
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: la=lam(A,[])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: for v in sortables(A,c):
....:     P=p_lambda_faster(B(A,c),la,v)
....:     plots=plots+[P.plot(fill=colors[num])]
....:     num+=1
....: sum(plots)
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: la=lam(A,[])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: for v in sortables(A,c):
....:     P=p_lambda_faster(B(A,c),la,v).translation((1,1,1))
....:     plots=plots+[P.plot(fill=colors[num])]
....:     num+=1
....: sum(plots)
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: la=lam(A,[])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: for v in sortables(A,c):
....:     P=p_lambda_faster(B(A,c),la,v).translation(num*(1,0,1))
....:     plots=plots+[P.plot(fill=colors[num])]
....:     num+=1
....: sum(plots)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In [1120], line 8
      6 plots=[point(la,size=Integer(50)).plot()]
      7 for v in sortables(A,c):
----> 8     P=p_lambda_faster(B(A,c),la,v).translation(num*(Integer(1),Integer(0),Integer(1)))
      9     plots=plots+[P.plot(fill=colors[num])]
     10     num+=Integer(1)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1494, in Polyhedron_base5.translation(self, displacement)
   1490 Vrep, Hrep, parent = self._translation_double_description(displacement)
   1492 pref_rep = 'Vrep' if self.n_vertices() + self.n_rays() <= self.n_inequalities() else 'Hrep'
-> 1494 return parent.element_class(parent, Vrep, Hrep,
   1495                             Vrep_minimal=True, Hrep_minimal=True, pref_rep=pref_rep)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:179, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    177 elif Hrep is not None:
    178     ieqs, eqns = Hrep
--> 179     self._init_from_Hrepresentation(ieqs, eqns, **kwds)
    180 else:
    181     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:129, in Polyhedron_ppl._init_from_Hrepresentation(self, ieqs, eqns, minimize, verbose)
    106 def _init_from_Hrepresentation(self, ieqs, eqns, minimize=True, verbose=False):
    107     """
    108     Construct polyhedron from H-representation data.
    109 
   (...)
    127         sage: Polyhedron_ppl._init_from_Hrepresentation(p, [], [])
    128     """
--> 129     cs = self._convert_constraints_to_ppl(ieqs, eqns)
    130     if cs.empty():
    131         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'universe')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:533, in Polyhedron_ppl._convert_constraints_to_ppl(ieqs, eqns)
    531 if ieqs is None:
    532     ieqs = []
--> 533 for ieq in ieqs:
    534     cs.insert(Polyhedron_ppl._convert_constraint_to_ppl(ieq, INEQUALITY))
    535 if eqns is None:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1535, in <genexpr>(.0)
   1532     y[0] -= x.A()*displacement
   1533     return y
-> 1535 new_ieqs = (get_new(x) for x in self.inequality_generator())
   1536 new_eqns = (get_new(x) for x in self.equation_generator())
   1537 return [new_vertices, new_rays, new_lines], [new_ieqs, new_eqns], parent

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1532, in Polyhedron_base5._translation_double_description.<locals>.get_new(x)
   1530 def get_new(x):
   1531     y = x.vector().change_ring(parent.base_ring())
-> 1532     y[0] -= x.A()*displacement
   1533     return y

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:3685, in sage.structure.element.Vector.__mul__ (build/cythonized/sage/structure/element.c:33153)()
   3683     if have_same_parent(left, right):
   3684         return (<Vector>left)._dot_product_(<Vector>right)
-> 3685     return coercion_model.bin_op(left, right, mul)
   3686 
   3687 cpdef _dot_product_(Vector left, Vector right) noexcept:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1276, in sage.structure.coerce.CoercionModel.bin_op (build/cythonized/sage/structure/coerce.c:16830)()
   1274     # We should really include the underlying error.
   1275     # This causes so much headache.
-> 1276     raise bin_op_exception(op, x, y)
   1277 
   1278 cpdef canonical_coercion(self, x, y) noexcept:

TypeError: unsupported operand parent(s) for *: 'Vector space of dimension 3 over Rational Field' and 'Ambient free module of rank 0 over the principal ideal domain Integer Ring'
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: la=lam(A,[])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: for v in sortables(A,c):
....:     P=p_lambda_faster(B(A,c),la,v).translate(num*(1,0,1))
....:     plots=plots+[P.plot(fill=colors[num])]
....:     num+=1
....: sum(plots)
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
Cell In [1121], line 8
      6 plots=[point(la,size=Integer(50)).plot()]
      7 for v in sortables(A,c):
----> 8     P=p_lambda_faster(B(A,c),la,v).translate(num*(Integer(1),Integer(0),Integer(1)))
      9     plots=plots+[P.plot(fill=colors[num])]
     10     num+=Integer(1)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:489, in sage.structure.element.Element.__getattr__ (build/cythonized/sage/structure/element.c:11576)()
    487         AttributeError: 'LeftZeroSemigroup_with_category.element_class' object has no attribute 'blah_blah'...
    488     """
--> 489     return self.getattr_from_category(name)
    490 
    491 cdef getattr_from_category(self, name) noexcept:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:502, in sage.structure.element.Element.getattr_from_category (build/cythonized/sage/structure/element.c:11686)()
    500     else:
    501         cls = P._abstract_element_class
--> 502     return getattr_from_other_class(self, cls, name)
    503 
    504 def __dir__(self):

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/cpython/getattr.pyx:357, in sage.cpython.getattr.getattr_from_other_class (build/cythonized/sage/cpython/getattr.c:4357)()
    355     dummy_error_message.cls = type(self)
    356     dummy_error_message.name = name
--> 357     raise AttributeError(dummy_error_message)
    358 cdef PyObject* attr = instance_getattr(cls, name)
    359 if attr is NULL:

AttributeError: 'Polyhedra_QQ_ppl_with_category.element_class' object has no attribute 'translate'
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: la=lam(A,[])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: for v in sortables(A,c):
....:     P=p_lambda_faster(B(A,c),la,v).translation(num*(1,0,1))
....:     plots=plots+[P.plot(fill=colors[num])]
....:     num+=1
....: sum(plots)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In [1122], line 8
      6 plots=[point(la,size=Integer(50)).plot()]
      7 for v in sortables(A,c):
----> 8     P=p_lambda_faster(B(A,c),la,v).translation(num*(Integer(1),Integer(0),Integer(1)))
      9     plots=plots+[P.plot(fill=colors[num])]
     10     num+=Integer(1)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1494, in Polyhedron_base5.translation(self, displacement)
   1490 Vrep, Hrep, parent = self._translation_double_description(displacement)
   1492 pref_rep = 'Vrep' if self.n_vertices() + self.n_rays() <= self.n_inequalities() else 'Hrep'
-> 1494 return parent.element_class(parent, Vrep, Hrep,
   1495                             Vrep_minimal=True, Hrep_minimal=True, pref_rep=pref_rep)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:179, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    177 elif Hrep is not None:
    178     ieqs, eqns = Hrep
--> 179     self._init_from_Hrepresentation(ieqs, eqns, **kwds)
    180 else:
    181     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:129, in Polyhedron_ppl._init_from_Hrepresentation(self, ieqs, eqns, minimize, verbose)
    106 def _init_from_Hrepresentation(self, ieqs, eqns, minimize=True, verbose=False):
    107     """
    108     Construct polyhedron from H-representation data.
    109 
   (...)
    127         sage: Polyhedron_ppl._init_from_Hrepresentation(p, [], [])
    128     """
--> 129     cs = self._convert_constraints_to_ppl(ieqs, eqns)
    130     if cs.empty():
    131         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'universe')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:533, in Polyhedron_ppl._convert_constraints_to_ppl(ieqs, eqns)
    531 if ieqs is None:
    532     ieqs = []
--> 533 for ieq in ieqs:
    534     cs.insert(Polyhedron_ppl._convert_constraint_to_ppl(ieq, INEQUALITY))
    535 if eqns is None:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1535, in <genexpr>(.0)
   1532     y[0] -= x.A()*displacement
   1533     return y
-> 1535 new_ieqs = (get_new(x) for x in self.inequality_generator())
   1536 new_eqns = (get_new(x) for x in self.equation_generator())
   1537 return [new_vertices, new_rays, new_lines], [new_ieqs, new_eqns], parent

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1532, in Polyhedron_base5._translation_double_description.<locals>.get_new(x)
   1530 def get_new(x):
   1531     y = x.vector().change_ring(parent.base_ring())
-> 1532     y[0] -= x.A()*displacement
   1533     return y

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:3685, in sage.structure.element.Vector.__mul__ (build/cythonized/sage/structure/element.c:33153)()
   3683     if have_same_parent(left, right):
   3684         return (<Vector>left)._dot_product_(<Vector>right)
-> 3685     return coercion_model.bin_op(left, right, mul)
   3686 
   3687 cpdef _dot_product_(Vector left, Vector right) noexcept:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1276, in sage.structure.coerce.CoercionModel.bin_op (build/cythonized/sage/structure/coerce.c:16830)()
   1274     # We should really include the underlying error.
   1275     # This causes so much headache.
-> 1276     raise bin_op_exception(op, x, y)
   1277 
   1278 cpdef canonical_coercion(self, x, y) noexcept:

TypeError: unsupported operand parent(s) for *: 'Vector space of dimension 3 over Rational Field' and 'Ambient free module of rank 0 over the principal ideal domain Integer Ring'
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: la=lam(A,[])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: for v in sortables(A,c):
....:     P=p_lambda_faster(B(A,c),la,v).translation(vector((num,0,num)))
....:     plots=plots+[P.plot(fill=colors[num])]
....:     num+=1
....: sum(plots)
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: la=lam(A,[])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: for v in sortables(A,c):
....:     t=(num/1000)*vector(1,0,1)
....:     P=p_lambda_faster(B(A,c),la,v).translation(t)
....:     plots=plots+[P.plot(fill=colors[num])]
....:     num+=1
....: sum(plots)
....: 
....: 
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In [1124], line 8
      6 plots=[point(la,size=Integer(50)).plot()]
      7 for v in sortables(A,c):
----> 8     t=(num/Integer(1000))*vector(Integer(1),Integer(0),Integer(1))
      9     P=p_lambda_faster(B(A,c),la,v).translation(t)
     10     plots=plots+[P.plot(fill=colors[num])]

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/modules/free_module_element.pyx:534, in sage.modules.free_module_element.vector (build/cythonized/sage/modules/free_module_element.c:10098)()
    532         raise TypeError(msg.format(arg0))
    533 else:
--> 534     if not isinstance(arg2, dict) and len(arg2) != degree:
    535         raise ValueError("incompatible degrees in vector constructor")
    536     arg1 = arg2

TypeError: object of type 'sage.rings.integer.Integer' has no len()
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: la=lam(A,[])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: for v in sortables(A,c):
....:     sc=1/1000
....:     t=vector(num*sc,0,num*sc)
....:     P=p_lambda_faster(B(A,c),la,v).translation(t)
....:     plots=plots+[P.plot(fill=colors[num])]
....:     num+=1
....: sum(plots)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In [1125], line 9
      7 for v in sortables(A,c):
      8     sc=Integer(1)/Integer(1000)
----> 9     t=vector(num*sc,Integer(0),num*sc)
     10     P=p_lambda_faster(B(A,c),la,v).translation(t)
     11     plots=plots+[P.plot(fill=colors[num])]

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/modules/free_module_element.pyx:534, in sage.modules.free_module_element.vector (build/cythonized/sage/modules/free_module_element.c:10098)()
    532         raise TypeError(msg.format(arg0))
    533 else:
--> 534     if not isinstance(arg2, dict) and len(arg2) != degree:
    535         raise ValueError("incompatible degrees in vector constructor")
    536     arg1 = arg2

TypeError: object of type 'sage.rings.rational.Rational' has no len()
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: la=lam(A,[])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: for v in sortables(A,c):
....:     sc=1/1000
....:     t=vector(num/1000,0,num/1000)
....:     P=p_lambda_faster(B(A,c),la,v).translation(t)
....:     plots=plots+[P.plot(fill=colors[num])]
....:     num+=1
....: sum(plots)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In [1126], line 9
      7 for v in sortables(A,c):
      8     sc=Integer(1)/Integer(1000)
----> 9     t=vector(num/Integer(1000),Integer(0),num/Integer(1000))
     10     P=p_lambda_faster(B(A,c),la,v).translation(t)
     11     plots=plots+[P.plot(fill=colors[num])]

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/modules/free_module_element.pyx:534, in sage.modules.free_module_element.vector (build/cythonized/sage/modules/free_module_element.c:10098)()
    532         raise TypeError(msg.format(arg0))
    533 else:
--> 534     if not isinstance(arg2, dict) and len(arg2) != degree:
    535         raise ValueError("incompatible degrees in vector constructor")
    536     arg1 = arg2

TypeError: object of type 'sage.rings.rational.Rational' has no len()
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: la=lam(A,[])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: for v in sortables(A,c):
....:     t=vector(num,0,num)
....:     P=p_lambda_faster(B(A,c),la,v).translation(t)
....:     plots=plots+[P.plot(fill=colors[num])]
....:     num+=1
....: sum(plots)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In [1127], line 8
      6 plots=[point(la,size=Integer(50)).plot()]
      7 for v in sortables(A,c):
----> 8     t=vector(num,Integer(0),num)
      9     P=p_lambda_faster(B(A,c),la,v).translation(t)
     10     plots=plots+[P.plot(fill=colors[num])]

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/modules/free_module_element.pyx:534, in sage.modules.free_module_element.vector (build/cythonized/sage/modules/free_module_element.c:10098)()
    532         raise TypeError(msg.format(arg0))
    533 else:
--> 534     if not isinstance(arg2, dict) and len(arg2) != degree:
    535         raise ValueError("incompatible degrees in vector constructor")
    536     arg1 = arg2

TypeError: object of type 'sage.rings.integer.Integer' has no len()
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: la=lam(A,[])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: for v in sortables(A,c):
....:     t=vector(num,0,num)
....:     P=p_lambda_faster(B(A,c),la,v).translation(vector(num,0,num))
....:     plots=plots+[P.plot(fill=colors[num])]
....:     num+=1
....: sum(plots)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In [1128], line 8
      6 plots=[point(la,size=Integer(50)).plot()]
      7 for v in sortables(A,c):
----> 8     t=vector(num,Integer(0),num)
      9     P=p_lambda_faster(B(A,c),la,v).translation(vector(num,Integer(0),num))
     10     plots=plots+[P.plot(fill=colors[num])]

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/modules/free_module_element.pyx:534, in sage.modules.free_module_element.vector (build/cythonized/sage/modules/free_module_element.c:10098)()
    532         raise TypeError(msg.format(arg0))
    533 else:
--> 534     if not isinstance(arg2, dict) and len(arg2) != degree:
    535         raise ValueError("incompatible degrees in vector constructor")
    536     arg1 = arg2

TypeError: object of type 'sage.rings.integer.Integer' has no len()
sage: 
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: la=lam(A,[])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: for v in sortables(A,c):
....:     P=p_lambda_faster(B(A,c),la,v).translation(vector(num,0,num))
....:     plots=plots+[P.plot(fill=colors[num])]
....:     num+=1
....: sum(plots)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In [1129], line 8
      6 plots=[point(la,size=Integer(50)).plot()]
      7 for v in sortables(A,c):
----> 8     P=p_lambda_faster(B(A,c),la,v).translation(vector(num,Integer(0),num))
      9     plots=plots+[P.plot(fill=colors[num])]
     10     num+=Integer(1)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/modules/free_module_element.pyx:534, in sage.modules.free_module_element.vector (build/cythonized/sage/modules/free_module_element.c:10098)()
    532         raise TypeError(msg.format(arg0))
    533 else:
--> 534     if not isinstance(arg2, dict) and len(arg2) != degree:
    535         raise ValueError("incompatible degrees in vector constructor")
    536     arg1 = arg2

TypeError: object of type 'sage.rings.integer.Integer' has no len()
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: la=lam(A,[])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: for v in sortables(A,c):
....:     sc=1/1000
....:     t=vector((num/1000,0,num/1000))
....:     P=p_lambda_faster(B(A,c),la,v).translation(t)
....:     plots=plots+[P.plot(fill=colors[num])]
....:     num+=1
....: sum(plots)
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: la=lam(A,[])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: for v in sortables(A,c):
....:     sc=1/1000
....:     t=vector((num*sc,0,num*sc))
....:     P=p_lambda_faster(B(A,c),la,v).translation(t)
....:     plots=plots+[P.plot(fill=colors[num])]
....:     num+=1
....: sum(plots)
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: la=lam(A,[])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: for v in sortables(A,c):
....:     sc=1/100
....:     t=vector((num*sc,0,num*sc))
....:     P=p_lambda_faster(B(A,c),la,v).translation(t)
....:     plots=plots+[P.plot(fill=colors[num])]
....:     num+=1
....: sum(plots)
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: la=lam(A,[])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: for v in sortables(A,c):
....:     sc=1/50
....:     t=vector((num*sc,0,num*sc))
....:     P=p_lambda_faster(B(A,c),la,v).translation(t)
....:     plots=plots+[P.plot(fill=colors[num])]
....:     num+=1
....: sum(plots)
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: colors=rainbow(3)
....: for v in sortables(A,c[1:]):
....:     la=lam(A,v)
....:     P=p_lambda_int(B(A,c),la,list(sortables(A,c[1:])))
....:     Q=p_lambda_int(B(A,c),la,list([c[0]]+v for v in sortables(A,c[1:])))
....:     P.plot(fill=colors[0])+Q.plot(fill=colors[1])
....: 
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: colors=rainbow(3)
....: for v in sortables(A,c[1:]):
....:     la=lam(A,v)
....:     P=p_lambda_int(B(A,c),la,list(sortables(A,c[1:])))
....:     Q=p_lambda_int(B(A,c),la,list([c[0]]+v for v in sortables(A,c[1:])))
....:     P.plot(fill=colors[0])+Q.plot(fill=colors[1])
....: 
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: colors=rainbow(3)
....: for v in sortables(A,c[1:]):
....:     la=lam(A,v)
....:     P=p_lambda_int(B(A,c),la,list(sortables(A,c[1:])))
....:     Q=p_lambda_int(B(A,c),la,list([c[0]]+v for v in sortables(A,c[1:])))
....:     P.plot(fill=colors[0])+Q.plot(fill=colors[1])
....: 
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: la=lam(A,[])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: for v in sortables(A,c):
....:     sc=1/50
....:     t=vector((num*sc,0,num*sc))
....:     P=p_lambda_faster(B(A,c),la,v).translation(t)
....:     plots=plots+[P.plot(fill=colors[num])]
....:     num+=1
....: sum(plots)
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: la=lam(A,[])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: for v in sortables(A,c):
....:     sc=1/50
....:     t=vector((num*sc,0,num*sc))
....:     P=p_lambda_faster(B(A,c),la,v).translation(t)
....:     plots=plots+[P.plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....: sum(plots)
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: la=lam(A,[])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: for v in sortables(A,c[1:]):
....:     sc=1/50
....:     t=vector((num*sc,0,num*sc))
....:     P=p_lambda_faster(B(A,c),la,v).translation(t)
....:     plots=plots+[P.plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....: sum(plots)
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: la=lam(A,[1])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: for v in sortables(A,c[1:]):
....:     sc=1/50
....:     t=vector((num*sc,0,num*sc))
....:     P=p_lambda_faster(B(A,c),la,v).translation(t)
....:     plots=plots+[P.plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....: sum(plots)
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: la=lam(A,[1])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: for v in sortables(A,c[1:]):
....:     sc=1/50
....:     t=vector((num*sc,0,num*sc))
....:     P=p_lambda_faster(B(A,c),la,v).translation(t)
....:     plots=plots+[P.plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....: sum(plots)
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: la=lam(A,[1])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: for v in sortables(A,c[1:]):
....:     sc=1/100
....:     t=vector((num*sc,0,num*sc))
....:     P=p_lambda_faster(B(A,c),la,v).translation(t)
....:     plots=plots+[P.plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....: sum(plots)
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: la=lam(A,[1])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: for v in sortables(A,c[1:]):
....:     sc=1/100
....:     t=vector((num*sc,0,num*sc))
....:     P=p_lambda_faster(B(A,c),la,v).translation(t)
....:     plots=plots+[P.plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....: sum(plots)
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: la=lam(A,[1,2])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: for v in sortables(A,c[1:]):
....:     sc=1/100
....:     t=vector((num*sc,0,num*sc))
....:     P=p_lambda_faster(B(A,c),la,v).translation(t)
....:     plots=plots+[P.plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....: sum(plots)
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: la=lam(A,[1,2])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: for sec in [[],[0,1,2],[0,1,2,0,1,2]]:
....:     sc=1/100
....:     t=vector((num*sc,0,num*sc))
....:     P=p_lambda_faster(B(A,c),la,seq).translation(t)
....:     plots=plots+[P.plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....: sum(plots)
---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
Cell In [1145], line 10
      8 sc=Integer(1)/Integer(100)
      9 t=vector((num*sc,Integer(0),num*sc))
---> 10 P=p_lambda_faster(B(A,c),la,seq).translation(t)
     11 plots=plots+[P.plot(fill=colors[num],alpha=RealNumber('0.5'))]
     12 num+=Integer(1)

File ~/git/affine_dominance/software/domination4.py:139, in p_lambda_faster(B, la, seq)
    137     B = block_matrix([[B,matrix(la).transpose()]])
    138     for k in seq:
--> 139         B.mutate(k)
    140     B, la  = B[:,:-1], B[:,-1] 
    141 # changed this to allow for zero columns
    142 #    P = Polyhedron(rays=B.columns(),base_ring=QQ).translation(la)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/matrix0.pyx:3643, in sage.matrix.matrix0.Matrix.mutate (build/cythonized/sage/matrix/matrix0.c:33715)()
   3641 
   3642         if k < 0 or k >= self._nrows or k >= self._ncols:
-> 3643             raise IndexError("The mutation index is invalid")
   3644 
   3645         pairs = self.nonzero_positions()

IndexError: The mutation index is invalid
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: la=lam(A,[1,2])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: for sec in sortables(A,c):
....:     sc=1/100
....:     t=vector((num*sc,0,num*sc))
....:     P=p_lambda_faster(B(A,c),la,seq).translation(t)
....:     plots=plots+[P.plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....: sum(plots)
---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
Cell In [1146], line 10
      8 sc=Integer(1)/Integer(100)
      9 t=vector((num*sc,Integer(0),num*sc))
---> 10 P=p_lambda_faster(B(A,c),la,seq).translation(t)
     11 plots=plots+[P.plot(fill=colors[num],alpha=RealNumber('0.5'))]
     12 num+=Integer(1)

File ~/git/affine_dominance/software/domination4.py:139, in p_lambda_faster(B, la, seq)
    137     B = block_matrix([[B,matrix(la).transpose()]])
    138     for k in seq:
--> 139         B.mutate(k)
    140     B, la  = B[:,:-1], B[:,-1] 
    141 # changed this to allow for zero columns
    142 #    P = Polyhedron(rays=B.columns(),base_ring=QQ).translation(la)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/matrix0.pyx:3643, in sage.matrix.matrix0.Matrix.mutate (build/cythonized/sage/matrix/matrix0.c:33715)()
   3641 
   3642         if k < 0 or k >= self._nrows or k >= self._ncols:
-> 3643             raise IndexError("The mutation index is invalid")
   3644 
   3645         pairs = self.nonzero_positions()

IndexError: The mutation index is invalid
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: la=lam(A,[1,2])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: for seq in [[],[0,1,2],[0,1,2,0,1,2]]:
....:     sc=1/100
....:     t=vector((num*sc,0,num*sc))
....:     P=p_lambda_faster(B(A,c),la,seq).translation(t)
....:     plots=plots+[P.plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....: sum(plots)
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: la=lam(A,[1,2])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: for seq in [[0,1,2],[0,1,2,0,1,2]]:
....:     sc=1/100
....:     t=vector((num*sc,0,num*sc))
....:     P=p_lambda_faster(B(A,c),la,seq).translation(t)
....:     plots=plots+[P.plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....: sum(plots)
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: la=lam(A,[1,2])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: Q=p_lambda_faster(B(A,c),la,seq)
....: for seq in [[],[0,1,2],[0,1,2,0,1,2]]:
....:     sc=1/100
....:     t=vector((num*sc,0,num*sc))
....:     P=p_lambda_faster(B(A,c),la,seq)
....:     plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....:     Q=Q.intersection(P)
....: print(Q)
....: sum(plots)
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: la=lam(A,[1,2])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: Q=p_lambda_faster(B(A,c),la,seq)
....: for seq in [[],[0,1,2],[0,1,2,0,1,2],[0,1,2,0,1,2,0,1,2]]:
....:     sc=1/100
....:     t=vector((num*sc,0,num*sc))
....:     P=p_lambda_faster(B(A,c),la,seq)
....:     plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....:     Q=Q.intersection(P)
....: print(Q)
....: sum(plots)
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: la=lam(A,[1,2])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: Q=p_lambda_faster(B(A,c),la,seq)
....: for seq in [[0,1,2,0,1,2,0,1,2]]:
....:     sc=1/100
....:     t=vector((num*sc,0,num*sc))
....:     P=p_lambda_faster(B(A,c),la,seq)
....:     plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....:     Q=Q.intersection(P)
....: print(Q)
....: sum(plots)
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: la=lam(A,[1,2])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: Q=p_lambda_faster(B(A,c),la,seq)
....: for seq in [[],[0,1,2],[0,1,2,0,1,2],[0,1,2,0,1,2,0,1,2]]:
....:     sc=1/100
....:     t=vector((num*sc,0,num*sc))
....:     P=p_lambda_faster(B(A,c),la,seq)
....:     plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....:     Q=Q.intersection(P)
....: print(Q)
....: sum(plots)
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: la=lam(A,[1,2])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: Q=p_lambda_faster(B(A,c),la,seq)
....: for seq in [[0,1,2],[0,1,2,0,1,2],[0,1,2,0,1,2,0,1,2]]:
....:     sc=1/100
....:     t=vector((num*sc,0,num*sc))
....:     P=p_lambda_faster(B(A,c),la,seq)
....:     plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....:     Q=Q.intersection(P)
....: print(Q)
....: sum(plots)
A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: la=lam(A,[1,2])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: Q=p_lambda_faster(B(A,c),la,seq)
....: for seq in [[],[0,1,2],[0,1,2,0,1,2],[0,1,2,0,1,2,0,1,2]]:
....:     sc=1/100
....:     t=vector((num*sc,0,num*sc))
....:     P=p_lambda_faster(B(A,c),la,seq)
....:     plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....:     Q=Q.intersection(P)
....: print(Q)
....: sum(plots)
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: la=lam(A,[1,2])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: Q=p_lambda_faster(B(A,c),la,seq)
....: for seq in [[],[0,1,2],[0,1,2,0,1,2],[0,1,2,0,1,2,0,1,2]]:
....:     sc=1/100
....:     t=vector((num*sc,0,num*sc))
....:     P=p_lambda_faster(B(A,c),la,seq)
....:     plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....:     Q=Q.intersection(P)
....: print(Q)
....: sum(plots)
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: la=lam(A,[1,2])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: Q=p_lambda_faster(B(A,c),la,seq)
....: for seq in [[],[0,1,2],[0,1,2,0,1,2],[0,1,2,0,1,2,0,1,2],[0,1,2,0,1,2,0,1,
....: 2,0,1,2]]:
....:     sc=1/100
....:     t=vector((num*sc,0,num*sc))
....:     P=p_lambda_faster(B(A,c),la,seq)
....:     plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....:     Q=Q.intersection(P)
....: print(Q)
....: sum(plots)
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: la=lam(A,[1,2])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: Q=p_lambda_faster(B(A,c),la,seq)
....: for seq in [[],[0,1,2],[0,1,2,0,1,2],[0,1,2,0,1,2,0,1,2]]:
....:     sc=1/100
....:     t=vector((num*sc,0,num*sc))
....:     P=p_lambda_faster(B(A,c),la,seq)
....:     plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....:     Q=Q.intersection(P)
....: print(Q)
....: sum(plots)
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: la=lam(A,[])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: Q=p_lambda_faster(B(A,c),la,seq)
....: for seq in [[],[0,1,2],[0,1,2,0,1,2],[0,1,2,0,1,2,0,1,2]]:
....:     sc=1/100
....:     t=vector((num*sc,0,num*sc))
....:     P=p_lambda_faster(B(A,c),la,seq)
....:     plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....:     Q=Q.intersection(P)
....: print(Q)
....: sum(plots)
A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: la=lam(A,[])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: Q=p_lambda_faster(B(A,c),la,seq)
....: for seq in [[],[0,1,2],[0,1,2,0,1,2],[0,1,2,0,1,2,0,1,2],[0,1,2,0,1,2,0,1,
....: 2]:
....:     sc=1/100
....:     t=vector((num*sc,0,num*sc))
....:     P=p_lambda_faster(B(A,c),la,seq)
....:     plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....:     Q=Q.intersection(P)
....: print(Q)
....: sum(plots)
  Cell In [1159], line 8
    for seq in [[],[Integer(0),Integer(1),Integer(2)],[Integer(0),Integer(1),Integer(2),Integer(0),Integer(1),Integer(2)],[Integer(0),Integer(1),Integer(2),Integer(0),Integer(1),Integer(2),Integer(0),Integer(1),Integer(2)],[Integer(0),Integer(1),Integer(2),Integer(0),Integer(1),Integer(2),Integer(0),Integer(1),Integer(2)]:
                                                                                                                                                                                                                                                                                                                                   ^
SyntaxError: invalid syntax

sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: la=lam(A,[])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: Q=p_lambda_faster(B(A,c),la,seq)
....: for seq in [[],[0,1,2],[0,1,2,0,1,2],[0,1,2,0,1,2,0,1,2],[0,1,2,0,1,2,0,1,
....: 2]]:
....:     sc=1/100
....:     t=vector((num*sc,0,num*sc))
....:     P=p_lambda_faster(B(A,c),la,seq)
....:     plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....:     Q=Q.intersection(P)
....: print(Q)
....: sum(plots)
A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[1,0,2]
....: num=0
....: la=lam(A,[])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: Q=p_lambda_faster(B(A,c),la,seq)
....: for seq in [[],[0,1,2],[0,1,2,0,1,2],[0,1,2,0,1,2,0,1,2],[0,1,2,0,1,2,0,1,
....: 2]]:
....:     sc=1/100
....:     t=vector((num*sc,0,num*sc))
....:     P=p_lambda_faster(B(A,c),la,seq)
....:     plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....:     Q=Q.intersection(P)
....: print(Q)
....: sum(plots)
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[1,0,2]
....: num=0
....: la=lam(A,[])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: Q=p_lambda_faster(B(A,c),la,seq)
....: for seq in [[],[0,1,2],[0,1,2,0,1,2],[0,1,2,0,1,2,0,1,2]]:
....:     sc=1/100
....:     t=vector((num*sc,0,num*sc))
....:     P=p_lambda_faster(B(A,c),la,seq)
....:     plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....:     Q=Q.intersection(P)
....: print(Q)
....: sum(plots)
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[1,0,2]
....: num=0
....: la=lam(A,[])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: Q=p_lambda_faster(B(A,c),la,seq)
....: for seq in list(c*i for i in range(A.nrows()+1))):
....:     sc=1/100
....:     t=vector((num*sc,0,num*sc))
....:     P=p_lambda_faster(B(A,c),la,seq)
....:     plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....:     Q=Q.intersection(P)
....: print(Q)
....: sum(plots)
  Cell In [1163], line 8
    for seq in list(c*i for i in range(A.nrows()+Integer(1)))):
                                                             ^
SyntaxError: unmatched ')'

sage: A=CartanMatrix(['C',3])
....: c=[1,0,2]
....: num=0
....: la=lam(A,[])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: Q=p_lambda_faster(B(A,c),la,seq)
....: for seq in list(c*i for i in range(A.nrows()+1)):
....:     sc=1/100
....:     t=vector((num*sc,0,num*sc))
....:     P=p_lambda_faster(B(A,c),la,seq)
....:     plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....:     Q=Q.intersection(P)
....: print(Q)
....: sum(plots)
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[1,0,2]
....: num=0
....: la=lam(A,[])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: Q=p_lambda_faster(B(A,c),la,seq)
....: for seq in list(c*i for i in range(A.nrows()+1)):
....:     sc=1/100
....:     t=vector((num*sc,0,num*sc))
....:     P=p_lambda_faster(B(A,c),la,seq)
....:     plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....:     Q=Q.intersection(P)
....: print(Q)
....: #sum(plots)
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['C',3])
....: c=[1,0,2]
....: num=0
....: la=lam(A,[0])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: Q=p_lambda_faster(B(A,c),la,seq)
....: for seq in list(c*i for i in range(A.nrows()+0)):
....:     sc=1/100
....:     t=vector((num*sc,0,num*sc))
....:     P=p_lambda_faster(B(A,c),la,seq)
....:     plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....:     Q=Q.intersection(P)
....: print(Q)
....: #sum(plots)
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['C',3])
....: c=[1,0,2]
....: num=0
....: la=lam(A,[])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: Q=p_lambda_faster(B(A,c),la,seq)
....: for seq in list(c*i for i in range(A.nrows()+0)):
....:     sc=1/100
....:     t=vector((num*sc,0,num*sc))
....:     P=p_lambda_faster(B(A,c),la,seq)
....:     plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....:     Q=Q.intersection(P)
....: print(Q)
....: #sum(plots)
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: la=lam(A,[])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: Q=p_lambda_faster(B(A,c),la,seq)
....: for seq in list(c*i for i in range(A.nrows()+0)):
....:     sc=1/100
....:     t=vector((num*sc,0,num*sc))
....:     P=p_lambda_faster(B(A,c),la,seq)
....:     plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....:     Q=Q.intersection(P)
....: print(Q)
....: #sum(plots)
A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: la=lam(A,[])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: Q=p_lambda_faster(B(A,c),la,seq)
....: for seq in list(c*i for i in range(A.nrows()+1)):
....:     sc=1/100
....:     t=vector((num*sc,0,num*sc))
....:     P=p_lambda_faster(B(A,c),la,seq)
....:     plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....:     Q=Q.intersection(P)
....: print(Q)
....: #sum(plots)
A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: num=0
....: la=lam(A,[])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: Q=p_lambda_faster(B(A,c),la,seq)
....: for seq in list(c*i for i in range(A.nrows()+1)):
....:     sc=1/100
....:     t=vector((num*sc,0,num*sc))
....:     P=p_lambda_faster(B(A,c),la,seq)
....:     plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....:     Q=Q.intersection(P)
....: print(Q)
....: #sum(plots)
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: num=0
....: la=lam(A,[2])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: Q=p_lambda_faster(B(A,c),la,seq)
....: for seq in list(c*i for i in range(A.nrows()+1)):
....:     sc=1/100
....:     t=vector((num*sc,0,num*sc))
....:     P=p_lambda_faster(B(A,c),la,seq)
....:     plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....:     Q=Q.intersection(P)
....: print(Q)
....: #sum(plots)
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: num=0
....: la=lam(A,[2,1])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: Q=p_lambda_faster(B(A,c),la,seq)
....: for seq in list(c*i for i in range(A.nrows()+1)):
....:     sc=1/100
....:     t=vector((num*sc,0,num*sc))
....:     P=p_lambda_faster(B(A,c),la,seq)
....:     plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....:     Q=Q.intersection(P)
....: print(Q)
....: #sum(plots)
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: num=0
....: la=lam(A,[2,1,2])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: Q=p_lambda_faster(B(A,c),la,seq)
....: for seq in list(c*i for i in range(A.nrows()+1)):
....:     sc=1/100
....:     t=vector((num*sc,0,num*sc))
....:     P=p_lambda_faster(B(A,c),la,seq)
....:     plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....:     Q=Q.intersection(P)
....: print(Q)
....: #sum(plots)
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: num=0
....: la=lam(A,[2,1,2,1])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: Q=p_lambda_faster(B(A,c),la,seq)
....: for seq in list(c*i for i in range(A.nrows()+1)):
....:     sc=1/100
....:     t=vector((num*sc,0,num*sc))
....:     P=p_lambda_faster(B(A,c),la,seq)
....:     plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....:     Q=Q.intersection(P)
....: print(Q)
....: #sum(plots)
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: num=0
....: la=lam(A,[1])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: Q=p_lambda_faster(B(A,c),la,seq)
....: for seq in list(c*i for i in range(A.nrows()+1)):
....:     sc=1/100
....:     t=vector((num*sc,0,num*sc))
....:     P=p_lambda_faster(B(A,c),la,seq)
....:     plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....:     Q=Q.intersection(P)
....: print(Q)
....: #sum(plots)
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: num=0
....: la=lam(A,[1])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: Q=p_lambda_faster(B(A,c),la,seq)
....: for seq in list(c*i for i in range(A.nrows()+0)):
....:     sc=1/100
....:     t=vector((num*sc,0,num*sc))
....:     P=p_lambda_faster(B(A,c),la,seq)
....:     plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....:     Q=Q.intersection(P)
....: print(Q)
....: #sum(plots)
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: num=0
....: la=lam(A,[])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: Q=p_lambda_faster(B(A,c),la,seq)
....: for seq in list(c*i for i in range(A.nrows()+0)):
....:     sc=1/100
....:     t=vector((num*sc,0,num*sc))
....:     P=p_lambda_faster(B(A,c),la,seq)
....:     plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....:     Q=Q.intersection(P)
....: print(Q)
....: #sum(plots)
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: num=0
....: la=lam(A,[2])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: Q=p_lambda_faster(B(A,c),la,seq)
....: for seq in list(c*i for i in range(A.nrows()+0)):
....:     sc=1/100
....:     t=vector((num*sc,0,num*sc))
....:     P=p_lambda_faster(B(A,c),la,seq)
....:     plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....:     Q=Q.intersection(P)
....: print(Q)
....: #sum(plots)
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: num=0
....: la=lam(A,[2,1])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: Q=p_lambda_faster(B(A,c),la,seq)
....: for seq in list(c*i for i in range(A.nrows()+0)):
....:     sc=1/100
....:     t=vector((num*sc,0,num*sc))
....:     P=p_lambda_faster(B(A,c),la,seq)
....:     plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....:     Q=Q.intersection(P)
....: print(Q)
....: #sum(plots)
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: num=0
....: la=lam(A,[2,1,2])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: Q=p_lambda_faster(B(A,c),la,seq)
....: for seq in list(c*i for i in range(A.nrows()+0)):
....:     sc=1/100
....:     t=vector((num*sc,0,num*sc))
....:     P=p_lambda_faster(B(A,c),la,seq)
....:     plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....:     Q=Q.intersection(P)
....: print(Q)
....: #sum(plots)
A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: num=0
....: la=lam(A,[2,1,2])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: Q=p_lambda_faster(B(A,c),la,seq)
....: for seq in list(c*i for i in range(A.nrows()+1)):
....:     sc=1/100
....:     t=vector((num*sc,0,num*sc))
....:     P=p_lambda_faster(B(A,c),la,seq)
....:     plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....:     Q=Q.intersection(P)
....: print(Q)
....: #sum(plots)
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: num=0
....: la=lam(A,[2,1,2,1])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: Q=p_lambda_faster(B(A,c),la,seq)
....: for seq in list(c*i for i in range(A.nrows()+1)):
....:     sc=1/100
....:     t=vector((num*sc,0,num*sc))
....:     P=p_lambda_faster(B(A,c),la,seq)
....:     plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....:     Q=Q.intersection(P)
....: print(Q)
....: #sum(plots)
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: num=0
....: la=lam(A,[])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: Q=p_lambda_faster(B(A,c),la,seq)
....: for seq in list(c*i for i in range(A.nrows()+1)):
....:     sc=1/100
....:     t=vector((num*sc,0,num*sc))
....:     P=p_lambda_faster(B(A,c),la,seq)
....:     plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....:     Q=Q.intersection(P)
....: print(Q)
....: sum(plots)
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
Launched html viewer for Graphics3d Object
sage: range(-1,4)
range(-1, 4)
sage: list(range(-1,4))
[-1, 0, 1, 2, 3]
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: num=0
....: la=lam(A,[])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: Q=p_lambda_faster(B(A,c),la,seq)
....: for seq in list(list(reversed(c))*i for i in range(A.nrows()+1)):
....:     sc=1/100
....:     t=vector((num*sc,0,num*sc))
....:     P=p_lambda_faster(B(A,c),la,seq)
....:     plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....:     Q=Q.intersection(P)
....: print(Q)
....: sum(plots)
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: num=0
....: la=lam(A,[2])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: Q=p_lambda_faster(B(A,c),la,seq)
....: for seq in list(list(reversed(c))*i for i in range(A.nrows()+1)):
....:     sc=1/100
....:     t=vector((num*sc,0,num*sc))
....:     P=p_lambda_faster(B(A,c),la,seq)
....:     plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....:     Q=Q.intersection(P)
....: print(Q)
....: sum(plots)
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: num=0
....: la=lam(A,[2])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: Q=p_lambda_faster(B(A,c),la,seq)
....: for seq in list(list(reversed(c))*i for i in [0,A.nrows()+1]):
....:     sc=1/100
....:     t=vector((num*sc,0,num*sc))
....:     P=p_lambda_faster(B(A,c),la,seq)
....:     plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....:     Q=Q.intersection(P)
....: print(Q)
....: sum(plots)
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: num=0
....: la=lam(A,[2])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: Q=p_lambda_faster(B(A,c),la,seq)
....: for seq in list(list(reversed(c))*i for i in [0,A.nrows()]):
....:     sc=1/100
....:     t=vector((num*sc,0,num*sc))
....:     P=p_lambda_faster(B(A,c),la,seq)
....:     plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....:     Q=Q.intersection(P)
....: print(Q)
....: sum(plots)
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: num=0
....: la=lam(A,[])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: Q=p_lambda_faster(B(A,c),la,seq)
....: for seq in list(list(reversed(c))*i for i in [0,A.nrows()]):
....:     sc=1/100
....:     t=vector((num*sc,0,num*sc))
....:     P=p_lambda_faster(B(A,c),la,seq)
....:     plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....:     Q=Q.intersection(P)
....: print(Q)
....: sum(plots)
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: num=0
....: la=lam(A,[])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: Q=p_lambda_faster(B(A,c),la,seq)
....: for seq in list(list(reversed(c))*i for i in [0,A.nrows()]):
....:     sc=1/100
....:     t=vector((num*sc,0,num*sc))
....:     P=p_lambda_faster(B(A,c),la,seq)
....:     plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....:     Q=Q.intersection(P)
....: print(Q)
....: #sum(plots)
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: num=0
....: la=lam(A,[2])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: Q=p_lambda_faster(B(A,c),la,seq)
....: for seq in list(list(reversed(c))*i for i in [0,A.nrows()]):
....:     sc=1/100
....:     t=vector((num*sc,0,num*sc))
....:     P=p_lambda_faster(B(A,c),la,seq)
....:     plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....:     Q=Q.intersection(P)
....: print(Q)
....: #sum(plots)
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: num=0
....: la=lam(A,[2,1])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: Q=p_lambda_faster(B(A,c),la,seq)
....: for seq in list(list(reversed(c))*i for i in [0,A.nrows()]):
....:     sc=1/100
....:     t=vector((num*sc,0,num*sc))
....:     P=p_lambda_faster(B(A,c),la,seq)
....:     plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....:     Q=Q.intersection(P)
....: print(Q)
....: #sum(plots)
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: num=0
....: la=lam(A,[2])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: Q=p_lambda_faster(B(A,c),la,seq)
....: for seq in list(list(reversed(c))*i for i in range(A.nrows()+1)):
....:     sc=1/100
....:     t=vector((num*sc,0,num*sc))
....:     P=p_lambda_faster(B(A,c),la,seq)
....:     plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....:     Q=Q.intersection(P)
....: print(Q)
....: #sum(plots)
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: num=0
....: la=lam(A,[])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: Q=p_lambda_faster(B(A,c),la,seq)
....: for seq in list(list(reversed(c))*i for i in range(A.nrows()+1)):
....:     sc=1/100
....:     t=vector((num*sc,0,num*sc))
....:     P=p_lambda_faster(B(A,c),la,seq)
....:     plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....:     Q=Q.intersection(P)
....: print(Q)
....: sum(plots)
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: num=0
....: la=lam(A,[2])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: Q=p_lambda_faster(B(A,c),la,seq)
....: for seq in list(list(reversed(c))*i for i in range(A.nrows()+1)):
....:     sc=1/100
....:     t=vector((num*sc,0,num*sc))
....:     P=p_lambda_faster(B(A,c),la,seq)
....:     plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....:     Q=Q.intersection(P)
....: print(Q)
....: sum(plots)
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: num=0
....: la=lam(A,[2,1])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: Q=p_lambda_faster(B(A,c),la,seq)
....: for seq in list(list(reversed(c))*i for i in range(A.nrows()+1)):
....:     sc=1/100
....:     t=vector((num*sc,0,num*sc))
....:     P=p_lambda_faster(B(A,c),la,seq)
....:     plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....:     Q=Q.intersection(P)
....: print(Q)
....: sum(plots)
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: num=0
....: la=lam(A,[2,1,2])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: Q=p_lambda_faster(B(A,c),la,seq)
....: for seq in list(list(reversed(c))*i for i in range(A.nrows()+1)):
....:     sc=1/100
....:     t=vector((num*sc,0,num*sc))
....:     P=p_lambda_faster(B(A,c),la,seq)
....:     plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....:     Q=Q.intersection(P)
....: print(Q)
....: sum(plots)
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: num=0
....: la=lam(A,[2,1,2,1])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: Q=p_lambda_faster(B(A,c),la,seq)
....: for seq in list(list(reversed(c))*i for i in range(A.nrows()+1)):
....:     sc=1/100
....:     t=vector((num*sc,0,num*sc))
....:     P=p_lambda_faster(B(A,c),la,seq)
....:     plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....:     Q=Q.intersection(P)
....: print(Q)
....: sum(plots)
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: num=0
....: la=lam(A,[1])
....: colors=rainbow(20)
....: plots=[point(la,size=50).plot()]
....: Q=p_lambda_faster(B(A,c),la,seq)
....: for seq in list(list(reversed(c))*i for i in range(A.nrows()+1)):
....:     sc=1/100
....:     t=vector((num*sc,0,num*sc))
....:     P=p_lambda_faster(B(A,c),la,seq)
....:     plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....:     Q=Q.intersection(P)
....: print(Q)
....: sum(plots)
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: for u in sortables(A,c[1:]):
....:     num=0
....:     la=lam(A,u)
....:     colors=rainbow(20)
....:     plots=[point(la,size=50).plot()]
....:     Q=p_lambda_faster(B(A,c),la,seq)
....:     for seq in list(list(reversed(c))*i for i in range(A.nrows()+1)):
....:         sc=1/100
....:         t=vector((num*sc,0,num*sc))
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         #plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....: 
....:         num+=1
....:         Q=Q.intersection(P)
....:     print(Q)
....: #sum(plots)
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['C',4])
....: c=[0,2,1,3]
....: for u in sortables(A,c[1:]):
....:     num=0
....:     la=lam(A,u)
....:     colors=rainbow(20)
....:     plots=[point(la,size=50).plot()]
....:     Q=p_lambda_faster(B(A,c),la,seq)
....:     for seq in list(list(reversed(c))*i for i in range(A.nrows()+1)):
....:         sc=1/100
....:         t=vector((num*sc,0,num*sc))
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         #plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....: 
....:         num+=1
....:         Q=Q.intersection(P)
....:     print(Q)
....: #sum(plots)
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['C',5])
....: c=[0,2,4,1,3]
....: for u in sortables(A,c[1:]):
....:     num=0
....:     la=lam(A,u)
....:     colors=rainbow(20)
....:     plots=[point(la,size=50).plot()]
....:     Q=p_lambda_faster(B(A,c),la,seq)
....:     for seq in list(list(reversed(c))*i for i in range(A.nrows()+1)):
....:         sc=1/100
....:         t=vector((num*sc,0,num*sc))
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         #plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....: 
....:         num+=1
....:         Q=Q.intersection(P)
....:     print(Q)
....: #sum(plots)
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['C',5])
....: c=[0,2,4,1,3]
....: for u in sortables(A,c[1:]):
....:     R=p_lambda_faster(-B(A,c),lam(A,u),[])
....:     num=0
....:     la=lam(A,u)
....:     colors=rainbow(20)
....:     plots=[point(la,size=50).plot()]
....:     Q=p_lambda_faster(B(A,c),la,seq)
....:     for seq in list(list(reversed(c))*i for i in range(A.nrows()+1)):
....:         sc=1/100
....:         t=vector((num*sc,0,num*sc))
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         #plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....: 
....:         num+=1
....:         Q=Q.intersection(P)
....:     print(Q.intersection(R)==Q)
....: #sum(plots)
....: 
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
sage: A=CartanMatrix(['C',4])
....: c=[0,2,1,3]
....: for u in sortables(A,c[1:]):
....:     R=p_lambda_faster(-B(A,c),lam(A,u),[])
....:     num=0
....:     la=lam(A,u)
....:     colors=rainbow(20)
....:     plots=[point(la,size=50).plot()]
....:     Q=p_lambda_faster(B(A,c),la,seq)
....:     for seq in list(list(reversed(c))*i for i in range(A.nrows()+1)):
....:         sc=1/100
....:         t=vector((num*sc,0,num*sc))
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         #plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....: 
....:         num+=1
....:         Q=Q.intersection(P)
....:     print(Q.intersection(R)==Q)
....: #sum(plots)
---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
Cell In [1205], line 9
      7 colors=rainbow(Integer(20))
      8 plots=[point(la,size=Integer(50)).plot()]
----> 9 Q=p_lambda_faster(B(A,c),la,seq)
     10 for seq in list(list(reversed(c))*i for i in range(A.nrows()+Integer(1))):
     11     sc=Integer(1)/Integer(100)

File ~/git/affine_dominance/software/domination4.py:139, in p_lambda_faster(B, la, seq)
    137     B = block_matrix([[B,matrix(la).transpose()]])
    138     for k in seq:
--> 139         B.mutate(k)
    140     B, la  = B[:,:-1], B[:,-1] 
    141 # changed this to allow for zero columns
    142 #    P = Polyhedron(rays=B.columns(),base_ring=QQ).translation(la)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/matrix0.pyx:3643, in sage.matrix.matrix0.Matrix.mutate (build/cythonized/sage/matrix/matrix0.c:33715)()
   3641 
   3642         if k < 0 or k >= self._nrows or k >= self._ncols:
-> 3643             raise IndexError("The mutation index is invalid")
   3644 
   3645         pairs = self.nonzero_positions()

IndexError: The mutation index is invalid
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: for u in sortables(A,c[1:]):
....:     num=0
....:     la=lam(A,u)
....:     colors=rainbow(20)
....:     plots=[point(la,size=50).plot()]
....:     Q=p_lambda_faster(B(A,c),la,[])
....:     for seq in list(list(reversed(c))*i for i in range(A.nrows()+1)):
....:         sc=1/100
....:         t=vector((num*sc,0,num*sc))
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         #plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....: 
....:         num+=1
....:         Q=Q.intersection(P)
....:     print(Q)
....: #sum(plots)
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['C',4])
....: c=[0,2,1,3]
....: for u in sortables(A,c[1:]):
....:     R=p_lambda_faster(-B(A,c),lam(A,u),[])
....:     num=0
....:     la=lam(A,u)
....:     colors=rainbow(20)
....:     plots=[point(la,size=50).plot()]
....:     Q=p_lambda_faster(B(A,c),la,[])
....:     for seq in list(list(reversed(c))*i for i in range(A.nrows()+1)):
....:         sc=1/100
....:         t=vector((num*sc,0,num*sc))
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         #plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....: 
....:         num+=1
....:         Q=Q.intersection(P)
....:     print(Q.intersection(R)==Q)
....: #sum(plots)
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
sage: A=CartanMatrix(['C',4])
....: c=[0,2,1,3]
....: for u in sortables(A,c[1:]):
....:     R=p_lambda_faster(-B(A,c),lam(A,u),[])
....:     num=0
....:     la=lam(A,u)
....:     colors=rainbow(20)
....:     plots=[point(la,size=50).plot()]
....:     Q=p_lambda_faster(B(A,c),la,[])
....:     for seq in list(list(reversed(c))*i for i in range(A.nrows()+1)):
....:         sc=1/100
....:         t=vector((num*sc,0,num*sc))
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         #plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....: 
....:         num+=1
....:         Q=Q.intersection(P)
....:     print(Q)
....:     print(Q.intersection(R)==Q)
....: #sum(plots)
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
True
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
True
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
True
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
True
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
True
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
True
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
True
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
True
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
True
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
True
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
True
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
True
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
True
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
True
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
True
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
True
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
True
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
True
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
True
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
True
sage: A=CartanMatrix(['C',4])
....: c=[0,2,1,3]
....: for u in sortables(A,c[1:]):
....:     R=p_lambda_faster(-B(A,c),lam(A,u),[])
....:     num=0
....:     la=lam(A,u)
....:     colors=rainbow(20)
....:     plots=[point(la,size=50).plot()]
....:     Q=p_lambda_faster(B(A,c),la,[])
....:     for seq in list(list(reversed(c))*i for i in range(1,A.nrows()+1)):
....:         sc=1/100
....:         t=vector((num*sc,0,num*sc))
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         #plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....: 
....:         num+=1
....:         Q=Q.intersection(P)
....:     print(Q)
....:     print(Q.intersection(R)==Q)
....: #sum(plots)
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
True
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
True
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
True
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
True
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
True
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
True
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
True
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
True
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
True
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
True
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
True
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
True
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
True
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
True
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
True
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
True
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
True
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
True
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
True
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
True
sage: A=CartanMatrix(['C',4])
....: c=[0,2,1,3]
....: for u in sortables(A,c[1:]):
....:     R=p_lambda_faster(-B(A,c),lam(A,u),[])
....:     num=0
....:     la=lam(A,u)
....:     colors=rainbow(20)
....:     plots=[point(la,size=50).plot()]
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
....:     for seq in list(list(reversed(c))*i for i in range(1,A.nrows()+1)):
....:         sc=1/100
....:         t=vector((num*sc,0,num*sc))
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         #plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....: 
....:         num+=1
....:         Q=Q.intersection(P)
....:     print(Q)
....:     print(Q.intersection(R)==Q)
....: #sum(plots)
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 7 vertices
True
A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
True
A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
True
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
True
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
True
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
True
A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
True
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
True
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
True
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
True
A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
True
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
True
A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
True
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
True
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
True
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
True
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 16 vertices
True
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 9 vertices
True
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 9 vertices
True
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 5 vertices
True
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: for u in sortables(A,c[1:]):
....:     R=p_lambda_faster(-B(A,c),lam(A,u),[])
....:     num=0
....:     la=lam(A,u)
....:     colors=rainbow(20)
....:     plots=[point(la,size=50).plot()]
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
....:     for seq in list(list(reversed(c))*i for i in range(1,A.nrows()+1)):
....:         sc=1/100
....:         t=vector((num*sc,0,num*sc))
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         #plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....: 
....:         num+=1
....:         Q=Q.intersection(P)
....:     print(Q)
....:     print(Q.intersection(R)==Q)
....: #sum(plots)
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices
True
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
True
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
True
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
True
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 4 vertices
True
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices
True
sage: A=CartanMatrix(['C',4])
....: c=[0,2,1,3]
....: for u in sortables(A,c[1:]):
....:     R=p_lambda_faster(-B(A,c),lam(A,u),[])
....:     num=0
....:     la=lam(A,u)
....:     colors=rainbow(20)
....:     plots=[point(la,size=50).plot()]
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
....:     for seq in list(list(reversed(c))*i for i in range(1,A.nrows()+1)):
....:         sc=1/100
....:         t=vector((num*sc,0,num*sc))
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         #plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....: 
....:         num+=1
....:         Q=Q.intersection(P)
....:     print(Q)
....:     print(Q.intersection(R)==Q)
....: #sum(plots)
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 7 vertices
True
A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
True
A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
True
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
True
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
True
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
True
A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
True
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
True
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
True
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
True
A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
True
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
True
A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
True
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
True
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
True
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
True
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 16 vertices
True
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 9 vertices
True
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 9 vertices
True
A 4-dimensional polyhedron in QQ^4 defined as the convex hull of 5 vertices
True
sage: A=CartanMatrix(['C',5])
....: c=[0,2,4,1,3]
....: for u in sortables(A,c[1:]):
....:     R=p_lambda_faster(-B(A,c),lam(A,u),[])
....:     num=0
....:     la=lam(A,u)
....:     colors=rainbow(20)
....:     plots=[point(la,size=50).plot()]
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
....:     for seq in list(list(reversed(c))*i for i in range(1,A.nrows()+1)):
....:         sc=1/100
....:         t=vector((num*sc,0,num*sc))
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         #plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....: 
....:         num+=1
....:         Q=Q.intersection(P)
....:     #print(Q)
....:     print(Q.intersection(R)==Q)
....: #sum(plots)
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: for u in sortables(A,c[1:]):
....:     R=p_lambda_faster(-B(A,c),lam(A,u),[])
....:     la=lam(A,u)
....:     colors=rainbow(20)
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
....:     plots=[point(la,size=50).plot(),Q.plot(fill=colors[0],alpha=0.5)]
....:     num=1
....:     for seq in list(list(reversed(c))*i for i in range(1,A.nrows()+1)):
....:         sc=1/100
....:         t=vector((num*sc,0,num*sc))
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:         num+=1
....:         Q=Q.intersection(P)
....:     #print(Q)
....:     print(Q.intersection(R)==Q)
....: sum(plots)
True
True
True
True
True
True
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: for u in sortables(A,c[1:]):
....:     R=p_lambda_faster(-B(A,c),lam(A,u),[])
....:     la=lam(A,u)
....:     colors=rainbow(20)
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
....:     plots=[point(la,size=50).plot(),R.plot(fill=colors[0],alpha=0.5)]
....:     num=1
....:     for seq in list(list(reversed(c))*i for i in range(1,A.nrows()+1)):
....:         sc=1/100
....:         t=vector((num*sc,0,num*sc))
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:         num+=1
....:         Q=Q.intersection(P)
....:     #print(Q)
....:     print(Q.intersection(R)==Q)
....: sum(plots)
True
True
True
True
True
True
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: for u in sortables(A,c[1:]):
....:     R=p_lambda_faster(-B(A,c),lam(A,u),[])
....:     la=lam(A,u)
....:     colors=rainbow(20)
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
....:     plots=[point(la,size=50).plot(),p_lambda_faster(B(A,c),lam(A,u),[]).pl
....: ot(fill=colors[0],alpha=0.5)]
....:     num=1
....:     for seq in list(list(reversed(c))*i for i in range(1,A.nrows()+1)):
....:         sc=1/100
....:         t=vector((num*sc,0,num*sc))
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:         num+=1
....:         Q=Q.intersection(P)
....:     #print(Q)
....:     print(Q.intersection(R)==Q)
....: sum(plots)
True
True
True
True
True
True
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: for u in sortables(A,c[1:]):
....:     R=p_lambda_faster(-B(A,c),lam(A,u),[])
....:     la=lam(A,u)
....:     colors=rainbow(20)
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
....:     plots=[point(la,size=50).plot(),p_lambda_faster(B(A,c),lam(A,u),[]).pl
....: ot(fill=colors[0],alpha=0.5)]
....:     num=1
....:     for seq in list(list(reversed(c))*i for i in range(1,A.nrows()+1)):
....:         sc=1/100
....:         t=vector((num*sc,0,num*sc))
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:         num+=1
....:         Q=Q.intersection(P)
....:     #print(Q)
....:     print(Q.intersection(R)==Q)
....:     sum(plots)
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: for u in sortables(A,c[1:]):
....:     R=p_lambda_faster(-B(A,c),lam(A,u),[])
....:     la=lam(A,u)
....:     colors=rainbow(20)
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
....:     plots=[point(la,size=50).plot(),p_lambda_faster(B(A,c),lam(A,u),[]).pl
....: ot(fill=colors[0],alpha=0.5)]
....:     num=1
....:     for seq in list(list(reversed(c))*i for i in range(1,A.nrows()+1)):
....:         sc=1/100
....:         t=vector((num*sc,0,num*sc))
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:         num+=1
....:         Q=Q.intersection(P)
....:     #print(Q)
....:     print(Q.intersection(R)==Q)
....:     sum(plots)
....: 
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: for u in sortables(A,c[1:]):
....:     R=p_lambda_faster(-B(A,c),lam(A,u),[])
....:     la=lam(A,u)
....:     colors=rainbow(10)
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
....:     plots=[point(la,size=50).plot(),p_lambda_faster(B(A,c),lam(A,u),[]).pl
....: ot(fill=colors[0],alpha=0.5)]
....:     num=1
....:     for seq in list(list(reversed(c))*i for i in range(1,A.nrows()+1)):
....:         sc=1/100
....:         t=vector((num*sc,0,num*sc))
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:         num+=1
....:         Q=Q.intersection(P)
....:     #print(Q)
....:     print(Q.intersection(R)==Q)
....:     sum(plots)
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: for u in sortables(A,c[1:]):
....:     R=p_lambda_faster(-B(A,c),lam(A,u),[])
....:     la=lam(A,u)
....:     colors=rainbow(10)
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
....:     plots=[point(la,size=50).plot(),p_lambda_faster(B(A,c),lam(A,u),[]).pl
....: ot(fill=colors[0],alpha=0.5)]
....:     num=1
....:     for seq in list(list(reversed(c))*i for i in range(1,A.nrows()+1)):
....:         sc=1/100
....:         t=vector((num*sc,0,num*sc))
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         #plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....: 
....:         num+=1
....:         Q=Q.intersection(P)
....:     #print(Q)
....:     print(Q.intersection(R)==Q)
....:     #sum(plots)
True
True
True
True
True
True
sage: A=CartanMatrix(['C',4])
....: c=[0,2,1,3]
....: for u in sortables(A,c[1:]):
....:     R=p_lambda_faster(-B(A,c),lam(A,u),[])
....:     la=lam(A,u)
....:     colors=rainbow(10)
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
....:     plots=[point(la,size=50).plot(),p_lambda_faster(B(A,c),lam(A,u),[]).pl
....: ot(fill=colors[0],alpha=0.5)]
....:     num=1
....:     for seq in list(list(reversed(c))*i for i in range(1,A.nrows()+1)):
....:         sc=1/100
....:         t=vector((num*sc,0,num*sc))
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         #plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....: 
....:         num+=1
....:         Q=Q.intersection(P)
....:     #print(Q)
....:     print(Q.intersection(R)==Q)
....:     #sum(plots)
---------------------------------------------------------------------------
KeyError                                  Traceback (most recent call last)
File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/misc/cachefunc.pyx:1962, in sage.misc.cachefunc.CachedMethodCaller.__call__ (build/cythonized/sage/misc/cachefunc.c:13372)()
   1961 try:
-> 1962     return cache[k]
   1963 except TypeError:  # k is not hashable

KeyError: ((False, True, False, False, True, True, False), ())

During handling of the above exception, another exception occurred:

NotImplementedError                       Traceback (most recent call last)
Cell In [1221], line 8
      6 colors=rainbow(Integer(10))
      7 Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
----> 8 plots=[point(la,size=Integer(50)).plot(),p_lambda_faster(B(A,c),lam(A,u),[]).plot(fill=colors[Integer(0)],alpha=RealNumber('0.5'))]
      9 num=Integer(1)
     10 for seq in list(list(reversed(c))*i for i in range(Integer(1),A.nrows()+Integer(1))):

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base6.py:450, in Polyhedron_base6.plot(self, point, line, polygon, wireframe, fill, position, orthonormal, **kwds)
    447     else:
    448         return polyhedron.projection()
--> 450 projection = project(self, orthonormal)
    451 try:
    452     plot_method = projection.plot

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base6.py:446, in Polyhedron_base6.plot.<locals>.project(polyhedron, ortho)
    443         return polyhedron.affine_hull_projection().projection()
    444 elif polyhedron.dimension() == 4:
    445     # For 4d-polyhedron, we can use schlegel projections:
--> 446     return polyhedron.schlegel_projection(position=position)
    447 else:
    448     return polyhedron.projection()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base6.py:896, in Polyhedron_base6.schlegel_projection(self, facet, position)
    828 r"""
    829 Return the Schlegel projection.
    830 
   (...)
    893     ValueError: the chosen position is too large
    894 """
    895 proj = self.projection()
--> 896 return proj.schlegel(facet, position)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/plot.py:559, in Projection.schlegel(self, facet, position)
    556     if not locus_polyhedron.relative_interior_contains(projection_point):
    557         raise ValueError("the chosen position is too large")
--> 559 return self(ProjectionFuncSchlegel(facet, projection_point))

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/plot.py:291, in ProjectionFuncSchlegel.__init__(self, facet, projection_point)
    289 self.full_A = ineq.A()
    290 self.full_b = ineq.b()
--> 291 A, b = self.facet.as_polyhedron().affine_hull_projection(as_affine_map=True, orthonormal=True, extend=True)
    292 self.A = A.change_ring(RDF).matrix()
    293 self.b = b.change_ring(RDF)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base6.py:1513, in Polyhedron_base6.affine_hull_projection(self, as_polyhedron, as_affine_map, orthogonal, orthonormal, extend, minimal, return_all_data, as_convex_set)
   1511 if as_polyhedron is not None:
   1512     as_convex_set = as_polyhedron
-> 1513 return super().affine_hull_projection(
   1514     as_convex_set=as_convex_set, as_affine_map=as_affine_map,
   1515     orthogonal=orthogonal, orthonormal=orthonormal,
   1516     extend=extend, minimal=minimal,
   1517     return_all_data=return_all_data)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/convex_set.py:424, in ConvexSet_base.affine_hull_projection(self, as_convex_set, as_affine_map, orthogonal, orthonormal, extend, minimal, return_all_data, **kwds)
    421     as_convex_set = True
    422     as_affine_map = True
--> 424 result = self._affine_hull_projection(
    425     as_convex_set=as_convex_set, as_affine_map=as_affine_map, as_section_map=return_all_data,
    426     orthogonal=orthogonal, orthonormal=orthonormal,
    427     extend=extend, minimal=minimal, **kwds)
    429 # assemble result
    430 if return_all_data or (as_convex_set and as_affine_map):

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/misc/cachefunc.pyx:1967, in sage.misc.cachefunc.CachedMethodCaller.__call__ (build/cythonized/sage/misc/cachefunc.c:13508)()
   1965         return cache[k]
   1966 except KeyError:
-> 1967     w = self._instance_call(*args, **kwds)
   1968     cache[k] = w
   1969     return w

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/misc/cachefunc.pyx:1842, in sage.misc.cachefunc.CachedMethodCaller._instance_call (build/cythonized/sage/misc/cachefunc.c:12957)()
   1840         True
   1841     """
-> 1842     return self.f(self._instance, *args, **kwds)
   1843 
   1844 cdef fix_args_kwds(self, tuple args, dict kwds) noexcept:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base6.py:1006, in Polyhedron_base6._affine_hull_projection(self, as_convex_set, as_affine_map, as_section_map, orthogonal, orthonormal, extend, minimal)
   1003 elif orthogonal or orthonormal:
   1004     # see TODO
   1005     if not self.is_compact():
-> 1006         raise NotImplementedError('"orthogonal=True" and "orthonormal=True" work only for compact polyhedra')
   1007     affine_basis = self.an_affine_basis()
   1008     v0 = affine_basis[0].vector()

NotImplementedError: "orthogonal=True" and "orthonormal=True" work only for compact polyhedra
sage: A=CartanMatrix(['C',4])
....: c=[0,2,1,3]
....: for u in sortables(A,c[1:]):
....:     R=p_lambda_faster(-B(A,c),lam(A,u),[])
....:     la=lam(A,u)
....:     colors=rainbow(10)
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
....:     #plots=[point(la,size=50).plot(),p_lambda_faster(B(A,c),lam(A,u),[]).p
....: lot(fill=colors[0],alpha=0.5)]
....:     num=1
....:     for seq in list(list(reversed(c))*i for i in range(1,A.nrows()+1)):
....:         sc=1/100
....:         t=vector((num*sc,0,num*sc))
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         #plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....: 
....:         num+=1
....:         Q=Q.intersection(P)
....:     #print(Q)
....:     print(Q.intersection(R)==Q)
....:     #sum(plots)
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
sage: A=CartanMatrix(['C',5])
....: c=[0,2,4,1,3]
....: n=0
....: for u in sortables(A,c[1:]):
....:     R=p_lambda_faster(-B(A,c),lam(A,u),[])
....:     la=lam(A,u)
....:     colors=rainbow(10)
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
....:     #plots=[point(la,size=50).plot(),p_lambda_faster(B(A,c),lam(A,u),[]).p
....: lot(fill=colors[0],alpha=0.5)]
....:     num=1
....:     for seq in list(list(reversed(c))*i for i in range(1,A.nrows()+1)):
....:         sc=1/100
....:         t=vector((num*sc,0,num*sc))
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         #plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....: 
....:         num+=1
....:         Q=Q.intersection(P)
....:     #print(Q)
....:     print(n,Q.intersection(R)==Q)
....:     n+=1
....:     #sum(plots)
0 True
1 True
2 True
3 True
4 True
5 True
6 True
7 True
8 True
9 True
10 True
11 True
12 True
13 True
14 True
15 True
16 True
17 True
18 True
19 True
20 True
21 True
22 True
23 True
24 True
25 True
26 True
27 True
28 True
29 True
30 True
31 True
32 True
33 True
34 True
35 True
36 True
37 True
38 True
39 True
40 True
41 True
42 True
43 True
44 True
45 True
46 True
47 True
48 True
49 True
50 True
51 True
52 True
53 True
54 True
55 True
56 True
57 True
58 True
59 True
60 True
61 True
62 True
63 True
64 True
65 True
66 True
67 True
68 True
69 True
sage: A=CartanMatrix(['C',6])
....: c=[0,2,4,1,3,5]
....: n=1
....: for u in sortables(A,c[1:]):
....:     R=p_lambda_faster(-B(A,c),lam(A,u),[])
....:     la=lam(A,u)
....:     colors=rainbow(10)
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
....:     #plots=[point(la,size=50).plot(),p_lambda_faster(B(A,c),lam(A,u),[]).p
....: lot(fill=colors[0],alpha=0.5)]
....:     num=1
....:     for seq in list(list(reversed(c))*i for i in range(1,A.nrows()+1)):
....:         sc=1/100
....:         t=vector((num*sc,0,num*sc))
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         #plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....: 
....:         num+=1
....:         Q=Q.intersection(P)
....:     #print(Q)
....:     print(n,Q.intersection(R)==Q)
....:     n+=1
....:     #sum(plots)
1 True
2 True
3 True
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [1224], line 14
     12 sc=Integer(1)/Integer(100)
     13 t=vector((num*sc,Integer(0),num*sc))
---> 14 P=p_lambda_faster(B(A,c),la,seq)
     15 #plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
     16 num+=Integer(1)

File ~/git/affine_dominance/software/domination4.py:161, in p_lambda_faster(B, la, seq)
    157         P=Ep*Pp
    158     else:
    159         #print("Pp:   ",Pp,Pp.vertices(),Pp.rays(),Pp.lines(),"\n")
    160         #print("Pm:   ",Pm,Pm.vertices(),Pm.rays(),Pm.lines(),"\n\n")
--> 161         P=(Ep*Pp).convex_hull(Em*Pm)
    162     B.mutate(k)
    163 return P

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1312, in Polyhedron_base5.convex_hull(self, other)
   1310 hull_rays = self.rays() + other.rays()
   1311 hull_lines = self.lines() + other.lines()
-> 1312 return self.parent().element_class(self.parent(), [hull_vertices, hull_rays, hull_lines], None)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:174, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    171     lines = tuple(lines)
    173 if vertices or rays or lines:
--> 174     self._init_from_Vrepresentation(vertices, rays, lines, **kwds)
    175 else:
    176     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:99, in Polyhedron_ppl._init_from_Vrepresentation(self, vertices, rays, lines, minimize, verbose)
     72 def _init_from_Vrepresentation(self, vertices, rays, lines, minimize=True, verbose=False):
     73     """
     74     Construct polyhedron from V-representation data.
     75 
   (...)
     97         sage: Polyhedron_ppl._init_from_Vrepresentation(p, [], [], [])
     98     """
---> 99     gs = self._convert_generators_to_ppl(vertices, rays, lines)
    100     if gs.empty():
    101         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'empty')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:473, in Polyhedron_ppl._convert_generators_to_ppl(vertices, rays, lines)
    471     vertices = []
    472 for v in vertices:
--> 473     gs.insert(Polyhedron_ppl._convert_generator_to_ppl(v, VERTEX))
    474 if rays is None:
    475     rays = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:446, in Polyhedron_ppl._convert_generator_to_ppl(v, typ)
    444 dv = [ d*v_i for v_i in v ]
    445 if typ == VERTEX:
--> 446     return ob(Linear_Expression(dv, 0), d)
    447 else:
    448     return ob(Linear_Expression(dv, 0))

File ppl/generator.pyx:252, in ppl.generator.Generator.point()

File ppl/generator.pyx:248, in ppl.generator.Generator.point()

File ppl/linear_algebra.pyx:49, in ppl.linear_algebra.PPL_Coefficient_from_pyobject()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/rings/integer.pyx:914, in sage.rings.integer.Integer.__richcmp__ (build/cythonized/sage/rings/integer.c:16498)()
    912     c = mpz_cmp_d((<Integer>left).value, d)
    913 else:
--> 914     return coercion_model.richcmp(left, right, op)
    915 
    916 return rich_to_bool_sgn(op, c)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:2021, in sage.structure.coerce.CoercionModel.richcmp (build/cythonized/sage/structure/coerce.c:26173)()
   2019 # Coerce to a common parent
   2020 try:
-> 2021     x, y = self.canonical_coercion(x, y)
   2022 except (TypeError, NotImplementedError):
   2023     pass

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1422, in sage.structure.coerce.CoercionModel.canonical_coercion (build/cythonized/sage/structure/coerce.c:18956)()
   1420             self._record_exception()
   1421 
-> 1422     raise TypeError("no common canonical parent for objects with parents: '%s' and '%s'"%(xp, yp))
   1423 
   1424 cpdef coercion_maps(self, R, S) noexcept:

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['C',6])
....: c=[0,2,4,1,3,5]
....: n=1
....: for u in sortables(A,c[1:]):
....:     R=p_lambda_faster(-B(A,c),lam(A,u),[])
....:     la=lam(A,u)
....:     colors=rainbow(10)
....:     Q=p_lambda_int(B(A,c),la,list(list(reversed(c))*i for i in range(1,A.n
....: rows()+1)))
....:     print(n,Q.intersection(R)==Q)
....:     n+=1
....: 
1 True
2 True
3 True
4 True
5 True
6 True
7 True
8 True
9 True
10 True
11 True
12 True
13 True
14 True
15 True
16 True
17 True
18 True
19 True
20 True
21 True
22 True
23 True
24 True
25 True
26 True
27 True
28 True
29 True
30 True
31 True
32 True
33 True
34 True
35 True
36 True
37 True
38 True
39 True
40 True
41 True
42 True
43 True
44 True
45 True
46 True
47 True
48 True
49 True
50 True
51 True
52 True
53 True
54 True
55 True
56 True
57 True
58 True
59 True
60 True
61 True
62 True
63 True
64 True
65 True
66 True
67 True
68 True
69 True
70 True
71 True
72 True
73 True
74 True
75 True
76 True
77 True
78 True
79 True
80 True
81 True
82 True
83 True
84 True
85 True
86 True
87 True
88 True
89 True
90 True
91 True
92 True
93 True
94 True
95 True
96 True
97 True
98 True
99 True
100 True
101 True
102 True
103 True
104 True
105 True
106 True
107 True
108 True
109 True
110 True
111 True
112 True
113 True
114 True
115 True
116 True
117 True
118 True
119 True
120 True
121 True
122 True
123 True
124 True
125 True
126 True
127 True
128 True
129 True
130 True
131 True
132 True
133 True
134 True
135 True
136 True
137 True
138 True
139 True
140 True
141 True
142 True
143 True
144 True
145 True
146 True
147 True
148 True
149 True
150 True
151 True
152 True
153 True
154 True
155 True
156 True
157 True
158 True
159 True
160 True
161 True
162 True
163 True
164 True
165 True
166 True
167 True
168 True
169 True
170 True
171 True
172 True
173 True
174 True
175 True
176 True
177 True
178 True
179 True
180 True
181 True
182 True
183 True
184 True
185 True
186 True
187 True
188 True
189 True
190 True
191 True
192 True
193 True
194 True
195 True
196 True
197 True
198 True
199 True
200 True
201 True
202 True
203 True
204 True
205 True
206 True
207 True
208 True
209 True
210 True
211 True
212 True
213 True
214 True
215 True
216 True
217 True
218 True
219 True
220 True
221 True
222 True
223 True
224 True
225 True
226 True
227 True
228 True
229 True
230 True
231 True
232 True
233 True
234 True
235 True
236 True
237 True
238 True
239 True
240 True
241 True
242 True
243 True
244 True
245 True
246 True
247 True
248 True
249 True
250 True
251 True
252 True
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: for u in sortables(A,c[1:]):
....:     R=p_lambda_faster(-B(A,c),lam(A,u),[])
....:     la=lam(A,u)
....:     colors=rainbow(10)
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
....:     plots=[point(la,size=50).plot(),p_lambda_faster(B(A,c),lam(A,u),[]).pl
....: 
....: ot(fill=colors[0],alpha=0.5)]
....:     num=1
....:     for seq in list(list(reversed(c))*i for i in range(1,A.nrows()+1)):
....:         sc=1/100
....:         t=vector((num*sc,0,num*sc))
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:         num+=1
....:         Q=Q.intersection(P)
....:     #print(Q)
....:     print(Q.intersection(R)==Q)
....:     sum(plots)
....: 
  Cell In [1226], line 8
    plots=[point(la,size=Integer(50)).plot(),p_lambda_faster(B(A,c),lam(A,u),[]).pl
                                             ^
SyntaxError: invalid syntax. Perhaps you forgot a comma?

sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: for u in sortables(A,c[1:]):
....:     R=p_lambda_faster(-B(A,c),lam(A,u),[])
....:     la=lam(A,u)
....:     colors=rainbow(10)
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
....:     plots=[point(la,size=50).plot(),p_lambda_faster(B(A,c),lam(A,u),[]).pl
....: ot(fill=colors[0],alpha=0.5)]
....:     num=1
....:     for seq in list(list(reversed(c))*i for i in range(1,A.nrows()+1)):
....:         sc=1/100
....:         t=vector((num*sc,0,num*sc))
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:         num+=1
....:         Q=Q.intersection(P)
....:     #print(Q)
....:     print(Q.intersection(R)==Q)
....:     sum(plots)
....: 
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: for u in sortables(A,c[1:]):
....:     R=p_lambda_faster(-B(A,c),lam(A,u),[])
....:     la=lam(A,u)
....:     colors=rainbow(10)
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
....:     plots=[point(la,size=50).plot(),p_lambda_faster(B(A,c),lam(A,u),[]).pl
....: ot(fill=colors[0],alpha=0.5)]
....:     num=1
....:     for seq in list(list(reversed(c))*i for i in range(1,A.nrows()+1)):
....:         sc=1/100
....:         t=vector((num*sc,0,num*sc))
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:         num+=1
....:         Q=Q.intersection(P)
....:     #print(Q)
....:     print(Q.intersection(R)==Q)
....:     sum(plots)
....: 
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: for u in sortables(A,c[1:]):
....:     R=p_lambda_faster(-B(A,c),lam(A,u),[])
....:     la=lam(A,u)
....:     colors=rainbow(10)
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
....:     plots=[point(la,size=50).plot(),p_lambda_faster(B(A,c),lam(A,u),[]).pl
....: ot(fill=colors[0],alpha=0.5)]
....:     num=1
....:     for seq in list(list(reversed(c))*i for i in range(1,A.nrows()+1)):
....:         sc=1/100
....:         t=vector((num*sc,0,num*sc))
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:         num+=1
....:         Q=Q.intersection(P)
....:     #print(Q)
....:     print(Q.intersection(R)==Q)
....:     sum(plots)
....: 
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: for u in sortables(A,c[1:]):
....:     R=p_lambda_faster(-B(A,c),lam(A,u),[])
....:     la=lam(A,u)
....:     colors=rainbow(10)
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
....:     plots=[point(la,size=50).plot(),p_lambda_faster(B(A,c),lam(A,u),[]).pl
....: ot(fill=colors[0],alpha=0.5)]
....:     num=1
....:     for seq in list(list(reversed(c))*i for i in range(1,A.nrows()+1)):
....:         sc=1/100
....:         t=vector((num*sc,0,num*sc))
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:         num+=1
....:         Q=Q.intersection(P)
....:     #print(Q)
....:     print(Q.intersection(R)==Q)
....:     sum(plots)
....: 
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: for u in sortables(A,c[1:]):
....:     R=p_lambda_faster(-B(A,c),lam(A,u),[])
....:     la=lam(A,u)
....:     colors=rainbow(10)
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
....:     plots=[point(la,size=50).plot(),p_lambda_faster(B(A,c),lam(A,u),[]).pl
....: ot(fill=colors[0],alpha=0.5)]
....:     num=1
....:     for seq in list(list(reversed(c))*i for i in range(1,A.nrows()+1)):
....:         sc=1/100
....:         t=vector((num*sc,0,num*sc))
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:         num+=1
....:         Q=Q.intersection(P)
....:     #print(Q)
....:     print(Q.intersection(R)==Q)
....:     sum(plots)
....: 
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',2])
....: c=[0,1]
....: for u in sortables(A,c[1:]):
....:     R=p_lambda_faster(-B(A,c),lam(A,u),[])
....:     la=lam(A,u)
....:     colors=rainbow(10)
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
....:     plots=[point(la,size=50).plot(),p_lambda_faster(B(A,c),lam(A,u),[]).pl
....: ot(fill=colors[0],alpha=0.5)]
....:     num=1
....:     for seq in list(list(reversed(c))*i for i in range(1,A.nrows()+1)):
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         plots=plots+[P.plot(fill=colors[num],alpha=0.5)]
....:         num+=1
....:         Q=Q.intersection(P)
....:     #print(Q)
....:     print(Q.intersection(R)==Q)
....:     sum(plots)
True
verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (3.0,-1.0) to (4.0,-1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (3.0,-1.0) to (4.0,-1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (3.0,-1.0) to (4.0,-1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (3.0,-1.0) to (3.0,-2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (3.0,-1.0) to (3.0,-2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (3.0,-1.0) to (3.0,-2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-4.0) to (-1.0,-4.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-4.0) to (-1.0,-4.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-4.0) to (-1.0,-4.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (3.0,0.0) to (1.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (3.0,0.0) to (1.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (3.0,0.0) to (1.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (5.0,0.0) to (5.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (5.0,0.0) to (5.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (5.0,0.0) to (5.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-1.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-1.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-1.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

Launched png viewer for Graphics object consisting of 17 graphics primitives
True
verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (2.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (2.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (2.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (1.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (1.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (1.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-2.0) to (-1.0,-2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-2.0) to (-1.0,-2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-2.0) to (-1.0,-2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,1.0) to (-1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,1.0) to (-1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,1.0) to (-1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

Launched png viewer for Graphics object consisting of 16 graphics primitives
sage: A=CartanMatrix(['C',2])
....: c=[0,1]
....: for u in sortables(A,c[1:]):
....:     R=p_lambda_faster(-B(A,c),lam(A,u),[])
....:     la=lam(A,u)
....:     colors=rainbow(10)
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
....:     plots=[point(la,size=50).plot(),p_lambda_faster(B(A,c),lam(A,u),[]).pl
....: ot(fill=colors[0])]
....:     num=1
....:     for seq in list(list(reversed(c))*i for i in range(1,A.nrows()+1)):
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         plots=plots+[P.plot(fill=colors[num],alpha=0.5)]
....:         num+=1
....:         Q=Q.intersection(P)
....:     #print(Q)
....:     print(Q.intersection(R)==Q)
....:     sum(plots)
True
verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-4.0) to (-1.0,-4.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-4.0) to (-1.0,-4.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-4.0) to (-1.0,-4.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (3.0,0.0) to (1.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (3.0,0.0) to (1.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (3.0,0.0) to (1.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (5.0,0.0) to (5.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (5.0,0.0) to (5.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (5.0,0.0) to (5.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-1.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-1.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-1.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

Launched png viewer for Graphics object consisting of 17 graphics primitives
True
verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-2.0) to (-1.0,-2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-2.0) to (-1.0,-2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-2.0) to (-1.0,-2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,1.0) to (-1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,1.0) to (-1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,1.0) to (-1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

Launched png viewer for Graphics object consisting of 16 graphics primitives
sage: A=CartanMatrix(['G',2])
....: c=[0,1]
....: for u in sortables(A,c[1:]):
....:     R=p_lambda_faster(-B(A,c),lam(A,u),[])
....:     la=lam(A,u)
....:     colors=rainbow(10)
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
....:     plots=[point(la,size=50).plot(),p_lambda_faster(B(A,c),lam(A,u),[]).pl
....: ot(fill=colors[0])]
....:     num=1
....:     for seq in list(list(reversed(c))*i for i in range(1,A.nrows()+1)):
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         plots=plots+[P.plot(fill=colors[num],alpha=0.5)]
....:         num+=1
....:         Q=Q.intersection(P)
....:     #print(Q)
....:     print(Q.intersection(R)==Q)
....:     sum(plots)
False
verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-5.0) to (-1.0,-5.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-5.0) to (-1.0,-5.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-5.0) to (-1.0,-5.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (4.0,0.0) to (1.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (4.0,0.0) to (1.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (4.0,0.0) to (1.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (5.5,0.0) to (2.5,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (5.5,0.0) to (2.5,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (5.5,0.0) to (2.5,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-3.0) to (-2.0,-2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-3.0) to (-2.0,-2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-3.0) to (-2.0,-2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

Launched png viewer for Graphics object consisting of 17 graphics primitives
False
verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-3.0) to (-1.0,-3.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-3.0) to (-1.0,-3.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-3.0) to (-1.0,-3.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-2.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-2.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-2.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-2.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-2.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-2.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-2.0,3.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-2.0,3.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-2.0,3.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

Launched png viewer for Graphics object consisting of 17 graphics primitives
sage: A=CartanMatrix(['G',2])
....: c=[0,1]
....: for u in sortables(A,c[1:]):
....:     R=p_lambda_faster(-B(A,c),lam(A,u),[])
....:     la=lam(A,u)
....:     colors=rainbow(10)
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
....:     plots=[point(la,size=50).plot(),p_lambda_faster(B(A,c),lam(A,u),[]).pl
....: ot(fill=colors[0])]
....:     num=1
....:     for seq in list(list(reversed(c))*i for i in range(1,A.nrows()+2)):
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         plots=plots+[P.plot(fill=colors[num],alpha=0.5)]
....:         num+=1
....:         Q=Q.intersection(P)
....:     #print(Q)
....:     print(Q.intersection(R)==Q)
....:     sum(plots)
....: 
True
verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-5.0) to (-1.0,-5.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-5.0) to (-1.0,-5.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-5.0) to (-1.0,-5.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (4.0,0.0) to (1.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (4.0,0.0) to (1.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (4.0,0.0) to (1.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (5.5,0.0) to (2.5,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (5.5,0.0) to (2.5,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (5.5,0.0) to (2.5,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-3.0) to (-2.0,-2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-3.0) to (-2.0,-2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-3.0) to (-2.0,-2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (7.0,0.0) to (7.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (7.0,0.0) to (7.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (7.0,0.0) to (7.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-1.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-1.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-1.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

Launched png viewer for Graphics object consisting of 23 graphics primitives
True
verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-3.0) to (-1.0,-3.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-3.0) to (-1.0,-3.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-3.0) to (-1.0,-3.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-2.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-2.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-2.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-2.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-2.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-2.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-2.0,3.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-2.0,3.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-2.0,3.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,1.0) to (-1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,1.0) to (-1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,1.0) to (-1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

Launched png viewer for Graphics object consisting of 22 graphics primitives
sage: A=CartanMatrix(['G',2])
....: c=[0,1]
....: Ref=identity_matrix(A.nrows())
....: for i in c:
....:     Ref=matrix(map(lambda x: reflect(A,x,i),Ref.rows()))
....: Ref=Ref.transpose()
....: print(Ref)
....: for u in sortables(A,c[1:]):
....:     R=p_lambda_faster(-B(A,c),lam(A,u),[])
....:     la=lam(A,u)
....:     colors=rainbow(10)
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
....:     plots=[point(la,size=50).plot(),p_lambda_faster(B(A,c),lam(A,u),[]).pl
....: ot(fill=colors[0])]
....:     num=1
....:     for seq in list(list(reversed(c))*i for i in range(1,A.nrows()+2)):
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         plots=plots+[P.plot(fill=colors[num],alpha=0.5)]
....:         num+=1
....:         Q=Q.intersection(P)
....:     sum(plots)
[ 2  3]
[-1 -1]
verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-5.0) to (-1.0,-5.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-5.0) to (-1.0,-5.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-5.0) to (-1.0,-5.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (4.0,0.0) to (1.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (4.0,0.0) to (1.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (4.0,0.0) to (1.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (5.5,0.0) to (2.5,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (5.5,0.0) to (2.5,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (5.5,0.0) to (2.5,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-3.0) to (-2.0,-2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-3.0) to (-2.0,-2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-3.0) to (-2.0,-2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (7.0,0.0) to (7.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (7.0,0.0) to (7.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (7.0,0.0) to (7.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-1.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-1.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-1.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

Launched png viewer for Graphics object consisting of 23 graphics primitives
verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-3.0) to (-1.0,-3.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-3.0) to (-1.0,-3.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-3.0) to (-1.0,-3.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-2.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-2.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-2.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-2.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-2.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-2.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-2.0,3.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-2.0,3.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-2.0,3.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,1.0) to (-1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,1.0) to (-1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,1.0) to (-1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

Launched png viewer for Graphics object consisting of 22 graphics primitives
sage: A=CartanMatrix(['G',2])
....: c=[0,1]
....: Ref=identity_matrix(A.nrows())
....: for i in c:
....:     Ref=matrix(map(lambda x: reflect(A,x,i),Ref.rows()))
....: Ref=Ref.transpose()
....: print(Ref)
....: for u in sortables(A,c[1:]):
....:     R=p_lambda_faster(-B(A,c),lam(A,u),[])
....:     la=lam(A,u)
....:     colors=rainbow(10)
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
....:     plots=[point(la,size=50).plot(),p_lambda_faster(B(A,c),lam(A,u),[]).pl
....: ot(fill=colors[0])]
....:     num=1
....:     for seq in list(list(reversed(c))*i for i in range(1,A.nrows()+2)):
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         plots=plots+[P.plot(fill=colors[num])]
....:         num+=1
....:         Q=Q.intersection(P)
....:     sum(plots)
....: 
[ 2  3]
[-1 -1]
Launched png viewer for Graphics object consisting of 23 graphics primitives
Launched png viewer for Graphics object consisting of 22 graphics primitives
sage: A=CartanMatrix(['C',2])
....: c=[0,1]
....: Ref=identity_matrix(A.nrows())
....: for i in c:
....:     Ref=matrix(map(lambda x: reflect(A,x,i),Ref.rows()))
....: Ref=Ref.transpose()
....: print(Ref)
....: for u in sortables(A,c[1:]):
....:     R=p_lambda_faster(-B(A,c),lam(A,u),[])
....:     la=lam(A,u)
....:     colors=rainbow(10)
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
....:     plots=[point(la,size=50).plot(),p_lambda_faster(B(A,c),lam(A,u),[]).pl
....: ot(fill=colors[0])]
....:     num=1
....:     for seq in list(list(reversed(c))*i for i in range(1,A.nrows()+2)):
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         plots=plots+[P.plot(fill=colors[num])]
....:         num+=1
....:         Q=Q.intersection(P)
....:     sum(plots)
[ 1  2]
[-1 -1]
Launched png viewer for Graphics object consisting of 21 graphics primitives
Launched png viewer for Graphics object consisting of 20 graphics primitives
sage: A=CartanMatrix(['C',2])
....: c=[0,1]
....: Ref=identity_matrix(A.nrows())
....: for i in c:
....:     Ref=matrix(map(lambda x: reflect(A,x,i),Ref.rows()))
....: Ref=Ref.transpose()
....: print(Ref)
....: for u in sortables(A,c[1:]):
....:     R=p_lambda_faster(-B(A,c),lam(A,u),[])
....:     la=lam(A,u)
....:     colors=rainbow(10)
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
....:     plots=[point(la,size=50).plot(),p_lambda_faster(B(A,c),lam(A,u),[]).pl
....: ot(fill=colors[0])]
....:     num=1
....:     for seq in list(list(reversed(c))*i for i in range(1,A.nrows()+2)):
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         plots=plots+[P.plot(fill=colors[num]),(Ref*P).plot(fill=colors[num
....: +5])]
....:         num+=1
....:         Q=Q.intersection(P)
....:     sum(plots)
[ 1  2]
[-1 -1]
Launched png viewer for Graphics object consisting of 37 graphics primitives
Launched png viewer for Graphics object consisting of 35 graphics primitives
sage: A=CartanMatrix(['C',2])
....: c=[0,1]
....: Ref=identity_matrix(A.nrows())
....: for i in c:
....:     Ref=matrix(map(lambda x: reflect(A,x,i),Ref.rows()))
....: Ref=Ref.transpose()
....: print(Ref)
....: for u in sortables(A,c[1:]):
....:     R=p_lambda_faster(-B(A,c),lam(A,u),[])
....:     la=lam(A,u)
....:     colors=rainbow(10)
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
....:     plots=[point(la,size=50).plot(),p_lambda_faster(B(A,c),lam(A,u),[]).pl
....: ot(fill=colors[0])]
....:     num=1
....:     for seq in list(list(reversed(c))*i for i in range(1,A.nrows()+2)):
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         plots=plots+[P.plot(fill=colors[num]),((Ref*(P.translation(-lam(A,
....: u)))).translation(lam(A,u))).plot(fill=colors[num+5])]
....:         num+=1
....:         Q=Q.intersection(P)
....:     sum(plots)
[ 1  2]
[-1 -1]
Launched png viewer for Graphics object consisting of 37 graphics primitives
Launched png viewer for Graphics object consisting of 35 graphics primitives
sage: A=CartanMatrix(['C',2])
....: c=[0,1]
....: Ref=identity_matrix(A.nrows())
....: for i in c:
....:     Ref=matrix(map(lambda x: reflect(A,x,i),Ref.rows()))
....: Ref=Ref.transpose().inverse()
....: print(Ref)
....: for u in sortables(A,c[1:]):
....:     R=p_lambda_faster(-B(A,c),lam(A,u),[])
....:     la=lam(A,u)
....:     colors=rainbow(10)
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
....:     plots=[point(la,size=50).plot(),p_lambda_faster(B(A,c),lam(A,u),[]).pl
....: ot(fill=colors[0])]
....:     num=1
....:     for seq in list(list(reversed(c))*i for i in range(1,A.nrows()+2)):
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         plots=plots+[P.plot(fill=colors[num]),((Ref*(P.translation(-lam(A,
....: u)))).translation(lam(A,u))).plot(fill=colors[num+5])]
....:         num+=1
....:         Q=Q.intersection(P)
....:     sum(plots)
[-1 -2]
[ 1  1]
Launched png viewer for Graphics object consisting of 37 graphics primitives
Launched png viewer for Graphics object consisting of 35 graphics primitives
sage: A=CartanMatrix(['C',2])
....: c=[0,1]
....: Ref=identity_matrix(A.nrows())
....: for i in c:
....:     Ref=matrix(map(lambda x: reflect(A,x,i),Ref.rows()))
....: Ref=Ref.transpose().inverse()
....: print(Ref)
....: for u in sortables(A,c[1:]):
....:     R=p_lambda_faster(-B(A,c),lam(A,u),[])
....:     la=lam(A,u)
....:     colors=rainbow(10)
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
....:     plots=[point(la,size=50).plot(),p_lambda_faster(B(A,c),la,[]).plot(fil
....: l=colors[0])]
....:     num=1
....:     for seq in list(list(reversed(c))*i for i in range(1,A.nrows()+2)):
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         plots=plots+[P.plot(fill=colors[num]),((Ref*(P.translation(-la))).
....: translation(la)).plot(fill=colors[num+5])]
....:         num+=1
....:         Q=Q.intersection(P)
....:     sum(plots)
....: 
[-1 -2]
[ 1  1]
Launched png viewer for Graphics object consisting of 37 graphics primitives
Launched png viewer for Graphics object consisting of 35 graphics primitives
sage: A=CartanMatrix(['C',2])
....: c=[0,1]
....: Ref=identity_matrix(A.nrows())
....: for i in c:
....:     Ref=matrix(map(lambda x: reflect(A,x,i),Ref.rows()))
....: Ref=Ref.transpose().inverse()
....: print(Ref)
....: for u in sortables(A,c[1:]):
....:     R=p_lambda_faster(-B(A,c),lam(A,u),[])
....:     la=lam(A,u)
....:     colors=rainbow(10)
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
....:     plots=[point(la,size=50).plot(),p_lambda_faster(B(A,c),la,[]).plot(fil
....: l=colors[0])]
....:     num=1
....:     for seq in list(list(reversed(c))*i for i in range(1,A.nrows()+2)):
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         plots=plots+[P.plot(fill=colors[num])]
....:         num+=1
....:         Q=Q.intersection(P)
....:     sum(plots)
....: 
[-1 -2]
[ 1  1]
Launched png viewer for Graphics object consisting of 21 graphics primitives
Launched png viewer for Graphics object consisting of 20 graphics primitives
sage: A=CartanMatrix(['G',2])
....: c=[0,1]
....: for u in sortables(A,c[1:]):
....:     R=p_lambda_faster(-B(A,c),lam(A,u),[])
....:     la=lam(A,u)
....:     colors=rainbow(10)
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
....:     plots=[point(la,size=50).plot(),p_lambda_faster(B(A,c),lam(A,u),[]).pl
....: ot(fill=colors[0])]
....:     num=1
....:     for seq in list(list(reversed(c))*i for i in range(1,A.nrows()+2)):
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         plots=plots+[P.plot(fill=colors[num],alpha=0.5)]
....:         num+=1
....:         Q=Q.intersection(P)
....:     #print(Q)
....:     print(Q.intersection(R)==Q)
....:     sum(plots)
....: 
True
verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-5.0) to (-1.0,-5.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-5.0) to (-1.0,-5.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-5.0) to (-1.0,-5.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (4.0,0.0) to (1.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (4.0,0.0) to (1.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (4.0,0.0) to (1.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (5.5,0.0) to (2.5,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (5.5,0.0) to (2.5,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (5.5,0.0) to (2.5,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-3.0) to (-2.0,-2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-3.0) to (-2.0,-2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-3.0) to (-2.0,-2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (7.0,0.0) to (7.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (7.0,0.0) to (7.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (7.0,0.0) to (7.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-1.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-1.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-1.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

Launched png viewer for Graphics object consisting of 23 graphics primitives
True
verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-3.0) to (-1.0,-3.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-3.0) to (-1.0,-3.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-3.0) to (-1.0,-3.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-2.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-2.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-2.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-2.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-2.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-2.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-2.0,3.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-2.0,3.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-2.0,3.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,1.0) to (-1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,1.0) to (-1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,1.0) to (-1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

Launched png viewer for Graphics object consisting of 22 graphics primitives
sage: A=CartanMatrix(['C',2])
....: c=[0,1]
....: for u in sortables(A,c[1:]):
....:     R=p_lambda_faster(-B(A,c),lam(A,u),[])
....:     la=lam(A,u)
....:     colors=rainbow(10)
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
....:     plots=[point(la,size=50).plot(),p_lambda_faster(B(A,c),lam(A,u),[]).pl
....: ot(fill=colors[0])]
....:     num=1
....:     for seq in list(list(reversed(c))*i for i in range(1,A.nrows()+2)):
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         plots=plots+[P.plot(fill=colors[num],alpha=0.5)]
....:         num+=1
....:         Q=Q.intersection(P)
....:     #print(Q)
....:     print(Q.intersection(R)==Q)
....:     sum(plots)
True
verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-4.0) to (-1.0,-4.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-4.0) to (-1.0,-4.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-4.0) to (-1.0,-4.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (3.0,0.0) to (1.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (3.0,0.0) to (1.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (3.0,0.0) to (1.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (5.0,0.0) to (5.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (5.0,0.0) to (5.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (5.0,0.0) to (5.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-1.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-1.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-1.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (3.0,-1.0) to (3.0,-2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (3.0,-1.0) to (3.0,-2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (3.0,-1.0) to (3.0,-2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (3.0,-1.0) to (4.0,-1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (3.0,-1.0) to (4.0,-1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (3.0,-1.0) to (4.0,-1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

Launched png viewer for Graphics object consisting of 21 graphics primitives
True
verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-2.0) to (-1.0,-2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-2.0) to (-1.0,-2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-2.0) to (-1.0,-2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,1.0) to (-1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,1.0) to (-1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,1.0) to (-1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (1.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (1.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (1.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (2.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (2.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (2.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

Launched png viewer for Graphics object consisting of 20 graphics primitives
sage: A=CartanMatrix(['C',2])
....: c=[0,1]
....: for u in sortables(A,c[1:]):
....:     R=p_lambda_faster(-B(A,c),lam(A,u),[])
....:     la=lam(A,u)
....:     colors=rainbow(10)
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
....:     plots=[point(la,size=50).plot(),p_lambda_faster(B(A,c),lam(A,u),[]).pl
....: ot(fill=colors[0])]
....:     num=1
....:     for seq in list(list(reversed(c))*i for i in range(1,A.nrows()+2)):
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         plots=plots+[P.plot(fill=colors[num])]
....:         num+=1
....:         Q=Q.intersection(P)
....:     #print(Q)
....:     print(Q.intersection(R)==Q)
....:     sum(plots)
True
Launched png viewer for Graphics object consisting of 21 graphics primitives
True
Launched png viewer for Graphics object consisting of 20 graphics primitives
sage: A=CartanMatrix(['C',2])
....: c=[0,1]
....: for u in sortables(A,c[1:]):
....:     R=p_lambda_faster(-B(A,c),lam(A,u),[])
....:     la=lam(A,u)
....:     colors=rainbow(10)
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
....:     plots=[point(la,size=50).plot(),p_lambda_faster(B(A,c),lam(A,u),[]).pl
....: ot(fill=colors[0])]
....:     num=1
....:     for seq in list(list(reversed(c))*i for i in range(1,A.nrows()+2)):
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         #plots=plots+[P.plot(fill=colors[num])]
....:         num+=1
....:         Q=Q.intersection(P)
....:     #print(Q)
....:     print(Q.intersection(R)==Q)
....:     sum(plots)
True
Launched png viewer for Graphics object consisting of 5 graphics primitives
True
Launched png viewer for Graphics object consisting of 5 graphics primitives
sage: A=CartanMatrix(['C',2])
....: c=[0,1]
....: for u in sortables(A,c[1:]):
....:     R=p_lambda_faster(-B(A,c),lam(A,u),[])
....:     la=lam(A,u)
....:     colors=rainbow(10)
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
....:     plots=[point(la,size=50).plot(),p_lambda_faster(B(A,c),lam(A,u),[]).pl
....: ot(fill=colors[0])]
....:     num=1
....:     for seq in list(list(reversed(c))*i for i in range(1,A.nrows()+1)):
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         plots=plots+[P.plot(fill=colors[num])]
....:         num+=1
....:         Q=Q.intersection(P)
....:     #print(Q)
....:     print(Q.intersection(R)==Q)
....:     sum(plots)
True
Launched png viewer for Graphics object consisting of 17 graphics primitives
True
Launched png viewer for Graphics object consisting of 16 graphics primitives
sage: A=CartanMatrix(['C',2])
....: c=[0,1]
....: for u in sortables(A,c[1:]):
....:     R=p_lambda_faster(-B(A,c),lam(A,u),[])
....:     la=lam(A,u)
....:     colors=rainbow(10)
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
....:     plots=[point(la,size=50).plot(),p_lambda_faster(B(A,c),lam(A,u),[]).pl
....: ot(fill=colors[0])]
....:     num=1
....:     for seq in list(list(reversed(c))*i for i in range(1,A.nrows()+1)):
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         plots=plots+[P.plot(fill=colors[num],alpha=0.5)]
....:         num+=1
....:         Q=Q.intersection(P)
....:     #print(Q)
....:     print(Q.intersection(R)==Q)
....:     sum(plots)
True
verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-4.0) to (-1.0,-4.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-4.0) to (-1.0,-4.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-4.0) to (-1.0,-4.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (3.0,0.0) to (1.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (3.0,0.0) to (1.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (3.0,0.0) to (1.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (5.0,0.0) to (5.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (5.0,0.0) to (5.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (5.0,0.0) to (5.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-1.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-1.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-1.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

Launched png viewer for Graphics object consisting of 17 graphics primitives
True
verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-2.0) to (-1.0,-2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-2.0) to (-1.0,-2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-2.0) to (-1.0,-2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,1.0) to (-1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,1.0) to (-1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,1.0) to (-1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

Launched png viewer for Graphics object consisting of 16 graphics primitives
sage: A=CartanMatrix(['G',2])
....: c=[0,1]
....: for u in sortables(A,c[1:]):
....:     R=p_lambda_faster(-B(A,c),lam(A,u),[])
....:     la=lam(A,u)
....:     colors=rainbow(10)
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
....:     plots=[point(la,size=50).plot(),p_lambda_faster(B(A,c),lam(A,u),[]).pl
....: ot(fill=colors[0])]
....:     num=1
....:     for seq in list(list(reversed(c))*i for i in range(1,A.nrows()+2)):
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         plots=plots+[P.plot(fill=colors[num],alpha=0.5)]
....:         num+=1
....:         Q=Q.intersection(P)
....:     #print(Q)
....:     print(Q.intersection(R)==Q)
....:     sum(plots)
True
verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-5.0) to (-1.0,-5.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-5.0) to (-1.0,-5.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-5.0) to (-1.0,-5.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (4.0,0.0) to (1.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (4.0,0.0) to (1.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (4.0,0.0) to (1.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (5.5,0.0) to (2.5,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (5.5,0.0) to (2.5,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (5.5,0.0) to (2.5,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-3.0) to (-2.0,-2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-3.0) to (-2.0,-2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-3.0) to (-2.0,-2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (7.0,0.0) to (7.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (7.0,0.0) to (7.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (7.0,0.0) to (7.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-1.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-1.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-1.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

Launched png viewer for Graphics object consisting of 23 graphics primitives
True
verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-3.0) to (-1.0,-3.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-3.0) to (-1.0,-3.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-3.0) to (-1.0,-3.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-2.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-2.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-2.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-2.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-2.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-2.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-2.0,3.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-2.0,3.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-2.0,3.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,1.0) to (-1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,1.0) to (-1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,1.0) to (-1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

Launched png viewer for Graphics object consisting of 22 graphics primitives
sage: A=CartanMatrix(['G',2])
....: c=[0,1]
....: for u in sortables(A,c[1:]):
....:     R=p_lambda_faster(-B(A,c),lam(A,u),[])
....:     la=lam(A,u)
....:     colors=rainbow(10)
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
....:     plots=[point(la,size=50).plot(),p_lambda_faster(B(A,c),lam(A,u),[]).pl
....: ot(fill=colors[0])]
....:     num=1
....:     for seq in list(list(reversed(c))*i for i in range(1,A.nrows()+2)):
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         plots=plots+[P.plot(fill=colors[num],alpha=0.5)]
....:         num+=1
....:         Q=Q.intersection(P)
....:     #print(Q)
....:     print(Q.intersection(R)==Q)
....:     sum(plots)
....: 
True
verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-5.0) to (-1.0,-5.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-5.0) to (-1.0,-5.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-5.0) to (-1.0,-5.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (4.0,0.0) to (1.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (4.0,0.0) to (1.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (4.0,0.0) to (1.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (5.5,0.0) to (2.5,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (5.5,0.0) to (2.5,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (5.5,0.0) to (2.5,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-3.0) to (-2.0,-2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-3.0) to (-2.0,-2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-3.0) to (-2.0,-2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (7.0,0.0) to (7.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (7.0,0.0) to (7.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (7.0,0.0) to (7.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-1.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-1.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-1.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

Launched png viewer for Graphics object consisting of 23 graphics primitives
True
verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-3.0) to (-1.0,-3.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-3.0) to (-1.0,-3.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-3.0) to (-1.0,-3.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-2.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-2.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-2.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-2.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-2.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-2.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-2.0,3.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-2.0,3.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-2.0,3.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,1.0) to (-1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,1.0) to (-1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,1.0) to (-1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

Launched png viewer for Graphics object consisting of 22 graphics primitives
sage: A=CartanMatrix(['G',2])
....: c=[0,1]
....: for u in sortables(A,c[1:]):
....:     R=p_lambda_faster(-B(A,c),lam(A,u),[])
....:     la=lam(A,u)
....:     colors=rainbow(10)
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
....:     plots=[point(la,size=50).plot(),p_lambda_faster(B(A,c),lam(A,u),[]).pl
....: ot(fill=colors[0])]
....:     num=1
....:     for seq in list(list(reversed(c))*i for i in range(1,A.nrows()+2)):
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         plots=plots+[P.plot(fill=colors[num],alpha=0.5)]
....:         num+=1
....:         Q=Q.intersection(P)
....:     #print(Q)
....:     print(Q.intersection(R)==Q)
....:     sum(plots)
....: 
True
verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-5.0) to (-1.0,-5.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-5.0) to (-1.0,-5.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-5.0) to (-1.0,-5.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (4.0,0.0) to (1.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (4.0,0.0) to (1.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (4.0,0.0) to (1.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (5.5,0.0) to (2.5,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (5.5,0.0) to (2.5,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (5.5,0.0) to (2.5,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-3.0) to (-2.0,-2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-3.0) to (-2.0,-2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-3.0) to (-2.0,-2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (7.0,0.0) to (7.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (7.0,0.0) to (7.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (7.0,0.0) to (7.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-1.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-1.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-1.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

Launched png viewer for Graphics object consisting of 23 graphics primitives
True
verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-3.0) to (-1.0,-3.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-3.0) to (-1.0,-3.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-3.0) to (-1.0,-3.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-2.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-2.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-2.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-2.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-2.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-2.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-2.0,3.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-2.0,3.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-2.0,3.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,1.0) to (-1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,1.0) to (-1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,1.0) to (-1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

Launched png viewer for Graphics object consisting of 22 graphics primitives
sage: A=CartanMatrix(['G',2])
....: c=[0,1]
....: for u in sortables(A,c[1:]):
....:     R=p_lambda_faster(-B(A,c),lam(A,u),[])
....:     la=lam(A,u)
....:     colors=rainbow(10)
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
....:     plots=[point(la,size=50).plot(),p_lambda_faster(B(A,c),lam(A,u),[]).pl
....: ot(fill=colors[0])]
....:     num=1
....:     for seq in list(list(reversed(c))*i for i in range(1,A.nrows()+2)):
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         plots=plots+[P.plot(fill=colors[num],alpha=0.5)]
....:         num+=1
....:         Q=Q.intersection(P)
....:     #print(Q)
....:     print(Q.intersection(R)==Q)
....:     sum(plots)
....: 
True
verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-5.0) to (-1.0,-5.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-5.0) to (-1.0,-5.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-5.0) to (-1.0,-5.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (4.0,0.0) to (1.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (4.0,0.0) to (1.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (4.0,0.0) to (1.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (5.5,0.0) to (2.5,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (5.5,0.0) to (2.5,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (5.5,0.0) to (2.5,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-3.0) to (-2.0,-2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-3.0) to (-2.0,-2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-3.0) to (-2.0,-2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (7.0,0.0) to (7.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (7.0,0.0) to (7.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (7.0,0.0) to (7.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-1.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-1.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-1.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

Launched png viewer for Graphics object consisting of 23 graphics primitives
True
verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-3.0) to (-1.0,-3.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-3.0) to (-1.0,-3.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-3.0) to (-1.0,-3.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-2.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-2.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-2.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-2.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-2.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-2.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-2.0,3.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-2.0,3.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-2.0,3.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,1.0) to (-1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,1.0) to (-1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,1.0) to (-1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

Launched png viewer for Graphics object consisting of 22 graphics primitives
sage: A=CartanMatrix(['G',2])
....: c=[0,1]
....: for u in sortables(A,c[1:]):
....:     R=p_lambda_faster(-B(A,c),lam(A,u),[])
....:     la=lam(A,u)
....:     colors=rainbow(10)
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
....:     plots=[point(la,size=50).plot(),p_lambda_faster(B(A,c),lam(A,u),[]).pl
....: ot(fill=colors[0])]
....:     num=1
....:     for seq in list(c*i for i in range(1,A.nrows()+2)):
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         plots=plots+[P.plot(fill=colors[num],alpha=0.5)]
....:         num+=1
....:         Q=Q.intersection(P)
....:     #print(Q)
....:     print(Q.intersection(R)==Q)
....:     sum(plots)
True
verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-1.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-1.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-1.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (7.0,0.0) to (7.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (7.0,0.0) to (7.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (7.0,0.0) to (7.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-3.0) to (-2.0,-2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-3.0) to (-2.0,-2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-3.0) to (-2.0,-2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (5.5,0.0) to (2.5,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (5.5,0.0) to (2.5,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (5.5,0.0) to (2.5,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-5.0) to (-1.0,-5.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-5.0) to (-1.0,-5.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-5.0) to (-1.0,-5.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (4.0,0.0) to (1.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (4.0,0.0) to (1.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (4.0,0.0) to (1.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

Launched png viewer for Graphics object consisting of 23 graphics primitives
True
verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,1.0) to (-1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,1.0) to (-1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,1.0) to (-1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-2.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-2.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-2.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-2.0,3.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-2.0,3.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-2.0,3.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-3.0) to (-1.0,-3.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-3.0) to (-1.0,-3.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-3.0) to (-1.0,-3.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-2.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-2.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-2.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

Launched png viewer for Graphics object consisting of 22 graphics primitives
sage: A=CartanMatrix(['G',2])
....: c=[0,1]
....: for u in sortables(A,c[1:]):
....:     R=p_lambda_faster(-B(A,c),lam(A,u),[])
....:     la=lam(A,u)
....:     colors=rainbow(10)
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
....:     plots=[point(la,size=50).plot(),p_lambda_faster(B(A,c),lam(A,u),[]).pl
....: ot(fill=colors[0])]
....:     num=1
....:     for seq in list(c*i for i in range(1,A.nrows()+2)):
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         plots=plots+[P.plot(fill=colors[num],alpha=0.5)]
....:         num+=1
....:         Q=Q.intersection(P)
....:     #print(Q)
....:     print(Q.intersection(R)==Q)
....:     sum(plots)
....: 
True
verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-1.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-1.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-1.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (7.0,0.0) to (7.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (7.0,0.0) to (7.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (7.0,0.0) to (7.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-3.0) to (-2.0,-2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-3.0) to (-2.0,-2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-3.0) to (-2.0,-2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (5.5,0.0) to (2.5,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (5.5,0.0) to (2.5,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (5.5,0.0) to (2.5,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-5.0) to (-1.0,-5.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-5.0) to (-1.0,-5.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-5.0) to (-1.0,-5.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (4.0,0.0) to (1.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (4.0,0.0) to (1.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (4.0,0.0) to (1.0,1.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

Launched png viewer for Graphics object consisting of 23 graphics primitives
True
verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,1.0) to (-1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,1.0) to (-1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,1.0) to (-1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (1.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-2.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-2.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-1.0) to (-2.0,0.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-2.0,3.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-2.0,3.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-2.0,3.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-3.0) to (-1.0,-3.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-3.0) to (-1.0,-3.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (0.0,-3.0) to (-1.0,-3.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-2.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.500000000000000
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-2.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

verbose 0 (163: primitive.py, options) WARNING: Ignoring option 'alpha'=0.5
verbose 0 (163: primitive.py, options) 
The allowed options for Arrow from (1.0,1.0) to (-2.0,2.0) are:
    arrowshorten   The length in points to shorten the arrow.                  
    arrowsize      The size of the arrowhead                                   
    head           2-d only: Which end of the path to draw the head (one of 0 (start), 1 (end) or 2 (both)
    hue            The color given as a hue.                                   
    legend_color   The color of the legend text.                               
    legend_label   The label for this item in the legend.                      
    linestyle      2d only: The style of the line, which is one of 'dashed', 'dotted', 'solid', 'dashdot', or '--', ':', '-', '-.', respectively.
    rgbcolor       The color as an RGB tuple.                                  
    thickness      The thickness of the arrow.                                 
    width          The width of the shaft of the arrow, in points.             
    zorder         2-d only: The layer level in which to draw                  

Launched png viewer for Graphics object consisting of 22 graphics primitives
sage: A=CartanMatrix(['C',2])
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: for u in sortables(A,c[1:]):
....:     R=p_lambda_faster(-B(A,c),lam(A,u),[])
....:     la=lam(A,u)
....:     colors=rainbow(10)
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
....:     plots=[point(la,size=50).plot(),p_lambda_faster(B(A,c),lam(A,u),[]).pl
....: ot(fill=colors[0],alpha=0.5)]
....:     num=1
....:     for seq in list(list(reversed(c))*i for i in range(1,A.nrows()+1)):
....:         sc=1/100
....:         t=vector((num*sc,0,num*sc))
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:         num+=1
....:         Q=Q.intersection(P)
....:     #print(Q)
....:     print(Q.intersection(R)==Q)
....:     sum(plots)
....: 
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: for u in sortables(A,c[1:]):
....:     R=p_lambda_faster(-B(A,c),lam(A,u),[])
....:     la=lam(A,u)
....:     colors=rainbow(10)
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
....:     plots=[point(la,size=50).plot(),p_lambda_faster(B(A,c),lam(A,u),[]).pl
....: ot(fill=colors[0],alpha=0.5)]
....:     num=1
....:     for seq in list(list(reversed(c))*i for i in range(1,A.nrows()+1)):
....:         sc=1/100
....:         t=vector((num*sc,0,num*sc))
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:         num+=1
....:         Q=Q.intersection(P)
....:     #print(Q)
....:     print(Q.intersection(R)==Q)
....:     sum(plots)
....:     input()
....: 
True
Launched html viewer for Graphics3d Object

''
True
Launched html viewer for Graphics3d Object

''
True
Launched html viewer for Graphics3d Object

''
True
Launched html viewer for Graphics3d Object

''
True
Launched html viewer for Graphics3d Object

''
True
Launched html viewer for Graphics3d Object

''
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: for u in sortables(A,c[1:]):
....:     R=p_lambda_faster(-B(A,c),lam(A,u),[])
....:     la=lam(A,u)
....:     colors=rainbow(10)
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
....:     plots=[point(la,size=50).plot(),p_lambda_faster(B(A,c),lam(A,u),[]).pl
....: ot(fill=colors[0],alpha=0.5)]
....:     num=1
....:     for seq in list(list(reversed(c))*i for i in range(1,A.nrows()+1)):
....:         sc=1/100
....:         t=vector((num*sc,0,num*sc))
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:         num+=1
....:         Q=Q.intersection(P)
....:     #print(Q)
....:     print(Q.intersection(R)==Q)
....:     sum(plots)
....:     print(u)
....:     input()
....: 
True
Launched html viewer for Graphics3d Object
[2, 1, 2, 1]

''
True
Launched html viewer for Graphics3d Object
[2, 1, 2]

''
True
Launched html viewer for Graphics3d Object
[2, 1]

''
True
Launched html viewer for Graphics3d Object
[2]
^[[A
'\x1b[A'
True
Launched html viewer for Graphics3d Object
[1]
^[[A
'\x1b[A'
True
Launched html viewer for Graphics3d Object
[]

''
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: for u in sortables(A,c[1:]):
....:     R=p_lambda_faster(-B(A,c),lam(A,u),[])
....:     la=lam(A,u)
....:     colors=rainbow(10)
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
....:     plots=[point(la,size=50).plot(),p_lambda_faster(B(A,c),lam(A,u),[]).pl
....: ot(fill=colors[0],alpha=0.5)]
....:     num=1
....:     for seq in list(list(reversed(c))*i for i in range(1,A.nrows()+1)):
....:         sc=1/100
....:         t=vector((num*sc,0,num*sc))
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:         num+=1
....:         Q=Q.intersection(P)
....:     #print(Q)
....:     print(Q.intersection(R)==Q)
....:     sum(plots)
....: 
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: for u in sortables(A,c[1:]):
....:     R=p_lambda_faster(-B(A,c),lam(A,u),[])
....:     la=lam(A,u)
....:     colors=rainbow(10)
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
....:     plots=[point(la,size=50).plot(),p_lambda_faster(B(A,c),lam(A,u),[]).pl
....: ot(fill=colors[0],alpha=0.5)]
....:     num=1
....:     for seq in list(list(reversed(c))*i for i in range(1,A.nrows()+1)):
....:         sc=1/100
....:         t=vector((num*sc,0,num*sc))
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:         num+=1
....:         Q=Q.intersection(P)
....:     #print(Q)
....:     print(Q.intersection(R)==Q)
....:     sum(plots)
....: 
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: plots=[point(la,size=50)]
....: num=0
....: sc=1/100
....: colors=rainbow(10)
....: for u in sortables(A,c[1:]):
....:     t=vector((num*sc,0,num*sc))
....:     la=lam(A,u)
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
....:     plots=plots+[(Q.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....: sum(plots)
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: plots=[point(la,size=50)]
....: num=0
....: sc=1/1000
....: colors=rainbow(10)
....: for u in sortables(A,c[1:]):
....:     t=vector((num*sc,0,num*sc))
....:     la=lam(A,u)
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
....:     plots=plots+[(Q.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....: sum(plots)
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: plots=[point(la,size=50)]
....: num=0
....: sc=0
....: colors=rainbow(10)
....: for u in sortables(A,c[1:]):
....:     t=vector((num*sc,0,num*sc))
....:     la=lam(A,u)
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
....:     plots=plots+[(Q.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....: sum(plots)
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: plots=[point(la,size=50)]
....: num=0
....: sc=1/100
....: colors=rainbow(10)
....: for u in sortables(A,c[1:]):
....:     t=vector((num*sc,0,num*sc))
....:     la=lam(A,u)
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
....:     plots=plots+[(Q.translation(t-la)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....: sum(plots)
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: plots=[point(vector((0,0,0)),size=50)]
....: num=0
....: sc=1/100
....: colors=rainbow(10)
....: for u in sortables(A,c[1:]):
....:     t=vector((num*sc,0,num*sc))
....:     la=lam(A,u)
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
....:     plots=plots+[(Q.translation(t-la)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....: sum(plots)
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: plots=[point(vector((0,0,0)),size=50)]
....: num=0
....: sc=1/100
....: colors=rainbow(10)
....: for u in sortables(A,c[1:]):
....:     t=vector((num*sc,0,num*sc))
....:     la=lam(A,u)
....:     Q=p_lambda_faster(B(A,c),la,c)
....:     plots=plots+[(Q.translation(t-la)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....: sum(plots)
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: plots=[point(vector((0,0,0)),size=50)]
....: num=0
....: sc=1/100
....: colors=rainbow(10)
....: for u in sortables(A,c[1:]):
....:     t=vector((num*sc,0,num*sc))
....:     Bplus=block_matrix([[B(A,c),matrix(lam(A,c)).transpose()]])
....:     for k in reversed(c):
....:         B.mutate(k)
....:     la=B[:,-1]
....:     Q=p_lambda_faster(B(A,c),la,c)
....:     plots=plots+[(Q.translation(t-la)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....: sum(plots)
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
Cell In [1268], line 11
      9 Bplus=block_matrix([[B(A,c),matrix(lam(A,c)).transpose()]])
     10 for k in reversed(c):
---> 11     B.mutate(k)
     12 la=B[:,-Integer(1)]
     13 Q=p_lambda_faster(B(A,c),la,c)

AttributeError: 'function' object has no attribute 'mutate'
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: plots=[point(vector((0,0,0)),size=50)]
....: num=0
....: sc=1/100
....: colors=rainbow(10)
....: for u in sortables(A,c[1:]):
....:     t=vector((num*sc,0,num*sc))
....:     Bplus=block_matrix([[B(A,c),matrix(lam(A,c)).transpose()]])
....:     for k in reversed(c):
....:         Bplus.mutate(k)
....:     la=Bplus[:,-1]
....:     Q=p_lambda_faster(B(A,c),la,c)
....:     plots=plots+[(Q.translation(t-la)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....: sum(plots)
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/special.py:2066, in block_matrix(*args, **kwds)
   2065 try:
-> 2066     (row_heights, col_widths) = _determine_block_matrix_grid(sub_matrices)
   2067 except ValueError as e:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/special.py:1622, in _determine_block_matrix_grid(sub_matrices)
   1621                 elif row_heights[i] != sub_height:
-> 1622                     raise ValueError("incompatible submatrix heights")
   1624 if None in row_heights or None in col_widths:

ValueError: incompatible submatrix heights

During handling of the above exception, another exception occurred:

ValueError                                Traceback (most recent call last)
Cell In [1269], line 13
     11     Bplus.mutate(k)
     12 la=Bplus[:,-Integer(1)]
---> 13 Q=p_lambda_faster(B(A,c),la,c)
     14 plots=plots+[(Q.translation(t-la)).plot(fill=colors[num],alpha=RealNumber('0.5'))]
     15 num+=Integer(1)

File ~/git/affine_dominance/software/domination4.py:137, in p_lambda_faster(B, la, seq)
    135 rk = B.rank()
    136 n = B.ncols()
--> 137 B = block_matrix([[B,matrix(la).transpose()]])
    138 for k in seq:
    139     B.mutate(k)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/special.py:2069, in block_matrix(*args, **kwds)
   2067     except ValueError as e:
   2068         if subdivide:
-> 2069             raise ValueError(e)
   2071 if col_widths is None:
   2072     # Try placing the matrices in rows instead
   2073     # (Only if subdivide is False)
   2074     (row_heights, zero_widths, total_width) = _determine_block_matrix_rows(sub_matrices)

ValueError: incompatible submatrix heights
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: plots=[point(vector((0,0,0)),size=50)]
....: num=0
....: sc=1/100
....: colors=rainbow(10)
....: for u in sortables(A,c[1:]):
....:     t=vector((num*sc,0,num*sc))
....:     Bplus=block_matrix([[B(A,c),matrix(lam(A,c)).transpose()]])
....:     for k in reversed(c):
....:         Bplus.mutate(k)
....:     la=vector(Bplus[:,-1])
....:     Q=p_lambda_faster(B(A,c),la,c)
....:     plots=plots+[(Q.translation(t-la)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....: sum(plots)
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: plots=[point(vector((0,0,0)),size=50)]
....: num=0
....: sc=1/100
....: colors=rainbow(10)
....: for u in sortables(A,c[1:]):
....:     t=vector((num*sc,0,num*sc))
....:     Bplus=block_matrix([[B(A,c),matrix(lam(A,u)).transpose()]])
....:     for k in reversed(c):
....:         Bplus.mutate(k)
....:     la=vector(Bplus[:,-1])
....:     Q=p_lambda_faster(B(A,c),la,c)
....:     plots=plots+[(Q.translation(t-la)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....: sum(plots)
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: plots=[point(vector((0,0,0)),size=50)]
....: num=0
....: sc=1/100
....: colors=rainbow(20)
....: for u in sortables(A,c[1:]):
....:     t=vector((num*sc,0,num*sc))
....:     Bplus=block_matrix([[B(A,c),matrix(lam(A,u)).transpose()]])
....:     for k in reversed(c):
....:         Bplus.mutate(k)
....:     la=vector(Bplus[:,-1])
....:     Q=p_lambda_cone(B(A,c),la,[c])
....:     plots=plots+[(Q.translation(t-la)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....: #for i in range(coxeter_number(A)/2):   
....: sum(plots)
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: plots=[point(vector((0,0,0)),size=50)]
....: num=0
....: sc=1/100
....: colors=rainbow(20)
....: for u in sortables(A,c[1:]):
....:     t=vector((num*sc,0,num*sc))
....:     Bplus=block_matrix([[B(A,c),matrix(lam(A,u)).transpose()]])
....:     for k in reversed(c):
....:         Bplus.mutate(k)
....:     la=vector(Bplus[:,-1])
....:     Q=p_lambda_faster(B(A,c),la,c)
....:     plots=plots+[(Q.translation(t-la)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....: #for i in range(coxeter_number(A)/2):   
....: sum(plots)
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: plots=[point(vector((0,0,0)),size=50)]
....: num=0
....: sc=1/100
....: colors=rainbow(20)
....: for u in sortables(A,c[1:]):
....:     t=vector((num*sc,0,num*sc))
....:     Bplus=block_matrix([[B(A,c),matrix(lam(A,u)).transpose()]])
....:     for k in reversed(c):
....:         Bplus.mutate(k)
....:     la=vector(Bplus[:,-1])
....:     Q=p_lambda_faster(B(A,c),la,c)
....:     plots=plots+[(Q.translation(t-la)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....: num=0
....: la=lam(A,[])
....: for i in range(coxeter_number(A)/2):
....:     t=vector((num*sc,0,num*sc))
....:     Q=p_lambda_faster(B(A,c),la,c*i)
....:     plots=plots+[(Q.translation(t-la)).plot(fill=colors[num+10],alpha=0.5)
....: ]
....: sum(plots)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In [1274], line 18
     16 num=Integer(0)
     17 la=lam(A,[])
---> 18 for i in range(coxeter_number(A)/Integer(2)):
     19     t=vector((num*sc,Integer(0),num*sc))
     20     Q=p_lambda_faster(B(A,c),la,c*i)

TypeError: 'float' object cannot be interpreted as an integer
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: plots=[point(vector((0,0,0)),size=50)]
....: num=0
....: sc=1/100
....: colors=rainbow(20)
....: for u in sortables(A,c[1:]):
....:     t=vector((num*sc,0,num*sc))
....:     Bplus=block_matrix([[B(A,c),matrix(lam(A,u)).transpose()]])
....:     for k in reversed(c):
....:         Bplus.mutate(k)
....:     la=vector(Bplus[:,-1])
....:     Q=p_lambda_faster(B(A,c),la,c)
....:     plots=plots+[(Q.translation(t-la)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....: num=0
....: la=lam(A,[])
....: for i in range(coxeter_number(A)//2):
....:     t=vector((num*sc,0,num*sc))
....:     Q=p_lambda_faster(B(A,c),la,c*i)
....:     plots=plots+[(Q.translation(t-la)).plot(fill=colors[num+10],alpha=0.5)
....: ]
....: sum(plots)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In [1275], line 18
     16 num=Integer(0)
     17 la=lam(A,[])
---> 18 for i in range(coxeter_number(A)//Integer(2)):
     19     t=vector((num*sc,Integer(0),num*sc))
     20     Q=p_lambda_faster(B(A,c),la,c*i)

TypeError: 'float' object cannot be interpreted as an integer
### reloading attached file domination4.py modified at 12:49:13 ###
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: plots=[point(vector((0,0,0)),size=50)]
....: num=0
....: sc=1/100
....: colors=rainbow(20)
....: for u in sortables(A,c[1:]):
....:     t=vector((num*sc,0,num*sc))
....:     Bplus=block_matrix([[B(A,c),matrix(lam(A,u)).transpose()]])
....:     for k in reversed(c):
....:         Bplus.mutate(k)
....:     la=vector(Bplus[:,-1])
....:     Q=p_lambda_faster(B(A,c),la,c)
....:     plots=plots+[(Q.translation(t-la)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....: num=0
....: la=lam(A,[])
....: for i in range(coxeter_number(A)//2):
....:     t=vector((num*sc,0,num*sc))
....:     Q=p_lambda_faster(B(A,c),la,c*i)
....:     plots=plots+[(Q.translation(t-la)).plot(fill=colors[num+10],alpha=0.5)
....: ]
....: sum(plots)
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: plots=[point(vector((0,0,0)),size=50)]
....: num=0
....: sc=1/100
....: colors=rainbow(40)
....: for u in sortables(A,c[1:]):
....:     t=vector((num*sc,0,num*sc))
....:     Bplus=block_matrix([[B(A,c),matrix(lam(A,u)).transpose()]])
....:     for k in reversed(c):
....:         Bplus.mutate(k)
....:     la=vector(Bplus[:,-1])
....:     Q=p_lambda_faster(B(A,c),la,c)
....:     plots=plots+[(Q.translation(t-la)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....: num=0
....: la=lam(A,[])
....: for i in range(coxeter_number(A)//2):
....:     t=vector((num*sc,0,num*sc))
....:     Q=p_lambda_faster(B(A,c),la,c*i)
....:     plots=plots+[(Q.translation(t-la)).plot(fill=colors[num+20],alpha=0.5)
....: ]
....: sum(plots)
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: plots=[point(vector((0,0,0)),size=50)]
....: num=0
....: sc=1/50
....: colors=rainbow(40)
....: for u in sortables(A,c[1:]):
....:     t=vector((num*sc,0,num*sc))
....:     Bplus=block_matrix([[B(A,c),matrix(lam(A,u)).transpose()]])
....:     for k in reversed(c):
....:         Bplus.mutate(k)
....:     la=vector(Bplus[:,-1])
....:     Q=p_lambda_faster(B(A,c),la,c)
....:     plots=plots+[(Q.translation(t-la)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....: num=0
....: la=lam(A,[])
....: for i in range(coxeter_number(A)//2):
....:     t=vector((num*sc,0,num*sc))
....:     Q=p_lambda_faster(B(A,c),la,c*i)
....:     plots=plots+[(Q.translation(t-la)).plot(fill=colors[num+20],alpha=0.5)
....: ]
....: sum(plots)
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: plots=[point(vector((0,0,0)),size=50)]
....: num=0
....: sc=1/5
....: colors=rainbow(40)
....: for u in sortables(A,c[1:]):
....:     t=vector((num*sc,0,num*sc))
....:     Bplus=block_matrix([[B(A,c),matrix(lam(A,u)).transpose()]])
....:     for k in reversed(c):
....:         Bplus.mutate(k)
....:     la=vector(Bplus[:,-1])
....:     Q=p_lambda_faster(B(A,c),la,c)
....:     plots=plots+[(Q.translation(t-la)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....: num=0
....: la=lam(A,[])
....: for i in range(coxeter_number(A)//2):
....:     t=vector((num*sc,0,num*sc))
....:     Q=p_lambda_faster(B(A,c),la,c*i)
....:     plots=plots+[(Q.translation(t-la)).plot(fill=colors[num+20],alpha=0.5)
....: ]
....: sum(plots)
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: plots=[point(vector((0,0,0)),size=50)]
....: num=0
....: sc=1/5
....: colors=rainbow(40)
....: for u in sortables(A,c[1:]):
....:     t=vector((num*sc,0,num*sc))
....:     Bplus=block_matrix([[B(A,c),matrix(lam(A,u)).transpose()]])
....:     for k in reversed(c):
....:         Bplus.mutate(k)
....:     la=vector(Bplus[:,-1])
....:     Q=p_lambda_faster(B(A,c),la,c)
....:     plots=plots+[(Q.translation(t-la)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....: num=0
....: la=lam(A,[])
....: for i in range(coxeter_number(A)//2):
....:     t=vector((num*sc,0,num*sc))
....:     Q=p_lambda_faster(B(A,c),la,c*i)
....:     plots=plots+[(Q.translation(t-la)).plot(fill=colors[num+20],alpha=0.5)
....: ]
....:     num+=1
....: sum(plots)
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: plots=[point(vector((0,0,0)),size=50)]
....: num=0
....: sc=1/5
....: colors=rainbow(40)
....: for u in sortables(A,c[1:]):
....:     t=vector((num*sc,0,-num*sc))
....:     Bplus=block_matrix([[B(A,c),matrix(lam(A,u)).transpose()]])
....:     for k in reversed(c):
....:         Bplus.mutate(k)
....:     la=vector(Bplus[:,-1])
....:     Q=p_lambda_faster(B(A,c),la,c)
....:     plots=plots+[(Q.translation(t-la)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....: num=0
....: la=lam(A,[])
....: for i in range(coxeter_number(A)//2):
....:     t=vector((num*sc,0,-num*sc))
....:     Q=p_lambda_faster(B(A,c),la,c*i)
....:     plots=plots+[(Q.translation(t-la)).plot(fill=colors[num+20],alpha=0.5)
....: ]
....:     num+=1
....: sum(plots)
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: plots=[point(vector((0,0,0)),size=50)]
....: num=0
....: sc=1/20
....: colors=rainbow(40)
....: for u in sortables(A,c[1:]):
....:     t=vector((num*sc,0,-num*sc))
....:     Bplus=block_matrix([[B(A,c),matrix(lam(A,u)).transpose()]])
....:     for k in reversed(c):
....:         Bplus.mutate(k)
....:     la=vector(Bplus[:,-1])
....:     Q=p_lambda_faster(B(A,c),la,c)
....:     plots=plots+[(Q.translation(t-la)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....: num=0
....: la=lam(A,[])
....: for i in range(coxeter_number(A)//2):
....:     t=vector((-num*sc,0,num*sc))
....:     Q=p_lambda_faster(B(A,c),la,c*i)
....:     plots=plots+[(Q.translation(t-la)).plot(fill=colors[num+20],alpha=0.5)
....: ]
....:     num+=1
....: sum(plots)
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: plots=[point(vector((0,0,0)),size=50)]
....: num=0
....: sc=1/20
....: colors=rainbow(40)
....: for u in sortables(A,c[1:]):
....:     t=vector((num*sc,0,-num*sc))
....:     Bplus=block_matrix([[B(A,c),matrix(lam(A,u)).transpose()]])
....:     for k in reversed(c):
....:         Bplus.mutate(k)
....:     la=vector(Bplus[:,-1])
....:     Q=p_lambda_faster(B(A,c),la,c)
....:     plots=plots+[(Q.translation(t-la)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....: num=0
....: la=lam(A,[])
....: for i in range(coxeter_number(A)//2):
....:     t=vector((-num*sc,0,num*sc))
....:     Q=p_lambda_faster(B(A,c),la,c*i)
....:     plots=plots+[(Q.translation(t-la)).plot(fill=colors[num+20],alpha=0.5)
....: ]
....:     num+=1
....: sum(plots)
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: plots=[point(vector((0,0,0)),size=50)]
....: num=0
....: sc=1/20
....: colors=rainbow(40)
....: for u in sortables(A,c[1:]):
....:     t=vector((num*sc,0,-num*sc))
....:     Bplus=block_matrix([[B(A,c),matrix(lam(A,u)).transpose()]])
....:     for k in reversed(c):
....:         Bplus.mutate(k)
....:     la=vector(Bplus[:,-1])
....:     Q=p_lambda_faster(B(A,c),la,c)
....:     plots=plots+[(Q.translation(t-la)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....: num=0
....: la=lam(A,[2])
....: for i in range(coxeter_number(A)//2):
....:     t=vector((-num*sc,0,num*sc))
....:     Q=p_lambda_faster(B(A,c),la,c*i)
....:     plots=plots+[(Q.translation(t-la)).plot(fill=colors[num+20],alpha=0.5)
....: ]
....:     num+=1
....: sum(plots)
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: plots=[point(vector((0,0,0)),size=50)]
....: num=0
....: sc=1/20
....: colors=rainbow(40)
....: for u in sortables(A,c[1:]):
....:     t=vector((num*sc,0,-num*sc))
....:     Bplus=block_matrix([[B(A,c),matrix(lam(A,u)).transpose()]])
....:     for k in reversed(c):
....:         Bplus.mutate(k)
....:     la=vector(Bplus[:,-1])
....:     Q=p_lambda_faster(B(A,c),la,c)
....:     plots=plots+[(Q.translation(t-la)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....: num=0
....: la=lam(A,[2,1])
....: for i in range(coxeter_number(A)//2):
....:     t=vector((-num*sc,0,num*sc))
....:     Q=p_lambda_faster(B(A,c),la,c*i)
....:     plots=plots+[(Q.translation(t-la)).plot(fill=colors[num+20],alpha=0.5)
....: ]
....:     num+=1
....: sum(plots)
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: plots=[point(vector((0,0,0)),size=50)]
....: num=0
....: sc=1/20
....: colors=rainbow(40)
....: for u in sortables(A,c[1:]):
....:     t=vector((num*sc,0,-num*sc))
....:     Bplus=block_matrix([[B(A,c),matrix(lam(A,u)).transpose()]])
....:     for k in reversed(c):
....:         Bplus.mutate(k)
....:     la=vector(Bplus[:,-1])
....:     Q=p_lambda_faster(B(A,c),la,c)
....:     plots=plots+[(Q.translation(t-la)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....: num=0
....: la=lam(A,[2,1,2])
....: for i in range(coxeter_number(A)//2):
....:     t=vector((-num*sc,0,num*sc))
....:     Q=p_lambda_faster(B(A,c),la,c*i)
....:     plots=plots+[(Q.translation(t-la)).plot(fill=colors[num+20],alpha=0.5)
....: ]
....:     num+=1
....: sum(plots)
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: plots=[point(vector((0,0,0)),size=50)]
....: num=0
....: sc=1/20
....: colors=rainbow(40)
....: for u in sortables(A,c[1:]):
....:     t=vector((num*sc,0,-num*sc))
....:     Bplus=block_matrix([[B(A,c),matrix(lam(A,u)).transpose()]])
....:     for k in reversed(c):
....:         Bplus.mutate(k)
....:     la=vector(Bplus[:,-1])
....:     Q=p_lambda_faster(B(A,c),la,c)
....:     #plots=plots+[(Q.translation(t-la)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....: num=0
....: la=lam(A,[2,1,2])
....: for i in range(coxeter_number(A)//2):
....:     t=vector((-num*sc,0,num*sc))
....:     Q=p_lambda_faster(B(A,c),la,c*i)
....:     plots=plots+[(Q.translation(t-la)).plot(fill=colors[num+20],alpha=0.5)
....: ]
....:     num+=1
....: sum(plots)
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: sc=1/20
....: colors=rainbow(40)
....: for u in sortables(A,c[1:]):
....:     num=1
....:     plots=[point(vector((0,0,0)),size=50)]
....:     Bplus=block_matrix([[B(A,c),matrix(lam(A,u)).transpose()]])
....:     for k in reversed(c):
....:         Bplus.mutate(k)
....:     la=vector(Bplus[:,-1])
....:     Q=p_lambda_faster(B(A,c),la,c)
....:     plots=plots+[(Q.translation(-la)).plot(fill=colors[num],alpha=0.5)]
....:     for i in range(coxeter_number(A)//2):
....:         t=vector((-num*sc,0,num*sc))
....:         Q=p_lambda_faster(B(A,c),la,c*i)
....:         plots=plots+[(Q.translation(t-la)).plot(fill=colors[num+20],alpha=
....: 0.5)]
....:     num+=1
....:     sum(plots)
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: sc=1/20
....: colors=rainbow(40)
....: for u in sortables(A,c[1:]):
....:     num=1
....:     plots=[point(vector((0,0,0)),size=50)]
....:     Bplus=block_matrix([[B(A,c),matrix(lam(A,u)).transpose()]])
....:     for k in reversed(c):
....:         Bplus.mutate(k)
....:     la=vector(Bplus[:,-1])
....:     Q=p_lambda_faster(B(A,c),la,c)
....:     plots=plots+[(Q.translation(-la)).plot(fill=colors[num],alpha=0.5)]
....:     for i in range(coxeter_number(A)//2):
....:         t=vector((-num*sc,0,num*sc))
....:         Q=p_lambda_faster(B(A,c),la,c*i)
....:         plots=plots+[(Q.translation(t-la)).plot(fill=colors[num+20],alpha=
....: 0.5)]
....:     num+=1
....:     sum(plots)
....: 
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
sage: coxeter_number(A)
6
sage: coxeter_number(A)//2
3
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: sc=1/20
....: colors=rainbow(40)
....: for u in sortables(A,c[1:]):
....:     num=1
....:     plots=[point(vector((0,0,0)),size=50)]
....:     Bplus=block_matrix([[B(A,c),matrix(lam(A,u)).transpose()]])
....:     for k in reversed(c):
....:         Bplus.mutate(k)
....:     la=vector(Bplus[:,-1])
....:     Q=p_lambda_faster(B(A,c),la,c)
....:     plots=plots+[(Q.translation(-la)).plot(fill=colors[num],alpha=0.5)]
....:     for i in range(coxeter_number(A)//2):
....:         t=vector((-num*sc,0,num*sc))
....:         Q=p_lambda_faster(B(A,c),la,list(reversed(c))*i)
....:         plots=plots+[(Q.translation(t-la)).plot(fill=colors[num+20],alpha=
....: 0.5)]
....:     num+=1
....:     sum(plots)
....: 
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: plots=[point(vector((0,0,0)),size=50)]
....: num=0
....: sc=1/20
....: colors=rainbow(40)
....: for u in sortables(A,c[1:]):
....:     t=vector((num*sc,0,-num*sc))
....:     Bplus=block_matrix([[B(A,c),matrix(lam(A,u)).transpose()]])
....:     for k in reversed(c):
....:         Bplus.mutate(k)
....:     la=vector(Bplus[:,-1])
....:     Q=p_lambda_faster(B(A,c),la,c)
....:     #plots=plots+[(Q.translation(t-la)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....: num=0
....: la=lam(A,[2,1,2])
....: for i in range(coxeter_number(A)//2):
....:     t=vector((-num*sc,0,num*sc))
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c))*i)
....:     plots=plots+[(Q.translation(t-la)).plot(fill=colors[num+20],alpha=0.5)
....: ]
....:     num+=1
....: sum(plots)
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: plots=[point(vector((0,0,0)),size=50)]
....: num=0
....: sc=1/20
....: colors=rainbow(40)
....: for u in sortables(A,c[1:]):
....:     t=vector((num*sc,0,-num*sc))
....:     Bplus=block_matrix([[B(A,c),matrix(lam(A,u)).transpose()]])
....:     for k in reversed(c):
....:         Bplus.mutate(k)
....:     la=vector(Bplus[:,-1])
....:     Q=p_lambda_faster(B(A,c),la,c)
....:     plots=plots+[(Q.translation(t-la)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....: num=0
....: la=lam(A,[2,1,2])
....: for i in range(coxeter_number(A)//2):
....:     t=vector((-num*sc,0,num*sc))
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c))*i)
....:     plots=plots+[(Q.translation(t-la)).plot(fill=colors[num+20],alpha=0.5)
....: ]
....:     num+=1
....: sum(plots)
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: plots=[point(vector((0,0,0)),size=50)]
....: num=0
....: sc=1/20
....: colors=rainbow(40)
....: for u in sortables(A,c[1:]):
....:     t=vector((num*sc,0,-num*sc))
....:     Bplus=block_matrix([[B(A,c),matrix(lam(A,u)).transpose()]])
....:     for k in reversed(c):
....:         Bplus.mutate(k)
....:     la=vector(Bplus[:,-1])
....:     Q=p_lambda_faster(B(A,c),la,c)
....:     plots=plots+[(Q.translation(t-la)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....: num=0
....: la=lam(A,[])
....: for i in range(coxeter_number(A)//2):
....:     t=vector((-num*sc,0,num*sc))
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c))*i)
....:     plots=plots+[(Q.translation(t-la)).plot(fill=colors[num+20],alpha=0.5)
....: ]
....:     num+=1
....: sum(plots)
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: plots=[point(vector((0,0,0)),size=50)]
....: num=0
....: sc=1/20
....: colors=rainbow(40)
....: for u in sortables(A,c[1:]):
....:     t=vector((num*sc,0,-num*sc))
....:     Bplus=block_matrix([[B(A,c),matrix(lam(A,u)).transpose()]])
....:     for k in reversed(c):
....:         Bplus.mutate(k)
....:     la=vector(Bplus[:,-1])
....:     Q=p_lambda_faster(B(A,c),la,c)
....:     plots=plots+[(Q.translation(t-la)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....: num=0
....: la=lam(A,[2])
....: for i in range(coxeter_number(A)//2):
....:     t=vector((-num*sc,0,num*sc))
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c))*i)
....:     plots=plots+[(Q.translation(t-la)).plot(fill=colors[num+20],alpha=0.5)
....: ]
....:     num+=1
....: sum(plots)
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: plots=[point(vector((0,0,0)),size=50)]
....: num=0
....: sc=1/20
....: colors=rainbow(40)
....: for u in sortables(A,c[1:]):
....:     t=vector((num*sc,0,-num*sc))
....:     Bplus=block_matrix([[B(A,c),matrix(lam(A,u)).transpose()]])
....:     for k in reversed(c):
....:         Bplus.mutate(k)
....:     la=vector(Bplus[:,-1])
....:     Q=p_lambda_faster(B(A,c),la,c)
....:     plots=plots+[(Q.translation(t-la)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....: num=0
....: la=lam(A,[2,1])
....: for i in range(coxeter_number(A)//2):
....:     t=vector((-num*sc,0,num*sc))
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c))*i)
....:     plots=plots+[(Q.translation(t-la)).plot(fill=colors[num+20],alpha=0.5)
....: ]
....:     num+=1
....: sum(plots)
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: plots=[point(vector((0,0,0)),size=50)]
....: num=0
....: sc=1/20
....: colors=rainbow(40)
....: for u in sortables(A,c[1:]):
....:     t=vector((num*sc,0,-num*sc))
....:     Bplus=block_matrix([[B(A,c),matrix(lam(A,u)).transpose()]])
....:     for k in reversed(c):
....:         Bplus.mutate(k)
....:     la=vector(Bplus[:,-1])
....:     Q=p_lambda_faster(B(A,c),la,c)
....:     plots=plots+[(Q.translation(t-la)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....: num=0
....: la=lam(A,[2,1,2])
....: for i in range(coxeter_number(A)//2):
....:     t=vector((-num*sc,0,num*sc))
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c))*i)
....:     plots=plots+[(Q.translation(t-la)).plot(fill=colors[num+20],alpha=0.5)
....: ]
....:     num+=1
....: sum(plots)
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: plots=[point(vector((0,0,0)),size=50)]
....: num=0
....: sc=1/20
....: colors=rainbow(40)
....: for u in sortables(A,c[1:]):
....:     t=vector((num*sc,0,-num*sc))
....:     Bplus=block_matrix([[B(A,c),matrix(lam(A,u)).transpose()]])
....:     for k in reversed(c):
....:         Bplus.mutate(k)
....:     la=vector(Bplus[:,-1])
....:     Q=p_lambda_faster(B(A,c),la,c)
....:     plots=plots+[(Q.translation(t-la)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....: num=0
....: la=lam(A,[2,1,2,1])
....: for i in range(coxeter_number(A)//2):
....:     t=vector((-num*sc,0,num*sc))
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c))*i)
....:     plots=plots+[(Q.translation(t-la)).plot(fill=colors[num+20],alpha=0.5)
....: ]
....:     num+=1
....: sum(plots)
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: plots=[point(vector((0,0,0)),size=50)]
....: num=0
....: sc=1/20
....: colors=rainbow(40)
....: for u in sortables(A,c[1:]):
....:     t=vector((num*sc,0,-num*sc))
....:     Bplus=block_matrix([[B(A,c),matrix(lam(A,u)).transpose()]])
....:     for k in reversed(c):
....:         Bplus.mutate(k)
....:     la=vector(Bplus[:,-1])
....:     Q=p_lambda_faster(B(A,c),la,c)
....:     plots=plots+[(Q.translation(t-la)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....: num=0
....: la=lam(A,[1])
....: for i in range(coxeter_number(A)//2):
....:     t=vector((-num*sc,0,num*sc))
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c))*i)
....:     plots=plots+[(Q.translation(t-la)).plot(fill=colors[num+20],alpha=0.5)
....: ]
....:     num+=1
....: sum(plots)
Launched html viewer for Graphics3d Object
sage: attach('/Users/reading/git/affine_dominance/software/domination5.py')
### reloading attached file domination5.py modified at 13:22:06 ###
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: plots=[point(vector((0,0,0)),size=50)]
....: num=0
....: sc=1/20
....: colors=rainbow(40)
....: for u in sortables(A,c[1:]):
....:     t=vector((num*sc,0,-num*sc))
....:     Bplus=block_matrix([[B(A,c),matrix(lam(A,u)).transpose()]])
....:     for k in c:
....:         Bplus.mutate(k)
....:     la=vector(Bplus[:,-1])
....:     Q=p_lambda(B(A,c),la,list(reversed(c)))
....:     plots=plots+[(Q.translation(t-la)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....: num=0
....: la=lam(A,[1])
....: for i in range(coxeter_number(A)//2):
....:     t=vector((-num*sc,0,num*sc))
....:     Q=p_lambda(B(A,c),la,c*i)
....:     plots=plots+[(Q.translation(t-la)).plot(fill=colors[num+20],alpha=0.5)
....: ]
....:     num+=1
....: sum(plots)
Launched html viewer for Graphics3d Object
### reloading attached file domination5.py modified at 13:28:05 ###
### reloading attached file domination5.py modified at 13:28:39 ###
### reloading attached file domination5.py modified at 13:29:35 ###
### reloading attached file domination5.py modified at 13:34:46 ###
### reloading attached file domination5.py modified at 13:35:55 ###
Traceback (most recent call last):

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/IPython/core/interactiveshell.py:3433 in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)

  Cell In [1303], line 1
    sage.repl.load.load(sage.repl.load.base64.b64decode("L1VzZXJzL3JlYWRpbmcvZ2l0L2FmZmluZV9kb21pbmFuY2Uvc29mdHdhcmUvZG9taW5hdGlvbjUucHk="),globals(),True)

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/repl/load.py:252 in load
    code = compile(f.read(), fpath, 'exec')

  File ~/git/affine_dominance/software/domination5.py:241
    def lam(A,v):
    ^
IndentationError: expected an indented block after function definition on line 235

### reloading attached file domination5.py modified at 13:36:59 ###
Traceback (most recent call last):

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/IPython/core/interactiveshell.py:3433 in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)

  Cell In [1303], line 1
    sage.repl.load.load(sage.repl.load.base64.b64decode("L1VzZXJzL3JlYWRpbmcvZ2l0L2FmZmluZV9kb21pbmFuY2Uvc29mdHdhcmUvZG9taW5hdGlvbjUucHk="),globals(),True)

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/repl/load.py:252 in load
    code = compile(f.read(), fpath, 'exec')

  File ~/git/affine_dominance/software/domination5.py:241
    def lam(A,v):
    ^
IndentationError: expected an indented block after function definition on line 235

### reloading attached file domination5.py modified at 13:42:29 ###
### reloading attached file domination5.py modified at 13:44:24 ###
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: plots=[point(vector((0,0,0)),size=50)]
....: num=0
....: sc=1/20
....: colors=rainbow(40)
....: for u in sortables(A,c[1:]):
....:     t=vector((num*sc,0,-num*sc))
....:     Bplus=block_matrix([[B(A,c),matrix(lam(A,u)).transpose()]])
....:     for k in c:
....:         Bplus.mutate(k)
....:     la=vector(Bplus[:,-1])
....:     Q=p_lambda(B(A,c),la,list(reversed(c)))
....:     plots=plots+[(Q.translation(t-la)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....: num=0
....: la=lam(A,[1])
....: for i in range(coxeter_number(A)//2):
....:     t=vector((-num*sc,0,num*sc))
....:     Q=p_lambda(B(A,c),la,c*i)
....:     plots=plots+[(Q.translation(t-la)).plot(fill=colors[num+20],alpha=0.5)
....: ]
....:     num+=1
....: sum(plots)
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: cinv=list(reversed(c))
....: plots=[point(vector((0,0,0)),size=50)]
....: num=0
....: sc=1/20
....: colors=rainbow(40)
....: for u in sortables(A,c[1:]):
....:     t=vector((num*sc,0,-num*sc))
....:     Bplus=block_matrix([[B(A,c),matrix(lam(A,u)).transpose()]])
....:     for k in c:
....:         Bplus.mutate(k)
....:     la=vector(Bplus[:,-1])
....:     Q=p_lambda(B(A,c),la,cinv)
....:     plots=plots+[(Q.translation(t-la)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....: num=0
....: la=lam(A,[1])
....: for i in range(coxeter_number(A)//2):
....:     t=vector((-num*sc,0,num*sc))
....:     Q=Polyhedron(vertices=[vector([0]*A.nrows())],rays=reflect_matrix(A,B(
....: A,c),cinv*i).columns())
....:     plots=plots+[(Q.translation(t)).plot(fill=colors[num+20],alpha=0.5)]
....:     num+=1
....: sum(plots)
....: 
....: 
....: 
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: cinv=list(reversed(c))
....: plots=[point(vector((0,0,0)),size=50)]
....: num=0
....: sc=1/20
....: colors=rainbow(40)
....: for u in sortables(A,c[1:]):
....:     t=vector((num*sc,0,-num*sc))
....:     Bplus=block_matrix([[B(A,c),matrix(lam(A,u)).transpose()]])
....:     for k in c:
....:         Bplus.mutate(k)
....:     la=vector(Bplus[:,-1])
....:     Q=p_lambda(B(A,c),la,cinv)
....:     plots=plots+[(Q.translation(t-la)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....: num=0
....: for i in range(coxeter_number(A)//2):
....:     t=vector((-num*sc,0,num*sc))
....:     Q=Polyhedron(vertices=[vector([0]*A.nrows())],rays=reflect_matrix(A,B(
....: A,c),cinv*i).columns())
....:     plots=plots+[(Q.translation(t)).plot(fill=colors[num+20],alpha=0.5)]
....:     num+=1
....: sum(plots)
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['A',3])
....: c=[0,2,1]
....: cinv=list(reversed(c))
....: plots=[point(vector((0,0,0)),size=50)]
....: num=0
....: sc=1/20
....: colors=rainbow(40)
....: for u in sortables(A,c[1:]):
....:     t=vector((num*sc,0,-num*sc))
....:     Bplus=block_matrix([[B(A,c),matrix(lam(A,u)).transpose()]])
....:     for k in c:
....:         Bplus.mutate(k)
....:     la=vector(Bplus[:,-1])
....:     Q=p_lambda(B(A,c),la,cinv)
....:     plots=plots+[(Q.translation(t-la)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....: num=0
....: for i in range(coxeter_number(A)//2):
....:     t=vector((-num*sc,0,num*sc))
....:     Q=Polyhedron(vertices=[vector([0]*A.nrows())],rays=reflect_matrix(A,B(
....: A,c),cinv*i).columns())
....:     plots=plots+[(Q.translation(t)).plot(fill=colors[num+20],alpha=0.5)]
....:     num+=1
....: sum(plots)
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['G',3])
....: c=[0,2,1]
....: cinv=list(reversed(c))
....: plots=[point(vector((0,0,0)),size=50)]
....: num=0
....: sc=1/20
....: colors=rainbow(40)
....: for u in sortables(A,c[1:]):
....:     t=vector((num*sc,0,-num*sc))
....:     Bplus=block_matrix([[B(A,c),matrix(lam(A,u)).transpose()]])
....:     for k in c:
....:         Bplus.mutate(k)
....:     la=vector(Bplus[:,-1])
....:     Q=p_lambda(B(A,c),la,cinv)
....:     plots=plots+[(Q.translation(t-la)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....: num=0
....: for i in range(coxeter_number(A)//2):
....:     t=vector((-num*sc,0,num*sc))
....:     Q=Polyhedron(vertices=[vector([0]*A.nrows())],rays=reflect_matrix(A,B(
....: A,c),cinv*i).columns())
....:     plots=plots+[(Q.translation(t)).plot(fill=colors[num+20],alpha=0.5)]
....:     num+=1
....: sum(plots)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In [1307], line 1
----> 1 A=CartanMatrix(['G',Integer(3)])
      2 c=[Integer(0),Integer(2),Integer(1)]
      3 cinv=list(reversed(c))

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/misc/classcall_metaclass.pyx:320, in sage.misc.classcall_metaclass.ClasscallMetaclass.__call__ (build/cythonized/sage/misc/classcall_metaclass.c:3156)()
    318 """
    319 if cls.classcall is not None:
--> 320     return cls.classcall(cls, *args, **kwds)
    321 else:
    322     # Fast version of type.__call__(cls, *args, **kwds)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/combinat/root_system/cartan_matrix.py:318, in CartanMatrix.__classcall_private__(cls, data, index_set, cartan_type, cartan_type_check, borcherds)
    316         data[(reverse[j], reverse[i])] = -l
    317 else:
--> 318     M = matrix(data)
    319     if borcherds:
    320         if not is_borcherds_cartan_matrix(M):

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/constructor.pyx:648, in sage.matrix.constructor.matrix (build/cythonized/sage/matrix/constructor.c:5336)()
    646 """
    647 immutable = kwds.pop('immutable', False)
--> 648 M = MatrixArgs(*args, **kwds).matrix()
    649 if immutable:
    650     M.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/args.pyx:678, in sage.matrix.args.MatrixArgs.matrix (build/cythonized/sage/matrix/args.c:12864)()
    676     True
    677 """
--> 678 self.finalize()
    679 
    680 cdef Matrix M

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/args.pyx:902, in sage.matrix.args.MatrixArgs.finalize (build/cythonized/sage/matrix/args.c:14844)()
    900     self.typ = self.get_type()
    901     if self.typ == MA_ENTRIES_UNKNOWN:
--> 902         raise TypeError(f"unable to convert {self.entries!r} to a matrix")
    903 
    904 # Can we assume a square matrix?

TypeError: unable to convert ['G', 3] to a matrix
sage: A=CartanMatrix(['B',3])
....: c=[0,2,1]
....: cinv=list(reversed(c))
....: plots=[point(vector((0,0,0)),size=50)]
....: num=0
....: sc=1/20
....: colors=rainbow(40)
....: for u in sortables(A,c[1:]):
....:     t=vector((num*sc,0,-num*sc))
....:     Bplus=block_matrix([[B(A,c),matrix(lam(A,u)).transpose()]])
....:     for k in c:
....:         Bplus.mutate(k)
....:     la=vector(Bplus[:,-1])
....:     Q=p_lambda(B(A,c),la,cinv)
....:     plots=plots+[(Q.translation(t-la)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....: num=0
....: for i in range(coxeter_number(A)//2):
....:     t=vector((-num*sc,0,num*sc))
....:     Q=Polyhedron(vertices=[vector([0]*A.nrows())],rays=reflect_matrix(A,B(
....: A,c),cinv*i).columns())
....:     plots=plots+[(Q.translation(t)).plot(fill=colors[num+20],alpha=0.5)]
....:     num+=1
....: sum(plots)
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: cinv=list(reversed(c))
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: for i in range(coxeter_number(A)//2):
....:     P=P.intersection(Polyhedron(vertices=[vector([0]*A.nrows())],rays=refl
....: ect_matrix(A,B(A,c),cinv*i).columns()))
....: num=0
....: for v in sortables(A,c[1:]):
....:     Bplus=block_matrix([[B(A,c),matrix(lam(A,v)).transpose()]])
....:     for k in c:
....:         Bplus.mutate(k)
....:     la=vector(Bplus[:,-1])
....:     print(num,v,P.intersection(p_lambda(B(A,c),la,cinv).translation(-la)))
....: 
....:     num+=1
....: 
....: 
....: 
0 [2, 1, 2, 1] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
1 [2, 1, 2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
2 [2, 1] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
3 [2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
4 [1] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
5 [] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: cinv=list(reversed(c))
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: for i in range(coxeter_number(A)//2):
....:     P=P.intersection(Polyhedron(vertices=[vector([0]*A.nrows())],rays=refl
....: ect_matrix(A,B(A,c),cinv*i).columns()))
....: num=0
....: for v in sortables(A,c[1:]):
....:     Bplus=block_matrix([[B(A,c),matrix(lam(A,v)).transpose()]])
....:     for k in c:
....:         Bplus.mutate(k)
....:     la=vector(Bplus[:,-1])
....:     print(num,v,P.intersection(p_lambda(B(A,c),la,cinv).translation(-la)).
....: dimension())
....:     num+=1
....: 
0 [2, 1, 2, 1] 0
1 [2, 1, 2] 0
2 [2, 1] 0
3 [2] 0
4 [1] 0
5 [] 0
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: cinv=list(reversed(c))
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: for i in range(coxeter_number(A)//2):
....:     P=P.intersection(Polyhedron(vertices=[vector([0]*A.nrows())],rays=refl
....: ect_matrix(A,B(A,c),cinv*i).columns()))
....: num=0
....: for v in sortables(A,c[1:]):
....:     Bplus=block_matrix([[B(A,c),matrix(lam(A,v)).transpose()]])
....:     for k in c:
....:         Bplus.mutate(k)
....:     la=vector(Bplus[:,-1])
....:     d=P.intersection(p_lambda(B(A,c),la,cinv).translation(-la)).dimension(
....: )
....:     print(num,v,d)
....:     num+=1
....: 
0 [2, 1, 2, 1] 0
1 [2, 1, 2] 0
2 [2, 1] 0
3 [2] 0
4 [1] 0
5 [] 0
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: cinv=list(reversed(c))
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: for i in range(coxeter_number(A)//2):
....:     P=P.intersection(Polyhedron(vertices=[vector([0]*A.nrows())],rays=refl
....: ect_matrix(A,B(A,c),cinv*i).columns()))
....: num=0
....: for v in sortables(A,c[1:]):
....:     Bplus=block_matrix([[B(A,c),matrix(lam(A,v)).transpose()]])
....:     for k in c:
....:         Bplus.mutate(k)
....:     la=vector(Bplus[:,-1])
....:     d=P.intersection(p_lambda(B(A,c),la,cinv).translation(-la)).dimension(
....: )
....:     print(num,v,d)
....:     num+=1
....: 
0 [2, 1, 2, 1] 0
1 [2, 1, 2] 0
2 [2, 1] 0
3 [2] 0
4 [1] 0
5 [] 0
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: cinv=list(reversed(c))
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: for i in range(coxeter_number(A)//2):
....:     P=P.intersection(Polyhedron(vertices=[vector([0]*A.nrows())],rays=refl
....: ect_matrix(A,B(A,c),cinv*i).columns()))
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     Bplus=block_matrix([[B(A,c),matrix(lam(A,v)).transpose()]])
....:     for k in c:
....:         Bplus.mutate(k)
....:     la=vector(Bplus[:,-1])
....:     d=P.intersection(p_lambda(B(A,c),la,cinv).translation(-la)).dimension(
....: )
....:     print(num,v,d)
....: 
1 [2, 1, 2, 1] 0
2 [2, 1, 2] 0
3 [2, 1] 0
4 [2] 0
5 [1] 0
6 [] 0
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: cinv=list(reversed(c))
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: for i in range(coxeter_number(A)//2):
....:     P=P.intersection(Polyhedron(vertices=[vector([0]*A.nrows())],rays=refl
....: ect_matrix(A,B(A,c),cinv*i).columns()))
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     Bplus=block_matrix([[B(A,c),matrix(lam(A,v)).transpose()]])
....:     for k in c:
....:         Bplus.mutate(k)
....:     la=vector(Bplus[:,-1])
....:     d=P.intersection(p_lambda(B(A,c),la,cinv).translation(-la)).dimension(
....: )
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
....: 
1 [2, 1, 2, 1] 0
2 [2, 1, 2] 0
3 [2, 1] 0
4 [2] 0
5 [1] 0
6 [] 0
sage: A=CartanMatrix(['C',4])
....: c=[0,2,1,3]
....: cinv=list(reversed(c))
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: for i in range(coxeter_number(A)//2):
....:     P=P.intersection(Polyhedron(vertices=[vector([0]*A.nrows())],rays=refl
....: ect_matrix(A,B(A,c),cinv*i).columns()))
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     Bplus=block_matrix([[B(A,c),matrix(lam(A,v)).transpose()]])
....:     for k in c:
....:         Bplus.mutate(k)
....:     la=vector(Bplus[:,-1])
....:     d=P.intersection(p_lambda(B(A,c),la,cinv).translation(-la)).dimension(
....: )
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
1 [2, 1, 3, 2, 1, 3, 2, 1, 3] 0
2 [2, 1, 3, 2, 1, 3, 2, 1] 0
3 [2, 1, 3, 2, 1, 3, 2, 3] 0
4 [2, 1, 3, 2, 1, 3, 2] 0
5 [2, 1, 3, 2, 1, 3] 0
6 [2, 1, 3, 2, 1] 0
7 [2, 1, 3, 2, 3, 2] 0
8 [2, 1, 3, 2, 3] 0
9 [2, 1, 3, 2] 0
10 [2, 1, 3] 0
11 [2, 1, 2] 0
12 [2, 1] 0
13 [2, 3, 2, 3] 0
14 [2, 3, 2] 0
15 [2, 3] 0
16 [2] 0
17 [1, 3] 0
18 [1] 0
19 [3] 0
20 [] 0
sage: A=CartanMatrix(['A',3])
....: c=[0,2,1]
....: cinv=list(reversed(c))
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: for i in range(coxeter_number(A)//2):
....:     P=P.intersection(Polyhedron(vertices=[vector([0]*A.nrows())],rays=refl
....: ect_matrix(A,B(A,c),cinv*i).columns()))
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     Bplus=block_matrix([[B(A,c),matrix(lam(A,v)).transpose()]])
....:     for k in c:
....:         Bplus.mutate(k)
....:     la=vector(Bplus[:,-1])
....:     d=P.intersection(p_lambda(B(A,c),la,cinv).translation(-la)).dimension(
....: )
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
1 [2, 1, 2] 0
2 [2, 1] 0
3 [2] 0
4 [1] 0
5 [] 0
sage: A=CartanMatrix(['A',4])
....: c=[0,2,1,3]
....: cinv=list(reversed(c))
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: for i in range(coxeter_number(A)//2):
....:     P=P.intersection(Polyhedron(vertices=[vector([0]*A.nrows())],rays=refl
....: ect_matrix(A,B(A,c),cinv*i).columns()))
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     Bplus=block_matrix([[B(A,c),matrix(lam(A,v)).transpose()]])
....:     for k in c:
....:         Bplus.mutate(k)
....:     la=vector(Bplus[:,-1])
....:     d=P.intersection(p_lambda(B(A,c),la,cinv).translation(-la)).dimension(
....: )
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
1 [2, 1, 3, 2, 1, 3] 2
Failure!
sage: A=CartanMatrix(['C',4])
....: c=[0,2,1,3]
....: cinv=list(reversed(c))
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: for i in range(coxeter_number(A)//2):
....:     P=P.intersection(Polyhedron(vertices=[vector([0]*A.nrows())],rays=refl
....: ect_matrix(A,B(A,c),cinv*i).columns()))
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     Bplus=block_matrix([[B(A,c),matrix(lam(A,v)).transpose()]])
....:     for k in c:
....:         Bplus.mutate(k)
....:     la=vector(Bplus[:,-1])
....:     d=P.intersection(p_lambda(B(A,c),la,cinv).translation(-la)).dimension(
....: )
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
1 [2, 1, 3, 2, 1, 3, 2, 1, 3] 0
2 [2, 1, 3, 2, 1, 3, 2, 1] 0
3 [2, 1, 3, 2, 1, 3, 2, 3] 0
4 [2, 1, 3, 2, 1, 3, 2] 0
5 [2, 1, 3, 2, 1, 3] 0
6 [2, 1, 3, 2, 1] 0
7 [2, 1, 3, 2, 3, 2] 0
8 [2, 1, 3, 2, 3] 0
9 [2, 1, 3, 2] 0
10 [2, 1, 3] 0
11 [2, 1, 2] 0
12 [2, 1] 0
13 [2, 3, 2, 3] 0
14 [2, 3, 2] 0
15 [2, 3] 0
16 [2] 0
17 [1, 3] 0
18 [1] 0
19 [3] 0
20 [] 0
sage: A=CartanMatrix(['C',5])
....: c=[0,2,4,1,3]
....: cinv=list(reversed(c))
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: for i in range(coxeter_number(A)//2):
....:     P=P.intersection(Polyhedron(vertices=[vector([0]*A.nrows())],rays=refl
....: ect_matrix(A,B(A,c),cinv*i).columns()))
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     Bplus=block_matrix([[B(A,c),matrix(lam(A,v)).transpose()]])
....:     for k in c:
....:         Bplus.mutate(k)
....:     la=vector(Bplus[:,-1])
....:     d=P.intersection(p_lambda(B(A,c),la,cinv).translation(-la)).dimension(
....: )
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
1 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3] 0
2 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1] 0
3 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 3] 0
4 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4] 0
5 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 1] 0
6 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2] 0
7 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 4] 0
8 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3] 0
9 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1] 0
10 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 3, 2, 4] 0
11 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 3, 2] 0
12 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 3, 4] 0
13 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 3] 0
14 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4] 0
15 [2, 4, 1, 3, 2, 4, 1, 3, 2, 1] 0
16 [2, 4, 1, 3, 2, 4, 1, 3, 2] 0
17 [2, 4, 1, 3, 2, 4, 1, 3, 4, 3] 0
18 [2, 4, 1, 3, 2, 4, 1, 3, 4] 0
19 [2, 4, 1, 3, 2, 4, 1, 3] 0
20 [2, 4, 1, 3, 2, 4, 1] 0
21 [2, 4, 1, 3, 2, 4, 3, 2, 4, 3, 2] 0
22 [2, 4, 1, 3, 2, 4, 3, 2, 4, 3] 0
23 [2, 4, 1, 3, 2, 4, 3, 2, 4] 0
24 [2, 4, 1, 3, 2, 4, 3, 2] 0
25 [2, 4, 1, 3, 2, 4, 3, 4, 3] 0
26 [2, 4, 1, 3, 2, 4, 3, 4] 0
27 [2, 4, 1, 3, 2, 4, 3] 0
28 [2, 4, 1, 3, 2, 4] 0
29 [2, 4, 1, 3, 2, 1, 3] 0
30 [2, 4, 1, 3, 2, 1] 0
31 [2, 4, 1, 3, 2, 3] 0
32 [2, 4, 1, 3, 2] 0
33 [2, 4, 1, 3, 4, 3] 0
34 [2, 4, 1, 3, 4] 0
35 [2, 4, 1, 3] 0
36 [2, 4, 1, 2] 0
37 [2, 4, 1] 0
38 [2, 4, 3, 2, 4, 3, 2, 4, 3] 0
39 [2, 4, 3, 2, 4, 3, 2, 4] 0
40 [2, 4, 3, 2, 4, 3, 2] 0
41 [2, 4, 3, 2, 4, 3, 4] 0
42 [2, 4, 3, 2, 4, 3] 0
43 [2, 4, 3, 2, 4] 0
44 [2, 4, 3, 2] 0
45 [2, 4, 3, 4, 3] 0
46 [2, 4, 3, 4] 0
47 [2, 4, 3] 0
48 [2, 4] 0
49 [2, 1, 3, 2, 1, 3] 0
50 [2, 1, 3, 2, 1] 0
51 [2, 1, 3, 2, 3] 0
52 [2, 1, 3, 2] 0
53 [2, 1, 3] 0
54 [2, 1, 2] 0
55 [2, 1] 0
56 [2, 3, 2] 0
57 [2, 3] 0
58 [2] 0
59 [4, 1, 3, 4, 3] 0
60 [4, 1, 3, 4] 0
61 [4, 1, 3] 0
62 [4, 1] 0
63 [4, 3, 4, 3] 0
64 [4, 3, 4] 0
65 [4, 3] 0
66 [4] 0
67 [1, 3] 0
68 [1] 0
69 [3] 0
70 [] 0
sage: A=CartanMatrix(['A',5])
....: c=[0,2,4,1,3]
....: cinv=list(reversed(c))
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: for i in range(coxeter_number(A)//2):
....:     P=P.intersection(Polyhedron(vertices=[vector([0]*A.nrows())],rays=refl
....: ect_matrix(A,B(A,c),cinv*i).columns()))
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     Bplus=block_matrix([[B(A,c),matrix(lam(A,v)).transpose()]])
....:     for k in c:
....:         Bplus.mutate(k)
....:     la=vector(Bplus[:,-1])
....:     d=P.intersection(p_lambda(B(A,c),la,cinv).translation(-la)).dimension(
....: )
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
1 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4] 0
2 [2, 4, 1, 3, 2, 4, 1, 3, 2] 0
3 [2, 4, 1, 3, 2, 4, 1, 3, 4] 0
4 [2, 4, 1, 3, 2, 4, 1, 3] 0
5 [2, 4, 1, 3, 2, 4, 1] 0
6 [2, 4, 1, 3, 2, 4, 3, 4] 0
7 [2, 4, 1, 3, 2, 4, 3] 0
8 [2, 4, 1, 3, 2, 4] 0
9 [2, 4, 1, 3, 2, 1, 3] 0
10 [2, 4, 1, 3, 2, 1] 0
11 [2, 4, 1, 3, 2, 3] 0
12 [2, 4, 1, 3, 2] 0
13 [2, 4, 1, 3, 4] 0
14 [2, 4, 1, 3] 0
15 [2, 4, 1, 2] 0
16 [2, 4, 1] 0
17 [2, 4, 3, 2, 4, 3] 0
18 [2, 4, 3, 2, 4] 0
19 [2, 4, 3, 2] 0
20 [2, 4, 3, 4] 0
21 [2, 4, 3] 0
22 [2, 4] 0
23 [2, 1, 3, 2, 1, 3] 0
24 [2, 1, 3, 2, 1] 0
25 [2, 1, 3, 2, 3] 0
26 [2, 1, 3, 2] 0
27 [2, 1, 3] 0
28 [2, 1, 2] 0
29 [2, 1] 0
30 [2, 3, 2] 0
31 [2, 3] 0
32 [2] 0
33 [4, 1, 3, 4] 0
34 [4, 1, 3] 0
35 [4, 1] 0
36 [4, 3, 4] 0
37 [4, 3] 0
38 [4] 0
39 [1, 3] 0
40 [1] 0
41 [3] 0
42 [] 0
sage: A=CartanMatrix(['C',6])
....: c=[0,2,4,1,3,5]
....: cinv=list(reversed(c))
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: for i in range(coxeter_number(A)//2):
....:     P=P.intersection(Polyhedron(vertices=[vector([0]*A.nrows())],rays=refl
....: ect_matrix(A,B(A,c),cinv*i).columns()))
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     Bplus=block_matrix([[B(A,c),matrix(lam(A,v)).transpose()]])
....:     for k in c:
....:         Bplus.mutate(k)
....:     la=vector(Bplus[:,-1])
....:     d=P.intersection(p_lambda(B(A,c),la,cinv).translation(-la)).dimension(
....: )
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
1 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3, 5] 0
2 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3] 0
3 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 5] 0
4 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1] 0
5 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 3, 5] 0
6 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 3] 0
7 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 5] 0
8 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4] 0
9 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 1] 0
10 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2] 0
11 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 4, 5] 0
12 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 4] 0
13 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3, 5] 0
14 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3, 2, 1] 0
15 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3, 2] 0
16 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3] 0
17 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 5] 0
18 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1] 0
19 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 3, 5, 2, 4, 5] 0
20 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 3, 5, 2, 4] 0
21 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 3, 5, 2] 0
22 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 3, 5, 4, 5] 0
23 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 3, 5, 4] 0
24 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 3, 5] 0
25 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 3, 2] 0
26 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 3] 0
27 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 5] 0
28 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4] 0
29 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 1] 0
30 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2] 0
31 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 4, 3, 5] 0
32 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 4, 3] 0
33 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 4, 5] 0
34 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 4] 0
35 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3, 5] 0
36 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3, 2, 1] 0
37 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3, 2] 0
38 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3] 0
39 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 5, 4] 0
40 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 5] 0
41 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1] 0
42 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 3, 5, 2, 4, 3, 5, 2, 4] 0
43 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 3, 5, 2, 4, 3, 5, 2] 0
44 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 3, 5, 2, 4, 3, 5, 4] 0
45 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 3, 5, 2, 4, 3, 5] 0
46 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 3, 5, 2, 4, 3, 2] 0
47 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 3, 5, 2, 4, 3] 0
48 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 3, 5, 2, 4, 5] 0
49 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 3, 5, 2, 4] 0
50 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 3, 5, 2] 0
51 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 3, 5, 4, 3, 5] 0
52 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 3, 5, 4, 3] 0
53 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 3, 5, 4, 5] 0
54 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 3, 5, 4] 0
55 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 3, 5] 0
56 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 3, 2] 0
57 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 3] 0
58 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 5, 4] 0
59 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 5] 0
60 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4] 0
61 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 1] 0
62 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2] 0
63 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 4, 3, 5, 4, 3] 0
64 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 4, 3, 5, 4] 0
65 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 4, 3, 5] 0
66 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 4, 3] 0
67 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 4, 5, 4] 0
68 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 4, 5] 0
69 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 4] 0
70 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5] 0
71 [2, 4, 1, 3, 5, 2, 4, 1, 3, 2, 4, 1] 0
72 [2, 4, 1, 3, 5, 2, 4, 1, 3, 2, 4] 0
73 [2, 4, 1, 3, 5, 2, 4, 1, 3, 2, 1] 0
74 [2, 4, 1, 3, 5, 2, 4, 1, 3, 2] 0
75 [2, 4, 1, 3, 5, 2, 4, 1, 3, 4] 0
76 [2, 4, 1, 3, 5, 2, 4, 1, 3] 0
77 [2, 4, 1, 3, 5, 2, 4, 1, 5, 4] 0
78 [2, 4, 1, 3, 5, 2, 4, 1, 5] 0
79 [2, 4, 1, 3, 5, 2, 4, 1] 0
80 [2, 4, 1, 3, 5, 2, 4, 3, 5, 2, 4, 3, 5, 2, 4, 3, 5, 2] 0
81 [2, 4, 1, 3, 5, 2, 4, 3, 5, 2, 4, 3, 5, 2, 4, 3, 5] 0
82 [2, 4, 1, 3, 5, 2, 4, 3, 5, 2, 4, 3, 5, 2, 4, 3, 2] 0
83 [2, 4, 1, 3, 5, 2, 4, 3, 5, 2, 4, 3, 5, 2, 4, 3] 0
84 [2, 4, 1, 3, 5, 2, 4, 3, 5, 2, 4, 3, 5, 2, 4, 5] 0
85 [2, 4, 1, 3, 5, 2, 4, 3, 5, 2, 4, 3, 5, 2, 4] 0
86 [2, 4, 1, 3, 5, 2, 4, 3, 5, 2, 4, 3, 5, 2] 0
87 [2, 4, 1, 3, 5, 2, 4, 3, 5, 2, 4, 3, 5, 4, 3, 5] 0
88 [2, 4, 1, 3, 5, 2, 4, 3, 5, 2, 4, 3, 5, 4, 3] 0
89 [2, 4, 1, 3, 5, 2, 4, 3, 5, 2, 4, 3, 5, 4, 5] 0
90 [2, 4, 1, 3, 5, 2, 4, 3, 5, 2, 4, 3, 5, 4] 0
91 [2, 4, 1, 3, 5, 2, 4, 3, 5, 2, 4, 3, 5] 0
92 [2, 4, 1, 3, 5, 2, 4, 3, 5, 2, 4, 3, 2] 0
93 [2, 4, 1, 3, 5, 2, 4, 3, 5, 2, 4, 3] 0
94 [2, 4, 1, 3, 5, 2, 4, 3, 5, 2, 4, 5, 4] 0
95 [2, 4, 1, 3, 5, 2, 4, 3, 5, 2, 4, 5] 0
96 [2, 4, 1, 3, 5, 2, 4, 3, 5, 2, 4] 0
97 [2, 4, 1, 3, 5, 2, 4, 3, 5, 2] 0
98 [2, 4, 1, 3, 5, 2, 4, 3, 5, 4, 3, 5, 4, 3] 0
99 [2, 4, 1, 3, 5, 2, 4, 3, 5, 4, 3, 5, 4] 0
100 [2, 4, 1, 3, 5, 2, 4, 3, 5, 4, 3, 5] 0
101 [2, 4, 1, 3, 5, 2, 4, 3, 5, 4, 3] 0
102 [2, 4, 1, 3, 5, 2, 4, 3, 5, 4, 5, 4] 0
103 [2, 4, 1, 3, 5, 2, 4, 3, 5, 4, 5] 0
104 [2, 4, 1, 3, 5, 2, 4, 3, 5, 4] 0
105 [2, 4, 1, 3, 5, 2, 4, 3, 5] 0
106 [2, 4, 1, 3, 5, 2, 4, 3, 2, 4] 0
107 [2, 4, 1, 3, 5, 2, 4, 3, 2] 0
108 [2, 4, 1, 3, 5, 2, 4, 3, 4] 0
109 [2, 4, 1, 3, 5, 2, 4, 3] 0
110 [2, 4, 1, 3, 5, 2, 4, 5, 4] 0
111 [2, 4, 1, 3, 5, 2, 4, 5] 0
112 [2, 4, 1, 3, 5, 2, 4] 0
113 [2, 4, 1, 3, 5, 2, 1, 3] 0
114 [2, 4, 1, 3, 5, 2, 1] 0
115 [2, 4, 1, 3, 5, 2, 3] 0
116 [2, 4, 1, 3, 5, 2] 0
117 [2, 4, 1, 3, 5, 4, 3, 5, 4, 3, 5] 0
118 [2, 4, 1, 3, 5, 4, 3, 5, 4, 3] 0
119 [2, 4, 1, 3, 5, 4, 3, 5, 4, 5] 0
120 [2, 4, 1, 3, 5, 4, 3, 5, 4] 0
121 [2, 4, 1, 3, 5, 4, 3, 5] 0
122 [2, 4, 1, 3, 5, 4, 3] 0
123 [2, 4, 1, 3, 5, 4, 5, 4] 0
124 [2, 4, 1, 3, 5, 4, 5] 0
125 [2, 4, 1, 3, 5, 4] 0
126 [2, 4, 1, 3, 5] 0
127 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4] 0
128 [2, 4, 1, 3, 2, 4, 1, 3, 2] 0
129 [2, 4, 1, 3, 2, 4, 1, 3, 4] 0
130 [2, 4, 1, 3, 2, 4, 1, 3] 0
131 [2, 4, 1, 3, 2, 4, 1] 0
132 [2, 4, 1, 3, 2, 4, 3, 4] 0
133 [2, 4, 1, 3, 2, 4, 3] 0
134 [2, 4, 1, 3, 2, 4] 0
135 [2, 4, 1, 3, 2, 1, 3] 0
136 [2, 4, 1, 3, 2, 1] 0
137 [2, 4, 1, 3, 2, 3] 0
138 [2, 4, 1, 3, 2] 0
139 [2, 4, 1, 3, 4] 0
140 [2, 4, 1, 3] 0
141 [2, 4, 1, 5, 2, 4, 5] 0
142 [2, 4, 1, 5, 2, 4] 0
143 [2, 4, 1, 5, 2] 0
144 [2, 4, 1, 5, 4, 5] 0
145 [2, 4, 1, 5, 4] 0
146 [2, 4, 1, 5] 0
147 [2, 4, 1, 2] 0
148 [2, 4, 1] 0
149 [2, 4, 3, 5, 2, 4, 3, 5, 2, 4, 3, 5, 2, 4, 3, 5] 0
150 [2, 4, 3, 5, 2, 4, 3, 5, 2, 4, 3, 5, 2, 4, 3] 0
151 [2, 4, 3, 5, 2, 4, 3, 5, 2, 4, 3, 5, 2, 4, 5] 0
152 [2, 4, 3, 5, 2, 4, 3, 5, 2, 4, 3, 5, 2, 4] 0
153 [2, 4, 3, 5, 2, 4, 3, 5, 2, 4, 3, 5, 2] 0
154 [2, 4, 3, 5, 2, 4, 3, 5, 2, 4, 3, 5, 4, 5] 0
155 [2, 4, 3, 5, 2, 4, 3, 5, 2, 4, 3, 5, 4] 0
156 [2, 4, 3, 5, 2, 4, 3, 5, 2, 4, 3, 5] 0
157 [2, 4, 3, 5, 2, 4, 3, 5, 2, 4, 3, 2] 0
158 [2, 4, 3, 5, 2, 4, 3, 5, 2, 4, 3] 0
159 [2, 4, 3, 5, 2, 4, 3, 5, 2, 4, 5] 0
160 [2, 4, 3, 5, 2, 4, 3, 5, 2, 4] 0
161 [2, 4, 3, 5, 2, 4, 3, 5, 2] 0
162 [2, 4, 3, 5, 2, 4, 3, 5, 4, 3, 5, 4] 0
163 [2, 4, 3, 5, 2, 4, 3, 5, 4, 3, 5] 0
164 [2, 4, 3, 5, 2, 4, 3, 5, 4, 3] 0
165 [2, 4, 3, 5, 2, 4, 3, 5, 4, 5] 0
166 [2, 4, 3, 5, 2, 4, 3, 5, 4] 0
167 [2, 4, 3, 5, 2, 4, 3, 5] 0
168 [2, 4, 3, 5, 2, 4, 3, 2] 0
169 [2, 4, 3, 5, 2, 4, 3] 0
170 [2, 4, 3, 5, 2, 4, 5, 4] 0
171 [2, 4, 3, 5, 2, 4, 5] 0
172 [2, 4, 3, 5, 2, 4] 0
173 [2, 4, 3, 5, 2] 0
174 [2, 4, 3, 5, 4, 3, 5, 4, 3, 5] 0
175 [2, 4, 3, 5, 4, 3, 5, 4, 3] 0
176 [2, 4, 3, 5, 4, 3, 5, 4, 5] 0
177 [2, 4, 3, 5, 4, 3, 5, 4] 0
178 [2, 4, 3, 5, 4, 3, 5] 0
179 [2, 4, 3, 5, 4, 3] 0
180 [2, 4, 3, 5, 4, 5, 4] 0
181 [2, 4, 3, 5, 4, 5] 0
182 [2, 4, 3, 5, 4] 0
183 [2, 4, 3, 5] 0
184 [2, 4, 3, 2, 4, 3] 0
185 [2, 4, 3, 2, 4] 0
186 [2, 4, 3, 2] 0
187 [2, 4, 3, 4] 0
188 [2, 4, 3] 0
189 [2, 4, 5, 4, 5] 0
190 [2, 4, 5, 4] 0
191 [2, 4, 5] 0
192 [2, 4] 0
193 [2, 1, 3, 5, 2, 1, 3] 0
194 [2, 1, 3, 5, 2, 1] 0
195 [2, 1, 3, 5, 2, 3] 0
196 [2, 1, 3, 5, 2] 0
197 [2, 1, 3, 5] 0
198 [2, 1, 3, 2, 1, 3] 0
199 [2, 1, 3, 2, 1] 0
200 [2, 1, 3, 2, 3] 0
201 [2, 1, 3, 2] 0
202 [2, 1, 3] 0
203 [2, 1, 5, 2] 0
204 [2, 1, 5] 0
205 [2, 1, 2] 0
206 [2, 1] 0
207 [2, 3, 5, 2] 0
208 [2, 3, 5] 0
209 [2, 3, 2] 0
210 [2, 3] 0
211 [2, 5] 0
212 [2] 0
213 [4, 1, 3, 5, 4, 3, 5, 4, 3, 5] 0
214 [4, 1, 3, 5, 4, 3, 5, 4, 3] 0
215 [4, 1, 3, 5, 4, 3, 5, 4, 5] 0
216 [4, 1, 3, 5, 4, 3, 5, 4] 0
217 [4, 1, 3, 5, 4, 3, 5] 0
218 [4, 1, 3, 5, 4, 3] 0
219 [4, 1, 3, 5, 4, 5, 4] 0
220 [4, 1, 3, 5, 4, 5] 0
221 [4, 1, 3, 5, 4] 0
222 [4, 1, 3, 5] 0
223 [4, 1, 3, 4] 0
224 [4, 1, 3] 0
225 [4, 1, 5, 4, 5] 0
226 [4, 1, 5, 4] 0
227 [4, 1, 5] 0
228 [4, 1] 0
229 [4, 3, 5, 4, 3, 5, 4, 3, 5] 0
230 [4, 3, 5, 4, 3, 5, 4, 3] 0
231 [4, 3, 5, 4, 3, 5, 4, 5] 0
232 [4, 3, 5, 4, 3, 5, 4] 0
233 [4, 3, 5, 4, 3, 5] 0
234 [4, 3, 5, 4, 3] 0
235 [4, 3, 5, 4, 5, 4] 0
236 [4, 3, 5, 4, 5] 0
237 [4, 3, 5, 4] 0
238 [4, 3, 5] 0
239 [4, 3, 4] 0
240 [4, 3] 0
241 [4, 5, 4, 5] 0
242 [4, 5, 4] 0
243 [4, 5] 0
244 [4] 0
245 [1, 3, 5] 0
246 [1, 3] 0
247 [1, 5] 0
248 [1] 0
249 [3, 5] 0
250 [3] 0
251 [5] 0
252 [] 0
sage: A=CartanMatrix(['C',7])
....: c=[0,2,4,1,3,5]
....: cinv=list(reversed(c))
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: for i in range(coxeter_number(A)//2):
....:     P=P.intersection(Polyhedron(vertices=[vector([0]*A.nrows())],rays=refl
....: ect_matrix(A,B(A,c),cinv*i).columns()))
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     Bplus=block_matrix([[B(A,c),matrix(lam(A,v)).transpose()]])
....:     for k in c:
....:         Bplus.mutate(k)
....:     la=vector(Bplus[:,-1])
....:     d=P.intersection(p_lambda(B(A,c),la,cinv).translation(-la)).dimension(
....: )
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
Cell In [1322], line 4
      2 c=[Integer(0),Integer(2),Integer(4),Integer(1),Integer(3),Integer(5)]
      3 cinv=list(reversed(c))
----> 4 P=Polyhedron(vertices=[vector([Integer(0)]*A.nrows())],rays=B(A,c).columns())
      5 for i in range(coxeter_number(A)//Integer(2)):
      6     P=P.intersection(Polyhedron(vertices=[vector([Integer(0)]*A.nrows())],rays=reflect_matrix(A,B(A,c),cinv*i).columns()))

File ~/git/affine_dominance/software/domination5.py:89, in B(A, c)
     87     out[i,i]=0
     88     for j in range(i+1,n):
---> 89         out[c[i],c[j]]=-A[c[i],c[j]]
     90         out[c[j],c[i]]=A[c[j],c[i]]
     91 return out

IndexError: list index out of range
sage: A=CartanMatrix(['C',7])
....: c=[0,2,4,6,1,3,5]
....: cinv=list(reversed(c))
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: for i in range(coxeter_number(A)//2):
....:     P=P.intersection(Polyhedron(vertices=[vector([0]*A.nrows())],rays=refl
....: ect_matrix(A,B(A,c),cinv*i).columns()))
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     Bplus=block_matrix([[B(A,c),matrix(lam(A,v)).transpose()]])
....:     for k in c:
....:         Bplus.mutate(k)
....:     la=vector(Bplus[:,-1])
....:     d=P.intersection(p_lambda(B(A,c),la,cinv).translation(-la)).dimension(
....: )
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
1 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5] 0
2 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3] 0
3 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 5] 0
4 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1] 0
5 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5] 0
6 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3] 0
7 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 5] 0
8 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6] 0
9 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 1, 3] 0
10 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 1] 0
11 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 3] 0
12 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4] 0
13 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 6, 1] 0
14 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 6] 0
15 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 1] 0
16 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2] 0
17 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 5] 0
18 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6] 0
19 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4] 0
20 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 6] 0
21 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5] 0
22 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 2, 1] 0
23 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 2] 0
24 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3] 0
25 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 5, 6] 0
26 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 5] 0
27 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1] 0
28 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 5] 0
29 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6] 0
30 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4] 0
31 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 6] 0
32 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2] 0
33 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 5] 0
34 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6] 0
35 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4] 0
36 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 6] 0
37 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5] 0
38 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 2] 0
39 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3] 0
40 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 5, 6] 0
41 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 5] 0
42 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6] 0
43 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 2, 1] 0
44 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 2] 0
45 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 1, 3] 0
46 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 1] 0
47 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 3, 2] 0
48 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 3] 0
49 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4] 0
50 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 6, 1] 0
51 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 6] 0
52 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 1] 0
53 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2] 0
54 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 6] 0
55 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 3, 5] 0
56 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 3] 0
57 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 5, 6] 0
58 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 5] 0
59 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6] 0
60 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 3] 0
61 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4] 0
62 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 6] 0
63 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5] 0
64 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 2, 1] 0
65 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 2] 0
66 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3] 0
67 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 5, 4, 6] 0
68 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 5, 4] 0
69 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 5, 6] 0
70 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 5] 0
71 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1] 0
72 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6] 0
73 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4] 0
74 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 6] 0
75 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2] 0
76 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6] 0
77 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4] 0
78 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 6] 0
79 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5] 0
80 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 2] 0
81 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3] 0
82 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 5, 6] 0
83 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 5] 0
84 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6] 0
85 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 3, 2] 0
86 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 3] 0
87 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4] 0
88 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 6] 0
89 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2] 0
90 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 6] 0
91 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5] 0
92 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3] 0
93 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 5, 6] 0
94 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 5] 0
95 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6] 0
96 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 3] 0
97 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4] 0
98 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 6] 0
99 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5] 0
100 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 2] 0
101 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3] 0
102 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 5, 4, 6] 0
103 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 5, 4] 0
104 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 5, 6] 0
105 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 5] 0
106 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6] 0
107 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 2, 1] 0
108 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 2] 0
109 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 1, 3] 0
110 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 1] 0
111 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 3, 2] 0
112 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 3] 0
113 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4] 0
114 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 6, 1, 5] 0
115 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 6, 1] 0
116 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 6, 5] 0
117 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 6] 0
118 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 1] 0
119 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2] 0
120 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5] 0
121 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 3] 0
122 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 5] 0
123 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6] 0
124 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 3] 0
125 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 4] 0
126 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 6] 0
127 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 3, 5] 0
128 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 3] 0
129 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 5, 4, 6] 0
130 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 5, 4] 0
131 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 5, 6] 0
132 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 5] 0
133 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6] 0
134 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 3] 0
135 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4] 0
136 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 6, 5] 0
137 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 6] 0
138 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5] 0
139 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 2, 1] 0
140 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 2] 0
141 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3] 0
142 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 5, 4, 6, 5, 4] 0
143 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 5, 4, 6, 5] 0
144 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 5, 4, 6] 0
145 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 5, 4] 0
146 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 5, 6, 5] 0
147 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 5, 6] 0
148 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 5] 0
149 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1] 0
150 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4] 0
151 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2] 0
152 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4] 0
153 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5] 0
154 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 2] 0
155 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3] 0
156 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 5] 0
157 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6] 0
158 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 3, 2] 0
159 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 3] 0
160 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4] 0
161 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 6] 0
162 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2] 0
163 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5] 0
164 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3] 0
165 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 5] 0
166 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6] 0
167 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 3] 0
168 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4] 0
169 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 6] 0
170 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5] 0
171 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 2] 0
172 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3] 0
173 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 5, 4, 6] 0
174 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 5, 4] 0
175 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 5, 6] 0
176 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 5] 0
177 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6] 0
178 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 3, 2] 0
179 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 3] 0
180 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4] 0
181 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 6, 5] 0
182 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 6] 0
183 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2] 0
184 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5] 0
185 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3] 0
186 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 5] 0
187 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6] 0
188 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 3] 0
189 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 4] 0
190 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 6] 0
191 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5] 0
192 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3] 0
193 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 5, 4, 6] 0
194 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 5, 4] 0
195 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 5, 6] 0
196 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 5] 0
197 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6] 0
198 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 3] 0
199 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4] 0
200 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 6, 5] 0
201 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 6] 0
202 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5] 0
203 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 2] 0
204 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3] 0
205 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 5, 4, 6, 5, 4] 0
206 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 5, 4, 6, 5] 0
207 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 5, 4, 6] 0
208 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 5, 4] 0
209 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 5, 6, 5] 0
210 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 5, 6] 0
211 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 5] 0
212 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6] 0
213 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 5, 2, 1] 0
214 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 5, 2] 0
215 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 5] 0
216 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 2, 1] 0
217 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 2] 0
218 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 1, 3] 0
219 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 1, 5] 0
220 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 1] 0
221 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 3, 5, 2] 0
222 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 3, 5] 0
223 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 3, 2] 0
224 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 3] 0
225 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 5] 0
226 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4] 0
227 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 6, 1, 5] 0
228 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 6, 1] 0
229 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 6, 5] 0
230 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 6] 0
231 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 1] 0
232 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2] 0
233 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5, 4, 3] 0
234 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5, 4] 0
235 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5] 0
236 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 3] 0
237 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 5, 4] 0
238 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 5] 0
239 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6] 0
240 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 3] 0
241 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 4] 0
242 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 6, 5] 0
243 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 6] 0
244 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 3, 5] 0
245 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 3] 0
246 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 5, 4, 6, 5, 4] 0
247 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 5, 4, 6, 5] 0
248 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 5, 4, 6] 0
249 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 5, 4] 0
250 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 5, 6, 5] 0
251 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 5, 6] 0
252 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 5] 0
^[[B253 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6] 0
254 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 3, 5] 0
255 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 3] 0
256 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 5] 0
257 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4] 0
258 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 6, 5] 0
259 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 6] 0
260 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5] 0
261 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 2, 4, 1] 0
262 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 2, 4] 0
263 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 2, 1] 0
264 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 2] 0
265 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 4] 0
266 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3] 0
267 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 5, 4, 6, 5, 4] 0
268 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 5, 4, 6, 5] 0
269 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 5, 4, 6] 0
270 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 5, 4] 0
271 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 5, 6, 5] 0
272 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 5, 6] 0
273 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 5] 0
274 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1] 0
275 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2] 0
276 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5] 0
277 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 2] 0
278 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3] 0
279 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 5] 0
280 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6] 0
281 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 3, 2] 0
282 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 3] 0
283 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4] 0
284 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 6] 0
285 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2] 0
286 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5] 0
287 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3] 0
288 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 5] 0
289 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6] 0
290 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 3] 0
291 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4] 0
292 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 6] 0
293 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5] 0
294 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 2] 0
295 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3] 0
296 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 5, 4, 6] 0
297 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 5, 4] 0
298 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 5, 6] 0
299 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 5] 0
300 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6] 0
301 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 3, 2] 0
302 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 3] 0
303 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4] 0
304 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 6, 5] 0
305 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 6] 0
306 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2] 0
307 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3] 0
308 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6] 0
309 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 3] 0
310 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 4] 0
311 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 6] 0
312 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5] 0
313 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3] 0
314 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 5, 4, 6] 0
315 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 5, 4] 0
316 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 5, 6] 0
317 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 5] 0
318 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6] 0
319 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 3] 0
320 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4] 0
321 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 6, 5] 0
322 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 6] 0
323 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5] 0
324 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 2] 0
325 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3] 0
326 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 5, 4, 6, 5, 4] 0
327 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 5, 4, 6, 5] 0
328 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 5, 4, 6] 0
329 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 5, 4] 0
330 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 5, 6, 5] 0
331 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 5, 6] 0
332 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 5] 0
333 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6] 0
334 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 3, 5, 2] 0
335 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 3, 5] 0
336 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 3, 2] 0
337 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 3] 0
338 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 5] 0
339 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4] 0
340 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 6, 5] 0
341 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 6] 0
342 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2] 0
343 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5, 4, 3] 0
344 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5, 4] 0
345 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5] 0
346 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3] 0
347 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 5, 4] 0
348 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 5] 0
349 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6] 0
350 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 3] 0
351 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 4] 0
352 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 6, 5] 0
353 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 6] 0
354 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5] 0
355 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3] 0
356 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 5, 4, 6, 5, 4] 0
357 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 5, 4, 6, 5] 0
358 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 5, 4, 6] 0
359 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 5, 4] 0
360 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 5, 6, 5] 0
361 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 5, 6] 0
362 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 5] 0
363 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6] 0
364 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 3, 5] 0
365 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 3] 0
366 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 5] 0
367 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4] 0
368 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 6, 5] 0
369 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 6] 0
370 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5] 0
371 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 2, 4] 0
372 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 2] 0
373 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 4] 0
374 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3] 0
375 [2, 4, 6, 1, 3, 5, 2, 4, 6, 5, 4, 6, 5, 4] 0
376 [2, 4, 6, 1, 3, 5, 2, 4, 6, 5, 4, 6, 5] 0
377 [2, 4, 6, 1, 3, 5, 2, 4, 6, 5, 4, 6] 0
378 [2, 4, 6, 1, 3, 5, 2, 4, 6, 5, 4] 0
379 [2, 4, 6, 1, 3, 5, 2, 4, 6, 5, 6, 5] 0
380 [2, 4, 6, 1, 3, 5, 2, 4, 6, 5, 6] 0
381 [2, 4, 6, 1, 3, 5, 2, 4, 6, 5] 0
382 [2, 4, 6, 1, 3, 5, 2, 4, 6] 0
383 [2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3, 5] 0
384 [2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3] 0
385 [2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 5] 0
386 [2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1] 0
387 [2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 3, 5] 0
388 [2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 3] 0
389 [2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 5] 0
390 [2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4] 0
391 [2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 5, 2, 1] 0
392 [2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 5, 2] 0
393 [2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 5, 4, 5] 0
394 [2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 5, 4] 0
395 [2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 5] 0
396 [2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 2, 4, 1] 0
397 [2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 2, 4] 0
398 [2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 2, 1] 0
399 [2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 2] 0
400 [2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 4] 0
401 [2, 4, 6, 1, 3, 5, 2, 4, 1, 3] 0
402 [2, 4, 6, 1, 3, 5, 2, 4, 1, 5] 0
403 [2, 4, 6, 1, 3, 5, 2, 4, 1] 0
404 [2, 4, 6, 1, 3, 5, 2, 4, 3, 5, 2, 4, 5] 0
405 [2, 4, 6, 1, 3, 5, 2, 4, 3, 5, 2, 4] 0
406 [2, 4, 6, 1, 3, 5, 2, 4, 3, 5, 2] 0
407 [2, 4, 6, 1, 3, 5, 2, 4, 3, 5, 4, 5] 0
408 [2, 4, 6, 1, 3, 5, 2, 4, 3, 5, 4] 0
409 [2, 4, 6, 1, 3, 5, 2, 4, 3, 5] 0
410 [2, 4, 6, 1, 3, 5, 2, 4, 3, 2, 4] 0
411 [2, 4, 6, 1, 3, 5, 2, 4, 3, 2] 0
412 [2, 4, 6, 1, 3, 5, 2, 4, 3, 4] 0
413 [2, 4, 6, 1, 3, 5, 2, 4, 3] 0
414 [2, 4, 6, 1, 3, 5, 2, 4, 5] 0
415 [2, 4, 6, 1, 3, 5, 2, 4] 0
416 [2, 4, 6, 1, 3, 5, 2, 6, 1, 3, 5] 0
417 [2, 4, 6, 1, 3, 5, 2, 6, 1, 3] 0
418 [2, 4, 6, 1, 3, 5, 2, 6, 1, 5] 0
419 [2, 4, 6, 1, 3, 5, 2, 6, 1] 0
420 [2, 4, 6, 1, 3, 5, 2, 6, 3, 5] 0
421 [2, 4, 6, 1, 3, 5, 2, 6, 3] 0
422 [2, 4, 6, 1, 3, 5, 2, 6, 5] 0
423 [2, 4, 6, 1, 3, 5, 2, 6] 0
424 [2, 4, 6, 1, 3, 5, 2, 1, 3] 0
425 [2, 4, 6, 1, 3, 5, 2, 1] 0
426 [2, 4, 6, 1, 3, 5, 2, 3] 0
427 [2, 4, 6, 1, 3, 5, 2] 0
428 [2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5] 0
429 [2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3] 0
430 [2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 5] 0
431 [2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6] 0
432 [2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5, 4, 3] 0
433 [2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5, 4] 0
434 [2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5, 6] 0
435 [2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5] 0
436 [2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 3] 0
437 [2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 5, 4, 6] 0
438 [2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 5, 4] 0
439 [2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 5, 6] 0
440 [2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 5] 0
441 [2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6] 0
442 [2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 3] 0
443 [2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 4] 0
444 [2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 6, 5] 0
445 [2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 6] 0
446 [2, 4, 6, 1, 3, 5, 4, 6, 3, 5] 0
447 [2, 4, 6, 1, 3, 5, 4, 6, 3] 0
448 [2, 4, 6, 1, 3, 5, 4, 6, 5, 4, 6, 5, 4] 0
449 [2, 4, 6, 1, 3, 5, 4, 6, 5, 4, 6, 5] 0
450 [2, 4, 6, 1, 3, 5, 4, 6, 5, 4, 6] 0
451 [2, 4, 6, 1, 3, 5, 4, 6, 5, 4] 0
452 [2, 4, 6, 1, 3, 5, 4, 6, 5, 6, 5] 0
453 [2, 4, 6, 1, 3, 5, 4, 6, 5, 6] 0
454 [2, 4, 6, 1, 3, 5, 4, 6, 5] 0
455 [2, 4, 6, 1, 3, 5, 4, 6] 0
456 [2, 4, 6, 1, 3, 5, 4, 3, 5] 0
457 [2, 4, 6, 1, 3, 5, 4, 3] 0
458 [2, 4, 6, 1, 3, 5, 4, 5] 0
459 [2, 4, 6, 1, 3, 5, 4] 0
460 [2, 4, 6, 1, 3, 5, 6, 5] 0
461 [2, 4, 6, 1, 3, 5, 6] 0
462 [2, 4, 6, 1, 3, 5] 0
463 [2, 4, 6, 1, 3, 2, 4, 1, 3, 2, 4] 0
464 [2, 4, 6, 1, 3, 2, 4, 1, 3, 2] 0
465 [2, 4, 6, 1, 3, 2, 4, 1, 3, 4] 0
466 [2, 4, 6, 1, 3, 2, 4, 1, 3] 0
467 [2, 4, 6, 1, 3, 2, 4, 1] 0
468 [2, 4, 6, 1, 3, 2, 4, 3, 4] 0
469 [2, 4, 6, 1, 3, 2, 4, 3] 0
470 [2, 4, 6, 1, 3, 2, 4] 0
471 [2, 4, 6, 1, 3, 2, 1, 3] 0
472 [2, 4, 6, 1, 3, 2, 1] 0
473 [2, 4, 6, 1, 3, 2, 3] 0
474 [2, 4, 6, 1, 3, 2] 0
475 [2, 4, 6, 1, 3, 4] 0
476 [2, 4, 6, 1, 3] 0
477 [2, 4, 6, 1, 5, 2, 4, 6, 5, 4, 6, 5] 0
478 [2, 4, 6, 1, 5, 2, 4, 6, 5, 4, 6] 0
479 [2, 4, 6, 1, 5, 2, 4, 6, 5, 4] 0
480 [2, 4, 6, 1, 5, 2, 4, 6, 5, 6] 0
481 [2, 4, 6, 1, 5, 2, 4, 6, 5] 0
482 [2, 4, 6, 1, 5, 2, 4, 6] 0
483 [2, 4, 6, 1, 5, 2, 4] 0
484 [2, 4, 6, 1, 5, 2, 6, 5] 0
485 [2, 4, 6, 1, 5, 2, 6] 0
486 [2, 4, 6, 1, 5, 2] 0
487 [2, 4, 6, 1, 5, 4, 6, 5, 4, 6, 5] 0
488 [2, 4, 6, 1, 5, 4, 6, 5, 4, 6] 0
489 [2, 4, 6, 1, 5, 4, 6, 5, 4] 0
490 [2, 4, 6, 1, 5, 4, 6, 5, 6] 0
491 [2, 4, 6, 1, 5, 4, 6, 5] 0
492 [2, 4, 6, 1, 5, 4, 6] 0
493 [2, 4, 6, 1, 5, 4] 0
494 [2, 4, 6, 1, 5, 6, 5] 0
495 [2, 4, 6, 1, 5, 6] 0
496 [2, 4, 6, 1, 5] 0
497 [2, 4, 6, 1, 2] 0
498 [2, 4, 6, 1] 0
499 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5] 0
500 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3] 0
501 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 5] 0
502 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6] 0
503 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 3] 0
504 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4] 0
505 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 6] 0
506 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2] 0
507 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 5] 0
508 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6] 0
509 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4] 0
510 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 6] 0
511 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5] 0
512 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 2] 0
513 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3] 0
514 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 5, 6] 0
515 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 5] 0
516 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6] 0
517 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 3, 2] 0
518 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 3] 0
519 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4] 0
520 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 6] 0
521 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2] 0
522 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6] 0
523 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 4] 0
524 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 6] 0
525 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5] 0
526 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3] 0
527 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 5, 6] 0
528 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 5] 0
529 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6] 0
530 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 3] 0
531 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4] 0
532 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 6] 0
533 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5] 0
534 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 2] 0
535 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3] 0
536 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 5, 4, 6, 5] 0
537 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 5, 4, 6] 0
538 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 5, 4] 0
539 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 5, 6] 0
540 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 5] 0
541 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6] 0
542 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 3, 2] 0
543 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 3] 0
544 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4] 0
545 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 6, 5] 0
546 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 6] 0
547 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2] 0
548 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5, 4] 0
549 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5] 0
550 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3] 0
551 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 5] 0
552 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6] 0
553 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 3] 0
554 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 4] 0
555 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 6] 0
556 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5] 0
557 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3] 0
558 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 5, 4, 6, 5] 0
559 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 5, 4, 6] 0
560 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 5, 4] 0
561 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 5, 6] 0
562 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 5] 0
563 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6] 0
564 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 3] 0
565 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4] 0
566 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 6, 5] 0
567 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 6] 0
568 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5] 0
569 [2, 4, 6, 3, 5, 2, 4, 6, 3, 2] 0
570 [2, 4, 6, 3, 5, 2, 4, 6, 3] 0
571 [2, 4, 6, 3, 5, 2, 4, 6, 5, 4, 6, 5, 4] 0
572 [2, 4, 6, 3, 5, 2, 4, 6, 5, 4, 6, 5] 0
573 [2, 4, 6, 3, 5, 2, 4, 6, 5, 4, 6] 0
574 [2, 4, 6, 3, 5, 2, 4, 6, 5, 4] 0
575 [2, 4, 6, 3, 5, 2, 4, 6, 5, 6, 5] 0
576 [2, 4, 6, 3, 5, 2, 4, 6, 5, 6] 0
577 [2, 4, 6, 3, 5, 2, 4, 6, 5] 0
578 [2, 4, 6, 3, 5, 2, 4, 6] 0
579 [2, 4, 6, 3, 5, 2, 4, 3, 5, 2, 4] 0
580 [2, 4, 6, 3, 5, 2, 4, 3, 5, 2] 0
581 [2, 4, 6, 3, 5, 2, 4, 3, 5, 4] 0
582 [2, 4, 6, 3, 5, 2, 4, 3, 5] 0
583 [2, 4, 6, 3, 5, 2, 4, 3, 2] 0
584 [2, 4, 6, 3, 5, 2, 4, 3] 0
585 [2, 4, 6, 3, 5, 2, 4, 5] 0
586 [2, 4, 6, 3, 5, 2, 4] 0
587 [2, 4, 6, 3, 5, 2, 6, 5] 0
588 [2, 4, 6, 3, 5, 2, 6] 0
589 [2, 4, 6, 3, 5, 2] 0
590 [2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5] 0
591 [2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3] 0
592 [2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 5] 0
593 [2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6] 0
594 [2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5, 4, 3] 0
595 [2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5, 4] 0
596 [2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5, 6] 0
597 [2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5] 0
598 [2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3] 0
599 [2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 5, 4, 6] 0
600 [2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 5, 4] 0
601 [2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 5, 6] 0
602 [2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 5] 0
603 [2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6] 0
604 [2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 3] 0
605 [2, 4, 6, 3, 5, 4, 6, 3, 5, 4] 0
606 [2, 4, 6, 3, 5, 4, 6, 3, 5, 6, 5] 0
607 [2, 4, 6, 3, 5, 4, 6, 3, 5, 6] 0
608 [2, 4, 6, 3, 5, 4, 6, 3, 5] 0
609 [2, 4, 6, 3, 5, 4, 6, 3] 0
610 [2, 4, 6, 3, 5, 4, 6, 5, 4, 6, 5, 4] 0
611 [2, 4, 6, 3, 5, 4, 6, 5, 4, 6, 5] 0
612 [2, 4, 6, 3, 5, 4, 6, 5, 4, 6] 0
613 [2, 4, 6, 3, 5, 4, 6, 5, 4] 0
614 [2, 4, 6, 3, 5, 4, 6, 5, 6, 5] 0
615 [2, 4, 6, 3, 5, 4, 6, 5, 6] 0
616 [2, 4, 6, 3, 5, 4, 6, 5] 0
617 [2, 4, 6, 3, 5, 4, 6] 0
618 [2, 4, 6, 3, 5, 4, 3, 5] 0
619 [2, 4, 6, 3, 5, 4, 3] 0
620 [2, 4, 6, 3, 5, 4, 5] 0
621 [2, 4, 6, 3, 5, 4] 0
622 [2, 4, 6, 3, 5, 6, 5] 0
623 [2, 4, 6, 3, 5, 6] 0
624 [2, 4, 6, 3, 5] 0
625 [2, 4, 6, 3, 2, 4, 3] 0
626 [2, 4, 6, 3, 2, 4] 0
627 [2, 4, 6, 3, 2] 0
628 [2, 4, 6, 3, 4] 0
629 [2, 4, 6, 3] 0
630 [2, 4, 6, 5, 4, 6, 5, 4, 6, 5] 0
631 [2, 4, 6, 5, 4, 6, 5, 4, 6] 0
632 [2, 4, 6, 5, 4, 6, 5, 4] 0
633 [2, 4, 6, 5, 4, 6, 5, 6] 0
634 [2, 4, 6, 5, 4, 6, 5] 0
635 [2, 4, 6, 5, 4, 6] 0
636 [2, 4, 6, 5, 4] 0
637 [2, 4, 6, 5, 6, 5] 0
638 [2, 4, 6, 5, 6] 0
639 [2, 4, 6, 5] 0
640 [2, 4, 6] 0
641 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3, 5] 0
642 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3] 0
643 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 5] 0
644 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1] 0
645 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 3, 5] 0
646 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 3] 0
647 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 5] 0
648 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4] 0
649 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 1] 0
650 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2] 0
651 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 4, 5] 0
652 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 4] 0
653 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5] 0
654 [2, 4, 1, 3, 5, 2, 4, 1, 3, 2, 4, 1] 0
655 [2, 4, 1, 3, 5, 2, 4, 1, 3, 2, 4] 0
656 [2, 4, 1, 3, 5, 2, 4, 1, 3, 2, 1] 0
657 [2, 4, 1, 3, 5, 2, 4, 1, 3, 2] 0
658 [2, 4, 1, 3, 5, 2, 4, 1, 3, 4] 0
659 [2, 4, 1, 3, 5, 2, 4, 1, 3] 0
660 [2, 4, 1, 3, 5, 2, 4, 1, 5] 0
661 [2, 4, 1, 3, 5, 2, 4, 1] 0
662 [2, 4, 1, 3, 5, 2, 4, 3, 5, 2, 4, 5] 0
663 [2, 4, 1, 3, 5, 2, 4, 3, 5, 2, 4] 0
664 [2, 4, 1, 3, 5, 2, 4, 3, 5, 2] 0
665 [2, 4, 1, 3, 5, 2, 4, 3, 5, 4, 5] 0
666 [2, 4, 1, 3, 5, 2, 4, 3, 5, 4] 0
667 [2, 4, 1, 3, 5, 2, 4, 3, 5] 0
668 [2, 4, 1, 3, 5, 2, 4, 3, 2, 4] 0
669 [2, 4, 1, 3, 5, 2, 4, 3, 2] 0
670 [2, 4, 1, 3, 5, 2, 4, 3, 4] 0
671 [2, 4, 1, 3, 5, 2, 4, 3] 0
672 [2, 4, 1, 3, 5, 2, 4, 5] 0
673 [2, 4, 1, 3, 5, 2, 4] 0
674 [2, 4, 1, 3, 5, 2, 1, 3] 0
675 [2, 4, 1, 3, 5, 2, 1] 0
676 [2, 4, 1, 3, 5, 2, 3] 0
677 [2, 4, 1, 3, 5, 2] 0
678 [2, 4, 1, 3, 5, 4, 3, 5] 0
679 [2, 4, 1, 3, 5, 4, 3] 0
680 [2, 4, 1, 3, 5, 4, 5] 0
681 [2, 4, 1, 3, 5, 4] 0
682 [2, 4, 1, 3, 5] 0
683 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4] 0
684 [2, 4, 1, 3, 2, 4, 1, 3, 2] 0
685 [2, 4, 1, 3, 2, 4, 1, 3, 4] 0
686 [2, 4, 1, 3, 2, 4, 1, 3] 0
687 [2, 4, 1, 3, 2, 4, 1] 0
688 [2, 4, 1, 3, 2, 4, 3, 4] 0
689 [2, 4, 1, 3, 2, 4, 3] 0
690 [2, 4, 1, 3, 2, 4] 0
691 [2, 4, 1, 3, 2, 1, 3] 0
692 [2, 4, 1, 3, 2, 1] 0
693 [2, 4, 1, 3, 2, 3] 0
694 [2, 4, 1, 3, 2] 0
695 [2, 4, 1, 3, 4] 0
696 [2, 4, 1, 3] 0
697 [2, 4, 1, 5, 2, 4] 0
698 [2, 4, 1, 5, 2] 0
699 [2, 4, 1, 5, 4] 0
700 [2, 4, 1, 5] 0
701 [2, 4, 1, 2] 0
702 [2, 4, 1] 0
703 [2, 4, 3, 5, 2, 4, 3, 5, 2, 4] 0
704 [2, 4, 3, 5, 2, 4, 3, 5, 2] 0
705 [2, 4, 3, 5, 2, 4, 3, 5, 4] 0
706 [2, 4, 3, 5, 2, 4, 3, 5] 0
707 [2, 4, 3, 5, 2, 4, 3, 2] 0
708 [2, 4, 3, 5, 2, 4, 3] 0
709 [2, 4, 3, 5, 2, 4, 5] 0
710 [2, 4, 3, 5, 2, 4] 0
711 [2, 4, 3, 5, 2] 0
712 [2, 4, 3, 5, 4, 3, 5] 0
713 [2, 4, 3, 5, 4, 3] 0
714 [2, 4, 3, 5, 4, 5] 0
715 [2, 4, 3, 5, 4] 0
716 [2, 4, 3, 5] 0
717 [2, 4, 3, 2, 4, 3] 0
718 [2, 4, 3, 2, 4] 0
719 [2, 4, 3, 2] 0
720 [2, 4, 3, 4] 0
721 [2, 4, 3] 0
722 [2, 4, 5, 4] 0
723 [2, 4, 5] 0
724 [2, 4] 0
725 [2, 6, 1, 3, 5, 2, 6, 1, 3, 5] 0
726 [2, 6, 1, 3, 5, 2, 6, 1, 3] 0
727 [2, 6, 1, 3, 5, 2, 6, 1, 5] 0
728 [2, 6, 1, 3, 5, 2, 6, 1] 0
729 [2, 6, 1, 3, 5, 2, 6, 3, 5] 0
730 [2, 6, 1, 3, 5, 2, 6, 3] 0
731 [2, 6, 1, 3, 5, 2, 6, 5] 0
732 [2, 6, 1, 3, 5, 2, 6] 0
733 [2, 6, 1, 3, 5, 2, 1, 3] 0
734 [2, 6, 1, 3, 5, 2, 1] 0
735 [2, 6, 1, 3, 5, 2, 3] 0
736 [2, 6, 1, 3, 5, 2] 0
737 [2, 6, 1, 3, 5, 6, 5] 0
738 [2, 6, 1, 3, 5, 6] 0
739 [2, 6, 1, 3, 5] 0
740 [2, 6, 1, 3, 2, 1, 3] 0
741 [2, 6, 1, 3, 2, 1] 0
742 [2, 6, 1, 3, 2, 3] 0
743 [2, 6, 1, 3, 2] 0
744 [2, 6, 1, 3] 0
745 [2, 6, 1, 5, 2, 6, 5] 0
746 [2, 6, 1, 5, 2, 6] 0
747 [2, 6, 1, 5, 2] 0
748 [2, 6, 1, 5, 6, 5] 0
749 [2, 6, 1, 5, 6] 0
750 [2, 6, 1, 5] 0
751 [2, 6, 1, 2] 0
752 [2, 6, 1] 0
753 [2, 6, 3, 5, 2, 6, 5] 0
754 [2, 6, 3, 5, 2, 6] 0
755 [2, 6, 3, 5, 2] 0
756 [2, 6, 3, 5, 6, 5] 0
757 [2, 6, 3, 5, 6] 0
758 [2, 6, 3, 5] 0
759 [2, 6, 3, 2] 0
760 [2, 6, 3] 0
761 [2, 6, 5, 6, 5] 0
762 [2, 6, 5, 6] 0
763 [2, 6, 5] 0
764 [2, 6] 0
765 [2, 1, 3, 5, 2, 1, 3] 0
766 [2, 1, 3, 5, 2, 1] 0
767 [2, 1, 3, 5, 2, 3] 0
768 [2, 1, 3, 5, 2] 0
769 [2, 1, 3, 5] 0
770 [2, 1, 3, 2, 1, 3] 0
771 [2, 1, 3, 2, 1] 0
772 [2, 1, 3, 2, 3] 0
773 [2, 1, 3, 2] 0
774 [2, 1, 3] 0
775 [2, 1, 5, 2] 0
776 [2, 1, 5] 0
777 [2, 1, 2] 0
778 [2, 1] 0
779 [2, 3, 5, 2] 0
780 [2, 3, 5] 0
781 [2, 3, 2] 0
782 [2, 3] 0
783 [2, 5] 0
784 [2] 0
785 [4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5] 0
786 [4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3] 0
787 [4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 5] 0
788 [4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6] 0
789 [4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5, 4, 3] 0
790 [4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5, 4] 0
791 [4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5, 6] 0
792 [4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5] 0
793 [4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 3] 0
794 [4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 5, 4, 6] 0
795 [4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 5, 4] 0
796 [4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 5, 6] 0
797 [4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 5] 0
798 [4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6] 0
799 [4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 3] 0
800 [4, 6, 1, 3, 5, 4, 6, 3, 5, 4] 0
801 [4, 6, 1, 3, 5, 4, 6, 3, 5, 6, 5] 0
802 [4, 6, 1, 3, 5, 4, 6, 3, 5, 6] 0
803 [4, 6, 1, 3, 5, 4, 6, 3, 5] 0
804 [4, 6, 1, 3, 5, 4, 6, 3] 0
805 [4, 6, 1, 3, 5, 4, 6, 5, 4, 6, 5, 4] 0
806 [4, 6, 1, 3, 5, 4, 6, 5, 4, 6, 5] 0
807 [4, 6, 1, 3, 5, 4, 6, 5, 4, 6] 0
808 [4, 6, 1, 3, 5, 4, 6, 5, 4] 0
809 [4, 6, 1, 3, 5, 4, 6, 5, 6, 5] 0
810 [4, 6, 1, 3, 5, 4, 6, 5, 6] 0
811 [4, 6, 1, 3, 5, 4, 6, 5] 0
812 [4, 6, 1, 3, 5, 4, 6] 0
813 [4, 6, 1, 3, 5, 4, 3, 5] 0
814 [4, 6, 1, 3, 5, 4, 3] 0
815 [4, 6, 1, 3, 5, 4, 5] 0
816 [4, 6, 1, 3, 5, 4] 0
817 [4, 6, 1, 3, 5, 6, 5] 0
818 [4, 6, 1, 3, 5, 6] 0
819 [4, 6, 1, 3, 5] 0
820 [4, 6, 1, 3, 4] 0
821 [4, 6, 1, 3] 0
822 [4, 6, 1, 5, 4, 6, 5, 4, 6, 5] 0
823 [4, 6, 1, 5, 4, 6, 5, 4, 6] 0
824 [4, 6, 1, 5, 4, 6, 5, 4] 0
825 [4, 6, 1, 5, 4, 6, 5, 6] 0
826 [4, 6, 1, 5, 4, 6, 5] 0
827 [4, 6, 1, 5, 4, 6] 0
828 [4, 6, 1, 5, 4] 0
829 [4, 6, 1, 5, 6, 5] 0
830 [4, 6, 1, 5, 6] 0
831 [4, 6, 1, 5] 0
832 [4, 6, 1] 0
833 [4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5] 0
834 [4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3] 0
835 [4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 5] 0
836 [4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6] 0
837 [4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5, 4, 3] 0
838 [4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5, 4] 0
839 [4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5, 6] 0
840 [4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5] 0
841 [4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3] 0
842 [4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 5, 4, 6] 0
843 [4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 5, 4] 0
844 [4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 5, 6] 0
845 [4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 5] 0
846 [4, 6, 3, 5, 4, 6, 3, 5, 4, 6] 0
847 [4, 6, 3, 5, 4, 6, 3, 5, 4, 3] 0
848 [4, 6, 3, 5, 4, 6, 3, 5, 4] 0
849 [4, 6, 3, 5, 4, 6, 3, 5, 6, 5] 0
850 [4, 6, 3, 5, 4, 6, 3, 5, 6] 0
851 [4, 6, 3, 5, 4, 6, 3, 5] 0
852 [4, 6, 3, 5, 4, 6, 3] 0
853 [4, 6, 3, 5, 4, 6, 5, 4, 6, 5, 4] 0
854 [4, 6, 3, 5, 4, 6, 5, 4, 6, 5] 0
855 [4, 6, 3, 5, 4, 6, 5, 4, 6] 0
856 [4, 6, 3, 5, 4, 6, 5, 4] 0
857 [4, 6, 3, 5, 4, 6, 5, 6, 5] 0
858 [4, 6, 3, 5, 4, 6, 5, 6] 0
859 [4, 6, 3, 5, 4, 6, 5] 0
860 [4, 6, 3, 5, 4, 6] 0
861 [4, 6, 3, 5, 4, 3, 5] 0
862 [4, 6, 3, 5, 4, 3] 0
863 [4, 6, 3, 5, 4, 5] 0
864 [4, 6, 3, 5, 4] 0
865 [4, 6, 3, 5, 6, 5] 0
866 [4, 6, 3, 5, 6] 0
867 [4, 6, 3, 5] 0
868 [4, 6, 3, 4] 0
869 [4, 6, 3] 0
870 [4, 6, 5, 4, 6, 5, 4, 6, 5] 0
871 [4, 6, 5, 4, 6, 5, 4, 6] 0
872 [4, 6, 5, 4, 6, 5, 4] 0
873 [4, 6, 5, 4, 6, 5, 6] 0
874 [4, 6, 5, 4, 6, 5] 0
875 [4, 6, 5, 4, 6] 0
876 [4, 6, 5, 4] 0
877 [4, 6, 5, 6, 5] 0
878 [4, 6, 5, 6] 0
879 [4, 6, 5] 0
880 [4, 6] 0
881 [4, 1, 3, 5, 4, 3, 5] 0
882 [4, 1, 3, 5, 4, 3] 0
883 [4, 1, 3, 5, 4, 5] 0
884 [4, 1, 3, 5, 4] 0
885 [4, 1, 3, 5] 0
886 [4, 1, 3, 4] 0
887 [4, 1, 3] 0
888 [4, 1, 5, 4] 0
889 [4, 1, 5] 0
890 [4, 1] 0
891 [4, 3, 5, 4, 3, 5] 0
892 [4, 3, 5, 4, 3] 0
893 [4, 3, 5, 4, 5] 0
894 [4, 3, 5, 4] 0
895 [4, 3, 5] 0
896 [4, 3, 4] 0
897 [4, 3] 0
898 [4, 5, 4] 0
899 [4, 5] 0
900 [4] 0
901 [6, 1, 3, 5, 6, 5] 0
902 [6, 1, 3, 5, 6] 0
903 [6, 1, 3, 5] 0
904 [6, 1, 3] 0
905 [6, 1, 5, 6, 5] 0
906 [6, 1, 5, 6] 0
907 [6, 1, 5] 0
908 [6, 1] 0
909 [6, 3, 5, 6, 5] 0
910 [6, 3, 5, 6] 0
911 [6, 3, 5] 0
912 [6, 3] 0
913 [6, 5, 6, 5] 0
914 [6, 5, 6] 0
915 [6, 5] 0
916 [6] 0
917 [1, 3, 5] 0
918 [1, 3] 0
919 [1, 5] 0
920 [1] 0
921 [3, 5] 0
922 [3] 0
923 [5] 0
924 [] 0
sage: A=CartanMatrix(['A',7])
....: c=[0,2,4,6,1,3,5]
....: cinv=list(reversed(c))
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: for i in range(coxeter_number(A)//2):
....:     P=P.intersection(Polyhedron(vertices=[vector([0]*A.nrows())],rays=refl
....: ect_matrix(A,B(A,c),cinv*i).columns()))
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     Bplus=block_matrix([[B(A,c),matrix(lam(A,v)).transpose()]])
....:     for k in c:
....:         Bplus.mutate(k)
....:     la=vector(Bplus[:,-1])
....:     d=P.intersection(p_lambda(B(A,c),la,cinv).translation(-la)).dimension(
....: )
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
1 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6] 0
2 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4] 0
3 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 6] 0
4 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2] 0
5 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6] 0
6 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4] 0
7 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 6] 0
8 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5] 0
9 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 2] 0
10 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3] 0
11 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 5, 6] 0
12 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 5] 0
13 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1] 0
14 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6] 0
15 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4] 0
16 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 6] 0
17 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5] 0
18 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3] 0
19 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 5, 6] 0
20 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 5] 0
21 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6] 0
22 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 5, 2] 0
23 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 5] 0
24 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 2] 0
25 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 1, 3] 0
26 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 1, 5] 0
27 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 1] 0
28 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 3, 5] 0
29 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 3] 0
30 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 5] 0
31 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4] 0
32 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 6, 1] 0
33 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 6] 0
34 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 1] 0
35 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2] 0
36 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 5, 6] 0
37 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 5] 0
38 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6] 0
39 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 5] 0
40 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4] 0
41 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 6] 0
42 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5] 0
43 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 2, 4, 1] 0
44 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 2, 4] 0
45 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 2, 1] 0
46 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 2] 0
47 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 4] 0
48 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3] 0
49 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 5, 6] 0
50 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 5] 0
51 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1] 0
52 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 6] 0
53 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5] 0
54 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3] 0
55 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 5, 6] 0
56 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 5] 0
57 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6] 0
58 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 3, 5] 0
59 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 3] 0
60 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 5] 0
61 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4] 0
62 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 6] 0
63 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2] 0
64 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 5, 6] 0
65 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 5] 0
66 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6] 0
67 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 5] 0
68 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4] 0
69 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 6] 0
70 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5] 0
71 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 2, 4] 0
72 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 2] 0
73 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 4] 0
74 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3] 0
75 [2, 4, 6, 1, 3, 5, 2, 4, 6, 5, 6] 0
76 [2, 4, 6, 1, 3, 5, 2, 4, 6, 5] 0
77 [2, 4, 6, 1, 3, 5, 2, 4, 6] 0
78 [2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3, 5] 0
79 [2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3] 0
80 [2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 5] 0
81 [2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1] 0
82 [2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 3, 5] 0
83 [2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 3] 0
84 [2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 5] 0
85 [2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4] 0
86 [2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 5, 2, 1] 0
87 [2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 5, 2] 0
88 [2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 5, 4, 5] 0
89 [2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 5, 4] 0
90 [2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 5] 0
91 [2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 2, 4, 1] 0
92 [2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 2, 4] 0
93 [2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 2, 1] 0
94 [2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 2] 0
95 [2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 4] 0
96 [2, 4, 6, 1, 3, 5, 2, 4, 1, 3] 0
97 [2, 4, 6, 1, 3, 5, 2, 4, 1, 5] 0
98 [2, 4, 6, 1, 3, 5, 2, 4, 1] 0
99 [2, 4, 6, 1, 3, 5, 2, 4, 3, 5, 2, 4, 5] 0
100 [2, 4, 6, 1, 3, 5, 2, 4, 3, 5, 2, 4] 0
101 [2, 4, 6, 1, 3, 5, 2, 4, 3, 5, 2] 0
102 [2, 4, 6, 1, 3, 5, 2, 4, 3, 5, 4, 5] 0
103 [2, 4, 6, 1, 3, 5, 2, 4, 3, 5, 4] 0
104 [2, 4, 6, 1, 3, 5, 2, 4, 3, 5] 0
105 [2, 4, 6, 1, 3, 5, 2, 4, 3, 2, 4] 0
106 [2, 4, 6, 1, 3, 5, 2, 4, 3, 2] 0
107 [2, 4, 6, 1, 3, 5, 2, 4, 3, 4] 0
108 [2, 4, 6, 1, 3, 5, 2, 4, 3] 0
109 [2, 4, 6, 1, 3, 5, 2, 4, 5] 0
110 [2, 4, 6, 1, 3, 5, 2, 4] 0
111 [2, 4, 6, 1, 3, 5, 2, 6, 1, 3] 0
112 [2, 4, 6, 1, 3, 5, 2, 6, 1] 0
113 [2, 4, 6, 1, 3, 5, 2, 6, 3] 0
114 [2, 4, 6, 1, 3, 5, 2, 6] 0
115 [2, 4, 6, 1, 3, 5, 2, 1, 3] 0
116 [2, 4, 6, 1, 3, 5, 2, 1] 0
117 [2, 4, 6, 1, 3, 5, 2, 3] 0
118 [2, 4, 6, 1, 3, 5, 2] 0
119 [2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6] 0
120 [2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 4] 0
121 [2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 6] 0
122 [2, 4, 6, 1, 3, 5, 4, 6, 3, 5] 0
123 [2, 4, 6, 1, 3, 5, 4, 6, 3] 0
124 [2, 4, 6, 1, 3, 5, 4, 6, 5, 6] 0
125 [2, 4, 6, 1, 3, 5, 4, 6, 5] 0
126 [2, 4, 6, 1, 3, 5, 4, 6] 0
127 [2, 4, 6, 1, 3, 5, 4, 3, 5] 0
128 [2, 4, 6, 1, 3, 5, 4, 3] 0
129 [2, 4, 6, 1, 3, 5, 4, 5] 0
130 [2, 4, 6, 1, 3, 5, 4] 0
131 [2, 4, 6, 1, 3, 5, 6] 0
132 [2, 4, 6, 1, 3, 5] 0
133 [2, 4, 6, 1, 3, 2, 4, 1, 3, 2, 4] 0
134 [2, 4, 6, 1, 3, 2, 4, 1, 3, 2] 0
135 [2, 4, 6, 1, 3, 2, 4, 1, 3, 4] 0
136 [2, 4, 6, 1, 3, 2, 4, 1, 3] 0
137 [2, 4, 6, 1, 3, 2, 4, 1] 0
138 [2, 4, 6, 1, 3, 2, 4, 3, 4] 0
139 [2, 4, 6, 1, 3, 2, 4, 3] 0
140 [2, 4, 6, 1, 3, 2, 4] 0
141 [2, 4, 6, 1, 3, 2, 1, 3] 0
142 [2, 4, 6, 1, 3, 2, 1] 0
143 [2, 4, 6, 1, 3, 2, 3] 0
144 [2, 4, 6, 1, 3, 2] 0
145 [2, 4, 6, 1, 3, 4] 0
146 [2, 4, 6, 1, 3] 0
147 [2, 4, 6, 1, 5, 2, 4, 6, 5] 0
148 [2, 4, 6, 1, 5, 2, 4, 6] 0
149 [2, 4, 6, 1, 5, 2, 4] 0
150 [2, 4, 6, 1, 5, 2, 6] 0
151 [2, 4, 6, 1, 5, 2] 0
152 [2, 4, 6, 1, 5, 4, 6, 5] 0
153 [2, 4, 6, 1, 5, 4, 6] 0
154 [2, 4, 6, 1, 5, 4] 0
155 [2, 4, 6, 1, 5, 6] 0
156 [2, 4, 6, 1, 5] 0
157 [2, 4, 6, 1, 2] 0
158 [2, 4, 6, 1] 0
159 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5] 0
160 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3] 0
161 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 5] 0
162 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6] 0
163 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 3] 0
164 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4] 0
165 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 6] 0
166 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2] 0
167 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 5] 0
168 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6] 0
169 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4] 0
170 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 6] 0
171 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5] 0
172 [2, 4, 6, 3, 5, 2, 4, 6, 3, 2] 0
173 [2, 4, 6, 3, 5, 2, 4, 6, 3] 0
174 [2, 4, 6, 3, 5, 2, 4, 6, 5, 6] 0
175 [2, 4, 6, 3, 5, 2, 4, 6, 5] 0
176 [2, 4, 6, 3, 5, 2, 4, 6] 0
177 [2, 4, 6, 3, 5, 2, 4, 3, 5, 2, 4] 0
178 [2, 4, 6, 3, 5, 2, 4, 3, 5, 2] 0
179 [2, 4, 6, 3, 5, 2, 4, 3, 5, 4] 0
180 [2, 4, 6, 3, 5, 2, 4, 3, 5] 0
181 [2, 4, 6, 3, 5, 2, 4, 3, 2] 0
182 [2, 4, 6, 3, 5, 2, 4, 3] 0
183 [2, 4, 6, 3, 5, 2, 4, 5] 0
184 [2, 4, 6, 3, 5, 2, 4] 0
185 [2, 4, 6, 3, 5, 2, 6] 0
186 [2, 4, 6, 3, 5, 2] 0
187 [2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6] 0
188 [2, 4, 6, 3, 5, 4, 6, 3, 5, 4] 0
189 [2, 4, 6, 3, 5, 4, 6, 3, 5, 6] 0
190 [2, 4, 6, 3, 5, 4, 6, 3, 5] 0
191 [2, 4, 6, 3, 5, 4, 6, 3] 0
192 [2, 4, 6, 3, 5, 4, 6, 5, 6] 0
193 [2, 4, 6, 3, 5, 4, 6, 5] 0
194 [2, 4, 6, 3, 5, 4, 6] 0
195 [2, 4, 6, 3, 5, 4, 3, 5] 0
196 [2, 4, 6, 3, 5, 4, 3] 0
197 [2, 4, 6, 3, 5, 4, 5] 0
198 [2, 4, 6, 3, 5, 4] 0
199 [2, 4, 6, 3, 5, 6] 0
200 [2, 4, 6, 3, 5] 0
201 [2, 4, 6, 3, 2, 4, 3] 0
202 [2, 4, 6, 3, 2, 4] 0
203 [2, 4, 6, 3, 2] 0
204 [2, 4, 6, 3, 4] 0
205 [2, 4, 6, 3] 0
206 [2, 4, 6, 5, 4, 6, 5] 0
207 [2, 4, 6, 5, 4, 6] 0
208 [2, 4, 6, 5, 4] 0
209 [2, 4, 6, 5, 6] 0
210 [2, 4, 6, 5] 0
211 [2, 4, 6] 0
212 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3, 5] 0
213 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3] 0
214 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 5] 0
215 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1] 0
216 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 3, 5] 0
217 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 3] 0
218 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 5] 0
219 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4] 0
220 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 1] 0
221 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2] 0
222 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 4, 5] 0
223 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 4] 0
224 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5] 0
225 [2, 4, 1, 3, 5, 2, 4, 1, 3, 2, 4, 1] 0
226 [2, 4, 1, 3, 5, 2, 4, 1, 3, 2, 4] 0
227 [2, 4, 1, 3, 5, 2, 4, 1, 3, 2, 1] 0
228 [2, 4, 1, 3, 5, 2, 4, 1, 3, 2] 0
229 [2, 4, 1, 3, 5, 2, 4, 1, 3, 4] 0
230 [2, 4, 1, 3, 5, 2, 4, 1, 3] 0
231 [2, 4, 1, 3, 5, 2, 4, 1, 5] 0
232 [2, 4, 1, 3, 5, 2, 4, 1] 0
233 [2, 4, 1, 3, 5, 2, 4, 3, 5, 2, 4, 5] 0
234 [2, 4, 1, 3, 5, 2, 4, 3, 5, 2, 4] 0
235 [2, 4, 1, 3, 5, 2, 4, 3, 5, 2] 0
236 [2, 4, 1, 3, 5, 2, 4, 3, 5, 4, 5] 0
237 [2, 4, 1, 3, 5, 2, 4, 3, 5, 4] 0
238 [2, 4, 1, 3, 5, 2, 4, 3, 5] 0
239 [2, 4, 1, 3, 5, 2, 4, 3, 2, 4] 0
240 [2, 4, 1, 3, 5, 2, 4, 3, 2] 0
241 [2, 4, 1, 3, 5, 2, 4, 3, 4] 0
242 [2, 4, 1, 3, 5, 2, 4, 3] 0
243 [2, 4, 1, 3, 5, 2, 4, 5] 0
244 [2, 4, 1, 3, 5, 2, 4] 0
245 [2, 4, 1, 3, 5, 2, 1, 3] 0
246 [2, 4, 1, 3, 5, 2, 1] 0
247 [2, 4, 1, 3, 5, 2, 3] 0
248 [2, 4, 1, 3, 5, 2] 0
249 [2, 4, 1, 3, 5, 4, 3, 5] 0
250 [2, 4, 1, 3, 5, 4, 3] 0
251 [2, 4, 1, 3, 5, 4, 5] 0
252 [2, 4, 1, 3, 5, 4] 0
253 [2, 4, 1, 3, 5] 0
254 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4] 0
255 [2, 4, 1, 3, 2, 4, 1, 3, 2] 0
256 [2, 4, 1, 3, 2, 4, 1, 3, 4] 0
257 [2, 4, 1, 3, 2, 4, 1, 3] 0
258 [2, 4, 1, 3, 2, 4, 1] 0
259 [2, 4, 1, 3, 2, 4, 3, 4] 0
260 [2, 4, 1, 3, 2, 4, 3] 0
261 [2, 4, 1, 3, 2, 4] 0
262 [2, 4, 1, 3, 2, 1, 3] 0
263 [2, 4, 1, 3, 2, 1] 0
264 [2, 4, 1, 3, 2, 3] 0
265 [2, 4, 1, 3, 2] 0
266 [2, 4, 1, 3, 4] 0
267 [2, 4, 1, 3] 0
268 [2, 4, 1, 5, 2, 4] 0
269 [2, 4, 1, 5, 2] 0
270 [2, 4, 1, 5, 4] 0
271 [2, 4, 1, 5] 0
272 [2, 4, 1, 2] 0
273 [2, 4, 1] 0
274 [2, 4, 3, 5, 2, 4, 3, 5, 2, 4] 0
275 [2, 4, 3, 5, 2, 4, 3, 5, 2] 0
276 [2, 4, 3, 5, 2, 4, 3, 5, 4] 0
277 [2, 4, 3, 5, 2, 4, 3, 5] 0
278 [2, 4, 3, 5, 2, 4, 3, 2] 0
279 [2, 4, 3, 5, 2, 4, 3] 0
280 [2, 4, 3, 5, 2, 4, 5] 0
281 [2, 4, 3, 5, 2, 4] 0
282 [2, 4, 3, 5, 2] 0
283 [2, 4, 3, 5, 4, 3, 5] 0
284 [2, 4, 3, 5, 4, 3] 0
285 [2, 4, 3, 5, 4, 5] 0
286 [2, 4, 3, 5, 4] 0
287 [2, 4, 3, 5] 0
288 [2, 4, 3, 2, 4, 3] 0
289 [2, 4, 3, 2, 4] 0
290 [2, 4, 3, 2] 0
291 [2, 4, 3, 4] 0
292 [2, 4, 3] 0
293 [2, 4, 5, 4] 0
294 [2, 4, 5] 0
295 [2, 4] 0
296 [2, 6, 1, 3, 5, 2, 6, 1, 3] 0
297 [2, 6, 1, 3, 5, 2, 6, 1] 0
298 [2, 6, 1, 3, 5, 2, 6, 3] 0
299 [2, 6, 1, 3, 5, 2, 6] 0
300 [2, 6, 1, 3, 5, 2, 1, 3] 0
301 [2, 6, 1, 3, 5, 2, 1] 0
302 [2, 6, 1, 3, 5, 2, 3] 0
303 [2, 6, 1, 3, 5, 2] 0
304 [2, 6, 1, 3, 5, 6] 0
305 [2, 6, 1, 3, 5] 0
306 [2, 6, 1, 3, 2, 1, 3] 0
307 [2, 6, 1, 3, 2, 1] 0
308 [2, 6, 1, 3, 2, 3] 0
309 [2, 6, 1, 3, 2] 0
310 [2, 6, 1, 3] 0
311 [2, 6, 1, 5, 2, 6] 0
312 [2, 6, 1, 5, 2] 0
313 [2, 6, 1, 5, 6] 0
314 [2, 6, 1, 5] 0
315 [2, 6, 1, 2] 0
316 [2, 6, 1] 0
317 [2, 6, 3, 5, 2, 6] 0
318 [2, 6, 3, 5, 2] 0
319 [2, 6, 3, 5, 6] 0
320 [2, 6, 3, 5] 0
321 [2, 6, 3, 2] 0
322 [2, 6, 3] 0
323 [2, 6, 5, 6] 0
324 [2, 6, 5] 0
325 [2, 6] 0
326 [2, 1, 3, 5, 2, 1, 3] 0
327 [2, 1, 3, 5, 2, 1] 0
328 [2, 1, 3, 5, 2, 3] 0
329 [2, 1, 3, 5, 2] 0
330 [2, 1, 3, 5] 0
331 [2, 1, 3, 2, 1, 3] 0
332 [2, 1, 3, 2, 1] 0
333 [2, 1, 3, 2, 3] 0
334 [2, 1, 3, 2] 0
335 [2, 1, 3] 0
336 [2, 1, 5, 2] 0
337 [2, 1, 5] 0
338 [2, 1, 2] 0
339 [2, 1] 0
340 [2, 3, 5, 2] 0
341 [2, 3, 5] 0
342 [2, 3, 2] 0
343 [2, 3] 0
344 [2, 5] 0
345 [2] 0
346 [4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6] 0
347 [4, 6, 1, 3, 5, 4, 6, 3, 5, 4] 0
348 [4, 6, 1, 3, 5, 4, 6, 3, 5, 6] 0
349 [4, 6, 1, 3, 5, 4, 6, 3, 5] 0
350 [4, 6, 1, 3, 5, 4, 6, 3] 0
351 [4, 6, 1, 3, 5, 4, 6, 5, 6] 0
352 [4, 6, 1, 3, 5, 4, 6, 5] 0
353 [4, 6, 1, 3, 5, 4, 6] 0
354 [4, 6, 1, 3, 5, 4, 3, 5] 0
355 [4, 6, 1, 3, 5, 4, 3] 0
356 [4, 6, 1, 3, 5, 4, 5] 0
357 [4, 6, 1, 3, 5, 4] 0
358 [4, 6, 1, 3, 5, 6] 0
359 [4, 6, 1, 3, 5] 0
360 [4, 6, 1, 3, 4] 0
361 [4, 6, 1, 3] 0
362 [4, 6, 1, 5, 4, 6, 5] 0
363 [4, 6, 1, 5, 4, 6] 0
364 [4, 6, 1, 5, 4] 0
365 [4, 6, 1, 5, 6] 0
366 [4, 6, 1, 5] 0
367 [4, 6, 1] 0
368 [4, 6, 3, 5, 4, 6, 3, 5, 4, 6] 0
369 [4, 6, 3, 5, 4, 6, 3, 5, 4] 0
370 [4, 6, 3, 5, 4, 6, 3, 5, 6] 0
371 [4, 6, 3, 5, 4, 6, 3, 5] 0
372 [4, 6, 3, 5, 4, 6, 3] 0
373 [4, 6, 3, 5, 4, 6, 5, 6] 0
374 [4, 6, 3, 5, 4, 6, 5] 0
375 [4, 6, 3, 5, 4, 6] 0
376 [4, 6, 3, 5, 4, 3, 5] 0
377 [4, 6, 3, 5, 4, 3] 0
378 [4, 6, 3, 5, 4, 5] 0
379 [4, 6, 3, 5, 4] 0
380 [4, 6, 3, 5, 6] 0
381 [4, 6, 3, 5] 0
382 [4, 6, 3, 4] 0
383 [4, 6, 3] 0
384 [4, 6, 5, 4, 6, 5] 0
385 [4, 6, 5, 4, 6] 0
386 [4, 6, 5, 4] 0
387 [4, 6, 5, 6] 0
388 [4, 6, 5] 0
389 [4, 6] 0
390 [4, 1, 3, 5, 4, 3, 5] 0
391 [4, 1, 3, 5, 4, 3] 0
392 [4, 1, 3, 5, 4, 5] 0
393 [4, 1, 3, 5, 4] 0
394 [4, 1, 3, 5] 0
395 [4, 1, 3, 4] 0
396 [4, 1, 3] 0
397 [4, 1, 5, 4] 0
398 [4, 1, 5] 0
399 [4, 1] 0
400 [4, 3, 5, 4, 3, 5] 0
401 [4, 3, 5, 4, 3] 0
402 [4, 3, 5, 4, 5] 0
403 [4, 3, 5, 4] 0
404 [4, 3, 5] 0
405 [4, 3, 4] 0
406 [4, 3] 0
407 [4, 5, 4] 0
408 [4, 5] 0
409 [4] 0
410 [6, 1, 3, 5, 6] 0
411 [6, 1, 3, 5] 0
412 [6, 1, 3] 0
413 [6, 1, 5, 6] 0
414 [6, 1, 5] 0
415 [6, 1] 0
416 [6, 3, 5, 6] 0
417 [6, 3, 5] 0
418 [6, 3] 0
419 [6, 5, 6] 0
420 [6, 5] 0
421 [6] 0
422 [1, 3, 5] 0
423 [1, 3] 0
424 [1, 5] 0
425 [1] 0
426 [3, 5] 0
427 [3] 0
428 [5] 0
429 [] 0
sage: A=CartanMatrix(['C',8])
....: c=[0,2,4,6,1,3,5,7]
....: cinv=list(reversed(c))
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: for i in range(coxeter_number(A)//2):
....:     P=P.intersection(Polyhedron(vertices=[vector([0]*A.nrows())],rays=refl
....: ect_matrix(A,B(A,c),cinv*i).columns()))
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     Bplus=block_matrix([[B(A,c),matrix(lam(A,v)).transpose()]])
....:     for k in c:
....:         Bplus.mutate(k)
....:     la=vector(Bplus[:,-1])
....:     d=P.intersection(p_lambda(B(A,c),la,cinv).translation(-la)).dimension(
....: )
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
1 [2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7] 0
2 [2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5] 0
3 [2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 7] 0
4 [2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3] 0
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [1325], line 14
     12     Bplus.mutate(k)
     13 la=vector(Bplus[:,-Integer(1)])
---> 14 d=P.intersection(p_lambda(B(A,c),la,cinv).translation(-la)).dimension()
     15 print(num,v,d)
     16 if d!=Integer(0):

File ~/git/affine_dominance/software/domination5.py:49, in p_lambda(B, la, seq)
     45         P=Ep*Pp
     46     else:
     47         #print("Pp:   ",Pp,Pp.vertices(),Pp.rays(),Pp.lines(),"\n")
     48         #print("Pm:   ",Pm,Pm.vertices(),Pm.rays(),Pm.lines(),"\n\n")
---> 49         P=(Ep*Pp).convex_hull(Em*Pm)
     50     B.mutate(k)
     51 return P

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1312, in Polyhedron_base5.convex_hull(self, other)
   1310 hull_rays = self.rays() + other.rays()
   1311 hull_lines = self.lines() + other.lines()
-> 1312 return self.parent().element_class(self.parent(), [hull_vertices, hull_rays, hull_lines], None)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:174, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    171     lines = tuple(lines)
    173 if vertices or rays or lines:
--> 174     self._init_from_Vrepresentation(vertices, rays, lines, **kwds)
    175 else:
    176     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:99, in Polyhedron_ppl._init_from_Vrepresentation(self, vertices, rays, lines, minimize, verbose)
     72 def _init_from_Vrepresentation(self, vertices, rays, lines, minimize=True, verbose=False):
     73     """
     74     Construct polyhedron from V-representation data.
     75 
   (...)
     97         sage: Polyhedron_ppl._init_from_Vrepresentation(p, [], [], [])
     98     """
---> 99     gs = self._convert_generators_to_ppl(vertices, rays, lines)
    100     if gs.empty():
    101         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'empty')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:473, in Polyhedron_ppl._convert_generators_to_ppl(vertices, rays, lines)
    471     vertices = []
    472 for v in vertices:
--> 473     gs.insert(Polyhedron_ppl._convert_generator_to_ppl(v, VERTEX))
    474 if rays is None:
    475     rays = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:442, in Polyhedron_ppl._convert_generator_to_ppl(v, typ)
    440 d = LCM_list([denominator(v_i) for v_i in v])
    441 if d.is_one():
--> 442     return ob(Linear_Expression(v, 0))
    443 else:
    444     dv = [ d*v_i for v_i in v ]

File ppl/linear_algebra.pyx:653, in ppl.linear_algebra.Linear_Expression.__init__()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/representation.py:81, in PolyhedronRepresentation.__getitem__(self, i)
     69     """
     70     Return the length of the representation data.
     71 
   (...)
     77         3
     78     """
     79     return self._vector.degree()
---> 81 def __getitem__(self, i):
     82     """
     83     Supports indexing.
     84 
   (...)
     90         2
     91     """
     92     return self._vector[i]

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['C',7])
....: c=[0,2,4,6,1,3,5]
....: cinv=list(reversed(c))
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: for i in range(coxeter_number(A)//2):
....:     P=P.intersection(Polyhedron(vertices=[vector([0]*A.nrows())],rays=refl
....: ect_matrix(A,B(A,c),cinv*i).columns()))
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     Bplus=block_matrix([[B(A,c),matrix(lam(A,v)).transpose()]])
....:     for k in c:
....:         Bplus.mutate(k)
....:     la=vector(Bplus[:,-1])
....:     d=P.intersection(p_lambda(B(A,c),la,cinv).translation(-la)).dimension(
....: )
....:     print(num,v,d)
....:     if d!=0:
....:         print("Failure!")
....:         break
....: 
1 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5] 0
2 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3] 0
3 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 5] 0
4 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1] 0
5 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5] 0
6 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3] 0
7 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 5] 0
8 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6] 0
9 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 1, 3] 0
10 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 1] 0
11 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 3] 0
12 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4] 0
13 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 6, 1] 0
14 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 6] 0
15 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 1] 0
16 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2] 0
17 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 5] 0
18 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6] 0
19 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4] 0
20 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 6] 0
21 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5] 0
22 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 2, 1] 0
23 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 2] 0
24 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3] 0
25 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 5, 6] 0
26 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 5] 0
27 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1] 0
28 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 5] 0
29 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6] 0
30 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4] 0
31 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 6] 0
32 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2] 0
33 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 5] 0
34 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6] 0
35 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4] 0
36 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 6] 0
37 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5] 0
38 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 2] 0
39 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3] 0
40 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 5, 6] 0
41 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 5] 0
42 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6] 0
43 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 2, 1] 0
44 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 2] 0
45 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 1, 3] 0
46 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 1] 0
47 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 3, 2] 0
48 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 3] 0
49 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4] 0
50 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 6, 1] 0
51 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 6] 0
52 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 1] 0
53 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2] 0
54 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 6] 0
55 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 3, 5] 0
56 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 3] 0
57 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 5, 6] 0
58 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 5] 0
59 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6] 0
60 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 3] 0
61 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4] 0
62 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 6] 0
63 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5] 0
64 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 2, 1] 0
65 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 2] 0
66 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3] 0
67 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 5, 4, 6] 0
68 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 5, 4] 0
69 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 5, 6] 0
70 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 5] 0
71 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1] 0
72 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6] 0
73 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4] 0
74 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 6] 0
75 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2] 0
76 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6] 0
77 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4] 0
78 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 6] 0
79 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5] 0
80 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 2] 0
81 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3] 0
82 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 5, 6] 0
83 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 5] 0
84 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6] 0
85 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 3, 2] 0
86 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 3] 0
87 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4] 0
88 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 6] 0
89 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2] 0
90 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 6] 0
91 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5] 0
92 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3] 0
93 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 5, 6] 0
94 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 5] 0
95 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6] 0
96 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 3] 0
97 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4] 0
98 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 6] 0
99 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5] 0
100 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 2] 0
101 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3] 0
102 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 5, 4, 6] 0
103 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 5, 4] 0
104 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 5, 6] 0
105 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 5] 0
106 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6] 0
107 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 2, 1] 0
108 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 2] 0
109 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 1, 3] 0
110 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 1] 0
111 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 3, 2] 0
112 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 3] 0
113 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4] 0
114 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 6, 1, 5] 0
115 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 6, 1] 0
116 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 6, 5] 0
117 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 6] 0
118 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 1] 0
119 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2] 0
120 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5] 0
121 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 3] 0
122 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 5] 0
123 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6] 0
124 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 3] 0
125 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 4] 0
126 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 6] 0
127 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 3, 5] 0
128 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 3] 0
129 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 5, 4, 6] 0
130 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 5, 4] 0
131 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 5, 6] 0
132 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 5] 0
133 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6] 0
134 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 3] 0
135 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4] 0
136 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 6, 5] 0
137 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 6] 0
138 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5] 0
139 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 2, 1] 0
140 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 2] 0
141 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3] 0
142 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 5, 4, 6, 5, 4] 0
143 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 5, 4, 6, 5] 0
144 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 5, 4, 6] 0
145 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 5, 4] 0
146 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 5, 6, 5] 0
147 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 5, 6] 0
148 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 5] 0
149 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 1] 0
150 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4] 0
151 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2] 0
152 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4] 0
153 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5] 0
154 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 2] 0
155 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3] 0
156 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 5] 0
157 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6] 0
158 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 3, 2] 0
159 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 3] 0
160 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4] 0
161 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 6] 0
162 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2] 0
163 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5] 0
164 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3] 0
165 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 5] 0
166 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6] 0
167 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 3] 0
168 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4] 0
169 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 6] 0
170 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5] 0
171 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 2] 0
172 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3] 0
173 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 5, 4, 6] 0
174 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 5, 4] 0
175 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 5, 6] 0
176 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 5] 0
177 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6] 0
178 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 3, 2] 0
179 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 3] 0
180 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4] 0
181 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 6, 5] 0
182 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 6] 0
183 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2] 0
184 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5] 0
185 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3] 0
186 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 5] 0
187 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6] 0
188 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 3] 0
189 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 4] 0
190 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 6] 0
191 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5] 0
192 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3] 0
193 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 5, 4, 6] 0
194 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 5, 4] 0
195 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 5, 6] 0
196 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 5] 0
197 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6] 0
198 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 3] 0
199 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4] 0
200 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 6, 5] 0
201 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 6] 0
202 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5] 0
203 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 2] 0
204 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 3] 0
205 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 5, 4, 6, 5, 4] 0
206 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 5, 4, 6, 5] 0
207 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 5, 4, 6] 0
208 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 5, 4] 0
209 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 5, 6, 5] 0
210 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 5, 6] 0
211 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6, 5] 0
212 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6] 0
213 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 5, 2, 1] 0
214 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 5, 2] 0
215 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 5] 0
216 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 2, 1] 0
217 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 2] 0
218 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 1, 3] 0
219 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 1, 5] 0
220 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 1] 0
221 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 3, 5, 2] 0
222 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 3, 5] 0
223 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 3, 2] 0
224 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 3] 0
225 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 5] 0
226 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4] 0
227 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 6, 1, 5] 0
228 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 6, 1] 0
229 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 6, 5] 0
230 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 6] 0
231 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 1] 0
232 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 2] 0
233 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5, 4, 3] 0
234 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5, 4] 0
235 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5] 0
236 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 3] 0
237 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 5, 4] 0
238 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 5] 0
239 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6] 0
240 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 3] 0
241 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 4] 0
242 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 6, 5] 0
243 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 6] 0
244 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 3, 5] 0
245 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 3] 0
246 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 5, 4, 6, 5, 4] 0
247 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 5, 4, 6, 5] 0
248 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 5, 4, 6] 0
249 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 5, 4] 0
250 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 5, 6, 5] 0
251 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 5, 6] 0
252 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6, 5] 0
253 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 6] 0
254 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 3, 5] 0
255 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 3] 0
256 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4, 5] 0
257 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 4] 0
258 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 6, 5] 0
259 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5, 6] 0
260 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 5] 0
261 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 2, 4, 1] 0
262 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 2, 4] 0
263 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 2, 1] 0
264 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 2] 0
265 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3, 4] 0
266 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 3] 0
267 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 5, 4, 6, 5, 4] 0
268 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 5, 4, 6, 5] 0
269 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 5, 4, 6] 0
270 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 5, 4] 0
271 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 5, 6, 5] 0
272 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 5, 6] 0
273 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1, 5] 0
274 [2, 4, 6, 1, 3, 5, 2, 4, 6, 1] 0
275 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2] 0
276 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5] 0
277 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 2] 0
278 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3] 0
279 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 5] 0
280 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6] 0
281 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 3, 2] 0
282 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 3] 0
283 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4] 0
284 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 6] 0
285 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2] 0
286 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5] 0
287 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3] 0
288 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 5] 0
289 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6] 0
290 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 3] 0
291 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4] 0
292 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 6] 0
293 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5] 0
294 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 2] 0
295 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3] 0
296 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 5, 4, 6] 0
297 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 5, 4] 0
298 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 5, 6] 0
299 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 5] 0
300 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6] 0
301 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 3, 2] 0
302 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 3] 0
303 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4] 0
304 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 6, 5] 0
305 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 6] 0
306 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2] 0
307 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3] 0
308 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6] 0
309 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 3] 0
310 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 4] 0
311 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 6] 0
312 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5] 0
313 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3] 0
314 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 5, 4, 6] 0
315 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 5, 4] 0
316 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 5, 6] 0
317 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 5] 0
318 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6] 0
319 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 3] 0
320 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4] 0
321 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 6, 5] 0
322 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 6] 0
323 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5] 0
324 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 2] 0
325 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3] 0
326 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 5, 4, 6, 5, 4] 0
327 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 5, 4, 6, 5] 0
328 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 5, 4, 6] 0
329 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 5, 4] 0
330 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 5, 6, 5] 0
331 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 5, 6] 0
332 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 5] 0
333 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6] 0
334 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 3, 5, 2] 0
335 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 3, 5] 0
336 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 3, 2] 0
337 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 3] 0
338 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4, 5] 0
339 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 4] 0
340 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 6, 5] 0
341 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2, 6] 0
342 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 2] 0
343 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5, 4, 3] 0
344 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5, 4] 0
345 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5] 0
346 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3] 0
347 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 5, 4] 0
348 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 5] 0
349 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6] 0
350 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 3] 0
351 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 4] 0
352 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 6, 5] 0
353 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 6] 0
354 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5] 0
355 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3] 0
356 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 5, 4, 6, 5, 4] 0
357 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 5, 4, 6, 5] 0
358 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 5, 4, 6] 0
359 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 5, 4] 0
360 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 5, 6, 5] 0
361 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 5, 6] 0
362 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6, 5] 0
363 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 6] 0
364 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 3, 5] 0
365 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 3] 0
366 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4, 5] 0
367 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 4] 0
368 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 6, 5] 0
369 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5, 6] 0
370 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 5] 0
371 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 2, 4] 0
372 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 2] 0
373 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3, 4] 0
374 [2, 4, 6, 1, 3, 5, 2, 4, 6, 3] 0
375 [2, 4, 6, 1, 3, 5, 2, 4, 6, 5, 4, 6, 5, 4] 0
376 [2, 4, 6, 1, 3, 5, 2, 4, 6, 5, 4, 6, 5] 0
377 [2, 4, 6, 1, 3, 5, 2, 4, 6, 5, 4, 6] 0
378 [2, 4, 6, 1, 3, 5, 2, 4, 6, 5, 4] 0
379 [2, 4, 6, 1, 3, 5, 2, 4, 6, 5, 6, 5] 0
380 [2, 4, 6, 1, 3, 5, 2, 4, 6, 5, 6] 0
381 [2, 4, 6, 1, 3, 5, 2, 4, 6, 5] 0
382 [2, 4, 6, 1, 3, 5, 2, 4, 6] 0
383 [2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3, 5] 0
384 [2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3] 0
385 [2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 5] 0
386 [2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1] 0
387 [2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 3, 5] 0
388 [2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 3] 0
389 [2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 5] 0
390 [2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4] 0
391 [2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 5, 2, 1] 0
392 [2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 5, 2] 0
393 [2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 5, 4, 5] 0
394 [2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 5, 4] 0
395 [2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 5] 0
396 [2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 2, 4, 1] 0
397 [2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 2, 4] 0
398 [2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 2, 1] 0
399 [2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 2] 0
400 [2, 4, 6, 1, 3, 5, 2, 4, 1, 3, 4] 0
401 [2, 4, 6, 1, 3, 5, 2, 4, 1, 3] 0
402 [2, 4, 6, 1, 3, 5, 2, 4, 1, 5] 0
403 [2, 4, 6, 1, 3, 5, 2, 4, 1] 0
404 [2, 4, 6, 1, 3, 5, 2, 4, 3, 5, 2, 4, 5] 0
405 [2, 4, 6, 1, 3, 5, 2, 4, 3, 5, 2, 4] 0
406 [2, 4, 6, 1, 3, 5, 2, 4, 3, 5, 2] 0
407 [2, 4, 6, 1, 3, 5, 2, 4, 3, 5, 4, 5] 0
408 [2, 4, 6, 1, 3, 5, 2, 4, 3, 5, 4] 0
409 [2, 4, 6, 1, 3, 5, 2, 4, 3, 5] 0
410 [2, 4, 6, 1, 3, 5, 2, 4, 3, 2, 4] 0
411 [2, 4, 6, 1, 3, 5, 2, 4, 3, 2] 0
412 [2, 4, 6, 1, 3, 5, 2, 4, 3, 4] 0
413 [2, 4, 6, 1, 3, 5, 2, 4, 3] 0
414 [2, 4, 6, 1, 3, 5, 2, 4, 5] 0
415 [2, 4, 6, 1, 3, 5, 2, 4] 0
416 [2, 4, 6, 1, 3, 5, 2, 6, 1, 3, 5] 0
417 [2, 4, 6, 1, 3, 5, 2, 6, 1, 3] 0
418 [2, 4, 6, 1, 3, 5, 2, 6, 1, 5] 0
419 [2, 4, 6, 1, 3, 5, 2, 6, 1] 0
420 [2, 4, 6, 1, 3, 5, 2, 6, 3, 5] 0
421 [2, 4, 6, 1, 3, 5, 2, 6, 3] 0
422 [2, 4, 6, 1, 3, 5, 2, 6, 5] 0
423 [2, 4, 6, 1, 3, 5, 2, 6] 0
424 [2, 4, 6, 1, 3, 5, 2, 1, 3] 0
425 [2, 4, 6, 1, 3, 5, 2, 1] 0
426 [2, 4, 6, 1, 3, 5, 2, 3] 0
427 [2, 4, 6, 1, 3, 5, 2] 0
428 [2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5] 0
429 [2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3] 0
430 [2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 5] 0
431 [2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6] 0
432 [2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5, 4, 3] 0
433 [2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5, 4] 0
434 [2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5, 6] 0
435 [2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5] 0
436 [2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 3] 0
437 [2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 5, 4, 6] 0
438 [2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 5, 4] 0
439 [2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 5, 6] 0
440 [2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 5] 0
441 [2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6] 0
442 [2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 3] 0
443 [2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 4] 0
444 [2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 6, 5] 0
445 [2, 4, 6, 1, 3, 5, 4, 6, 3, 5, 6] 0
446 [2, 4, 6, 1, 3, 5, 4, 6, 3, 5] 0
447 [2, 4, 6, 1, 3, 5, 4, 6, 3] 0
448 [2, 4, 6, 1, 3, 5, 4, 6, 5, 4, 6, 5, 4] 0
449 [2, 4, 6, 1, 3, 5, 4, 6, 5, 4, 6, 5] 0
450 [2, 4, 6, 1, 3, 5, 4, 6, 5, 4, 6] 0
451 [2, 4, 6, 1, 3, 5, 4, 6, 5, 4] 0
452 [2, 4, 6, 1, 3, 5, 4, 6, 5, 6, 5] 0
453 [2, 4, 6, 1, 3, 5, 4, 6, 5, 6] 0
454 [2, 4, 6, 1, 3, 5, 4, 6, 5] 0
455 [2, 4, 6, 1, 3, 5, 4, 6] 0
456 [2, 4, 6, 1, 3, 5, 4, 3, 5] 0
457 [2, 4, 6, 1, 3, 5, 4, 3] 0
458 [2, 4, 6, 1, 3, 5, 4, 5] 0
459 [2, 4, 6, 1, 3, 5, 4] 0
460 [2, 4, 6, 1, 3, 5, 6, 5] 0
461 [2, 4, 6, 1, 3, 5, 6] 0
462 [2, 4, 6, 1, 3, 5] 0
463 [2, 4, 6, 1, 3, 2, 4, 1, 3, 2, 4] 0
464 [2, 4, 6, 1, 3, 2, 4, 1, 3, 2] 0
465 [2, 4, 6, 1, 3, 2, 4, 1, 3, 4] 0
466 [2, 4, 6, 1, 3, 2, 4, 1, 3] 0
467 [2, 4, 6, 1, 3, 2, 4, 1] 0
468 [2, 4, 6, 1, 3, 2, 4, 3, 4] 0
469 [2, 4, 6, 1, 3, 2, 4, 3] 0
470 [2, 4, 6, 1, 3, 2, 4] 0
471 [2, 4, 6, 1, 3, 2, 1, 3] 0
472 [2, 4, 6, 1, 3, 2, 1] 0
473 [2, 4, 6, 1, 3, 2, 3] 0
474 [2, 4, 6, 1, 3, 2] 0
475 [2, 4, 6, 1, 3, 4] 0
476 [2, 4, 6, 1, 3] 0
477 [2, 4, 6, 1, 5, 2, 4, 6, 5, 4, 6, 5] 0
478 [2, 4, 6, 1, 5, 2, 4, 6, 5, 4, 6] 0
479 [2, 4, 6, 1, 5, 2, 4, 6, 5, 4] 0
480 [2, 4, 6, 1, 5, 2, 4, 6, 5, 6] 0
481 [2, 4, 6, 1, 5, 2, 4, 6, 5] 0
482 [2, 4, 6, 1, 5, 2, 4, 6] 0
483 [2, 4, 6, 1, 5, 2, 4] 0
484 [2, 4, 6, 1, 5, 2, 6, 5] 0
485 [2, 4, 6, 1, 5, 2, 6] 0
486 [2, 4, 6, 1, 5, 2] 0
487 [2, 4, 6, 1, 5, 4, 6, 5, 4, 6, 5] 0
488 [2, 4, 6, 1, 5, 4, 6, 5, 4, 6] 0
489 [2, 4, 6, 1, 5, 4, 6, 5, 4] 0
490 [2, 4, 6, 1, 5, 4, 6, 5, 6] 0
491 [2, 4, 6, 1, 5, 4, 6, 5] 0
492 [2, 4, 6, 1, 5, 4, 6] 0
493 [2, 4, 6, 1, 5, 4] 0
494 [2, 4, 6, 1, 5, 6, 5] 0
495 [2, 4, 6, 1, 5, 6] 0
496 [2, 4, 6, 1, 5] 0
497 [2, 4, 6, 1, 2] 0
498 [2, 4, 6, 1] 0
499 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5] 0
500 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3] 0
501 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 5] 0
502 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6] 0
503 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 3] 0
504 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4] 0
505 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 6] 0
506 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2] 0
507 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 5] 0
508 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6] 0
509 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4] 0
510 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 6] 0
511 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5] 0
512 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 2] 0
513 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3] 0
514 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 5, 6] 0
515 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 5] 0
516 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6] 0
517 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 3, 2] 0
518 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 3] 0
519 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4] 0
520 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 6] 0
521 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2] 0
522 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6] 0
523 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 4] 0
524 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 6] 0
525 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5] 0
526 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3] 0
527 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 5, 6] 0
528 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 5] 0
529 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6] 0
530 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 3] 0
531 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4] 0
532 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 6] 0
533 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 5] 0
534 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3, 2] 0
535 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 3] 0
536 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 5, 4, 6, 5] 0
537 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 5, 4, 6] 0
538 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 5, 4] 0
539 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 5, 6] 0
540 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6, 5] 0
541 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 6] 0
542 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 3, 2] 0
543 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4, 3] 0
544 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 4] 0
545 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 6, 5] 0
546 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2, 6] 0
547 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 2] 0
548 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5, 4] 0
549 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5] 0
550 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3] 0
551 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 5] 0
552 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6] 0
553 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 3] 0
554 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 4] 0
555 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5, 6] 0
556 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3, 5] 0
557 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 3] 0
558 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 5, 4, 6, 5] 0
559 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 5, 4, 6] 0
560 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 5, 4] 0
561 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 5, 6] 0
562 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6, 5] 0
563 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 6] 0
564 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4, 3] 0
565 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 4] 0
566 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 6, 5] 0
567 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5, 6] 0
568 [2, 4, 6, 3, 5, 2, 4, 6, 3, 5] 0
569 [2, 4, 6, 3, 5, 2, 4, 6, 3, 2] 0
570 [2, 4, 6, 3, 5, 2, 4, 6, 3] 0
571 [2, 4, 6, 3, 5, 2, 4, 6, 5, 4, 6, 5, 4] 0
572 [2, 4, 6, 3, 5, 2, 4, 6, 5, 4, 6, 5] 0
573 [2, 4, 6, 3, 5, 2, 4, 6, 5, 4, 6] 0
574 [2, 4, 6, 3, 5, 2, 4, 6, 5, 4] 0
575 [2, 4, 6, 3, 5, 2, 4, 6, 5, 6, 5] 0
576 [2, 4, 6, 3, 5, 2, 4, 6, 5, 6] 0
577 [2, 4, 6, 3, 5, 2, 4, 6, 5] 0
578 [2, 4, 6, 3, 5, 2, 4, 6] 0
579 [2, 4, 6, 3, 5, 2, 4, 3, 5, 2, 4] 0
580 [2, 4, 6, 3, 5, 2, 4, 3, 5, 2] 0
581 [2, 4, 6, 3, 5, 2, 4, 3, 5, 4] 0
582 [2, 4, 6, 3, 5, 2, 4, 3, 5] 0
583 [2, 4, 6, 3, 5, 2, 4, 3, 2] 0
584 [2, 4, 6, 3, 5, 2, 4, 3] 0
585 [2, 4, 6, 3, 5, 2, 4, 5] 0
586 [2, 4, 6, 3, 5, 2, 4] 0
587 [2, 4, 6, 3, 5, 2, 6, 5] 0
588 [2, 4, 6, 3, 5, 2, 6] 0
589 [2, 4, 6, 3, 5, 2] 0
590 [2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5] 0
591 [2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3] 0
592 [2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 5] 0
593 [2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6] 0
594 [2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5, 4, 3] 0
595 [2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5, 4] 0
596 [2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5, 6] 0
597 [2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5] 0
598 [2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3] 0
599 [2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 5, 4, 6] 0
600 [2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 5, 4] 0
601 [2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 5, 6] 0
602 [2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 5] 0
603 [2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6] 0
604 [2, 4, 6, 3, 5, 4, 6, 3, 5, 4, 3] 0
605 [2, 4, 6, 3, 5, 4, 6, 3, 5, 4] 0
606 [2, 4, 6, 3, 5, 4, 6, 3, 5, 6, 5] 0
607 [2, 4, 6, 3, 5, 4, 6, 3, 5, 6] 0
608 [2, 4, 6, 3, 5, 4, 6, 3, 5] 0
609 [2, 4, 6, 3, 5, 4, 6, 3] 0
610 [2, 4, 6, 3, 5, 4, 6, 5, 4, 6, 5, 4] 0
611 [2, 4, 6, 3, 5, 4, 6, 5, 4, 6, 5] 0
612 [2, 4, 6, 3, 5, 4, 6, 5, 4, 6] 0
613 [2, 4, 6, 3, 5, 4, 6, 5, 4] 0
614 [2, 4, 6, 3, 5, 4, 6, 5, 6, 5] 0
615 [2, 4, 6, 3, 5, 4, 6, 5, 6] 0
616 [2, 4, 6, 3, 5, 4, 6, 5] 0
617 [2, 4, 6, 3, 5, 4, 6] 0
618 [2, 4, 6, 3, 5, 4, 3, 5] 0
619 [2, 4, 6, 3, 5, 4, 3] 0
620 [2, 4, 6, 3, 5, 4, 5] 0
621 [2, 4, 6, 3, 5, 4] 0
622 [2, 4, 6, 3, 5, 6, 5] 0
623 [2, 4, 6, 3, 5, 6] 0
624 [2, 4, 6, 3, 5] 0
625 [2, 4, 6, 3, 2, 4, 3] 0
626 [2, 4, 6, 3, 2, 4] 0
627 [2, 4, 6, 3, 2] 0
628 [2, 4, 6, 3, 4] 0
629 [2, 4, 6, 3] 0
630 [2, 4, 6, 5, 4, 6, 5, 4, 6, 5] 0
631 [2, 4, 6, 5, 4, 6, 5, 4, 6] 0
632 [2, 4, 6, 5, 4, 6, 5, 4] 0
633 [2, 4, 6, 5, 4, 6, 5, 6] 0
634 [2, 4, 6, 5, 4, 6, 5] 0
635 [2, 4, 6, 5, 4, 6] 0
636 [2, 4, 6, 5, 4] 0
637 [2, 4, 6, 5, 6, 5] 0
638 [2, 4, 6, 5, 6] 0
639 [2, 4, 6, 5] 0
640 [2, 4, 6] 0
641 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3, 5] 0
642 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 3] 0
643 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1, 5] 0
644 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 1] 0
645 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 3, 5] 0
646 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 3] 0
647 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4, 5] 0
648 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4] 0
649 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 1] 0
650 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2] 0
651 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 4, 5] 0
652 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 4] 0
653 [2, 4, 1, 3, 5, 2, 4, 1, 3, 5] 0
654 [2, 4, 1, 3, 5, 2, 4, 1, 3, 2, 4, 1] 0
655 [2, 4, 1, 3, 5, 2, 4, 1, 3, 2, 4] 0
656 [2, 4, 1, 3, 5, 2, 4, 1, 3, 2, 1] 0
657 [2, 4, 1, 3, 5, 2, 4, 1, 3, 2] 0
658 [2, 4, 1, 3, 5, 2, 4, 1, 3, 4] 0
659 [2, 4, 1, 3, 5, 2, 4, 1, 3] 0
660 [2, 4, 1, 3, 5, 2, 4, 1, 5] 0
661 [2, 4, 1, 3, 5, 2, 4, 1] 0
662 [2, 4, 1, 3, 5, 2, 4, 3, 5, 2, 4, 5] 0
663 [2, 4, 1, 3, 5, 2, 4, 3, 5, 2, 4] 0
664 [2, 4, 1, 3, 5, 2, 4, 3, 5, 2] 0
665 [2, 4, 1, 3, 5, 2, 4, 3, 5, 4, 5] 0
666 [2, 4, 1, 3, 5, 2, 4, 3, 5, 4] 0
667 [2, 4, 1, 3, 5, 2, 4, 3, 5] 0
668 [2, 4, 1, 3, 5, 2, 4, 3, 2, 4] 0
669 [2, 4, 1, 3, 5, 2, 4, 3, 2] 0
670 [2, 4, 1, 3, 5, 2, 4, 3, 4] 0
671 [2, 4, 1, 3, 5, 2, 4, 3] 0
672 [2, 4, 1, 3, 5, 2, 4, 5] 0
673 [2, 4, 1, 3, 5, 2, 4] 0
674 [2, 4, 1, 3, 5, 2, 1, 3] 0
675 [2, 4, 1, 3, 5, 2, 1] 0
676 [2, 4, 1, 3, 5, 2, 3] 0
677 [2, 4, 1, 3, 5, 2] 0
678 [2, 4, 1, 3, 5, 4, 3, 5] 0
679 [2, 4, 1, 3, 5, 4, 3] 0
680 [2, 4, 1, 3, 5, 4, 5] 0
681 [2, 4, 1, 3, 5, 4] 0
682 [2, 4, 1, 3, 5] 0
683 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4] 0
684 [2, 4, 1, 3, 2, 4, 1, 3, 2] 0
685 [2, 4, 1, 3, 2, 4, 1, 3, 4] 0
686 [2, 4, 1, 3, 2, 4, 1, 3] 0
687 [2, 4, 1, 3, 2, 4, 1] 0
688 [2, 4, 1, 3, 2, 4, 3, 4] 0
689 [2, 4, 1, 3, 2, 4, 3] 0
690 [2, 4, 1, 3, 2, 4] 0
691 [2, 4, 1, 3, 2, 1, 3] 0
692 [2, 4, 1, 3, 2, 1] 0
693 [2, 4, 1, 3, 2, 3] 0
694 [2, 4, 1, 3, 2] 0
695 [2, 4, 1, 3, 4] 0
696 [2, 4, 1, 3] 0
697 [2, 4, 1, 5, 2, 4] 0
698 [2, 4, 1, 5, 2] 0
699 [2, 4, 1, 5, 4] 0
700 [2, 4, 1, 5] 0
701 [2, 4, 1, 2] 0
702 [2, 4, 1] 0
703 [2, 4, 3, 5, 2, 4, 3, 5, 2, 4] 0
704 [2, 4, 3, 5, 2, 4, 3, 5, 2] 0
705 [2, 4, 3, 5, 2, 4, 3, 5, 4] 0
706 [2, 4, 3, 5, 2, 4, 3, 5] 0
707 [2, 4, 3, 5, 2, 4, 3, 2] 0
708 [2, 4, 3, 5, 2, 4, 3] 0
709 [2, 4, 3, 5, 2, 4, 5] 0
710 [2, 4, 3, 5, 2, 4] 0
711 [2, 4, 3, 5, 2] 0
712 [2, 4, 3, 5, 4, 3, 5] 0
713 [2, 4, 3, 5, 4, 3] 0
714 [2, 4, 3, 5, 4, 5] 0
715 [2, 4, 3, 5, 4] 0
716 [2, 4, 3, 5] 0
717 [2, 4, 3, 2, 4, 3] 0
718 [2, 4, 3, 2, 4] 0
719 [2, 4, 3, 2] 0
720 [2, 4, 3, 4] 0
721 [2, 4, 3] 0
722 [2, 4, 5, 4] 0
723 [2, 4, 5] 0
724 [2, 4] 0
725 [2, 6, 1, 3, 5, 2, 6, 1, 3, 5] 0
726 [2, 6, 1, 3, 5, 2, 6, 1, 3] 0
727 [2, 6, 1, 3, 5, 2, 6, 1, 5] 0
728 [2, 6, 1, 3, 5, 2, 6, 1] 0
729 [2, 6, 1, 3, 5, 2, 6, 3, 5] 0
730 [2, 6, 1, 3, 5, 2, 6, 3] 0
731 [2, 6, 1, 3, 5, 2, 6, 5] 0
732 [2, 6, 1, 3, 5, 2, 6] 0
733 [2, 6, 1, 3, 5, 2, 1, 3] 0
734 [2, 6, 1, 3, 5, 2, 1] 0
735 [2, 6, 1, 3, 5, 2, 3] 0
736 [2, 6, 1, 3, 5, 2] 0
737 [2, 6, 1, 3, 5, 6, 5] 0
738 [2, 6, 1, 3, 5, 6] 0
739 [2, 6, 1, 3, 5] 0
740 [2, 6, 1, 3, 2, 1, 3] 0
741 [2, 6, 1, 3, 2, 1] 0
742 [2, 6, 1, 3, 2, 3] 0
743 [2, 6, 1, 3, 2] 0
744 [2, 6, 1, 3] 0
745 [2, 6, 1, 5, 2, 6, 5] 0
746 [2, 6, 1, 5, 2, 6] 0
747 [2, 6, 1, 5, 2] 0
748 [2, 6, 1, 5, 6, 5] 0
749 [2, 6, 1, 5, 6] 0
750 [2, 6, 1, 5] 0
751 [2, 6, 1, 2] 0
752 [2, 6, 1] 0
753 [2, 6, 3, 5, 2, 6, 5] 0
754 [2, 6, 3, 5, 2, 6] 0
755 [2, 6, 3, 5, 2] 0
756 [2, 6, 3, 5, 6, 5] 0
757 [2, 6, 3, 5, 6] 0
758 [2, 6, 3, 5] 0
759 [2, 6, 3, 2] 0
760 [2, 6, 3] 0
761 [2, 6, 5, 6, 5] 0
762 [2, 6, 5, 6] 0
763 [2, 6, 5] 0
764 [2, 6] 0
765 [2, 1, 3, 5, 2, 1, 3] 0
766 [2, 1, 3, 5, 2, 1] 0
767 [2, 1, 3, 5, 2, 3] 0
768 [2, 1, 3, 5, 2] 0
769 [2, 1, 3, 5] 0
770 [2, 1, 3, 2, 1, 3] 0
771 [2, 1, 3, 2, 1] 0
772 [2, 1, 3, 2, 3] 0
773 [2, 1, 3, 2] 0
774 [2, 1, 3] 0
775 [2, 1, 5, 2] 0
776 [2, 1, 5] 0
777 [2, 1, 2] 0
778 [2, 1] 0
779 [2, 3, 5, 2] 0
780 [2, 3, 5] 0
781 [2, 3, 2] 0
782 [2, 3] 0
783 [2, 5] 0
784 [2] 0
785 [4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5] 0
786 [4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3] 0
787 [4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 5] 0
788 [4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6] 0
789 [4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5, 4, 3] 0
790 [4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5, 4] 0
791 [4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5, 6] 0
792 [4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5] 0
793 [4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 3] 0
794 [4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 5, 4, 6] 0
795 [4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 5, 4] 0
796 [4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 5, 6] 0
797 [4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6, 5] 0
798 [4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 6] 0
799 [4, 6, 1, 3, 5, 4, 6, 3, 5, 4, 3] 0
800 [4, 6, 1, 3, 5, 4, 6, 3, 5, 4] 0
801 [4, 6, 1, 3, 5, 4, 6, 3, 5, 6, 5] 0
802 [4, 6, 1, 3, 5, 4, 6, 3, 5, 6] 0
803 [4, 6, 1, 3, 5, 4, 6, 3, 5] 0
804 [4, 6, 1, 3, 5, 4, 6, 3] 0
805 [4, 6, 1, 3, 5, 4, 6, 5, 4, 6, 5, 4] 0
806 [4, 6, 1, 3, 5, 4, 6, 5, 4, 6, 5] 0
807 [4, 6, 1, 3, 5, 4, 6, 5, 4, 6] 0
808 [4, 6, 1, 3, 5, 4, 6, 5, 4] 0
809 [4, 6, 1, 3, 5, 4, 6, 5, 6, 5] 0
810 [4, 6, 1, 3, 5, 4, 6, 5, 6] 0
811 [4, 6, 1, 3, 5, 4, 6, 5] 0
812 [4, 6, 1, 3, 5, 4, 6] 0
813 [4, 6, 1, 3, 5, 4, 3, 5] 0
814 [4, 6, 1, 3, 5, 4, 3] 0
815 [4, 6, 1, 3, 5, 4, 5] 0
816 [4, 6, 1, 3, 5, 4] 0
817 [4, 6, 1, 3, 5, 6, 5] 0
818 [4, 6, 1, 3, 5, 6] 0
819 [4, 6, 1, 3, 5] 0
820 [4, 6, 1, 3, 4] 0
821 [4, 6, 1, 3] 0
822 [4, 6, 1, 5, 4, 6, 5, 4, 6, 5] 0
823 [4, 6, 1, 5, 4, 6, 5, 4, 6] 0
824 [4, 6, 1, 5, 4, 6, 5, 4] 0
825 [4, 6, 1, 5, 4, 6, 5, 6] 0
826 [4, 6, 1, 5, 4, 6, 5] 0
827 [4, 6, 1, 5, 4, 6] 0
828 [4, 6, 1, 5, 4] 0
829 [4, 6, 1, 5, 6, 5] 0
830 [4, 6, 1, 5, 6] 0
831 [4, 6, 1, 5] 0
832 [4, 6, 1] 0
833 [4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5] 0
834 [4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3] 0
835 [4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 5] 0
836 [4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5, 4, 6] 0
837 [4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5, 4, 3] 0
838 [4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5, 4] 0
839 [4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5, 6] 0
840 [4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3, 5] 0
841 [4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 3] 0
842 [4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 5, 4, 6] 0
843 [4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 5, 4] 0
844 [4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 5, 6] 0
845 [4, 6, 3, 5, 4, 6, 3, 5, 4, 6, 5] 0
846 [4, 6, 3, 5, 4, 6, 3, 5, 4, 6] 0
847 [4, 6, 3, 5, 4, 6, 3, 5, 4, 3] 0
848 [4, 6, 3, 5, 4, 6, 3, 5, 4] 0
849 [4, 6, 3, 5, 4, 6, 3, 5, 6, 5] 0
850 [4, 6, 3, 5, 4, 6, 3, 5, 6] 0
851 [4, 6, 3, 5, 4, 6, 3, 5] 0
852 [4, 6, 3, 5, 4, 6, 3] 0
853 [4, 6, 3, 5, 4, 6, 5, 4, 6, 5, 4] 0
854 [4, 6, 3, 5, 4, 6, 5, 4, 6, 5] 0
855 [4, 6, 3, 5, 4, 6, 5, 4, 6] 0
856 [4, 6, 3, 5, 4, 6, 5, 4] 0
857 [4, 6, 3, 5, 4, 6, 5, 6, 5] 0
858 [4, 6, 3, 5, 4, 6, 5, 6] 0
859 [4, 6, 3, 5, 4, 6, 5] 0
860 [4, 6, 3, 5, 4, 6] 0
861 [4, 6, 3, 5, 4, 3, 5] 0
862 [4, 6, 3, 5, 4, 3] 0
863 [4, 6, 3, 5, 4, 5] 0
864 [4, 6, 3, 5, 4] 0
865 [4, 6, 3, 5, 6, 5] 0
866 [4, 6, 3, 5, 6] 0
867 [4, 6, 3, 5] 0
868 [4, 6, 3, 4] 0
869 [4, 6, 3] 0
870 [4, 6, 5, 4, 6, 5, 4, 6, 5] 0
871 [4, 6, 5, 4, 6, 5, 4, 6] 0
872 [4, 6, 5, 4, 6, 5, 4] 0
873 [4, 6, 5, 4, 6, 5, 6] 0
874 [4, 6, 5, 4, 6, 5] 0
875 [4, 6, 5, 4, 6] 0
876 [4, 6, 5, 4] 0
877 [4, 6, 5, 6, 5] 0
878 [4, 6, 5, 6] 0
879 [4, 6, 5] 0
880 [4, 6] 0
881 [4, 1, 3, 5, 4, 3, 5] 0
882 [4, 1, 3, 5, 4, 3] 0
883 [4, 1, 3, 5, 4, 5] 0
884 [4, 1, 3, 5, 4] 0
885 [4, 1, 3, 5] 0
886 [4, 1, 3, 4] 0
887 [4, 1, 3] 0
888 [4, 1, 5, 4] 0
889 [4, 1, 5] 0
890 [4, 1] 0
891 [4, 3, 5, 4, 3, 5] 0
892 [4, 3, 5, 4, 3] 0
893 [4, 3, 5, 4, 5] 0
894 [4, 3, 5, 4] 0
895 [4, 3, 5] 0
896 [4, 3, 4] 0
897 [4, 3] 0
898 [4, 5, 4] 0
899 [4, 5] 0
900 [4] 0
901 [6, 1, 3, 5, 6, 5] 0
902 [6, 1, 3, 5, 6] 0
903 [6, 1, 3, 5] 0
904 [6, 1, 3] 0
905 [6, 1, 5, 6, 5] 0
906 [6, 1, 5, 6] 0
907 [6, 1, 5] 0
908 [6, 1] 0
909 [6, 3, 5, 6, 5] 0
910 [6, 3, 5, 6] 0
911 [6, 3, 5] 0
912 [6, 3] 0
913 [6, 5, 6, 5] 0
914 [6, 5, 6] 0
915 [6, 5] 0
916 [6] 0
917 [1, 3, 5] 0
918 [1, 3] 0
919 [1, 5] 0
920 [1] 0
921 [3, 5] 0
922 [3] 0
923 [5] 0
924 [] 0
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: cinv=list(reversed(c))
....: plots=[point(vector((0,0,0)),size=50)]
....: num=0
....: sc=1/20
....: colors=rainbow(40)
....: for u in sortables(A,c[1:]):
....:     t=vector((num*sc,0,-num*sc))
....:     Bplus=block_matrix([[B(A,c),matrix(lam(A,u)).transpose()]])
....:     for k in c:
....:         Bplus.mutate(k)
....:     la=vector(Bplus[:,-1])
....:     Q=p_lambda(B(A,c),la,cinv)
....:     plots=plots+[(Q.translation(t-la)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....: num=0
....: for i in range(coxeter_number(A)//2):
....:     t=vector((-num*sc,0,num*sc))
....:     Q=Polyhedron(vertices=[vector([0]*A.nrows())],rays=reflect_matrix(A,B(
....: A,c),cinv*i).columns())
....:     plots=plots+[(Q.translation(t)).plot(fill=colors[num+20],alpha=0.5)]
....:     num+=1
....: sum(plots)
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',7])
....: c=[0,2,4,6,1,3,5]
....: cinv=list(reversed(c))
....: for i in range(coxeter_number(A)//2):
....:     reflect_matrix(A,B(A,c),cinv*i)
....: 
[ 0  1  0  0  0  0  0]
[-1  0 -1  0  0  0  0]
[ 0  1  0  1  0  0  0]
[ 0  0 -1  0 -1  0  0]
[ 0  0  0  1  0  1  0]
[ 0  0  0  0 -1  0 -2]
[ 0  0  0  0  0  1  0]
[-1  1 -1  1  0  0  0]
[ 1 -2  1 -1  0  0  0]
[-1  2 -2  2 -1  1  0]
[ 0 -1  1 -2  1 -1  0]
[ 0  1 -1  2 -2  3 -2]
[ 0  0  0 -1  1 -3  2]
[ 0  0  0  1 -1  2 -2]
[ 0  0 -1  1 -1  1  0]
[ 1 -1  2 -2  1 -1  0]
[-1  1 -2  2 -2  3 -2]
[ 1 -2  2 -2  2 -3  2]
[-1  2 -2  3 -3  4 -4]
[ 0 -1  1 -3  3 -4  4]
[ 0  1 -1  2 -2  2 -2]
[ 0  0  0  0 -1  2 -2]
[ 0  0  1 -1  2 -3  2]
[ 0  0 -1  2 -3  4 -4]
[ 1 -1  2 -3  3 -4  4]
[-1  2 -3  4 -4  4 -4]
[ 1 -3  3 -4  4 -4  4]
[-1  2 -2  2 -2  2 -2]
[ 0  0  0  1 -1  1 -2]
[ 0  0  0 -1  2 -3  4]
[ 0  1 -1  2 -3  3 -4]
[ 0 -1  2 -3  4 -4  4]
[-1  2 -3  3 -4  4 -4]
[ 2 -3  4 -4  4 -4  4]
[-1  1 -2  2 -2  2 -2]
[ 0  1 -1  1 -1  0  0]
[ 0 -1  1 -2  2 -1  2]
[-1  2 -2  2 -2  1 -2]
[ 1 -2  2 -2  3 -3  4]
[-1  1 -2  2 -3  3 -4]
[ 1 -1  3 -3  4 -4  4]
[ 0  0 -1  1 -2  2 -2]
[-1  1 -1  0  0  0  0]
[ 1 -2  2 -1  1  0  0]
[-1  1 -2  1 -1  0  0]
[ 1 -1  2 -2  2 -1  2]
[ 0  0 -1  1 -2  1 -2]
[ 0  0  1 -1  3 -3  4]
[ 0  0  0  0 -1  1 -2]
sage: A=CartanMatrix(['C',7])
....: c=[0,2,4,6,1,3,5]
....: cinv=list(reversed(c))
....: for i in range(coxeter_number(A)//2):
....:     reflect_matrix(A,B(A,c),cinv*i)
....:     print("\n")
....: 
[ 0  1  0  0  0  0  0]
[-1  0 -1  0  0  0  0]
[ 0  1  0  1  0  0  0]
[ 0  0 -1  0 -1  0  0]
[ 0  0  0  1  0  1  0]
[ 0  0  0  0 -1  0 -2]
[ 0  0  0  0  0  1  0]


[-1  1 -1  1  0  0  0]
[ 1 -2  1 -1  0  0  0]
[-1  2 -2  2 -1  1  0]
[ 0 -1  1 -2  1 -1  0]
[ 0  1 -1  2 -2  3 -2]
[ 0  0  0 -1  1 -3  2]
[ 0  0  0  1 -1  2 -2]


[ 0  0 -1  1 -1  1  0]
[ 1 -1  2 -2  1 -1  0]
[-1  1 -2  2 -2  3 -2]
[ 1 -2  2 -2  2 -3  2]
[-1  2 -2  3 -3  4 -4]
[ 0 -1  1 -3  3 -4  4]
[ 0  1 -1  2 -2  2 -2]


[ 0  0  0  0 -1  2 -2]
[ 0  0  1 -1  2 -3  2]
[ 0  0 -1  2 -3  4 -4]
[ 1 -1  2 -3  3 -4  4]
[-1  2 -3  4 -4  4 -4]
[ 1 -3  3 -4  4 -4  4]
[-1  2 -2  2 -2  2 -2]


[ 0  0  0  1 -1  1 -2]
[ 0  0  0 -1  2 -3  4]
[ 0  1 -1  2 -3  3 -4]
[ 0 -1  2 -3  4 -4  4]
[-1  2 -3  3 -4  4 -4]
[ 2 -3  4 -4  4 -4  4]
[-1  1 -2  2 -2  2 -2]


[ 0  1 -1  1 -1  0  0]
[ 0 -1  1 -2  2 -1  2]
[-1  2 -2  2 -2  1 -2]
[ 1 -2  2 -2  3 -3  4]
[-1  1 -2  2 -3  3 -4]
[ 1 -1  3 -3  4 -4  4]
[ 0  0 -1  1 -2  2 -2]


[-1  1 -1  0  0  0  0]
[ 1 -2  2 -1  1  0  0]
[-1  1 -2  1 -1  0  0]
[ 1 -1  2 -2  2 -1  2]
[ 0  0 -1  1 -2  1 -2]
[ 0  0  1 -1  3 -3  4]
[ 0  0  0  0 -1  1 -2]


sage: A=CartanMatrix(['C',7])
....: c=[0,2,4,6,1,3,5]
....: cinv=list(reversed(c))
....: for i in range(coxeter_number(A)//2):
....:     print(i,"\n",reflect_matrix(A,B(A,c),cinv*i),"\n")
0 
 [ 0  1  0  0  0  0  0]
[-1  0 -1  0  0  0  0]
[ 0  1  0  1  0  0  0]
[ 0  0 -1  0 -1  0  0]
[ 0  0  0  1  0  1  0]
[ 0  0  0  0 -1  0 -2]
[ 0  0  0  0  0  1  0] 

1 
 [-1  1 -1  1  0  0  0]
[ 1 -2  1 -1  0  0  0]
[-1  2 -2  2 -1  1  0]
[ 0 -1  1 -2  1 -1  0]
[ 0  1 -1  2 -2  3 -2]
[ 0  0  0 -1  1 -3  2]
[ 0  0  0  1 -1  2 -2] 

2 
 [ 0  0 -1  1 -1  1  0]
[ 1 -1  2 -2  1 -1  0]
[-1  1 -2  2 -2  3 -2]
[ 1 -2  2 -2  2 -3  2]
[-1  2 -2  3 -3  4 -4]
[ 0 -1  1 -3  3 -4  4]
[ 0  1 -1  2 -2  2 -2] 

3 
 [ 0  0  0  0 -1  2 -2]
[ 0  0  1 -1  2 -3  2]
[ 0  0 -1  2 -3  4 -4]
[ 1 -1  2 -3  3 -4  4]
[-1  2 -3  4 -4  4 -4]
[ 1 -3  3 -4  4 -4  4]
[-1  2 -2  2 -2  2 -2] 

4 
 [ 0  0  0  1 -1  1 -2]
[ 0  0  0 -1  2 -3  4]
[ 0  1 -1  2 -3  3 -4]
[ 0 -1  2 -3  4 -4  4]
[-1  2 -3  3 -4  4 -4]
[ 2 -3  4 -4  4 -4  4]
[-1  1 -2  2 -2  2 -2] 

5 
 [ 0  1 -1  1 -1  0  0]
[ 0 -1  1 -2  2 -1  2]
[-1  2 -2  2 -2  1 -2]
[ 1 -2  2 -2  3 -3  4]
[-1  1 -2  2 -3  3 -4]
[ 1 -1  3 -3  4 -4  4]
[ 0  0 -1  1 -2  2 -2] 

6 
 [-1  1 -1  0  0  0  0]
[ 1 -2  2 -1  1  0  0]
[-1  1 -2  1 -1  0  0]
[ 1 -1  2 -2  2 -1  2]
[ 0  0 -1  1 -2  1 -2]
[ 0  0  1 -1  3 -3  4]
[ 0  0  0  0 -1  1 -2] 

sage: A=CartanMatrix(['C',7])
....: c=[0,2,4,6,1,3,5]
....: cinv=list(reversed(c))
....: for i in range(coxeter_number(A)//2):
....:     print(reflect_matrix(A,B(A,c),cinv*i),"\n")
....: 
[ 0  1  0  0  0  0  0]
[-1  0 -1  0  0  0  0]
[ 0  1  0  1  0  0  0]
[ 0  0 -1  0 -1  0  0]
[ 0  0  0  1  0  1  0]
[ 0  0  0  0 -1  0 -2]
[ 0  0  0  0  0  1  0] 

[-1  1 -1  1  0  0  0]
[ 1 -2  1 -1  0  0  0]
[-1  2 -2  2 -1  1  0]
[ 0 -1  1 -2  1 -1  0]
[ 0  1 -1  2 -2  3 -2]
[ 0  0  0 -1  1 -3  2]
[ 0  0  0  1 -1  2 -2] 

[ 0  0 -1  1 -1  1  0]
[ 1 -1  2 -2  1 -1  0]
[-1  1 -2  2 -2  3 -2]
[ 1 -2  2 -2  2 -3  2]
[-1  2 -2  3 -3  4 -4]
[ 0 -1  1 -3  3 -4  4]
[ 0  1 -1  2 -2  2 -2] 

[ 0  0  0  0 -1  2 -2]
[ 0  0  1 -1  2 -3  2]
[ 0  0 -1  2 -3  4 -4]
[ 1 -1  2 -3  3 -4  4]
[-1  2 -3  4 -4  4 -4]
[ 1 -3  3 -4  4 -4  4]
[-1  2 -2  2 -2  2 -2] 

[ 0  0  0  1 -1  1 -2]
[ 0  0  0 -1  2 -3  4]
[ 0  1 -1  2 -3  3 -4]
[ 0 -1  2 -3  4 -4  4]
[-1  2 -3  3 -4  4 -4]
[ 2 -3  4 -4  4 -4  4]
[-1  1 -2  2 -2  2 -2] 

[ 0  1 -1  1 -1  0  0]
[ 0 -1  1 -2  2 -1  2]
[-1  2 -2  2 -2  1 -2]
[ 1 -2  2 -2  3 -3  4]
[-1  1 -2  2 -3  3 -4]
[ 1 -1  3 -3  4 -4  4]
[ 0  0 -1  1 -2  2 -2] 

[-1  1 -1  0  0  0  0]
[ 1 -2  2 -1  1  0  0]
[-1  1 -2  1 -1  0  0]
[ 1 -1  2 -2  2 -1  2]
[ 0  0 -1  1 -2  1 -2]
[ 0  0  1 -1  3 -3  4]
[ 0  0  0  0 -1  1 -2] 

sage: A=CartanMatrix(['C',7])
....: c=[0,2,4,6,1,3,5]
....: cinv=list(reversed(c))
....: for i in range(coxeter_number(A)//2):
....:     print(reflect_matrix(A,B(A,c),cinv*i),"\n")
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: for i in range(coxeter_number(A)//2):
....:     P=P.intersection(Polyhedron(vertices=[vector([0]*A.nrows())],rays=refl
....: ect_matrix(A,B(A,c),cinv*i).columns()))
....: print(map(vector,P.rays())
  Cell In [1332], line 9
    print(map(vector,P.rays())
                              ^
SyntaxError: incomplete input

sage: A=CartanMatrix(['C',7])
....: c=[0,2,4,6,1,3,5]
....: cinv=list(reversed(c))
....: for i in range(coxeter_number(A)//2):
....:     print(reflect_matrix(A,B(A,c),cinv*i),"\n")
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: for i in range(coxeter_number(A)//2):
....:     P=P.intersection(Polyhedron(vertices=[vector([0]*A.nrows())],rays=refl
....: ect_matrix(A,B(A,c),cinv*i).columns()))
....: print(map(vector,P.rays()))
[ 0  1  0  0  0  0  0]
[-1  0 -1  0  0  0  0]
[ 0  1  0  1  0  0  0]
[ 0  0 -1  0 -1  0  0]
[ 0  0  0  1  0  1  0]
[ 0  0  0  0 -1  0 -2]
[ 0  0  0  0  0  1  0] 

[-1  1 -1  1  0  0  0]
[ 1 -2  1 -1  0  0  0]
[-1  2 -2  2 -1  1  0]
[ 0 -1  1 -2  1 -1  0]
[ 0  1 -1  2 -2  3 -2]
[ 0  0  0 -1  1 -3  2]
[ 0  0  0  1 -1  2 -2] 

[ 0  0 -1  1 -1  1  0]
[ 1 -1  2 -2  1 -1  0]
[-1  1 -2  2 -2  3 -2]
[ 1 -2  2 -2  2 -3  2]
[-1  2 -2  3 -3  4 -4]
[ 0 -1  1 -3  3 -4  4]
[ 0  1 -1  2 -2  2 -2] 

[ 0  0  0  0 -1  2 -2]
[ 0  0  1 -1  2 -3  2]
[ 0  0 -1  2 -3  4 -4]
[ 1 -1  2 -3  3 -4  4]
[-1  2 -3  4 -4  4 -4]
[ 1 -3  3 -4  4 -4  4]
[-1  2 -2  2 -2  2 -2] 

[ 0  0  0  1 -1  1 -2]
[ 0  0  0 -1  2 -3  4]
[ 0  1 -1  2 -3  3 -4]
[ 0 -1  2 -3  4 -4  4]
[-1  2 -3  3 -4  4 -4]
[ 2 -3  4 -4  4 -4  4]
[-1  1 -2  2 -2  2 -2] 

[ 0  1 -1  1 -1  0  0]
[ 0 -1  1 -2  2 -1  2]
[-1  2 -2  2 -2  1 -2]
[ 1 -2  2 -2  3 -3  4]
[-1  1 -2  2 -3  3 -4]
[ 1 -1  3 -3  4 -4  4]
[ 0  0 -1  1 -2  2 -2] 

[-1  1 -1  0  0  0  0]
[ 1 -2  2 -1  1  0  0]
[-1  1 -2  1 -1  0  0]
[ 1 -1  2 -2  2 -1  2]
[ 0  0 -1  1 -2  1 -2]
[ 0  0  1 -1  3 -3  4]
[ 0  0  0  0 -1  1 -2] 

<map object at 0x2c2a3b5b0>
sage: A=CartanMatrix(['C',7])
....: c=[0,2,4,6,1,3,5]
....: cinv=list(reversed(c))
....: for i in range(coxeter_number(A)//2):
....:     print(reflect_matrix(A,B(A,c),cinv*i),"\n")
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: for i in range(coxeter_number(A)//2):
....:     P=P.intersection(Polyhedron(vertices=[vector([0]*A.nrows())],rays=refl
....: ect_matrix(A,B(A,c),cinv*i).columns()))
....: map(vector,P.rays())
[ 0  1  0  0  0  0  0]
[-1  0 -1  0  0  0  0]
[ 0  1  0  1  0  0  0]
[ 0  0 -1  0 -1  0  0]
[ 0  0  0  1  0  1  0]
[ 0  0  0  0 -1  0 -2]
[ 0  0  0  0  0  1  0] 

[-1  1 -1  1  0  0  0]
[ 1 -2  1 -1  0  0  0]
[-1  2 -2  2 -1  1  0]
[ 0 -1  1 -2  1 -1  0]
[ 0  1 -1  2 -2  3 -2]
[ 0  0  0 -1  1 -3  2]
[ 0  0  0  1 -1  2 -2] 

[ 0  0 -1  1 -1  1  0]
[ 1 -1  2 -2  1 -1  0]
[-1  1 -2  2 -2  3 -2]
[ 1 -2  2 -2  2 -3  2]
[-1  2 -2  3 -3  4 -4]
[ 0 -1  1 -3  3 -4  4]
[ 0  1 -1  2 -2  2 -2] 

[ 0  0  0  0 -1  2 -2]
[ 0  0  1 -1  2 -3  2]
[ 0  0 -1  2 -3  4 -4]
[ 1 -1  2 -3  3 -4  4]
[-1  2 -3  4 -4  4 -4]
[ 1 -3  3 -4  4 -4  4]
[-1  2 -2  2 -2  2 -2] 

[ 0  0  0  1 -1  1 -2]
[ 0  0  0 -1  2 -3  4]
[ 0  1 -1  2 -3  3 -4]
[ 0 -1  2 -3  4 -4  4]
[-1  2 -3  3 -4  4 -4]
[ 2 -3  4 -4  4 -4  4]
[-1  1 -2  2 -2  2 -2] 

[ 0  1 -1  1 -1  0  0]
[ 0 -1  1 -2  2 -1  2]
[-1  2 -2  2 -2  1 -2]
[ 1 -2  2 -2  3 -3  4]
[-1  1 -2  2 -3  3 -4]
[ 1 -1  3 -3  4 -4  4]
[ 0  0 -1  1 -2  2 -2] 

[-1  1 -1  0  0  0  0]
[ 1 -2  2 -1  1  0  0]
[-1  1 -2  1 -1  0  0]
[ 1 -1  2 -2  2 -1  2]
[ 0  0 -1  1 -2  1 -2]
[ 0  0  1 -1  3 -3  4]
[ 0  0  0  0 -1  1 -2] 

<map object at 0x2c30bf4c0>
sage: A=CartanMatrix(['C',7])
....: c=[0,2,4,6,1,3,5]
....: cinv=list(reversed(c))
....: for i in range(coxeter_number(A)//2):
....:     print(reflect_matrix(A,B(A,c),cinv*i),"\n")
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: for i in range(coxeter_number(A)//2):
....:     P=P.intersection(Polyhedron(vertices=[vector([0]*A.nrows())],rays=refl
....: ect_matrix(A,B(A,c),cinv*i).columns()))
....: list(map(vector,P.rays()))
[ 0  1  0  0  0  0  0]
[-1  0 -1  0  0  0  0]
[ 0  1  0  1  0  0  0]
[ 0  0 -1  0 -1  0  0]
[ 0  0  0  1  0  1  0]
[ 0  0  0  0 -1  0 -2]
[ 0  0  0  0  0  1  0] 

[-1  1 -1  1  0  0  0]
[ 1 -2  1 -1  0  0  0]
[-1  2 -2  2 -1  1  0]
[ 0 -1  1 -2  1 -1  0]
[ 0  1 -1  2 -2  3 -2]
[ 0  0  0 -1  1 -3  2]
[ 0  0  0  1 -1  2 -2] 

[ 0  0 -1  1 -1  1  0]
[ 1 -1  2 -2  1 -1  0]
[-1  1 -2  2 -2  3 -2]
[ 1 -2  2 -2  2 -3  2]
[-1  2 -2  3 -3  4 -4]
[ 0 -1  1 -3  3 -4  4]
[ 0  1 -1  2 -2  2 -2] 

[ 0  0  0  0 -1  2 -2]
[ 0  0  1 -1  2 -3  2]
[ 0  0 -1  2 -3  4 -4]
[ 1 -1  2 -3  3 -4  4]
[-1  2 -3  4 -4  4 -4]
[ 1 -3  3 -4  4 -4  4]
[-1  2 -2  2 -2  2 -2] 

[ 0  0  0  1 -1  1 -2]
[ 0  0  0 -1  2 -3  4]
[ 0  1 -1  2 -3  3 -4]
[ 0 -1  2 -3  4 -4  4]
[-1  2 -3  3 -4  4 -4]
[ 2 -3  4 -4  4 -4  4]
[-1  1 -2  2 -2  2 -2] 

[ 0  1 -1  1 -1  0  0]
[ 0 -1  1 -2  2 -1  2]
[-1  2 -2  2 -2  1 -2]
[ 1 -2  2 -2  3 -3  4]
[-1  1 -2  2 -3  3 -4]
[ 1 -1  3 -3  4 -4  4]
[ 0  0 -1  1 -2  2 -2] 

[-1  1 -1  0  0  0  0]
[ 1 -2  2 -1  1  0  0]
[-1  1 -2  1 -1  0  0]
[ 1 -1  2 -2  2 -1  2]
[ 0  0 -1  1 -2  1 -2]
[ 0  0  1 -1  3 -3  4]
[ 0  0  0  0 -1  1 -2] 

[(0, -1, 0, 0, 0, 0, 0),
 (0, -1, 1, -2, 1, -1, 0),
 (0, 0, 0, -1, 1, -3, 1),
 (0, -1, 0, -1, 0, 0, 0),
 (0, 0, 0, 0, 0, -1, 0),
 (0, 0, 0, -1, 0, -1, 0),
 (1, -2, 1, -1, 0, 0, 0)]
sage: A=CartanMatrix(['C',7])
....: c=[0,2,4,6,1,3,5]
....: cinv=list(reversed(c))
....: for i in range(coxeter_number(A)//2):
....:     print(reflect_matrix(A,B(A,c),cinv*i),"\n")
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: for i in range(coxeter_number(A)//2):
....:     P=P.intersection(Polyhedron(vertices=[vector([0]*A.nrows())],rays=refl
....: ect_matrix(A,B(A,c),cinv*i).columns()))
....: matrix(map(vector,P.rays())).transpose()
[ 0  1  0  0  0  0  0]
[-1  0 -1  0  0  0  0]
[ 0  1  0  1  0  0  0]
[ 0  0 -1  0 -1  0  0]
[ 0  0  0  1  0  1  0]
[ 0  0  0  0 -1  0 -2]
[ 0  0  0  0  0  1  0] 

[-1  1 -1  1  0  0  0]
[ 1 -2  1 -1  0  0  0]
[-1  2 -2  2 -1  1  0]
[ 0 -1  1 -2  1 -1  0]
[ 0  1 -1  2 -2  3 -2]
[ 0  0  0 -1  1 -3  2]
[ 0  0  0  1 -1  2 -2] 

[ 0  0 -1  1 -1  1  0]
[ 1 -1  2 -2  1 -1  0]
[-1  1 -2  2 -2  3 -2]
[ 1 -2  2 -2  2 -3  2]
[-1  2 -2  3 -3  4 -4]
[ 0 -1  1 -3  3 -4  4]
[ 0  1 -1  2 -2  2 -2] 

[ 0  0  0  0 -1  2 -2]
[ 0  0  1 -1  2 -3  2]
[ 0  0 -1  2 -3  4 -4]
[ 1 -1  2 -3  3 -4  4]
[-1  2 -3  4 -4  4 -4]
[ 1 -3  3 -4  4 -4  4]
[-1  2 -2  2 -2  2 -2] 

[ 0  0  0  1 -1  1 -2]
[ 0  0  0 -1  2 -3  4]
[ 0  1 -1  2 -3  3 -4]
[ 0 -1  2 -3  4 -4  4]
[-1  2 -3  3 -4  4 -4]
[ 2 -3  4 -4  4 -4  4]
[-1  1 -2  2 -2  2 -2] 

[ 0  1 -1  1 -1  0  0]
[ 0 -1  1 -2  2 -1  2]
[-1  2 -2  2 -2  1 -2]
[ 1 -2  2 -2  3 -3  4]
[-1  1 -2  2 -3  3 -4]
[ 1 -1  3 -3  4 -4  4]
[ 0  0 -1  1 -2  2 -2] 

[-1  1 -1  0  0  0  0]
[ 1 -2  2 -1  1  0  0]
[-1  1 -2  1 -1  0  0]
[ 1 -1  2 -2  2 -1  2]
[ 0  0 -1  1 -2  1 -2]
[ 0  0  1 -1  3 -3  4]
[ 0  0  0  0 -1  1 -2] 

[ 0  0  0  0  0  0  1]
[-1 -1  0 -1  0  0 -2]
[ 0  1  0  0  0  0  1]
[ 0 -2 -1 -1  0 -1 -1]
[ 0  1  1  0  0  0  0]
[ 0 -1 -3  0 -1 -1  0]
[ 0  0  1  0  0  0  0]
sage: A=CartanMatrix(['C',6])
....: c=[0,2,4,1,3,5]
....: cinv=list(reversed(c))
....: for i in range(coxeter_number(A)//2):
....:     print(reflect_matrix(A,B(A,c),cinv*i),"\n")
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: for i in range(coxeter_number(A)//2):
....:     P=P.intersection(Polyhedron(vertices=[vector([0]*A.nrows())],rays=refl
....: ect_matrix(A,B(A,c),cinv*i).columns()))
....: matrix(map(vector,P.rays())).transpose()
[ 0  1  0  0  0  0]
[-1  0 -1  0  0  0]
[ 0  1  0  1  0  0]
[ 0  0 -1  0 -1  0]
[ 0  0  0  1  0  2]
[ 0  0  0  0 -1  0] 

[-1  1 -1  1  0  0]
[ 1 -2  1 -1  0  0]
[-1  2 -2  2 -1  2]
[ 0 -1  1 -2  1 -2]
[ 0  1 -1  3 -3  4]
[ 0  0  0 -1  1 -2] 

[ 0  0 -1  1 -1  2]
[ 1 -1  2 -2  1 -2]
[-1  1 -2  3 -3  4]
[ 1 -2  2 -3  3 -4]
[-1  3 -3  4 -4  4]
[ 0 -1  1 -2  2 -2] 

[ 0  0  0  1 -2  2]
[ 0  0  1 -2  3 -4]
[ 0  1 -2  3 -4  4]
[ 1 -2  3 -4  4 -4]
[-2  3 -4  4 -4  4]
[ 1 -2  2 -2  2 -2] 

[ 0  1 -1  1 -1  0]
[ 0 -1  1 -2  3 -2]
[-1  2 -2  2 -3  2]
[ 1 -2  3 -3  4 -4]
[-1  1 -3  3 -4  4]
[ 1 -1  2 -2  2 -2] 

[-1  1 -1  0  0  0]
[ 1 -2  2 -1  1  0]
[-1  1 -2  1 -1  0]
[ 1 -1  2 -2  3 -2]
[ 0  0 -1  1 -3  2]
[ 0  0  1 -1  2 -2] 

[ 0  0  0  0  0  1]
[-1  0 -1 -1  0 -2]
[ 0  0  1  0  0  1]
[ 0 -1 -2 -1 -1 -1]
[ 0  0  1  0  1  0]
[ 0 -1 -1  0 -1  0]
sage: A=CartanMatrix(['C',5])
....: c=[0,2,4,1,3]
....: cinv=list(reversed(c))
....: for i in range(coxeter_number(A)//2):
....:     print(reflect_matrix(A,B(A,c),cinv*i),"\n")
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: for i in range(coxeter_number(A)//2):
....:     P=P.intersection(Polyhedron(vertices=[vector([0]*A.nrows())],rays=refl
....: ect_matrix(A,B(A,c),cinv*i).columns()))
....: matrix(map(vector,P.rays())).transpose()
[ 0  1  0  0  0]
[-1  0 -1  0  0]
[ 0  1  0  1  0]
[ 0  0 -1  0 -2]
[ 0  0  0  1  0] 

[-1  1 -1  1  0]
[ 1 -2  1 -1  0]
[-1  2 -2  3 -2]
[ 0 -1  1 -3  2]
[ 0  1 -1  2 -2] 

[ 0  0 -1  2 -2]
[ 1 -1  2 -3  2]
[-1  2 -3  4 -4]
[ 1 -3  3 -4  4]
[-1  2 -2  2 -2] 

[ 0  1 -1  1 -2]
[ 0 -1  2 -3  4]
[-1  2 -3  3 -4]
[ 2 -3  4 -4  4]
[-1  1 -2  2 -2] 

[-1  1 -1  0  0]
[ 1 -2  2 -1  2]
[-1  1 -2  1 -2]
[ 1 -1  3 -3  4]
[ 0  0 -1  1 -2] 

[ 0  0  1  0]
[-1  0 -2 -1]
[ 0  0  1  1]
[ 0 -1 -1 -3]
[ 0  0  0  1]
sage: A=CartanMatrix(['C',4])
....: c=[0,2,1,3]
....: cinv=list(reversed(c))
....: for i in range(coxeter_number(A)//2):
....:     print(reflect_matrix(A,B(A,c),cinv*i),"\n")
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: for i in range(coxeter_number(A)//2):
....:     P=P.intersection(Polyhedron(vertices=[vector([0]*A.nrows())],rays=refl
....: ect_matrix(A,B(A,c),cinv*i).columns()))
....: matrix(map(vector,P.rays())).transpose()
[ 0  1  0  0]
[-1  0 -1  0]
[ 0  1  0  2]
[ 0  0 -1  0] 

[-1  1 -1  2]
[ 1 -2  1 -2]
[-1  3 -3  4]
[ 0 -1  1 -2] 

[ 0  1 -2  2]
[ 1 -2  3 -4]
[-2  3 -4  4]
[ 1 -2  2 -2] 

[-1  1 -1  0]
[ 1 -2  3 -2]
[-1  1 -3  2]
[ 1 -1  2 -2] 

[ 0  0  0  1]
[-1 -1 -1 -2]
[ 1  0  0  1]
[-1 -1  0 -1]
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: cinv=list(reversed(c))
....: for i in range(coxeter_number(A)//2):
....:     print(reflect_matrix(A,B(A,c),cinv*i),"\n")
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: for i in range(coxeter_number(A)//2):
....:     P=P.intersection(Polyhedron(vertices=[vector([0]*A.nrows())],rays=refl
....: ect_matrix(A,B(A,c),cinv*i).columns()))
....: matrix(map(vector,P.rays())).transpose()
[ 0  1  0]
[-1  0 -2]
[ 0  1  0] 

[-1  2 -2]
[ 1 -3  2]
[-1  2 -2] 

[-1  1 -2]
[ 2 -3  4]
[-1  1 -2] 

[ 1  0]
[-3 -1]
[ 1  0]
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: cinv=list(reversed(c))
....: for i in range(coxeter_number(A)//2):
....:     print(reflect_matrix(A,B(A,c),cinv*i),"\n")
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: #for i in range(coxeter_number(A)//2):
....: #    P=P.intersection(Polyhedron(vertices=[vector([0]*A.nrows())],rays=ref
....: lect_matrix(A,B(A,c),cinv*i).columns()))
....: matrix(map(vector,P.rays())).transpose()
[ 0  1  0]
[-1  0 -2]
[ 0  1  0] 

[-1  2 -2]
[ 1 -3  2]
[-1  2 -2] 

[-1  1 -2]
[ 2 -3  4]
[-1  1 -2] 

[ 0  1]
[-1  0]
[ 0  1]
sage: A=CartanMatrix(['C',7])
....: c=[0,2,4,6,1,3,5]
....: cinv=list(reversed(c))
....: for i in range(coxeter_number(A)//2):
....:     print(reflect_matrix(A,B(A,c),cinv*i),"\n")
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: #for i in range(coxeter_number(A)//2):
....: #    P=P.intersection(Polyhedron(vertices=[vector([0]*A.nrows())],rays=ref
....: lect_matrix(A,B(A,c),cinv*i).columns()))
....: matrix(map(vector,P.rays())).transpose()
[ 0  1  0  0  0  0  0]
[-1  0 -1  0  0  0  0]
[ 0  1  0  1  0  0  0]
[ 0  0 -1  0 -1  0  0]
[ 0  0  0  1  0  1  0]
[ 0  0  0  0 -1  0 -2]
[ 0  0  0  0  0  1  0] 

[-1  1 -1  1  0  0  0]
[ 1 -2  1 -1  0  0  0]
[-1  2 -2  2 -1  1  0]
[ 0 -1  1 -2  1 -1  0]
[ 0  1 -1  2 -2  3 -2]
[ 0  0  0 -1  1 -3  2]
[ 0  0  0  1 -1  2 -2] 

[ 0  0 -1  1 -1  1  0]
[ 1 -1  2 -2  1 -1  0]
[-1  1 -2  2 -2  3 -2]
[ 1 -2  2 -2  2 -3  2]
[-1  2 -2  3 -3  4 -4]
[ 0 -1  1 -3  3 -4  4]
[ 0  1 -1  2 -2  2 -2] 

[ 0  0  0  0 -1  2 -2]
[ 0  0  1 -1  2 -3  2]
[ 0  0 -1  2 -3  4 -4]
[ 1 -1  2 -3  3 -4  4]
[-1  2 -3  4 -4  4 -4]
[ 1 -3  3 -4  4 -4  4]
[-1  2 -2  2 -2  2 -2] 

[ 0  0  0  1 -1  1 -2]
[ 0  0  0 -1  2 -3  4]
[ 0  1 -1  2 -3  3 -4]
[ 0 -1  2 -3  4 -4  4]
[-1  2 -3  3 -4  4 -4]
[ 2 -3  4 -4  4 -4  4]
[-1  1 -2  2 -2  2 -2] 

[ 0  1 -1  1 -1  0  0]
[ 0 -1  1 -2  2 -1  2]
[-1  2 -2  2 -2  1 -2]
[ 1 -2  2 -2  3 -3  4]
[-1  1 -2  2 -3  3 -4]
[ 1 -1  3 -3  4 -4  4]
[ 0  0 -1  1 -2  2 -2] 

[-1  1 -1  0  0  0  0]
[ 1 -2  2 -1  1  0  0]
[-1  1 -2  1 -1  0  0]
[ 1 -1  2 -2  2 -1  2]
[ 0  0 -1  1 -2  1 -2]
[ 0  0  1 -1  3 -3  4]
[ 0  0  0  0 -1  1 -2] 

[ 0  0  0  0  0  0  1]
[-1 -1  0  0  0  0  0]
[ 0  0  0  0  0  1  1]
[-1  0 -1  0  0  0  0]
[ 0  0  0  0  1  1  0]
[ 0  0 -1 -1  0  0  0]
[ 0  0  0  0  1  0  0]
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: cinv=list(reversed(c))
....: for i in range(coxeter_number(A)//2):
....:     print(reflect_matrix(A,B(A,c),cinv*i),"\n")
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: for i in range(coxeter_number(A)//2):
....:     P=P.intersection(Polyhedron(vertices=[vector([0]*A.nrows())],rays=refl
....: ect_matrix(A,B(A,c),cinv*i).columns()))
....: matrix(map(vector,P.rays())).transpose()
[ 0  1  0]
[-1  0 -2]
[ 0  1  0] 

[-1  2 -2]
[ 1 -3  2]
[-1  2 -2] 

[-1  1 -2]
[ 2 -3  4]
[-1  1 -2] 

[ 1  0]
[-3 -1]
[ 1  0]
sage: A=CartanMatrix(['C',4])
....: c=[0,2,1,3]
....: cinv=list(reversed(c))
....: for i in range(coxeter_number(A)//2):
....:     print(reflect_matrix(A,B(A,c),cinv*i),"\n")
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: for i in range(coxeter_number(A)//2):
....:     P=P.intersection(Polyhedron(vertices=[vector([0]*A.nrows())],rays=refl
....: ect_matrix(A,B(A,c),cinv*i).columns()))
....: matrix(map(vector,P.rays())).transpose()
[ 0  1  0  0]
[-1  0 -1  0]
[ 0  1  0  2]
[ 0  0 -1  0] 

[-1  1 -1  2]
[ 1 -2  1 -2]
[-1  3 -3  4]
[ 0 -1  1 -2] 

[ 0  1 -2  2]
[ 1 -2  3 -4]
[-2  3 -4  4]
[ 1 -2  2 -2] 

[-1  1 -1  0]
[ 1 -2  3 -2]
[-1  1 -3  2]
[ 1 -1  2 -2] 

[ 0  0  0  1]
[-1 -1 -1 -2]
[ 1  0  0  1]
[-1 -1  0 -1]
sage: A=CartanMatrix(['C',4])
....: c=[0,2,1,3]
....: cinv=list(reversed(c))
....: for i in range(coxeter_number(A)//2):
....:     print(reflect_matrix(A,B(A,c),cinv*i),"\n")
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: for i in range(coxeter_number(A)//2):
....:     P=P.intersection(Polyhedron(vertices=[vector([0]*A.nrows())],rays=refl
....: ect_matrix(A,B(A,c),cinv*i).columns()))
....: matrix(map(vector,P.rays())).transpose().determinant()
[ 0  1  0  0]
[-1  0 -1  0]
[ 0  1  0  2]
[ 0  0 -1  0] 

[-1  1 -1  2]
[ 1 -2  1 -2]
[-1  3 -3  4]
[ 0 -1  1 -2] 

[ 0  1 -2  2]
[ 1 -2  3 -4]
[-2  3 -4  4]
[ 1 -2  2 -2] 

[-1  1 -1  0]
[ 1 -2  3 -2]
[-1  1 -3  2]
[ 1 -1  2 -2] 

-1
sage: A=CartanMatrix(['C',5])
....: c=[0,2,4,1,3]
....: cinv=list(reversed(c))
....: for i in range(coxeter_number(A)//2):
....:     print(reflect_matrix(A,B(A,c),cinv*i),"\n")
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: for i in range(coxeter_number(A)//2):
....:     P=P.intersection(Polyhedron(vertices=[vector([0]*A.nrows())],rays=refl
....: ect_matrix(A,B(A,c),cinv*i).columns()))
....: matrix(map(vector,P.rays())).transpose().determinant()
[ 0  1  0  0  0]
[-1  0 -1  0  0]
[ 0  1  0  1  0]
[ 0  0 -1  0 -2]
[ 0  0  0  1  0] 

[-1  1 -1  1  0]
[ 1 -2  1 -1  0]
[-1  2 -2  3 -2]
[ 0 -1  1 -3  2]
[ 0  1 -1  2 -2] 

[ 0  0 -1  2 -2]
[ 1 -1  2 -3  2]
[-1  2 -3  4 -4]
[ 1 -3  3 -4  4]
[-1  2 -2  2 -2] 

[ 0  1 -1  1 -2]
[ 0 -1  2 -3  4]
[-1  2 -3  3 -4]
[ 2 -3  4 -4  4]
[-1  1 -2  2 -2] 

[-1  1 -1  0  0]
[ 1 -2  2 -1  2]
[-1  1 -2  1 -2]
[ 1 -1  3 -3  4]
[ 0  0 -1  1 -2] 

---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
Cell In [1346], line 9
      7 for i in range(coxeter_number(A)//Integer(2)):
      8     P=P.intersection(Polyhedron(vertices=[vector([Integer(0)]*A.nrows())],rays=reflect_matrix(A,B(A,c),cinv*i).columns()))
----> 9 matrix(map(vector,P.rays())).transpose().determinant()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/matrix_integer_dense.pyx:3752, in sage.matrix.matrix_integer_dense.Matrix_integer_dense.determinant (build/cythonized/sage/matrix/matrix_integer_dense.cpp:44579)()
   3750     return d
   3751 if not self.is_square():
-> 3752     raise ValueError("self must be a square matrix")
   3753 
   3754 cdef Integer det = Integer()

ValueError: self must be a square matrix
sage: A=CartanMatrix(['C',5])
....: c=[0,2,4,1,3]
....: cinv=list(reversed(c))
....: for i in range(coxeter_number(A)//2):
....:     print(reflect_matrix(A,B(A,c),cinv*i),"\n")
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: for i in range(coxeter_number(A)//2):
....:     P=P.intersection(Polyhedron(vertices=[vector([0]*A.nrows())],rays=refl
....: ect_matrix(A,B(A,c),cinv*i).columns()))
....: matrix(map(vector,P.rays())).transpose()
[ 0  1  0  0  0]
[-1  0 -1  0  0]
[ 0  1  0  1  0]
[ 0  0 -1  0 -2]
[ 0  0  0  1  0] 

[-1  1 -1  1  0]
[ 1 -2  1 -1  0]
[-1  2 -2  3 -2]
[ 0 -1  1 -3  2]
[ 0  1 -1  2 -2] 

[ 0  0 -1  2 -2]
[ 1 -1  2 -3  2]
[-1  2 -3  4 -4]
[ 1 -3  3 -4  4]
[-1  2 -2  2 -2] 

[ 0  1 -1  1 -2]
[ 0 -1  2 -3  4]
[-1  2 -3  3 -4]
[ 2 -3  4 -4  4]
[-1  1 -2  2 -2] 

[-1  1 -1  0  0]
[ 1 -2  2 -1  2]
[-1  1 -2  1 -2]
[ 1 -1  3 -3  4]
[ 0  0 -1  1 -2] 

[ 0  0  1  0]
[-1  0 -2 -1]
[ 0  0  1  1]
[ 0 -1 -1 -3]
[ 0  0  0  1]
sage: A=CartanMatrix(['C',9])
....: c=[0,2,4,6,8,1,3,5,7]
....: cinv=list(reversed(c))
....: for i in range(coxeter_number(A)//2):
....:     print(reflect_matrix(A,B(A,c),cinv*i),"\n")
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: for i in range(coxeter_number(A)//2):
....:     P=P.intersection(Polyhedron(vertices=[vector([0]*A.nrows())],rays=refl
....: ect_matrix(A,B(A,c),cinv*i).columns()))
....: matrix(map(vector,P.rays())).transpose()
[ 0  1  0  0  0  0  0  0  0]
[-1  0 -1  0  0  0  0  0  0]
[ 0  1  0  1  0  0  0  0  0]
[ 0  0 -1  0 -1  0  0  0  0]
[ 0  0  0  1  0  1  0  0  0]
[ 0  0  0  0 -1  0 -1  0  0]
[ 0  0  0  0  0  1  0  1  0]
[ 0  0  0  0  0  0 -1  0 -2]
[ 0  0  0  0  0  0  0  1  0] 

[-1  1 -1  1  0  0  0  0  0]
[ 1 -2  1 -1  0  0  0  0  0]
[-1  2 -2  2 -1  1  0  0  0]
[ 0 -1  1 -2  1 -1  0  0  0]
[ 0  1 -1  2 -2  2 -1  1  0]
[ 0  0  0 -1  1 -2  1 -1  0]
[ 0  0  0  1 -1  2 -2  3 -2]
[ 0  0  0  0  0 -1  1 -3  2]
[ 0  0  0  0  0  1 -1  2 -2] 

[ 0  0 -1  1 -1  1  0  0  0]
[ 1 -1  2 -2  1 -1  0  0  0]
[-1  1 -2  2 -2  2 -1  1  0]
[ 1 -2  2 -2  2 -2  1 -1  0]
[-1  2 -2  2 -2  2 -2  3 -2]
[ 0 -1  1 -2  2 -2  2 -3  2]
[ 0  1 -1  2 -2  3 -3  4 -4]
[ 0  0  0 -1  1 -3  3 -4  4]
[ 0  0  0  1 -1  2 -2  2 -2] 

[ 0  0  0  0 -1  1 -1  1  0]
[ 0  0  1 -1  2 -2  1 -1  0]
[ 0  0 -1  1 -2  2 -2  3 -2]
[ 1 -1  2 -2  2 -2  2 -3  2]
[-1  1 -2  2 -2  3 -3  4 -4]
[ 1 -2  2 -2  2 -3  3 -4  4]
[-1  2 -2  3 -3  4 -4  4 -4]
[ 0 -1  1 -3  3 -4  4 -4  4]
[ 0  1 -1  2 -2  2 -2  2 -2] 

[ 0  0  0  0  0  0 -1  2 -2]
[ 0  0  0  0  1 -1  2 -3  2]
[ 0  0  0  0 -1  2 -3  4 -4]
[ 0  0  1 -1  2 -3  3 -4  4]
[ 0  0 -1  2 -3  4 -4  4 -4]
[ 1 -1  2 -3  3 -4  4 -4  4]
[-1  2 -3  4 -4  4 -4  4 -4]
[ 1 -3  3 -4  4 -4  4 -4  4]
[-1  2 -2  2 -2  2 -2  2 -2] 

[ 0  0  0  0  0  1 -1  1 -2]
[ 0  0  0  0  0 -1  2 -3  4]
[ 0  0  0  1 -1  2 -3  3 -4]
[ 0  0  0 -1  2 -3  4 -4  4]
[ 0  1 -1  2 -3  3 -4  4 -4]
[ 0 -1  2 -3  4 -4  4 -4  4]
[-1  2 -3  3 -4  4 -4  4 -4]
[ 2 -3  4 -4  4 -4  4 -4  4]
[-1  1 -2  2 -2  2 -2  2 -2] 

[ 0  0  0  1 -1  1 -1  0  0]
[ 0  0  0 -1  1 -2  2 -1  2]
[ 0  1 -1  2 -2  2 -2  1 -2]
[ 0 -1  1 -2  2 -2  3 -3  4]
[-1  2 -2  2 -2  2 -3  3 -4]
[ 1 -2  2 -2  3 -3  4 -4  4]
[-1  1 -2  2 -3  3 -4  4 -4]
[ 1 -1  3 -3  4 -4  4 -4  4]
[ 0  0 -1  1 -2  2 -2  2 -2] 

[ 0  1 -1  1 -1  0  0  0  0]
[ 0 -1  1 -2  2 -1  1  0  0]
[-1  2 -2  2 -2  1 -1  0  0]
[ 1 -2  2 -2  2 -2  2 -1  2]
[-1  1 -2  2 -2  2 -2  1 -2]
[ 1 -1  2 -2  2 -2  3 -3  4]
[ 0  0 -1  1 -2  2 -3  3 -4]
[ 0  0  1 -1  3 -3  4 -4  4]
[ 0  0  0  0 -1  1 -2  2 -2] 

[-1  1 -1  0  0  0  0  0  0]
[ 1 -2  2 -1  1  0  0  0  0]
[-1  1 -2  1 -1  0  0  0  0]
[ 1 -1  2 -2  2 -1  1  0  0]
[ 0  0 -1  1 -2  1 -1  0  0]
[ 0  0  1 -1  2 -2  2 -1  2]
[ 0  0  0  0 -1  1 -2  1 -2]
[ 0  0  0  0  1 -1  3 -3  4]
[ 0  0  0  0  0  0 -1  1 -2] 

[ 0  0  0  1  0  0  0  0  0]
[-1 -1 -1 -2  0  0  0  0  0]
[ 0  1  0  1  0  0  0  0  0]
[ 0 -2 -1 -1 -1  0  0  0 -1]
[ 0  1  0  0  0  0  0  0  1]
[ 0 -1  0  0 -1 -1  0 -1 -2]
[ 0  0  0  0  0  1  0  0  1]
[ 0  0  0  0  0 -3 -1 -1 -1]
[ 0  0  0  0  0  1  0  0  0]
sage: A=CartanMatrix(['C',9])
....: c=[0,2,4,6,8,1,3,5,7]
....: cinv=list(reversed(c))
....: for i in range(coxeter_number(A)//2):
....:     print(reflect_matrix(A,B(A,c),cinv*i),"\n")
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: for i in range(coxeter_number(A)//2):
....:     P=P.intersection(Polyhedron(vertices=[vector([0]*A.nrows())],rays=refl
....: ect_matrix(A,B(A,c),cinv*i).columns()))
....: matrix(map(vector,P.rays())).transpose().determinant()
[ 0  1  0  0  0  0  0  0  0]
[-1  0 -1  0  0  0  0  0  0]
[ 0  1  0  1  0  0  0  0  0]
[ 0  0 -1  0 -1  0  0  0  0]
[ 0  0  0  1  0  1  0  0  0]
[ 0  0  0  0 -1  0 -1  0  0]
[ 0  0  0  0  0  1  0  1  0]
[ 0  0  0  0  0  0 -1  0 -2]
[ 0  0  0  0  0  0  0  1  0] 

[-1  1 -1  1  0  0  0  0  0]
[ 1 -2  1 -1  0  0  0  0  0]
[-1  2 -2  2 -1  1  0  0  0]
[ 0 -1  1 -2  1 -1  0  0  0]
[ 0  1 -1  2 -2  2 -1  1  0]
[ 0  0  0 -1  1 -2  1 -1  0]
[ 0  0  0  1 -1  2 -2  3 -2]
[ 0  0  0  0  0 -1  1 -3  2]
[ 0  0  0  0  0  1 -1  2 -2] 

[ 0  0 -1  1 -1  1  0  0  0]
[ 1 -1  2 -2  1 -1  0  0  0]
[-1  1 -2  2 -2  2 -1  1  0]
[ 1 -2  2 -2  2 -2  1 -1  0]
[-1  2 -2  2 -2  2 -2  3 -2]
[ 0 -1  1 -2  2 -2  2 -3  2]
[ 0  1 -1  2 -2  3 -3  4 -4]
[ 0  0  0 -1  1 -3  3 -4  4]
[ 0  0  0  1 -1  2 -2  2 -2] 

[ 0  0  0  0 -1  1 -1  1  0]
[ 0  0  1 -1  2 -2  1 -1  0]
[ 0  0 -1  1 -2  2 -2  3 -2]
[ 1 -1  2 -2  2 -2  2 -3  2]
[-1  1 -2  2 -2  3 -3  4 -4]
[ 1 -2  2 -2  2 -3  3 -4  4]
[-1  2 -2  3 -3  4 -4  4 -4]
[ 0 -1  1 -3  3 -4  4 -4  4]
[ 0  1 -1  2 -2  2 -2  2 -2] 

[ 0  0  0  0  0  0 -1  2 -2]
[ 0  0  0  0  1 -1  2 -3  2]
[ 0  0  0  0 -1  2 -3  4 -4]
[ 0  0  1 -1  2 -3  3 -4  4]
[ 0  0 -1  2 -3  4 -4  4 -4]
[ 1 -1  2 -3  3 -4  4 -4  4]
[-1  2 -3  4 -4  4 -4  4 -4]
[ 1 -3  3 -4  4 -4  4 -4  4]
[-1  2 -2  2 -2  2 -2  2 -2] 

[ 0  0  0  0  0  1 -1  1 -2]
[ 0  0  0  0  0 -1  2 -3  4]
[ 0  0  0  1 -1  2 -3  3 -4]
[ 0  0  0 -1  2 -3  4 -4  4]
[ 0  1 -1  2 -3  3 -4  4 -4]
[ 0 -1  2 -3  4 -4  4 -4  4]
[-1  2 -3  3 -4  4 -4  4 -4]
[ 2 -3  4 -4  4 -4  4 -4  4]
[-1  1 -2  2 -2  2 -2  2 -2] 

[ 0  0  0  1 -1  1 -1  0  0]
[ 0  0  0 -1  1 -2  2 -1  2]
[ 0  1 -1  2 -2  2 -2  1 -2]
[ 0 -1  1 -2  2 -2  3 -3  4]
[-1  2 -2  2 -2  2 -3  3 -4]
[ 1 -2  2 -2  3 -3  4 -4  4]
[-1  1 -2  2 -3  3 -4  4 -4]
[ 1 -1  3 -3  4 -4  4 -4  4]
[ 0  0 -1  1 -2  2 -2  2 -2] 

[ 0  1 -1  1 -1  0  0  0  0]
[ 0 -1  1 -2  2 -1  1  0  0]
[-1  2 -2  2 -2  1 -1  0  0]
[ 1 -2  2 -2  2 -2  2 -1  2]
[-1  1 -2  2 -2  2 -2  1 -2]
[ 1 -1  2 -2  2 -2  3 -3  4]
[ 0  0 -1  1 -2  2 -3  3 -4]
[ 0  0  1 -1  3 -3  4 -4  4]
[ 0  0  0  0 -1  1 -2  2 -2] 

[-1  1 -1  0  0  0  0  0  0]
[ 1 -2  2 -1  1  0  0  0  0]
[-1  1 -2  1 -1  0  0  0  0]
[ 1 -1  2 -2  2 -1  1  0  0]
[ 0  0 -1  1 -2  1 -1  0  0]
[ 0  0  1 -1  2 -2  2 -1  2]
[ 0  0  0  0 -1  1 -2  1 -2]
[ 0  0  0  0  1 -1  3 -3  4]
[ 0  0  0  0  0  0 -1  1 -2] 

0
sage: A=CartanMatrix(['C',9])
....: c=[0,2,4,6,8,1,3,5,7]
....: cinv=list(reversed(c))
....: #for i in range(coxeter_number(A)//2):
....: #    print(reflect_matrix(A,B(A,c),cinv*i),"\n")
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: for i in range(coxeter_number(A)//2):
....:     P=P.intersection(Polyhedron(vertices=[vector([0]*A.nrows())],rays=refl
....: ect_matrix(A,B(A,c),cinv*i).columns()))
....: matrix(map(vector,P.rays())).transpose()
[ 0  0  0  1  0  0  0  0  0]
[-1 -1 -1 -2  0  0  0  0  0]
[ 0  1  0  1  0  0  0  0  0]
[ 0 -2 -1 -1 -1  0  0  0 -1]
[ 0  1  0  0  0  0  0  0  1]
[ 0 -1  0  0 -1 -1  0 -1 -2]
[ 0  0  0  0  0  1  0  0  1]
[ 0  0  0  0  0 -3 -1 -1 -1]
[ 0  0  0  0  0  1  0  0  0]
sage: A=CartanMatrix(['C',9])
....: c=[0,2,4,6,8,1,3,5,7]
....: cinv=list(reversed(c))
....: #for i in range(coxeter_number(A)//2):
....: #    print(reflect_matrix(A,B(A,c),cinv*i),"\n")
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: for i in range(coxeter_number(A)//2):
....:     P=P.intersection(Polyhedron(vertices=[vector([0]*A.nrows())],rays=refl
....: ect_matrix(A,B(A,c),cinv*i).columns()))
....: matrix(map(vector,P.rays())).transpose()
[ 0  0  0  1  0  0  0  0  0]
[-1 -1 -1 -2  0  0  0  0  0]
[ 0  1  0  1  0  0  0  0  0]
[ 0 -2 -1 -1 -1  0  0  0 -1]
[ 0  1  0  0  0  0  0  0  1]
[ 0 -1  0  0 -1 -1  0 -1 -2]
[ 0  0  0  0  0  1  0  0  1]
[ 0  0  0  0  0 -3 -1 -1 -1]
[ 0  0  0  0  0  1  0  0  0]
sage: A=CartanMatrix(['C',9])
....: c=[0,2,4,6,8,1,3,5,7]
....: cinv=list(reversed(c))
....: #for i in range(coxeter_number(A)//2):
....: #    print(reflect_matrix(A,B(A,c),cinv*i),"\n")
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: for i in range(coxeter_number(A)//2):
....:     P=P.intersection(Polyhedron(vertices=[vector([0]*A.nrows())],rays=refl
....: ect_matrix(A,B(A,c),cinv*i).columns()))
....: matrix(map(vector,P.rays())).transpose()
[ 0  0  0  1  0  0  0  0  0]
[-1 -1 -1 -2  0  0  0  0  0]
[ 0  1  0  1  0  0  0  0  0]
[ 0 -2 -1 -1 -1  0  0  0 -1]
[ 0  1  0  0  0  0  0  0  1]
[ 0 -1  0  0 -1 -1  0 -1 -2]
[ 0  0  0  0  0  1  0  0  1]
[ 0  0  0  0  0 -3 -1 -1 -1]
[ 0  0  0  0  0  1  0  0  0]
sage: A=CartanMatrix(['C',9])
....: c=[0,2,4,6,8,1,3,5,7]
....: cinv=list(reversed(c))
....: #for i in range(coxeter_number(A)//2):
....: #    print(reflect_matrix(A,B(A,c),cinv*i),"\n")
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: for i in range(coxeter_number(A)//2):
....:     P=P.intersection(Polyhedron(vertices=[vector([0]*A.nrows())],rays=refl
....: ect_matrix(A,B(A,c),cinv*i).columns()))
....: matrix(map(vector,P.rays())).transpose()
....: B(A,c)
[ 0  0  0  1  0  0  0  0  0]
[-1 -1 -1 -2  0  0  0  0  0]
[ 0  1  0  1  0  0  0  0  0]
[ 0 -2 -1 -1 -1  0  0  0 -1]
[ 0  1  0  0  0  0  0  0  1]
[ 0 -1  0  0 -1 -1  0 -1 -2]
[ 0  0  0  0  0  1  0  0  1]
[ 0  0  0  0  0 -3 -1 -1 -1]
[ 0  0  0  0  0  1  0  0  0]
[ 0  1  0  0  0  0  0  0  0]
[-1  0 -1  0  0  0  0  0  0]
[ 0  1  0  1  0  0  0  0  0]
[ 0  0 -1  0 -1  0  0  0  0]
[ 0  0  0  1  0  1  0  0  0]
[ 0  0  0  0 -1  0 -1  0  0]
[ 0  0  0  0  0  1  0  1  0]
[ 0  0  0  0  0  0 -1  0 -2]
[ 0  0  0  0  0  0  0  1  0]
sage: A=CartanMatrix(['C',9])
....: c=[0,2,4,6,8,1,3,5,7]
....: cinv=list(reversed(c))
....: #for i in range(coxeter_number(A)//2):
....: #    print(reflect_matrix(A,B(A,c),cinv*i),"\n")
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: for i in range(coxeter_number(A)//2):
....:     P=P.intersection(Polyhedron(vertices=[vector([0]*A.nrows())],rays=refl
....: ect_matrix(A,B(A,c),cinv*i).columns()))
....: matrix(map(vector,P.rays())).transpose()
....: print("\n")
....: B(A,c)
[ 0  0  0  1  0  0  0  0  0]
[-1 -1 -1 -2  0  0  0  0  0]
[ 0  1  0  1  0  0  0  0  0]
[ 0 -2 -1 -1 -1  0  0  0 -1]
[ 0  1  0  0  0  0  0  0  1]
[ 0 -1  0  0 -1 -1  0 -1 -2]
[ 0  0  0  0  0  1  0  0  1]
[ 0  0  0  0  0 -3 -1 -1 -1]
[ 0  0  0  0  0  1  0  0  0]


[ 0  1  0  0  0  0  0  0  0]
[-1  0 -1  0  0  0  0  0  0]
[ 0  1  0  1  0  0  0  0  0]
[ 0  0 -1  0 -1  0  0  0  0]
[ 0  0  0  1  0  1  0  0  0]
[ 0  0  0  0 -1  0 -1  0  0]
[ 0  0  0  0  0  1  0  1  0]
[ 0  0  0  0  0  0 -1  0 -2]
[ 0  0  0  0  0  0  0  1  0]
sage: A=CartanMatrix(['A',9])
....: c=[0,2,4,6,8,1,3,5,7]
....: cinv=list(reversed(c))
....: #for i in range(coxeter_number(A)//2):
....: #    print(reflect_matrix(A,B(A,c),cinv*i),"\n")
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: for i in range(coxeter_number(A)//2):
....:     P=P.intersection(Polyhedron(vertices=[vector([0]*A.nrows())],rays=refl
....: ect_matrix(A,B(A,c),cinv*i).columns()))
....: matrix(map(vector,P.rays())).transpose()
....: print("\n")
....: B(A,c)
[ 0  0  0  0  0  0  0  0  1]
[-1 -1  0  0  0 -1  0  0 -2]
[ 0  1  0  0  0  0  0  0  1]
[ 0 -2  0 -1 -1 -1  0  0 -1]
[ 0  1  0  1  0  0  0  0  0]
[ 0 -1 -1 -2 -1  0  0 -1  0]
[ 0  0  1  1  0  0  0  0  0]
[ 0  0 -2 -1  0  0 -1 -1  0]
[ 0  0  1  0  0  0  0  0  0]


[ 0  1  0  0  0  0  0  0  0]
[-1  0 -1  0  0  0  0  0  0]
[ 0  1  0  1  0  0  0  0  0]
[ 0  0 -1  0 -1  0  0  0  0]
[ 0  0  0  1  0  1  0  0  0]
[ 0  0  0  0 -1  0 -1  0  0]
[ 0  0  0  0  0  1  0  1  0]
[ 0  0  0  0  0  0 -1  0 -1]
[ 0  0  0  0  0  0  0  1  0]
sage: A=CartanMatrix(['A',8])
....: c=[0,2,4,6,1,3,5,7]
....: cinv=list(reversed(c))
....: #for i in range(coxeter_number(A)//2):
....: #    print(reflect_matrix(A,B(A,c),cinv*i),"\n")
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: for i in range(coxeter_number(A)//2):
....:     P=P.intersection(Polyhedron(vertices=[vector([0]*A.nrows())],rays=refl
....: ect_matrix(A,B(A,c),cinv*i).columns()))
....: matrix(map(vector,P.rays())).transpose()
....: print("\n")
....: B(A,c)
[ 0  0  0  0  0  0  0  0  1  1  0]
[ 0 -1  0  0  0 -1  0 -1 -1 -2 -1]
[ 0  0  0  0  0  1  0  1  1  2  0]
[ 0  0 -1  0 -1 -2 -1 -2 -1 -2 -1]
[ 0  0  1  0  0  1  1  2  0  1  0]
[-1  0 -2 -1 -1 -1 -2 -2  0 -1  0]
[ 1  0  1  0  0  0  2  1  0  0  0]
[-1  0 -1 -1  0  0 -1 -1  0  0  0]


[ 0  1  0  0  0  0  0  0]
[-1  0 -1  0  0  0  0  0]
[ 0  1  0  1  0  0  0  0]
[ 0  0 -1  0 -1  0  0  0]
[ 0  0  0  1  0  1  0  0]
[ 0  0  0  0 -1  0 -1  0]
[ 0  0  0  0  0  1  0  1]
[ 0  0  0  0  0  0 -1  0]
sage: A=CartanMatrix(['C',8])
....: c=[0,2,4,6,1,3,5,7]
....: cinv=list(reversed(c))
....: #for i in range(coxeter_number(A)//2):
....: #    print(reflect_matrix(A,B(A,c),cinv*i),"\n")
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: for i in range(coxeter_number(A)//2):
....:     P=P.intersection(Polyhedron(vertices=[vector([0]*A.nrows())],rays=refl
....: ect_matrix(A,B(A,c),cinv*i).columns()))
....: matrix(map(vector,P.rays())).transpose()
....: print("\n")
....: B(A,c)
[ 0  0  0  0  0  0  0  1]
[ 0 -1  0 -1 -1  0  0 -2]
[ 0  1  0  0  0  0  0  1]
[ 0 -2 -1  0 -1  0 -1 -1]
[ 0  1  1  0  0  0  0  0]
[-1 -1 -2  0  0 -1 -1  0]
[ 1  0  1  0  0  0  0  0]
[-1  0 -1  0  0 -1  0  0]


[ 0  1  0  0  0  0  0  0]
[-1  0 -1  0  0  0  0  0]
[ 0  1  0  1  0  0  0  0]
[ 0  0 -1  0 -1  0  0  0]
[ 0  0  0  1  0  1  0  0]
[ 0  0  0  0 -1  0 -1  0]
[ 0  0  0  0  0  1  0  2]
[ 0  0  0  0  0  0 -1  0]
sage: A=CartanMatrix(['B',8])
....: c=[0,2,4,6,1,3,5,7]
....: cinv=list(reversed(c))
....: #for i in range(coxeter_number(A)//2):
....: #    print(reflect_matrix(A,B(A,c),cinv*i),"\n")
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: for i in range(coxeter_number(A)//2):
....:     P=P.intersection(Polyhedron(vertices=[vector([0]*A.nrows())],rays=refl
....: ect_matrix(A,B(A,c),cinv*i).columns()))
....: matrix(map(vector,P.rays())).transpose()
....: print("\n")
....: B(A,c)
[ 0  0  0  1  0  0  0  0]
[-1  0 -1 -2 -1  0  0  0]
[ 1  0  0  1  0  0  0  0]
[-2  0  0 -1 -1 -1  0 -1]
[ 1  0  0  0  0  0  0  1]
[-1 -1  0  0  0 -1 -1 -2]
[ 0  1  0  0  0  0  0  1]
[ 0 -2  0  0  0  0 -2 -2]


[ 0  1  0  0  0  0  0  0]
[-1  0 -1  0  0  0  0  0]
[ 0  1  0  1  0  0  0  0]
[ 0  0 -1  0 -1  0  0  0]
[ 0  0  0  1  0  1  0  0]
[ 0  0  0  0 -1  0 -1  0]
[ 0  0  0  0  0  1  0  1]
[ 0  0  0  0  0  0 -2  0]
sage: A=CartanMatrix(['B',7])
....: c=[0,2,4,6,1,3,5]
....: cinv=list(reversed(c))
....: #for i in range(coxeter_number(A)//2):
....: #    print(reflect_matrix(A,B(A,c),cinv*i),"\n")
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: for i in range(coxeter_number(A)//2):
....:     P=P.intersection(Polyhedron(vertices=[vector([0]*A.nrows())],rays=refl
....: ect_matrix(A,B(A,c),cinv*i).columns()))
....: matrix(map(vector,P.rays())).transpose()
....: print("\n")
....: B(A,c)
[ 0  0  1  0  0  0  0]
[-1 -1 -2  0 -1  0  0]
[ 0  1  1  0  0  0  0]
[ 0 -2 -1 -1 -1 -1  0]
[ 0  1  0  1  0  0  0]
[ 0 -1  0 -3  0 -1 -1]
[ 0  0  0  2  0  0  0]


[ 0  1  0  0  0  0  0]
[-1  0 -1  0  0  0  0]
[ 0  1  0  1  0  0  0]
[ 0  0 -1  0 -1  0  0]
[ 0  0  0  1  0  1  0]
[ 0  0  0  0 -1  0 -1]
[ 0  0  0  0  0  2  0]
sage: A=CartanMatrix(['B',8])
....: c=[0,2,4,6,1,3,5,7]
....: cinv=list(reversed(c))
....: #for i in range(coxeter_number(A)//2):
....: #    print(reflect_matrix(A,B(A,c),cinv*i),"\n")
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: for i in range(coxeter_number(A)//2):
....:     P=P.intersection(Polyhedron(vertices=[vector([0]*A.nrows())],rays=refl
....: ect_matrix(A,B(A,c),cinv*i).columns()))
....: matrix(map(vector,P.rays())).transpose()
....: print("\n")
....: B(A,c)
[ 0  0  0  1  0  0  0  0]
[-1  0 -1 -2 -1  0  0  0]
[ 1  0  0  1  0  0  0  0]
[-2  0  0 -1 -1 -1  0 -1]
[ 1  0  0  0  0  0  0  1]
[-1 -1  0  0  0 -1 -1 -2]
[ 0  1  0  0  0  0  0  1]
[ 0 -2  0  0  0  0 -2 -2]


[ 0  1  0  0  0  0  0  0]
[-1  0 -1  0  0  0  0  0]
[ 0  1  0  1  0  0  0  0]
[ 0  0 -1  0 -1  0  0  0]
[ 0  0  0  1  0  1  0  0]
[ 0  0  0  0 -1  0 -1  0]
[ 0  0  0  0  0  1  0  1]
[ 0  0  0  0  0  0 -2  0]
sage: A=CartanMatrix(['C',8])
....: c=[0,2,4,6,1,3,5,7]
....: cinv=list(reversed(c))
....: #for i in range(coxeter_number(A)//2):
....: #    print(reflect_matrix(A,B(A,c),cinv*i),"\n")
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: for i in range(coxeter_number(A)//2):
....:     P=P.intersection(Polyhedron(vertices=[vector([0]*A.nrows())],rays=refl
....: ect_matrix(A,B(A,c),cinv*i).columns()))
....: matrix(map(vector,P.rays())).transpose()
....: print("\n")
....: B(A,c)
[ 0  0  0  0  0  0  0  1]
[ 0 -1  0 -1 -1  0  0 -2]
[ 0  1  0  0  0  0  0  1]
[ 0 -2 -1  0 -1  0 -1 -1]
[ 0  1  1  0  0  0  0  0]
[-1 -1 -2  0  0 -1 -1  0]
[ 1  0  1  0  0  0  0  0]
[-1  0 -1  0  0 -1  0  0]


[ 0  1  0  0  0  0  0  0]
[-1  0 -1  0  0  0  0  0]
[ 0  1  0  1  0  0  0  0]
[ 0  0 -1  0 -1  0  0  0]
[ 0  0  0  1  0  1  0  0]
[ 0  0  0  0 -1  0 -1  0]
[ 0  0  0  0  0  1  0  2]
[ 0  0  0  0  0  0 -1  0]
sage: A=CartanMatrix(['C',7])
....: c=[0,2,4,6,1,3,5]
....: cinv=list(reversed(c))
....: #for i in range(coxeter_number(A)//2):
....: #    print(reflect_matrix(A,B(A,c),cinv*i),"\n")
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: for i in range(coxeter_number(A)//2):
....:     P=P.intersection(Polyhedron(vertices=[vector([0]*A.nrows())],rays=refl
....: ect_matrix(A,B(A,c),cinv*i).columns()))
....: matrix(map(vector,P.rays())).transpose()
....: print("\n")
....: B(A,c)
[ 0  0  0  0  0  0  1]
[-1 -1  0 -1  0  0 -2]
[ 0  1  0  0  0  0  1]
[ 0 -2 -1 -1  0 -1 -1]
[ 0  1  1  0  0  0  0]
[ 0 -1 -3  0 -1 -1  0]
[ 0  0  1  0  0  0  0]


[ 0  1  0  0  0  0  0]
[-1  0 -1  0  0  0  0]
[ 0  1  0  1  0  0  0]
[ 0  0 -1  0 -1  0  0]
[ 0  0  0  1  0  1  0]
[ 0  0  0  0 -1  0 -2]
[ 0  0  0  0  0  1  0]
sage: A=CartanMatrix(['C',7])
....: c=[0,2,4,6,1,3,5]
....: cinv=list(reversed(c))
....: #for i in range(coxeter_number(A)//2):
....: #    print(reflect_matrix(A,B(A,c),cinv*i),"\n")
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: for i in range(coxeter_number(A)//2+1):
....:     P=P.intersection(Polyhedron(vertices=[vector([0]*A.nrows())],rays=refl
....: ect_matrix(A,B(A,c),cinv*i).columns()))
....: matrix(map(vector,P.rays())).transpose()
....: print("\n")
....: B(A,c)
[]


[ 0  1  0  0  0  0  0]
[-1  0 -1  0  0  0  0]
[ 0  1  0  1  0  0  0]
[ 0  0 -1  0 -1  0  0]
[ 0  0  0  1  0  1  0]
[ 0  0  0  0 -1  0 -2]
[ 0  0  0  0  0  1  0]
sage: A=CartanMatrix(['C',8])
....: c=[0,2,4,6,1,3,5,7]
....: cinv=list(reversed(c))
....: #for i in range(coxeter_number(A)//2):
....: #    print(reflect_matrix(A,B(A,c),cinv*i),"\n")
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: for i in range(coxeter_number(A)//2+1):
....:     P=P.intersection(Polyhedron(vertices=[vector([0]*A.nrows())],rays=refl
....: ect_matrix(A,B(A,c),cinv*i).columns()))
....: matrix(map(vector,P.rays())).transpose()
....: print("\n")
....: B(A,c)
[]


[ 0  1  0  0  0  0  0  0]
[-1  0 -1  0  0  0  0  0]
[ 0  1  0  1  0  0  0  0]
[ 0  0 -1  0 -1  0  0  0]
[ 0  0  0  1  0  1  0  0]
[ 0  0  0  0 -1  0 -1  0]
[ 0  0  0  0  0  1  0  2]
[ 0  0  0  0  0  0 -1  0]
sage: A=CartanMatrix(['C',8])
....: c=[0,2,4,6,1,3,5,7]
....: cinv=list(reversed(c))
....: #for i in range(coxeter_number(A)//2):
....: #    print(reflect_matrix(A,B(A,c),cinv*i),"\n")
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: for i in range(coxeter_number(A)//2):
....:     P=P.intersection(Polyhedron(vertices=[vector([0]*A.nrows())],rays=refl
....: ect_matrix(A,B(A,c),cinv*i).columns()))
....: matrix(map(vector,P.rays())).transpose()
....: print("\n")
....: B(A,c)
[ 0  0  0  0  0  0  0  1]
[ 0 -1  0 -1 -1  0  0 -2]
[ 0  1  0  0  0  0  0  1]
[ 0 -2 -1  0 -1  0 -1 -1]
[ 0  1  1  0  0  0  0  0]
[-1 -1 -2  0  0 -1 -1  0]
[ 1  0  1  0  0  0  0  0]
[-1  0 -1  0  0 -1  0  0]


[ 0  1  0  0  0  0  0  0]
[-1  0 -1  0  0  0  0  0]
[ 0  1  0  1  0  0  0  0]
[ 0  0 -1  0 -1  0  0  0]
[ 0  0  0  1  0  1  0  0]
[ 0  0  0  0 -1  0 -1  0]
[ 0  0  0  0  0  1  0  2]
[ 0  0  0  0  0  0 -1  0]
sage: A=CartanMatrix(['C',7])
....: c=[0,2,4,6,1,3,5]
....: cinv=list(reversed(c))
....: #for i in range(coxeter_number(A)//2):
....: #    print(reflect_matrix(A,B(A,c),cinv*i),"\n")
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: for i in range(coxeter_number(A)//2):
....:     P=P.intersection(Polyhedron(vertices=[vector([0]*A.nrows())],rays=refl
....: ect_matrix(A,B(A,c),cinv*i).columns()))
....: matrix(map(vector,P.rays())).transpose()
....: print("\n")
....: B(A,c)
[ 0  0  0  0  0  0  1]
[-1 -1  0 -1  0  0 -2]
[ 0  1  0  0  0  0  1]
[ 0 -2 -1 -1  0 -1 -1]
[ 0  1  1  0  0  0  0]
[ 0 -1 -3  0 -1 -1  0]
[ 0  0  1  0  0  0  0]


[ 0  1  0  0  0  0  0]
[-1  0 -1  0  0  0  0]
[ 0  1  0  1  0  0  0]
[ 0  0 -1  0 -1  0  0]
[ 0  0  0  1  0  1  0]
[ 0  0  0  0 -1  0 -2]
[ 0  0  0  0  0  1  0]
sage: A=CartanMatrix(['C',7])
....: c=[0,2,4,6,1,3,5]
....: cinv=list(reversed(c))
....: for i in range(coxeter_number(A)//2):
....:     print(reflect_matrix(A,B(A,c),cinv*i),"\n")
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: for i in range(coxeter_number(A)//2):
....:     P=P.intersection(Polyhedron(vertices=[vector([0]*A.nrows())],rays=refl
....: ect_matrix(A,B(A,c),cinv*i).columns()))
....: matrix(map(vector,P.rays())).transpose()
....: print("\n")
....: B(A,c)
[ 0  1  0  0  0  0  0]
[-1  0 -1  0  0  0  0]
[ 0  1  0  1  0  0  0]
[ 0  0 -1  0 -1  0  0]
[ 0  0  0  1  0  1  0]
[ 0  0  0  0 -1  0 -2]
[ 0  0  0  0  0  1  0] 

[-1  1 -1  1  0  0  0]
[ 1 -2  1 -1  0  0  0]
[-1  2 -2  2 -1  1  0]
[ 0 -1  1 -2  1 -1  0]
[ 0  1 -1  2 -2  3 -2]
[ 0  0  0 -1  1 -3  2]
[ 0  0  0  1 -1  2 -2] 

[ 0  0 -1  1 -1  1  0]
[ 1 -1  2 -2  1 -1  0]
[-1  1 -2  2 -2  3 -2]
[ 1 -2  2 -2  2 -3  2]
[-1  2 -2  3 -3  4 -4]
[ 0 -1  1 -3  3 -4  4]
[ 0  1 -1  2 -2  2 -2] 

[ 0  0  0  0 -1  2 -2]
[ 0  0  1 -1  2 -3  2]
[ 0  0 -1  2 -3  4 -4]
[ 1 -1  2 -3  3 -4  4]
[-1  2 -3  4 -4  4 -4]
[ 1 -3  3 -4  4 -4  4]
[-1  2 -2  2 -2  2 -2] 

[ 0  0  0  1 -1  1 -2]
[ 0  0  0 -1  2 -3  4]
[ 0  1 -1  2 -3  3 -4]
[ 0 -1  2 -3  4 -4  4]
[-1  2 -3  3 -4  4 -4]
[ 2 -3  4 -4  4 -4  4]
[-1  1 -2  2 -2  2 -2] 

[ 0  1 -1  1 -1  0  0]
[ 0 -1  1 -2  2 -1  2]
[-1  2 -2  2 -2  1 -2]
[ 1 -2  2 -2  3 -3  4]
[-1  1 -2  2 -3  3 -4]
[ 1 -1  3 -3  4 -4  4]
[ 0  0 -1  1 -2  2 -2] 

[-1  1 -1  0  0  0  0]
[ 1 -2  2 -1  1  0  0]
[-1  1 -2  1 -1  0  0]
[ 1 -1  2 -2  2 -1  2]
[ 0  0 -1  1 -2  1 -2]
[ 0  0  1 -1  3 -3  4]
[ 0  0  0  0 -1  1 -2] 

[ 0  0  0  0  0  0  1]
[-1 -1  0 -1  0  0 -2]
[ 0  1  0  0  0  0  1]
[ 0 -2 -1 -1  0 -1 -1]
[ 0  1  1  0  0  0  0]
[ 0 -1 -3  0 -1 -1  0]
[ 0  0  1  0  0  0  0]


[ 0  1  0  0  0  0  0]
[-1  0 -1  0  0  0  0]
[ 0  1  0  1  0  0  0]
[ 0  0 -1  0 -1  0  0]
[ 0  0  0  1  0  1  0]
[ 0  0  0  0 -1  0 -2]
[ 0  0  0  0  0  1  0]
sage: A=CartanMatrix(['C',7])
....: c=[0,2,4,6,1,3,5]
....: cinv=list(reversed(c))
....: for i in range(coxeter_number(A)//2+1):
....:     print(reflect_matrix(A,B(A,c),cinv*i),"\n")
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: for i in range(coxeter_number(A)//2):
....:     P=P.intersection(Polyhedron(vertices=[vector([0]*A.nrows())],rays=refl
....: ect_matrix(A,B(A,c),cinv*i).columns()))
....: matrix(map(vector,P.rays())).transpose()
....: print("\n")
....: B(A,c)
[ 0  1  0  0  0  0  0]
[-1  0 -1  0  0  0  0]
[ 0  1  0  1  0  0  0]
[ 0  0 -1  0 -1  0  0]
[ 0  0  0  1  0  1  0]
[ 0  0  0  0 -1  0 -2]
[ 0  0  0  0  0  1  0] 

[-1  1 -1  1  0  0  0]
[ 1 -2  1 -1  0  0  0]
[-1  2 -2  2 -1  1  0]
[ 0 -1  1 -2  1 -1  0]
[ 0  1 -1  2 -2  3 -2]
[ 0  0  0 -1  1 -3  2]
[ 0  0  0  1 -1  2 -2] 

[ 0  0 -1  1 -1  1  0]
[ 1 -1  2 -2  1 -1  0]
[-1  1 -2  2 -2  3 -2]
[ 1 -2  2 -2  2 -3  2]
[-1  2 -2  3 -3  4 -4]
[ 0 -1  1 -3  3 -4  4]
[ 0  1 -1  2 -2  2 -2] 

[ 0  0  0  0 -1  2 -2]
[ 0  0  1 -1  2 -3  2]
[ 0  0 -1  2 -3  4 -4]
[ 1 -1  2 -3  3 -4  4]
[-1  2 -3  4 -4  4 -4]
[ 1 -3  3 -4  4 -4  4]
[-1  2 -2  2 -2  2 -2] 

[ 0  0  0  1 -1  1 -2]
[ 0  0  0 -1  2 -3  4]
[ 0  1 -1  2 -3  3 -4]
[ 0 -1  2 -3  4 -4  4]
[-1  2 -3  3 -4  4 -4]
[ 2 -3  4 -4  4 -4  4]
[-1  1 -2  2 -2  2 -2] 

[ 0  1 -1  1 -1  0  0]
[ 0 -1  1 -2  2 -1  2]
[-1  2 -2  2 -2  1 -2]
[ 1 -2  2 -2  3 -3  4]
[-1  1 -2  2 -3  3 -4]
[ 1 -1  3 -3  4 -4  4]
[ 0  0 -1  1 -2  2 -2] 

[-1  1 -1  0  0  0  0]
[ 1 -2  2 -1  1  0  0]
[-1  1 -2  1 -1  0  0]
[ 1 -1  2 -2  2 -1  2]
[ 0  0 -1  1 -2  1 -2]
[ 0  0  1 -1  3 -3  4]
[ 0  0  0  0 -1  1 -2] 

[ 0 -1  0  0  0  0  0]
[ 1  0  1  0  0  0  0]
[ 0 -1  0 -1  0  0  0]
[ 0  0  1  0  1  0  0]
[ 0  0  0 -1  0 -1  0]
[ 0  0  0  0  1  0  2]
[ 0  0  0  0  0 -1  0] 

[ 0  0  0  0  0  0  1]
[-1 -1  0 -1  0  0 -2]
[ 0  1  0  0  0  0  1]
[ 0 -2 -1 -1  0 -1 -1]
[ 0  1  1  0  0  0  0]
[ 0 -1 -3  0 -1 -1  0]
[ 0  0  1  0  0  0  0]


[ 0  1  0  0  0  0  0]
[-1  0 -1  0  0  0  0]
[ 0  1  0  1  0  0  0]
[ 0  0 -1  0 -1  0  0]
[ 0  0  0  1  0  1  0]
[ 0  0  0  0 -1  0 -2]
[ 0  0  0  0  0  1  0]
sage: A=CartanMatrix(['C',7])
....: c=[0,2,4,6,1,3,5]
....: cinv=list(reversed(c))
....: for i in range(coxeter_number(A)//2):
....:     print(reflect_matrix(A,B(A,c),cinv*i),"\n")
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: for i in range(coxeter_number(A)//2):
....:     P=P.intersection(Polyhedron(vertices=[vector([0]*A.nrows())],rays=refl
....: ect_matrix(A,B(A,c),cinv*i).columns()))
....: matrix(map(vector,P.rays())).transpose()
....: print("\n")
....: B(A,c)
[ 0  1  0  0  0  0  0]
[-1  0 -1  0  0  0  0]
[ 0  1  0  1  0  0  0]
[ 0  0 -1  0 -1  0  0]
[ 0  0  0  1  0  1  0]
[ 0  0  0  0 -1  0 -2]
[ 0  0  0  0  0  1  0] 

[-1  1 -1  1  0  0  0]
[ 1 -2  1 -1  0  0  0]
[-1  2 -2  2 -1  1  0]
[ 0 -1  1 -2  1 -1  0]
[ 0  1 -1  2 -2  3 -2]
[ 0  0  0 -1  1 -3  2]
[ 0  0  0  1 -1  2 -2] 

[ 0  0 -1  1 -1  1  0]
[ 1 -1  2 -2  1 -1  0]
[-1  1 -2  2 -2  3 -2]
[ 1 -2  2 -2  2 -3  2]
[-1  2 -2  3 -3  4 -4]
[ 0 -1  1 -3  3 -4  4]
[ 0  1 -1  2 -2  2 -2] 

[ 0  0  0  0 -1  2 -2]
[ 0  0  1 -1  2 -3  2]
[ 0  0 -1  2 -3  4 -4]
[ 1 -1  2 -3  3 -4  4]
[-1  2 -3  4 -4  4 -4]
[ 1 -3  3 -4  4 -4  4]
[-1  2 -2  2 -2  2 -2] 

[ 0  0  0  1 -1  1 -2]
[ 0  0  0 -1  2 -3  4]
[ 0  1 -1  2 -3  3 -4]
[ 0 -1  2 -3  4 -4  4]
[-1  2 -3  3 -4  4 -4]
[ 2 -3  4 -4  4 -4  4]
[-1  1 -2  2 -2  2 -2] 

[ 0  1 -1  1 -1  0  0]
[ 0 -1  1 -2  2 -1  2]
[-1  2 -2  2 -2  1 -2]
[ 1 -2  2 -2  3 -3  4]
[-1  1 -2  2 -3  3 -4]
[ 1 -1  3 -3  4 -4  4]
[ 0  0 -1  1 -2  2 -2] 

[-1  1 -1  0  0  0  0]
[ 1 -2  2 -1  1  0  0]
[-1  1 -2  1 -1  0  0]
[ 1 -1  2 -2  2 -1  2]
[ 0  0 -1  1 -2  1 -2]
[ 0  0  1 -1  3 -3  4]
[ 0  0  0  0 -1  1 -2] 

[ 0  0  0  0  0  0  1]
[-1 -1  0 -1  0  0 -2]
[ 0  1  0  0  0  0  1]
[ 0 -2 -1 -1  0 -1 -1]
[ 0  1  1  0  0  0  0]
[ 0 -1 -3  0 -1 -1  0]
[ 0  0  1  0  0  0  0]


[ 0  1  0  0  0  0  0]
[-1  0 -1  0  0  0  0]
[ 0  1  0  1  0  0  0]
[ 0  0 -1  0 -1  0  0]
[ 0  0  0  1  0  1  0]
[ 0  0  0  0 -1  0 -2]
[ 0  0  0  0  0  1  0]
sage: A=CartanMatrix(['C',7])
....: c=[0,2,4,6,1,3,5]
....: cinv=list(reversed(c))
....: for i in range(coxeter_number(A)//2+1):
....:     print(reflect_matrix(A,B(A,c),cinv*i),"\n")
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: for i in range(coxeter_number(A)//2):
....:     P=P.intersection(Polyhedron(vertices=[vector([0]*A.nrows())],rays=refl
....: ect_matrix(A,B(A,c),cinv*i).columns()))
....: matrix(map(vector,P.rays())).transpose()
....: print("\n")
....: B(A,c)
[ 0  1  0  0  0  0  0]
[-1  0 -1  0  0  0  0]
[ 0  1  0  1  0  0  0]
[ 0  0 -1  0 -1  0  0]
[ 0  0  0  1  0  1  0]
[ 0  0  0  0 -1  0 -2]
[ 0  0  0  0  0  1  0] 

[-1  1 -1  1  0  0  0]
[ 1 -2  1 -1  0  0  0]
[-1  2 -2  2 -1  1  0]
[ 0 -1  1 -2  1 -1  0]
[ 0  1 -1  2 -2  3 -2]
[ 0  0  0 -1  1 -3  2]
[ 0  0  0  1 -1  2 -2] 

[ 0  0 -1  1 -1  1  0]
[ 1 -1  2 -2  1 -1  0]
[-1  1 -2  2 -2  3 -2]
[ 1 -2  2 -2  2 -3  2]
[-1  2 -2  3 -3  4 -4]
[ 0 -1  1 -3  3 -4  4]
[ 0  1 -1  2 -2  2 -2] 

[ 0  0  0  0 -1  2 -2]
[ 0  0  1 -1  2 -3  2]
[ 0  0 -1  2 -3  4 -4]
[ 1 -1  2 -3  3 -4  4]
[-1  2 -3  4 -4  4 -4]
[ 1 -3  3 -4  4 -4  4]
[-1  2 -2  2 -2  2 -2] 

[ 0  0  0  1 -1  1 -2]
[ 0  0  0 -1  2 -3  4]
[ 0  1 -1  2 -3  3 -4]
[ 0 -1  2 -3  4 -4  4]
[-1  2 -3  3 -4  4 -4]
[ 2 -3  4 -4  4 -4  4]
[-1  1 -2  2 -2  2 -2] 

[ 0  1 -1  1 -1  0  0]
[ 0 -1  1 -2  2 -1  2]
[-1  2 -2  2 -2  1 -2]
[ 1 -2  2 -2  3 -3  4]
[-1  1 -2  2 -3  3 -4]
[ 1 -1  3 -3  4 -4  4]
[ 0  0 -1  1 -2  2 -2] 

[-1  1 -1  0  0  0  0]
[ 1 -2  2 -1  1  0  0]
[-1  1 -2  1 -1  0  0]
[ 1 -1  2 -2  2 -1  2]
[ 0  0 -1  1 -2  1 -2]
[ 0  0  1 -1  3 -3  4]
[ 0  0  0  0 -1  1 -2] 

[ 0 -1  0  0  0  0  0]
[ 1  0  1  0  0  0  0]
[ 0 -1  0 -1  0  0  0]
[ 0  0  1  0  1  0  0]
[ 0  0  0 -1  0 -1  0]
[ 0  0  0  0  1  0  2]
[ 0  0  0  0  0 -1  0] 

[ 0  0  0  0  0  0  1]
[-1 -1  0 -1  0  0 -2]
[ 0  1  0  0  0  0  1]
[ 0 -2 -1 -1  0 -1 -1]
[ 0  1  1  0  0  0  0]
[ 0 -1 -3  0 -1 -1  0]
[ 0  0  1  0  0  0  0]


[ 0  1  0  0  0  0  0]
[-1  0 -1  0  0  0  0]
[ 0  1  0  1  0  0  0]
[ 0  0 -1  0 -1  0  0]
[ 0  0  0  1  0  1  0]
[ 0  0  0  0 -1  0 -2]
[ 0  0  0  0  0  1  0]
sage: A=CartanMatrix(['C',7])
....: c=[0,2,4,6,1,3,5]
....: cinv=list(reversed(c))
....: for i in range(coxeter_number(A)//2):
....:     print(reflect_matrix(A,B(A,c),cinv*i),"\n")
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: for i in range(coxeter_number(A)//2):
....:     P=P.intersection(Polyhedron(vertices=[vector([0]*A.nrows())],rays=refl
....: ect_matrix(A,B(A,c),cinv*i).columns()))
....: matrix(map(vector,P.rays())).transpose()
....: print("\n")
....: B(A,c)
[ 0  1  0  0  0  0  0]
[-1  0 -1  0  0  0  0]
[ 0  1  0  1  0  0  0]
[ 0  0 -1  0 -1  0  0]
[ 0  0  0  1  0  1  0]
[ 0  0  0  0 -1  0 -2]
[ 0  0  0  0  0  1  0] 

[-1  1 -1  1  0  0  0]
[ 1 -2  1 -1  0  0  0]
[-1  2 -2  2 -1  1  0]
[ 0 -1  1 -2  1 -1  0]
[ 0  1 -1  2 -2  3 -2]
[ 0  0  0 -1  1 -3  2]
[ 0  0  0  1 -1  2 -2] 

[ 0  0 -1  1 -1  1  0]
[ 1 -1  2 -2  1 -1  0]
[-1  1 -2  2 -2  3 -2]
[ 1 -2  2 -2  2 -3  2]
[-1  2 -2  3 -3  4 -4]
[ 0 -1  1 -3  3 -4  4]
[ 0  1 -1  2 -2  2 -2] 

[ 0  0  0  0 -1  2 -2]
[ 0  0  1 -1  2 -3  2]
[ 0  0 -1  2 -3  4 -4]
[ 1 -1  2 -3  3 -4  4]
[-1  2 -3  4 -4  4 -4]
[ 1 -3  3 -4  4 -4  4]
[-1  2 -2  2 -2  2 -2] 

[ 0  0  0  1 -1  1 -2]
[ 0  0  0 -1  2 -3  4]
[ 0  1 -1  2 -3  3 -4]
[ 0 -1  2 -3  4 -4  4]
[-1  2 -3  3 -4  4 -4]
[ 2 -3  4 -4  4 -4  4]
[-1  1 -2  2 -2  2 -2] 

[ 0  1 -1  1 -1  0  0]
[ 0 -1  1 -2  2 -1  2]
[-1  2 -2  2 -2  1 -2]
[ 1 -2  2 -2  3 -3  4]
[-1  1 -2  2 -3  3 -4]
[ 1 -1  3 -3  4 -4  4]
[ 0  0 -1  1 -2  2 -2] 

[-1  1 -1  0  0  0  0]
[ 1 -2  2 -1  1  0  0]
[-1  1 -2  1 -1  0  0]
[ 1 -1  2 -2  2 -1  2]
[ 0  0 -1  1 -2  1 -2]
[ 0  0  1 -1  3 -3  4]
[ 0  0  0  0 -1  1 -2] 

[ 0  0  0  0  0  0  1]
[-1 -1  0 -1  0  0 -2]
[ 0  1  0  0  0  0  1]
[ 0 -2 -1 -1  0 -1 -1]
[ 0  1  1  0  0  0  0]
[ 0 -1 -3  0 -1 -1  0]
[ 0  0  1  0  0  0  0]


[ 0  1  0  0  0  0  0]
[-1  0 -1  0  0  0  0]
[ 0  1  0  1  0  0  0]
[ 0  0 -1  0 -1  0  0]
[ 0  0  0  1  0  1  0]
[ 0  0  0  0 -1  0 -2]
[ 0  0  0  0  0  1  0]
sage: A=CartanMatrix(['C',7])
....: c=[0,2,4,6,1,3,5]
....: cinv=list(reversed(c))
....: for i in range(coxeter_number(A)//2):
....:     print(reflect_matrix(A,B(A,c),cinv*i),"\n")
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: for i in range(coxeter_number(A)//2):
....:     P=P.intersection(Polyhedron(vertices=[vector([0]*A.nrows())],rays=refl
....: ect_matrix(A,B(A,c),cinv*i).columns()))
....: matrix(map(vector,P.rays())).transpose()
....: print("\n")
....: #B(A,c)
[ 0  1  0  0  0  0  0]
[-1  0 -1  0  0  0  0]
[ 0  1  0  1  0  0  0]
[ 0  0 -1  0 -1  0  0]
[ 0  0  0  1  0  1  0]
[ 0  0  0  0 -1  0 -2]
[ 0  0  0  0  0  1  0] 

[-1  1 -1  1  0  0  0]
[ 1 -2  1 -1  0  0  0]
[-1  2 -2  2 -1  1  0]
[ 0 -1  1 -2  1 -1  0]
[ 0  1 -1  2 -2  3 -2]
[ 0  0  0 -1  1 -3  2]
[ 0  0  0  1 -1  2 -2] 

[ 0  0 -1  1 -1  1  0]
[ 1 -1  2 -2  1 -1  0]
[-1  1 -2  2 -2  3 -2]
[ 1 -2  2 -2  2 -3  2]
[-1  2 -2  3 -3  4 -4]
[ 0 -1  1 -3  3 -4  4]
[ 0  1 -1  2 -2  2 -2] 

[ 0  0  0  0 -1  2 -2]
[ 0  0  1 -1  2 -3  2]
[ 0  0 -1  2 -3  4 -4]
[ 1 -1  2 -3  3 -4  4]
[-1  2 -3  4 -4  4 -4]
[ 1 -3  3 -4  4 -4  4]
[-1  2 -2  2 -2  2 -2] 

[ 0  0  0  1 -1  1 -2]
[ 0  0  0 -1  2 -3  4]
[ 0  1 -1  2 -3  3 -4]
[ 0 -1  2 -3  4 -4  4]
[-1  2 -3  3 -4  4 -4]
[ 2 -3  4 -4  4 -4  4]
[-1  1 -2  2 -2  2 -2] 

[ 0  1 -1  1 -1  0  0]
[ 0 -1  1 -2  2 -1  2]
[-1  2 -2  2 -2  1 -2]
[ 1 -2  2 -2  3 -3  4]
[-1  1 -2  2 -3  3 -4]
[ 1 -1  3 -3  4 -4  4]
[ 0  0 -1  1 -2  2 -2] 

[-1  1 -1  0  0  0  0]
[ 1 -2  2 -1  1  0  0]
[-1  1 -2  1 -1  0  0]
[ 1 -1  2 -2  2 -1  2]
[ 0  0 -1  1 -2  1 -2]
[ 0  0  1 -1  3 -3  4]
[ 0  0  0  0 -1  1 -2] 

[ 0  0  0  0  0  0  1]
[-1 -1  0 -1  0  0 -2]
[ 0  1  0  0  0  0  1]
[ 0 -2 -1 -1  0 -1 -1]
[ 0  1  1  0  0  0  0]
[ 0 -1 -3  0 -1 -1  0]
[ 0  0  1  0  0  0  0]


sage: A=CartanMatrix(['C',7])
....: c=[0,2,4,6,1,3,5]
....: cinv=list(reversed(c))
....: for i in range(coxeter_number(A)//2):
....:     print(reflect_matrix(A,B(A,c),cinv*i),"\n")
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: for i in range(coxeter_number(A)//2):
....:     P=P.intersection(Polyhedron(vertices=[vector([0]*A.nrows())],rays=refl
....: ect_matrix(A,B(A,c),cinv*i).columns()))
....: #matrix(map(vector,P.rays())).transpose()
....: print("\n")
....: #B(A,c)
[ 0  1  0  0  0  0  0]
[-1  0 -1  0  0  0  0]
[ 0  1  0  1  0  0  0]
[ 0  0 -1  0 -1  0  0]
[ 0  0  0  1  0  1  0]
[ 0  0  0  0 -1  0 -2]
[ 0  0  0  0  0  1  0] 

[-1  1 -1  1  0  0  0]
[ 1 -2  1 -1  0  0  0]
[-1  2 -2  2 -1  1  0]
[ 0 -1  1 -2  1 -1  0]
[ 0  1 -1  2 -2  3 -2]
[ 0  0  0 -1  1 -3  2]
[ 0  0  0  1 -1  2 -2] 

[ 0  0 -1  1 -1  1  0]
[ 1 -1  2 -2  1 -1  0]
[-1  1 -2  2 -2  3 -2]
[ 1 -2  2 -2  2 -3  2]
[-1  2 -2  3 -3  4 -4]
[ 0 -1  1 -3  3 -4  4]
[ 0  1 -1  2 -2  2 -2] 

[ 0  0  0  0 -1  2 -2]
[ 0  0  1 -1  2 -3  2]
[ 0  0 -1  2 -3  4 -4]
[ 1 -1  2 -3  3 -4  4]
[-1  2 -3  4 -4  4 -4]
[ 1 -3  3 -4  4 -4  4]
[-1  2 -2  2 -2  2 -2] 

[ 0  0  0  1 -1  1 -2]
[ 0  0  0 -1  2 -3  4]
[ 0  1 -1  2 -3  3 -4]
[ 0 -1  2 -3  4 -4  4]
[-1  2 -3  3 -4  4 -4]
[ 2 -3  4 -4  4 -4  4]
[-1  1 -2  2 -2  2 -2] 

[ 0  1 -1  1 -1  0  0]
[ 0 -1  1 -2  2 -1  2]
[-1  2 -2  2 -2  1 -2]
[ 1 -2  2 -2  3 -3  4]
[-1  1 -2  2 -3  3 -4]
[ 1 -1  3 -3  4 -4  4]
[ 0  0 -1  1 -2  2 -2] 

[-1  1 -1  0  0  0  0]
[ 1 -2  2 -1  1  0  0]
[-1  1 -2  1 -1  0  0]
[ 1 -1  2 -2  2 -1  2]
[ 0  0 -1  1 -2  1 -2]
[ 0  0  1 -1  3 -3  4]
[ 0  0  0  0 -1  1 -2] 



sage: A=CartanMatrix(['C',7])
....: c=[0,2,4,6,1,3,5]
....: cinv=list(reversed(c))
....: for i in range(coxeter_number(A)//2+1):
....:     print(reflect_matrix(A,B(A,c),cinv*i),"\n")
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: for i in range(coxeter_number(A)//2):
....:     P=P.intersection(Polyhedron(vertices=[vector([0]*A.nrows())],rays=refl
....: ect_matrix(A,B(A,c),cinv*i).columns()))
....: #matrix(map(vector,P.rays())).transpose()
....: print("\n")
....: #B(A,c)
[ 0  1  0  0  0  0  0]
[-1  0 -1  0  0  0  0]
[ 0  1  0  1  0  0  0]
[ 0  0 -1  0 -1  0  0]
[ 0  0  0  1  0  1  0]
[ 0  0  0  0 -1  0 -2]
[ 0  0  0  0  0  1  0] 

[-1  1 -1  1  0  0  0]
[ 1 -2  1 -1  0  0  0]
[-1  2 -2  2 -1  1  0]
[ 0 -1  1 -2  1 -1  0]
[ 0  1 -1  2 -2  3 -2]
[ 0  0  0 -1  1 -3  2]
[ 0  0  0  1 -1  2 -2] 

[ 0  0 -1  1 -1  1  0]
[ 1 -1  2 -2  1 -1  0]
[-1  1 -2  2 -2  3 -2]
[ 1 -2  2 -2  2 -3  2]
[-1  2 -2  3 -3  4 -4]
[ 0 -1  1 -3  3 -4  4]
[ 0  1 -1  2 -2  2 -2] 

[ 0  0  0  0 -1  2 -2]
[ 0  0  1 -1  2 -3  2]
[ 0  0 -1  2 -3  4 -4]
[ 1 -1  2 -3  3 -4  4]
[-1  2 -3  4 -4  4 -4]
[ 1 -3  3 -4  4 -4  4]
[-1  2 -2  2 -2  2 -2] 

[ 0  0  0  1 -1  1 -2]
[ 0  0  0 -1  2 -3  4]
[ 0  1 -1  2 -3  3 -4]
[ 0 -1  2 -3  4 -4  4]
[-1  2 -3  3 -4  4 -4]
[ 2 -3  4 -4  4 -4  4]
[-1  1 -2  2 -2  2 -2] 

[ 0  1 -1  1 -1  0  0]
[ 0 -1  1 -2  2 -1  2]
[-1  2 -2  2 -2  1 -2]
[ 1 -2  2 -2  3 -3  4]
[-1  1 -2  2 -3  3 -4]
[ 1 -1  3 -3  4 -4  4]
[ 0  0 -1  1 -2  2 -2] 

[-1  1 -1  0  0  0  0]
[ 1 -2  2 -1  1  0  0]
[-1  1 -2  1 -1  0  0]
[ 1 -1  2 -2  2 -1  2]
[ 0  0 -1  1 -2  1 -2]
[ 0  0  1 -1  3 -3  4]
[ 0  0  0  0 -1  1 -2] 

[ 0 -1  0  0  0  0  0]
[ 1  0  1  0  0  0  0]
[ 0 -1  0 -1  0  0  0]
[ 0  0  1  0  1  0  0]
[ 0  0  0 -1  0 -1  0]
[ 0  0  0  0  1  0  2]
[ 0  0  0  0  0 -1  0] 



sage: A=CartanMatrix(['C',7])
....: c=[0,2,4,6,1,3,5]
....: cinv=list(reversed(c))
....: for i in range(coxeter_number(A)//2):
....:     print(reflect_matrix(A,B(A,c),cinv*i),"\n")
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: for i in range(coxeter_number(A)//2):
....:     P=P.intersection(Polyhedron(vertices=[vector([0]*A.nrows())],rays=refl
....: ect_matrix(A,B(A,c),cinv*i).columns()))
....: matrix(map(vector,P.rays())).transpose()
....: print("\n")
....: B(A,c)
[ 0  1  0  0  0  0  0]
[-1  0 -1  0  0  0  0]
[ 0  1  0  1  0  0  0]
[ 0  0 -1  0 -1  0  0]
[ 0  0  0  1  0  1  0]
[ 0  0  0  0 -1  0 -2]
[ 0  0  0  0  0  1  0] 

[-1  1 -1  1  0  0  0]
[ 1 -2  1 -1  0  0  0]
[-1  2 -2  2 -1  1  0]
[ 0 -1  1 -2  1 -1  0]
[ 0  1 -1  2 -2  3 -2]
[ 0  0  0 -1  1 -3  2]
[ 0  0  0  1 -1  2 -2] 

[ 0  0 -1  1 -1  1  0]
[ 1 -1  2 -2  1 -1  0]
[-1  1 -2  2 -2  3 -2]
[ 1 -2  2 -2  2 -3  2]
[-1  2 -2  3 -3  4 -4]
[ 0 -1  1 -3  3 -4  4]
[ 0  1 -1  2 -2  2 -2] 

[ 0  0  0  0 -1  2 -2]
[ 0  0  1 -1  2 -3  2]
[ 0  0 -1  2 -3  4 -4]
[ 1 -1  2 -3  3 -4  4]
[-1  2 -3  4 -4  4 -4]
[ 1 -3  3 -4  4 -4  4]
[-1  2 -2  2 -2  2 -2] 

[ 0  0  0  1 -1  1 -2]
[ 0  0  0 -1  2 -3  4]
[ 0  1 -1  2 -3  3 -4]
[ 0 -1  2 -3  4 -4  4]
[-1  2 -3  3 -4  4 -4]
[ 2 -3  4 -4  4 -4  4]
[-1  1 -2  2 -2  2 -2] 

[ 0  1 -1  1 -1  0  0]
[ 0 -1  1 -2  2 -1  2]
[-1  2 -2  2 -2  1 -2]
[ 1 -2  2 -2  3 -3  4]
[-1  1 -2  2 -3  3 -4]
[ 1 -1  3 -3  4 -4  4]
[ 0  0 -1  1 -2  2 -2] 

[-1  1 -1  0  0  0  0]
[ 1 -2  2 -1  1  0  0]
[-1  1 -2  1 -1  0  0]
[ 1 -1  2 -2  2 -1  2]
[ 0  0 -1  1 -2  1 -2]
[ 0  0  1 -1  3 -3  4]
[ 0  0  0  0 -1  1 -2] 

[ 0  0  0  0  0  0  1]
[-1 -1  0 -1  0  0 -2]
[ 0  1  0  0  0  0  1]
[ 0 -2 -1 -1  0 -1 -1]
[ 0  1  1  0  0  0  0]
[ 0 -1 -3  0 -1 -1  0]
[ 0  0  1  0  0  0  0]


[ 0  1  0  0  0  0  0]
[-1  0 -1  0  0  0  0]
[ 0  1  0  1  0  0  0]
[ 0  0 -1  0 -1  0  0]
[ 0  0  0  1  0  1  0]
[ 0  0  0  0 -1  0 -2]
[ 0  0  0  0  0  1  0]
sage: A=CartanMatrix(['C',7])
....: c=[0,2,4,6,1,3,5]
....: cinv=list(reversed(c))
....: for i in range(coxeter_number(A)//2):
....:     print(reflect_matrix(A,B(A,c),cinv*i),"\n")
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: for i in range(coxeter_number(A)//2):
....:     P=P.intersection(Polyhedron(vertices=[vector([0]*A.nrows())],rays=refl
....: ect_matrix(A,B(A,c),cinv*i).columns()))
....: print("\n")
....: matrix(map(vector,P.rays())).transpose()
....: print("\n")
....: B(A,c)
[ 0  1  0  0  0  0  0]
[-1  0 -1  0  0  0  0]
[ 0  1  0  1  0  0  0]
[ 0  0 -1  0 -1  0  0]
[ 0  0  0  1  0  1  0]
[ 0  0  0  0 -1  0 -2]
[ 0  0  0  0  0  1  0] 

[-1  1 -1  1  0  0  0]
[ 1 -2  1 -1  0  0  0]
[-1  2 -2  2 -1  1  0]
[ 0 -1  1 -2  1 -1  0]
[ 0  1 -1  2 -2  3 -2]
[ 0  0  0 -1  1 -3  2]
[ 0  0  0  1 -1  2 -2] 

[ 0  0 -1  1 -1  1  0]
[ 1 -1  2 -2  1 -1  0]
[-1  1 -2  2 -2  3 -2]
[ 1 -2  2 -2  2 -3  2]
[-1  2 -2  3 -3  4 -4]
[ 0 -1  1 -3  3 -4  4]
[ 0  1 -1  2 -2  2 -2] 

[ 0  0  0  0 -1  2 -2]
[ 0  0  1 -1  2 -3  2]
[ 0  0 -1  2 -3  4 -4]
[ 1 -1  2 -3  3 -4  4]
[-1  2 -3  4 -4  4 -4]
[ 1 -3  3 -4  4 -4  4]
[-1  2 -2  2 -2  2 -2] 

[ 0  0  0  1 -1  1 -2]
[ 0  0  0 -1  2 -3  4]
[ 0  1 -1  2 -3  3 -4]
[ 0 -1  2 -3  4 -4  4]
[-1  2 -3  3 -4  4 -4]
[ 2 -3  4 -4  4 -4  4]
[-1  1 -2  2 -2  2 -2] 

[ 0  1 -1  1 -1  0  0]
[ 0 -1  1 -2  2 -1  2]
[-1  2 -2  2 -2  1 -2]
[ 1 -2  2 -2  3 -3  4]
[-1  1 -2  2 -3  3 -4]
[ 1 -1  3 -3  4 -4  4]
[ 0  0 -1  1 -2  2 -2] 

[-1  1 -1  0  0  0  0]
[ 1 -2  2 -1  1  0  0]
[-1  1 -2  1 -1  0  0]
[ 1 -1  2 -2  2 -1  2]
[ 0  0 -1  1 -2  1 -2]
[ 0  0  1 -1  3 -3  4]
[ 0  0  0  0 -1  1 -2] 



[ 0  0  0  0  0  0  1]
[-1 -1  0 -1  0  0 -2]
[ 0  1  0  0  0  0  1]
[ 0 -2 -1 -1  0 -1 -1]
[ 0  1  1  0  0  0  0]
[ 0 -1 -3  0 -1 -1  0]
[ 0  0  1  0  0  0  0]


[ 0  1  0  0  0  0  0]
[-1  0 -1  0  0  0  0]
[ 0  1  0  1  0  0  0]
[ 0  0 -1  0 -1  0  0]
[ 0  0  0  1  0  1  0]
[ 0  0  0  0 -1  0 -2]
[ 0  0  0  0  0  1  0]
sage: A=CartanMatrix(['C',7])
....: c=[0,2,4,6,1,3,5]
....: cinv=list(reversed(c))
....: for i in range(coxeter_number(A)//2):
....:     print(reflect_matrix(A,B(A,c),cinv*i),"\n")
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: for i in range(coxeter_number(A)//2):
....:     P=P.intersection(Polyhedron(vertices=[vector([0]*A.nrows())],rays=refl
....: ect_matrix(A,B(A,c),cinv*i).columns()))
....: print("\n")
....: matrix(map(vector,P.rays())).transpose()
....: print("\n")
....: #B(A,c)
[ 0  1  0  0  0  0  0]
[-1  0 -1  0  0  0  0]
[ 0  1  0  1  0  0  0]
[ 0  0 -1  0 -1  0  0]
[ 0  0  0  1  0  1  0]
[ 0  0  0  0 -1  0 -2]
[ 0  0  0  0  0  1  0] 

[-1  1 -1  1  0  0  0]
[ 1 -2  1 -1  0  0  0]
[-1  2 -2  2 -1  1  0]
[ 0 -1  1 -2  1 -1  0]
[ 0  1 -1  2 -2  3 -2]
[ 0  0  0 -1  1 -3  2]
[ 0  0  0  1 -1  2 -2] 

[ 0  0 -1  1 -1  1  0]
[ 1 -1  2 -2  1 -1  0]
[-1  1 -2  2 -2  3 -2]
[ 1 -2  2 -2  2 -3  2]
[-1  2 -2  3 -3  4 -4]
[ 0 -1  1 -3  3 -4  4]
[ 0  1 -1  2 -2  2 -2] 

[ 0  0  0  0 -1  2 -2]
[ 0  0  1 -1  2 -3  2]
[ 0  0 -1  2 -3  4 -4]
[ 1 -1  2 -3  3 -4  4]
[-1  2 -3  4 -4  4 -4]
[ 1 -3  3 -4  4 -4  4]
[-1  2 -2  2 -2  2 -2] 

[ 0  0  0  1 -1  1 -2]
[ 0  0  0 -1  2 -3  4]
[ 0  1 -1  2 -3  3 -4]
[ 0 -1  2 -3  4 -4  4]
[-1  2 -3  3 -4  4 -4]
[ 2 -3  4 -4  4 -4  4]
[-1  1 -2  2 -2  2 -2] 

[ 0  1 -1  1 -1  0  0]
[ 0 -1  1 -2  2 -1  2]
[-1  2 -2  2 -2  1 -2]
[ 1 -2  2 -2  3 -3  4]
[-1  1 -2  2 -3  3 -4]
[ 1 -1  3 -3  4 -4  4]
[ 0  0 -1  1 -2  2 -2] 

[-1  1 -1  0  0  0  0]
[ 1 -2  2 -1  1  0  0]
[-1  1 -2  1 -1  0  0]
[ 1 -1  2 -2  2 -1  2]
[ 0  0 -1  1 -2  1 -2]
[ 0  0  1 -1  3 -3  4]
[ 0  0  0  0 -1  1 -2] 



[ 0  0  0  0  0  0  1]
[-1 -1  0 -1  0  0 -2]
[ 0  1  0  0  0  0  1]
[ 0 -2 -1 -1  0 -1 -1]
[ 0  1  1  0  0  0  0]
[ 0 -1 -3  0 -1 -1  0]
[ 0  0  1  0  0  0  0]


sage: A=CartanMatrix(['C',7])
....: c=[0,2,4,6,1,3,5]
....: cinv=list(reversed(c))
....: for i in range(coxeter_number(A)//2):
....:     print(reflect_matrix(A,B(A,c),cinv*i),"\n")
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: for i in range(coxeter_number(A)//2):
....:     P=P.intersection(Polyhedron(vertices=[vector([0]*A.nrows())],rays=refl
....: ect_matrix(A,B(A,c),cinv*i).columns()))
....: print("\n")
....: P.facets()
....: print("\n")
....: #B(A,c)
[ 0  1  0  0  0  0  0]
[-1  0 -1  0  0  0  0]
[ 0  1  0  1  0  0  0]
[ 0  0 -1  0 -1  0  0]
[ 0  0  0  1  0  1  0]
[ 0  0  0  0 -1  0 -2]
[ 0  0  0  0  0  1  0] 

[-1  1 -1  1  0  0  0]
[ 1 -2  1 -1  0  0  0]
[-1  2 -2  2 -1  1  0]
[ 0 -1  1 -2  1 -1  0]
[ 0  1 -1  2 -2  3 -2]
[ 0  0  0 -1  1 -3  2]
[ 0  0  0  1 -1  2 -2] 

[ 0  0 -1  1 -1  1  0]
[ 1 -1  2 -2  1 -1  0]
[-1  1 -2  2 -2  3 -2]
[ 1 -2  2 -2  2 -3  2]
[-1  2 -2  3 -3  4 -4]
[ 0 -1  1 -3  3 -4  4]
[ 0  1 -1  2 -2  2 -2] 

[ 0  0  0  0 -1  2 -2]
[ 0  0  1 -1  2 -3  2]
[ 0  0 -1  2 -3  4 -4]
[ 1 -1  2 -3  3 -4  4]
[-1  2 -3  4 -4  4 -4]
[ 1 -3  3 -4  4 -4  4]
[-1  2 -2  2 -2  2 -2] 

[ 0  0  0  1 -1  1 -2]
[ 0  0  0 -1  2 -3  4]
[ 0  1 -1  2 -3  3 -4]
[ 0 -1  2 -3  4 -4  4]
[-1  2 -3  3 -4  4 -4]
[ 2 -3  4 -4  4 -4  4]
[-1  1 -2  2 -2  2 -2] 

[ 0  1 -1  1 -1  0  0]
[ 0 -1  1 -2  2 -1  2]
[-1  2 -2  2 -2  1 -2]
[ 1 -2  2 -2  3 -3  4]
[-1  1 -2  2 -3  3 -4]
[ 1 -1  3 -3  4 -4  4]
[ 0  0 -1  1 -2  2 -2] 

[-1  1 -1  0  0  0  0]
[ 1 -2  2 -1  1  0  0]
[-1  1 -2  1 -1  0  0]
[ 1 -1  2 -2  2 -1  2]
[ 0  0 -1  1 -2  1 -2]
[ 0  0  1 -1  3 -3  4]
[ 0  0  0  0 -1  1 -2] 



(A 5-dimensional face of a Polyhedron in ZZ^7 defined as the convex hull of 1 vertex and 5 rays,
 A 5-dimensional face of a Polyhedron in ZZ^7 defined as the convex hull of 1 vertex and 6 rays,
 A 5-dimensional face of a Polyhedron in ZZ^7 defined as the convex hull of 1 vertex and 5 rays,
 A 5-dimensional face of a Polyhedron in ZZ^7 defined as the convex hull of 1 vertex and 5 rays,
 A 5-dimensional face of a Polyhedron in ZZ^7 defined as the convex hull of 1 vertex and 5 rays,
 A 5-dimensional face of a Polyhedron in ZZ^7 defined as the convex hull of 1 vertex and 6 rays,
 A 5-dimensional face of a Polyhedron in ZZ^7 defined as the convex hull of 1 vertex and 6 rays)


sage: A=CartanMatrix(['C',7])
....: c=[0,2,4,6,1,3,5]
....: cinv=list(reversed(c))
....: for i in range(coxeter_number(A)//2):
....:     print(reflect_matrix(A,B(A,c),cinv*i),"\n")
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: for i in range(coxeter_number(A)//2):
....:     P=P.intersection(Polyhedron(vertices=[vector([0]*A.nrows())],rays=refl
....: ect_matrix(A,B(A,c),cinv*i).columns()))
....: print("\n")
....: P.inequalities()
....: print("\n")
....: #B(A,c)
[ 0  1  0  0  0  0  0]
[-1  0 -1  0  0  0  0]
[ 0  1  0  1  0  0  0]
[ 0  0 -1  0 -1  0  0]
[ 0  0  0  1  0  1  0]
[ 0  0  0  0 -1  0 -2]
[ 0  0  0  0  0  1  0] 

[-1  1 -1  1  0  0  0]
[ 1 -2  1 -1  0  0  0]
[-1  2 -2  2 -1  1  0]
[ 0 -1  1 -2  1 -1  0]
[ 0  1 -1  2 -2  3 -2]
[ 0  0  0 -1  1 -3  2]
[ 0  0  0  1 -1  2 -2] 

[ 0  0 -1  1 -1  1  0]
[ 1 -1  2 -2  1 -1  0]
[-1  1 -2  2 -2  3 -2]
[ 1 -2  2 -2  2 -3  2]
[-1  2 -2  3 -3  4 -4]
[ 0 -1  1 -3  3 -4  4]
[ 0  1 -1  2 -2  2 -2] 

[ 0  0  0  0 -1  2 -2]
[ 0  0  1 -1  2 -3  2]
[ 0  0 -1  2 -3  4 -4]
[ 1 -1  2 -3  3 -4  4]
[-1  2 -3  4 -4  4 -4]
[ 1 -3  3 -4  4 -4  4]
[-1  2 -2  2 -2  2 -2] 

[ 0  0  0  1 -1  1 -2]
[ 0  0  0 -1  2 -3  4]
[ 0  1 -1  2 -3  3 -4]
[ 0 -1  2 -3  4 -4  4]
[-1  2 -3  3 -4  4 -4]
[ 2 -3  4 -4  4 -4  4]
[-1  1 -2  2 -2  2 -2] 

[ 0  1 -1  1 -1  0  0]
[ 0 -1  1 -2  2 -1  2]
[-1  2 -2  2 -2  1 -2]
[ 1 -2  2 -2  3 -3  4]
[-1  1 -2  2 -3  3 -4]
[ 1 -1  3 -3  4 -4  4]
[ 0  0 -1  1 -2  2 -2] 

[-1  1 -1  0  0  0  0]
[ 1 -2  2 -1  1  0  0]
[-1  1 -2  1 -1  0  0]
[ 1 -1  2 -2  2 -1  2]
[ 0  0 -1  1 -2  1 -2]
[ 0  0  1 -1  3 -3  4]
[ 0  0  0  0 -1  1 -2] 



(An inequality (1, 0, 0, 0, 0, 0, 0) x + 0 >= 0,
 An inequality (1, 0, -1, 0, 1, 0, 0) x + 0 >= 0,
 An inequality (-2, 0, 2, 0, -3, -1, 0) x + 0 >= 0,
 An inequality (0, 0, -1, -1, -1, 0, 0) x + 0 >= 0,
 An inequality (-1, -1, -1, 0, 0, 0, 0) x + 0 >= 0,
 An inequality (-1, 0, 1, 0, 0, 0, 0) x + 0 >= 0,
 An inequality (-3, -1, 2, 1, -2, -1, 0) x + 0 >= 0)


sage: A=CartanMatrix(['C',7])
....: c=[0,2,4,6,1,3,5]
....: cinv=list(reversed(c))
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: for i in range(coxeter_number(A)//2):
....:     Q=Polyhedron(vertices=[vector([0]*A.nrows())],rays=reflect_matrix(A,B(
....: A,c),cinv*i))
....:     Q.inequalities()
....:     P=P.intersection(Q)
....: print("\n")
....: P.inequalities()
....: print("\n")
....: #B(A,c)
(An inequality (-1, 0, 0, 0, 0, 0, 0) x + 0 >= 0,
 An inequality (0, 0, 0, 0, 0, 0, -1) x + 0 >= 0,
 An inequality (1, 0, -1, 0, 0, 0, 0) x + 0 >= 0,
 An inequality (0, 1, 0, 0, 0, 0, 0) x + 0 >= 0,
 An inequality (0, 0, 0, 1, 0, 0, 0) x + 0 >= 0,
 An inequality (0, 0, 0, 0, 0, 1, 0) x + 0 >= 0,
 An inequality (0, 1, 0, -1, 0, 1, 0) x + 0 >= 0)
(An inequality (0, -1, -1, 0, 0, 0, 0) x + 0 >= 0,
 An inequality (1, 0, -1, 0, 0, -1, -1) x + 0 >= 0,
 An inequality (0, 0, -2, -2, 0, 0, -1) x + 0 >= 0,
 An inequality (2, 0, -2, 0, 0, -2, -3) x + 0 >= 0,
 An inequality (2, 0, -4, -2, 0, 0, -1) x + 0 >= 0,
 An inequality (-1, -1, -1, 0, 0, 0, 0) x + 0 >= 0,
 An inequality (-1, -1, 0, 1, 0, -1, -1) x + 0 >= 0)
(An inequality (0, 0, 0, -1, -1, 0, 0) x + 0 >= 0,
 An inequality (-2, -2, 0, 0, -2, -2, -1) x + 0 >= 0,
 An inequality (-1, 0, 0, -1, -2, -1, 0) x + 0 >= 0,
 An inequality (0, 0, 0, -2, -6, -2, 1) x + 0 >= 0,
 An inequality (-2, 0, 0, -2, -6, -4, -1) x + 0 >= 0,
 An inequality (-4, -2, 0, -2, -4, -2, -1) x + 0 >= 0,
 An inequality (-2, -2, 0, -2, -4, 0, 1) x + 0 >= 0)
(An inequality (2, 0, -2, -1, 0, -1, -1) x + 0 >= 0,
 An inequality (0, -1, -2, -1, 0, -1, -1) x + 0 >= 0,
 An inequality (0, 0, 0, 0, 0, -1, -1) x + 0 >= 0,
 An inequality (2, 0, -2, -2, 0, -2, -3) x + 0 >= 0,
 An inequality (0, 0, -4, -4, 0, -2, -3) x + 0 >= 0,
 An inequality (1, -1, -4, -2, 0, -2, -2) x + 0 >= 0,
 An inequality (2, -1, -3, -1, 0, -2, -2) x + 0 >= 0)
(An inequality (1, -1, -2, -1, 0, -1, -1) x + 0 >= 0,
 An inequality (2, 0, -2, 0, 0, -2, -1) x + 0 >= 0,
 An inequality (0, 0, -1, -1, 0, -1, -1) x + 0 >= 0,
 An inequality (2, 0, -2, 0, 0, -4, -3) x + 0 >= 0,
 An inequality (2, 0, -3, -2, 0, -2, -2) x + 0 >= 0,
 An inequality (1, -2, -4, -2, 0, -2, -2) x + 0 >= 0,
 An inequality (0, -4, -4, 0, 0, -4, -3) x + 0 >= 0)
(An inequality (0, 0, 0, -2, -2, -2, -1) x + 0 >= 0,
 An inequality (-1, -1, 0, 0, -1, -1, 0) x + 0 >= 0,
 An inequality (-2, 0, 0, -2, -2, 0, 1) x + 0 >= 0,
 An inequality (0, 0, 0, -4, -6, -2, 1) x + 0 >= 0,
 An inequality (-2, 0, 0, -2, -4, -2, 1) x + 0 >= 0,
 An inequality (-4, -2, 0, -2, -4, -4, -1) x + 0 >= 0,
 An inequality (-2, -2, 0, -4, -6, -4, -1) x + 0 >= 0)
(An inequality (1, 0, -1, -1, 0, 0, 0) x + 0 >= 0,
 An inequality (-1, -1, 0, 0, 0, 0, 0) x + 0 >= 0,
 An inequality (0, 0, 0, 0, 0, -2, -1) x + 0 >= 0,
 An inequality (2, 0, -2, -2, 0, -4, -3) x + 0 >= 0,
 An inequality (-1, 0, 0, -1, 0, -1, -1) x + 0 >= 0,
 An inequality (-1, -1, -1, -1, 0, 0, 0) x + 0 >= 0,
 An inequality (2, -2, -4, -2, 0, -2, -1) x + 0 >= 0)


()


sage: A=CartanMatrix(['C',7])
....: c=[0,2,4,6,1,3,5]
....: cinv=list(reversed(c))
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],rays=B(A,c).columns())
....: for i in range(coxeter_number(A)//2):
....:     Q=Polyhedron(vertices=[vector([0]*A.nrows())],rays=reflect_matrix(A,B(
....: A,c),cinv*i))
....:     Q.inequalities()
....:     print("\n")
....:     P=P.intersection(Q)
....: print("\n")
....: P.inequalities()
....: print("\n")
....: #B(A,c)
(An inequality (-1, 0, 0, 0, 0, 0, 0) x + 0 >= 0,
 An inequality (0, 0, 0, 0, 0, 0, -1) x + 0 >= 0,
 An inequality (1, 0, -1, 0, 0, 0, 0) x + 0 >= 0,
 An inequality (0, 1, 0, 0, 0, 0, 0) x + 0 >= 0,
 An inequality (0, 0, 0, 1, 0, 0, 0) x + 0 >= 0,
 An inequality (0, 0, 0, 0, 0, 1, 0) x + 0 >= 0,
 An inequality (0, 1, 0, -1, 0, 1, 0) x + 0 >= 0)


(An inequality (0, -1, -1, 0, 0, 0, 0) x + 0 >= 0,
 An inequality (1, 0, -1, 0, 0, -1, -1) x + 0 >= 0,
 An inequality (0, 0, -2, -2, 0, 0, -1) x + 0 >= 0,
 An inequality (2, 0, -2, 0, 0, -2, -3) x + 0 >= 0,
 An inequality (2, 0, -4, -2, 0, 0, -1) x + 0 >= 0,
 An inequality (-1, -1, -1, 0, 0, 0, 0) x + 0 >= 0,
 An inequality (-1, -1, 0, 1, 0, -1, -1) x + 0 >= 0)


(An inequality (0, 0, 0, -1, -1, 0, 0) x + 0 >= 0,
 An inequality (-2, -2, 0, 0, -2, -2, -1) x + 0 >= 0,
 An inequality (-1, 0, 0, -1, -2, -1, 0) x + 0 >= 0,
 An inequality (0, 0, 0, -2, -6, -2, 1) x + 0 >= 0,
 An inequality (-2, 0, 0, -2, -6, -4, -1) x + 0 >= 0,
 An inequality (-4, -2, 0, -2, -4, -2, -1) x + 0 >= 0,
 An inequality (-2, -2, 0, -2, -4, 0, 1) x + 0 >= 0)


(An inequality (2, 0, -2, -1, 0, -1, -1) x + 0 >= 0,
 An inequality (0, -1, -2, -1, 0, -1, -1) x + 0 >= 0,
 An inequality (0, 0, 0, 0, 0, -1, -1) x + 0 >= 0,
 An inequality (2, 0, -2, -2, 0, -2, -3) x + 0 >= 0,
 An inequality (0, 0, -4, -4, 0, -2, -3) x + 0 >= 0,
 An inequality (1, -1, -4, -2, 0, -2, -2) x + 0 >= 0,
 An inequality (2, -1, -3, -1, 0, -2, -2) x + 0 >= 0)


(An inequality (1, -1, -2, -1, 0, -1, -1) x + 0 >= 0,
 An inequality (2, 0, -2, 0, 0, -2, -1) x + 0 >= 0,
 An inequality (0, 0, -1, -1, 0, -1, -1) x + 0 >= 0,
 An inequality (2, 0, -2, 0, 0, -4, -3) x + 0 >= 0,
 An inequality (2, 0, -3, -2, 0, -2, -2) x + 0 >= 0,
 An inequality (1, -2, -4, -2, 0, -2, -2) x + 0 >= 0,
 An inequality (0, -4, -4, 0, 0, -4, -3) x + 0 >= 0)


(An inequality (0, 0, 0, -2, -2, -2, -1) x + 0 >= 0,
 An inequality (-1, -1, 0, 0, -1, -1, 0) x + 0 >= 0,
 An inequality (-2, 0, 0, -2, -2, 0, 1) x + 0 >= 0,
 An inequality (0, 0, 0, -4, -6, -2, 1) x + 0 >= 0,
 An inequality (-2, 0, 0, -2, -4, -2, 1) x + 0 >= 0,
 An inequality (-4, -2, 0, -2, -4, -4, -1) x + 0 >= 0,
 An inequality (-2, -2, 0, -4, -6, -4, -1) x + 0 >= 0)


(An inequality (1, 0, -1, -1, 0, 0, 0) x + 0 >= 0,
 An inequality (-1, -1, 0, 0, 0, 0, 0) x + 0 >= 0,
 An inequality (0, 0, 0, 0, 0, -2, -1) x + 0 >= 0,
 An inequality (2, 0, -2, -2, 0, -4, -3) x + 0 >= 0,
 An inequality (-1, 0, 0, -1, 0, -1, -1) x + 0 >= 0,
 An inequality (-1, -1, -1, -1, 0, 0, 0) x + 0 >= 0,
 An inequality (2, -2, -4, -2, 0, -2, -1) x + 0 >= 0)




()


sage: A=CartanMatrix(['C',7])
....: c=[0,2,4,6,1,3,5]
....: cinv=list(reversed(c))
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],lines=identity_matrix(A.nrow
....: s()).columns())
....: for i in range(coxeter_number(A)//2):
....:     Q=Polyhedron(vertices=[vector([0]*A.nrows())],rays=reflect_matrix(A,B(
....: A,c),cinv*i))
....:     Q.inequalities()
....:     print("\n")
....:     P=P.intersection(Q)
....: print("\n")
....: P.inequalities()
....: print("\n")
....: #B(A,c)
(An inequality (-1, 0, 0, 0, 0, 0, 0) x + 0 >= 0,
 An inequality (0, 0, 0, 0, 0, 0, -1) x + 0 >= 0,
 An inequality (1, 0, -1, 0, 0, 0, 0) x + 0 >= 0,
 An inequality (0, 1, 0, 0, 0, 0, 0) x + 0 >= 0,
 An inequality (0, 0, 0, 1, 0, 0, 0) x + 0 >= 0,
 An inequality (0, 0, 0, 0, 0, 1, 0) x + 0 >= 0,
 An inequality (0, 1, 0, -1, 0, 1, 0) x + 0 >= 0)


(An inequality (0, -1, -1, 0, 0, 0, 0) x + 0 >= 0,
 An inequality (1, 0, -1, 0, 0, -1, -1) x + 0 >= 0,
 An inequality (0, 0, -2, -2, 0, 0, -1) x + 0 >= 0,
 An inequality (2, 0, -2, 0, 0, -2, -3) x + 0 >= 0,
 An inequality (2, 0, -4, -2, 0, 0, -1) x + 0 >= 0,
 An inequality (-1, -1, -1, 0, 0, 0, 0) x + 0 >= 0,
 An inequality (-1, -1, 0, 1, 0, -1, -1) x + 0 >= 0)


(An inequality (0, 0, 0, -1, -1, 0, 0) x + 0 >= 0,
 An inequality (-2, -2, 0, 0, -2, -2, -1) x + 0 >= 0,
 An inequality (-1, 0, 0, -1, -2, -1, 0) x + 0 >= 0,
 An inequality (0, 0, 0, -2, -6, -2, 1) x + 0 >= 0,
 An inequality (-2, 0, 0, -2, -6, -4, -1) x + 0 >= 0,
 An inequality (-4, -2, 0, -2, -4, -2, -1) x + 0 >= 0,
 An inequality (-2, -2, 0, -2, -4, 0, 1) x + 0 >= 0)


(An inequality (2, 0, -2, -1, 0, -1, -1) x + 0 >= 0,
 An inequality (0, -1, -2, -1, 0, -1, -1) x + 0 >= 0,
 An inequality (0, 0, 0, 0, 0, -1, -1) x + 0 >= 0,
 An inequality (2, 0, -2, -2, 0, -2, -3) x + 0 >= 0,
 An inequality (0, 0, -4, -4, 0, -2, -3) x + 0 >= 0,
 An inequality (1, -1, -4, -2, 0, -2, -2) x + 0 >= 0,
 An inequality (2, -1, -3, -1, 0, -2, -2) x + 0 >= 0)


(An inequality (1, -1, -2, -1, 0, -1, -1) x + 0 >= 0,
 An inequality (2, 0, -2, 0, 0, -2, -1) x + 0 >= 0,
 An inequality (0, 0, -1, -1, 0, -1, -1) x + 0 >= 0,
 An inequality (2, 0, -2, 0, 0, -4, -3) x + 0 >= 0,
 An inequality (2, 0, -3, -2, 0, -2, -2) x + 0 >= 0,
 An inequality (1, -2, -4, -2, 0, -2, -2) x + 0 >= 0,
 An inequality (0, -4, -4, 0, 0, -4, -3) x + 0 >= 0)


(An inequality (0, 0, 0, -2, -2, -2, -1) x + 0 >= 0,
 An inequality (-1, -1, 0, 0, -1, -1, 0) x + 0 >= 0,
 An inequality (-2, 0, 0, -2, -2, 0, 1) x + 0 >= 0,
 An inequality (0, 0, 0, -4, -6, -2, 1) x + 0 >= 0,
 An inequality (-2, 0, 0, -2, -4, -2, 1) x + 0 >= 0,
 An inequality (-4, -2, 0, -2, -4, -4, -1) x + 0 >= 0,
 An inequality (-2, -2, 0, -4, -6, -4, -1) x + 0 >= 0)


(An inequality (1, 0, -1, -1, 0, 0, 0) x + 0 >= 0,
 An inequality (-1, -1, 0, 0, 0, 0, 0) x + 0 >= 0,
 An inequality (0, 0, 0, 0, 0, -2, -1) x + 0 >= 0,
 An inequality (2, 0, -2, -2, 0, -4, -3) x + 0 >= 0,
 An inequality (-1, 0, 0, -1, 0, -1, -1) x + 0 >= 0,
 An inequality (-1, -1, -1, -1, 0, 0, 0) x + 0 >= 0,
 An inequality (2, -2, -4, -2, 0, -2, -1) x + 0 >= 0)




(An inequality (1, 0, -1, -1, 0, 0, 0) x + 0 >= 0,
 An inequality (0, 1, 0, 0, 0, 0, 0) x + 0 >= 0,
 An inequality (0, 1, 0, -1, 0, 1, 0) x + 0 >= 0,
 An inequality (0, 0, 0, 1, 0, 0, 0) x + 0 >= 0,
 An inequality (-1, -1, 0, 0, 0, 0, 0) x + 0 >= 0,
 An inequality (0, 0, 0, 0, 0, 1, 0) x + 0 >= 0,
 An inequality (-1, 0, 1, 0, -1, -1, 0) x + 0 >= 0)


sage: A=CartanMatrix(['C',7])
....: c=[0,2,4,6,1,3,5]
....: cinv=list(reversed(c))
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],lines=identity_matrix(A.nrow
....: s()).columns())
....: for i in range(coxeter_number(A)//2):
....:     Q=Polyhedron(vertices=[vector([0]*A.nrows())],rays=reflect_matrix(A,B(
....: A,c),cinv*i))
....:     Q.inequalities()
....:     Qspan=Polyhedron(vertices=[vector([0]*A.nrows())],lines=reflect_matrix
....: (A,B(A,c),cinv*i))
....:     QSpan.inequalities()
....:     print("\n")
....:     P=P.intersection(Q)
....: print("\n")
....: P.inequalities()
....: print("\n")
....: #B(A,c)
(An inequality (-1, 0, 0, 0, 0, 0, 0) x + 0 >= 0,
 An inequality (0, 0, 0, 0, 0, 0, -1) x + 0 >= 0,
 An inequality (1, 0, -1, 0, 0, 0, 0) x + 0 >= 0,
 An inequality (0, 1, 0, 0, 0, 0, 0) x + 0 >= 0,
 An inequality (0, 0, 0, 1, 0, 0, 0) x + 0 >= 0,
 An inequality (0, 0, 0, 0, 0, 1, 0) x + 0 >= 0,
 An inequality (0, 1, 0, -1, 0, 1, 0) x + 0 >= 0)
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
Cell In [1383], line 9
      7 Q.inequalities()
      8 Qspan=Polyhedron(vertices=[vector([Integer(0)]*A.nrows())],lines=reflect_matrix(A,B(A,c),cinv*i))
----> 9 QSpan.inequalities()
     10 print("\n")
     11 P=P.intersection(Q)

NameError: name 'QSpan' is not defined
sage: A=CartanMatrix(['C',7])
....: c=[0,2,4,6,1,3,5]
....: cinv=list(reversed(c))
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],lines=identity_matrix(A.nrow
....: s()).columns())
....: for i in range(coxeter_number(A)//2):
....:     Q=Polyhedron(vertices=[vector([0]*A.nrows())],rays=reflect_matrix(A,B(
....: A,c),cinv*i))
....:     Q.inequalities()
....:     Qspan=Polyhedron(vertices=[vector([0]*A.nrows())],lines=reflect_matrix
....: (A,B(A,c),cinv*i))
....:     Qspan.inequalities()
....:     print("\n")
....:     P=P.intersection(Q)
....: print("\n")
....: P.inequalities()
....: print("\n")
....: #B(A,c)
(An inequality (-1, 0, 0, 0, 0, 0, 0) x + 0 >= 0,
 An inequality (0, 0, 0, 0, 0, 0, -1) x + 0 >= 0,
 An inequality (1, 0, -1, 0, 0, 0, 0) x + 0 >= 0,
 An inequality (0, 1, 0, 0, 0, 0, 0) x + 0 >= 0,
 An inequality (0, 0, 0, 1, 0, 0, 0) x + 0 >= 0,
 An inequality (0, 0, 0, 0, 0, 1, 0) x + 0 >= 0,
 An inequality (0, 1, 0, -1, 0, 1, 0) x + 0 >= 0)
()


(An inequality (0, -1, -1, 0, 0, 0, 0) x + 0 >= 0,
 An inequality (1, 0, -1, 0, 0, -1, -1) x + 0 >= 0,
 An inequality (0, 0, -2, -2, 0, 0, -1) x + 0 >= 0,
 An inequality (2, 0, -2, 0, 0, -2, -3) x + 0 >= 0,
 An inequality (2, 0, -4, -2, 0, 0, -1) x + 0 >= 0,
 An inequality (-1, -1, -1, 0, 0, 0, 0) x + 0 >= 0,
 An inequality (-1, -1, 0, 1, 0, -1, -1) x + 0 >= 0)
()


(An inequality (0, 0, 0, -1, -1, 0, 0) x + 0 >= 0,
 An inequality (-2, -2, 0, 0, -2, -2, -1) x + 0 >= 0,
 An inequality (-1, 0, 0, -1, -2, -1, 0) x + 0 >= 0,
 An inequality (0, 0, 0, -2, -6, -2, 1) x + 0 >= 0,
 An inequality (-2, 0, 0, -2, -6, -4, -1) x + 0 >= 0,
 An inequality (-4, -2, 0, -2, -4, -2, -1) x + 0 >= 0,
 An inequality (-2, -2, 0, -2, -4, 0, 1) x + 0 >= 0)
()


(An inequality (2, 0, -2, -1, 0, -1, -1) x + 0 >= 0,
 An inequality (0, -1, -2, -1, 0, -1, -1) x + 0 >= 0,
 An inequality (0, 0, 0, 0, 0, -1, -1) x + 0 >= 0,
 An inequality (2, 0, -2, -2, 0, -2, -3) x + 0 >= 0,
 An inequality (0, 0, -4, -4, 0, -2, -3) x + 0 >= 0,
 An inequality (1, -1, -4, -2, 0, -2, -2) x + 0 >= 0,
 An inequality (2, -1, -3, -1, 0, -2, -2) x + 0 >= 0)
()


(An inequality (1, -1, -2, -1, 0, -1, -1) x + 0 >= 0,
 An inequality (2, 0, -2, 0, 0, -2, -1) x + 0 >= 0,
 An inequality (0, 0, -1, -1, 0, -1, -1) x + 0 >= 0,
 An inequality (2, 0, -2, 0, 0, -4, -3) x + 0 >= 0,
 An inequality (2, 0, -3, -2, 0, -2, -2) x + 0 >= 0,
 An inequality (1, -2, -4, -2, 0, -2, -2) x + 0 >= 0,
 An inequality (0, -4, -4, 0, 0, -4, -3) x + 0 >= 0)
()


(An inequality (0, 0, 0, -2, -2, -2, -1) x + 0 >= 0,
 An inequality (-1, -1, 0, 0, -1, -1, 0) x + 0 >= 0,
 An inequality (-2, 0, 0, -2, -2, 0, 1) x + 0 >= 0,
 An inequality (0, 0, 0, -4, -6, -2, 1) x + 0 >= 0,
 An inequality (-2, 0, 0, -2, -4, -2, 1) x + 0 >= 0,
 An inequality (-4, -2, 0, -2, -4, -4, -1) x + 0 >= 0,
 An inequality (-2, -2, 0, -4, -6, -4, -1) x + 0 >= 0)
()


(An inequality (1, 0, -1, -1, 0, 0, 0) x + 0 >= 0,
 An inequality (-1, -1, 0, 0, 0, 0, 0) x + 0 >= 0,
 An inequality (0, 0, 0, 0, 0, -2, -1) x + 0 >= 0,
 An inequality (2, 0, -2, -2, 0, -4, -3) x + 0 >= 0,
 An inequality (-1, 0, 0, -1, 0, -1, -1) x + 0 >= 0,
 An inequality (-1, -1, -1, -1, 0, 0, 0) x + 0 >= 0,
 An inequality (2, -2, -4, -2, 0, -2, -1) x + 0 >= 0)
()




(An inequality (1, 0, -1, -1, 0, 0, 0) x + 0 >= 0,
 An inequality (0, 1, 0, 0, 0, 0, 0) x + 0 >= 0,
 An inequality (0, 1, 0, -1, 0, 1, 0) x + 0 >= 0,
 An inequality (0, 0, 0, 1, 0, 0, 0) x + 0 >= 0,
 An inequality (-1, -1, 0, 0, 0, 0, 0) x + 0 >= 0,
 An inequality (0, 0, 0, 0, 0, 1, 0) x + 0 >= 0,
 An inequality (-1, 0, 1, 0, -1, -1, 0) x + 0 >= 0)


sage: B(A,c)
[ 0  1  0  0  0  0  0]
[-1  0 -1  0  0  0  0]
[ 0  1  0  1  0  0  0]
[ 0  0 -1  0 -1  0  0]
[ 0  0  0  1  0  1  0]
[ 0  0  0  0 -1  0 -2]
[ 0  0  0  0  0  1  0]
sage: A=CartanMatrix(['C',7])
....: c=[0,2,4,6,1,3,5]
....: cinv=list(reversed(c))
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],lines=identity_matrix(A.nrow
....: s()).columns())
....: for i in range(coxeter_number(A)//2):
....:     Q=Polyhedron(vertices=[vector([0]*A.nrows())],rays=reflect_matrix(A,B(
....: A,c),cinv*i))
....:     Q.Hrepresentation()
....:     print("\n")
....:     P=P.intersection(Q)
....: print("\n")
....: P.inequalities()
....: print("\n")
....: #B(A,c)
(An equation (2, 0, -2, 0, 2, 0, -1) x + 0 == 0,
 An inequality (-1, 0, 0, 0, 0, 0, 0) x + 0 >= 0,
 An inequality (0, 0, 0, 0, 0, 0, -1) x + 0 >= 0,
 An inequality (1, 0, -1, 0, 0, 0, 0) x + 0 >= 0,
 An inequality (0, 1, 0, 0, 0, 0, 0) x + 0 >= 0,
 An inequality (0, 0, 0, 1, 0, 0, 0) x + 0 >= 0,
 An inequality (0, 0, 0, 0, 0, 1, 0) x + 0 >= 0,
 An inequality (0, 1, 0, -1, 0, 1, 0) x + 0 >= 0)


(An equation (2, 0, -2, 0, 2, 0, -1) x + 0 == 0,
 An inequality (0, -1, -1, 0, 0, 0, 0) x + 0 >= 0,
 An inequality (1, 0, -1, 0, 0, -1, -1) x + 0 >= 0,
 An inequality (0, 0, -2, -2, 0, 0, -1) x + 0 >= 0,
 An inequality (2, 0, -2, 0, 0, -2, -3) x + 0 >= 0,
 An inequality (2, 0, -4, -2, 0, 0, -1) x + 0 >= 0,
 An inequality (-1, -1, -1, 0, 0, 0, 0) x + 0 >= 0,
 An inequality (-1, -1, 0, 1, 0, -1, -1) x + 0 >= 0)


(An equation (2, 0, -2, 0, 2, 0, -1) x + 0 == 0,
 An inequality (0, 0, 0, -1, -1, 0, 0) x + 0 >= 0,
 An inequality (-2, -2, 0, 0, -2, -2, -1) x + 0 >= 0,
 An inequality (-1, 0, 0, -1, -2, -1, 0) x + 0 >= 0,
 An inequality (0, 0, 0, -2, -6, -2, 1) x + 0 >= 0,
 An inequality (-2, 0, 0, -2, -6, -4, -1) x + 0 >= 0,
 An inequality (-4, -2, 0, -2, -4, -2, -1) x + 0 >= 0,
 An inequality (-2, -2, 0, -2, -4, 0, 1) x + 0 >= 0)


(An equation (2, 0, -2, 0, 2, 0, -1) x + 0 == 0,
 An inequality (2, 0, -2, -1, 0, -1, -1) x + 0 >= 0,
 An inequality (0, -1, -2, -1, 0, -1, -1) x + 0 >= 0,
 An inequality (0, 0, 0, 0, 0, -1, -1) x + 0 >= 0,
 An inequality (2, 0, -2, -2, 0, -2, -3) x + 0 >= 0,
 An inequality (0, 0, -4, -4, 0, -2, -3) x + 0 >= 0,
 An inequality (1, -1, -4, -2, 0, -2, -2) x + 0 >= 0,
 An inequality (2, -1, -3, -1, 0, -2, -2) x + 0 >= 0)


(An equation (2, 0, -2, 0, 2, 0, -1) x + 0 == 0,
 An inequality (1, -1, -2, -1, 0, -1, -1) x + 0 >= 0,
 An inequality (2, 0, -2, 0, 0, -2, -1) x + 0 >= 0,
 An inequality (0, 0, -1, -1, 0, -1, -1) x + 0 >= 0,
 An inequality (2, 0, -2, 0, 0, -4, -3) x + 0 >= 0,
 An inequality (2, 0, -3, -2, 0, -2, -2) x + 0 >= 0,
 An inequality (1, -2, -4, -2, 0, -2, -2) x + 0 >= 0,
 An inequality (0, -4, -4, 0, 0, -4, -3) x + 0 >= 0)


(An equation (2, 0, -2, 0, 2, 0, -1) x + 0 == 0,
 An inequality (0, 0, 0, -2, -2, -2, -1) x + 0 >= 0,
 An inequality (-1, -1, 0, 0, -1, -1, 0) x + 0 >= 0,
 An inequality (-2, 0, 0, -2, -2, 0, 1) x + 0 >= 0,
 An inequality (0, 0, 0, -4, -6, -2, 1) x + 0 >= 0,
 An inequality (-2, 0, 0, -2, -4, -2, 1) x + 0 >= 0,
 An inequality (-4, -2, 0, -2, -4, -4, -1) x + 0 >= 0,
 An inequality (-2, -2, 0, -4, -6, -4, -1) x + 0 >= 0)


(An equation (2, 0, -2, 0, 2, 0, -1) x + 0 == 0,
 An inequality (1, 0, -1, -1, 0, 0, 0) x + 0 >= 0,
 An inequality (-1, -1, 0, 0, 0, 0, 0) x + 0 >= 0,
 An inequality (0, 0, 0, 0, 0, -2, -1) x + 0 >= 0,
 An inequality (2, 0, -2, -2, 0, -4, -3) x + 0 >= 0,
 An inequality (-1, 0, 0, -1, 0, -1, -1) x + 0 >= 0,
 An inequality (-1, -1, -1, -1, 0, 0, 0) x + 0 >= 0,
 An inequality (2, -2, -4, -2, 0, -2, -1) x + 0 >= 0)




(An inequality (1, 0, -1, -1, 0, 0, 0) x + 0 >= 0,
 An inequality (0, 1, 0, 0, 0, 0, 0) x + 0 >= 0,
 An inequality (0, 1, 0, -1, 0, 1, 0) x + 0 >= 0,
 An inequality (0, 0, 0, 1, 0, 0, 0) x + 0 >= 0,
 An inequality (-1, -1, 0, 0, 0, 0, 0) x + 0 >= 0,
 An inequality (0, 0, 0, 0, 0, 1, 0) x + 0 >= 0,
 An inequality (-1, 0, 1, 0, -1, -1, 0) x + 0 >= 0)


sage: A=CartanMatrix(['C',7])
....: c=[0,2,4,6,1,3,5]
....: cinv=list(reversed(c))
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],lines=identity_matrix(A.nrow
....: s()).columns())
....: for i in range(coxeter_number(A)//2):
....:     Q=Polyhedron(vertices=[vector([0]*A.nrows())],rays=reflect_matrix(A,B(
....: A,c),cinv*i))
....:     Q.Hrepresentation()
....:     print("\n")
....:     P=P.intersection(Q)
....: print("\n")
....: P.Hrepresentation()
....: print("\n")
....: #B(A,c)
(An equation (2, 0, -2, 0, 2, 0, -1) x + 0 == 0,
 An inequality (-1, 0, 0, 0, 0, 0, 0) x + 0 >= 0,
 An inequality (0, 0, 0, 0, 0, 0, -1) x + 0 >= 0,
 An inequality (1, 0, -1, 0, 0, 0, 0) x + 0 >= 0,
 An inequality (0, 1, 0, 0, 0, 0, 0) x + 0 >= 0,
 An inequality (0, 0, 0, 1, 0, 0, 0) x + 0 >= 0,
 An inequality (0, 0, 0, 0, 0, 1, 0) x + 0 >= 0,
 An inequality (0, 1, 0, -1, 0, 1, 0) x + 0 >= 0)


(An equation (2, 0, -2, 0, 2, 0, -1) x + 0 == 0,
 An inequality (0, -1, -1, 0, 0, 0, 0) x + 0 >= 0,
 An inequality (1, 0, -1, 0, 0, -1, -1) x + 0 >= 0,
 An inequality (0, 0, -2, -2, 0, 0, -1) x + 0 >= 0,
 An inequality (2, 0, -2, 0, 0, -2, -3) x + 0 >= 0,
 An inequality (2, 0, -4, -2, 0, 0, -1) x + 0 >= 0,
 An inequality (-1, -1, -1, 0, 0, 0, 0) x + 0 >= 0,
 An inequality (-1, -1, 0, 1, 0, -1, -1) x + 0 >= 0)


(An equation (2, 0, -2, 0, 2, 0, -1) x + 0 == 0,
 An inequality (0, 0, 0, -1, -1, 0, 0) x + 0 >= 0,
 An inequality (-2, -2, 0, 0, -2, -2, -1) x + 0 >= 0,
 An inequality (-1, 0, 0, -1, -2, -1, 0) x + 0 >= 0,
 An inequality (0, 0, 0, -2, -6, -2, 1) x + 0 >= 0,
 An inequality (-2, 0, 0, -2, -6, -4, -1) x + 0 >= 0,
 An inequality (-4, -2, 0, -2, -4, -2, -1) x + 0 >= 0,
 An inequality (-2, -2, 0, -2, -4, 0, 1) x + 0 >= 0)


(An equation (2, 0, -2, 0, 2, 0, -1) x + 0 == 0,
 An inequality (2, 0, -2, -1, 0, -1, -1) x + 0 >= 0,
 An inequality (0, -1, -2, -1, 0, -1, -1) x + 0 >= 0,
 An inequality (0, 0, 0, 0, 0, -1, -1) x + 0 >= 0,
 An inequality (2, 0, -2, -2, 0, -2, -3) x + 0 >= 0,
 An inequality (0, 0, -4, -4, 0, -2, -3) x + 0 >= 0,
 An inequality (1, -1, -4, -2, 0, -2, -2) x + 0 >= 0,
 An inequality (2, -1, -3, -1, 0, -2, -2) x + 0 >= 0)


(An equation (2, 0, -2, 0, 2, 0, -1) x + 0 == 0,
 An inequality (1, -1, -2, -1, 0, -1, -1) x + 0 >= 0,
 An inequality (2, 0, -2, 0, 0, -2, -1) x + 0 >= 0,
 An inequality (0, 0, -1, -1, 0, -1, -1) x + 0 >= 0,
 An inequality (2, 0, -2, 0, 0, -4, -3) x + 0 >= 0,
 An inequality (2, 0, -3, -2, 0, -2, -2) x + 0 >= 0,
 An inequality (1, -2, -4, -2, 0, -2, -2) x + 0 >= 0,
 An inequality (0, -4, -4, 0, 0, -4, -3) x + 0 >= 0)


(An equation (2, 0, -2, 0, 2, 0, -1) x + 0 == 0,
 An inequality (0, 0, 0, -2, -2, -2, -1) x + 0 >= 0,
 An inequality (-1, -1, 0, 0, -1, -1, 0) x + 0 >= 0,
 An inequality (-2, 0, 0, -2, -2, 0, 1) x + 0 >= 0,
 An inequality (0, 0, 0, -4, -6, -2, 1) x + 0 >= 0,
 An inequality (-2, 0, 0, -2, -4, -2, 1) x + 0 >= 0,
 An inequality (-4, -2, 0, -2, -4, -4, -1) x + 0 >= 0,
 An inequality (-2, -2, 0, -4, -6, -4, -1) x + 0 >= 0)


(An equation (2, 0, -2, 0, 2, 0, -1) x + 0 == 0,
 An inequality (1, 0, -1, -1, 0, 0, 0) x + 0 >= 0,
 An inequality (-1, -1, 0, 0, 0, 0, 0) x + 0 >= 0,
 An inequality (0, 0, 0, 0, 0, -2, -1) x + 0 >= 0,
 An inequality (2, 0, -2, -2, 0, -4, -3) x + 0 >= 0,
 An inequality (-1, 0, 0, -1, 0, -1, -1) x + 0 >= 0,
 An inequality (-1, -1, -1, -1, 0, 0, 0) x + 0 >= 0,
 An inequality (2, -2, -4, -2, 0, -2, -1) x + 0 >= 0)




(An equation (2, 0, -2, 0, 2, 0, -1) x + 0 == 0,
 An inequality (1, 0, -1, -1, 0, 0, 0) x + 0 >= 0,
 An inequality (0, 1, 0, 0, 0, 0, 0) x + 0 >= 0,
 An inequality (0, 1, 0, -1, 0, 1, 0) x + 0 >= 0,
 An inequality (0, 0, 0, 1, 0, 0, 0) x + 0 >= 0,
 An inequality (-1, -1, 0, 0, 0, 0, 0) x + 0 >= 0,
 An inequality (0, 0, 0, 0, 0, 1, 0) x + 0 >= 0,
 An inequality (-1, 0, 1, 0, -1, -1, 0) x + 0 >= 0)


sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: cinv=list(reversed(c))
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],lines=identity_matrix(A.nrow
....: s()).columns())
....: for i in range(coxeter_number(A)//2):
....:     Q=Polyhedron(vertices=[vector([0]*A.nrows())],rays=reflect_matrix(A,B(
....: A,c),cinv*i))
....:     Q.Hrepresentation()
....:     print("\n")
....:     P=P.intersection(Q)
....: print("\n")
....: P.Hrepresentation()
....: print("\n")
....: #B(A,c)
(An equation (2, 0, -1) x + 0 == 0,
 An inequality (0, 1, 0) x + 0 >= 0,
 An inequality (-1, 0, 0) x + 0 >= 0)


(An equation (2, 0, -1) x + 0 == 0,
 An inequality (-2, -1, 0) x + 0 >= 0,
 An inequality (-3, -1, 0) x + 0 >= 0)


(An equation (2, 0, -1) x + 0 == 0,
 An inequality (-1, -1, 0) x + 0 >= 0,
 An inequality (-3, -2, 0) x + 0 >= 0)




(An equation (2, 0, -1) x + 0 == 0,
 An inequality (0, 1, 0) x + 0 >= 0,
 An inequality (-1, -1, 0) x + 0 >= 0)


sage: A=CartanMatrix(['C',5])
....: c=[0,2,4,1,3]
....: cinv=list(reversed(c))
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],lines=identity_matrix(A.nrow
....: s()).columns())
....: for i in range(coxeter_number(A)//2):
....:     Q=Polyhedron(vertices=[vector([0]*A.nrows())],rays=reflect_matrix(A,B(
....: A,c),cinv*i))
....:     Q.Hrepresentation()
....:     print("\n")
....:     P=P.intersection(Q)
....: print("\n")
....: P.Hrepresentation()
....: print("\n")
....: #B(A,c)
(An equation (2, 0, -2, 0, 1) x + 0 == 0,
 An inequality (0, 0, 0, 0, -1) x + 0 >= 0,
 An inequality (-1, 0, 0, 0, 0) x + 0 >= 0,
 An inequality (0, 0, 0, 1, 0) x + 0 >= 0,
 An inequality (0, 1, 0, 0, 0) x + 0 >= 0)


(An equation (2, 0, -2, 0, 1) x + 0 == 0,
 An inequality (-2, -2, 0, 0, -1) x + 0 >= 0,
 An inequality (-1, 0, 0, -1, -1) x + 0 >= 0,
 An inequality (-2, 0, 0, -2, -3) x + 0 >= 0,
 An inequality (-4, -2, 0, 0, -1) x + 0 >= 0)


(An equation (2, 0, -2, 0, 1) x + 0 == 0,
 An inequality (0, 0, 0, -1, -1) x + 0 >= 0,
 An inequality (-2, -1, 0, -1, -1) x + 0 >= 0,
 An inequality (-2, -2, 0, -2, -3) x + 0 >= 0,
 An inequality (-3, -1, 0, -2, -2) x + 0 >= 0)


(An equation (2, 0, -2, 0, 1) x + 0 == 0,
 An inequality (-1, -1, 0, -1, -1) x + 0 >= 0,
 An inequality (-2, 0, 0, -2, -1) x + 0 >= 0,
 An inequality (-2, 0, 0, -4, -3) x + 0 >= 0,
 An inequality (-3, -2, 0, -2, -2) x + 0 >= 0)


(An equation (2, 0, -2, 0, 1) x + 0 == 0,
 An inequality (0, 0, 0, -2, -1) x + 0 >= 0,
 An inequality (-1, -1, 0, 0, 0) x + 0 >= 0,
 An inequality (-2, -2, 0, -4, -3) x + 0 >= 0,
 An inequality (-4, -2, 0, -2, -1) x + 0 >= 0)




(An equation (2, 0, -2, 0, 1) x + 0 == 0,
 An inequality (0, 1, 0, 0, 0) x + 0 >= 0,
 An inequality (0, 0, 0, 1, 0) x + 0 >= 0,
 An inequality (-1, -1, 0, 0, 0) x + 0 >= 0,
 An inequality (1, 0, -1, -1, 0) x + 0 >= 0)


sage: A=CartanMatrix(['C',3])
....: c=[0,2,4,1,3]
....: cinv=list(reversed(c))
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],lines=identity_matrix(A.nrow
....: s()).columns())
....: for i in range(coxeter_number(A)//2):
....:     Q=Polyhedron(vertices=[vector([0]*A.nrows())],rays=reflect_matrix(A,B(
....: A,c),cinv*i))
....:     Q.Hrepresentation()
....:     print("\n")
....:     P=P.intersection(Q)
....: print("\n")
....: P.Hrepresentation()
....: print("\n")
....: #B(A,c)
---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
Cell In [1390], line 6
      4 P=Polyhedron(vertices=[vector([Integer(0)]*A.nrows())],lines=identity_matrix(A.nrows()).columns())
      5 for i in range(coxeter_number(A)//Integer(2)):
----> 6     Q=Polyhedron(vertices=[vector([Integer(0)]*A.nrows())],rays=reflect_matrix(A,B(A,c),cinv*i))
      7     Q.Hrepresentation()
      8     print("\n")

File ~/git/affine_dominance/software/domination5.py:89, in B(A, c)
     87     out[i,i]=0
     88     for j in range(i+1,n):
---> 89         out[c[i],c[j]]=-A[c[i],c[j]]
     90         out[c[j],c[i]]=A[c[j],c[i]]
     91 return out

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/matrix0.pyx:1009, in sage.matrix.matrix0.Matrix.__getitem__ (build/cythonized/sage/matrix/matrix0.c:12110)()
   1007     col += ncols
   1008 if col < 0 or col >= ncols:
-> 1009     raise IndexError("matrix index out of range")
   1010 single_col = 1
   1011 

IndexError: matrix index out of range
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: cinv=list(reversed(c))
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],lines=identity_matrix(A.nrow
....: s()).columns())
....: for i in range(coxeter_number(A)//2):
....:     Q=Polyhedron(vertices=[vector([0]*A.nrows())],rays=reflect_matrix(A,B(
....: A,c),cinv*i))
....:     Q.Hrepresentation()
....:     print("\n")
....:     P=P.intersection(Q)
....: print("\n")
....: P.Hrepresentation()
....: print("\n")
....: #B(A,c)
(An equation (2, 0, -1) x + 0 == 0,
 An inequality (0, 1, 0) x + 0 >= 0,
 An inequality (-1, 0, 0) x + 0 >= 0)


(An equation (2, 0, -1) x + 0 == 0,
 An inequality (-2, -1, 0) x + 0 >= 0,
 An inequality (-3, -1, 0) x + 0 >= 0)


(An equation (2, 0, -1) x + 0 == 0,
 An inequality (-1, -1, 0) x + 0 >= 0,
 An inequality (-3, -2, 0) x + 0 >= 0)




(An equation (2, 0, -1) x + 0 == 0,
 An inequality (0, 1, 0) x + 0 >= 0,
 An inequality (-1, -1, 0) x + 0 >= 0)


sage: A=CartanMatrix(['C',5])
....: c=[0,2,4,1,3]
....: cinv=list(reversed(c))
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],lines=identity_matrix(A.nrow
....: s()).columns())
....: for i in range(coxeter_number(A)//2):
....:     Q=Polyhedron(vertices=[vector([0]*A.nrows())],rays=reflect_matrix(A,B(
....: A,c),cinv*i))
....:     Q.Hrepresentation()
....:     print("\n")
....:     P=P.intersection(Q)
....: print("\n")
....: P.Hrepresentation()
....: print("\n")
....: #B(A,c)
(An equation (2, 0, -2, 0, 1) x + 0 == 0,
 An inequality (0, 0, 0, 0, -1) x + 0 >= 0,
 An inequality (-1, 0, 0, 0, 0) x + 0 >= 0,
 An inequality (0, 0, 0, 1, 0) x + 0 >= 0,
 An inequality (0, 1, 0, 0, 0) x + 0 >= 0)


(An equation (2, 0, -2, 0, 1) x + 0 == 0,
 An inequality (-2, -2, 0, 0, -1) x + 0 >= 0,
 An inequality (-1, 0, 0, -1, -1) x + 0 >= 0,
 An inequality (-2, 0, 0, -2, -3) x + 0 >= 0,
 An inequality (-4, -2, 0, 0, -1) x + 0 >= 0)


(An equation (2, 0, -2, 0, 1) x + 0 == 0,
 An inequality (0, 0, 0, -1, -1) x + 0 >= 0,
 An inequality (-2, -1, 0, -1, -1) x + 0 >= 0,
 An inequality (-2, -2, 0, -2, -3) x + 0 >= 0,
 An inequality (-3, -1, 0, -2, -2) x + 0 >= 0)


(An equation (2, 0, -2, 0, 1) x + 0 == 0,
 An inequality (-1, -1, 0, -1, -1) x + 0 >= 0,
 An inequality (-2, 0, 0, -2, -1) x + 0 >= 0,
 An inequality (-2, 0, 0, -4, -3) x + 0 >= 0,
 An inequality (-3, -2, 0, -2, -2) x + 0 >= 0)


(An equation (2, 0, -2, 0, 1) x + 0 == 0,
 An inequality (0, 0, 0, -2, -1) x + 0 >= 0,
 An inequality (-1, -1, 0, 0, 0) x + 0 >= 0,
 An inequality (-2, -2, 0, -4, -3) x + 0 >= 0,
 An inequality (-4, -2, 0, -2, -1) x + 0 >= 0)




(An equation (2, 0, -2, 0, 1) x + 0 == 0,
 An inequality (0, 1, 0, 0, 0) x + 0 >= 0,
 An inequality (0, 0, 0, 1, 0) x + 0 >= 0,
 An inequality (-1, -1, 0, 0, 0) x + 0 >= 0,
 An inequality (1, 0, -1, -1, 0) x + 0 >= 0)


sage: A=CartanMatrix(['C',5])
....: c=[0,2,4,1,3]
....: cinv=list(reversed(c))
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],lines=identity_matrix(A.nrow
....: s()).columns())
....: B(A,c)
....: for i in range(coxeter_number(A)//2):
....:     Q=Polyhedron(vertices=[vector([0]*A.nrows())],rays=reflect_matrix(A,B(
....: A,c),cinv*i))
....:     Q.Hrepresentation()
....:     print("\n")
....:     P=P.intersection(Q)
....: print("\n")
....: P.Hrepresentation()
....: print("\n")
....: #B(A,c)
[ 0  1  0  0  0]
[-1  0 -1  0  0]
[ 0  1  0  1  0]
[ 0  0 -1  0 -2]
[ 0  0  0  1  0]
(An equation (2, 0, -2, 0, 1) x + 0 == 0,
 An inequality (0, 0, 0, 0, -1) x + 0 >= 0,
 An inequality (-1, 0, 0, 0, 0) x + 0 >= 0,
 An inequality (0, 0, 0, 1, 0) x + 0 >= 0,
 An inequality (0, 1, 0, 0, 0) x + 0 >= 0)


(An equation (2, 0, -2, 0, 1) x + 0 == 0,
 An inequality (-2, -2, 0, 0, -1) x + 0 >= 0,
 An inequality (-1, 0, 0, -1, -1) x + 0 >= 0,
 An inequality (-2, 0, 0, -2, -3) x + 0 >= 0,
 An inequality (-4, -2, 0, 0, -1) x + 0 >= 0)


(An equation (2, 0, -2, 0, 1) x + 0 == 0,
 An inequality (0, 0, 0, -1, -1) x + 0 >= 0,
 An inequality (-2, -1, 0, -1, -1) x + 0 >= 0,
 An inequality (-2, -2, 0, -2, -3) x + 0 >= 0,
 An inequality (-3, -1, 0, -2, -2) x + 0 >= 0)


(An equation (2, 0, -2, 0, 1) x + 0 == 0,
 An inequality (-1, -1, 0, -1, -1) x + 0 >= 0,
 An inequality (-2, 0, 0, -2, -1) x + 0 >= 0,
 An inequality (-2, 0, 0, -4, -3) x + 0 >= 0,
 An inequality (-3, -2, 0, -2, -2) x + 0 >= 0)


(An equation (2, 0, -2, 0, 1) x + 0 == 0,
 An inequality (0, 0, 0, -2, -1) x + 0 >= 0,
 An inequality (-1, -1, 0, 0, 0) x + 0 >= 0,
 An inequality (-2, -2, 0, -4, -3) x + 0 >= 0,
 An inequality (-4, -2, 0, -2, -1) x + 0 >= 0)




(An equation (2, 0, -2, 0, 1) x + 0 == 0,
 An inequality (0, 1, 0, 0, 0) x + 0 >= 0,
 An inequality (0, 0, 0, 1, 0) x + 0 >= 0,
 An inequality (-1, -1, 0, 0, 0) x + 0 >= 0,
 An inequality (1, 0, -1, -1, 0) x + 0 >= 0)


sage: A=CartanMatrix(['C',5])
....: c=[0,2,4,1,3]
....: cinv=list(reversed(c))
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],lines=identity_matrix(A.nrow
....: s()).columns())
....: B(A,c)
....: for i in range(coxeter_number(A)//2):
....:     Q=Polyhedron(vertices=[vector([0]*A.nrows())],rays=reflect_matrix(A,B(
....: A,c),cinv*i).columns())
....:     Q.Hrepresentation()
....:     print("\n")
....:     P=P.intersection(Q)
....: print("\n")
....: P.Hrepresentation()
....: print("\n")
....: #B(A,c)
[ 0  1  0  0  0]
[-1  0 -1  0  0]
[ 0  1  0  1  0]
[ 0  0 -1  0 -2]
[ 0  0  0  1  0]
(An equation (1, 0, -1, 0, 1) x + 0 == 0,
 An inequality (0, 0, 1, 0, -1) x + 0 >= 0,
 An inequality (0, 0, 0, 0, 1) x + 0 >= 0,
 An inequality (0, 0, 0, -1, 0) x + 0 >= 0,
 An inequality (0, -1, 0, 0, 0) x + 0 >= 0)


(An equation (1, 0, -1, 0, 1) x + 0 == 0,
 An inequality (0, 0, 0, -1, -1) x + 0 >= 0,
 An inequality (-1, -1, 0, 0, 0) x + 0 >= 0,
 An inequality (-1, -1, 0, -2, -3) x + 0 >= 0,
 An inequality (-2, -1, 0, -1, -1) x + 0 >= 0)


(An equation (1, 0, -1, 0, 1) x + 0 == 0,
 An inequality (-1, -1, 0, -1, -2) x + 0 >= 0,
 An inequality (-1, 0, 0, -1, -1) x + 0 >= 0,
 An inequality (-1, 0, 0, -2, -3) x + 0 >= 0,
 An inequality (-3, -2, 0, -2, -4) x + 0 >= 0)


(An equation (1, 0, -1, 0, 1) x + 0 == 0,
 An inequality (0, 0, 0, -1, -2) x + 0 >= 0,
 An inequality (-2, -1, 0, -1, -2) x + 0 >= 0,
 An inequality (-1, -1, 0, -1, -3) x + 0 >= 0,
 An inequality (-3, -1, 0, -2, -4) x + 0 >= 0)


(An equation (1, 0, -1, 0, 1) x + 0 == 0,
 An inequality (-1, -1, 0, 0, -1) x + 0 >= 0,
 An inequality (-1, 0, 0, -1, -2) x + 0 >= 0,
 An inequality (-1, 0, 0, -1, -3) x + 0 >= 0,
 An inequality (-2, -1, 0, 0, -1) x + 0 >= 0)




(An equation (1, 0, -1, 0, 1) x + 0 == 0,
 An inequality (-1, -1, -1, 0, 0) x + 0 >= 0,
 An inequality (1, 0, 0, 0, 0) x + 0 >= 0,
 An inequality (2, 0, -3, -1, 0) x + 0 >= 0,
 An inequality (-1, 0, 1, 0, 0) x + 0 >= 0)


sage: A=CartanMatrix(['C',5])
....: c=[0,2,4,1,3]
....: cinv=list(reversed(c))
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],lines=identity_matrix(A.nrow
....: s()).columns())
....: B(A,c)
....: for i in range(coxeter_number(A)//2):
....:     Q=Polyhedron(vertices=[vector([0]*A.nrows())],rays=reflect_matrix(A,B(
....: A,c),cinv*i).columns())
....:     Q.Hrepresentation()
....:     print("\n")
....:     P=P.intersection(Q)
....: print("\n")
....: P.Hrepresentation()
....: print("\n")
....: #B(A,c)
[ 0  1  0  0  0]
[-1  0 -1  0  0]
[ 0  1  0  1  0]
[ 0  0 -1  0 -2]
[ 0  0  0  1  0]
(An equation (1, 0, -1, 0, 1) x + 0 == 0,
 An inequality (0, 0, 1, 0, -1) x + 0 >= 0,
 An inequality (0, 0, 0, 0, 1) x + 0 >= 0,
 An inequality (0, 0, 0, -1, 0) x + 0 >= 0,
 An inequality (0, -1, 0, 0, 0) x + 0 >= 0)


(An equation (1, 0, -1, 0, 1) x + 0 == 0,
 An inequality (0, 0, 0, -1, -1) x + 0 >= 0,
 An inequality (-1, -1, 0, 0, 0) x + 0 >= 0,
 An inequality (-1, -1, 0, -2, -3) x + 0 >= 0,
 An inequality (-2, -1, 0, -1, -1) x + 0 >= 0)


(An equation (1, 0, -1, 0, 1) x + 0 == 0,
 An inequality (-1, -1, 0, -1, -2) x + 0 >= 0,
 An inequality (-1, 0, 0, -1, -1) x + 0 >= 0,
 An inequality (-1, 0, 0, -2, -3) x + 0 >= 0,
 An inequality (-3, -2, 0, -2, -4) x + 0 >= 0)


(An equation (1, 0, -1, 0, 1) x + 0 == 0,
 An inequality (0, 0, 0, -1, -2) x + 0 >= 0,
 An inequality (-2, -1, 0, -1, -2) x + 0 >= 0,
 An inequality (-1, -1, 0, -1, -3) x + 0 >= 0,
 An inequality (-3, -1, 0, -2, -4) x + 0 >= 0)


(An equation (1, 0, -1, 0, 1) x + 0 == 0,
 An inequality (-1, -1, 0, 0, -1) x + 0 >= 0,
 An inequality (-1, 0, 0, -1, -2) x + 0 >= 0,
 An inequality (-1, 0, 0, -1, -3) x + 0 >= 0,
 An inequality (-2, -1, 0, 0, -1) x + 0 >= 0)




(An equation (1, 0, -1, 0, 1) x + 0 == 0,
 An inequality (-1, -1, -1, 0, 0) x + 0 >= 0,
 An inequality (1, 0, 0, 0, 0) x + 0 >= 0,
 An inequality (2, 0, -3, -1, 0) x + 0 >= 0,
 An inequality (-1, 0, 1, 0, 0) x + 0 >= 0)


sage: A=CartanMatrix(['C',7])
....: c=[0,2,4,6,1,3,5]
....: cinv=list(reversed(c))
....: P=Polyhedron(vertices=[vector([0]*A.nrows())],lines=identity_matrix(A.nrow
....: s()).columns())
....: B(A,c)
....: for i in range(coxeter_number(A)//2):
....:     Q=Polyhedron(vertices=[vector([0]*A.nrows())],rays=reflect_matrix(A,B(
....: A,c),cinv*i).columns())
....:     Q.Hrepresentation()
....:     print("\n")
....:     P=P.intersection(Q)
....: print("\n")
....: P.Hrepresentation()
....: print("\n")
....: #B(A,c)
[ 0  1  0  0  0  0  0]
[-1  0 -1  0  0  0  0]
[ 0  1  0  1  0  0  0]
[ 0  0 -1  0 -1  0  0]
[ 0  0  0  1  0  1  0]
[ 0  0  0  0 -1  0 -2]
[ 0  0  0  0  0  1  0]
(An equation (1, 0, -1, 0, 1, 0, -1) x + 0 == 0,
 An inequality (0, 0, 1, 0, -1, 0, 1) x + 0 >= 0,
 An inequality (0, 0, 0, 0, 1, 0, -1) x + 0 >= 0,
 An inequality (0, 0, 0, 0, 0, 0, 1) x + 0 >= 0,
 An inequality (0, 0, 0, 0, 0, -1, 0) x + 0 >= 0,
 An inequality (0, -1, 0, 1, 0, -1, 0) x + 0 >= 0,
 An inequality (0, -1, 0, 0, 0, 0, 0) x + 0 >= 0,
 An inequality (0, 0, 0, -1, 0, 0, 0) x + 0 >= 0)


(An equation (1, 0, -1, 0, 1, 0, -1) x + 0 == 0,
 An inequality (1, 0, -1, -1, 0, 0, 0) x + 0 >= 0,
 An inequality (-1, -1, 0, 0, 0, 0, 0) x + 0 >= 0,
 An inequality (0, 0, 0, 0, 0, -1, -1) x + 0 >= 0,
 An inequality (1, 0, -1, -1, 0, -2, -3) x + 0 >= 0,
 An inequality (-1, 0, 0, -1, 0, -1, -2) x + 0 >= 0,
 An inequality (-1, -1, -1, -1, 0, 0, 0) x + 0 >= 0,
 An inequality (1, -1, -2, -1, 0, -1, -1) x + 0 >= 0)


(An equation (1, 0, -1, 0, 1, 0, -1) x + 0 == 0,
 An inequality (0, 0, 0, -1, -1, -1, -1) x + 0 >= 0,
 An inequality (-1, -1, 0, 0, -1, -1, 0) x + 0 >= 0,
 An inequality (-1, 0, 0, -1, -1, 0, 1) x + 0 >= 0,
 An inequality (0, 0, 0, -2, -3, -1, 1) x + 0 >= 0,
 An inequality (-1, 0, 0, -1, -2, -1, 1) x + 0 >= 0,
 An inequality (-2, -1, 0, -1, -2, -2, -1) x + 0 >= 0,
 An inequality (-1, -1, 0, -2, -3, -2, -1) x + 0 >= 0)


(An equation (1, 0, -1, 0, 1, 0, -1) x + 0 == 0,
 An inequality (1, -1, -2, -1, 0, -1, -2) x + 0 >= 0,
 An inequality (1, 0, -1, 0, 0, -1, -1) x + 0 >= 0,
 An inequality (0, 0, -1, -1, 0, -1, -2) x + 0 >= 0,
 An inequality (1, 0, -1, 0, 0, -2, -3) x + 0 >= 0,
 An inequality (2, 0, -3, -2, 0, -2, -4) x + 0 >= 0,
 An inequality (1, -2, -4, -2, 0, -2, -4) x + 0 >= 0,
 An inequality (0, -2, -2, 0, 0, -2, -3) x + 0 >= 0)


(An equation (1, 0, -1, 0, 1, 0, -1) x + 0 == 0,
 An inequality (2, 0, -2, -1, 0, -1, -2) x + 0 >= 0,
 An inequality (0, -1, -2, -1, 0, -1, -2) x + 0 >= 0,
 An inequality (0, 0, 0, 0, 0, -1, -2) x + 0 >= 0,
 An inequality (1, 0, -1, -1, 0, -1, -3) x + 0 >= 0,
 An inequality (0, 0, -2, -2, 0, -1, -3) x + 0 >= 0,
 An inequality (1, -1, -4, -2, 0, -2, -4) x + 0 >= 0,
 An inequality (2, -1, -3, -1, 0, -2, -4) x + 0 >= 0)


(An equation (1, 0, -1, 0, 1, 0, -1) x + 0 == 0,
 An inequality (0, 0, 0, -1, -1, 0, 0) x + 0 >= 0,
 An inequality (-1, -1, 0, 0, -1, -1, -1) x + 0 >= 0,
 An inequality (-1, 0, 0, -1, -2, -1, 0) x + 0 >= 0,
 An inequality (0, 0, 0, -1, -3, -1, 1) x + 0 >= 0,
 An inequality (-1, 0, 0, -1, -3, -2, -1) x + 0 >= 0,
 An inequality (-2, -1, 0, -1, -2, -1, -1) x + 0 >= 0,
 An inequality (-1, -1, 0, -1, -2, 0, 1) x + 0 >= 0)


(An equation (1, 0, -1, 0, 1, 0, -1) x + 0 == 0,
 An inequality (0, -1, -1, 0, 0, 0, 0) x + 0 >= 0,
 An inequality (1, 0, -1, 0, 0, -1, -2) x + 0 >= 0,
 An inequality (0, 0, -1, -1, 0, 0, -1) x + 0 >= 0,
 An inequality (1, 0, -1, 0, 0, -1, -3) x + 0 >= 0,
 An inequality (1, 0, -2, -1, 0, 0, -1) x + 0 >= 0,
 An inequality (-1, -1, -1, 0, 0, 0, 0) x + 0 >= 0,
 An inequality (-1, -1, 0, 1, 0, -1, -2) x + 0 >= 0)




(An equation (1, 0, -1, 0, 1, 0, -1) x + 0 == 0,
 An inequality (1, 0, 0, 0, 0, 0, 0) x + 0 >= 0,
 An inequality (1, 0, -1, 0, 1, 0, 0) x + 0 >= 0,
 An inequality (-2, 0, 2, 0, -3, -1, 0) x + 0 >= 0,
 An inequality (0, 0, -1, -1, -1, 0, 0) x + 0 >= 0,
 An inequality (-1, -1, -1, 0, 0, 0, 0) x + 0 >= 0,
 An inequality (-1, 0, 1, 0, 0, 0, 0) x + 0 >= 0,
 An inequality (-3, -1, 2, 1, -2, -1, 0) x + 0 >= 0)


sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: for u in sortables(A,c[1:]):
....:     R=p_lambda_faster(-B(A,c),lam(A,u),[])
....:     la=lam(A,u)
....:     colors=rainbow(10)
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
....:     plots=[point(la,size=50).plot(),p_lambda_faster(B(A,c),lam(A,u),[]).pl
....: 
....: ot(fill=colors[0],alpha=0.5)]
....:     num=1
....:     for seq in list(list(reversed(c))*i for i in range(1,A.nrows()+1)):
....:         sc=1/100
....:         t=vector((num*sc,0,num*sc))
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:         num+=1
....:         Q=Q.intersection(P)
....:     #print(Q)
....:     print(Q.intersection(R)==Q)
....:     sum(plots)
....: 
  Cell In [1397], line 8
    plots=[point(la,size=Integer(50)).plot(),p_lambda_faster(B(A,c),lam(A,u),[]).pl
                                             ^
SyntaxError: invalid syntax. Perhaps you forgot a comma?

sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: for u in sortables(A,c[1:]):
....:     R=p_lambda_faster(-B(A,c),lam(A,u),[])
....:     la=lam(A,u)
....:     colors=rainbow(10)
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
....:     plots=[point(la,size=50).plot(),p_lambda_faster(B(A,c),lam(A,u),[]).pl
....: 
....: ot(fill=colors[0],alpha=0.5)]
....:     num=1
....:     for seq in list(list(reversed(c))*i for i in range(1,A.nrows()+1)):
....:         sc=1/100
....:         t=vector((num*sc,0,num*sc))
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:         num+=1
....:         Q=Q.intersection(P)
....:     #print(Q)
....:     print(Q.intersection(R)==Q)
....:     sum(plots)
  Cell In [1398], line 8
    plots=[point(la,size=Integer(50)).plot(),p_lambda_faster(B(A,c),lam(A,u),[]).pl
                                             ^
SyntaxError: invalid syntax. Perhaps you forgot a comma?

sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: for u in sortables(A,c[1:]):
....:     R=p_lambda_faster(-B(A,c),lam(A,u),[])
....:     la=lam(A,u)
....:     colors=rainbow(10)
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
....:     plots=[point(la,size=50).plot(),p_lambda_faster(B(A,c),lam(A,u),[]).pl
....: ot(fill=colors[0],alpha=0.5)]
....:     num=1
....:     for seq in list(list(reversed(c))*i for i in range(1,A.nrows()+1)):
....:         sc=1/100
....:         t=vector((num*sc,0,num*sc))
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:         num+=1
....:         Q=Q.intersection(P)
....:     #print(Q)
....:     print(Q.intersection(R)==Q)
....:     sum(plots)
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: for u in sortables(A,c[1:]):
....:     R=p_lambda_faster(-B(A,c),lam(A,u),[])
....:     la=lam(A,u)
....:     colors=rainbow(10)
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
....:     plots=[point(la,size=50).plot(),p_lambda_faster(B(A,c),lam(A,u),[]).pl
....: ot(fill=colors[0],alpha=0.5)]
....:     num=1
....:     for seq in list(list(reversed(c))*i for i in range(1,A.nrows()+1)):
....:         sc=1/100
....:         t=vector((num*sc,0,num*sc))
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:         num+=1
....:         Q=Q.intersection(P)
....:     #print(Q)
....:     print(Q.intersection(R)==Q)
....:     sum(plots)
....: 
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: cinv=list(reversed(c))
....: plots=[point(vector((0,0,0)),size=50)]
....: num=0
....: sc=1/20
....: colors=rainbow(40)
....: for u in sortables(A,c[1:]):
....:     t=vector((num*sc,0,-num*sc))
....:     Bplus=block_matrix([[B(A,c),matrix(lam(A,u)).transpose()]])
....:     for k in c:
....:         Bplus.mutate(k)
....:     la=vector(Bplus[:,-1])
....:     Q=p_lambda(B(A,c),la,cinv)
....:     plots=plots+[(Q.translation(t-la)).plot(fill=colors[num],alpha=0.5)]
....:     num+=1
....: num=0
....: for i in range(coxeter_number(A)//2):
....:     t=vector((-num*sc,0,num*sc))
....:     Q=Polyhedron(vertices=[vector([0]*A.nrows())],rays=reflect_matrix(A,B(
....: A,c),cinv*i).columns())
....:     plots=plots+[(Q.translation(t)).plot(fill=colors[num+20],alpha=0.5)]
....:     num+=1
....: sum(plots)
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: for u in sortables(A,c[1:]):
....:     R=p_lambda_faster(-B(A,c),lam(A,u),[])
....:     la=lam(A,u)
....:     colors=rainbow(10)
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
....:     plots=[point(la,size=50).plot(),p_lambda_faster(B(A,c),lam(A,u),[]).pl
....: ot(fill=colors[0],alpha=0.5)]
....:     num=1
....:     for seq in list(list(reversed(c))*i for i in range(1,A.nrows()+1)):
....:         sc=1/100
....:         t=vector((num*sc,0,num*sc))
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:         num+=1
....:         Q=Q.intersection(P)
....:     #print(Q)
....:     print(Q.intersection(R)==Q)
....:     sum(plots)
....: 
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: for u in sortables(A,c[1:]):
....:     R=p_lambda_faster(-B(A,c),lam(A,u),[])
....:     la=lam(A,u)
....:     colors=rainbow(10)
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
....:     plots=[text(la,(0,0,0)),point(la,size=50).plot(),p_lambda_faster(B(A,c
....: ),lam(A,u),[]).plot(fill=colors[0],alpha=0.5)]
....:     num=1
....:     for seq in list(list(reversed(c))*i for i in range(1,A.nrows()+1)):
....:         sc=1/100
....:         t=vector((num*sc,0,num*sc))
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:         num+=1
....:         Q=Q.intersection(P)
....:     #print(Q)
....:     print(Q.intersection(R)==Q)
....:     sum(plots)
....: 
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/plot/text.py:422, in text(string, xy, **options)
    421 try:
--> 422     x, y = xy
    423 except ValueError:

ValueError: too many values to unpack (expected 2)

During handling of the above exception, another exception occurred:

ValueError                                Traceback (most recent call last)
Cell In [1403], line 8
      6 colors=rainbow(Integer(10))
      7 Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
----> 8 plots=[text(la,(Integer(0),Integer(0),Integer(0))),point(la,size=Integer(50)).plot(),p_lambda_faster(B(A,c),lam(A,u),[]).plot(fill=colors[Integer(0)],alpha=RealNumber('0.5'))]
      9 num=Integer(1)
     10 for seq in list(list(reversed(c))*i for i in range(Integer(1),A.nrows()+Integer(1))):

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/misc/decorators.py:658, in rename_keyword.__call__.<locals>.wrapper(*args, **kwds)
    656         kwds[new_name] = kwds[old_name]
    657         del kwds[old_name]
--> 658 return func(*args, **kwds)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/misc/decorators.py:497, in options.__call__.<locals>.wrapper(*args, **kwds)
    495     options['__original_opts'] = kwds
    496 options.update(kwds)
--> 497 return func(*args, **options)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/plot/text.py:425, in text(string, xy, **options)
    423 except ValueError:
    424     if isinstance(xy, (list, tuple)) and len(xy) == 3:
--> 425         raise ValueError("use text3d instead for text in 3d")
    426     raise
    427 from sage.plot.all import Graphics

ValueError: use text3d instead for text in 3d
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: for u in sortables(A,c[1:]):
....:     R=p_lambda_faster(-B(A,c),lam(A,u),[])
....:     la=lam(A,u)
....:     colors=rainbow(10)
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
....:     plots=[text3d(la,(0,0,0)),point(la,size=50).plot(),p_lambda_faster(B(A
....: ,c),lam(A,u),[]).plot(fill=colors[0],alpha=0.5)]
....:     num=1
....:     for seq in list(list(reversed(c))*i for i in range(1,A.nrows()+1)):
....:         sc=1/100
....:         t=vector((num*sc,0,num*sc))
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:         num+=1
....:         Q=Q.intersection(P)
....:     #print(Q)
....:     print(Q.intersection(R)==Q)
....:     sum(plots)
....: 
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: for u in sortables(A,c[1:]):
....:     R=p_lambda_faster(-B(A,c),lam(A,u),[])
....:     la=lam(A,u)
....:     colors=rainbow(10)
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
....:     plots=[text3d(u,(0,0,0)),point(la,size=50).plot(),p_lambda_faster(B(A,
....: c),lam(A,u),[]).plot(fill=colors[0],alpha=0.5)]
....:     num=1
....:     for seq in list(list(reversed(c))*i for i in range(1,A.nrows()+1)):
....:         sc=1/100
....:         t=vector((num*sc,0,num*sc))
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:         num+=1
....:         Q=Q.intersection(P)
....:     #print(Q)
....:     print(Q.intersection(R)==Q)
....:     sum(plots)
....: 
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: cinv=list(reversed(c))
....: Bplus=block_matrix([[B(A,c),matrix(lam(A,[2,1])).transpose()]])
....: for k in c:
....:     Bplus.mutate(k)
....: la=vector(Bplus[:,-1])
....: 
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: cinv=list(reversed(c))
....: Bplus=block_matrix([[B(A,c),matrix(lam(A,[2,1])).transpose()]])
....: for k in c:
....:     Bplus.mutate(k)
....: vector(Bplus[:,-1])
(-3, 1, 1)
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: cinv=list(reversed(c))
....: Bplus=block_matrix([[B(A,c),matrix(lam(A,[2,1])).transpose()]])
....: for k in c:
....:     Bplus.mutate(k)
....: lam(A,[2,1])
....: vector(Bplus[:,-1])
(2, 3, -2)
(-3, 1, 1)
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: cinv=list(reversed(c))
....: Bplus=block_matrix([[B(A,c),matrix(lam(A,[2,1])).transpose()]])
....: for k in cinv:
....:     Bplus.mutate(k)
....: lam(A,[2,1])
....: vector(Bplus[:,-1])
(2, 3, -2)
(-5, 4, -1)
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: for la in [(-3,1,1),(-5,4,-1)]:
....:     R=p_lambda_faster(-B(A,c),la,[])
....:     colors=rainbow(10)
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
....:     plots=[text3d(la,(0,0,0)),point(la,size=50).plot(),p_lambda_faster(B(A
....: ,c),la,[]).plot(fill=colors[0],alpha=0.5)]
....:     num=1
....:     for seq in list(list(reversed(c))*i for i in range(1,A.nrows()+1)):
....:         sc=1/100
....:         t=vector((num*sc,0,num*sc))
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:         num+=1
....:         Q=Q.intersection(P)
....:     #print(Q)
....:     print(Q.intersection(R)==Q)
....:     sum(plots)
....: 
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
sage: la(A,[1])
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In [1411], line 1
----> 1 la(A,[Integer(1)])

TypeError: 'tuple' object is not callable
sage: lam(A,[1])
(2, -1, 2)
sage: la(A,[2])
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In [1413], line 1
----> 1 la(A,[Integer(2)])

TypeError: 'tuple' object is not callable
sage: lam(A,[2])
(1, 3, -1)
sage: lam(A,[2,1])
(2, 3, -2)
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: for u in sortables(A,c):
....:     P=p_lambda(B(A,c),lam(A,u),[])
....:     for i in range(coxeter_number(A)//2):
....:         if P.intersection(p_lambda(B(A,c),lam(A,u),c*i)).dimension()==0:
....:             print(u,i)
....: 
[0, 2, 1, 0, 2, 1, 0, 2, 1] 1
[0, 2, 1, 0, 2, 1, 0, 2] 1
[0, 2, 1, 0, 2] 2
[0, 2, 1, 2, 1] 2
[0, 2, 1, 2] 2
[0, 1, 0] 1
[0, 1, 0] 2
[0, 1] 2
[2, 1, 2, 1] 1
[1] 1
[1] 2
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: for u in sortables(A,c):
....:     P=p_lambda(B(A,c),lam(A,u),[])
....:     works=false
....:     for i in range(coxeter_number(A)//2):
....:         if P.intersection(p_lambda(B(A,c),lam(A,u),c*i)).dimension()==0:
....:             works=true
....:     print(u,works)
....: 
[0, 2, 1, 0, 2, 1, 0, 2, 1] True
[0, 2, 1, 0, 2, 1, 0, 2] True
[0, 2, 1, 0, 2, 1, 0] False
[0, 2, 1, 0, 2, 1, 2] False
[0, 2, 1, 0, 2, 1] False
[0, 2, 1, 0, 2] True
[0, 2, 1, 0] False
[0, 2, 1, 2, 1] True
[0, 2, 1, 2] True
[0, 2, 1] False
[0, 2] False
[0, 1, 0] True
[0, 1] True
[0] False
[2, 1, 2, 1] True
[2, 1, 2] False
[2, 1] False
[2] False
[1] True
[] False
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: for u in sortables(A,c):
....:     la=lam(A,u)
....:     P=p_lambda(B(A,c),la,[])
....:     works=false
....:     for i in range(coxeter_number(A)//2):
....:         if P.intersection(p_lambda(B(A,c),la,c*i)).dimension()==0:
....:             works=true
....:     print(la,works)
(-1, -1, -1) True
(-2, 1, -2) True
(-4, 3, -2) False
(-1, 2, -3) False
(-3, 4, -3) False
(-3, 5, -3) True
(-1, 5, -3) False
(-5, 4, -1) True
(-4, 5, -2) True
(-2, 5, -2) False
(-1, 4, -1) False
(-1, -1, 3) True
(-2, 1, 2) True
(-1, 2, 1) False
(5, -1, -1) True
(4, 1, -2) False
(2, 3, -2) False
(1, 3, -1) False
(2, -1, 2) True
(1, 1, 1) False
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: for u in sortables(A,c[1:]):
....:     R=p_lambda_faster(-B(A,c),lam(A,u),[])
....:     la=lam(A,u)
....:     colors=rainbow(10)
....:     Q=p_lambda_faster(B(A,c),la,list(reversed(c)))
....:     plots=[text3d(u,(0,0,0)),point(la,size=50).plot(),p_lambda_faster(B(A,
....: c),lam(A,u),[]).plot(fill=colors[0],alpha=0.5)]
....:     num=1
....:     for seq in list(list(reversed(c))*i for i in range(1,A.nrows()+1)):
....:         sc=1/100
....:         t=vector((num*sc,0,num*sc))
....:         P=p_lambda_faster(B(A,c),la,seq)
....:         plots=plots+[(P.translation(t)).plot(fill=colors[num],alpha=0.5)]
....:         num+=1
....:         Q=Q.intersection(P)
....:     #print(Q)
....:     print(Q.intersection(R)==Q)
....:     sum(plots)
....: 
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
True
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: for u in sortables(A,c):
....:     la=lam(A,u)
....:     P=p_lambda(B(A,c),la,[])
....:     works=false
....:     for i in range(1,coxeter_number(A)//2+1):
....:         if P.intersection(p_lambda(B(A,c),la,c*i)).dimension()==0:
....:             works=true
....:     print(la,works)
....: 
(-1, -1, -1) True
(-2, 1, -2) True
(-4, 3, -2) False
(-1, 2, -3) False
(-3, 4, -3) False
(-3, 5, -3) True
(-1, 5, -3) False
(-5, 4, -1) True
(-4, 5, -2) True
(-2, 5, -2) False
(-1, 4, -1) True
(-1, -1, 3) True
(-2, 1, 2) True
(-1, 2, 1) True
(5, -1, -1) True
(4, 1, -2) False
(2, 3, -2) False
(1, 3, -1) True
(2, -1, 2) True
(1, 1, 1) True
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: plots=[]
....: for u in sortables(A,c):
....:     la=lam(A,u)
....:     P=p_lambda(B(A,c),la,[])
....:     works=false
....:     for i in range(1,coxeter_number(A)//2+1):
....:         if P.intersection(p_lambda(B(A,c),la,c*i)).dimension()==0:
....:             plots=plots+[text(la,la)]
....: sum(plots)
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
Cell In [1421], line 10
      8     for i in range(Integer(1),coxeter_number(A)//Integer(2)+Integer(1)):
      9         if P.intersection(p_lambda(B(A,c),la,c*i)).dimension()==Integer(0):
---> 10             plots=plots+[text(la,la)]
     11 sum(plots)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/misc/decorators.py:658, in rename_keyword.__call__.<locals>.wrapper(*args, **kwds)
    656         kwds[new_name] = kwds[old_name]
    657         del kwds[old_name]
--> 658 return func(*args, **kwds)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/misc/decorators.py:497, in options.__call__.<locals>.wrapper(*args, **kwds)
    495     options['__original_opts'] = kwds
    496 options.update(kwds)
--> 497 return func(*args, **options)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/plot/text.py:422, in text(string, xy, **options)
    223 r"""
    224 Return a 2D text graphics object at the point `(x, y)`.
    225 
   (...)
    419     sage: text("MATH IS AWESOME", (0, 0), fontsize=40).show(axes=False)
    420 """
    421 try:
--> 422     x, y = xy
    423 except ValueError:
    424     if isinstance(xy, (list, tuple)) and len(xy) == 3:

ValueError: too many values to unpack (expected 2)
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: plots=[]
....: for u in sortables(A,c):
....:     la=lam(A,u)
....:     P=p_lambda(B(A,c),la,[])
....:     works=false
....:     for i in range(1,coxeter_number(A)//2+1):
....:         if P.intersection(p_lambda(B(A,c),la,c*i)).dimension()==0:
....:             plots=plots+[text(string(la),la)]
....: sum(plots)
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
Cell In [1422], line 10
      8     for i in range(Integer(1),coxeter_number(A)//Integer(2)+Integer(1)):
      9         if P.intersection(p_lambda(B(A,c),la,c*i)).dimension()==Integer(0):
---> 10             plots=plots+[text(string(la),la)]
     11 sum(plots)

NameError: name 'string' is not defined
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: plots=[]
....: for u in sortables(A,c):
....:     la=lam(A,u)
....:     P=p_lambda(B(A,c),la,[])
....:     works=false
....:     for i in range(1,coxeter_number(A)//2+1):
....:         if P.intersection(p_lambda(B(A,c),la,c*i)).dimension()==0:
....:             plots=plots+[text(str(la),la)]
....: sum(plots)
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
Cell In [1423], line 10
      8     for i in range(Integer(1),coxeter_number(A)//Integer(2)+Integer(1)):
      9         if P.intersection(p_lambda(B(A,c),la,c*i)).dimension()==Integer(0):
---> 10             plots=plots+[text(str(la),la)]
     11 sum(plots)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/misc/decorators.py:658, in rename_keyword.__call__.<locals>.wrapper(*args, **kwds)
    656         kwds[new_name] = kwds[old_name]
    657         del kwds[old_name]
--> 658 return func(*args, **kwds)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/misc/decorators.py:497, in options.__call__.<locals>.wrapper(*args, **kwds)
    495     options['__original_opts'] = kwds
    496 options.update(kwds)
--> 497 return func(*args, **options)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/plot/text.py:422, in text(string, xy, **options)
    223 r"""
    224 Return a 2D text graphics object at the point `(x, y)`.
    225 
   (...)
    419     sage: text("MATH IS AWESOME", (0, 0), fontsize=40).show(axes=False)
    420 """
    421 try:
--> 422     x, y = xy
    423 except ValueError:
    424     if isinstance(xy, (list, tuple)) and len(xy) == 3:

ValueError: too many values to unpack (expected 2)
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: plots=[]
....: for u in sortables(A,c):
....:     la=lam(A,u)
....:     P=p_lambda(B(A,c),la,[])
....:     works=false
....:     for i in range(1,coxeter_number(A)//2+1):
....:         if P.intersection(p_lambda(B(A,c),la,c*i)).dimension()==0:
....:             plots=plots+[text(str(la),vector(la))]
....: sum(plots)
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
Cell In [1424], line 10
      8     for i in range(Integer(1),coxeter_number(A)//Integer(2)+Integer(1)):
      9         if P.intersection(p_lambda(B(A,c),la,c*i)).dimension()==Integer(0):
---> 10             plots=plots+[text(str(la),vector(la))]
     11 sum(plots)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/misc/decorators.py:658, in rename_keyword.__call__.<locals>.wrapper(*args, **kwds)
    656         kwds[new_name] = kwds[old_name]
    657         del kwds[old_name]
--> 658 return func(*args, **kwds)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/misc/decorators.py:497, in options.__call__.<locals>.wrapper(*args, **kwds)
    495     options['__original_opts'] = kwds
    496 options.update(kwds)
--> 497 return func(*args, **options)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/plot/text.py:422, in text(string, xy, **options)
    223 r"""
    224 Return a 2D text graphics object at the point `(x, y)`.
    225 
   (...)
    419     sage: text("MATH IS AWESOME", (0, 0), fontsize=40).show(axes=False)
    420 """
    421 try:
--> 422     x, y = xy
    423 except ValueError:
    424     if isinstance(xy, (list, tuple)) and len(xy) == 3:

ValueError: too many values to unpack (expected 2)
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: plots=[]
....: for u in sortables(A,c):
....:     la=lam(A,u)
....:     P=p_lambda(B(A,c),la,[])
....:     works=false
....:     for i in range(1,coxeter_number(A)//2+1):
....:         if P.intersection(p_lambda(B(A,c),la,c*i)).dimension()==0:
....:             plots=plots+[text3d(str(la),vector(la))]
....: sum(plots)
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: plots=[]
....: for u in sortables(A,c):
....:     la=lam(A,u)
....:     P=p_lambda(B(A,c),la,[])
....:     works=false
....:     for i in range(1,coxeter_number(A)//2+1):
....:         if P.intersection(p_lambda(B(A,c),la,c*i)).dimension()==0:
....:             plots=plots+[text3d(str(la),vector(la),color=red)]
....: sum(plots)
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
Cell In [1426], line 10
      8     for i in range(Integer(1),coxeter_number(A)//Integer(2)+Integer(1)):
      9         if P.intersection(p_lambda(B(A,c),la,c*i)).dimension()==Integer(0):
---> 10             plots=plots+[text3d(str(la),vector(la),color=red)]
     11 sum(plots)

NameError: name 'red' is not defined
sage: 
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: plots=[]
....: for u in sortables(A,c):
....:     la=lam(A,u)
....:     P=p_lambda(B(A,c),la,[])
....:     works=false
....:     for i in range(1,coxeter_number(A)//2+1):
....:         if P.intersection(p_lambda(B(A,c),la,c*i)).dimension()==0:
....:             plots=plots+[text3d(str(la),vector(la),color="red")]
....: sum(plots)

Launched html viewer for Graphics3d Object
sage: 
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: plots=[]
....: for u in sortables(A,c):
....:     la=lam(A,u)
....:     P=p_lambda(B(A,c),la,[])
....:     works=false
....:     for i in range(1,coxeter_number(A)//2+1):
....:         if P.intersection(p_lambda(B(A,c),la,c*i)).dimension()==0:
....:             plots=plots+[text3d(str(la),vector(la),color="green")]
....:         else
....:             plots=plots+[text3d(str(la),vector(la),color="red")]
....: sum(plots)
  Cell In [1428], line 11
    else
        ^
SyntaxError: expected ':'

sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: plots=[]
....: for u in sortables(A,c):
....:     la=lam(A,u)
....:     P=p_lambda(B(A,c),la,[])
....:     works=false
....:     for i in range(1,coxeter_number(A)//2+1):
....:         if P.intersection(p_lambda(B(A,c),la,c*i)).dimension()==0:
....:             plots=plots+[text3d(str(la),vector(la),color="green")]
....:         else:
....:             plots=plots+[text3d(str(la),vector(la),color="red")]
....: sum(plots)
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: plots=[]
....: for u in sortables(A,c):
....:     la=lam(A,u)
....:     P=p_lambda(B(A,c),la,[])
....:     for i in range(1,coxeter_number(A)//2+1):
....:         if P.intersection(p_lambda(B(A,c),la,c*i)).dimension()==0:
....:             plots=plots+[text3d(str(la),vector(la),color="green")]
....:         else:
....:             plots=plots+[text3d(str(la),vector(la),color="red")]
....: foo=sum(plots)

sage: 
sage: AA=ClusterAlgebra(B(A,c))
sage: f=AA.cluster_fan()
sage: f.plot()+foo
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: AA=ClusterAlgebra(B(A,c))
....: plots=[AA.cluster_fan()]
....: for u in sortables(A,c):
....:     la=lam(A,u)
....:     P=p_lambda(B(A,c),la,[])
....:     for i in range(1,coxeter_number(A)//2+1):
....:         if P.intersection(p_lambda(B(A,c),la,c*i)).dimension()==0:
....:             plots=plots+[text3d(str(la),vector(la),color="green")]
....:         else:
....:             plots=plots+[text3d(str(la),vector(la),color="red")]
....: sum(plots)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In [1434], line 13
     11         else:
     12             plots=plots+[text3d(str(la),vector(la),color="red")]
---> 13 sum(plots)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/misc/functional.py:594, in symbolic_sum(expression, *args, **kwds)
    592     return expression.sum(*args, **kwds)
    593 elif max(len(args),len(kwds)) <= 1:
--> 594     return sum(expression, *args, **kwds)
    595 else:
    596     from sage.symbolic.ring import SR

TypeError: unsupported operand type(s) for +: 'int' and 'RationalPolyhedralFan'
sage: 
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: AA=ClusterAlgebra(B(A,c))
....: plots=[AA.cluster_fan().plot()]
....: for u in sortables(A,c):
....:     la=lam(A,u)
....:     P=p_lambda(B(A,c),la,[])
....:     for i in range(1,coxeter_number(A)//2+1):
....:         if P.intersection(p_lambda(B(A,c),la,c*i)).dimension()==0:
....:             plots=plots+[text3d(str(la),vector(la),color="green")]
....:         else:
....:             plots=plots+[text3d(str(la),vector(la),color="red")]
....: sum(plots)
Launched html viewer for Graphics3d Object
sage: toric_plotter.options(wall_label=None,ray_label=None,wall_alpha=1)
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: AA=ClusterAlgebra(B(A,c))
....: plots=[AA.cluster_fan().plot()]
....: for u in sortables(A,c):
....:     la=lam(A,u)
....:     P=p_lambda(B(A,c),la,[])
....:     for i in range(1,coxeter_number(A)//2+1):
....:         if P.intersection(p_lambda(B(A,c),la,c*i)).dimension()==0:
....:             plots=plots+[text3d(str(la),vector(la),color="green")]
....:         else:
....:             plots=plots+[text3d(str(la),vector(la),color="red")]
....: sum(plots)
Launched html viewer for Graphics3d Object
### reloading attached file domination5.py modified at 15:24:51 ###
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: good=[]
....: bad=[]
....: for u in sortables(A,c):
....:     la=lam(A,u)
....:     P=p_lambda(B(A,c),la,[])
....:     for i in range(1,coxeter_number(A)//2+1):
....:         if P.intersection(p_lambda(B(A,c),la,c*i)).dimension()==0:
....:             good.append(la)
....:         else:
....:             bad.append(la)
....: good
[(-1, -1, -1),
 (-2, 1, -2),
 (-3, 5, -3),
 (-5, 4, -1),
 (-4, 5, -2),
 (-1, 4, -1),
 (-1, -1, 3),
 (-1, -1, 3),
 (-2, 1, 2),
 (-1, 2, 1),
 (5, -1, -1),
 (1, 3, -1),
 (2, -1, 2),
 (2, -1, 2),
 (2, -1, 2),
 (1, 1, 1)]
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: good=[]
....: bad=[]
....: for u in sortables(A,c):
....:     la=lam(A,u)
....:     P=p_lambda(B(A,c),la,[])
....:     for i in range(1,coxeter_number(A)//2+1):
....:         if P.intersection(p_lambda(B(A,c),la,c*i)).dimension()==0:
....:             good.append(la)
....:         else:
....:             bad.append(la)
....: good
....: bad
[(-1, -1, -1),
 (-2, 1, -2),
 (-3, 5, -3),
 (-5, 4, -1),
 (-4, 5, -2),
 (-1, 4, -1),
 (-1, -1, 3),
 (-1, -1, 3),
 (-2, 1, 2),
 (-1, 2, 1),
 (5, -1, -1),
 (1, 3, -1),
 (2, -1, 2),
 (2, -1, 2),
 (2, -1, 2),
 (1, 1, 1)]
[(-1, -1, -1),
 (-1, -1, -1),
 (-2, 1, -2),
 (-2, 1, -2),
 (-4, 3, -2),
 (-4, 3, -2),
 (-4, 3, -2),
 (-1, 2, -3),
 (-1, 2, -3),
 (-1, 2, -3),
 (-3, 4, -3),
 (-3, 4, -3),
 (-3, 4, -3),
 (-3, 5, -3),
 (-3, 5, -3),
 (-1, 5, -3),
 (-1, 5, -3),
 (-1, 5, -3),
 (-5, 4, -1),
 (-5, 4, -1),
 (-4, 5, -2),
 (-4, 5, -2),
 (-2, 5, -2),
 (-2, 5, -2),
 (-2, 5, -2),
 (-1, 4, -1),
 (-1, 4, -1),
 (-1, -1, 3),
 (-2, 1, 2),
 (-2, 1, 2),
 (-1, 2, 1),
 (-1, 2, 1),
 (5, -1, -1),
 (5, -1, -1),
 (4, 1, -2),
 (4, 1, -2),
 (4, 1, -2),
 (2, 3, -2),
 (2, 3, -2),
 (2, 3, -2),
 (1, 3, -1),
 (1, 3, -1),
 (1, 1, 1),
 (1, 1, 1)]
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: good=[]
....: bad=[]
....: for u in sortables(A,c):
....:     la=lam(A,u)
....:     P=p_lambda(B(A,c),la,[])
....:     for i in range(1,coxeter_number(A)//2+1):
....:         if P.intersection(p_lambda(B(A,c),la,c*i)).dimension()==0:
....:             works=true
....:             good.append(la)
....:             break
....:         bad.append(la)
....: good
....: bad
[(-1, -1, -1),
 (-2, 1, -2),
 (-3, 5, -3),
 (-5, 4, -1),
 (-4, 5, -2),
 (-1, 4, -1),
 (-1, -1, 3),
 (-2, 1, 2),
 (-1, 2, 1),
 (5, -1, -1),
 (1, 3, -1),
 (2, -1, 2),
 (1, 1, 1)]
[(-4, 3, -2),
 (-4, 3, -2),
 (-4, 3, -2),
 (-1, 2, -3),
 (-1, 2, -3),
 (-1, 2, -3),
 (-3, 4, -3),
 (-3, 4, -3),
 (-3, 4, -3),
 (-3, 5, -3),
 (-1, 5, -3),
 (-1, 5, -3),
 (-1, 5, -3),
 (-5, 4, -1),
 (-4, 5, -2),
 (-2, 5, -2),
 (-2, 5, -2),
 (-2, 5, -2),
 (-1, 4, -1),
 (-1, 4, -1),
 (-2, 1, 2),
 (-1, 2, 1),
 (-1, 2, 1),
 (4, 1, -2),
 (4, 1, -2),
 (4, 1, -2),
 (2, 3, -2),
 (2, 3, -2),
 (2, 3, -2),
 (1, 3, -1),
 (1, 3, -1),
 (1, 1, 1),
 (1, 1, 1)]
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: good=[]
....: bad=[]
....: for u in sortables(A,c):
....:     la=lam(A,u)
....:     P=p_lambda(B(A,c),la,[])
....:     works=false
....:     for i in range(1,coxeter_number(A)//2+1):
....:         if P.intersection(p_lambda(B(A,c),la,c*i)).dimension()==0:
....:             works=true
....:             good.append(la)
....:             break
....:     if not works:
....:         bad.append(la)
....: good
....: bad
[(-1, -1, -1),
 (-2, 1, -2),
 (-3, 5, -3),
 (-5, 4, -1),
 (-4, 5, -2),
 (-1, 4, -1),
 (-1, -1, 3),
 (-2, 1, 2),
 (-1, 2, 1),
 (5, -1, -1),
 (1, 3, -1),
 (2, -1, 2),
 (1, 1, 1)]
[(-4, 3, -2),
 (-1, 2, -3),
 (-3, 4, -3),
 (-1, 5, -3),
 (-2, 5, -2),
 (4, 1, -2),
 (2, 3, -2)]
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: good=[]
....: bad=[]
....: for u in sortables(A,c):
....:     la=lam(A,u)
....:     P=p_lambda(B(A,c),la,[])
....:     works=false
....:     for i in range(1,coxeter_number(A)//2+1):
....:         if P.intersection(p_lambda(B(A,c),la,c*i)).dimension()==0:
....:             works=true
....:             good.append(la)
....:             break
....:     if not works:
....:         bad.append(la)
....: plot(good)
....: 
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In [1442], line 16
     14     if not works:
     15         bad.append(la)
---> 16 plot(good)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/misc/decorators.py:497, in options.__call__.<locals>.wrapper(*args, **kwds)
    495     options['__original_opts'] = kwds
    496 options.update(kwds)
--> 497 return func(*args, **options)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/plot/plot.py:2046, in plot(funcs, *args, **kwds)
   2044     xmin = kwds.pop('xmin', -1)
   2045     xmax = kwds.pop('xmax', 1)
-> 2046     G = _plot(funcs, (xmin, xmax), **kwds)
   2048 # if there is one extra arg, then it had better be a tuple
   2049 elif n == 1:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/plot/plot.py:2173, in _plot(funcs, xrange, parametric, polar, fill, label, randomize, **options)
   2171 excluded_points = []
   2172 imag_tol = options["imaginary_tolerance"]
-> 2173 funcs, ranges = setup_for_eval_on_grid(funcs,
   2174                                        [xrange],
   2175                                        options['plot_points'],
   2176                                        imaginary_tolerance=imag_tol)
   2177 xmin, xmax, delta = ranges[0]
   2178 xrange = ranges[0][:2]

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/plot/misc.py:211, in setup_for_eval_on_grid(funcs, ranges, plot_points, return_vars, imaginary_tolerance)
    209 # Handle vectors, lists, tuples, etc.
    210 if isinstance(funcs, Iterable):
--> 211     funcs = tuple( try_make_fast(f) for f in funcs )
    212 else:
    213     funcs = try_make_fast(funcs)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/plot/misc.py:211, in <genexpr>(.0)
    209 # Handle vectors, lists, tuples, etc.
    210 if isinstance(funcs, Iterable):
--> 211     funcs = tuple( try_make_fast(f) for f in funcs )
    212 else:
    213     funcs = try_make_fast(funcs)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/plot/misc.py:203, in setup_for_eval_on_grid.<locals>.try_make_fast(f)
    200 else:
    201     # Convert things like ZZ(0) into constant functions.
    202     from sage.symbolic.ring import SR
--> 203     ff = fast_callable(SR(f),
    204                        vars=vars,
    205                        expect_one_var=eov,
    206                        domain=CDF)
    207     return FastCallablePlotWrapper(ff, imag_tol=imaginary_tolerance)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/parent.pyx:901, in sage.structure.parent.Parent.__call__ (build/cythonized/sage/structure/parent.c:12658)()
    899 if mor is not None:
    900     if no_extra_args:
--> 901         return mor._call_(x)
    902     else:
    903         return mor._call_with_args(x, args, kwds)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:163, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_ (build/cythonized/sage/structure/coerce_maps.c:6942)()
    161             print(type(C), C)
    162             print(type(C._element_constructor), C._element_constructor)
--> 163         raise
    164 
    165 cpdef Element _call_with_args(self, x, args=(), kwds={}) noexcept:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:158, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_ (build/cythonized/sage/structure/coerce_maps.c:6834)()
    156 cdef Parent C = self._codomain
    157 try:
--> 158     return C._element_constructor(x)
    159 except Exception:
    160     if print_warnings:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/symbolic/ring.pyx:376, in sage.symbolic.ring.SymbolicRing._element_constructor_ (build/cythonized/sage/symbolic/ring.c:8465)()
    374         TypeError: Malformed expression: λ + * !!!  1
    375     """
--> 376     return new_Expression(self, x)
    377 
    378 def _force_pyobject(self, x, bint force=False, bint recursive=True):

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/symbolic/expression.pyx:13819, in sage.symbolic.expression.new_Expression (build/cythonized/sage/symbolic/expression.cpp:126253)()
  13817         raise TypeError(f"unable to convert {x!r} to a symbolic expression")
  13818 else:
> 13819     raise TypeError(f"unable to convert {x!r} to a symbolic expression")
  13820 
  13821 return new_Expression_from_GEx(parent, exp)

TypeError: unable to convert (-1, -1, -1) to a symbolic expression
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: good=[]
....: bad=[]
....: for u in sortables(A,c):
....:     la=lam(A,u)
....:     P=p_lambda(B(A,c),la,[])
....:     works=false
....:     for i in range(1,coxeter_number(A)//2+1):
....:         if P.intersection(p_lambda(B(A,c),la,c*i)).dimension()==0:
....:             works=true
....:             good.append(la)
....:             break
....:     if not works:
....:         bad.append(la)
....: points(good)
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: good=[]
....: bad=[]
....: for u in sortables(A,c):
....:     la=lam(A,u)
....:     P=p_lambda(B(A,c),la,[])
....:     works=false
....:     for i in range(1,coxeter_number(A)//2+1):
....:         if P.intersection(p_lambda(B(A,c),la,c*i)).dimension()==0:
....:             works=true
....:             good.append(la)
....:             break
....:     if not works:
....:         bad.append(la)
....: points(good,size=50)
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: good=[]
....: bad=[]
....: for u in sortables(A,c):
....:     la=lam(A,u)
....:     P=p_lambda(B(A,c),la,[])
....:     works=false
....:     for i in range(1,coxeter_number(A)//2+1):
....:         if P.intersection(p_lambda(B(A,c),la,c*i)).dimension()==0:
....:             works=true
....:             good.append(la)
....:             break
....:     if not works:
....:         bad.append(la)
....: points(good,size=50,color="lightgreen")
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: good=[]
....: bad=[]
....: for u in sortables(A,c):
....:     la=lam(A,u)
....:     P=p_lambda(B(A,c),la,[])
....:     works=false
....:     for i in range(1,coxeter_number(A)//2+1):
....:         if P.intersection(p_lambda(B(A,c),la,c*i)).dimension()==0:
....:             works=true
....:             good.append(la)
....:             break
....:     if not works:
....:         bad.append(la)
....: points(good,size=50,color="lightgreen")
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: good=[]
....: bad=[]
....: for u in sortables(A,c):
....:     la=lam(A,u)
....:     P=p_lambda(B(A,c),la,[])
....:     works=false
....:     for i in range(1,coxeter_number(A)//2+1):
....:         if P.intersection(p_lambda(B(A,c),la,c*i)).dimension()==0:
....:             works=true
....:             good.append(la)
....:             break
....:     if not works:
....:         bad.append(la)
....: points(good,size=50,color="lightgreen")+points(bad,size=50,color="red")
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: good=[]
....: bad=[]
....: for u in sortables(A,c):
....:     la=lam(A,u)
....:     P=p_lambda(B(A,c),la,[])
....:     works=false
....:     for i in range(1,coxeter_number(A)//2+1):
....:         if P.intersection(p_lambda(B(A,c),la,c*i)).dimension()==0:
....:             works=true
....:             good.append(la)
....:             break
....:     if not works:
....:         bad.append(la)
....: AA=ClusterAlgebra(B(A,c))
....: points(good,size=50,color="lightgreen")+points(bad,size=50,color="red")+AA
....: .cluster_fan().plot()
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: good=[]
....: bad=[]
....: for u in sortables(A,c):
....:     la=lam(A,u)
....:     P=p_lambda(B(A,c),la,[])
....:     works=false
....:     for i in range(1,coxeter_number(A)//2+1):
....:         if P.intersection(p_lambda(B(A,c),la,c*i)).dimension()==0:
....:             works=true
....:             good.append(la/la.norm())
....:             break
....:     if not works:
....:         bad.append(la/la.norm())
....: AA=ClusterAlgebra(B(A,c))
....: points(good,size=50,color="lightgreen")+points(bad,size=50,color="red")+AA
....: .cluster_fan().plot()
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: good=[]
....: bad=[]
....: for u in sortables(A,c):
....:     la=lam(A,u)
....:     P=p_lambda(B(A,c),la,[])
....:     works=false
....:     for i in range(1,coxeter_number(A)//2+1):
....:         if P.intersection(p_lambda(B(A,c),la,c*i)).dimension()==0:
....:             works=true
....:             good.append(4*la/la.norm())
....:             break
....:     if not works:
....:         bad.append(4*la/la.norm())
....: AA=ClusterAlgebra(B(A,c))
....: points(good,size=50,color="lightgreen")+points(bad,size=50,color="red")+AA
....: .cluster_fan().plot()
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: good=[]
....: bad=[]
....: for u in sortables(A,c):
....:     la=lam(A,u)
....:     P=p_lambda(B(A,c),la,[])
....:     works=false
....:     for i in range(1,coxeter_number(A)//2+1):
....:         if P.intersection(p_lambda(B(A,c),la,c*i)).dimension()==0:
....:             works=true
....:             good.append(3*la/la.norm())
....:             break
....:     if not works:
....:         bad.append(3*la/la.norm())
....: AA=ClusterAlgebra(B(A,c))
....: points(good,size=50,color="lightgreen")+points(bad,size=50,color="red")+AA
....: .cluster_fan().plot()
Launched html viewer for Graphics3d Object
sage: good
[(-sqrt(3), -sqrt(3), -sqrt(3)),
 (-2, 1, -2),
 (-9/43*sqrt(43), 15/43*sqrt(43), -9/43*sqrt(43)),
 (-5/14*sqrt(42), 2/7*sqrt(42), -1/14*sqrt(42)),
 (-4/5*sqrt(5), sqrt(5), -2/5*sqrt(5)),
 (-1/2*sqrt(2), 2*sqrt(2), -1/2*sqrt(2)),
 (-3/11*sqrt(11), -3/11*sqrt(11), 9/11*sqrt(11)),
 (-2, 1, 2),
 (-1/2*sqrt(6), sqrt(6), 1/2*sqrt(6)),
 (5/3*sqrt(3), -1/3*sqrt(3), -1/3*sqrt(3)),
 (3/11*sqrt(11), 9/11*sqrt(11), -3/11*sqrt(11)),
 (2, -1, 2),
 (sqrt(3), sqrt(3), sqrt(3))]
sage: bad
[(-12/29*sqrt(29), 9/29*sqrt(29), -6/29*sqrt(29)),
 (-3/14*sqrt(14), 3/7*sqrt(14), -9/14*sqrt(14)),
 (-9/34*sqrt(34), 6/17*sqrt(34), -9/34*sqrt(34)),
 (-3/35*sqrt(35), 3/7*sqrt(35), -9/35*sqrt(35)),
 (-2/11*sqrt(33), 5/11*sqrt(33), -2/11*sqrt(33)),
 (4/7*sqrt(21), 1/7*sqrt(21), -2/7*sqrt(21)),
 (6/17*sqrt(17), 9/17*sqrt(17), -6/17*sqrt(17))]
sage: A=CartanMatrix(['C',4])
....: c=[0,2,1,3]
....: coxnum=coxeter_number(A)
....: n=1
....: for v in sortables(A,c):
....:     print(n,v)
....:     n+=1
....:     Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in ra
....: 
....: nge((coxnum+2)*A.nrows()))
....:     fails=true
....:     for i in range(len(Ps)):
....:         for j in range(i+1,len(Ps)):
....:             if (Ps[i].intersection(Ps[j])).dimension()==0:
....:                 fails=false
....:                 break
....:     if fails:
....:         print('FAILS!')
....:         break
....: 
  Cell In [1454], line 9
    nge((coxnum+Integer(2))*A.nrows()))
    ^
SyntaxError: invalid syntax

sage: A=CartanMatrix(['C',4])
....: c=[0,2,1,3]
....: coxnum=coxeter_number(A)
....: n=1
....: for v in sortables(A,c):
....:     print(n,v)
....:     n+=1
....:     Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in ra
....: nge((coxnum+2)*A.nrows()))
....:     fails=true
....:     for i in range(len(Ps)):
....:         for j in range(i+1,len(Ps)):
....:             if (Ps[i].intersection(Ps[j])).dimension()==0:
....:                 fails=false
....:                 break
....:     if fails:
....:         print('FAILS!')
....:         break
1 [0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3]
2 [0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1]
3 [0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 3]
4 [0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2]
5 [0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0]
6 [0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 2, 3]
7 [0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 2]
8 [0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3]
9 [0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 0]
10 [0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1]
11 [0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 3]
12 [0, 2, 1, 3, 0, 2, 1, 3, 0, 2]
13 [0, 2, 1, 3, 0, 2, 1, 3, 0]
14 [0, 2, 1, 3, 0, 2, 1, 3, 2, 1, 3, 2]
15 [0, 2, 1, 3, 0, 2, 1, 3, 2, 1, 3]
16 [0, 2, 1, 3, 0, 2, 1, 3, 2, 1]
17 [0, 2, 1, 3, 0, 2, 1, 3, 2, 3]
18 [0, 2, 1, 3, 0, 2, 1, 3, 2]
19 [0, 2, 1, 3, 0, 2, 1, 3]
20 [0, 2, 1, 3, 0, 2, 1, 0]
21 [0, 2, 1, 3, 0, 2, 1]
22 [0, 2, 1, 3, 0, 2, 3, 2]
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [1455], line 8
      6 print(n,v)
      7 n+=Integer(1)
----> 8 Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in range((coxnum+Integer(2))*A.nrows()))
      9 fails=true
     10 for i in range(len(Ps)):

Cell In [1455], line 8, in <genexpr>(.0)
      6 print(n,v)
      7 n+=Integer(1)
----> 8 Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in range((coxnum+Integer(2))*A.nrows()))
      9 fails=true
     10 for i in range(len(Ps)):

File ~/git/affine_dominance/software/domination4.py:161, in p_lambda_faster(B, la, seq)
    157         P=Ep*Pp
    158     else:
    159         #print("Pp:   ",Pp,Pp.vertices(),Pp.rays(),Pp.lines(),"\n")
    160         #print("Pm:   ",Pm,Pm.vertices(),Pm.rays(),Pm.lines(),"\n\n")
--> 161         P=(Ep*Pp).convex_hull(Em*Pm)
    162     B.mutate(k)
    163 return P

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1312, in Polyhedron_base5.convex_hull(self, other)
   1310 hull_rays = self.rays() + other.rays()
   1311 hull_lines = self.lines() + other.lines()
-> 1312 return self.parent().element_class(self.parent(), [hull_vertices, hull_rays, hull_lines], None)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:174, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    171     lines = tuple(lines)
    173 if vertices or rays or lines:
--> 174     self._init_from_Vrepresentation(vertices, rays, lines, **kwds)
    175 else:
    176     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:99, in Polyhedron_ppl._init_from_Vrepresentation(self, vertices, rays, lines, minimize, verbose)
     72 def _init_from_Vrepresentation(self, vertices, rays, lines, minimize=True, verbose=False):
     73     """
     74     Construct polyhedron from V-representation data.
     75 
   (...)
     97         sage: Polyhedron_ppl._init_from_Vrepresentation(p, [], [], [])
     98     """
---> 99     gs = self._convert_generators_to_ppl(vertices, rays, lines)
    100     if gs.empty():
    101         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'empty')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:477, in Polyhedron_ppl._convert_generators_to_ppl(vertices, rays, lines)
    475     rays = []
    476 for r in rays:
--> 477     gs.insert(Polyhedron_ppl._convert_generator_to_ppl(r, RAY))
    478 if lines is None:
    479     lines = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:442, in Polyhedron_ppl._convert_generator_to_ppl(v, typ)
    440 d = LCM_list([denominator(v_i) for v_i in v])
    441 if d.is_one():
--> 442     return ob(Linear_Expression(v, 0))
    443 else:
    444     dv = [ d*v_i for v_i in v ]

File ppl/linear_algebra.pyx:654, in ppl.linear_algebra.Linear_Expression.__init__()

File ppl/linear_algebra.pyx:49, in ppl.linear_algebra.PPL_Coefficient_from_pyobject()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:1107, in sage.structure.element.Element.__richcmp__ (build/cythonized/sage/structure/element.c:18121)()
   1105         return (<Element>self)._richcmp_(other, op)
   1106     else:
-> 1107         return coercion_model.richcmp(self, other, op)
   1108 
   1109 cpdef _richcmp_(left, right, int op) noexcept:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:2021, in sage.structure.coerce.CoercionModel.richcmp (build/cythonized/sage/structure/coerce.c:26173)()
   2019 # Coerce to a common parent
   2020 try:
-> 2021     x, y = self.canonical_coercion(x, y)
   2022 except (TypeError, NotImplementedError):
   2023     pass

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1422, in sage.structure.coerce.CoercionModel.canonical_coercion (build/cythonized/sage/structure/coerce.c:18956)()
   1420             self._record_exception()
   1421 
-> 1422     raise TypeError("no common canonical parent for objects with parents: '%s' and '%s'"%(xp, yp))
   1423 
   1424 cpdef coercion_maps(self, R, S) noexcept:

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['C',4])
....: c=[0,2,1,3]
....: coxnum=coxeter_number(A)
....: num=1
....: n=A.nrows()
....: for v in sortables(A,c):
....:     print(num,v)
....:     num+=1
....:     Ps=list(p_lambda(B(A,c),lam(A,v),c_inf_prefix(c,i*n)) for i in range((
....: coxnum+2)))
....:     fails=true
....:     for i in range(len(Ps)):
....:         for j in range(i+1,len(Ps)):
....:             if (Ps[i].intersection(Ps[j])).dimension()==0:
....:                 fails=false
....:                 break
....:     if fails:
....:         print('FAILS!')
....:         break
....: 
1 [0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3]
2 [0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1]
3 [0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 3]
4 [0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2]
5 [0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0]
6 [0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 2, 3]
7 [0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 2]
8 [0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3]
9 [0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 0]
10 [0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1]
11 [0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 3]
12 [0, 2, 1, 3, 0, 2, 1, 3, 0, 2]
13 [0, 2, 1, 3, 0, 2, 1, 3, 0]
14 [0, 2, 1, 3, 0, 2, 1, 3, 2, 1, 3, 2]
FAILS!
sage: A=CartanMatrix(['C',5])
....: c=[0,2,1,3]
....: coxnum=coxeter_number(A)
....: num=1
....: n=A.nrows()
....: for v in sortables(A,c):
....:     print(num,v)
....:     num+=1
....:     Ps=list(p_lambda(B(A,c),lam(A,v),c_inf_prefix(c,i*n)) for i in range((
....: coxnum+2)))
....:     fails=true
....:     for i in range(len(Ps)):
....:         for j in range(i+1,len(Ps)):
....:             if (Ps[i].intersection(Ps[j])).dimension()==0:
....:                 fails=false
....:                 break
....:     if fails:
....:         print('FAILS!')
....:         break
1 [0, 2, 1, 3, 0, 2, 1, 3, 0, 2]
---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
Cell In [1457], line 9
      7 print(num,v)
      8 num+=Integer(1)
----> 9 Ps=list(p_lambda(B(A,c),lam(A,v),c_inf_prefix(c,i*n)) for i in range((coxnum+Integer(2))))
     10 fails=true
     11 for i in range(len(Ps)):

Cell In [1457], line 9, in <genexpr>(.0)
      7 print(num,v)
      8 num+=Integer(1)
----> 9 Ps=list(p_lambda(B(A,c),lam(A,v),c_inf_prefix(c,i*n)) for i in range((coxnum+Integer(2))))
     10 fails=true
     11 for i in range(len(Ps)):

File ~/git/affine_dominance/software/domination5.py:89, in B(A, c)
     87     out[i,i]=0
     88     for j in range(i+1,n):
---> 89         out[c[i],c[j]]=-A[c[i],c[j]]
     90         out[c[j],c[i]]=A[c[j],c[i]]
     91 return out

IndexError: list index out of range
sage: A=CartanMatrix(['C',5])
....: c=[0,2,4,1,3]
....: coxnum=coxeter_number(A)
....: num=1
....: n=A.nrows()
....: for v in sortables(A,c):
....:     print(num,v)
....:     num+=1
....:     Ps=list(p_lambda(B(A,c),lam(A,v),c_inf_prefix(c,i*n)) for i in range((
....: coxnum+2)))
....:     fails=true
....:     for i in range(len(Ps)):
....:         for j in range(i+1,len(Ps)):
....:             if (Ps[i].intersection(Ps[j])).dimension()==0:
....:                 fails=false
....:                 break
....:     if fails:
....:         print('FAILS!')
....:         break
1 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
2 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1]
3 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 3]
4 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
5 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 1]
FAILS!
sage: A=CartanMatrix(['C',5])
....: c=[0,2,4,1,3]
....: coxnum=coxeter_number(A)
....: num=1
....: n=A.nrows()
....: for v in sortables(A,c):
....:     print(num,v)
....:     num+=1
....:     Ps=list(p_lambda(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in range((co
....: xnum+2)*n))
....:     fails=true
....:     for i in range(len(Ps)):
....:         for j in range(i+1,len(Ps)):
....:             if (Ps[i].intersection(Ps[j])).dimension()==0:
....:                 fails=false
....:                 break
....:     if fails:
....:         print('FAILS!')
....:         break
1 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
2 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1]
3 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 3]
4 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
5 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 1]
6 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2]
7 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 4]
8 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0]
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [1459], line 9
      7 print(num,v)
      8 num+=Integer(1)
----> 9 Ps=list(p_lambda(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in range((coxnum+Integer(2))*n))
     10 fails=true
     11 for i in range(len(Ps)):

Cell In [1459], line 9, in <genexpr>(.0)
      7 print(num,v)
      8 num+=Integer(1)
----> 9 Ps=list(p_lambda(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in range((coxnum+Integer(2))*n))
     10 fails=true
     11 for i in range(len(Ps)):

File ~/git/affine_dominance/software/domination5.py:49, in p_lambda(B, la, seq)
     45         P=Ep*Pp
     46     else:
     47         #print("Pp:   ",Pp,Pp.vertices(),Pp.rays(),Pp.lines(),"\n")
     48         #print("Pm:   ",Pm,Pm.vertices(),Pm.rays(),Pm.lines(),"\n\n")
---> 49         P=(Ep*Pp).convex_hull(Em*Pm)
     50     B.mutate(k)
     51 return P

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1312, in Polyhedron_base5.convex_hull(self, other)
   1310 hull_rays = self.rays() + other.rays()
   1311 hull_lines = self.lines() + other.lines()
-> 1312 return self.parent().element_class(self.parent(), [hull_vertices, hull_rays, hull_lines], None)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:174, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    171     lines = tuple(lines)
    173 if vertices or rays or lines:
--> 174     self._init_from_Vrepresentation(vertices, rays, lines, **kwds)
    175 else:
    176     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:99, in Polyhedron_ppl._init_from_Vrepresentation(self, vertices, rays, lines, minimize, verbose)
     72 def _init_from_Vrepresentation(self, vertices, rays, lines, minimize=True, verbose=False):
     73     """
     74     Construct polyhedron from V-representation data.
     75 
   (...)
     97         sage: Polyhedron_ppl._init_from_Vrepresentation(p, [], [], [])
     98     """
---> 99     gs = self._convert_generators_to_ppl(vertices, rays, lines)
    100     if gs.empty():
    101         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'empty')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:473, in Polyhedron_ppl._convert_generators_to_ppl(vertices, rays, lines)
    471     vertices = []
    472 for v in vertices:
--> 473     gs.insert(Polyhedron_ppl._convert_generator_to_ppl(v, VERTEX))
    474 if rays is None:
    475     rays = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:446, in Polyhedron_ppl._convert_generator_to_ppl(v, typ)
    444 dv = [ d*v_i for v_i in v ]
    445 if typ == VERTEX:
--> 446     return ob(Linear_Expression(dv, 0), d)
    447 else:
    448     return ob(Linear_Expression(dv, 0))

File ppl/generator.pyx:252, in ppl.generator.Generator.point()

File ppl/generator.pyx:248, in ppl.generator.Generator.point()

File ppl/linear_algebra.pyx:49, in ppl.linear_algebra.PPL_Coefficient_from_pyobject()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/rings/integer.pyx:914, in sage.rings.integer.Integer.__richcmp__ (build/cythonized/sage/rings/integer.c:16498)()
    912     c = mpz_cmp_d((<Integer>left).value, d)
    913 else:
--> 914     return coercion_model.richcmp(left, right, op)
    915 
    916 return rich_to_bool_sgn(op, c)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:2021, in sage.structure.coerce.CoercionModel.richcmp (build/cythonized/sage/structure/coerce.c:26173)()
   2019 # Coerce to a common parent
   2020 try:
-> 2021     x, y = self.canonical_coercion(x, y)
   2022 except (TypeError, NotImplementedError):
   2023     pass

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1422, in sage.structure.coerce.CoercionModel.canonical_coercion (build/cythonized/sage/structure/coerce.c:18956)()
   1420             self._record_exception()
   1421 
-> 1422     raise TypeError("no common canonical parent for objects with parents: '%s' and '%s'"%(xp, yp))
   1423 
   1424 cpdef coercion_maps(self, R, S) noexcept:

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['C',5])
....: c=[0,2,4,1,3]
....: coxnum=coxeter_number(A)
....: num=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()) for i
....: in range(coxnum+2)))
....:     print(num,v)
....:     num+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
2 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1]
3 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 3]
4 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
5 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 1]
6 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2]
7 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 4]
8 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0]
9 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 3]
10 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4]
11 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2]
12 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 4]
13 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
14 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 0]
15 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1]
16 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 3, 4]
17 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 3]
18 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
19 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 1, 0]
20 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 1]
21 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2]
22 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 4]
23 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0]
24 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4]
25 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 1, 3, 2]
26 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 1, 3, 4]
27 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 1, 3]
28 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 1]
29 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 3, 4]
30 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 3]
31 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4]
32 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 1]
33 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2]
34 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 4]
35 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
36 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 0]
37 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1]
38 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 3, 2, 4, 3]
39 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 3, 2, 4]
40 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 3, 2]
41 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 3, 4]
42 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 3]
43 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
44 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 1, 0]
45 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 1]
46 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2]
47 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 4, 3]
48 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 4]
49 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0]
50 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2]
51 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3]
52 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1]
53 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 3]
54 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4]
55 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 1]
56 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 1, 3, 2]
57 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 1, 3, 4]
58 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 1, 3]
59 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 1]
60 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 3, 2, 4, 3]
61 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 3, 2, 4]
62 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 3, 2]
63 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 3, 4]
64 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 3]
65 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4]
66 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 1]
67 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2]
68 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 4, 3]
69 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 4]
70 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
71 [0, 2, 4, 1, 3, 0, 2, 4, 1, 0]
72 [0, 2, 4, 1, 3, 0, 2, 4, 1]
73 [0, 2, 4, 1, 3, 0, 2, 4, 3, 2, 4, 3, 2]
74 [0, 2, 4, 1, 3, 0, 2, 4, 3, 2, 4, 3]
75 [0, 2, 4, 1, 3, 0, 2, 4, 3, 2, 4]
76 [0, 2, 4, 1, 3, 0, 2, 4, 3, 2]
77 [0, 2, 4, 1, 3, 0, 2, 4, 3, 4, 3]
78 [0, 2, 4, 1, 3, 0, 2, 4, 3, 4]
79 [0, 2, 4, 1, 3, 0, 2, 4, 3]
80 [0, 2, 4, 1, 3, 0, 2, 4]
81 [0, 2, 4, 1, 3, 0, 2, 1, 3, 0, 2]
82 [0, 2, 4, 1, 3, 0, 2, 1, 3, 0]
83 [0, 2, 4, 1, 3, 0, 2, 1, 3, 2]
84 [0, 2, 4, 1, 3, 0, 2, 1, 3]
85 [0, 2, 4, 1, 3, 0, 2, 1, 0]
86 [0, 2, 4, 1, 3, 0, 2, 1]
87 [0, 2, 4, 1, 3, 0, 2, 3]
88 [0, 2, 4, 1, 3, 0, 2]
89 [0, 2, 4, 1, 3, 0, 4, 3]
90 [0, 2, 4, 1, 3, 0, 4]
91 [0, 2, 4, 1, 3, 0]
92 [0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3]
93 [0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1]
94 [0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 3]
95 [0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4]
96 [0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 1]
97 [0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2]
98 [0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 4]
99 [0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3]
100 [0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1]
101 [0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 3, 2, 4]
102 [0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 3, 2]
103 [0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 3, 4]
104 [0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 3]
105 [0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4]
106 [0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 1]
107 [0, 2, 4, 1, 3, 2, 4, 1, 3, 2]
108 [0, 2, 4, 1, 3, 2, 4, 1, 3, 4, 3]
109 [0, 2, 4, 1, 3, 2, 4, 1, 3, 4]
110 [0, 2, 4, 1, 3, 2, 4, 1, 3]
111 [0, 2, 4, 1, 3, 2, 4, 1]
112 [0, 2, 4, 1, 3, 2, 4, 3, 2, 4, 3, 2]
113 [0, 2, 4, 1, 3, 2, 4, 3, 2, 4, 3]
114 [0, 2, 4, 1, 3, 2, 4, 3, 2, 4]
115 [0, 2, 4, 1, 3, 2, 4, 3, 2]
116 [0, 2, 4, 1, 3, 2, 4, 3, 4, 3]
117 [0, 2, 4, 1, 3, 2, 4, 3, 4]
118 [0, 2, 4, 1, 3, 2, 4, 3]
119 [0, 2, 4, 1, 3, 2, 4]
120 [0, 2, 4, 1, 3, 2, 1, 3]
121 [0, 2, 4, 1, 3, 2, 1]
122 [0, 2, 4, 1, 3, 2, 3]
123 [0, 2, 4, 1, 3, 2]
124 [0, 2, 4, 1, 3, 4, 3]
125 [0, 2, 4, 1, 3, 4]
126 [0, 2, 4, 1, 3]
127 [0, 2, 4, 1, 0, 2, 1]
128 [0, 2, 4, 1, 0, 2]
129 [0, 2, 4, 1, 0]
130 [0, 2, 4, 1, 2]
131 [0, 2, 4, 1]
132 [0, 2, 4, 3, 2, 4, 3, 2, 4, 3]
133 [0, 2, 4, 3, 2, 4, 3, 2, 4]
134 [0, 2, 4, 3, 2, 4, 3, 2]
135 [0, 2, 4, 3, 2, 4, 3, 4]
136 [0, 2, 4, 3, 2, 4, 3]

137 [0, 2, 4, 3, 2, 4]
^[[A138 [0, 2, 4, 3, 2]
139 [0, 2, 4, 3, 4, 3]
^[[A140 [0, 2, 4, 3, 4]
141 [0, 2, 4, 3]
142 [0, 2, 4]
143 [0, 2, 1, 3, 0, 2, 1, 3, 0, 2]
144 [0, 2, 1, 3, 0, 2, 1, 3, 0]
145 [0, 2, 1, 3, 0, 2, 1, 3, 2]
146 [0, 2, 1, 3, 0, 2, 1, 3]
147 [0, 2, 1, 3, 0, 2, 1, 0]
148 [0, 2, 1, 3, 0, 2, 1]
149 [0, 2, 1, 3, 0, 2, 3]
150 [0, 2, 1, 3, 0, 2]
151 [0, 2, 1, 3, 0]
152 [0, 2, 1, 3, 2, 1, 3]
153 [0, 2, 1, 3, 2, 1]
154 [0, 2, 1, 3, 2, 3]
155 [0, 2, 1, 3, 2]
156 [0, 2, 1, 3]
157 [0, 2, 1, 0, 2, 1]
158 [0, 2, 1, 0, 2]
159 [0, 2, 1, 0]
160 [0, 2, 1, 2]
161 [0, 2, 1]
162 [0, 2, 3, 2]
163 [0, 2, 3]
164 [0, 2]
165 [0, 4, 1, 3, 0, 4, 3]
166 [0, 4, 1, 3, 0, 4]
167 [0, 4, 1, 3, 0]
168 [0, 4, 1, 3, 4, 3]
169 [0, 4, 1, 3, 4]
170 [0, 4, 1, 3]
171 [0, 4, 1, 0]
172 [0, 4, 1]
173 [0, 4, 3, 4, 3]
174 [0, 4, 3, 4]
175 [0, 4, 3]
176 [0, 4]
177 [0, 1, 3, 0]
178 [0, 1, 3]
179 [0, 1, 0]
180 [0, 1]
181 [0, 3]
182 [0]
183 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3]
184 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1]
185 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 3]
186 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4]
187 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 1]
188 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2]
189 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 4]
190 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3]
191 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1]
192 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 3, 2, 4]
193 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 3, 2]
194 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 3, 4]
195 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 3]
196 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4]
197 [2, 4, 1, 3, 2, 4, 1, 3, 2, 1]
198 [2, 4, 1, 3, 2, 4, 1, 3, 2]
199 [2, 4, 1, 3, 2, 4, 1, 3, 4, 3]
200 [2, 4, 1, 3, 2, 4, 1, 3, 4]
201 [2, 4, 1, 3, 2, 4, 1, 3]
202 [2, 4, 1, 3, 2, 4, 1]
203 [2, 4, 1, 3, 2, 4, 3, 2, 4, 3, 2]
204 [2, 4, 1, 3, 2, 4, 3, 2, 4, 3]
205 [2, 4, 1, 3, 2, 4, 3, 2, 4]
206 [2, 4, 1, 3, 2, 4, 3, 2]
207 [2, 4, 1, 3, 2, 4, 3, 4, 3]
208 [2, 4, 1, 3, 2, 4, 3, 4]
209 [2, 4, 1, 3, 2, 4, 3]
210 [2, 4, 1, 3, 2, 4]
211 [2, 4, 1, 3, 2, 1, 3]
212 [2, 4, 1, 3, 2, 1]
213 [2, 4, 1, 3, 2, 3]
214 [2, 4, 1, 3, 2]
215 [2, 4, 1, 3, 4, 3]
216 [2, 4, 1, 3, 4]
217 [2, 4, 1, 3]
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [1460], line 6
      4 num=Integer(1)
      5 for v in sortables(A,c):
----> 6     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()) for i in range(coxnum+Integer(2))))
      7     print(num,v)
      8     num+=Integer(1)

File ~/git/affine_dominance/software/domination5.py:15, in p_lambda_int(B, la, seqs)
     13 P = p_lambda(B, la, seqs[0])
     14 for s in seqs:
---> 15     P = P.intersection(p_lambda(B, la, s))
     16     if P.dimension()==0:
     17         break

File ~/git/affine_dominance/software/domination5.py:49, in p_lambda(B, la, seq)
     45         P=Ep*Pp
     46     else:
     47         #print("Pp:   ",Pp,Pp.vertices(),Pp.rays(),Pp.lines(),"\n")
     48         #print("Pm:   ",Pm,Pm.vertices(),Pm.rays(),Pm.lines(),"\n\n")
---> 49         P=(Ep*Pp).convex_hull(Em*Pm)
     50     B.mutate(k)
     51 return P

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4099, in sage.structure.element.Matrix.__mul__ (build/cythonized/sage/structure/element.c:35219)()
   4097 
   4098         if BOTH_ARE_ELEMENT(cl):
-> 4099             return coercion_model.bin_op(left, right, mul)
   4100 
   4101         cdef long value

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1222, in sage.structure.coerce.CoercionModel.bin_op (build/cythonized/sage/structure/coerce.c:15809)()
   1220 if action is not None:
   1221     if (<Action>action)._is_left:
-> 1222         return (<Action>action)._act_(x, y)
   1223     else:
   1224         return (<Action>action)._act_(y, x)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_actions.pyx:157, in sage.structure.coerce_actions.ActedUponAction._act_ (build/cythonized/sage/structure/coerce_actions.c:8579)()
    155     <... 'sage.structure.coerce_actions.ActedUponAction'>
    156 """
--> 157 return (<Element>x)._acted_upon_(g, not self._is_left)
    158 
    159 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:949, in sage.structure.element.Element._acted_upon_ (build/cythonized/sage/structure/element.c:16495)()
    947     return None
    948 
--> 949 cpdef _acted_upon_(self, x, bint self_on_left) noexcept:
    950     """
    951     Use this method to implement ``self`` acted on by x.

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1450, in Polyhedron_base5._acted_upon_(self, actor, self_on_left)
   1448         raise ValueError("matrices should act on the left")
   1449     else:
-> 1450         return self.linear_transformation(actor)
   1451 else:
   1452     return self.dilation(actor)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1879, in Polyhedron_base5.linear_transformation(self, linear_transf, new_base_ring)
   1873     pref_rep = 'Vrep' if self.n_vertices() <= self.n_inequalities() else 'Hrep'
   1875     return new_parent.element_class(new_parent, [new_vertices, new_rays, new_lines],
   1876                                     [new_inequalities, new_equations],
   1877                                     Vrep_minimal=True, Hrep_minimal=True, pref_rep=pref_rep)
-> 1879 return new_parent.element_class(new_parent, [tuple(new_vertices), tuple(new_rays), tuple(new_lines)], None)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:70, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
---> 70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:195, in Polyhedron_ppl.set_immutable(self)
    193         raise e
    194 if not hasattr(self, '_Hrepresentation'):
--> 195     self._init_Hrepresentation_from_ppl(True)
    196 self._is_mutable = False

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:344, in Polyhedron_ppl._init_Hrepresentation_from_ppl(self, minimize)
    342 for c in cs:
    343     if c.is_inequality():
--> 344         parent._make_Inequality(self, (c.inhomogeneous_term(),) + c.coefficients())
    345     elif c.is_equality():
    346         parent._make_Equation(self, (c.inhomogeneous_term(),) + c.coefficients())

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:1069, in Polyhedra_base._make_Inequality(self, polyhedron, data)
   1067 except IndexError:
   1068     obj = Inequality(self)
-> 1069 obj._set_data(polyhedron, data)
   1070 return obj

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/representation.py:439, in Hrepresentation._set_data(self, polyhedron, data)
    436 if len(data) != self._vector.degree():
    437     raise ValueError('H-representation data requires a list of length ambient_dim+1')
--> 439 self._vector[:] = data
    440 self._A[:] = data[1:]
    441 self._b = self._base_ring(data[0])

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/modules/free_module_element.pyx:1893, in sage.modules.free_module_element.FreeModuleElement.__setitem__ (build/cythonized/sage/modules/free_module_element.c:20047)()
   1891 if isinstance(i, slice):
   1892     PySlice_GetIndicesEx(i, d, &start, &stop, &step, &slicelength)
-> 1893     values = [R(x) for x in value]
   1894     if len(values) != slicelength:
   1895         raise IndexError("slice assignment would change dimension")

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/parent.pyx:901, in sage.structure.parent.Parent.__call__ (build/cythonized/sage/structure/parent.c:12658)()
    899 if mor is not None:
    900     if no_extra_args:
--> 901         return mor._call_(x)
    902     else:
    903         return mor._call_with_args(x, args, kwds)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:158, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_ (build/cythonized/sage/structure/coerce_maps.c:6834)()
    156 cdef Parent C = self._codomain
    157 try:
--> 158     return C._element_constructor(x)
    159 except Exception:
    160     if print_warnings:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/rings/rational.pyx:536, in sage.rings.rational.Rational.__init__ (build/cythonized/sage/rings/rational.cpp:14305)()
    534     """
    535     if x is not None:
--> 536         self.__set_value(x, base)
    537 
    538 def __reduce__(self):

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/rings/rational.pyx:670, in sage.rings.rational.Rational._Rational__set_value (build/cythonized/sage/rings/rational.cpp:16246)()
    668         raise TypeError("unable to convert {!r} to a rational".format(x))
    669 
--> 670 elif isinstance(x, fractions.Fraction):
    671     mpz_set(mpq_numref(self.value), (<integer.Integer> integer.Integer(x.numerator)).value)
    672     mpz_set(mpq_denref(self.value), (<integer.Integer> integer.Integer(x.denominator)).value)

File <frozen abc>:117, in __instancecheck__(cls, instance)

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['C',5])
....: c=[0,2,4,1,3]
....: coxnum=coxeter_number(A)
....: num=1
....: for v in sortables(A,c):
....:     P=p_lambda(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()) for i in r
....: ange(coxnum+2)))
....:     print(num,v)
....:     num+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In [1461], line 6
      4 num=Integer(1)
      5 for v in sortables(A,c):
----> 6     P=p_lambda(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()) for i in range(coxnum+Integer(2))))
      7     print(num,v)
      8     num+=Integer(1)

File ~/git/affine_dominance/software/domination5.py:27, in p_lambda(B, la, seq)
     25     B = block_matrix([[B,matrix(la).transpose()]])
     26     for k in reversed(seq):
---> 27         B.mutate(k)
     28     B, la  = B[:,:-1], B[:,-1] 
     29 # changed this to allow for zero columns
     30 #    P = Polyhedron(rays=B.columns(),base_ring=QQ).translation(la)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/matrix0.pyx:3589, in sage.matrix.matrix0.Matrix.mutate (build/cythonized/sage/matrix/matrix0.c:33615)()
   3587 ###################################################
   3588 
-> 3589 def mutate(self, Py_ssize_t k ):
   3590     """
   3591     Mutates ``self`` at row and column index ``k``.

TypeError: 'list' object cannot be interpreted as an integer
sage: A=CartanMatrix(['C',5])
....: c=[0,2,4,1,3]
....: coxnum=coxeter_number(A)
....: num=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()) for i
....: in range(coxnum+2)))
....:     print(num,v)
....:     num+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
2 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1]
3 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 3]
4 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
5 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 1]
6 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2]
7 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 4]
8 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0]
9 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 3]
10 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4]
11 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2]
12 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 4]
13 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
14 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 0]
15 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1]
16 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 3, 4]
17 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 3]
18 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
19 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 1, 0]
20 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 1]
21 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2]
22 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 4]
23 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0]
24 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4]
25 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 1, 3, 2]
26 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 1, 3, 4]
27 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 1, 3]
28 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 1]
29 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 3, 4]
30 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 3]
31 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4]
32 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 1]
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [1462], line 6
      4 num=Integer(1)
      5 for v in sortables(A,c):
----> 6     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()) for i in range(coxnum+Integer(2))))
      7     print(num,v)
      8     num+=Integer(1)

File ~/git/affine_dominance/software/domination5.py:15, in p_lambda_int(B, la, seqs)
     13 P = p_lambda(B, la, seqs[0])
     14 for s in seqs:
---> 15     P = P.intersection(p_lambda(B, la, s))
     16     if P.dimension()==0:
     17         break

File ~/git/affine_dominance/software/domination5.py:49, in p_lambda(B, la, seq)
     45         P=Ep*Pp
     46     else:
     47         #print("Pp:   ",Pp,Pp.vertices(),Pp.rays(),Pp.lines(),"\n")
     48         #print("Pm:   ",Pm,Pm.vertices(),Pm.rays(),Pm.lines(),"\n\n")
---> 49         P=(Ep*Pp).convex_hull(Em*Pm)
     50     B.mutate(k)
     51 return P

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4099, in sage.structure.element.Matrix.__mul__ (build/cythonized/sage/structure/element.c:35219)()
   4097 
   4098         if BOTH_ARE_ELEMENT(cl):
-> 4099             return coercion_model.bin_op(left, right, mul)
   4100 
   4101         cdef long value

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1222, in sage.structure.coerce.CoercionModel.bin_op (build/cythonized/sage/structure/coerce.c:15809)()
   1220 if action is not None:
   1221     if (<Action>action)._is_left:
-> 1222         return (<Action>action)._act_(x, y)
   1223     else:
   1224         return (<Action>action)._act_(y, x)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_actions.pyx:157, in sage.structure.coerce_actions.ActedUponAction._act_ (build/cythonized/sage/structure/coerce_actions.c:8579)()
    155     <... 'sage.structure.coerce_actions.ActedUponAction'>
    156 """
--> 157 return (<Element>x)._acted_upon_(g, not self._is_left)
    158 
    159 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:949, in sage.structure.element.Element._acted_upon_ (build/cythonized/sage/structure/element.c:16495)()
    947     return None
    948 
--> 949 cpdef _acted_upon_(self, x, bint self_on_left) noexcept:
    950     """
    951     Use this method to implement ``self`` acted on by x.

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1450, in Polyhedron_base5._acted_upon_(self, actor, self_on_left)
   1448         raise ValueError("matrices should act on the left")
   1449     else:
-> 1450         return self.linear_transformation(actor)
   1451 else:
   1452     return self.dilation(actor)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1879, in Polyhedron_base5.linear_transformation(self, linear_transf, new_base_ring)
   1873     pref_rep = 'Vrep' if self.n_vertices() <= self.n_inequalities() else 'Hrep'
   1875     return new_parent.element_class(new_parent, [new_vertices, new_rays, new_lines],
   1876                                     [new_inequalities, new_equations],
   1877                                     Vrep_minimal=True, Hrep_minimal=True, pref_rep=pref_rep)
-> 1879 return new_parent.element_class(new_parent, [tuple(new_vertices), tuple(new_rays), tuple(new_lines)], None)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:174, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    171     lines = tuple(lines)
    173 if vertices or rays or lines:
--> 174     self._init_from_Vrepresentation(vertices, rays, lines, **kwds)
    175 else:
    176     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:99, in Polyhedron_ppl._init_from_Vrepresentation(self, vertices, rays, lines, minimize, verbose)
     72 def _init_from_Vrepresentation(self, vertices, rays, lines, minimize=True, verbose=False):
     73     """
     74     Construct polyhedron from V-representation data.
     75 
   (...)
     97         sage: Polyhedron_ppl._init_from_Vrepresentation(p, [], [], [])
     98     """
---> 99     gs = self._convert_generators_to_ppl(vertices, rays, lines)
    100     if gs.empty():
    101         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'empty')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:477, in Polyhedron_ppl._convert_generators_to_ppl(vertices, rays, lines)
    475     rays = []
    476 for r in rays:
--> 477     gs.insert(Polyhedron_ppl._convert_generator_to_ppl(r, RAY))
    478 if lines is None:
    479     lines = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:442, in Polyhedron_ppl._convert_generator_to_ppl(v, typ)
    440 d = LCM_list([denominator(v_i) for v_i in v])
    441 if d.is_one():
--> 442     return ob(Linear_Expression(v, 0))
    443 else:
    444     dv = [ d*v_i for v_i in v ]

File ppl/linear_algebra.pyx:654, in ppl.linear_algebra.Linear_Expression.__init__()

File ppl/linear_algebra.pyx:49, in ppl.linear_algebra.PPL_Coefficient_from_pyobject()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:1107, in sage.structure.element.Element.__richcmp__ (build/cythonized/sage/structure/element.c:18121)()
   1105         return (<Element>self)._richcmp_(other, op)
   1106     else:
-> 1107         return coercion_model.richcmp(self, other, op)
   1108 
   1109 cpdef _richcmp_(left, right, int op) noexcept:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:2021, in sage.structure.coerce.CoercionModel.richcmp (build/cythonized/sage/structure/coerce.c:26173)()
   2019 # Coerce to a common parent
   2020 try:
-> 2021     x, y = self.canonical_coercion(x, y)
   2022 except (TypeError, NotImplementedError):
   2023     pass

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1422, in sage.structure.coerce.CoercionModel.canonical_coercion (build/cythonized/sage/structure/coerce.c:18956)()
   1420             self._record_exception()
   1421 
-> 1422     raise TypeError("no common canonical parent for objects with parents: '%s' and '%s'"%(xp, yp))
   1423 
   1424 cpdef coercion_maps(self, R, S) noexcept:

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['C',5])
....: c=[0,2,4,1,3]
....: coxnum=coxeter_number(A)
....: num=1
....: for v in parasortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()) for i
....: in range(coxnum+2)))
....:     print(num,v)
....:     num+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [0, 2, 4, 1, 0, 2, 1]
2 [0, 2, 4, 1, 0, 2]
3 [0, 2, 4, 1, 0]
4 [0, 2, 4, 1, 2]
5 [0, 2, 4, 1]
6 [0, 2, 4, 3, 2, 4, 3, 2, 4, 3]
7 [0, 2, 4, 3, 2, 4, 3, 2, 4]
8 [0, 2, 4, 3, 2, 4, 3, 2]
9 [0, 2, 4, 3, 2, 4, 3, 4]
10 [0, 2, 4, 3, 2, 4, 3]
11 [0, 2, 4, 3, 2, 4]
12 [0, 2, 4, 3, 2]
13 [0, 2, 4, 3, 4, 3]
14 [0, 2, 4, 3, 4]
15 [0, 2, 4, 3]
16 [0, 2, 4]
17 [0, 2, 1, 3, 0, 2, 1, 3, 0, 2]
18 [0, 2, 1, 3, 0, 2, 1, 3, 0]
19 [0, 2, 1, 3, 0, 2, 1, 3, 2]
20 [0, 2, 1, 3, 0, 2, 1, 3]
21 [0, 2, 1, 3, 0, 2, 1, 0]
22 [0, 2, 1, 3, 0, 2, 1]
23 [0, 2, 1, 3, 0, 2, 3]
24 [0, 2, 1, 3, 0, 2]
25 [0, 2, 1, 3, 0]
26 [0, 2, 1, 3, 2, 1, 3]
27 [0, 2, 1, 3, 2, 1]
28 [0, 2, 1, 3, 2, 3]
29 [0, 2, 1, 3, 2]
30 [0, 2, 1, 3]
31 [0, 2, 1, 0, 2, 1]
32 [0, 2, 1, 0, 2]
33 [0, 2, 1, 0]
34 [0, 2, 1, 2]
35 [0, 2, 1]
36 [0, 2, 3, 2]
37 [0, 2, 3]
38 [0, 2]
39 [0, 4, 1, 3, 0, 4, 3]
40 [0, 4, 1, 3, 0, 4]
41 [0, 4, 1, 3, 0]
42 [0, 4, 1, 3, 4, 3]
43 [0, 4, 1, 3, 4]
44 [0, 4, 1, 3]
45 [0, 4, 1, 0]
46 [0, 4, 1]
47 [0, 4, 3, 4, 3]
48 [0, 4, 3, 4]
49 [0, 4, 3]
50 [0, 4]
51 [0, 1, 3, 0]
52 [0, 1, 3]
53 [0, 1, 0]
54 [0, 1]
55 [0, 3]
56 [0]
57 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3]
58 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1]
59 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 3]
60 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4]
61 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 1]
62 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2]
63 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 4]
64 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3]
65 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1]
66 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 3, 2, 4]
67 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 3, 2]
68 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 3, 4]
69 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 3]
70 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4]
71 [2, 4, 1, 3, 2, 4, 1, 3, 2, 1]
72 [2, 4, 1, 3, 2, 4, 1, 3, 2]
73 [2, 4, 1, 3, 2, 4, 1, 3, 4, 3]
74 [2, 4, 1, 3, 2, 4, 1, 3, 4]
75 [2, 4, 1, 3, 2, 4, 1, 3]
76 [2, 4, 1, 3, 2, 4, 1]
77 [2, 4, 1, 3, 2, 4, 3, 2, 4, 3, 2]
78 [2, 4, 1, 3, 2, 4, 3, 2, 4, 3]
79 [2, 4, 1, 3, 2, 4, 3, 2, 4]
80 [2, 4, 1, 3, 2, 4, 3, 2]
81 [2, 4, 1, 3, 2, 4, 3, 4, 3]
82 [2, 4, 1, 3, 2, 4, 3, 4]
83 [2, 4, 1, 3, 2, 4, 3]
84 [2, 4, 1, 3, 2, 4]
85 [2, 4, 1, 3, 2, 1, 3]
86 [2, 4, 1, 3, 2, 1]
87 [2, 4, 1, 3, 2, 3]
88 [2, 4, 1, 3, 2]
89 [2, 4, 1, 3, 4, 3]
90 [2, 4, 1, 3, 4]
91 [2, 4, 1, 3]
92 [2, 4, 1, 2]
93 [2, 4, 1]
94 [2, 4, 3, 2, 4, 3, 2, 4, 3]
95 [2, 4, 3, 2, 4, 3, 2, 4]
96 [2, 4, 3, 2, 4, 3, 2]
97 [2, 4, 3, 2, 4, 3, 4]
98 [2, 4, 3, 2, 4, 3]
99 [2, 4, 3, 2, 4]
100 [2, 4, 3, 2]
101 [2, 4, 3, 4, 3]
102 [2, 4, 3, 4]
103 [2, 4, 3]
104 [2, 4]
105 [2, 1, 3, 2, 1, 3]
106 [2, 1, 3, 2, 1]
107 [2, 1, 3, 2, 3]
108 [2, 1, 3, 2]
109 [2, 1, 3]
110 [2, 1, 2]
111 [2, 1]
112 [2, 3, 2]
113 [2, 3]
114 [2]
115 [4, 1, 3, 4, 3]
116 [4, 1, 3, 4]
117 [4, 1, 3]
118 [4, 1]
119 [4, 3, 4, 3]
120 [4, 3, 4]
121 [4, 3]
122 [4]
123 [1, 3]
124 [1]
125 [3]
126 []
sage: A=CartanMatrix(['C',5])
....: c=[0,2,4,1,3]
....: coxnum=coxeter_number(A)
....: num=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()) for i
....: in range(coxnum+2)))
....:     print(num,v)
....:     num+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
1 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
2 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1]
3 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 3]
4 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
5 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 1]
6 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2]
7 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 4]
8 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0]
9 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 3]
10 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4]
11 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2]
12 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 4]
13 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
14 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 0]
15 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1]
16 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 3, 4]
17 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 3]
18 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
19 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 1, 0]
20 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 1]
21 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2]
22 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 4]
23 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0]
24 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4]
25 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 1, 3, 2]
26 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 1, 3, 4]
27 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 1, 3]
28 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 1]
29 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 3, 4]
30 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 3]
31 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4]
32 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 1]
33 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2]
34 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 4]
35 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
36 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 0]
37 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1]
38 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 3, 2, 4, 3]
39 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 3, 2, 4]
40 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 3, 2]
41 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 3, 4]
42 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 3]
43 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
44 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 1, 0]
45 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 1]
46 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2]
47 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 4, 3]
48 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 4]
49 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0]
50 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2]
51 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3]
52 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1]
53 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 3]
54 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4]
55 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 1]
56 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 1, 3, 2]
57 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 1, 3, 4]
58 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 1, 3]
59 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 1]
60 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 3, 2, 4, 3]
61 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 3, 2, 4]
62 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 3, 2]
63 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 3, 4]
64 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 3]
65 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4]
66 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 1]
67 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2]
68 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 4, 3]
69 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 4]
70 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
71 [0, 2, 4, 1, 3, 0, 2, 4, 1, 0]
72 [0, 2, 4, 1, 3, 0, 2, 4, 1]
73 [0, 2, 4, 1, 3, 0, 2, 4, 3, 2, 4, 3, 2]
74 [0, 2, 4, 1, 3, 0, 2, 4, 3, 2, 4, 3]
75 [0, 2, 4, 1, 3, 0, 2, 4, 3, 2, 4]
76 [0, 2, 4, 1, 3, 0, 2, 4, 3, 2]
77 [0, 2, 4, 1, 3, 0, 2, 4, 3, 4, 3]
78 [0, 2, 4, 1, 3, 0, 2, 4, 3, 4]
79 [0, 2, 4, 1, 3, 0, 2, 4, 3]
80 [0, 2, 4, 1, 3, 0, 2, 4]
81 [0, 2, 4, 1, 3, 0, 2, 1, 3, 0, 2]
82 [0, 2, 4, 1, 3, 0, 2, 1, 3, 0]
83 [0, 2, 4, 1, 3, 0, 2, 1, 3, 2]
84 [0, 2, 4, 1, 3, 0, 2, 1, 3]
85 [0, 2, 4, 1, 3, 0, 2, 1, 0]
86 [0, 2, 4, 1, 3, 0, 2, 1]
87 [0, 2, 4, 1, 3, 0, 2, 3]
88 [0, 2, 4, 1, 3, 0, 2]
89 [0, 2, 4, 1, 3, 0, 4, 3]
90 [0, 2, 4, 1, 3, 0, 4]
91 [0, 2, 4, 1, 3, 0]
92 [0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3]
93 [0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1]
94 [0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 3]
95 [0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4]
96 [0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 1]
97 [0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2]
98 [0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 4]
99 [0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3]
100 [0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1]
101 [0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 3, 2, 4]
102 [0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 3, 2]
103 [0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 3, 4]
104 [0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 3]
105 [0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4]
106 [0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 1]
107 [0, 2, 4, 1, 3, 2, 4, 1, 3, 2]
108 [0, 2, 4, 1, 3, 2, 4, 1, 3, 4, 3]
109 [0, 2, 4, 1, 3, 2, 4, 1, 3, 4]
110 [0, 2, 4, 1, 3, 2, 4, 1, 3]
111 [0, 2, 4, 1, 3, 2, 4, 1]
112 [0, 2, 4, 1, 3, 2, 4, 3, 2, 4, 3, 2]
113 [0, 2, 4, 1, 3, 2, 4, 3, 2, 4, 3]
114 [0, 2, 4, 1, 3, 2, 4, 3, 2, 4]
115 [0, 2, 4, 1, 3, 2, 4, 3, 2]
116 [0, 2, 4, 1, 3, 2, 4, 3, 4, 3]
117 [0, 2, 4, 1, 3, 2, 4, 3, 4]
118 [0, 2, 4, 1, 3, 2, 4, 3]
119 [0, 2, 4, 1, 3, 2, 4]
120 [0, 2, 4, 1, 3, 2, 1, 3]
121 [0, 2, 4, 1, 3, 2, 1]
122 [0, 2, 4, 1, 3, 2, 3]
123 [0, 2, 4, 1, 3, 2]
124 [0, 2, 4, 1, 3, 4, 3]
125 [0, 2, 4, 1, 3, 4]
126 [0, 2, 4, 1, 3]
127 [0, 2, 4, 1, 0, 2, 1]
128 [0, 2, 4, 1, 0, 2]
129 [0, 2, 4, 1, 0]
130 [0, 2, 4, 1, 2]
131 [0, 2, 4, 1]
132 [0, 2, 4, 3, 2, 4, 3, 2, 4, 3]
133 [0, 2, 4, 3, 2, 4, 3, 2, 4]
134 [0, 2, 4, 3, 2, 4, 3, 2]
135 [0, 2, 4, 3, 2, 4, 3, 4]
136 [0, 2, 4, 3, 2, 4, 3]
137 [0, 2, 4, 3, 2, 4]
138 [0, 2, 4, 3, 2]
139 [0, 2, 4, 3, 4, 3]
140 [0, 2, 4, 3, 4]
141 [0, 2, 4, 3]
142 [0, 2, 4]
143 [0, 2, 1, 3, 0, 2, 1, 3, 0, 2]
144 [0, 2, 1, 3, 0, 2, 1, 3, 0]
145 [0, 2, 1, 3, 0, 2, 1, 3, 2]
146 [0, 2, 1, 3, 0, 2, 1, 3]
147 [0, 2, 1, 3, 0, 2, 1, 0]
148 [0, 2, 1, 3, 0, 2, 1]
149 [0, 2, 1, 3, 0, 2, 3]
150 [0, 2, 1, 3, 0, 2]
151 [0, 2, 1, 3, 0]
152 [0, 2, 1, 3, 2, 1, 3]
153 [0, 2, 1, 3, 2, 1]
154 [0, 2, 1, 3, 2, 3]
155 [0, 2, 1, 3, 2]
156 [0, 2, 1, 3]
157 [0, 2, 1, 0, 2, 1]
158 [0, 2, 1, 0, 2]
159 [0, 2, 1, 0]
160 [0, 2, 1, 2]
161 [0, 2, 1]
162 [0, 2, 3, 2]
163 [0, 2, 3]
164 [0, 2]
165 [0, 4, 1, 3, 0, 4, 3]
166 [0, 4, 1, 3, 0, 4]
167 [0, 4, 1, 3, 0]
168 [0, 4, 1, 3, 4, 3]
169 [0, 4, 1, 3, 4]
170 [0, 4, 1, 3]
171 [0, 4, 1, 0]
172 [0, 4, 1]
173 [0, 4, 3, 4, 3]
174 [0, 4, 3, 4]
175 [0, 4, 3]
176 [0, 4]
177 [0, 1, 3, 0]
178 [0, 1, 3]
179 [0, 1, 0]
180 [0, 1]
181 [0, 3]
182 [0]
183 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3]
184 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1]
185 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 3]
186 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4]
187 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 1]
188 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2]
189 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 4]
190 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3]
191 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1]
192 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 3, 2, 4]
193 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 3, 2]
194 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 3, 4]
195 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 3]
196 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4]
197 [2, 4, 1, 3, 2, 4, 1, 3, 2, 1]
198 [2, 4, 1, 3, 2, 4, 1, 3, 2]
199 [2, 4, 1, 3, 2, 4, 1, 3, 4, 3]
200 [2, 4, 1, 3, 2, 4, 1, 3, 4]
201 [2, 4, 1, 3, 2, 4, 1, 3]
202 [2, 4, 1, 3, 2, 4, 1]
203 [2, 4, 1, 3, 2, 4, 3, 2, 4, 3, 2]
204 [2, 4, 1, 3, 2, 4, 3, 2, 4, 3]
205 [2, 4, 1, 3, 2, 4, 3, 2, 4]
206 [2, 4, 1, 3, 2, 4, 3, 2]
207 [2, 4, 1, 3, 2, 4, 3, 4, 3]
208 [2, 4, 1, 3, 2, 4, 3, 4]
209 [2, 4, 1, 3, 2, 4, 3]
210 [2, 4, 1, 3, 2, 4]
211 [2, 4, 1, 3, 2, 1, 3]
212 [2, 4, 1, 3, 2, 1]
213 [2, 4, 1, 3, 2, 3]
214 [2, 4, 1, 3, 2]
215 [2, 4, 1, 3, 4, 3]
216 [2, 4, 1, 3, 4]
217 [2, 4, 1, 3]
218 [2, 4, 1, 2]
219 [2, 4, 1]
220 [2, 4, 3, 2, 4, 3, 2, 4, 3]
221 [2, 4, 3, 2, 4, 3, 2, 4]
222 [2, 4, 3, 2, 4, 3, 2]
223 [2, 4, 3, 2, 4, 3, 4]
224 [2, 4, 3, 2, 4, 3]
225 [2, 4, 3, 2, 4]
226 [2, 4, 3, 2]
227 [2, 4, 3, 4, 3]
228 [2, 4, 3, 4]
229 [2, 4, 3]
230 [2, 4]
231 [2, 1, 3, 2, 1, 3]
232 [2, 1, 3, 2, 1]
233 [2, 1, 3, 2, 3]
234 [2, 1, 3, 2]
235 [2, 1, 3]
236 [2, 1, 2]
237 [2, 1]
238 [2, 3, 2]
239 [2, 3]
240 [2]
241 [4, 1, 3, 4, 3]
242 [4, 1, 3, 4]
243 [4, 1, 3]
244 [4, 1]
245 [4, 3, 4, 3]
246 [4, 3, 4]
247 [4, 3]
248 [4]
249 [1, 3]
250 [1]
251 [3]
252 []
sage: A=CartanMatrix(['C',5])
....: c=[4,0,2,1,3]
....: coxnum=coxeter_number(A)
....: num=1
....: n=A.nrows()
....: for v in sortables(A,c):
....:     print(num,v)
....:     num+=1
....:     Ps=list(p_lambda(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in range((co
....: xnum+2)*n))
....:     fails=true
....:     for i in range(len(Ps)):
....:         for j in range(i+1,len(Ps)):
....:             if (Ps[i].intersection(Ps[j])).dimension()==0:
....:                 fails=false
....:                 break
....:     if fails:
....:         print('FAILS!')
....:         break
....: 
1 [4, 0, 2, 1, 3, 4, 0, 2, 1, 3, 4, 0, 2, 1, 3, 4, 0, 2, 1, 3, 4, 0, 2, 1, 3]
2 [4, 0, 2, 1, 3, 4, 0, 2, 1, 3, 4, 0, 2, 1, 3, 4, 0, 2, 1, 3, 4, 0, 2, 1]
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [1465], line 9
      7 print(num,v)
      8 num+=Integer(1)
----> 9 Ps=list(p_lambda(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in range((coxnum+Integer(2))*n))
     10 fails=true
     11 for i in range(len(Ps)):

Cell In [1465], line 9, in <genexpr>(.0)
      7 print(num,v)
      8 num+=Integer(1)
----> 9 Ps=list(p_lambda(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in range((coxnum+Integer(2))*n))
     10 fails=true
     11 for i in range(len(Ps)):

File ~/git/affine_dominance/software/domination5.py:41, in p_lambda(B, la, seq)
     38 #print("Hp:   ",Hp,Hp.vertices(),Hp.rays(),Hp.lines(),"\n")
     39 #print("Hm:   ",Hm,Hm.vertices(),Hm.rays(),Hm.lines(),"\n\n")
     40 Pp = P.intersection(Hp)
---> 41 Pm = P.intersection(Hm)
     42 if Pp.dimension() < rk:
     43     P=Em*Pm

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1371, in Polyhedron_base5.intersection(self, other)
   1369 parent = self.parent()
   1370 try:
-> 1371     intersection = parent.element_class(parent, None, [new_ieqs, new_eqns])
   1373     # Force calculation of the vertices.
   1374     _ = intersection.n_vertices()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:179, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    177 elif Hrep is not None:
    178     ieqs, eqns = Hrep
--> 179     self._init_from_Hrepresentation(ieqs, eqns, **kwds)
    180 else:
    181     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:129, in Polyhedron_ppl._init_from_Hrepresentation(self, ieqs, eqns, minimize, verbose)
    106 def _init_from_Hrepresentation(self, ieqs, eqns, minimize=True, verbose=False):
    107     """
    108     Construct polyhedron from H-representation data.
    109 
   (...)
    127         sage: Polyhedron_ppl._init_from_Hrepresentation(p, [], [])
    128     """
--> 129     cs = self._convert_constraints_to_ppl(ieqs, eqns)
    130     if cs.empty():
    131         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'universe')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:534, in Polyhedron_ppl._convert_constraints_to_ppl(ieqs, eqns)
    532     ieqs = []
    533 for ieq in ieqs:
--> 534     cs.insert(Polyhedron_ppl._convert_constraint_to_ppl(ieq, INEQUALITY))
    535 if eqns is None:
    536     eqns = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:509, in Polyhedron_ppl._convert_constraint_to_ppl(c, typ)
    507 A = dc[1:]
    508 if typ == INEQUALITY:
--> 509     return Linear_Expression(A, b) >= 0
    510 else:
    511     return Linear_Expression(A, b) == 0

File ppl/linear_algebra.pyx:654, in ppl.linear_algebra.Linear_Expression.__init__()

File ppl/linear_algebra.pyx:49, in ppl.linear_algebra.PPL_Coefficient_from_pyobject()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/rings/integer.pyx:914, in sage.rings.integer.Integer.__richcmp__ (build/cythonized/sage/rings/integer.c:16498)()
    912     c = mpz_cmp_d((<Integer>left).value, d)
    913 else:
--> 914     return coercion_model.richcmp(left, right, op)
    915 
    916 return rich_to_bool_sgn(op, c)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:2021, in sage.structure.coerce.CoercionModel.richcmp (build/cythonized/sage/structure/coerce.c:26173)()
   2019 # Coerce to a common parent
   2020 try:
-> 2021     x, y = self.canonical_coercion(x, y)
   2022 except (TypeError, NotImplementedError):
   2023     pass

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1422, in sage.structure.coerce.CoercionModel.canonical_coercion (build/cythonized/sage/structure/coerce.c:18956)()
   1420             self._record_exception()
   1421 
-> 1422     raise TypeError("no common canonical parent for objects with parents: '%s' and '%s'"%(xp, yp))
   1423 
   1424 cpdef coercion_maps(self, R, S) noexcept:

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['C',5])
....: c=[4,0,2,1,3]
....: coxnum=coxeter_number(A)
....: num=1
....: n=A.nrows()
....: for v in sortables(A,c[1:]):
....:     print(num,v)
....:     num+=1
....:     Ps=list(p_lambda(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in range((co
....: xnum+2)*n))
....:     fails=true
....:     for i in range(len(Ps)):
....:         for j in range(i+1,len(Ps)):
....:             if (Ps[i].intersection(Ps[j])).dimension()==0:
....:                 fails=false
....:                 break
....:     if fails:
....:         print('FAILS!')
....:         break
1 [0, 2, 1, 3, 0, 2, 1, 3, 0, 2]
2 [0, 2, 1, 3, 0, 2, 1, 3, 0]
3 [0, 2, 1, 3, 0, 2, 1, 3, 2]
4 [0, 2, 1, 3, 0, 2, 1, 3]
5 [0, 2, 1, 3, 0, 2, 1, 0]
6 [0, 2, 1, 3, 0, 2, 1]
7 [0, 2, 1, 3, 0, 2, 3]
8 [0, 2, 1, 3, 0, 2]
9 [0, 2, 1, 3, 0]
10 [0, 2, 1, 3, 2, 1, 3]
11 [0, 2, 1, 3, 2, 1]
12 [0, 2, 1, 3, 2, 3]
13 [0, 2, 1, 3, 2]
14 [0, 2, 1, 3]
15 [0, 2, 1, 0, 2, 1]
16 [0, 2, 1, 0, 2]
17 [0, 2, 1, 0]
18 [0, 2, 1, 2]
19 [0, 2, 1]
20 [0, 2, 3, 2]
21 [0, 2, 3]
22 [0, 2]
23 [0, 1, 3, 0]
24 [0, 1, 3]
25 [0, 1, 0]
26 [0, 1]
27 [0, 3]
28 [0]
29 [2, 1, 3, 2, 1, 3]
30 [2, 1, 3, 2, 1]
31 [2, 1, 3, 2, 3]
32 [2, 1, 3, 2]
33 [2, 1, 3]
34 [2, 1, 2]
35 [2, 1]
36 [2, 3, 2]
37 [2, 3]
38 [2]
39 [1, 3]
40 [1]
41 [3]
42 []
sage: A=CartanMatrix(['C',6])
....: c=[5,3,1,4,2,0]
....: coxnum=coxeter_number(A)
....: num=1
....: n=A.nrows()
....: for v in sortables(A,c[1:]):
....:     print(num,v)
....:     num+=1
....:     Ps=list(p_lambda(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in range((co
....: xnum+2)*n))
....:     fails=true
....:     for i in range(len(Ps)):
....:         for j in range(i+1,len(Ps)):
....:             if (Ps[i].intersection(Ps[j])).dimension()==0:
....:                 fails=false
....:                 break
....:     if fails:
....:         print('FAILS!')
....:         break
....: 
1 [3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0]
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [1467], line 9
      7 print(num,v)
      8 num+=Integer(1)
----> 9 Ps=list(p_lambda(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in range((coxnum+Integer(2))*n))
     10 fails=true
     11 for i in range(len(Ps)):

Cell In [1467], line 9, in <genexpr>(.0)
      7 print(num,v)
      8 num+=Integer(1)
----> 9 Ps=list(p_lambda(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in range((coxnum+Integer(2))*n))
     10 fails=true
     11 for i in range(len(Ps)):

File ~/git/affine_dominance/software/domination5.py:49, in p_lambda(B, la, seq)
     45         P=Ep*Pp
     46     else:
     47         #print("Pp:   ",Pp,Pp.vertices(),Pp.rays(),Pp.lines(),"\n")
     48         #print("Pm:   ",Pm,Pm.vertices(),Pm.rays(),Pm.lines(),"\n\n")
---> 49         P=(Ep*Pp).convex_hull(Em*Pm)
     50     B.mutate(k)
     51 return P

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1312, in Polyhedron_base5.convex_hull(self, other)
   1310 hull_rays = self.rays() + other.rays()
   1311 hull_lines = self.lines() + other.lines()
-> 1312 return self.parent().element_class(self.parent(), [hull_vertices, hull_rays, hull_lines], None)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:70, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
---> 70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:189, in Polyhedron_ppl.set_immutable(self)
    187 if not hasattr(self, '_Vrepresentation'):
    188     try:
--> 189         self._init_Vrepresentation_from_ppl(True)
    190     except TypeError as e:
    191         # Apparently the polyhedron is (no longer) integral.
    192         self._clear_cache()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:300, in Polyhedron_ppl._init_Vrepresentation_from_ppl(self, minimize)
    298     raise TypeError("Vrepresentation of mutable polyhedra cannot be recomputed")
    299 self._Vrepresentation = []
--> 300 gs = self._ppl_polyhedron.minimized_generators()
    301 parent = self.parent()
    302 for g in gs:

File ppl/polyhedron.pyx:340, in ppl.polyhedron.Polyhedron.minimized_generators()

KeyboardInterrupt: 
sage: A=CartanMatrix(['C',5])
....: c=[0,2,4,1,3]
....: coxnum=coxeter_number(A)
....: num=1
....: n=A.nrows()
....: for v in sortables(A,c):
....:     print(num,v)
....:     num+=1
....:     Ps=list(p_lambda(B(A,c),lam(A,v),c_inf_prefix(c,i*n)) for i in range((
....: coxnum+2)))
....:     fails=true
....:     for i in range(len(Ps)):
....:         for j in range(i+1,len(Ps)):
....:             if (Ps[i].intersection(Ps[j])).dimension()==0:
....:                 fails=false
....:                 break
....:     if fails:
....:         print('FAILS!')
....:         break
1 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
2 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1]
3 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 3]
4 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
5 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 1]
FAILS!
sage: A=CartanMatrix(['C',5])
....: c=[4,2,0,3,1]
....: coxnum=coxeter_number(A)
....: num=1
....: n=A.nrows()
....: for v in sortables(A,c):
....:     print(num,v)
....:     num+=1
....:     Ps=list(p_lambda(B(A,c),lam(A,v),c_inf_prefix(c,i*n)) for i in range((
....: coxnum+2)))
....:     fails=true
....:     for i in range(len(Ps)):
....:         for j in range(i+1,len(Ps)):
....:             if (Ps[i].intersection(Ps[j])).dimension()==0:
....:                 fails=false
....:                 break
....:     if fails:
....:         print('FAILS!')
....:         break
1 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1]
2 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3]
3 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 1]
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [1469], line 9
      7 print(num,v)
      8 num+=Integer(1)
----> 9 Ps=list(p_lambda(B(A,c),lam(A,v),c_inf_prefix(c,i*n)) for i in range((coxnum+Integer(2))))
     10 fails=true
     11 for i in range(len(Ps)):

Cell In [1469], line 9, in <genexpr>(.0)
      7 print(num,v)
      8 num+=Integer(1)
----> 9 Ps=list(p_lambda(B(A,c),lam(A,v),c_inf_prefix(c,i*n)) for i in range((coxnum+Integer(2))))
     10 fails=true
     11 for i in range(len(Ps)):

File ~/git/affine_dominance/software/domination5.py:49, in p_lambda(B, la, seq)
     45         P=Ep*Pp
     46     else:
     47         #print("Pp:   ",Pp,Pp.vertices(),Pp.rays(),Pp.lines(),"\n")
     48         #print("Pm:   ",Pm,Pm.vertices(),Pm.rays(),Pm.lines(),"\n\n")
---> 49         P=(Ep*Pp).convex_hull(Em*Pm)
     50     B.mutate(k)
     51 return P

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4099, in sage.structure.element.Matrix.__mul__ (build/cythonized/sage/structure/element.c:35219)()
   4097 
   4098         if BOTH_ARE_ELEMENT(cl):
-> 4099             return coercion_model.bin_op(left, right, mul)
   4100 
   4101         cdef long value

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1222, in sage.structure.coerce.CoercionModel.bin_op (build/cythonized/sage/structure/coerce.c:15809)()
   1220 if action is not None:
   1221     if (<Action>action)._is_left:
-> 1222         return (<Action>action)._act_(x, y)
   1223     else:
   1224         return (<Action>action)._act_(y, x)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_actions.pyx:157, in sage.structure.coerce_actions.ActedUponAction._act_ (build/cythonized/sage/structure/coerce_actions.c:8579)()
    155     <... 'sage.structure.coerce_actions.ActedUponAction'>
    156 """
--> 157 return (<Element>x)._acted_upon_(g, not self._is_left)
    158 
    159 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:949, in sage.structure.element.Element._acted_upon_ (build/cythonized/sage/structure/element.c:16495)()
    947     return None
    948 
--> 949 cpdef _acted_upon_(self, x, bint self_on_left) noexcept:
    950     """
    951     Use this method to implement ``self`` acted on by x.

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1450, in Polyhedron_base5._acted_upon_(self, actor, self_on_left)
   1448         raise ValueError("matrices should act on the left")
   1449     else:
-> 1450         return self.linear_transformation(actor)
   1451 else:
   1452     return self.dilation(actor)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1879, in Polyhedron_base5.linear_transformation(self, linear_transf, new_base_ring)
   1873     pref_rep = 'Vrep' if self.n_vertices() <= self.n_inequalities() else 'Hrep'
   1875     return new_parent.element_class(new_parent, [new_vertices, new_rays, new_lines],
   1876                                     [new_inequalities, new_equations],
   1877                                     Vrep_minimal=True, Hrep_minimal=True, pref_rep=pref_rep)
-> 1879 return new_parent.element_class(new_parent, [tuple(new_vertices), tuple(new_rays), tuple(new_lines)], None)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:174, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    171     lines = tuple(lines)
    173 if vertices or rays or lines:
--> 174     self._init_from_Vrepresentation(vertices, rays, lines, **kwds)
    175 else:
    176     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:99, in Polyhedron_ppl._init_from_Vrepresentation(self, vertices, rays, lines, minimize, verbose)
     72 def _init_from_Vrepresentation(self, vertices, rays, lines, minimize=True, verbose=False):
     73     """
     74     Construct polyhedron from V-representation data.
     75 
   (...)
     97         sage: Polyhedron_ppl._init_from_Vrepresentation(p, [], [], [])
     98     """
---> 99     gs = self._convert_generators_to_ppl(vertices, rays, lines)
    100     if gs.empty():
    101         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'empty')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:473, in Polyhedron_ppl._convert_generators_to_ppl(vertices, rays, lines)
    471     vertices = []
    472 for v in vertices:
--> 473     gs.insert(Polyhedron_ppl._convert_generator_to_ppl(v, VERTEX))
    474 if rays is None:
    475     rays = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:442, in Polyhedron_ppl._convert_generator_to_ppl(v, typ)
    440 d = LCM_list([denominator(v_i) for v_i in v])
    441 if d.is_one():
--> 442     return ob(Linear_Expression(v, 0))
    443 else:
    444     dv = [ d*v_i for v_i in v ]

File ppl/linear_algebra.pyx:654, in ppl.linear_algebra.Linear_Expression.__init__()

File ppl/linear_algebra.pyx:49, in ppl.linear_algebra.PPL_Coefficient_from_pyobject()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:1107, in sage.structure.element.Element.__richcmp__ (build/cythonized/sage/structure/element.c:18121)()
   1105         return (<Element>self)._richcmp_(other, op)
   1106     else:
-> 1107         return coercion_model.richcmp(self, other, op)
   1108 
   1109 cpdef _richcmp_(left, right, int op) noexcept:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:2021, in sage.structure.coerce.CoercionModel.richcmp (build/cythonized/sage/structure/coerce.c:26173)()
   2019 # Coerce to a common parent
   2020 try:
-> 2021     x, y = self.canonical_coercion(x, y)
   2022 except (TypeError, NotImplementedError):
   2023     pass

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1422, in sage.structure.coerce.CoercionModel.canonical_coercion (build/cythonized/sage/structure/coerce.c:18956)()
   1420             self._record_exception()
   1421 
-> 1422     raise TypeError("no common canonical parent for objects with parents: '%s' and '%s'"%(xp, yp))
   1423 
   1424 cpdef coercion_maps(self, R, S) noexcept:

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['C',5])
....: c=[4,2,0,3,1]
....: coxnum=coxeter_number(A)
....: num=1
....: n=A.nrows()
....: for v in sortables(A,c[1:]):
....:     print(num,v)
....:     num+=1
....:     Ps=list(p_lambda(B(A,c),lam(A,v),c_inf_prefix(c,i*n)) for i in range((
....: coxnum+2)))
....:     fails=true
....:     for i in range(len(Ps)):
....:         for j in range(i+1,len(Ps)):
....:             if (Ps[i].intersection(Ps[j])).dimension()==0:
....:                 fails=false
....:                 break
....:     if fails:
....:         print('FAILS!')
....:         break
....: 
1 [2, 0, 3, 1, 2, 0, 3, 1, 2, 0]
2 [2, 0, 3, 1, 2, 0, 3, 1, 2]
FAILS!
sage: A
[ 2 -1  0  0  0]
[-1  2 -1  0  0]
[ 0 -1  2 -1  0]
[ 0  0 -1  2 -2]
[ 0  0  0 -1  2]
sage: A=CartanMatrix(['C',5])
....: c=[4,2,0,3,1]
....: coxnum=coxeter_number(A)
....: num=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()) for i
....: in range(coxnum+2)))
....:     print(num,v)
....:     num+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
1 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1]
2 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3]
3 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 1]
4 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0]
5 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 3]
6 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2]
7 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 0]
8 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4]
9 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 2, 0, 1]
10 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 2, 0]
11 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 2]
12 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 0]
13 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1]
14 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 4]
15 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3]
16 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 1, 0]
17 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 1]
18 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0]
19 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 3, 1, 4, 2]
20 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 3, 1, 4]
21 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 3, 1, 2]
22 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 3, 1]
23 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 3, 4]
24 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 3]
25 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 1]
26 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2]
27 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 0]
28 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4]
29 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 2, 0, 1, 0]
30 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 2, 0, 1]
31 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 2, 0]
32 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 2, 1]
33 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 2]
34 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 0]
35 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1]
36 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 4, 2, 3]
37 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 4, 2]
38 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 4]
39 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 2]
40 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3]
41 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 1, 0]
42 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 1]
43 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0]
44 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 2]
45 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1]
46 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 3, 1, 4, 2, 3]
47 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 3, 1, 4, 2, 1]
48 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 3, 1, 4, 2]
49 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 3, 1, 4]
50 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 3, 1, 2, 1]
51 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 3, 1, 2]
52 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 3, 1]
53 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 3, 4, 2, 3]
54 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 3, 4, 2]
55 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 3, 4]
56 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 3, 2]
57 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 3]
58 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 1]
59 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2]
60 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 0, 3]
61 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 0]
62 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 3]
63 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4]
64 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 2, 0, 1, 0]
65 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 2, 0, 1]
66 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 2, 0]
67 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 2, 1]
68 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 2]
69 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 0]
70 [4, 2, 0, 3, 1, 4, 2, 0, 3, 1]
71 [4, 2, 0, 3, 1, 4, 2, 0, 3, 4, 2, 3, 2]
72 [4, 2, 0, 3, 1, 4, 2, 0, 3, 4, 2, 3]
73 [4, 2, 0, 3, 1, 4, 2, 0, 3, 4, 2]
74 [4, 2, 0, 3, 1, 4, 2, 0, 3, 4, 3]
75 [4, 2, 0, 3, 1, 4, 2, 0, 3, 4]
76 [4, 2, 0, 3, 1, 4, 2, 0, 3, 2]
77 [4, 2, 0, 3, 1, 4, 2, 0, 3]
78 [4, 2, 0, 3, 1, 4, 2, 0, 1, 0]
79 [4, 2, 0, 3, 1, 4, 2, 0, 1]
80 [4, 2, 0, 3, 1, 4, 2, 0]
81 [4, 2, 0, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1]
82 [4, 2, 0, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3]
83 [4, 2, 0, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 1]
84 [4, 2, 0, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2]
85 [4, 2, 0, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4]
86 [4, 2, 0, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 2, 1]
87 [4, 2, 0, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 2]
88 [4, 2, 0, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1]
89 [4, 2, 0, 3, 1, 4, 2, 3, 1, 4, 2, 3, 4, 2]
90 [4, 2, 0, 3, 1, 4, 2, 3, 1, 4, 2, 3, 4]
91 [4, 2, 0, 3, 1, 4, 2, 3, 1, 4, 2, 3, 2]
92 [4, 2, 0, 3, 1, 4, 2, 3, 1, 4, 2, 3]
93 [4, 2, 0, 3, 1, 4, 2, 3, 1, 4, 2, 1]
94 [4, 2, 0, 3, 1, 4, 2, 3, 1, 4, 2]
95 [4, 2, 0, 3, 1, 4, 2, 3, 1, 4, 3]
96 [4, 2, 0, 3, 1, 4, 2, 3, 1, 4]
97 [4, 2, 0, 3, 1, 4, 2, 3, 1, 2, 1]
98 [4, 2, 0, 3, 1, 4, 2, 3, 1, 2]
99 [4, 2, 0, 3, 1, 4, 2, 3, 1]
100 [4, 2, 0, 3, 1, 4, 2, 3, 4, 2, 3, 2]
101 [4, 2, 0, 3, 1, 4, 2, 3, 4, 2, 3]
102 [4, 2, 0, 3, 1, 4, 2, 3, 4, 2]
103 [4, 2, 0, 3, 1, 4, 2, 3, 4, 3]
104 [4, 2, 0, 3, 1, 4, 2, 3, 4]
105 [4, 2, 0, 3, 1, 4, 2, 3, 2]
106 [4, 2, 0, 3, 1, 4, 2, 3]
107 [4, 2, 0, 3, 1, 4, 2, 1]
108 [4, 2, 0, 3, 1, 4, 2]
109 [4, 2, 0, 3, 1, 4, 0, 3]
110 [4, 2, 0, 3, 1, 4, 0]
111 [4, 2, 0, 3, 1, 4, 3]
112 [4, 2, 0, 3, 1, 4]
113 [4, 2, 0, 3, 1, 2, 0, 3, 1, 2, 0]
114 [4, 2, 0, 3, 1, 2, 0, 3, 1, 2]
115 [4, 2, 0, 3, 1, 2, 0, 3, 1, 0]
116 [4, 2, 0, 3, 1, 2, 0, 3, 1]
117 [4, 2, 0, 3, 1, 2, 0, 3]
118 [4, 2, 0, 3, 1, 2, 0, 1, 0]
119 [4, 2, 0, 3, 1, 2, 0, 1]
^[[A120 [4, 2, 0, 3, 1, 2, 0]
121 [4, 2, 0, 3, 1, 2, 3, 1]
^[[A^[[A122 [4, 2, 0, 3, 1, 2, 3]
123 [4, 2, 0, 3, 1, 2, 1]
124 [4, 2, 0, 3, 1, 2]
125 [4, 2, 0, 3, 1, 0]
126 [4, 2, 0, 3, 1]
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [1472], line 6
      4 num=Integer(1)
      5 for v in sortables(A,c):
----> 6     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()) for i in range(coxnum+Integer(2))))
      7     print(num,v)
      8     num+=Integer(1)

File ~/git/affine_dominance/software/domination5.py:15, in p_lambda_int(B, la, seqs)
     13 P = p_lambda(B, la, seqs[0])
     14 for s in seqs:
---> 15     P = P.intersection(p_lambda(B, la, s))
     16     if P.dimension()==0:
     17         break

File ~/git/affine_dominance/software/domination5.py:49, in p_lambda(B, la, seq)
     45         P=Ep*Pp
     46     else:
     47         #print("Pp:   ",Pp,Pp.vertices(),Pp.rays(),Pp.lines(),"\n")
     48         #print("Pm:   ",Pm,Pm.vertices(),Pm.rays(),Pm.lines(),"\n\n")
---> 49         P=(Ep*Pp).convex_hull(Em*Pm)
     50     B.mutate(k)
     51 return P

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4099, in sage.structure.element.Matrix.__mul__ (build/cythonized/sage/structure/element.c:35219)()
   4097 
   4098         if BOTH_ARE_ELEMENT(cl):
-> 4099             return coercion_model.bin_op(left, right, mul)
   4100 
   4101         cdef long value

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1222, in sage.structure.coerce.CoercionModel.bin_op (build/cythonized/sage/structure/coerce.c:15809)()
   1220 if action is not None:
   1221     if (<Action>action)._is_left:
-> 1222         return (<Action>action)._act_(x, y)
   1223     else:
   1224         return (<Action>action)._act_(y, x)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_actions.pyx:157, in sage.structure.coerce_actions.ActedUponAction._act_ (build/cythonized/sage/structure/coerce_actions.c:8579)()
    155     <... 'sage.structure.coerce_actions.ActedUponAction'>
    156 """
--> 157 return (<Element>x)._acted_upon_(g, not self._is_left)
    158 
    159 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:949, in sage.structure.element.Element._acted_upon_ (build/cythonized/sage/structure/element.c:16495)()
    947     return None
    948 
--> 949 cpdef _acted_upon_(self, x, bint self_on_left) noexcept:
    950     """
    951     Use this method to implement ``self`` acted on by x.

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1450, in Polyhedron_base5._acted_upon_(self, actor, self_on_left)
   1448         raise ValueError("matrices should act on the left")
   1449     else:
-> 1450         return self.linear_transformation(actor)
   1451 else:
   1452     return self.dilation(actor)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1825, in Polyhedron_base5.linear_transformation(self, linear_transf, new_base_ring)
   1823 else:
   1824     new_rays = ()
-> 1825 if self.n_lines():
   1826     new_lines = ( l for l in matrix(R, self.lines())*linear_transf.transpose() )
   1827 else:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/misc/cachefunc.pyx:2329, in sage.misc.cachefunc.CachedMethodCallerNoArgs.__call__ (build/cythonized/sage/misc/cachefunc.c:16226)()
   2327 if self.cache is None:
   2328     f = self.f
-> 2329     self.cache = f(self._instance)
   2330 return self.cache
   2331 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:572, in Polyhedron_base0.n_lines(self)
    560 @cached_method
    561 def n_lines(self):
    562     """
    563     Return the number of lines. The representation will
    564     always be minimal.
   (...)
    570         1
    571     """
--> 572     return len(self.lines())

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/misc/cachefunc.pyx:2329, in sage.misc.cachefunc.CachedMethodCallerNoArgs.__call__ (build/cythonized/sage/misc/cachefunc.c:16226)()
   2327 if self.cache is None:
   2328     f = self.f
-> 2329     self.cache = f(self._instance)
   2330 return self.cache
   2331 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:1248, in Polyhedron_base0.lines(self)
   1233 @cached_method
   1234 def lines(self):
   1235     """
   1236     Return all lines of the polyhedron.
   1237 
   (...)
   1246         (A line in the direction (1, 0),)
   1247     """
-> 1248     return tuple(self.line_generator())

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:1230, in Polyhedron_base0.line_generator(self)
   1220 """
   1221 Return a generator for the lines of the polyhedron.
   1222 
   (...)
   1227     (1, 0)
   1228 """
   1229 for V in self.Vrepresentation():
-> 1230     if V.is_line():
   1231         yield V

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/representation.py:1235, in Vrepresentation.is_line(self)
   1216     """
   1217     Return True if the object is a ray of the V-representation.
   1218     This method is over-ridden by the corresponding method in the
   (...)
   1231         False
   1232     """
   1233     return False
-> 1235 def is_line(self):
   1236     """
   1237     Return True if the object is a line of the V-representation.
   1238     This method is over-ridden by the corresponding method in the
   (...)
   1249         False
   1250     """
   1251     return False

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['C',5])
....: c=[4,2,0,3,1]
....: coxnum=coxeter_number(A)
....: num=1
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()) for i
....: in range(coxnum+2)))
....:     print(num,v)
....:     num+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [2, 0, 3, 1, 2, 0, 3, 1, 2, 0]
2 [2, 0, 3, 1, 2, 0, 3, 1, 2]
3 [2, 0, 3, 1, 2, 0, 3, 1, 0]
4 [2, 0, 3, 1, 2, 0, 3, 1]
5 [2, 0, 3, 1, 2, 0, 3]
6 [2, 0, 3, 1, 2, 0, 1, 0]
7 [2, 0, 3, 1, 2, 0, 1]
8 [2, 0, 3, 1, 2, 0]
9 [2, 0, 3, 1, 2, 3, 1]
10 [2, 0, 3, 1, 2, 3]
11 [2, 0, 3, 1, 2, 1]
12 [2, 0, 3, 1, 2]
13 [2, 0, 3, 1, 0]
14 [2, 0, 3, 1]
15 [2, 0, 3, 2]
16 [2, 0, 3]
17 [2, 0, 1, 2, 0, 1]
18 [2, 0, 1, 2, 0]
19 [2, 0, 1, 2]
20 [2, 0, 1, 0]
21 [2, 0, 1]
22 [2, 0]
23 [2, 3, 1, 2, 3, 1]
24 [2, 3, 1, 2, 3]
25 [2, 3, 1, 2, 1]
26 [2, 3, 1, 2]
27 [2, 3, 1]
28 [2, 3, 2]
29 [2, 3]
30 [2, 1, 2]
31 [2, 1]
32 [2]
33 [0, 3, 1, 0]
34 [0, 3, 1]
35 [0, 3]
36 [0, 1, 0]
37 [0, 1]
38 [0]
39 [3, 1]
40 [3]
41 [1]
42 []
sage: A=CartanMatrix(['C',6])
....: c=[5,3,1,4,2,0]
....: coxnum=coxeter_number(A)
....: num=1
....: for v in sortables(A,c[1:]):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()) for i
....: in range(coxnum+2)))
....:     print(num,v)
....:     num+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
1 [3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0]
2 [3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2]
3 [3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 0]
4 [3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4]
5 [3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 2, 0]
6 [3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 2]
7 [3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 0]
8 [3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1]
9 [3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 4]
10 [3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3]
11 [3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 1, 0]
12 [3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 1]
13 [3, 1, 4, 2, 0, 3, 1, 4, 2, 0]
14 [3, 1, 4, 2, 0, 3, 1, 4, 2, 3, 1, 4]
15 [3, 1, 4, 2, 0, 3, 1, 4, 2, 3, 1]
16 [3, 1, 4, 2, 0, 3, 1, 4, 2, 3, 4]
17 [3, 1, 4, 2, 0, 3, 1, 4, 2, 3]
18 [3, 1, 4, 2, 0, 3, 1, 4, 2, 1]
19 [3, 1, 4, 2, 0, 3, 1, 4, 2]
20 [3, 1, 4, 2, 0, 3, 1, 4, 0]
21 [3, 1, 4, 2, 0, 3, 1, 4]
22 [3, 1, 4, 2, 0, 3, 1, 2, 0, 3, 1, 0]
23 [3, 1, 4, 2, 0, 3, 1, 2, 0, 3, 1]
24 [3, 1, 4, 2, 0, 3, 1, 2, 0, 3]
25 [3, 1, 4, 2, 0, 3, 1, 2, 0, 1, 0]
26 [3, 1, 4, 2, 0, 3, 1, 2, 0, 1]
27 [3, 1, 4, 2, 0, 3, 1, 2, 0]
28 [3, 1, 4, 2, 0, 3, 1, 2, 3, 1]
29 [3, 1, 4, 2, 0, 3, 1, 2, 3]
30 [3, 1, 4, 2, 0, 3, 1, 2, 1]
31 [3, 1, 4, 2, 0, 3, 1, 2]
32 [3, 1, 4, 2, 0, 3, 1, 0]
33 [3, 1, 4, 2, 0, 3, 1]
34 [3, 1, 4, 2, 0, 3, 4, 2]
35 [3, 1, 4, 2, 0, 3, 4]
36 [3, 1, 4, 2, 0, 3, 2]
37 [3, 1, 4, 2, 0, 3]
38 [3, 1, 4, 2, 0, 1, 2, 0]
39 [3, 1, 4, 2, 0, 1, 2]
40 [3, 1, 4, 2, 0, 1, 0]
41 [3, 1, 4, 2, 0, 1]
42 [3, 1, 4, 2, 0]
43 [3, 1, 4, 2, 3, 1, 4, 2, 3, 1]
44 [3, 1, 4, 2, 3, 1, 4, 2, 3]
45 [3, 1, 4, 2, 3, 1, 4, 2, 1]
46 [3, 1, 4, 2, 3, 1, 4, 2]
47 [3, 1, 4, 2, 3, 1, 4]
48 [3, 1, 4, 2, 3, 1, 2, 1]
49 [3, 1, 4, 2, 3, 1, 2]
50 [3, 1, 4, 2, 3, 1]
51 [3, 1, 4, 2, 3, 4, 2]
52 [3, 1, 4, 2, 3, 4]
53 [3, 1, 4, 2, 3, 2]
54 [3, 1, 4, 2, 3]
55 [3, 1, 4, 2, 1]
56 [3, 1, 4, 2]
57 [3, 1, 4, 0, 3, 1]
58 [3, 1, 4, 0, 3]
59 [3, 1, 4, 0, 1]
60 [3, 1, 4, 0]
61 [3, 1, 4, 3]
62 [3, 1, 4]
63 [3, 1, 2, 0, 3, 1, 2, 0, 3, 1]
64 [3, 1, 2, 0, 3, 1, 2, 0, 3]
65 [3, 1, 2, 0, 3, 1, 2, 0, 1]
66 [3, 1, 2, 0, 3, 1, 2, 0]
67 [3, 1, 2, 0, 3, 1, 2, 3]
68 [3, 1, 2, 0, 3, 1, 2]
69 [3, 1, 2, 0, 3, 1, 0]
70 [3, 1, 2, 0, 3, 1]
71 [3, 1, 2, 0, 3]
72 [3, 1, 2, 0, 1, 2, 0]
73 [3, 1, 2, 0, 1, 2]
74 [3, 1, 2, 0, 1, 0]
75 [3, 1, 2, 0, 1]
76 [3, 1, 2, 0]
77 [3, 1, 2, 3, 1, 2]
78 [3, 1, 2, 3, 1]
79 [3, 1, 2, 3]
80 [3, 1, 2, 1]
81 [3, 1, 2]
82 [3, 1, 0, 1]
83 [3, 1, 0]
84 [3, 1]
85 [3, 4, 2, 0, 3, 4, 2]
86 [3, 4, 2, 0, 3, 4]
87 [3, 4, 2, 0, 3, 2]
88 [3, 4, 2, 0, 3]
89 [3, 4, 2, 0]
90 [3, 4, 2, 3, 4, 2]
91 [3, 4, 2, 3, 4]
92 [3, 4, 2, 3, 2]
93 [3, 4, 2, 3]
94 [3, 4, 2]
95 [3, 4, 0, 3]
96 [3, 4, 0]
97 [3, 4, 3]
98 [3, 4]
99 [3, 2, 0, 3]
100 [3, 2, 0]
101 [3, 2, 3]
102 [3, 2]
103 [3, 0]
104 [3]
105 [1, 4, 2, 0, 1, 2, 0]
106 [1, 4, 2, 0, 1, 2]
107 [1, 4, 2, 0, 1, 0]
108 [1, 4, 2, 0, 1]
109 [1, 4, 2, 0]
110 [1, 4, 2, 1]
111 [1, 4, 2]
112 [1, 4, 0, 1]
113 [1, 4, 0]
114 [1, 4]
115 [1, 2, 0, 1, 2, 0]
116 [1, 2, 0, 1, 2]
117 [1, 2, 0, 1, 0]
118 [1, 2, 0, 1]
119 [1, 2, 0]
120 [1, 2, 1]
121 [1, 2]
122 [1, 0, 1]
123 [1, 0]
124 [1]
125 [4, 2, 0]
126 [4, 2]
127 [4, 0]
128 [4]
129 [2, 0]
130 [2]
131 [0]
132 []
sage: A=CartanMatrix(['C',5])
....: c=[4,2,0,3,1]
....: coxnum=coxeter_number(A)
....: num=1
....: n=A.nrows()
....: for v in sortables(A,c[1:]):
....:     print(num,v)
....:     num+=1
....:     Ps=list(p_lambda(B(A,c),lam(A,v),c_inf_prefix(c,i*n)) for i in range((
....: coxnum+2)))
....:     fails=true
....:     for i in range(len(Ps)):
....:         for j in range(i+1,len(Ps)):
....:             if (Ps[i].intersection(Ps[j])).dimension()==0:
....:                 fails=false
....:                 break
....:     if fails:
....:         print('FAILS!')
....:         break
....: 
1 [2, 0, 3, 1, 2, 0, 3, 1, 2, 0]
2 [2, 0, 3, 1, 2, 0, 3, 1, 2]
FAILS!
sage: A=CartanMatrix(['C',5])
....: c=[4,2,0,3,1]
....: coxnum=coxeter_number(A)
....: num=1
....: n=A.nrows()
....: for v in sortables(A,c[1:]):
....:     la=lam(A,v)
....:     H=Polyhedron(vertices=[la],lines=identity_matrix(n).columns()[:-1])
....:     print(num,v)
....:     num+=1
....:     Ps=list(p_lambda(B(A,c),la,c_inf_prefix(c,i*n)) for i in range((coxnum
....: +2)))
....:     fails=true
....:     for i in range(len(Ps)):
....:         for j in range(i+1,len(Ps)):
....:             Q=Ps[i].intersection(Ps[j])
....:             if Q.intersection(H)!=H:
....:                 fails=false
....:                 break
....:     if fails:
....:         print('FAILS!')
....:         break
....: 
1 [2, 0, 3, 1, 2, 0, 3, 1, 2, 0]
2 [2, 0, 3, 1, 2, 0, 3, 1, 2]
3 [2, 0, 3, 1, 2, 0, 3, 1, 0]
4 [2, 0, 3, 1, 2, 0, 3, 1]
5 [2, 0, 3, 1, 2, 0, 3]
6 [2, 0, 3, 1, 2, 0, 1, 0]
7 [2, 0, 3, 1, 2, 0, 1]
8 [2, 0, 3, 1, 2, 0]
9 [2, 0, 3, 1, 2, 3, 1]
10 [2, 0, 3, 1, 2, 3]
11 [2, 0, 3, 1, 2, 1]
12 [2, 0, 3, 1, 2]
13 [2, 0, 3, 1, 0]
14 [2, 0, 3, 1]
15 [2, 0, 3, 2]
16 [2, 0, 3]
17 [2, 0, 1, 2, 0, 1]
18 [2, 0, 1, 2, 0]
19 [2, 0, 1, 2]
20 [2, 0, 1, 0]
21 [2, 0, 1]
22 [2, 0]
23 [2, 3, 1, 2, 3, 1]
24 [2, 3, 1, 2, 3]
25 [2, 3, 1, 2, 1]
26 [2, 3, 1, 2]
27 [2, 3, 1]
28 [2, 3, 2]
29 [2, 3]
30 [2, 1, 2]
31 [2, 1]
32 [2]
33 [0, 3, 1, 0]
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [1476], line 11
      9 print(num,v)
     10 num+=Integer(1)
---> 11 Ps=list(p_lambda(B(A,c),la,c_inf_prefix(c,i*n)) for i in range((coxnum+Integer(2))))
     12 fails=true
     13 for i in range(len(Ps)):

Cell In [1476], line 11, in <genexpr>(.0)
      9 print(num,v)
     10 num+=Integer(1)
---> 11 Ps=list(p_lambda(B(A,c),la,c_inf_prefix(c,i*n)) for i in range((coxnum+Integer(2))))
     12 fails=true
     13 for i in range(len(Ps)):

File ~/git/affine_dominance/software/domination5.py:49, in p_lambda(B, la, seq)
     45         P=Ep*Pp
     46     else:
     47         #print("Pp:   ",Pp,Pp.vertices(),Pp.rays(),Pp.lines(),"\n")
     48         #print("Pm:   ",Pm,Pm.vertices(),Pm.rays(),Pm.lines(),"\n\n")
---> 49         P=(Ep*Pp).convex_hull(Em*Pm)
     50     B.mutate(k)
     51 return P

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4099, in sage.structure.element.Matrix.__mul__ (build/cythonized/sage/structure/element.c:35219)()
   4097 
   4098         if BOTH_ARE_ELEMENT(cl):
-> 4099             return coercion_model.bin_op(left, right, mul)
   4100 
   4101         cdef long value

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1222, in sage.structure.coerce.CoercionModel.bin_op (build/cythonized/sage/structure/coerce.c:15809)()
   1220 if action is not None:
   1221     if (<Action>action)._is_left:
-> 1222         return (<Action>action)._act_(x, y)
   1223     else:
   1224         return (<Action>action)._act_(y, x)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_actions.pyx:157, in sage.structure.coerce_actions.ActedUponAction._act_ (build/cythonized/sage/structure/coerce_actions.c:8579)()
    155     <... 'sage.structure.coerce_actions.ActedUponAction'>
    156 """
--> 157 return (<Element>x)._acted_upon_(g, not self._is_left)
    158 
    159 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:949, in sage.structure.element.Element._acted_upon_ (build/cythonized/sage/structure/element.c:16495)()
    947     return None
    948 
--> 949 cpdef _acted_upon_(self, x, bint self_on_left) noexcept:
    950     """
    951     Use this method to implement ``self`` acted on by x.

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1450, in Polyhedron_base5._acted_upon_(self, actor, self_on_left)
   1448         raise ValueError("matrices should act on the left")
   1449     else:
-> 1450         return self.linear_transformation(actor)
   1451 else:
   1452     return self.dilation(actor)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1879, in Polyhedron_base5.linear_transformation(self, linear_transf, new_base_ring)
   1873     pref_rep = 'Vrep' if self.n_vertices() <= self.n_inequalities() else 'Hrep'
   1875     return new_parent.element_class(new_parent, [new_vertices, new_rays, new_lines],
   1876                                     [new_inequalities, new_equations],
   1877                                     Vrep_minimal=True, Hrep_minimal=True, pref_rep=pref_rep)
-> 1879 return new_parent.element_class(new_parent, [tuple(new_vertices), tuple(new_rays), tuple(new_lines)], None)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:174, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    171     lines = tuple(lines)
    173 if vertices or rays or lines:
--> 174     self._init_from_Vrepresentation(vertices, rays, lines, **kwds)
    175 else:
    176     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:99, in Polyhedron_ppl._init_from_Vrepresentation(self, vertices, rays, lines, minimize, verbose)
     72 def _init_from_Vrepresentation(self, vertices, rays, lines, minimize=True, verbose=False):
     73     """
     74     Construct polyhedron from V-representation data.
     75 
   (...)
     97         sage: Polyhedron_ppl._init_from_Vrepresentation(p, [], [], [])
     98     """
---> 99     gs = self._convert_generators_to_ppl(vertices, rays, lines)
    100     if gs.empty():
    101         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'empty')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:473, in Polyhedron_ppl._convert_generators_to_ppl(vertices, rays, lines)
    471     vertices = []
    472 for v in vertices:
--> 473     gs.insert(Polyhedron_ppl._convert_generator_to_ppl(v, VERTEX))
    474 if rays is None:
    475     rays = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:446, in Polyhedron_ppl._convert_generator_to_ppl(v, typ)
    444 dv = [ d*v_i for v_i in v ]
    445 if typ == VERTEX:
--> 446     return ob(Linear_Expression(dv, 0), d)
    447 else:
    448     return ob(Linear_Expression(dv, 0))

File ppl/linear_algebra.pyx:654, in ppl.linear_algebra.Linear_Expression.__init__()

File ppl/linear_algebra.pyx:49, in ppl.linear_algebra.PPL_Coefficient_from_pyobject()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:1107, in sage.structure.element.Element.__richcmp__ (build/cythonized/sage/structure/element.c:18121)()
   1105         return (<Element>self)._richcmp_(other, op)
   1106     else:
-> 1107         return coercion_model.richcmp(self, other, op)
   1108 
   1109 cpdef _richcmp_(left, right, int op) noexcept:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:2021, in sage.structure.coerce.CoercionModel.richcmp (build/cythonized/sage/structure/coerce.c:26173)()
   2019 # Coerce to a common parent
   2020 try:
-> 2021     x, y = self.canonical_coercion(x, y)
   2022 except (TypeError, NotImplementedError):
   2023     pass

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1422, in sage.structure.coerce.CoercionModel.canonical_coercion (build/cythonized/sage/structure/coerce.c:18956)()
   1420             self._record_exception()
   1421 
-> 1422     raise TypeError("no common canonical parent for objects with parents: '%s' and '%s'"%(xp, yp))
   1423 
   1424 cpdef coercion_maps(self, R, S) noexcept:

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['C',5])
....: c=[4,2,0,3,1]
....: coxnum=coxeter_number(A)
....: num=1
....: n=A.nrows()
....: for v in sortables(A,c[1:]):
....:     la=lam(A,v)
....:     H=Polyhedron(vertices=[la],lines=identity_matrix(n).columns()[:-1])
....:     print(num,v)
....:     num+=1
....:     Ps=list(p_lambda(B(A,c),la,c_inf_prefix(c,i*n)) for i in range((coxnum
....: +2)))
....:     fails=true
....:     for i in range(len(Ps)):
....:         for j in range(i+1,len(Ps)):
....:             Q=Ps[i].intersection(Ps[j])
....:             if Q.intersection(H)==Q:
....:                 print(i,j)
....:                 fails=false
....:                 break
....:     if fails:
....:         print('FAILS!')
....:         break
....: 
1 [2, 0, 3, 1, 2, 0, 3, 1, 2, 0]
0 1
1 6
2 6
6 7
2 [2, 0, 3, 1, 2, 0, 3, 1, 2]
0 2
2 6
6 8
3 [2, 0, 3, 1, 2, 0, 3, 1, 0]
0 1
1 5
2 6
5 7
6 7
7 11
4 [2, 0, 3, 1, 2, 0, 3, 1]
0 2
1 5
2 6
5 7
6 8
7 11
5 [2, 0, 3, 1, 2, 0, 3]
0 3
1 5
3 6
5 7
6 9
7 11
6 [2, 0, 3, 1, 2, 0, 1, 0]
0 1
1 5
2 6
5 7
6 7
7 11
7 [2, 0, 3, 1, 2, 0, 1]
0 2
1 5
2 6
5 7
6 8
7 11
8 [2, 0, 3, 1, 2, 0]
0 3
3 6
6 9
9 [2, 0, 3, 1, 2, 3, 1]
0 1
1 5
2 6
3 6
5 7
6 7
7 11
10 [2, 0, 3, 1, 2, 3]
0 3
1 5
3 6
5 7
6 9
7 11
11 [2, 0, 3, 1, 2, 1]
0 1
1 5
2 6
3 6
5 7
6 7
7 11
12 [2, 0, 3, 1, 2]
0 3
3 6
6 9
13 [2, 0, 3, 1, 0]
0 4
4 6
6 10
14 [2, 0, 3, 1]
0 4
4 6
6 10
15 [2, 0, 3, 2]
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [1477], line 11
      9 print(num,v)
     10 num+=Integer(1)
---> 11 Ps=list(p_lambda(B(A,c),la,c_inf_prefix(c,i*n)) for i in range((coxnum+Integer(2))))
     12 fails=true
     13 for i in range(len(Ps)):

Cell In [1477], line 11, in <genexpr>(.0)
      9 print(num,v)
     10 num+=Integer(1)
---> 11 Ps=list(p_lambda(B(A,c),la,c_inf_prefix(c,i*n)) for i in range((coxnum+Integer(2))))
     12 fails=true
     13 for i in range(len(Ps)):

File ~/git/affine_dominance/software/domination5.py:43, in p_lambda(B, la, seq)
     41 Pm = P.intersection(Hm)
     42 if Pp.dimension() < rk:
---> 43     P=Em*Pm
     44 elif Pm.dimension() < rk:
     45     P=Ep*Pp

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4099, in sage.structure.element.Matrix.__mul__ (build/cythonized/sage/structure/element.c:35219)()
   4097 
   4098         if BOTH_ARE_ELEMENT(cl):
-> 4099             return coercion_model.bin_op(left, right, mul)
   4100 
   4101         cdef long value

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1222, in sage.structure.coerce.CoercionModel.bin_op (build/cythonized/sage/structure/coerce.c:15809)()
   1220 if action is not None:
   1221     if (<Action>action)._is_left:
-> 1222         return (<Action>action)._act_(x, y)
   1223     else:
   1224         return (<Action>action)._act_(y, x)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_actions.pyx:157, in sage.structure.coerce_actions.ActedUponAction._act_ (build/cythonized/sage/structure/coerce_actions.c:8579)()
    155     <... 'sage.structure.coerce_actions.ActedUponAction'>
    156 """
--> 157 return (<Element>x)._acted_upon_(g, not self._is_left)
    158 
    159 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:949, in sage.structure.element.Element._acted_upon_ (build/cythonized/sage/structure/element.c:16495)()
    947     return None
    948 
--> 949 cpdef _acted_upon_(self, x, bint self_on_left) noexcept:
    950     """
    951     Use this method to implement ``self`` acted on by x.

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1450, in Polyhedron_base5._acted_upon_(self, actor, self_on_left)
   1448         raise ValueError("matrices should act on the left")
   1449     else:
-> 1450         return self.linear_transformation(actor)
   1451 else:
   1452     return self.dilation(actor)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1879, in Polyhedron_base5.linear_transformation(self, linear_transf, new_base_ring)
   1873     pref_rep = 'Vrep' if self.n_vertices() <= self.n_inequalities() else 'Hrep'
   1875     return new_parent.element_class(new_parent, [new_vertices, new_rays, new_lines],
   1876                                     [new_inequalities, new_equations],
   1877                                     Vrep_minimal=True, Hrep_minimal=True, pref_rep=pref_rep)
-> 1879 return new_parent.element_class(new_parent, [tuple(new_vertices), tuple(new_rays), tuple(new_lines)], None)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:70, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
---> 70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:195, in Polyhedron_ppl.set_immutable(self)
    193         raise e
    194 if not hasattr(self, '_Hrepresentation'):
--> 195     self._init_Hrepresentation_from_ppl(True)
    196 self._is_mutable = False

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:344, in Polyhedron_ppl._init_Hrepresentation_from_ppl(self, minimize)
    342 for c in cs:
    343     if c.is_inequality():
--> 344         parent._make_Inequality(self, (c.inhomogeneous_term(),) + c.coefficients())
    345     elif c.is_equality():
    346         parent._make_Equation(self, (c.inhomogeneous_term(),) + c.coefficients())

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:1069, in Polyhedra_base._make_Inequality(self, polyhedron, data)
   1067 except IndexError:
   1068     obj = Inequality(self)
-> 1069 obj._set_data(polyhedron, data)
   1070 return obj

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/representation.py:439, in Hrepresentation._set_data(self, polyhedron, data)
    436 if len(data) != self._vector.degree():
    437     raise ValueError('H-representation data requires a list of length ambient_dim+1')
--> 439 self._vector[:] = data
    440 self._A[:] = data[1:]
    441 self._b = self._base_ring(data[0])

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/modules/free_module_element.pyx:1893, in sage.modules.free_module_element.FreeModuleElement.__setitem__ (build/cythonized/sage/modules/free_module_element.c:20047)()
   1891 if isinstance(i, slice):
   1892     PySlice_GetIndicesEx(i, d, &start, &stop, &step, &slicelength)
-> 1893     values = [R(x) for x in value]
   1894     if len(values) != slicelength:
   1895         raise IndexError("slice assignment would change dimension")

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/parent.pyx:901, in sage.structure.parent.Parent.__call__ (build/cythonized/sage/structure/parent.c:12658)()
    899 if mor is not None:
    900     if no_extra_args:
--> 901         return mor._call_(x)
    902     else:
    903         return mor._call_with_args(x, args, kwds)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:158, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_ (build/cythonized/sage/structure/coerce_maps.c:6834)()
    156 cdef Parent C = self._codomain
    157 try:
--> 158     return C._element_constructor(x)
    159 except Exception:
    160     if print_warnings:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/rings/rational.pyx:536, in sage.rings.rational.Rational.__init__ (build/cythonized/sage/rings/rational.cpp:14305)()
    534     """
    535     if x is not None:
--> 536         self.__set_value(x, base)
    537 
    538 def __reduce__(self):

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/rings/rational.pyx:670, in sage.rings.rational.Rational._Rational__set_value (build/cythonized/sage/rings/rational.cpp:16246)()
    668         raise TypeError("unable to convert {!r} to a rational".format(x))
    669 
--> 670 elif isinstance(x, fractions.Fraction):
    671     mpz_set(mpq_numref(self.value), (<integer.Integer> integer.Integer(x.numerator)).value)
    672     mpz_set(mpq_denref(self.value), (<integer.Integer> integer.Integer(x.denominator)).value)

File <frozen abc>:117, in __instancecheck__(cls, instance)

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['C',5])
....: c=[4,2,0,3,1]
....: coxnum=coxeter_number(A)
....: num=1
....: n=A.nrows()
....: for v in sortables(A,c[1:]):
....:     la=lam(A,v)
....:     H=Polyhedron(vertices=[la],lines=identity_matrix(n).columns()[:-1])
....:     print(num,v)
....:     num+=1
....:     Ps=list(p_lambda(B(A,c),la,c_inf_prefix(c,i*n)) for i in range((coxnum
....: //2+1)))
....:     fails=true
....:     for i in range(len(Ps)):
....:         for j in range(i+1,len(Ps)):
....:             Q=Ps[i].intersection(Ps[j])
....:             if Q.intersection(H)==Q:
....:                 print(i,j)
....:                 fails=false
....:                 break
....:     if fails:
....:         print('FAILS!')
....:         break
....: 
1 [2, 0, 3, 1, 2, 0, 3, 1, 2, 0]
0 1
2 [2, 0, 3, 1, 2, 0, 3, 1, 2]
0 2
3 [2, 0, 3, 1, 2, 0, 3, 1, 0]
0 1
1 5
4 [2, 0, 3, 1, 2, 0, 3, 1]
0 2
1 5
5 [2, 0, 3, 1, 2, 0, 3]
0 3
1 5
6 [2, 0, 3, 1, 2, 0, 1, 0]
0 1
1 5
7 [2, 0, 3, 1, 2, 0, 1]
0 2
1 5
8 [2, 0, 3, 1, 2, 0]
0 3
9 [2, 0, 3, 1, 2, 3, 1]
0 1
1 5
10 [2, 0, 3, 1, 2, 3]
0 3
1 5
11 [2, 0, 3, 1, 2, 1]
0 1
1 5
12 [2, 0, 3, 1, 2]
0 3
13 [2, 0, 3, 1, 0]
0 4
14 [2, 0, 3, 1]
0 4
15 [2, 0, 3, 2]
0 1
1 5
16 [2, 0, 3]
0 4
1 5
17 [2, 0, 1, 2, 0, 1]
0 4
18 [2, 0, 1, 2, 0]
0 4
1 5
19 [2, 0, 1, 2]
0 4
1 5
20 [2, 0, 1, 0]
0 5
1 5
21 [2, 0, 1]
0 5
1 5
22 [2, 0]
0 5
1 5
23 [2, 3, 1, 2, 3, 1]
0 1
24 [2, 3, 1, 2, 3]
0 2
25 [2, 3, 1, 2, 1]
0 1
1 5
26 [2, 3, 1, 2]
0 2
1 5
27 [2, 3, 1]
0 4
1 5
28 [2, 3, 2]
0 1
1 5
29 [2, 3]
0 4
1 5
30 [2, 1, 2]
0 4
31 [2, 1]
0 5
1 5
32 [2]
0 5
1 5
33 [0, 3, 1, 0]
0 1
34 [0, 3, 1]
0 1
35 [0, 3]
0 1
36 [0, 1, 0]
0 4
37 [0, 1]
0 4
38 [0]
0 5
39 [3, 1]
0 1
40 [3]
0 1
41 [1]
0 4
42 []
0 5
sage: A=CartanMatrix(['C',5])
....: c=[4,2,0,3,1]
....: coxnum=coxeter_number(A)
....: num=1
....: n=A.nrows()
....: for v in sortables(A,c[1:]):
....:     la=lam(A,v)
....:     H=Polyhedron(vertices=[la],lines=identity_matrix(n).columns()[:-1])
....:     print(num,v)
....:     num+=1
....:     Ps=list(p_lambda(B(A,c),la,c_inf_prefix(c,i*n)) for i in range((coxnum
....: //2+1)))
....:     fails=true
....:     i =0
....:     for j in range(i+1,len(Ps)):
....:         Q=Ps[i].intersection(Ps[j])
....:         if Q.intersection(H)==Q:
....:             print(i,j)
....:             fails=false
....:             break
....:     if fails:
....:         print('FAILS!')
....:         break
1 [2, 0, 3, 1, 2, 0, 3, 1, 2, 0]
0 1
2 [2, 0, 3, 1, 2, 0, 3, 1, 2]
0 2
3 [2, 0, 3, 1, 2, 0, 3, 1, 0]
0 1
4 [2, 0, 3, 1, 2, 0, 3, 1]
0 2
5 [2, 0, 3, 1, 2, 0, 3]
0 3
6 [2, 0, 3, 1, 2, 0, 1, 0]
0 1
7 [2, 0, 3, 1, 2, 0, 1]
0 2
8 [2, 0, 3, 1, 2, 0]
0 3
9 [2, 0, 3, 1, 2, 3, 1]
0 1
10 [2, 0, 3, 1, 2, 3]
0 3
11 [2, 0, 3, 1, 2, 1]
0 1
12 [2, 0, 3, 1, 2]
0 3
13 [2, 0, 3, 1, 0]
0 4
14 [2, 0, 3, 1]
0 4
15 [2, 0, 3, 2]
0 1
16 [2, 0, 3]
0 4
17 [2, 0, 1, 2, 0, 1]
0 4
18 [2, 0, 1, 2, 0]
0 4
19 [2, 0, 1, 2]
0 4
20 [2, 0, 1, 0]
0 5
21 [2, 0, 1]
0 5
22 [2, 0]
0 5
23 [2, 3, 1, 2, 3, 1]
0 1
24 [2, 3, 1, 2, 3]
0 2
25 [2, 3, 1, 2, 1]
0 1
26 [2, 3, 1, 2]
0 2
27 [2, 3, 1]
0 4
28 [2, 3, 2]
0 1
29 [2, 3]
0 4
30 [2, 1, 2]
0 4
31 [2, 1]
0 5
32 [2]
0 5
33 [0, 3, 1, 0]
0 1
34 [0, 3, 1]
0 1
35 [0, 3]
0 1
36 [0, 1, 0]
0 4
37 [0, 1]
0 4
38 [0]
0 5
39 [3, 1]
0 1
40 [3]
0 1
41 [1]
0 4
42 []
0 5
sage: A=CartanMatrix(['C',5])
....: c=[4,2,0,3,1]
....: coxnum=coxeter_number(A)
....: num=1
....: n=A.nrows()
....: for v in sortables(A,c[1:]):
....:     la=lam(A,v)
....:     H=Polyhedron(vertices=[la],lines=identity_matrix(n).columns()[1,3])
....:     print(num,v)
....:     num+=1
....:     Ps=list(p_lambda(B(A,c),la,c_inf_prefix(c,i*n)) for i in range((coxnum
....: //2+1)))
....:     fails=true
....:     i =0
....:     for j in range(i+1,len(Ps)):
....:         Q=Ps[i].intersection(Ps[j])
....:         if Q.intersection(H)==Q:
....:             print(i,j)
....:             fails=false
....:             break
....:     if fails:
....:         print('FAILS!')
....:         break
....: 
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In [1480], line 8
      6 for v in sortables(A,c[Integer(1):]):
      7     la=lam(A,v)
----> 8     H=Polyhedron(vertices=[la],lines=identity_matrix(n).columns()[Integer(1),Integer(3)])
      9     print(num,v)
     10     num+=Integer(1)

TypeError: list indices must be integers or slices, not tuple
sage: A=CartanMatrix(['C',5])
....: c=[4,2,0,3,1]
....: coxnum=coxeter_number(A)
....: num=1
....: n=A.nrows()
....: for v in sortables(A,c[1:]):
....:     la=lam(A,v)
....:     H=Polyhedron(vertices=[la],lines=identity_matrix(n).matrix_from_column
....: s([1,3]).columns()
....:     print(num,v)
....:     num+=1
....:     Ps=list(p_lambda(B(A,c),la,c_inf_prefix(c,i*n)) for i in range((coxnum
....: //2+1)))
....:     fails=true
....:     i =0
....:     for j in range(i+1,len(Ps)):
....:         Q=Ps[i].intersection(Ps[j])
....:         if Q.intersection(H)==Q:
....:             print(i,j)
....:             fails=false
....:             break
....:     if fails:
....:         print('FAILS!')
....:         break
  Cell In [1481], line 8
    H=Polyhedron(vertices=[la],lines=identity_matrix(n).matrix_from_columns([Integer(1),Integer(3)]).columns()
                ^
SyntaxError: '(' was never closed

sage: A=CartanMatrix(['C',5])
....: c=[4,2,0,3,1]
....: coxnum=coxeter_number(A)
....: num=1
....: n=A.nrows()
....: for v in sortables(A,c[1:]):
....:     la=lam(A,v)
....:     H=Polyhedron(vertices=[la],lines=identity_matrix(n).matrix_from_column
....: s([1,3]).columns())
....:     print(num,v)
....:     num+=1
....:     Ps=list(p_lambda(B(A,c),la,c_inf_prefix(c,i*n)) for i in range((coxnum
....: //2+1)))
....:     fails=true
....:     i =0
....:     for j in range(i+1,len(Ps)):
....:         Q=Ps[i].intersection(Ps[j])
....:         if Q.intersection(H)==Q:
....:             print(i,j)
....:             fails=false
....:             break
....:     if fails:
....:         print('FAILS!')
....:         break
1 [2, 0, 3, 1, 2, 0, 3, 1, 2, 0]
0 1
2 [2, 0, 3, 1, 2, 0, 3, 1, 2]
FAILS!
sage: A=CartanMatrix(['C',5])
....: c=[4,2,0,3,1]
....: coxnum=coxeter_number(A)
....: num=1
....: n=A.nrows()
....: for v in sortables(A,c[1:]):
....:     la=lam(A,v)
....:     H=Polyhedron(vertices=[la],lines=identity_matrix(n).matrix_from_column
....: s([0,1,2,4]).columns())
....:     print(num,v)
....:     num+=1
....:     Ps=list(p_lambda(B(A,c),la,c_inf_prefix(c,i*n)) for i in range((coxnum
....: //2+1)))
....:     fails=true
....:     i =0
....:     for j in range(i+1,len(Ps)):
....:         Q=Ps[i].intersection(Ps[j])
....:         if Q.intersection(H)==Q:
....:             print(i,j)
....:             fails=false
....:             break
....:     if fails:
....:         print('FAILS!')
....:         break
1 [2, 0, 3, 1, 2, 0, 3, 1, 2, 0]
0 1
2 [2, 0, 3, 1, 2, 0, 3, 1, 2]
0 4
3 [2, 0, 3, 1, 2, 0, 3, 1, 0]
0 1
4 [2, 0, 3, 1, 2, 0, 3, 1]
0 4
5 [2, 0, 3, 1, 2, 0, 3]
0 4
6 [2, 0, 3, 1, 2, 0, 1, 0]
0 1
7 [2, 0, 3, 1, 2, 0, 1]
0 4
8 [2, 0, 3, 1, 2, 0]
0 4
9 [2, 0, 3, 1, 2, 3, 1]
0 2
10 [2, 0, 3, 1, 2, 3]
0 4
11 [2, 0, 3, 1, 2, 1]
0 2
12 [2, 0, 3, 1, 2]
0 4
13 [2, 0, 3, 1, 0]
0 4
14 [2, 0, 3, 1]
FAILS!
sage: A=CartanMatrix(['C',5])
....: c=[4,2,0,3,1]
....: coxnum=coxeter_number(A)
....: num=1
....: n=A.nrows()
....: for v in sortables(A,c[1:]):
....:     la=lam(A,v)
....:     H=Polyhedron(vertices=[la],lines=identity_matrix(n).columns()[:-1])
....:     print(num,v)
....:     num+=1
....:     Ps=list(p_lambda(B(A,c),la,c_inf_prefix(c,i*n)) for i in range((coxnum
....: //2+1)))
....:     fails=true
....:     i =0
....:     for j in range(i+1,len(Ps)):
....:         Q=Ps[i].intersection(Ps[j])
....:         if Q.intersection(H)==Q:
....:             print(i,j)
....:             fails=false
....:             break
....:     if fails:
....:         print('FAILS!')
....:         break
....: 
1 [2, 0, 3, 1, 2, 0, 3, 1, 2, 0]
0 1
2 [2, 0, 3, 1, 2, 0, 3, 1, 2]
0 2
3 [2, 0, 3, 1, 2, 0, 3, 1, 0]
0 1
4 [2, 0, 3, 1, 2, 0, 3, 1]
0 2
5 [2, 0, 3, 1, 2, 0, 3]
0 3
6 [2, 0, 3, 1, 2, 0, 1, 0]
0 1
7 [2, 0, 3, 1, 2, 0, 1]
0 2
8 [2, 0, 3, 1, 2, 0]
0 3
9 [2, 0, 3, 1, 2, 3, 1]
0 1
10 [2, 0, 3, 1, 2, 3]
0 3
11 [2, 0, 3, 1, 2, 1]
0 1
12 [2, 0, 3, 1, 2]
0 3
13 [2, 0, 3, 1, 0]
0 4
14 [2, 0, 3, 1]
0 4
15 [2, 0, 3, 2]
0 1
16 [2, 0, 3]
0 4
17 [2, 0, 1, 2, 0, 1]
0 4
18 [2, 0, 1, 2, 0]
0 4
19 [2, 0, 1, 2]
0 4
20 [2, 0, 1, 0]
0 5
21 [2, 0, 1]
0 5
22 [2, 0]
0 5
23 [2, 3, 1, 2, 3, 1]
0 1
24 [2, 3, 1, 2, 3]
0 2
25 [2, 3, 1, 2, 1]
0 1
26 [2, 3, 1, 2]
0 2
27 [2, 3, 1]
0 4
28 [2, 3, 2]
0 1
29 [2, 3]
0 4
30 [2, 1, 2]
0 4
31 [2, 1]
0 5
32 [2]
0 5
33 [0, 3, 1, 0]
0 1
34 [0, 3, 1]
0 1
35 [0, 3]
0 1
36 [0, 1, 0]
0 4
37 [0, 1]
0 4
38 [0]
0 5
39 [3, 1]
0 1
40 [3]
0 1
41 [1]
0 4
42 []
0 5
sage: A=CartanMatrix(['C',5])
....: c=[4,2,0,3,1]
....: coxnum=coxeter_number(A)
....: num=1
....: n=A.nrows()
....: for v in sortables(A,c[1:]):
....:     la=lam(A,v)
....:     H=Polyhedron(vertices=[la],lines=identity_matrix(n).columns()[:-1])
....:     print(num,v)
....:     num+=1
....:     Ps=list(p_lambda(B(A,c),la,c_inf_prefix(cinv,i*n)) for i in range((cox
....: num//2+1)))
....:     fails=true
....:     i =0
....:     for j in range(i+1,len(Ps)):
....:         Q=Ps[i].intersection(Ps[j])
....:         if Q.intersection(H)==Q:
....:             print(i,j)
....:             fails=false
....:             break
....:     if fails:
....:         print('FAILS!')
....:         break
....: 
1 [2, 0, 3, 1, 2, 0, 3, 1, 2, 0]
FAILS!
sage: A=CartanMatrix(['C',5])
....: c=[4,2,0,3,1]
....: cinv=[1,3,0,2,4]
....: coxnum=coxeter_number(A)
....: num=1
....: n=A.nrows()
....: for v in sortables(A,c[1:]):
....:     la=lam(A,v)
....:     H=Polyhedron(vertices=[la],lines=identity_matrix(n).columns()[:-1])
....:     print(num,v)
....:     num+=1
....:     Ps=list(p_lambda(B(A,c),la,c_inf_prefix(cinv,i*n)) for i in range((cox
....: num//2+1)))
....:     fails=true
....:     i =0
....:     for j in range(i+1,len(Ps)):
....:         Q=Ps[i].intersection(Ps[j])
....:         if Q.intersection(H)==Q:
....:             print(i,j)
....:             fails=false
....:             break
....:     if fails:
....:         print('FAILS!')
....:         break
1 [2, 0, 3, 1, 2, 0, 3, 1, 2, 0]
0 4
2 [2, 0, 3, 1, 2, 0, 3, 1, 2]
0 4
3 [2, 0, 3, 1, 2, 0, 3, 1, 0]
0 4
4 [2, 0, 3, 1, 2, 0, 3, 1]
0 4
5 [2, 0, 3, 1, 2, 0, 3]
0 3
6 [2, 0, 3, 1, 2, 0, 1, 0]
0 4
7 [2, 0, 3, 1, 2, 0, 1]
0 4
8 [2, 0, 3, 1, 2, 0]
0 3
9 [2, 0, 3, 1, 2, 3, 1]
0 3
10 [2, 0, 3, 1, 2, 3]
0 3
11 [2, 0, 3, 1, 2, 1]
0 3
12 [2, 0, 3, 1, 2]
0 3
13 [2, 0, 3, 1, 0]
0 2
14 [2, 0, 3, 1]
0 2
15 [2, 0, 3, 2]
0 2
16 [2, 0, 3]
0 2
17 [2, 0, 1, 2, 0, 1]
0 1
18 [2, 0, 1, 2, 0]
0 1
19 [2, 0, 1, 2]
0 1
20 [2, 0, 1, 0]
0 1
21 [2, 0, 1]
0 1
22 [2, 0]
0 1
23 [2, 3, 1, 2, 3, 1]
0 4
24 [2, 3, 1, 2, 3]
0 4
25 [2, 3, 1, 2, 1]
0 4
26 [2, 3, 1, 2]
0 4
27 [2, 3, 1]
0 2
28 [2, 3, 2]
0 2
29 [2, 3]
0 2
30 [2, 1, 2]
0 1
31 [2, 1]
0 1
32 [2]
0 1
33 [0, 3, 1, 0]
0 1
34 [0, 3, 1]
0 1
35 [0, 3]
0 1
36 [0, 1, 0]
0 1
37 [0, 1]
0 1
38 [0]
0 1
39 [3, 1]
0 1
40 [3]
0 1
41 [1]
0 1
42 []
0 1
sage: A=CartanMatrix(['C',5])
....: c=[4,2,0,3,1]
....: coxnum=coxeter_number(A)
....: num=1
....: n=A.nrows()
....: for v in sortables(A,c[1:]):
....:     R=p_lambda(B(A,c),lam(A,v),[c[0]])
....:     print(num,v)
....:     num+=1
....:     Ps=list(p_lambda(B(A,c),lam(A,v),c_inf_prefix(c,i*n)) for i in range((
....: coxnum//2+1)))
....:     fails=true
....:     for i in range(len(Ps)):
....:         for j in range(i+1,len(Ps)):
....:             if Ps[i].intersection(Ps[j]).intersection(R).dimension()==0:
....:                 fails=false
....:                 break
....:     if fails:
....:         print('FAILS!')
....:         break
....: 
1 [2, 0, 3, 1, 2, 0, 3, 1, 2, 0]
2 [2, 0, 3, 1, 2, 0, 3, 1, 2]
3 [2, 0, 3, 1, 2, 0, 3, 1, 0]
4 [2, 0, 3, 1, 2, 0, 3, 1]
5 [2, 0, 3, 1, 2, 0, 3]
6 [2, 0, 3, 1, 2, 0, 1, 0]
FAILS!
sage: A=CartanMatrix(['C',5])
....: c=[4,2,0,3,1]
....: coxnum=coxeter_number(A)
....: num=1
....: n=A.nrows()
....: for v in sortables(A,c[1:]):
....:     print(num,v)
....:     num+=1
....:     Ps=list(p_lambda(B(A,c),lam(A,v),c_inf_prefix(c,i*n)) for i in range((
....: coxnum//2+1)))
....:     fails=true
....:     for i in range(len(Ps)):
....:         for j in range(i+1,len(Ps)):
....:             if Ps[i].intersection(Ps[j]).dimension()==0:
....:                 fails=false
....:                 break
....:     if fails:
....:         print('FAILS!')
....:         break
....: 
1 [2, 0, 3, 1, 2, 0, 3, 1, 2, 0]
2 [2, 0, 3, 1, 2, 0, 3, 1, 2]
FAILS!
sage: A=CartanMatrix(['C',5])
....: c=[4,2,0,3,1]
....: coxnum=coxeter_number(A)
....: num=1
....: n=A.nrows()
....: for v in sortables(A,c[1:]):
....:     print(num,v)
....:     num+=1
....:     p_lambda_int(B(A,c),lam(A,v),c_inf_prefix(c,i*n)) for i in [-1,0,1])
....:     fails=true
....:     for i in range(len(Ps)):
....:         for j in range(i+1,len(Ps)):
....:             if Ps[i].intersection(Ps[j]).dimension()==0:
....:                 fails=false
....:                 break
....:     if fails:
....:         print('FAILS!')
....:         break
  Cell In [1489], line 9
    p_lambda_int(B(A,c),lam(A,v),c_inf_prefix(c,i*n)) for i in [-Integer(1),Integer(0),Integer(1)])
                                                                                                  ^
SyntaxError: unmatched ')'

sage: A=CartanMatrix(['C',5])
....: c=[4,2,0,3,1]
....: coxnum=coxeter_number(A)
....: num=1
....: n=A.nrows()
....: for v in sortables(A,c[1:]):
....:     print(num,v)
....:     num+=1
....:     p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*n) for i in [-1,0,1
....: ]))
....:     fails=true
....:     for i in range(len(Ps)):
....:         for j in range(i+1,len(Ps)):
....:             if Ps[i].intersection(Ps[j]).dimension()==0:
....:                 fails=false
....:                 break
....:     if fails:
....:         print('FAILS!')
....:         break
1 [2, 0, 3, 1, 2, 0, 3, 1, 2, 0]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
FAILS!
sage: A=CartanMatrix(['C',5])
....: c=[4,2,0,3,1]
....: coxnum=coxeter_number(A)
....: num=1
....: n=A.nrows()
....: for v in sortables(A,c[1:]):
....:     print(num,v)
....:     num+=1
....:     p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*n) for i in [-1,0,1
....: ]))
....: 
1 [2, 0, 3, 1, 2, 0, 3, 1, 2, 0]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
2 [2, 0, 3, 1, 2, 0, 3, 1, 2]
A 2-dimensional polyhedron in QQ^5 defined as the convex hull of 3 vertices
3 [2, 0, 3, 1, 2, 0, 3, 1, 0]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
4 [2, 0, 3, 1, 2, 0, 3, 1]
A 2-dimensional polyhedron in QQ^5 defined as the convex hull of 3 vertices
5 [2, 0, 3, 1, 2, 0, 3]
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 15 vertices
6 [2, 0, 3, 1, 2, 0, 1, 0]
A 1-dimensional polyhedron in QQ^5 defined as the convex hull of 2 vertices
7 [2, 0, 3, 1, 2, 0, 1]
A 3-dimensional polyhedron in QQ^5 defined as the convex hull of 6 vertices
8 [2, 0, 3, 1, 2, 0]
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 20 vertices
9 [2, 0, 3, 1, 2, 3, 1]
A 2-dimensional polyhedron in QQ^5 defined as the convex hull of 3 vertices
10 [2, 0, 3, 1, 2, 3]
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 14 vertices
11 [2, 0, 3, 1, 2, 1]
A 3-dimensional polyhedron in QQ^5 defined as the convex hull of 8 vertices
12 [2, 0, 3, 1, 2]
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 20 vertices
13 [2, 0, 3, 1, 0]
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 29 vertices
14 [2, 0, 3, 1]
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 25 vertices
15 [2, 0, 3, 2]
A 3-dimensional polyhedron in QQ^5 defined as the convex hull of 9 vertices
16 [2, 0, 3]
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 27 vertices
17 [2, 0, 1, 2, 0, 1]
A 3-dimensional polyhedron in QQ^5 defined as the convex hull of 9 vertices
18 [2, 0, 1, 2, 0]
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 23 vertices
19 [2, 0, 1, 2]
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 24 vertices
20 [2, 0, 1, 0]
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 32 vertices
21 [2, 0, 1]
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 27 vertices
22 [2, 0]
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 28 vertices
23 [2, 3, 1, 2, 3, 1]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
24 [2, 3, 1, 2, 3]
A 2-dimensional polyhedron in QQ^5 defined as the convex hull of 3 vertices
25 [2, 3, 1, 2, 1]
A 1-dimensional polyhedron in QQ^5 defined as the convex hull of 2 vertices
26 [2, 3, 1, 2]
A 3-dimensional polyhedron in QQ^5 defined as the convex hull of 6 vertices
27 [2, 3, 1]
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 20 vertices
28 [2, 3, 2]
A 3-dimensional polyhedron in QQ^5 defined as the convex hull of 9 vertices
29 [2, 3]
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 23 vertices
30 [2, 1, 2]
A 3-dimensional polyhedron in QQ^5 defined as the convex hull of 9 vertices
31 [2, 1]
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 24 vertices
32 [2]
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 21 vertices
33 [0, 3, 1, 0]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
34 [0, 3, 1]
A 2-dimensional polyhedron in QQ^5 defined as the convex hull of 3 vertices
35 [0, 3]
A 3-dimensional polyhedron in QQ^5 defined as the convex hull of 6 vertices
36 [0, 1, 0]
A 3-dimensional polyhedron in QQ^5 defined as the convex hull of 6 vertices
37 [0, 1]
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 11 vertices
38 [0]
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 20 vertices
39 [3, 1]
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
40 [3]
A 3-dimensional polyhedron in QQ^5 defined as the convex hull of 6 vertices
41 [1]
A 3-dimensional polyhedron in QQ^5 defined as the convex hull of 6 vertices
42 []
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 15 vertices
sage: A=CartanMatrix(['C',5])
....: c=[4,2,0,3,1]
....: coxnum=coxeter_number(A)
....: num=1
....: n=A.nrows()
....: for v in sortables(A,c[1:]):
....:     print(num,v)
....:     num+=1
....:     p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*n) for i in [-1,0,1
....: ])).rays()
....: 
1 [2, 0, 3, 1, 2, 0, 3, 1, 2, 0]
()
2 [2, 0, 3, 1, 2, 0, 3, 1, 2]
()
3 [2, 0, 3, 1, 2, 0, 3, 1, 0]
()
4 [2, 0, 3, 1, 2, 0, 3, 1]
()
5 [2, 0, 3, 1, 2, 0, 3]
()
6 [2, 0, 3, 1, 2, 0, 1, 0]
()
7 [2, 0, 3, 1, 2, 0, 1]
()
8 [2, 0, 3, 1, 2, 0]
()
9 [2, 0, 3, 1, 2, 3, 1]
()
10 [2, 0, 3, 1, 2, 3]
()
11 [2, 0, 3, 1, 2, 1]
()
12 [2, 0, 3, 1, 2]
()
13 [2, 0, 3, 1, 0]
()
14 [2, 0, 3, 1]
()
15 [2, 0, 3, 2]
()
16 [2, 0, 3]
()
17 [2, 0, 1, 2, 0, 1]
()
18 [2, 0, 1, 2, 0]
()
19 [2, 0, 1, 2]
()
20 [2, 0, 1, 0]
()
21 [2, 0, 1]
()
22 [2, 0]
()
23 [2, 3, 1, 2, 3, 1]
()
24 [2, 3, 1, 2, 3]
()
25 [2, 3, 1, 2, 1]
()
26 [2, 3, 1, 2]
()
27 [2, 3, 1]
()
28 [2, 3, 2]
()
29 [2, 3]
()
30 [2, 1, 2]
()
31 [2, 1]
()
32 [2]
()
33 [0, 3, 1, 0]
()
34 [0, 3, 1]
()
35 [0, 3]
()
36 [0, 1, 0]
()
37 [0, 1]
()
38 [0]
()
39 [3, 1]
()
40 [3]
()
41 [1]
()
42 []
()
sage: A=CartanMatrix(['C',5])
....: c=[4,2,0,3,1]
....: coxnum=coxeter_number(A)
....: num=1
....: n=A.nrows()
....: for v in sortables(A,c[1:]):
....:     print(num,v)
....:     num+=1
....:     p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*n) for i in [-1,0,1
....: ])).lines()
....: 
1 [2, 0, 3, 1, 2, 0, 3, 1, 2, 0]
()
2 [2, 0, 3, 1, 2, 0, 3, 1, 2]
()
3 [2, 0, 3, 1, 2, 0, 3, 1, 0]
()
4 [2, 0, 3, 1, 2, 0, 3, 1]
()
5 [2, 0, 3, 1, 2, 0, 3]
()
6 [2, 0, 3, 1, 2, 0, 1, 0]
()
7 [2, 0, 3, 1, 2, 0, 1]
()
8 [2, 0, 3, 1, 2, 0]
()
9 [2, 0, 3, 1, 2, 3, 1]
()
10 [2, 0, 3, 1, 2, 3]
()
11 [2, 0, 3, 1, 2, 1]
()
12 [2, 0, 3, 1, 2]
()
13 [2, 0, 3, 1, 0]
()
14 [2, 0, 3, 1]
()
15 [2, 0, 3, 2]
()
16 [2, 0, 3]
()
17 [2, 0, 1, 2, 0, 1]
()
18 [2, 0, 1, 2, 0]
()
19 [2, 0, 1, 2]
()
20 [2, 0, 1, 0]
()
21 [2, 0, 1]
()
22 [2, 0]
()
23 [2, 3, 1, 2, 3, 1]
()
24 [2, 3, 1, 2, 3]
()
25 [2, 3, 1, 2, 1]
()
26 [2, 3, 1, 2]
()
27 [2, 3, 1]
()
28 [2, 3, 2]
()
29 [2, 3]
()
30 [2, 1, 2]
()
31 [2, 1]
()
32 [2]
()
33 [0, 3, 1, 0]
()
34 [0, 3, 1]
()
35 [0, 3]
()
36 [0, 1, 0]
()
37 [0, 1]
()
38 [0]
()
39 [3, 1]
()
40 [3]
()
41 [1]
()
42 []
()
sage: A=CartanMatrix(['C',5])
....: c=[4,2,0,3,1]
....: coxnum=coxeter_number(A)
....: num=1
....: n=A.nrows()
....: for v in sortables(A,c[1:]):
....:     print(num,v)
....:     num+=1
....:     p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*n) for i in [-1,0,1
....: ])).vertices()
....: 
1 [2, 0, 3, 1, 2, 0, 3, 1, 2, 0]
(A vertex at (-1, -1, -1, -1, 5),)
2 [2, 0, 3, 1, 2, 0, 3, 1, 2]
(A vertex at (-1, -1, -2, -1, 4),
 A vertex at (-1, -1, -3/2, 0, 9/2),
 A vertex at (-1, -1, -2, 1, 4))
3 [2, 0, 3, 1, 2, 0, 3, 1, 0]
(A vertex at (-2, 1, -2, -1, 5),)
4 [2, 0, 3, 1, 2, 0, 3, 1]
(A vertex at (-2, 1, -5/2, 0, 9/2),
 A vertex at (-2, 1, -3, -1, 4),
 A vertex at (-2, 1, -3, 1, 4))
5 [2, 0, 3, 1, 2, 0, 3]
(A vertex at (-3, 1, -2, 1, 4),
 A vertex at (-3, 2, -5/3, 0, 13/3),
 A vertex at (-3, 2, -3, 2, 3),
 A vertex at (-3, 2, -2, -1, 4),
 A vertex at (-3, 1, -3, 2, 3),
 A vertex at (-3, 2, -3, -3, 3),
 A vertex at (-5/2, 1, -1, 0, 9/2),
 A vertex at (-2, 1, -2, 1, 3),
 A vertex at (-2, 1, -1, -1, 4),
 A vertex at (-7/3, 4/3, -1, 0, 13/3),
 A vertex at (-2, 1, -1, 0, 4),
 A vertex at (-2, 1, -2, -3, 3),
 A vertex at (-3, 1, -3, -3, 3),
 A vertex at (-3, 1, -3/2, 0, 9/2),
 A vertex at (-3, 3/2, -3/2, 0, 9/2))
6 [2, 0, 3, 1, 2, 0, 1, 0]
(A vertex at (-1, 1, -3, -1, 5), A vertex at (-1, 2, -3, -1, 5))
7 [2, 0, 3, 1, 2, 0, 1]
(A vertex at (-1, 1, -4, 1, 4),
 A vertex at (-1, 2, -7/2, 0, 9/2),
 A vertex at (-1, 2, -4, 1, 4),
 A vertex at (-1, 2, -4, -1, 4),
 A vertex at (-1, 1, -4, -1, 4),
 A vertex at (-1, 1, -7/2, 0, 9/2))
8 [2, 0, 3, 1, 2, 0]
(A vertex at (-2, 3, -4, 2, 3),
 A vertex at (-2, 3, -4, -3, 3),
 A vertex at (-2, 3, -8/3, 0, 13/3),
 A vertex at (-2, 3, -3, -1, 4),
 A vertex at (-1, 1, -3, -3, 3),
 A vertex at (-1, 2, -3, -3, 3),
 A vertex at (-1, 1, -3/2, 0, 9/2),
 A vertex at (-1, 1, -3, 2, 3),
 A vertex at (-1, 2, -3, 1, 3),
 A vertex at (-4/3, 7/3, -2, 0, 13/3),
 A vertex at (-1, 2, -2, 0, 4),
 A vertex at (-1, 1, -2, 1, 4),
 A vertex at (-1, 2, -2, -1, 4),
 A vertex at (-1, 3/2, -3/2, 0, 9/2),
 A vertex at (-2, 5/2, -5/2, 0, 9/2),
 A vertex at (-2, 1, -3, 1, 4),
 A vertex at (-2, 2, -3, 1, 4),
 A vertex at (-2, 1, -4, -3, 3),
 A vertex at (-2, 1, -5/2, 0, 9/2),
 A vertex at (-2, 1, -4, 2, 3))
9 [2, 0, 3, 1, 2, 3, 1]
(A vertex at (-4, 1, -1, -1, 4),
 A vertex at (-4, 1, -1, -3, 4),
 A vertex at (-4, 3, -1, -1, 4))
10 [2, 0, 3, 1, 2, 3]
(A vertex at (-4, 1, -2, 1, 3),
 A vertex at (-4, 1, -1, -1, 4),
 A vertex at (-4, 2, -1, 0, 4),
 A vertex at (-4, 3, -4/3, 0, 11/3),
 A vertex at (-4, 3, -2, -2, 3),
 A vertex at (-4, 3, -2, 1, 3),
 A vertex at (-4, 1, -1, 0, 4),
 A vertex at (-11/3, 8/3, -1, 0, 11/3),
 A vertex at (-3, 1, -1, -3, 3),
 A vertex at (-3, 2, -1, -2, 3),
 A vertex at (-3, 1, -1, 0, 3),
 A vertex at (-3, 2, -1, 0, 3),
 A vertex at (-4, 1, -2, -3, 3),
 A vertex at (-4, 2, -2, -3, 3))
11 [2, 0, 3, 1, 2, 1]
(A vertex at (-3, 4, -2, -1, 4),
 A vertex at (-2, 1, -1, -3, 4),
 A vertex at (-2, 2, -1, -1, 4),
 A vertex at (-2, 1, -1, -1, 4),
 A vertex at (-2, 2, -1, -2, 4),
 A vertex at (-3, 1, -2, -1, 4),
 A vertex at (-3, 1, -2, -3, 4),
 A vertex at (-3, 2, -2, -3, 4))
12 [2, 0, 3, 1, 2]
(A vertex at (-3, 4, -3, -2, 3),
 A vertex at (-3, 4, -7/3, 0, 11/3),
 A vertex at (-3, 4, -3, 1, 3),
 A vertex at (-2, 1, -1, -1, 4),
 A vertex at (-2, 3, -2, -2, 3),
 A vertex at (-2, 1, -2, 1, 3),
 A vertex at (-1, 1, -1, -3, 3),
 A vertex at (-8/3, 11/3, -2, 0, 11/3),
 A vertex at (-2, 1, -1, 0, 4),
 A vertex at (-2, 2, -2, 1, 3),
 A vertex at (-2, 2, -1, 0, 4),
 A vertex at (-2, 3, -2, 0, 3),
 A vertex at (-1, 1, -1, 0, 3),
 A vertex at (-3, 3, -2, 0, 4),
 A vertex at (-3, 1, -2, 0, 4),
 A vertex at (-3, 1, -3, -3, 3),
 A vertex at (-3, 3, -3, -3, 3),
 A vertex at (-3, 2, -2, -1, 4),
 A vertex at (-3, 1, -2, -1, 4),
 A vertex at (-3, 1, -3, 1, 3))
13 [2, 0, 3, 1, 0]
(A vertex at (1/2, -1/2, 0, 0, 9/2),
 A vertex at (1/2, 0, 0, 0, 9/2),
 A vertex at (1, 0, 0, -1, 4),
 A vertex at (-1, 3/2, -3/2, 0, 9/2),
 A vertex at (1, 1, -1, -3, 3),
 A vertex at (0, -1, -1, 1, 4),
 A vertex at (4/5, 0, 1/5, 0, 22/5),
 A vertex at (1, 0, 0, 0, 4),
 A vertex at (1, 0, -2, 2, 2),
 A vertex at (1, 1, -1, 0, 3),
 A vertex at (-1, 3, -4, 3, 2),
 A vertex at (1, 1, -2, 1, 2),
 A vertex at (0, -1, -3, 3, 2),
 A vertex at (-1, -1, -4, 3, 2),
 A vertex at (1/2, 0, -5/2, 3, 2),
 A vertex at (-1, -1, -2, 1, 4),
 A vertex at (0, 0, -1, 1, 4),
 A vertex at (-1, 3, -2, 0, 4),
 A vertex at (0, 2, -1, 0, 4),
 A vertex at (-1, 1, -2, 1, 4),
 A vertex at (1/2, 0, -1, 3/2, 7/2),
 A vertex at (-1, 3, -3, -3, 3),
 A vertex at (-1, -1, -3/2, 0, 9/2),
 A vertex at (-1, -1, -4, -5, 2),
 A vertex at (0, -1, -3, -5, 2),
 A vertex at (1, 1, -2, -5, 2),
 A vertex at (-1, 3, -4, -5, 2),
 A vertex at (1, 0, -2, -5, 2),
 A vertex at (0, -1, -1/2, 0, 9/2))
14 [2, 0, 3, 1]
(A vertex at (-2, 4, -3, -4, 2),
 A vertex at (-2, 4, -5/3, 0, 10/3),
 A vertex at (-2, 4, -3, 2, 2),
 A vertex at (-1, -1, 0, -1, 4),
 A vertex at (0, -1, 0, 0, 3),
 A vertex at (0, -1, -1, 1, 2),
 A vertex at (0, -1, 0, -3, 3),
 A vertex at (0, -1, -1, -5, 2),
 A vertex at (0, 2, -1, 0, 2),
 A vertex at (-1, 0, 0, -1, 4),
 A vertex at (-4/3, 10/3, -1, 0, 10/3),
 A vertex at (-1, -1, 0, 0, 4),
 A vertex at (-1, -1, -2, 2, 2),
 A vertex at (1, 0, 0, -5, 2),
 A vertex at (0, 2, -1, -4, 2),
 A vertex at (1, 0, 0, 0, 2),
 A vertex at (0, 0, -1, 2, 2),
 A vertex at (0, 0, 1, 0, 4),
 A vertex at (-2, 2, -1, 0, 4),
 A vertex at (-2, 3, -3, -5, 2),
 A vertex at (-2, -1, -3, 2, 2),
 A vertex at (-2, -1, -1, 0, 4),
 A vertex at (-2, -1, -1, -1, 4),
 A vertex at (-2, -1, -3, -5, 2),
 A vertex at (-2, 1, -1, -1, 4))
15 [2, 0, 3, 2]
(A vertex at (0, -2, 0, -4, 3),
 A vertex at (-1, -2, -1, -1, 3),
 A vertex at (1, 0, 1, -1, 3),
 A vertex at (0, -2, 0, -1, 3),
 A vertex at (-1, 4, -1, -1, 3),
 A vertex at (1, 0, 1, -3, 3),
 A vertex at (0, 0, 0, -4, 3),
 A vertex at (-1, 1, -1, -4, 3),
 A vertex at (-1, -2, -1, -4, 3))
16 [2, 0, 3]
(A vertex at (-1, 4, -2, -2, 2),
 A vertex at (-1, 4, -4/3, 0, 8/3),
 A vertex at (-1, 4, -2, 1, 2),
 A vertex at (0, -2, 0, 0, 3),
 A vertex at (1, 0, 1, 0, 3),
 A vertex at (0, 3, -1, -2, 2),
 A vertex at (3/2, 0, 1/2, -7/2, 2),
 A vertex at (3/2, 0, 1/2, 0, 2),
 A vertex at (0, -2, -1, -4, 2),
 A vertex at (1, 0, 1, -1, 3),
 A vertex at (0, -2, 0, -2, 3),
 A vertex at (-2/3, 11/3, -1, 0, 8/3),
 A vertex at (1, 0, 0, 1, 2),
 A vertex at (1, 0, 0, -4, 2),
 A vertex at (0, 3, -1, 0, 2),
 A vertex at (0, -2, -1, 1, 2),
 A vertex at (1, -1, 0, 0, 2),
 A vertex at (1, -1, 0, -4, 2),
 A vertex at (0, 2, 0, 0, 3),
 A vertex at (0, 0, 0, -2, 3),
 A vertex at (-1, 1, -1, -2, 3),
 A vertex at (-1, 3, -1, 0, 3),
 A vertex at (-1, -2, -2, 1, 2),
 A vertex at (-1, 2, -2, -4, 2),
 A vertex at (-1, -2, -1, 0, 3),
 A vertex at (-1, -2, -2, -4, 2),
 A vertex at (-1, -2, -1, -2, 3))
17 [2, 0, 1, 2, 0, 1]
(A vertex at (-1, -4, 0, -5, 2),
 A vertex at (-1, -4, -1, -7, 1),
 A vertex at (-1, -4, -1, 1, 1),
 A vertex at (-1, -4, 0, 0, 2),
 A vertex at (-1, -1, 5/3, 0, 11/3),
 A vertex at (-1, -1, 0, -5, 2),
 A vertex at (-1, -1, -1, -7, 1),
 A vertex at (-1, -1, -1, 4, 1),
 A vertex at (-1, -7/3, 5/3, 0, 11/3))
18 [2, 0, 1, 2, 0]
(A vertex at (-2, 1, 2/3, 0, 11/3),
 A vertex at (-2, 0, -1, 3, 2),
 A vertex at (-2, 1, -2, 4, 1),
 A vertex at (-2, 1, -2, -7, 1),
 A vertex at (-2, 1, -1, -5, 2),
 A vertex at (-2, 0, -2, 4, 1),
 A vertex at (-1, -1/3, 5/3, 0, 11/3),
 A vertex at (-1, 0, -1, 3, 1),
 A vertex at (-1, -2, 0, 0, 2),
 A vertex at (-1, -2, 0, -5, 2),
 A vertex at (-1, 0, 1, 1, 3),
 A vertex at (-1, -2, -1, -7, 1),
 A vertex at (-1, -2, -1, 1, 1),
 A vertex at (-1, 0, -1, -7, 1),
 A vertex at (-1, 0, 0, -5, 2),
 A vertex at (-1, 0, 5/3, 0, 11/3),
 A vertex at (-2, 0, 1, 0, 4),
 A vertex at (-2, 0, 0, -3, 3),
 A vertex at (-2, -2, -2, 2, 1),
 A vertex at (-2, -2, -2, -7, 1),
 A vertex at (-2, -2, 0, -3, 3),
 A vertex at (-2, -2, 0, 0, 3),
 A vertex at (-2, -1, 1, 0, 4))
19 [2, 0, 1, 2]
(A vertex at (-3, 2, -1, -6, 1),
 A vertex at (-3, 2, 1, 0, 3),
 A vertex at (-3, 2, -1, 3, 1),
 A vertex at (-3, 0, -1, 3, 1),
 A vertex at (-3, 0, 1, 1, 3),
 A vertex at (-2, -2, 0, 0, 1),
 A vertex at (-1, 0, 1, -6, 1),
 A vertex at (-1, 0, 2, -3, 2),
 A vertex at (-1, -1, 1, 0, 1),
 A vertex at (-2, 1, 2, 0, 3),
 A vertex at (-1, 0, 2, 0, 2),
 A vertex at (-2, -2, 0, -7, 1),
 A vertex at (-1, 0, 1, 1, 1),
 A vertex at (-5/2, 0, 2, 0, 7/2),
 A vertex at (-2, 0, 0, -7, 1),
 A vertex at (-1, -1, 1, -6, 1),
 A vertex at (-3, 1, -1, -7, 1),
 A vertex at (-3, 0, 0, -5, 2),
 A vertex at (-3, -1/3, 5/3, 0, 11/3),
 A vertex at (-3, 0, 5/3, 0, 11/3),
 A vertex at (-3, -2, -1, -7, 1),
 A vertex at (-3, -2, 0, -5, 2),
 A vertex at (-3, -2, -1, 1, 1),
 A vertex at (-3, -2, 0, 0, 2))
20 [2, 0, 1, 0]
(A vertex at (-1, 2, -3, -7, 1),
 A vertex at (-1, 2, -3, 4, 1),
 A vertex at (-1, 2, -1/3, 0, 11/3),
 A vertex at (-1, 2, -2, -5, 2),
 A vertex at (1, -1, -1, -7, 1),
 A vertex at (0, -2, -2, 2, 1),
 A vertex at (0, -2, 0, 0, 3),
 A vertex at (1, 0, 0, -5, 2),
 A vertex at (0, -2, 0, -3, 3),
 A vertex at (1, -1, 0, -5, 2),
 A vertex at (0, -2, -2, -7, 1),
 A vertex at (1, 0, -1, 2, 1),
 A vertex at (1/3, 2/3, 1, 0, 11/3),
 A vertex at (1, -1, 0, 0, 2),
 A vertex at (0, -1, 1, 0, 4),
 A vertex at (0, 0, -2, 4, 1),
 A vertex at (1, 0, -1, -7, 1),
 A vertex at (1, 0, 1, 0, 3),
 A vertex at (1, 0, 1, -2, 3),
 A vertex at (1, -1, -1, 1, 1),
 A vertex at (3/5, 0, 7/5, 0, 19/5),
 A vertex at (0, 0, -1, 3, 2),
 A vertex at (-1, -1, -1, 2, 3),
 A vertex at (-1, 0, -1, 2, 3),
 A vertex at (-1, 0, 1/3, 0, 13/3),
 A vertex at (-1, -1, -3, 4, 1),
 A vertex at (-1, -5/3, 1/3, 0, 13/3),
 A vertex at (-1, -2, -3, -7, 1),
 A vertex at (-1, -2, 0, -1, 4),
 A vertex at (-1, 0, 0, -1, 4),
 A vertex at (-1, -2, -3, 3, 1),
 A vertex at (-1, -2, 0, 0, 4))
21 [2, 0, 1]
(A vertex at (-2, 0, 1, 0, 4),
 A vertex at (-2, 3, -2, -6, 1),
 A vertex at (-2, 3, 0, 0, 3),
 A vertex at (-2, 3, -2, 3, 1),
 A vertex at (-2, -1, 1, 0, 4),
 A vertex at (-1, 0, 1, 1, 3),
 A vertex at (1, 0, 1, 0, 1),
 A vertex at (-1/3, 1/3, 2, 0, 10/3),
 A vertex at (0, -2, 0, -7, 1),
 A vertex at (1, 0, 1, -6, 1),
 A vertex at (0, 0, 2, -1, 3),
 A vertex at (-1, 0, -1, 3, 1),
 A vertex at (0, 0, 0, 2, 1),
 A vertex at (0, -2, 0, 0, 1),
 A vertex at (-1, 2, 1, 0, 3),
 A vertex at (0, 0, 2, 0, 3),
 A vertex at (0, 0, 0, -7, 1),
 A vertex at (-1, 1, -1, 3, 1),
 A vertex at (-1/2, 0, 2, 0, 7/2),
 A vertex at (-1, 1, 0, 2, 2),
 A vertex at (-2, 0, 0, -3, 3),
 A vertex at (-2, 2, -2, -7, 1),
 A vertex at (-2, -2, -2, 2, 1),
 A vertex at (-2, -2, 0, 0, 3),
 A vertex at (-2, -1, -2, 3, 1),
 A vertex at (-2, -2, -2, -7, 1),
 A vertex at (-2, -2, 0, -3, 3))
22 [2, 0]
(A vertex at (-1, 3, -1, -4, 1),
 A vertex at (-1, 3, 1/3, 0, 7/3),
 A vertex at (-1, 3, -1, 2, 1),
 A vertex at (0, 0, 0, -6, 1),
 A vertex at (0, -1, 2, 0, 3),
 A vertex at (3/5, 0, 12/5, 0, 14/5),
 A vertex at (0, -1, 0, 2, 1),
 A vertex at (1, 1, 1, 0, 1),
 A vertex at (3/2, 0, 3/2, -9/2, 1),
 A vertex at (0, 0, 2, 0, 3),
 A vertex at (3/2, 0, 3/2, 0, 1),
 A vertex at (1/2, 0, 2, 1/2, 5/2),
 A vertex at (0, -3, 0, -6, 1),
 A vertex at (-1/3, 7/3, 1, 0, 7/3),
 A vertex at (1/2, 0, 1/2, 2, 1),
 A vertex at (0, -3, 0, 0, 1),
 A vertex at (1, 1, 1, -4, 1),
 A vertex at (-1, -3, 0, 0, 2),
 A vertex at (-1, -3, -1, 1, 1),
 A vertex at (-1, -3, -1, -6, 1),
 A vertex at (-1, -3, 0, -4, 2),
 A vertex at (-1, 0, 1, -1, 3),
 A vertex at (-1, 1, 1, 0, 3),
 A vertex at (-1, -2, -1, 2, 1),
 A vertex at (-1, -2, 1, 0, 3),
 A vertex at (-1, 1, -1, -6, 1),
 A vertex at (-1, 0, 0, -4, 2),
 A vertex at (-1, -2, 1, -1, 3))
23 [2, 3, 1, 2, 3, 1]
(A vertex at (4, -1, -1, -1, 4),)
24 [2, 3, 1, 2, 3]
(A vertex at (4, -1, -2, 1, 3),
 A vertex at (4, -1, -2, -1, 3),
 A vertex at (4, -1, -3/2, 0, 7/2))
25 [2, 3, 1, 2, 1]
(A vertex at (3, 0, -2, -1, 4), A vertex at (3, 1, -2, -1, 4))
26 [2, 3, 1, 2]
(A vertex at (3, 0, -3, 1, 3),
 A vertex at (3, 1, -3, 1, 3),
 A vertex at (3, 1, -3, -1, 3),
 A vertex at (3, 1, -5/2, 0, 7/2),
 A vertex at (3, 0, -5/2, 0, 7/2),
 A vertex at (3, 0, -3, -1, 3))
27 [2, 3, 1]
(A vertex at (3, 1/2, -1/2, 0, 7/2),
 A vertex at (3, 1, -1, -1, 3),
 A vertex at (2, 3/2, -3/2, 0, 7/2),
 A vertex at (2, 2, -3, 2, 2),
 A vertex at (2, -1, -3, 2, 2),
 A vertex at (3, 0, -2, 2, 2),
 A vertex at (8/3, 4/3, -1, 0, 10/3),
 A vertex at (3, 1, -2, 1, 2),
 A vertex at (3, 1, -1, 0, 3),
 A vertex at (3, 0, -1, 1, 3),
 A vertex at (2, -1, -2, 1, 3),
 A vertex at (2, 2, -5/3, 0, 10/3),
 A vertex at (2, 1, -2, 1, 3),
 A vertex at (2, 2, -2, -1, 3),
 A vertex at (2, -1, -3/2, 0, 7/2),
 A vertex at (3, 0, -1/2, 0, 7/2),
 A vertex at (3, 1, -2, -3, 2),
 A vertex at (3, 0, -2, -3, 2),
 A vertex at (2, -1, -3, -3, 2),
 A vertex at (2, 2, -3, -3, 2))
28 [2, 3, 2]
(A vertex at (2, -1, 0, -3, 3),
 A vertex at (1, -2, -1, -1, 3),
 A vertex at (5/2, 0, 1/2, -1, 3),
 A vertex at (2, -1, 0, -1, 3),
 A vertex at (1, 3, -1, -1, 3),
 A vertex at (5/2, 0, 1/2, -5/2, 3),
 A vertex at (2, 0, 0, -3, 3),
 A vertex at (1, 1, -1, -3, 3),
 A vertex at (1, -2, -1, -3, 3))
29 [2, 3]
(A vertex at (3, 0, 0, -3, 2),
 A vertex at (2, -1, 0, -1, 3),
 A vertex at (1, 2, -1, 0, 3),
 A vertex at (4/3, 8/3, -1, 0, 8/3),
 A vertex at (5/2, 0, 1/2, 0, 3),
 A vertex at (1, 3, -2, 1, 2),
 A vertex at (2, 2, -1, 0, 2),
 A vertex at (1, -2, -2, 1, 2),
 A vertex at (1, -2, -1, 0, 3),
 A vertex at (2, -1, -1, 1, 2),
 A vertex at (5/2, 0, -1/2, 1, 2),
 A vertex at (2, -1, 0, 0, 3),
 A vertex at (3, 0, 0, 0, 2),
 A vertex at (2, 1, 0, 0, 3),
 A vertex at (1, 3, -4/3, 0, 8/3),
 A vertex at (1, 3, -2, -2, 2),
 A vertex at (2, 2, -1, -2, 2),
 A vertex at (5/2, 0, 1/2, -1/2, 3),
 A vertex at (2, 0, 0, -1, 3),
 A vertex at (1, 2, -2, -3, 2),
 A vertex at (1, -2, -1, -1, 3),
 A vertex at (1, -2, -2, -3, 2),
 A vertex at (1, 1, -1, -1, 3))
30 [2, 1, 2]
(A vertex at (3, -3, 0, -3, 2),
 A vertex at (3, -1, -1, 3, 1),
 A vertex at (3, -3, 0, 0, 2),
 A vertex at (3, -3, -1, 1, 1),
 A vertex at (3, -1, 1, 0, 3),
 A vertex at (3, -2, 1, 0, 3),
 A vertex at (3, -1, 0, -3, 2),
 A vertex at (3, -3, -1, -5, 1),
 A vertex at (3, -1, -1, -5, 1))
31 [2, 1]
(A vertex at (3, -1, 0, -3, 2),
 A vertex at (2, -2, 0, -1, 3),
 A vertex at (3, 0, 1, 0, 3),
 A vertex at (2, -5/3, 1/3, 0, 10/3),
 A vertex at (2, 1, 0, 0, 3),
 A vertex at (2, 0, 1/3, 0, 10/3),
 A vertex at (2, 1, -2, 3, 1),
 A vertex at (3, -1, -1, 1, 1),
 A vertex at (2, -1, -1, 2, 2),
 A vertex at (2, -1, -2, 3, 1),
 A vertex at (3, -1, 0, 0, 2),
 A vertex at (3, 0, -1, 2, 1),
 A vertex at (2, -2, -2, 2, 1),
 A vertex at (2, -2, 0, 0, 3),
 A vertex at (2, 0, -1, 2, 2),
 A vertex at (5/2, 0, -1, 5/2, 3/2),
 A vertex at (5/2, 0, -3/2, 3, 1),
 A vertex at (2, -2, -2, -5, 1),
 A vertex at (3, 0, -1, -5, 1),
 A vertex at (3, -1, -1, -5, 1),
 A vertex at (2, 1, -2, -5, 1),
 A vertex at (2, 0, 0, -1, 3),
 A vertex at (3, 0, 0, -3, 2),
 A vertex at (2, 1, -1, -3, 2))
32 [2]
(A vertex at (1, -3, 0, -3, 2),
 A vertex at (2, -2, 0, -5, 1),
 A vertex at (1, -2, 1, 0, 3),
 A vertex at (3, 0, 1, -4, 1),
 A vertex at (5/3, 4/3, 1, 0, 7/3),
 A vertex at (1, -2, -1, 2, 1),
 A vertex at (1, 2, 1/3, 0, 7/3),
 A vertex at (2, -2, 0, 0, 1),
 A vertex at (1, 2, -1, 2, 1),
 A vertex at (3, 0, 1, 0, 1),
 A vertex at (1, 2, -1, -4, 1),
 A vertex at (2, 0, 0, 2, 1),
 A vertex at (1, -3, -1, 1, 1),
 A vertex at (2, 0, 1, 1, 2),
 A vertex at (1, -3, 0, 0, 2),
 A vertex at (11/5, 0, 9/5, 0, 13/5),
 A vertex at (1, 0, 1, 0, 3),
 A vertex at (1, 0, 0, -3, 2),
 A vertex at (1, -3, -1, -5, 1),
 A vertex at (2, 0, 0, -5, 1),
 A vertex at (1, 1, -1, -5, 1))
33 [0, 3, 1, 0]
(A vertex at (-1, -1, 4, -1, 2),)
34 [0, 3, 1]
(A vertex at (-2, 0, 3, -1, 2),
 A vertex at (-2, 0, 3, -2, 2),
 A vertex at (-2, 1, 3, -1, 2))
35 [0, 3]
(A vertex at (-1, 2, 2, -1, 2),
 A vertex at (0, 0, 3, -2, 2),
 A vertex at (0, 0, 3, -1, 2),
 A vertex at (-1, -1, 2, -1, 2),
 A vertex at (-1, -1, 2, -3, 2),
 A vertex at (-1, 0, 2, -3, 2))
36 [0, 1, 0]
(A vertex at (-1, -2, 3, -2, 1),
 A vertex at (-1, -2, 3, 0, 1),
 A vertex at (-1, -4/3, 11/3, 0, 5/3),
 A vertex at (-1, -1, 3, 1, 1),
 A vertex at (-1, -1, 3, -2, 1),
 A vertex at (-1, -1, 11/3, 0, 5/3))
37 [0, 1]
(A vertex at (-2, 0, 2, 1, 1),
 A vertex at (-2, 1, 8/3, 0, 5/3),
 A vertex at (-2, 0, 3, 0, 2),
 A vertex at (-2, 1, 2, -2, 1),
 A vertex at (-2, 1, 2, 1, 1),
 A vertex at (-1, 0, 3, 0, 1),
 A vertex at (-5/3, 2/3, 3, 0, 5/3),
 A vertex at (-1, 0, 3, -2, 1),
 A vertex at (-2, -1, 2, -3, 1),
 A vertex at (-2, 0, 2, -3, 1),
 A vertex at (-2, -1, 2, 0, 1))
38 [0]
(A vertex at (-1, 2, 1, 1, 1),
 A vertex at (-1, 2, 1, -2, 1),
 A vertex at (-1, 2, 5/3, 0, 5/3),
 A vertex at (1/2, 0, 5/2, -5/2, 1),
 A vertex at (0, 1, 2, -2, 1),
 A vertex at (0, 0, 3, 0, 2),
 A vertex at (0, -1, 2, 0, 1),
 A vertex at (0, 0, 2, 1, 1),
 A vertex at (-2/3, 5/3, 2, 0, 5/3),
 A vertex at (0, 1, 2, 0, 1),
 A vertex at (1/2, 0, 5/2, 0, 1),
 A vertex at (0, -1, 2, -3, 1),
 A vertex at (-1, -2, 1, -4, 1),
 A vertex at (-1, -1, 1, 1, 1),
 A vertex at (-1, -2, 1, 0, 1),
 A vertex at (-1, -1, 2, 0, 2),
 A vertex at (-1, -1, 2, -1, 2),
 A vertex at (-1, 1, 2, 0, 2),
 A vertex at (-1, 0, 2, -1, 2),
 A vertex at (-1, 0, 1, -4, 1))
39 [3, 1]
(A vertex at (2, -1, 3, -1, 2),)
40 [3]
(A vertex at (1, 1, 2, -1, 2),
 A vertex at (3/2, 0, 5/2, -1, 2),
 A vertex at (3/2, 0, 5/2, -3/2, 2),
 A vertex at (1, 0, 2, -2, 2),
 A vertex at (1, -1, 2, -2, 2),
 A vertex at (1, -1, 2, -1, 2))
41 [1]
(A vertex at (2, -1, 2, 1, 1),
 A vertex at (2, -1, 2, -2, 1),
 A vertex at (2, -4/3, 8/3, 0, 5/3),
 A vertex at (2, -2, 2, -2, 1),
 A vertex at (2, -2, 2, 0, 1),
 A vertex at (2, -1, 8/3, 0, 5/3))
42 []
(A vertex at (1, 1, 1, -2, 1),
 A vertex at (1, 1, 1, 1, 1),
 A vertex at (1, -1, 2, 0, 2),
 A vertex at (1, 0, 2, 0, 2),
 A vertex at (1, 1, 5/3, 0, 5/3),
 A vertex at (8/5, 0, 12/5, 0, 9/5),
 A vertex at (4/3, 2/3, 2, 0, 5/3),
 A vertex at (3/2, 0, 3/2, 1, 1),
 A vertex at (3/2, 0, 2, 1/2, 3/2),
 A vertex at (2, 0, 2, -2, 1),
 A vertex at (2, 0, 2, 0, 1),
 A vertex at (1, -2, 1, 0, 1),
 A vertex at (1, -2, 1, -3, 1),
 A vertex at (1, 0, 1, -3, 1),
 A vertex at (1, -1, 1, 1, 1))
sage: A=CartanMatrix(['C',3])
....: c=[2,0,1]
....: coxnum=coxeter_number(A)
....: num=1
....: n=A.nrows()
....: for v in sortables(A,c[1:]):
....:     print(num,v)
....:     num+=1
....:     p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*n) for i in [-1,0,1
....: ])).lines()
1 [0, 1, 0]
()
2 [0, 1]
()
3 [0]
()
4 [1]
()
5 []
()
sage: A=CartanMatrix(['C',3])
....: c=[2,0,1]
....: coxnum=coxeter_number(A)
....: num=1
....: n=A.nrows()
....: for v in sortables(A,c[1:]):
....:     print(num,v)
....:     num+=1
....:     p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*n) for i in [-1,0,1
....: ])).vertices()
1 [0, 1, 0]
(A vertex at (-1, -1, 3),)
2 [0, 1]
(A vertex at (-2, 1, 2), A vertex at (-3/2, 0, 5/2), A vertex at (-2, -1, 2))
3 [0]
(A vertex at (-1, 2, 1),
 A vertex at (0, -1, 2),
 A vertex at (1/3, 0, 7/3),
 A vertex at (-1, -3, 1))
4 [1]
(A vertex at (2, -1, 2),)
5 []
(A vertex at (1, 1, 1), A vertex at (5/3, 0, 5/3), A vertex at (1, -2, 1))
sage: A=CartanMatrix(['C',3])
....: c=[2,0,1]
....: coxnum=coxeter_number(A)
....: num=1
....: n=A.nrows()
....: for v in sortables(A,c[1:]):
....:     print(num,v,lam(A,v))
....:     num+=1
....:     p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*n) for i in [-1,0,1
....: ])).vertices()
1 [0, 1, 0] (-1, -1, 3)
(A vertex at (-1, -1, 3),)
2 [0, 1] (-2, 1, 2)
(A vertex at (-2, 1, 2), A vertex at (-3/2, 0, 5/2), A vertex at (-2, -1, 2))
3 [0] (-1, 2, 1)
(A vertex at (-1, 2, 1),
 A vertex at (0, -1, 2),
 A vertex at (1/3, 0, 7/3),
 A vertex at (-1, -3, 1))
4 [1] (2, -1, 2)
(A vertex at (2, -1, 2),)
5 [] (1, 1, 1)
(A vertex at (1, 1, 1), A vertex at (5/3, 0, 5/3), A vertex at (1, -2, 1))
sage: A=CartanMatrix(['C',3])
....: c=[2,0,1]
....: coxnum=coxeter_number(A)
....: num=1
....: n=A.nrows()
....: for v in sortables(A,c[1:]):
....:     print(num,v,lam(A,v))
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*n) for i in [-1,0
....: ,1]))
....:     print(list(map(vector,P.vertices())))
....: 
1 [0, 1, 0] (-1, -1, 3)
[(-1, -1, 3)]
2 [0, 1] (-2, 1, 2)
[(-2, 1, 2), (-3/2, 0, 5/2), (-2, -1, 2)]
3 [0] (-1, 2, 1)
[(-1, 2, 1), (0, -1, 2), (1/3, 0, 7/3), (-1, -3, 1)]
4 [1] (2, -1, 2)
[(2, -1, 2)]
5 [] (1, 1, 1)
[(1, 1, 1), (5/3, 0, 5/3), (1, -2, 1)]
sage: A=CartanMatrix(['C',3])
....: c=[2,0,1]
....: coxnum=coxeter_number(A)
....: num=1
....: n=A.nrows()
....: for v in sortables(A,c[1:]):
....:     print(num,v,lam(A,v))
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*n) for i in [-1,0
....: ,1]))
....:     print(list(map(vector,P.vertices())),"\n")
....: 
1 [0, 1, 0] (-1, -1, 3)
[(-1, -1, 3)] 

2 [0, 1] (-2, 1, 2)
[(-2, 1, 2), (-3/2, 0, 5/2), (-2, -1, 2)] 

3 [0] (-1, 2, 1)
[(-1, 2, 1), (0, -1, 2), (1/3, 0, 7/3), (-1, -3, 1)] 

4 [1] (2, -1, 2)
[(2, -1, 2)] 

5 [] (1, 1, 1)
[(1, 1, 1), (5/3, 0, 5/3), (1, -2, 1)] 

sage: A=CartanMatrix(['C',3])
....: c=[2,0,1]
....: coxnum=coxeter_number(A)
....: num=1
....: n=A.nrows()
....: for v in sortables(A,c[1:]):
....:     print(num,v,lam(A,v))
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*n) for i in [-1,0
....: ,1]))
....:     print(list(map(vector,P.vertices())),P.dimension(),"\n")
1 [0, 1, 0] (-1, -1, 3)
[(-1, -1, 3)] 0 

2 [0, 1] (-2, 1, 2)
[(-2, 1, 2), (-3/2, 0, 5/2), (-2, -1, 2)] 2 

3 [0] (-1, 2, 1)
[(-1, 2, 1), (0, -1, 2), (1/3, 0, 7/3), (-1, -3, 1)] 2 

4 [1] (2, -1, 2)
[(2, -1, 2)] 0 

5 [] (1, 1, 1)
[(1, 1, 1), (5/3, 0, 5/3), (1, -2, 1)] 2 

sage: A=CartanMatrix(['C',3])
....: c=[2,0,1]
....: coxnum=coxeter_number(A)
....: num=1
....: n=A.nrows()
....: for v in sortables(A,c[1:]):
....:     print(num,v,lam(A,v))
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*n) for i in [-1,0
....: ,1,2]))
....:     print(list(map(vector,P.vertices())),P.dimension(),"\n")
1 [0, 1, 0] (-1, -1, 3)
[(-1, -1, 3)] 0 

2 [0, 1] (-2, 1, 2)
[(-2, 1, 2)] 0 

3 [0] (-1, 2, 1)
[(-1, 0, 1), (-1, 2, 1), (-1/2, 1/2, 3/2)] 2 

4 [1] (2, -1, 2)
[(2, -1, 2)] 0 

5 [] (1, 1, 1)
[(1, 1, 1), (4/3, 0, 4/3), (1, -1/2, 1)] 2 

sage: A=CartanMatrix(['C',3])
....: c=[2,0,1]
....: coxnum=coxeter_number(A)
....: num=1
....: n=A.nrows()
....: for v in sortables(A,c[1:]):
....:     print(num,v,lam(A,v))
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*n) for i in [-1,0
....: ,1,2,3]))
....:     print(list(map(vector,P.vertices())),P.dimension(),"\n")
1 [0, 1, 0] (-1, -1, 3)
[(-1, -1, 3)] 0 

2 [0, 1] (-2, 1, 2)
[(-2, 1, 2)] 0 

3 [0] (-1, 2, 1)
[(-1, 2, 1)] 0 

4 [1] (2, -1, 2)
[(2, -1, 2)] 0 

5 [] (1, 1, 1)
[(1, 1, 1)] 0 

sage: A=CartanMatrix(['C',3])
....: c=[2,0,1]
....: coxnum=coxeter_number(A)
....: num=1
....: n=A.nrows()
....: for v in sortables(A,c[1:]):
....:     print(num,v,lam(A,v))
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*n) for i in [-1,0
....: ,1]))
....:     print(list(map(vector,P.vertices())),P.dimension(),"\n")
1 [0, 1, 0] (-1, -1, 3)
[(-1, -1, 3)] 0 

2 [0, 1] (-2, 1, 2)
[(-2, 1, 2), (-3/2, 0, 5/2), (-2, -1, 2)] 2 

3 [0] (-1, 2, 1)
[(-1, 2, 1), (0, -1, 2), (1/3, 0, 7/3), (-1, -3, 1)] 2 

4 [1] (2, -1, 2)
[(2, -1, 2)] 0 

5 [] (1, 1, 1)
[(1, 1, 1), (5/3, 0, 5/3), (1, -2, 1)] 2 

sage: A=CartanMatrix(['C',3])
....: c=[2,0,1]
....: coxnum=coxeter_number(A)
....: num=1
....: AA=ClusterAlgebra(B(A,c))
....: plots=[AA.cluster_fan().plot()]
....: n=A.nrows()
....: colors=rainbow(10)
....: for v in sortables(A,c[1:]):
....:     print(num,v,lam(A,v))
....:     num+=1
....:     plots=plots+[p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*n) for
....:  i in [-1,0,1])).plot(fill=colors[num])]
....: sum(plots)
....: 
....: 
1 [0, 1, 0] (-1, -1, 3)
2 [0, 1] (-2, 1, 2)
3 [0] (-1, 2, 1)
4 [1] (2, -1, 2)
5 [] (1, 1, 1)
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[2,0,1]
....: coxnum=coxeter_number(A)
....: num=1
....: AA=ClusterAlgebra(B(A,c))
....: plots=[AA.cluster_fan().plot()]
....: n=A.nrows()
....: colors=rainbow(10)
....: for v in sortables(A,c[1:]):
....:     print(num,v,lam(A,v))
....:     num+=1
....:     plots=plots+list(p_lambda(B(A,c),lam(A,v),c_inf_prefix(c,i*n)).plot(fi
....: ll=colors[num]) for i in [-1,0,1])
....: sum(plots)
1 [0, 1, 0] (-1, -1, 3)
2 [0, 1] (-2, 1, 2)
3 [0] (-1, 2, 1)
4 [1] (2, -1, 2)
5 [] (1, 1, 1)
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[2,0,1]
....: coxnum=coxeter_number(A)
....: num=1
....: AA=ClusterAlgebra(B(A,c))
....: n=A.nrows()
....: colors=rainbow(10)
....: for v in sortables(A,c[1:]):
....:     print(num,v,lam(A,v))
....:     num+=1
....:     [AA.cluster_fan().plot()]+list(p_lambda(B(A,c),lam(A,v),c_inf_prefix(c
....: ,i*n)).plot(fill=colors[num]) for i in [-1,0,1])
....: 
1 [0, 1, 0] (-1, -1, 3)
[Graphics3d Object, Graphics3d Object, Graphics3d Object, Graphics3d Object]
2 [0, 1] (-2, 1, 2)
[Graphics3d Object, Graphics3d Object, Graphics3d Object, Graphics3d Object]
3 [0] (-1, 2, 1)
[Graphics3d Object, Graphics3d Object, Graphics3d Object, Graphics3d Object]
4 [1] (2, -1, 2)
[Graphics3d Object, Graphics3d Object, Graphics3d Object, Graphics3d Object]
5 [] (1, 1, 1)
[Graphics3d Object, Graphics3d Object, Graphics3d Object, Graphics3d Object]
sage: A=CartanMatrix(['C',3])
....: c=[2,0,1]
....: coxnum=coxeter_number(A)
....: num=1
....: AA=ClusterAlgebra(B(A,c))
....: n=A.nrows()
....: colors=rainbow(10)
....: for v in sortables(A,c[1:]):
....:     print(num,v,lam(A,v))
....:     num+=1
....:     sum([AA.cluster_fan().plot()]+list(p_lambda(B(A,c),lam(A,v),c_inf_pref
....: ix(c,i*n)).plot(fill=colors[num]) for i in [-1,0,1]))
1 [0, 1, 0] (-1, -1, 3)
Launched html viewer for Graphics3d Object
2 [0, 1] (-2, 1, 2)
Launched html viewer for Graphics3d Object
3 [0] (-1, 2, 1)
Launched html viewer for Graphics3d Object
4 [1] (2, -1, 2)
Launched html viewer for Graphics3d Object
5 [] (1, 1, 1)
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[2,0,1]
....: coxnum=coxeter_number(A)
....: num=1
....: AA=ClusterAlgebra(B(A,c))
....: n=A.nrows()
....: colors=rainbow(10)
....: for v in sortables(A,c[1:]):
....:     print(num,v,lam(A,v))
....:     num+=1
....:     sum(list(p_lambda(B(A,c),lam(A,v),c_inf_prefix(c,i*n)).plot(fill=color
....: s[num]) for i in [-1,0,1]))
1 [0, 1, 0] (-1, -1, 3)
Launched html viewer for Graphics3d Object
2 [0, 1] (-2, 1, 2)
Launched html viewer for Graphics3d Object
3 [0] (-1, 2, 1)
Launched html viewer for Graphics3d Object
4 [1] (2, -1, 2)
Launched html viewer for Graphics3d Object
5 [] (1, 1, 1)
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[2,0,1]
....: cinv=list(reversed(c))
....: coxnum=coxeter_number(A)
....: num=1
....: AA=ClusterAlgebra(B(A,c))
....: n=A.nrows()
....: colors=rainbow(10)
....: for v in sortables(A,c[1:]):
....:     print(num,v,lam(A,v))
....:     num+=1
....:     sum([AA.cluster_fan().plot()]+list(p_lambda(B(A,c),lam(A,v),seq).plot(
....: fill=colors[num]) for seq in [cinv,[],c]))
1 [0, 1, 0] (-1, -1, 3)
Launched html viewer for Graphics3d Object
2 [0, 1] (-2, 1, 2)
Launched html viewer for Graphics3d Object
3 [0] (-1, 2, 1)
Launched html viewer for Graphics3d Object
4 [1] (2, -1, 2)
Launched html viewer for Graphics3d Object
5 [] (1, 1, 1)
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[2,0,1]
....: cinv=list(reversed(c))
....: coxnum=coxeter_number(A)
....: num=1
....: AA=ClusterAlgebra(B(A,c))
....: n=A.nrows()
....: colors=rainbow(10)
....: for v in sortables(A,c[1:]):
....:     print(num,v,lam(A,v))
....:     num+=1
....:     sum([AA.cluster_fan().plot()]+list(p_lambda_int(B(A,c),lam(A,v),[cinv,
....: [],c]).plot(fill=colors[num])))
....: 
1 [0, 1, 0] (-1, -1, 3)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In [1510], line 12
     10 print(num,v,lam(A,v))
     11 num+=Integer(1)
---> 12 sum([AA.cluster_fan().plot()]+list(p_lambda_int(B(A,c),lam(A,v),[cinv,[],c]).plot(fill=colors[num])))

TypeError: 'Point' object is not iterable
sage: A=CartanMatrix(['C',3])
....: c=[2,0,1]
....: cinv=list(reversed(c))
....: coxnum=coxeter_number(A)
....: num=1
....: AA=ClusterAlgebra(B(A,c))
....: n=A.nrows()
....: colors=rainbow(10)
....: for v in sortables(A,c[1:]):
....:     print(num,v,lam(A,v))
....:     num+=1
....:     sum([AA.cluster_fan().plot()]+p_lambda_int(B(A,c),lam(A,v),[cinv,[],c]
....: ).plot(fill=colors[num]))
1 [0, 1, 0] (-1, -1, 3)
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
Cell In [1511], line 12
     10 print(num,v,lam(A,v))
     11 num+=Integer(1)
---> 12 sum([AA.cluster_fan().plot()]+p_lambda_int(B(A,c),lam(A,v),[cinv,[],c]).plot(fill=colors[num]))

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/plot/plot3d/base.pyx:635, in sage.plot.plot3d.base.Graphics3d.__add__ (build/cythonized/sage/plot/plot3d/base.c:16969)()
    633     return right
    634 elif not isinstance(left, Graphics3d):
--> 635     left = left.plot3d()
    636 elif not isinstance(right, Graphics3d):
    637     right = right.plot3d()

AttributeError: 'list' object has no attribute 'plot3d'
sage: A=CartanMatrix(['C',3])
....: c=[2,0,1]
....: cinv=list(reversed(c))
....: coxnum=coxeter_number(A)
....: num=1
....: AA=ClusterAlgebra(B(A,c))
....: n=A.nrows()
....: colors=rainbow(10)
....: for v in sortables(A,c[1:]):
....:     print(num,v,lam(A,v))
....:     num+=1
....:     [AA.cluster_fan().plot()+p_lambda_int(B(A,c),lam(A,v),[cinv,[],c]).plo
....: t(fill=colors[num])
  Cell In [1512], line 12
    [AA.cluster_fan().plot()+p_lambda_int(B(A,c),lam(A,v),[cinv,[],c]).plot(fill=colors[num])
                                                                                             ^
SyntaxError: incomplete input

sage: A=CartanMatrix(['C',3])
....: c=[2,0,1]
....: cinv=list(reversed(c))
....: coxnum=coxeter_number(A)
....: num=1
....: AA=ClusterAlgebra(B(A,c))
....: n=A.nrows()
....: colors=rainbow(10)
....: for v in sortables(A,c[1:]):
....:     print(num,v,lam(A,v))
....:     num+=1
....:     AA.cluster_fan().plot()+p_lambda_int(B(A,c),lam(A,v),[cinv,[],c]).plot
....: (fill=colors[num])
1 [0, 1, 0] (-1, -1, 3)
Launched html viewer for Graphics3d Object
2 [0, 1] (-2, 1, 2)
Launched html viewer for Graphics3d Object
3 [0] (-1, 2, 1)
Launched html viewer for Graphics3d Object
4 [1] (2, -1, 2)
Launched html viewer for Graphics3d Object
5 [] (1, 1, 1)
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[2,0,1]
....: cinv=list(reversed(c))
....: coxnum=coxeter_number(A)
....: num=1
....: AA=ClusterAlgebra(B(A,c))
....: n=A.nrows()
....: colors=rainbow(10)
....: for v in sortables(A,c[1:]):
....:     print(num,v,lam(A,v))
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),[cinv,[],c])
....:     print(P.dimension())
....:     AA.cluster_fan().plot()+P.plot(fill=colors[num])
1 [0, 1, 0] (-1, -1, 3)
0
Launched html viewer for Graphics3d Object
2 [0, 1] (-2, 1, 2)
0
Launched html viewer for Graphics3d Object
3 [0] (-1, 2, 1)
0
Launched html viewer for Graphics3d Object
4 [1] (2, -1, 2)
0
Launched html viewer for Graphics3d Object
5 [] (1, 1, 1)
0
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[2,0,1]
....: cinv=list(reversed(c))
....: coxnum=coxeter_number(A)
....: num=1
....: n=A.nrows()
....: colors=rainbow(10)
....: for v in sortables(A,c[1:]):
....:     print(num,v,lam(A,v))
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),[cinv,[],c])
....:     print(P.dimension())
....: 
1 [0, 1, 0] (-1, -1, 3)
0
2 [0, 1] (-2, 1, 2)
0
3 [0] (-1, 2, 1)
0
4 [1] (2, -1, 2)
0
5 [] (1, 1, 1)
0
sage: A=CartanMatrix(['C',4])
....: c=[2,0,1,3]
....: cinv=list(reversed(c))
....: coxnum=coxeter_number(A)
....: num=1
....: n=A.nrows()
....: colors=rainbow(10)
....: for v in sortables(A,c[1:]):
....:     print(num,v,lam(A,v))
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),[cinv,[],c])
....:     print(P.dimension())
1 [0, 1, 3, 0] (-1, -1, 5, -1)
0
2 [0, 1, 3] (-2, 1, 4, -1)
0
3 [0, 1, 0] (-1, -1, 3, 1)
0
4 [0, 1] (-2, 1, 2, 1)
0
5 [0, 3] (-1, 2, 3, -1)
0
6 [0] (-1, 2, 1, 1)
0
7 [1, 3] (2, -1, 4, -1)
0
8 [1] (2, -1, 2, 1)
0
9 [3] (1, 1, 3, -1)
0
10 [] (1, 1, 1, 1)
0
sage: A=CartanMatrix(['C',5])
....: c=[4,2,0,1,3]
....: cinv=list(reversed(c))
....: coxnum=coxeter_number(A)
....: num=1
....: n=A.nrows()
....: colors=rainbow(10)
....: for v in sortables(A,c[1:]):
....:     print(num,v,lam(A,v))
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),[cinv,[],c])
....:     print(P.dimension())
1 [2, 0, 1, 3, 2, 0, 1, 3, 2, 0] (-1, -1, -1, -1, 5)
0
2 [2, 0, 1, 3, 2, 0, 1, 3, 2] (-1, -1, -2, 1, 4)
0
3 [2, 0, 1, 3, 2, 0, 1, 3, 0] (-2, 1, -2, -1, 5)
0
4 [2, 0, 1, 3, 2, 0, 1, 3] (-2, 1, -3, 1, 4)
0
5 [2, 0, 1, 3, 2, 0, 1, 0] (-1, 2, -3, -1, 5)
0
6 [2, 0, 1, 3, 2, 0, 1] (-1, 2, -4, 1, 4)
0
7 [2, 0, 1, 3, 2, 0, 3] (-3, 2, -3, 2, 3)
1
8 [2, 0, 1, 3, 2, 0] (-2, 3, -4, 2, 3)
2
9 [2, 0, 1, 3, 2, 1, 3] (-4, 3, -1, -1, 4)
0
10 [2, 0, 1, 3, 2, 1] (-3, 4, -2, -1, 4)
0
11 [2, 0, 1, 3, 2, 3] (-4, 3, -2, 1, 3)
1
12 [2, 0, 1, 3, 2] (-3, 4, -3, 1, 3)
2
13 [2, 0, 1, 3, 0] (-1, 3, -4, 3, 2)
2
14 [2, 0, 1, 3] (-2, 4, -3, 2, 2)
2
15 [2, 0, 1, 2, 0, 1] (-1, -1, -1, 4, 1)
0
16 [2, 0, 1, 2, 0] (-2, 1, -2, 4, 1)
1
17 [2, 0, 1, 2] (-3, 2, -1, 3, 1)
1
18 [2, 0, 1, 0] (-1, 2, -3, 4, 1)
1
19 [2, 0, 1] (-2, 3, -2, 3, 1)
1
20 [2, 0, 3, 2] (-1, 4, -1, -1, 3)
0
21 [2, 0, 3] (-1, 4, -2, 1, 2)
0
22 [2, 0] (-1, 3, -1, 2, 1)
0
23 [2, 1, 3, 2, 1, 3] (4, -1, -1, -1, 4)
0
24 [2, 1, 3, 2, 1] (3, 1, -2, -1, 4)
0
25 [2, 1, 3, 2, 3] (4, -1, -2, 1, 3)
0
26 [2, 1, 3, 2] (3, 1, -3, 1, 3)
0
27 [2, 1, 3] (2, 2, -3, 2, 2)
0
28 [2, 1, 2] (3, -1, -1, 3, 1)
0
29 [2, 1] (2, 1, -2, 3, 1)
0
30 [2, 3, 2] (1, 3, -1, -1, 3)
0
31 [2, 3] (1, 3, -2, 1, 2)
0
32 [2] (1, 2, -1, 2, 1)
0
33 [0, 1, 3, 0] (-1, -1, 4, -1, 2)
0
34 [0, 1, 3] (-2, 1, 3, -1, 2)
0
35 [0, 1, 0] (-1, -1, 3, 1, 1)
0
36 [0, 1] (-2, 1, 2, 1, 1)
0
37 [0, 3] (-1, 2, 2, -1, 2)
0
38 [0] (-1, 2, 1, 1, 1)
0
39 [1, 3] (2, -1, 3, -1, 2)
0
40 [1] (2, -1, 2, 1, 1)
0
41 [3] (1, 1, 2, -1, 2)
0
42 [] (1, 1, 1, 1, 1)
0
sage: A=CartanMatrix(['C',5])
....: c=[4,2,0,1,3]
....: cinv=list(reversed(c))
....: coxnum=coxeter_number(A)
....: num=1
....: n=A.nrows()
....: colors=rainbow(10)
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),[cinv,[],c])
....:     print(num,v,P.dimension())
2 [2, 0, 1, 3, 2, 0, 1, 3, 2, 0] 0
3 [2, 0, 1, 3, 2, 0, 1, 3, 2] 0
4 [2, 0, 1, 3, 2, 0, 1, 3, 0] 0
5 [2, 0, 1, 3, 2, 0, 1, 3] 0
6 [2, 0, 1, 3, 2, 0, 1, 0] 0
7 [2, 0, 1, 3, 2, 0, 1] 0
8 [2, 0, 1, 3, 2, 0, 3] 1
9 [2, 0, 1, 3, 2, 0] 2
10 [2, 0, 1, 3, 2, 1, 3] 0
11 [2, 0, 1, 3, 2, 1] 0
12 [2, 0, 1, 3, 2, 3] 1
13 [2, 0, 1, 3, 2] 2
14 [2, 0, 1, 3, 0] 2
15 [2, 0, 1, 3] 2
16 [2, 0, 1, 2, 0, 1] 0
17 [2, 0, 1, 2, 0] 1
18 [2, 0, 1, 2] 1
19 [2, 0, 1, 0] 1
20 [2, 0, 1] 1
21 [2, 0, 3, 2] 0
22 [2, 0, 3] 0
23 [2, 0] 0
24 [2, 1, 3, 2, 1, 3] 0
25 [2, 1, 3, 2, 1] 0
26 [2, 1, 3, 2, 3] 0
27 [2, 1, 3, 2] 0
28 [2, 1, 3] 0
29 [2, 1, 2] 0
30 [2, 1] 0
31 [2, 3, 2] 0
32 [2, 3] 0
33 [2] 0
34 [0, 1, 3, 0] 0
35 [0, 1, 3] 0
36 [0, 1, 0] 0
37 [0, 1] 0
38 [0, 3] 0
39 [0] 0
40 [1, 3] 0
41 [1] 0
42 [3] 0
43 [] 0
sage: A=CartanMatrix(['C',5])
....: c=[0,2,4,1,3]
....: cinv=list(reversed(c))
....: coxnum=coxeter_number(A)
....: num=1
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),[cinv,[],c])
....:     print(num,v,P.dimension())
2 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3] 0
3 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1] 0
4 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 3] 0
5 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4] 0
6 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 1] 1
7 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2] 2
8 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 4] 2
9 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3] 4
10 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1] 4
11 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 3, 2, 4] 0
12 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 3, 2] 3
13 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 3, 4] 2
14 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 3] 4
15 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4] 4
16 [2, 4, 1, 3, 2, 4, 1, 3, 2, 1] 4
17 [2, 4, 1, 3, 2, 4, 1, 3, 2] 4
18 [2, 4, 1, 3, 2, 4, 1, 3, 4, 3] 3
19 [2, 4, 1, 3, 2, 4, 1, 3, 4] 4
20 [2, 4, 1, 3, 2, 4, 1, 3] 4
21 [2, 4, 1, 3, 2, 4, 1] 4
22 [2, 4, 1, 3, 2, 4, 3, 2, 4, 3, 2] 1
23 [2, 4, 1, 3, 2, 4, 3, 2, 4, 3] 2
24 [2, 4, 1, 3, 2, 4, 3, 2, 4] 4
25 [2, 4, 1, 3, 2, 4, 3, 2] 4
26 [2, 4, 1, 3, 2, 4, 3, 4, 3] 3
27 [2, 4, 1, 3, 2, 4, 3, 4] 4
28 [2, 4, 1, 3, 2, 4, 3] 4
29 [2, 4, 1, 3, 2, 4] 4
30 [2, 4, 1, 3, 2, 1, 3] 3
31 [2, 4, 1, 3, 2, 1] 4
32 [2, 4, 1, 3, 2, 3] 3
33 [2, 4, 1, 3, 2] 4
34 [2, 4, 1, 3, 4, 3] 4
35 [2, 4, 1, 3, 4] 4
36 [2, 4, 1, 3] 4
37 [2, 4, 1, 2] 0
38 [2, 4, 1] 0
39 [2, 4, 3, 2, 4, 3, 2, 4, 3] 0
40 [2, 4, 3, 2, 4, 3, 2, 4] 2
41 [2, 4, 3, 2, 4, 3, 2] 3
42 [2, 4, 3, 2, 4, 3, 4] 2
43 [2, 4, 3, 2, 4, 3] 3
44 [2, 4, 3, 2, 4] 3
45 [2, 4, 3, 2] 3
46 [2, 4, 3, 4, 3] 3
47 [2, 4, 3, 4] 3
48 [2, 4, 3] 3
49 [2, 4] 0
50 [2, 1, 3, 2, 1, 3] 0
51 [2, 1, 3, 2, 1] 0
52 [2, 1, 3, 2, 3] 0
53 [2, 1, 3, 2] 0
54 [2, 1, 3] 0
55 [2, 1, 2] 0
56 [2, 1] 0
57 [2, 3, 2] 0
58 [2, 3] 0
59 [2] 0
60 [4, 1, 3, 4, 3] 0
61 [4, 1, 3, 4] 0
62 [4, 1, 3] 0
63 [4, 1] 0
64 [4, 3, 4, 3] 0
65 [4, 3, 4] 0
66 [4, 3] 0
67 [4] 0
68 [1, 3] 0
69 [1] 0
70 [3] 0
71 [] 0
sage: A=CartanMatrix(['C',5])
....: c=[4,2,0,3,1]
....: cinv=list(reversed(c))
....: coxnum=coxeter_number(A)
....: num=1
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),[cinv,[],c])
....:     print(num,v,P.dimension())
2 [2, 0, 3, 1, 2, 0, 3, 1, 2, 0] 0
3 [2, 0, 3, 1, 2, 0, 3, 1, 2] 0
4 [2, 0, 3, 1, 2, 0, 3, 1, 0] 0
5 [2, 0, 3, 1, 2, 0, 3, 1] 0
6 [2, 0, 3, 1, 2, 0, 3] 1
7 [2, 0, 3, 1, 2, 0, 1, 0] 0
8 [2, 0, 3, 1, 2, 0, 1] 0
9 [2, 0, 3, 1, 2, 0] 2
10 [2, 0, 3, 1, 2, 3, 1] 0
11 [2, 0, 3, 1, 2, 3] 1
12 [2, 0, 3, 1, 2, 1] 0
13 [2, 0, 3, 1, 2] 2
14 [2, 0, 3, 1, 0] 2
15 [2, 0, 3, 1] 2
16 [2, 0, 3, 2] 0
17 [2, 0, 3] 0
18 [2, 0, 1, 2, 0, 1] 0
19 [2, 0, 1, 2, 0] 1
20 [2, 0, 1, 2] 1
21 [2, 0, 1, 0] 1
22 [2, 0, 1] 1
23 [2, 0] 0
24 [2, 3, 1, 2, 3, 1] 0
25 [2, 3, 1, 2, 3] 0
26 [2, 3, 1, 2, 1] 0
27 [2, 3, 1, 2] 0
28 [2, 3, 1] 0
29 [2, 3, 2] 0
30 [2, 3] 0
31 [2, 1, 2] 0
32 [2, 1] 0
33 [2] 0
34 [0, 3, 1, 0] 0
35 [0, 3, 1] 0
36 [0, 3] 0
37 [0, 1, 0] 0
38 [0, 1] 0
39 [0] 0
40 [3, 1] 0
41 [3] 0
42 [1] 0
43 [] 0
sage: A=CartanMatrix(['C',3])
....: c=[2,0,1]
....: cinv=list(reversed(c))
....: coxnum=coxeter_number(A)
....: num=1
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),[cinv,[],c])
....:     print(num,v,P.dimension())
2 [0, 1, 0] 0
3 [0, 1] 0
4 [0] 0
5 [1] 0
6 [] 0
sage: A=CartanMatrix(['C',3])
....: c=[2,0,1]
....: cinv=list(reversed(c))
....: coxnum=coxeter_number(A)
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),[cinv,[],c])
....:     print(num,v,P.dimension())
1 [0, 1, 0] 0
2 [0, 1] 0
3 [0] 0
4 [1] 0
5 [] 0
sage: A=CartanMatrix(['C',3])
....: c=[2,0,1]
....: cinv=list(reversed(c))
....: coxnum=coxeter_number(A)
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),[cinv,[],c])
....:     print(num,v,P.dimension())
....:     if P.dimension()>0:
....:         print(P)
....: 
1 [0, 1, 0] 0
2 [0, 1] 0
3 [0] 0
4 [1] 0
5 [] 0
sage: A=CartanMatrix(['C',5])
....: c=[4,2,0,3,1]
....: cinv=list(reversed(c))
....: coxnum=coxeter_number(A)
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),[cinv,[],c])
....:     print(num,v,P.dimension())
....:     if P.dimension()>0:
....:         print(P)
1 [2, 0, 3, 1, 2, 0, 3, 1, 2, 0] 0
2 [2, 0, 3, 1, 2, 0, 3, 1, 2] 0
3 [2, 0, 3, 1, 2, 0, 3, 1, 0] 0
4 [2, 0, 3, 1, 2, 0, 3, 1] 0
5 [2, 0, 3, 1, 2, 0, 3] 1
A 1-dimensional polyhedron in QQ^5 defined as the convex hull of 2 vertices
6 [2, 0, 3, 1, 2, 0, 1, 0] 0
7 [2, 0, 3, 1, 2, 0, 1] 0
8 [2, 0, 3, 1, 2, 0] 2
A 2-dimensional polyhedron in QQ^5 defined as the convex hull of 3 vertices
9 [2, 0, 3, 1, 2, 3, 1] 0
10 [2, 0, 3, 1, 2, 3] 1
A 1-dimensional polyhedron in QQ^5 defined as the convex hull of 2 vertices
11 [2, 0, 3, 1, 2, 1] 0
12 [2, 0, 3, 1, 2] 2
A 2-dimensional polyhedron in QQ^5 defined as the convex hull of 3 vertices
13 [2, 0, 3, 1, 0] 2
A 2-dimensional polyhedron in QQ^5 defined as the convex hull of 3 vertices
14 [2, 0, 3, 1] 2
A 2-dimensional polyhedron in QQ^5 defined as the convex hull of 3 vertices
15 [2, 0, 3, 2] 0
16 [2, 0, 3] 0
17 [2, 0, 1, 2, 0, 1] 0
18 [2, 0, 1, 2, 0] 1
A 1-dimensional polyhedron in QQ^5 defined as the convex hull of 2 vertices
19 [2, 0, 1, 2] 1
A 1-dimensional polyhedron in QQ^5 defined as the convex hull of 2 vertices
20 [2, 0, 1, 0] 1
A 1-dimensional polyhedron in QQ^5 defined as the convex hull of 2 vertices
21 [2, 0, 1] 1
A 1-dimensional polyhedron in QQ^5 defined as the convex hull of 2 vertices
22 [2, 0] 0
23 [2, 3, 1, 2, 3, 1] 0
24 [2, 3, 1, 2, 3] 0
25 [2, 3, 1, 2, 1] 0
26 [2, 3, 1, 2] 0
27 [2, 3, 1] 0
28 [2, 3, 2] 0
29 [2, 3] 0
30 [2, 1, 2] 0
31 [2, 1] 0
32 [2] 0
33 [0, 3, 1, 0] 0
34 [0, 3, 1] 0
35 [0, 3] 0
36 [0, 1, 0] 0
37 [0, 1] 0
38 [0] 0
39 [3, 1] 0
40 [3] 0
41 [1] 0
42 [] 0
sage: A=CartanMatrix(['C',5])
....: c=[4,2,0,3,1]
....: cinv=list(reversed(c))
....: coxnum=coxeter_number(A)
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),[cinv,[],[c[0]],c])
....:     print(num,v,P.dimension())
....:     if P.dimension()>0:
....:         print(P)
1 [2, 0, 3, 1, 2, 0, 3, 1, 2, 0] 0
2 [2, 0, 3, 1, 2, 0, 3, 1, 2] 0
3 [2, 0, 3, 1, 2, 0, 3, 1, 0] 0
4 [2, 0, 3, 1, 2, 0, 3, 1] 0
5 [2, 0, 3, 1, 2, 0, 3] 1
A 1-dimensional polyhedron in QQ^5 defined as the convex hull of 2 vertices
6 [2, 0, 3, 1, 2, 0, 1, 0] 0
7 [2, 0, 3, 1, 2, 0, 1] 0
8 [2, 0, 3, 1, 2, 0] 2
A 2-dimensional polyhedron in QQ^5 defined as the convex hull of 3 vertices
9 [2, 0, 3, 1, 2, 3, 1] 0
10 [2, 0, 3, 1, 2, 3] 1
A 1-dimensional polyhedron in QQ^5 defined as the convex hull of 2 vertices
11 [2, 0, 3, 1, 2, 1] 0
12 [2, 0, 3, 1, 2] 2
A 2-dimensional polyhedron in QQ^5 defined as the convex hull of 3 vertices
13 [2, 0, 3, 1, 0] 2
A 2-dimensional polyhedron in QQ^5 defined as the convex hull of 3 vertices
14 [2, 0, 3, 1] 2
A 2-dimensional polyhedron in QQ^5 defined as the convex hull of 3 vertices
15 [2, 0, 3, 2] 0
16 [2, 0, 3] 0
17 [2, 0, 1, 2, 0, 1] 0
18 [2, 0, 1, 2, 0] 1
A 1-dimensional polyhedron in QQ^5 defined as the convex hull of 2 vertices
19 [2, 0, 1, 2] 1
A 1-dimensional polyhedron in QQ^5 defined as the convex hull of 2 vertices
20 [2, 0, 1, 0] 1
A 1-dimensional polyhedron in QQ^5 defined as the convex hull of 2 vertices
21 [2, 0, 1] 1
A 1-dimensional polyhedron in QQ^5 defined as the convex hull of 2 vertices
22 [2, 0] 0
23 [2, 3, 1, 2, 3, 1] 0
24 [2, 3, 1, 2, 3] 0
25 [2, 3, 1, 2, 1] 0
26 [2, 3, 1, 2] 0
27 [2, 3, 1] 0
28 [2, 3, 2] 0
29 [2, 3] 0
30 [2, 1, 2] 0
31 [2, 1] 0
32 [2] 0
33 [0, 3, 1, 0] 0
34 [0, 3, 1] 0
35 [0, 3] 0
36 [0, 1, 0] 0
37 [0, 1] 0
38 [0] 0
39 [3, 1] 0
40 [3] 0
41 [1] 0
42 [] 0
sage: A=CartanMatrix(['C',5])
....: c=[4,2,0,3,1]
....: cinv=list(reversed(c))
....: coxnum=coxeter_number(A)
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),[cinv,[],c])
....:     print(num,v,P.dimension())
....:     if P.dimension()>0:
....:         print(P)
....: 
1 [2, 0, 3, 1, 2, 0, 3, 1, 2, 0] 0
2 [2, 0, 3, 1, 2, 0, 3, 1, 2] 0
3 [2, 0, 3, 1, 2, 0, 3, 1, 0] 0
4 [2, 0, 3, 1, 2, 0, 3, 1] 0
5 [2, 0, 3, 1, 2, 0, 3] 1
A 1-dimensional polyhedron in QQ^5 defined as the convex hull of 2 vertices
6 [2, 0, 3, 1, 2, 0, 1, 0] 0
7 [2, 0, 3, 1, 2, 0, 1] 0
8 [2, 0, 3, 1, 2, 0] 2
A 2-dimensional polyhedron in QQ^5 defined as the convex hull of 3 vertices
9 [2, 0, 3, 1, 2, 3, 1] 0
10 [2, 0, 3, 1, 2, 3] 1
A 1-dimensional polyhedron in QQ^5 defined as the convex hull of 2 vertices
11 [2, 0, 3, 1, 2, 1] 0
12 [2, 0, 3, 1, 2] 2
A 2-dimensional polyhedron in QQ^5 defined as the convex hull of 3 vertices
13 [2, 0, 3, 1, 0] 2
A 2-dimensional polyhedron in QQ^5 defined as the convex hull of 3 vertices
14 [2, 0, 3, 1] 2
A 2-dimensional polyhedron in QQ^5 defined as the convex hull of 3 vertices
15 [2, 0, 3, 2] 0
16 [2, 0, 3] 0
17 [2, 0, 1, 2, 0, 1] 0
18 [2, 0, 1, 2, 0] 1
A 1-dimensional polyhedron in QQ^5 defined as the convex hull of 2 vertices
19 [2, 0, 1, 2] 1
A 1-dimensional polyhedron in QQ^5 defined as the convex hull of 2 vertices
20 [2, 0, 1, 0] 1
A 1-dimensional polyhedron in QQ^5 defined as the convex hull of 2 vertices
21 [2, 0, 1] 1
A 1-dimensional polyhedron in QQ^5 defined as the convex hull of 2 vertices
22 [2, 0] 0
23 [2, 3, 1, 2, 3, 1] 0
24 [2, 3, 1, 2, 3] 0
25 [2, 3, 1, 2, 1] 0
26 [2, 3, 1, 2] 0
27 [2, 3, 1] 0
28 [2, 3, 2] 0
29 [2, 3] 0
30 [2, 1, 2] 0
31 [2, 1] 0
32 [2] 0
33 [0, 3, 1, 0] 0
34 [0, 3, 1] 0
35 [0, 3] 0
36 [0, 1, 0] 0
37 [0, 1] 0
38 [0] 0
39 [3, 1] 0
40 [3] 0
41 [1] 0
42 [] 0
sage: A=CartanMatrix(['C',5])
....: c=[4,2,0,3,1]
....: cinv=list(reversed(c))
....: coxnum=coxeter_number(A)
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),[cinv,[],c,c+c])
....:     print(num,v,P.dimension())
....:     if P.dimension()>0:
....:         print(P)
1 [2, 0, 3, 1, 2, 0, 3, 1, 2, 0] 0
2 [2, 0, 3, 1, 2, 0, 3, 1, 2] 0
3 [2, 0, 3, 1, 2, 0, 3, 1, 0] 0
4 [2, 0, 3, 1, 2, 0, 3, 1] 0
5 [2, 0, 3, 1, 2, 0, 3] 1
A 1-dimensional polyhedron in QQ^5 defined as the convex hull of 2 vertices
6 [2, 0, 3, 1, 2, 0, 1, 0] 0
7 [2, 0, 3, 1, 2, 0, 1] 0
8 [2, 0, 3, 1, 2, 0] 1
A 1-dimensional polyhedron in QQ^5 defined as the convex hull of 2 vertices
9 [2, 0, 3, 1, 2, 3, 1] 0
10 [2, 0, 3, 1, 2, 3] 1
A 1-dimensional polyhedron in QQ^5 defined as the convex hull of 2 vertices
11 [2, 0, 3, 1, 2, 1] 0
12 [2, 0, 3, 1, 2] 1
A 1-dimensional polyhedron in QQ^5 defined as the convex hull of 2 vertices
13 [2, 0, 3, 1, 0] 1
A 1-dimensional polyhedron in QQ^5 defined as the convex hull of 2 vertices
14 [2, 0, 3, 1] 1
A 1-dimensional polyhedron in QQ^5 defined as the convex hull of 2 vertices
15 [2, 0, 3, 2] 0
16 [2, 0, 3] 0
17 [2, 0, 1, 2, 0, 1] 0
18 [2, 0, 1, 2, 0] 1
A 1-dimensional polyhedron in QQ^5 defined as the convex hull of 2 vertices
19 [2, 0, 1, 2] 1
A 1-dimensional polyhedron in QQ^5 defined as the convex hull of 2 vertices
20 [2, 0, 1, 0] 1
A 1-dimensional polyhedron in QQ^5 defined as the convex hull of 2 vertices
21 [2, 0, 1] 1
A 1-dimensional polyhedron in QQ^5 defined as the convex hull of 2 vertices
22 [2, 0] 0
23 [2, 3, 1, 2, 3, 1] 0
24 [2, 3, 1, 2, 3] 0
25 [2, 3, 1, 2, 1] 0
26 [2, 3, 1, 2] 0
27 [2, 3, 1] 0
28 [2, 3, 2] 0
29 [2, 3] 0
30 [2, 1, 2] 0
31 [2, 1] 0
32 [2] 0
33 [0, 3, 1, 0] 0
34 [0, 3, 1] 0
35 [0, 3] 0
36 [0, 1, 0] 0
37 [0, 1] 0
38 [0] 0
39 [3, 1] 0
40 [3] 0
41 [1] 0
42 [] 0
sage: A=CartanMatrix(['C',5])
....: c=[4,2,0,3,1]
....: cinv=list(reversed(c))
....: coxnum=coxeter_number(A)
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),[cinv,[],c,c+c,c+c+c])
....:     print(num,v,P.dimension())
....:     if P.dimension()>0:
....:         print(P)
1 [2, 0, 3, 1, 2, 0, 3, 1, 2, 0] 0
2 [2, 0, 3, 1, 2, 0, 3, 1, 2] 0
3 [2, 0, 3, 1, 2, 0, 3, 1, 0] 0
4 [2, 0, 3, 1, 2, 0, 3, 1] 0
5 [2, 0, 3, 1, 2, 0, 3] 1
A 1-dimensional polyhedron in QQ^5 defined as the convex hull of 2 vertices
6 [2, 0, 3, 1, 2, 0, 1, 0] 0
7 [2, 0, 3, 1, 2, 0, 1] 0
8 [2, 0, 3, 1, 2, 0] 1
A 1-dimensional polyhedron in QQ^5 defined as the convex hull of 2 vertices
9 [2, 0, 3, 1, 2, 3, 1] 0
10 [2, 0, 3, 1, 2, 3] 1
A 1-dimensional polyhedron in QQ^5 defined as the convex hull of 2 vertices
11 [2, 0, 3, 1, 2, 1] 0
12 [2, 0, 3, 1, 2] 1
A 1-dimensional polyhedron in QQ^5 defined as the convex hull of 2 vertices
13 [2, 0, 3, 1, 0] 1
A 1-dimensional polyhedron in QQ^5 defined as the convex hull of 2 vertices
14 [2, 0, 3, 1] 1
A 1-dimensional polyhedron in QQ^5 defined as the convex hull of 2 vertices
15 [2, 0, 3, 2] 0
16 [2, 0, 3] 0
17 [2, 0, 1, 2, 0, 1] 0
18 [2, 0, 1, 2, 0] 1
A 1-dimensional polyhedron in QQ^5 defined as the convex hull of 2 vertices
19 [2, 0, 1, 2] 1
A 1-dimensional polyhedron in QQ^5 defined as the convex hull of 2 vertices
20 [2, 0, 1, 0] 1
A 1-dimensional polyhedron in QQ^5 defined as the convex hull of 2 vertices
21 [2, 0, 1] 1
A 1-dimensional polyhedron in QQ^5 defined as the convex hull of 2 vertices
22 [2, 0] 0
23 [2, 3, 1, 2, 3, 1] 0
24 [2, 3, 1, 2, 3] 0
25 [2, 3, 1, 2, 1] 0
26 [2, 3, 1, 2] 0
27 [2, 3, 1] 0
28 [2, 3, 2] 0
29 [2, 3] 0
30 [2, 1, 2] 0
31 [2, 1] 0
32 [2] 0
33 [0, 3, 1, 0] 0
34 [0, 3, 1] 0
35 [0, 3] 0
36 [0, 1, 0] 0
37 [0, 1] 0
38 [0] 0
39 [3, 1] 0
40 [3] 0
41 [1] 0
42 [] 0
sage: A=CartanMatrix(['C',5])
....: c=[4,2,0,3,1]
....: cinv=list(reversed(c))
....: coxnum=coxeter_number(A)
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),[cinv,[],c,c+c,c+c+c,c+c+c+c])
....:     print(num,v,P.dimension())
....:     if P.dimension()>0:
....:         print(P)
1 [2, 0, 3, 1, 2, 0, 3, 1, 2, 0] 0
2 [2, 0, 3, 1, 2, 0, 3, 1, 2] 0
3 [2, 0, 3, 1, 2, 0, 3, 1, 0] 0
4 [2, 0, 3, 1, 2, 0, 3, 1] 0
5 [2, 0, 3, 1, 2, 0, 3] 0
6 [2, 0, 3, 1, 2, 0, 1, 0] 0
7 [2, 0, 3, 1, 2, 0, 1] 0
8 [2, 0, 3, 1, 2, 0] 0
9 [2, 0, 3, 1, 2, 3, 1] 0
10 [2, 0, 3, 1, 2, 3] 0
11 [2, 0, 3, 1, 2, 1] 0
12 [2, 0, 3, 1, 2] 0
13 [2, 0, 3, 1, 0] 0
14 [2, 0, 3, 1] 0
15 [2, 0, 3, 2] 0
16 [2, 0, 3] 0
17 [2, 0, 1, 2, 0, 1] 0
18 [2, 0, 1, 2, 0] 0
19 [2, 0, 1, 2] 0
20 [2, 0, 1, 0] 0
21 [2, 0, 1] 0
22 [2, 0] 0
23 [2, 3, 1, 2, 3, 1] 0
24 [2, 3, 1, 2, 3] 0
25 [2, 3, 1, 2, 1] 0
26 [2, 3, 1, 2] 0
27 [2, 3, 1] 0
28 [2, 3, 2] 0
29 [2, 3] 0
30 [2, 1, 2] 0
31 [2, 1] 0
32 [2] 0
33 [0, 3, 1, 0] 0
34 [0, 3, 1] 0
35 [0, 3] 0
36 [0, 1, 0] 0
37 [0, 1] 0
38 [0] 0
39 [3, 1] 0
40 [3] 0
41 [1] 0
42 [] 0
sage: A=CartanMatrix(['C',5])
....: c=[4,2,0,3,1]
....: cinv=list(reversed(c))
....: coxnum=coxeter_number(A)
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     P=p_lambda_int(B(A,c),lam(A,v),[cinv+cinv,cinv,[],c,c+c,c+c+c])
....:     print(num,v,P.dimension())
....:     if P.dimension()>0:
....:         print(P)
1 [2, 0, 3, 1, 2, 0, 3, 1, 2, 0] 0
2 [2, 0, 3, 1, 2, 0, 3, 1, 2] 0
3 [2, 0, 3, 1, 2, 0, 3, 1, 0] 0
4 [2, 0, 3, 1, 2, 0, 3, 1] 0
5 [2, 0, 3, 1, 2, 0, 3] 0
6 [2, 0, 3, 1, 2, 0, 1, 0] 0
7 [2, 0, 3, 1, 2, 0, 1] 0
8 [2, 0, 3, 1, 2, 0] 0
9 [2, 0, 3, 1, 2, 3, 1] 0
10 [2, 0, 3, 1, 2, 3] 0
11 [2, 0, 3, 1, 2, 1] 0
12 [2, 0, 3, 1, 2] 0
13 [2, 0, 3, 1, 0] 0
14 [2, 0, 3, 1] 0
15 [2, 0, 3, 2] 0
16 [2, 0, 3] 0
17 [2, 0, 1, 2, 0, 1] 0
18 [2, 0, 1, 2, 0] 0
19 [2, 0, 1, 2] 0
20 [2, 0, 1, 0] 0
21 [2, 0, 1] 0
22 [2, 0] 0
23 [2, 3, 1, 2, 3, 1] 0
24 [2, 3, 1, 2, 3] 0
25 [2, 3, 1, 2, 1] 0
26 [2, 3, 1, 2] 0
27 [2, 3, 1] 0
28 [2, 3, 2] 0
29 [2, 3] 0
30 [2, 1, 2] 0
31 [2, 1] 0
32 [2] 0
33 [0, 3, 1, 0] 0
34 [0, 3, 1] 0
35 [0, 3] 0
36 [0, 1, 0] 0
37 [0, 1] 0
38 [0] 0
39 [3, 1] 0
40 [3] 0
41 [1] 0
42 [] 0
sage: A=CartanMatrix(['C',6])
....: c=[0,1,2,3,4,5]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),K(c,v)).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
....: 
1 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5] 0
2 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4] 0
3 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3] 0
4 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2] 0
5 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1] 1
Failure!
sage: A=CartanMatrix(['C',6])
....: c=[0,1,2,3,4,5]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v)).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
....: 
1 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5] 0
2 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4] 0
3 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3] 0
4 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2] 0
5 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1] 0
6 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5] 0
7 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] 0
8 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] 0
9 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1] 0
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [1532], line 6
      4 for v in sortables(A,c[Integer(1):]):
      5     num+=Integer(1)
----> 6     d=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v)).dimension()
      7     print(num,v,d)
      8     if d!=Integer(0):

File ~/git/affine_dominance/software/domination5.py:15, in p_lambda_int(B, la, seqs)
     13 P = p_lambda(B, la, seqs[0])
     14 for s in seqs:
---> 15     P = P.intersection(p_lambda(B, la, s))
     16     if P.dimension()==0:
     17         break

File ~/git/affine_dominance/software/domination5.py:49, in p_lambda(B, la, seq)
     45         P=Ep*Pp
     46     else:
     47         #print("Pp:   ",Pp,Pp.vertices(),Pp.rays(),Pp.lines(),"\n")
     48         #print("Pm:   ",Pm,Pm.vertices(),Pm.rays(),Pm.lines(),"\n\n")
---> 49         P=(Ep*Pp).convex_hull(Em*Pm)
     50     B.mutate(k)
     51 return P

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1312, in Polyhedron_base5.convex_hull(self, other)
   1310 hull_rays = self.rays() + other.rays()
   1311 hull_lines = self.lines() + other.lines()
-> 1312 return self.parent().element_class(self.parent(), [hull_vertices, hull_rays, hull_lines], None)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:174, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    171     lines = tuple(lines)
    173 if vertices or rays or lines:
--> 174     self._init_from_Vrepresentation(vertices, rays, lines, **kwds)
    175 else:
    176     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:99, in Polyhedron_ppl._init_from_Vrepresentation(self, vertices, rays, lines, minimize, verbose)
     72 def _init_from_Vrepresentation(self, vertices, rays, lines, minimize=True, verbose=False):
     73     """
     74     Construct polyhedron from V-representation data.
     75 
   (...)
     97         sage: Polyhedron_ppl._init_from_Vrepresentation(p, [], [], [])
     98     """
---> 99     gs = self._convert_generators_to_ppl(vertices, rays, lines)
    100     if gs.empty():
    101         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'empty')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:477, in Polyhedron_ppl._convert_generators_to_ppl(vertices, rays, lines)
    475     rays = []
    476 for r in rays:
--> 477     gs.insert(Polyhedron_ppl._convert_generator_to_ppl(r, RAY))
    478 if lines is None:
    479     lines = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:442, in Polyhedron_ppl._convert_generator_to_ppl(v, typ)
    440 d = LCM_list([denominator(v_i) for v_i in v])
    441 if d.is_one():
--> 442     return ob(Linear_Expression(v, 0))
    443 else:
    444     dv = [ d*v_i for v_i in v ]

File ppl/linear_algebra.pyx:653, in ppl.linear_algebra.Linear_Expression.__init__()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/representation.py:81, in PolyhedronRepresentation.__getitem__(self, i)
     69     """
     70     Return the length of the representation data.
     71 
   (...)
     77         3
     78     """
     79     return self._vector.degree()
---> 81 def __getitem__(self, i):
     82     """
     83     Supports indexing.
     84 
   (...)
     90         2
     91     """
     92     return self._vector[i]

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v)).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [1, 2, 1, 2] 0
2 [1, 2, 1] 0
3 [1, 2] 0
4 [1] 0
5 [2] 0
6 [] 0
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v)).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [1, 2, 3, 1, 2, 3, 1, 2, 3] 0
2 [1, 2, 3, 1, 2, 3, 1, 2] 0
3 [1, 2, 3, 1, 2, 3, 1] 0
4 [1, 2, 3, 1, 2, 3] 0
5 [1, 2, 3, 1, 2, 1] 0
6 [1, 2, 3, 1, 2] 0
7 [1, 2, 3, 1] 0
8 [1, 2, 3, 2, 3] 0
9 [1, 2, 3, 2] 0
10 [1, 2, 3] 0
11 [1, 2, 1] 0
12 [1, 2] 0
13 [1, 3] 0
14 [1] 0
15 [2, 3, 2, 3] 0
16 [2, 3, 2] 0
17 [2, 3] 0
18 [2] 0
19 [3] 0
20 [] 0
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v)).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
2 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
3 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
4 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1] 0
5 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 1
Failure!
sage: A=CartanMatrix(['C',5])
....: c=[0,2,4,1,3]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v)).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3] 0
2 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1] 0
3 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 3] 0
4 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4] 0
5 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 1] 0
6 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2] 0
7 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 4] 0
8 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3] 0
9 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1] 0
10 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 3, 2, 4] 0
11 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 3, 2] 0
12 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 3, 4] 0
13 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 3] 0
14 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4] 0
15 [2, 4, 1, 3, 2, 4, 1, 3, 2, 1] 0
16 [2, 4, 1, 3, 2, 4, 1, 3, 2] 0
17 [2, 4, 1, 3, 2, 4, 1, 3, 4, 3] 0
18 [2, 4, 1, 3, 2, 4, 1, 3, 4] 0
19 [2, 4, 1, 3, 2, 4, 1, 3] 0
20 [2, 4, 1, 3, 2, 4, 1] 0
21 [2, 4, 1, 3, 2, 4, 3, 2, 4, 3, 2] 4
Failure!
sage: A=CartanMatrix(['C',5])
....: c=[0,2,4,1,3]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),K(c,v)).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3] 0
2 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1] 0
3 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 3] 0
4 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4] 0
5 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 1] 0
6 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2] 0
7 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 4] 0
8 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3] 0
9 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1] 0
10 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 3, 2, 4] 0
11 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 3, 2] 0
12 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 3, 4] 0
13 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 3] 0
14 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4] 0
15 [2, 4, 1, 3, 2, 4, 1, 3, 2, 1] 0
16 [2, 4, 1, 3, 2, 4, 1, 3, 2] 0
17 [2, 4, 1, 3, 2, 4, 1, 3, 4, 3] 0
18 [2, 4, 1, 3, 2, 4, 1, 3, 4] 0
19 [2, 4, 1, 3, 2, 4, 1, 3] 0
20 [2, 4, 1, 3, 2, 4, 1] 0
21 [2, 4, 1, 3, 2, 4, 3, 2, 4, 3, 2] 0
22 [2, 4, 1, 3, 2, 4, 3, 2, 4, 3] 0
23 [2, 4, 1, 3, 2, 4, 3, 2, 4] 0
24 [2, 4, 1, 3, 2, 4, 3, 2] 0
25 [2, 4, 1, 3, 2, 4, 3, 4, 3] 0
26 [2, 4, 1, 3, 2, 4, 3, 4] 0
27 [2, 4, 1, 3, 2, 4, 3] 0
28 [2, 4, 1, 3, 2, 4] 0
29 [2, 4, 1, 3, 2, 1, 3] 0
30 [2, 4, 1, 3, 2, 1] 0
31 [2, 4, 1, 3, 2, 3] 0
32 [2, 4, 1, 3, 2] 0
33 [2, 4, 1, 3, 4, 3] 0
34 [2, 4, 1, 3, 4] 0
35 [2, 4, 1, 3] 0
36 [2, 4, 1, 2] 3
Failure!
sage: A=CartanMatrix(['C',5])
....: c=[4,2,0,3,1]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),K(c,v)).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [2, 0, 3, 1, 2, 0, 3, 1, 2, 0] 0
2 [2, 0, 3, 1, 2, 0, 3, 1, 2] 0
3 [2, 0, 3, 1, 2, 0, 3, 1, 0] 0
4 [2, 0, 3, 1, 2, 0, 3, 1] 0
5 [2, 0, 3, 1, 2, 0, 3] 0
6 [2, 0, 3, 1, 2, 0, 1, 0] 0
7 [2, 0, 3, 1, 2, 0, 1] 0
8 [2, 0, 3, 1, 2, 0] 0
9 [2, 0, 3, 1, 2, 3, 1] 0
10 [2, 0, 3, 1, 2, 3] 0
11 [2, 0, 3, 1, 2, 1] 0
12 [2, 0, 3, 1, 2] 0
13 [2, 0, 3, 1, 0] 0
14 [2, 0, 3, 1] 0
15 [2, 0, 3, 2] 1
Failure!
sage: A=CartanMatrix(['C',5])
....: c=[4,2,0,3,1]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v)).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [2, 0, 3, 1, 2, 0, 3, 1, 2, 0] 0
2 [2, 0, 3, 1, 2, 0, 3, 1, 2] 0
3 [2, 0, 3, 1, 2, 0, 3, 1, 0] 0
4 [2, 0, 3, 1, 2, 0, 3, 1] 0
5 [2, 0, 3, 1, 2, 0, 3] 0
6 [2, 0, 3, 1, 2, 0, 1, 0] 0
7 [2, 0, 3, 1, 2, 0, 1] 0
8 [2, 0, 3, 1, 2, 0] 0
9 [2, 0, 3, 1, 2, 3, 1] 0
10 [2, 0, 3, 1, 2, 3] 0
11 [2, 0, 3, 1, 2, 1] 0
12 [2, 0, 3, 1, 2] 0
13 [2, 0, 3, 1, 0] 0
14 [2, 0, 3, 1] 0
15 [2, 0, 3, 2] 0
16 [2, 0, 3] 0
17 [2, 0, 1, 2, 0, 1] 0
18 [2, 0, 1, 2, 0] 0
19 [2, 0, 1, 2] 0
20 [2, 0, 1, 0] 0
21 [2, 0, 1] 0
22 [2, 0] 0
23 [2, 3, 1, 2, 3, 1] 0
24 [2, 3, 1, 2, 3] 0
25 [2, 3, 1, 2, 1] 0
26 [2, 3, 1, 2] 0
27 [2, 3, 1] 0
28 [2, 3, 2] 0
29 [2, 3] 0
30 [2, 1, 2] 0
31 [2, 1] 0
32 [2] 0
33 [0, 3, 1, 0] 0
34 [0, 3, 1] 0
35 [0, 3] 0
36 [0, 1, 0] 0
37 [0, 1] 0
38 [0] 0
39 [3, 1] 0
40 [3] 0
41 [1] 0
42 [] 0
sage: A=CartanMatrix(['C',6])
....: c=[5,3,1,4,2,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v)).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0] 0
2 [3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2] 0
3 [3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 0] 0
4 [3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4] 0
5 [3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 2, 0] 0
6 [3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 2] 0
7 [3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 0] 0
8 [3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1] 0
9 [3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 4] 0
10 [3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3] 0
11 [3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 1, 0] 0
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [1540], line 6
      4 for v in sortables(A,c[Integer(1):]):
      5     num+=Integer(1)
----> 6     d=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v)).dimension()
      7     print(num,v,d)
      8     if d!=Integer(0):

File ~/git/affine_dominance/software/domination5.py:15, in p_lambda_int(B, la, seqs)
     13 P = p_lambda(B, la, seqs[0])
     14 for s in seqs:
---> 15     P = P.intersection(p_lambda(B, la, s))
     16     if P.dimension()==0:
     17         break

File ~/git/affine_dominance/software/domination5.py:49, in p_lambda(B, la, seq)
     45         P=Ep*Pp
     46     else:
     47         #print("Pp:   ",Pp,Pp.vertices(),Pp.rays(),Pp.lines(),"\n")
     48         #print("Pm:   ",Pm,Pm.vertices(),Pm.rays(),Pm.lines(),"\n\n")
---> 49         P=(Ep*Pp).convex_hull(Em*Pm)
     50     B.mutate(k)
     51 return P

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4099, in sage.structure.element.Matrix.__mul__ (build/cythonized/sage/structure/element.c:35219)()
   4097 
   4098         if BOTH_ARE_ELEMENT(cl):
-> 4099             return coercion_model.bin_op(left, right, mul)
   4100 
   4101         cdef long value

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1222, in sage.structure.coerce.CoercionModel.bin_op (build/cythonized/sage/structure/coerce.c:15809)()
   1220 if action is not None:
   1221     if (<Action>action)._is_left:
-> 1222         return (<Action>action)._act_(x, y)
   1223     else:
   1224         return (<Action>action)._act_(y, x)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_actions.pyx:157, in sage.structure.coerce_actions.ActedUponAction._act_ (build/cythonized/sage/structure/coerce_actions.c:8579)()
    155     <... 'sage.structure.coerce_actions.ActedUponAction'>
    156 """
--> 157 return (<Element>x)._acted_upon_(g, not self._is_left)
    158 
    159 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:949, in sage.structure.element.Element._acted_upon_ (build/cythonized/sage/structure/element.c:16495)()
    947     return None
    948 
--> 949 cpdef _acted_upon_(self, x, bint self_on_left) noexcept:
    950     """
    951     Use this method to implement ``self`` acted on by x.

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1450, in Polyhedron_base5._acted_upon_(self, actor, self_on_left)
   1448         raise ValueError("matrices should act on the left")
   1449     else:
-> 1450         return self.linear_transformation(actor)
   1451 else:
   1452     return self.dilation(actor)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1879, in Polyhedron_base5.linear_transformation(self, linear_transf, new_base_ring)
   1873     pref_rep = 'Vrep' if self.n_vertices() <= self.n_inequalities() else 'Hrep'
   1875     return new_parent.element_class(new_parent, [new_vertices, new_rays, new_lines],
   1876                                     [new_inequalities, new_equations],
   1877                                     Vrep_minimal=True, Hrep_minimal=True, pref_rep=pref_rep)
-> 1879 return new_parent.element_class(new_parent, [tuple(new_vertices), tuple(new_rays), tuple(new_lines)], None)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:70, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
---> 70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:195, in Polyhedron_ppl.set_immutable(self)
    193         raise e
    194 if not hasattr(self, '_Hrepresentation'):
--> 195     self._init_Hrepresentation_from_ppl(True)
    196 self._is_mutable = False

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:344, in Polyhedron_ppl._init_Hrepresentation_from_ppl(self, minimize)
    342 for c in cs:
    343     if c.is_inequality():
--> 344         parent._make_Inequality(self, (c.inhomogeneous_term(),) + c.coefficients())
    345     elif c.is_equality():
    346         parent._make_Equation(self, (c.inhomogeneous_term(),) + c.coefficients())

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:1069, in Polyhedra_base._make_Inequality(self, polyhedron, data)
   1067 except IndexError:
   1068     obj = Inequality(self)
-> 1069 obj._set_data(polyhedron, data)
   1070 return obj

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/representation.py:439, in Hrepresentation._set_data(self, polyhedron, data)
    436 if len(data) != self._vector.degree():
    437     raise ValueError('H-representation data requires a list of length ambient_dim+1')
--> 439 self._vector[:] = data
    440 self._A[:] = data[1:]
    441 self._b = self._base_ring(data[0])

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/modules/free_module_element.pyx:1893, in sage.modules.free_module_element.FreeModuleElement.__setitem__ (build/cythonized/sage/modules/free_module_element.c:20047)()
   1891 if isinstance(i, slice):
   1892     PySlice_GetIndicesEx(i, d, &start, &stop, &step, &slicelength)
-> 1893     values = [R(x) for x in value]
   1894     if len(values) != slicelength:
   1895         raise IndexError("slice assignment would change dimension")

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/parent.pyx:901, in sage.structure.parent.Parent.__call__ (build/cythonized/sage/structure/parent.c:12658)()
    899 if mor is not None:
    900     if no_extra_args:
--> 901         return mor._call_(x)
    902     else:
    903         return mor._call_with_args(x, args, kwds)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:158, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_ (build/cythonized/sage/structure/coerce_maps.c:6834)()
    156 cdef Parent C = self._codomain
    157 try:
--> 158     return C._element_constructor(x)
    159 except Exception:
    160     if print_warnings:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/rings/rational.pyx:536, in sage.rings.rational.Rational.__init__ (build/cythonized/sage/rings/rational.cpp:14305)()
    534     """
    535     if x is not None:
--> 536         self.__set_value(x, base)
    537 
    538 def __reduce__(self):

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/rings/rational.pyx:670, in sage.rings.rational.Rational._Rational__set_value (build/cythonized/sage/rings/rational.cpp:16246)()
    668         raise TypeError("unable to convert {!r} to a rational".format(x))
    669 
--> 670 elif isinstance(x, fractions.Fraction):
    671     mpz_set(mpq_numref(self.value), (<integer.Integer> integer.Integer(x.numerator)).value)
    672     mpz_set(mpq_denref(self.value), (<integer.Integer> integer.Integer(x.denominator)).value)

File <frozen abc>:119, in __instancecheck__(cls, instance)

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['C',5])
....: c=[4,2,0,3,1]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),K(c,v)).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [2, 0, 3, 1, 2, 0, 3, 1, 2, 0] 0
2 [2, 0, 3, 1, 2, 0, 3, 1, 2] 0
3 [2, 0, 3, 1, 2, 0, 3, 1, 0] 0
4 [2, 0, 3, 1, 2, 0, 3, 1] 0
5 [2, 0, 3, 1, 2, 0, 3] 0
6 [2, 0, 3, 1, 2, 0, 1, 0] 0
7 [2, 0, 3, 1, 2, 0, 1] 0
8 [2, 0, 3, 1, 2, 0] 0
9 [2, 0, 3, 1, 2, 3, 1] 0
10 [2, 0, 3, 1, 2, 3] 0
11 [2, 0, 3, 1, 2, 1] 0
12 [2, 0, 3, 1, 2] 0
13 [2, 0, 3, 1, 0] 0
14 [2, 0, 3, 1] 0
15 [2, 0, 3, 2] 1
Failure!
sage: A=CartanMatrix(['C',5])
....: c=[4,2,0,3,1]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v)).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [2, 0, 3, 1, 2, 0, 3, 1, 2, 0] 0
2 [2, 0, 3, 1, 2, 0, 3, 1, 2] 0
3 [2, 0, 3, 1, 2, 0, 3, 1, 0] 0
4 [2, 0, 3, 1, 2, 0, 3, 1] 0
5 [2, 0, 3, 1, 2, 0, 3] 0
6 [2, 0, 3, 1, 2, 0, 1, 0] 0
7 [2, 0, 3, 1, 2, 0, 1] 0
8 [2, 0, 3, 1, 2, 0] 0
9 [2, 0, 3, 1, 2, 3, 1] 0
10 [2, 0, 3, 1, 2, 3] 0
11 [2, 0, 3, 1, 2, 1] 0
12 [2, 0, 3, 1, 2] 0
13 [2, 0, 3, 1, 0] 0
14 [2, 0, 3, 1] 0
15 [2, 0, 3, 2] 0
16 [2, 0, 3] 0
17 [2, 0, 1, 2, 0, 1] 0
18 [2, 0, 1, 2, 0] 0
19 [2, 0, 1, 2] 0
20 [2, 0, 1, 0] 0
21 [2, 0, 1] 0
22 [2, 0] 0
23 [2, 3, 1, 2, 3, 1] 0
24 [2, 3, 1, 2, 3] 0
25 [2, 3, 1, 2, 1] 0
26 [2, 3, 1, 2] 0
27 [2, 3, 1] 0
28 [2, 3, 2] 0
29 [2, 3] 0
30 [2, 1, 2] 0
31 [2, 1] 0
32 [2] 0
33 [0, 3, 1, 0] 0
34 [0, 3, 1] 0
35 [0, 3] 0
36 [0, 1, 0] 0
37 [0, 1] 0
38 [0] 0
39 [3, 1] 0
40 [3] 0
41 [1] 0
42 [] 0
sage: A=CartanMatrix(['A',5])
....: c=[4,2,0,3,1]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v)).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [2, 0, 3, 1, 2, 0, 3, 1, 2, 0] 0
2 [2, 0, 3, 1, 2, 0, 3, 1, 2] 0
3 [2, 0, 3, 1, 2, 0, 3, 1, 0] 0
4 [2, 0, 3, 1, 2, 0, 3, 1] 0
5 [2, 0, 3, 1, 2, 0, 3] 0
6 [2, 0, 3, 1, 2, 0, 1, 0] 0
7 [2, 0, 3, 1, 2, 0, 1] 0
8 [2, 0, 3, 1, 2, 0] 0
9 [2, 0, 3, 1, 2, 3, 1] 0
10 [2, 0, 3, 1, 2, 3] 0
11 [2, 0, 3, 1, 2, 1] 0
12 [2, 0, 3, 1, 2] 0
13 [2, 0, 3, 1, 0] 0
14 [2, 0, 3, 1] 0
15 [2, 0, 3, 2] 0
16 [2, 0, 3] 0
17 [2, 0, 1, 2, 0, 1] 0
18 [2, 0, 1, 2, 0] 0
19 [2, 0, 1, 2] 0
20 [2, 0, 1, 0] 0
21 [2, 0, 1] 0
22 [2, 0] 0
23 [2, 3, 1, 2, 3, 1] 0
24 [2, 3, 1, 2, 3] 0
25 [2, 3, 1, 2, 1] 0
26 [2, 3, 1, 2] 0
27 [2, 3, 1] 0
28 [2, 3, 2] 0
29 [2, 3] 0
30 [2, 1, 2] 0
31 [2, 1] 0
32 [2] 0
33 [0, 3, 1, 0] 0
34 [0, 3, 1] 0
35 [0, 3] 0
36 [0, 1, 0] 0
37 [0, 1] 0
38 [0] 0
39 [3, 1] 0
40 [3] 0
41 [1] 0
42 [] 0
### reloading attached file domination5.py modified at 18:31:13 ###
sage: A=CartanMatrix(['A',5])
....: c=[4,2,0,3,1]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v)).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
....: 
1 [2, 0, 3, 1, 2, 0, 3, 1, 2, 0] 0
2 [2, 0, 3, 1, 2, 0, 3, 1, 2] 0
3 [2, 0, 3, 1, 2, 0, 3, 1, 0] 0
4 [2, 0, 3, 1, 2, 0, 3, 1] 0
5 [2, 0, 3, 1, 2, 0, 3] 0
6 [2, 0, 3, 1, 2, 0, 1, 0] 0
7 [2, 0, 3, 1, 2, 0, 1] 0
8 [2, 0, 3, 1, 2, 0] 0
9 [2, 0, 3, 1, 2, 3, 1] 0
10 [2, 0, 3, 1, 2, 3] 0
11 [2, 0, 3, 1, 2, 1] 0
12 [2, 0, 3, 1, 2] 0
13 [2, 0, 3, 1, 0] 0
14 [2, 0, 3, 1] 0
15 [2, 0, 3, 2] 1
Failure!
sage: A=CartanMatrix(['A',5])
....: c=[4,2,0,3,1]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),K(c,v)).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [2, 0, 3, 1, 2, 0, 3, 1, 2, 0] 0
2 [2, 0, 3, 1, 2, 0, 3, 1, 2] 0
3 [2, 0, 3, 1, 2, 0, 3, 1, 0] 0
4 [2, 0, 3, 1, 2, 0, 3, 1] 0
5 [2, 0, 3, 1, 2, 0, 3] 0
6 [2, 0, 3, 1, 2, 0, 1, 0] 0
7 [2, 0, 3, 1, 2, 0, 1] 0
8 [2, 0, 3, 1, 2, 0] 0
9 [2, 0, 3, 1, 2, 3, 1] 0
10 [2, 0, 3, 1, 2, 3] 0
11 [2, 0, 3, 1, 2, 1] 0
12 [2, 0, 3, 1, 2] 0
13 [2, 0, 3, 1, 0] 0
14 [2, 0, 3, 1] 0
15 [2, 0, 3, 2] 0
16 [2, 0, 3] 0
17 [2, 0, 1, 2, 0, 1] 0
18 [2, 0, 1, 2, 0] 0
19 [2, 0, 1, 2] 0
20 [2, 0, 1, 0] 0
21 [2, 0, 1] 0
22 [2, 0] 0
23 [2, 3, 1, 2, 3, 1] 0
24 [2, 3, 1, 2, 3] 0
25 [2, 3, 1, 2, 1] 0
26 [2, 3, 1, 2] 0
27 [2, 3, 1] 0
28 [2, 3, 2] 0
29 [2, 3] 0
30 [2, 1, 2] 0
31 [2, 1] 0
32 [2] 0
33 [0, 3, 1, 0] 0
34 [0, 3, 1] 0
35 [0, 3] 0
36 [0, 1, 0] 0
37 [0, 1] 0
38 [0] 0
39 [3, 1] 0
40 [3] 0
41 [1] 0
42 [] 0
sage: A=CartanMatrix(['C',5])
....: c=[4,2,0,3,1]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),K(c,v)).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [2, 0, 3, 1, 2, 0, 3, 1, 2, 0] 0
2 [2, 0, 3, 1, 2, 0, 3, 1, 2] 0
3 [2, 0, 3, 1, 2, 0, 3, 1, 0] 0
4 [2, 0, 3, 1, 2, 0, 3, 1] 0
5 [2, 0, 3, 1, 2, 0, 3] 0
6 [2, 0, 3, 1, 2, 0, 1, 0] 0
7 [2, 0, 3, 1, 2, 0, 1] 0
8 [2, 0, 3, 1, 2, 0] 0
9 [2, 0, 3, 1, 2, 3, 1] 0
10 [2, 0, 3, 1, 2, 3] 0
11 [2, 0, 3, 1, 2, 1] 0
12 [2, 0, 3, 1, 2] 0
13 [2, 0, 3, 1, 0] 0
14 [2, 0, 3, 1] 0
15 [2, 0, 3, 2] 0
16 [2, 0, 3] 0
17 [2, 0, 1, 2, 0, 1] 0
18 [2, 0, 1, 2, 0] 0
19 [2, 0, 1, 2] 0
20 [2, 0, 1, 0] 0
21 [2, 0, 1] 0
22 [2, 0] 0
23 [2, 3, 1, 2, 3, 1] 0
24 [2, 3, 1, 2, 3] 0
25 [2, 3, 1, 2, 1] 0
26 [2, 3, 1, 2] 0
27 [2, 3, 1] 0
28 [2, 3, 2] 0
29 [2, 3] 0
30 [2, 1, 2] 0
31 [2, 1] 0
32 [2] 0
33 [0, 3, 1, 0] 0
34 [0, 3, 1] 0
35 [0, 3] 0
36 [0, 1, 0] 0
37 [0, 1] 0
38 [0] 0
39 [3, 1] 0
40 [3] 0
41 [1] 0
42 [] 0
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),K(c,v)).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
2 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
3 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
4 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1] 0
5 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 1
Failure!
sage: A=CartanMatrix(['C',5])
....: c=[4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),K(c,v)).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
2 [3, 2, 1, 0, 3, 2, 1, 3, 2] 0
3 [3, 2, 1, 0, 3, 2, 1, 3] 0
4 [3, 2, 1, 0, 3, 2, 1, 2] 0
5 [3, 2, 1, 0, 3, 2, 1] 0
6 [3, 2, 1, 0, 3, 2, 3] 0
7 [3, 2, 1, 0, 3, 2] 0
8 [3, 2, 1, 0, 3, 1] 0
9 [3, 2, 1, 0, 3] 0
10 [3, 2, 1, 0, 2, 1, 2] 0
11 [3, 2, 1, 0, 2, 1] 0
12 [3, 2, 1, 0, 2] 2
Failure!
sage: A=CartanMatrix(['C',5])
....: c=[4,2,0,3,1]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),K(c,v)).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [2, 0, 3, 1, 2, 0, 3, 1, 2, 0] 0
2 [2, 0, 3, 1, 2, 0, 3, 1, 2] 0
3 [2, 0, 3, 1, 2, 0, 3, 1, 0] 0
4 [2, 0, 3, 1, 2, 0, 3, 1] 0
5 [2, 0, 3, 1, 2, 0, 3] 0
6 [2, 0, 3, 1, 2, 0, 1, 0] 0
7 [2, 0, 3, 1, 2, 0, 1] 0
8 [2, 0, 3, 1, 2, 0] 0
9 [2, 0, 3, 1, 2, 3, 1] 0
10 [2, 0, 3, 1, 2, 3] 0
11 [2, 0, 3, 1, 2, 1] 0
12 [2, 0, 3, 1, 2] 0
13 [2, 0, 3, 1, 0] 0
14 [2, 0, 3, 1] 0
15 [2, 0, 3, 2] 0
16 [2, 0, 3] 0
17 [2, 0, 1, 2, 0, 1] 0
18 [2, 0, 1, 2, 0] 0
19 [2, 0, 1, 2] 0
20 [2, 0, 1, 0] 0
21 [2, 0, 1] 0
22 [2, 0] 0
23 [2, 3, 1, 2, 3, 1] 0
24 [2, 3, 1, 2, 3] 0
25 [2, 3, 1, 2, 1] 0
26 [2, 3, 1, 2] 0
27 [2, 3, 1] 0
28 [2, 3, 2] 0
29 [2, 3] 0
30 [2, 1, 2] 0
31 [2, 1] 0
32 [2] 0
33 [0, 3, 1, 0] 0
34 [0, 3, 1] 0
35 [0, 3] 0
36 [0, 1, 0] 0
37 [0, 1] 0
38 [0] 0
39 [3, 1] 0
40 [3] 0
41 [1] 0
42 [] 0
sage: A=CartanMatrix(['C',5])
....: c=[4,2,0,3,1]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),K(c,v)).dimension()
....:     print(num,v,d)
....:     print(K(c,v))
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [2, 0, 3, 1, 2, 0, 3, 1, 2, 0] 0
[[2, 0, 3, 1, 2, 0, 3, 1, 2, 0], [2, 0, 3, 1, 2, 0, 3, 1, 2], [2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 2], [2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 2, 0], [2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 1], [2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 1, 0], [2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 1, 2], [2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 1, 2, 0], [2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 3], [2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 3, 0], [2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 3, 2], [2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 3, 2, 0], [2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 3, 1], [2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 3, 1, 0], [2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 3, 1, 2], [2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 3, 1, 2, 0], [4, 2, 0, 3, 1, 2, 0, 3, 1, 2, 0], [4, 2, 0, 3, 1, 2, 0, 3, 1, 2], [4, 2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 2], [4, 2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 2, 0], [4, 2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 1], [4, 2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 1, 0], [4, 2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 1, 2], [4, 2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 1, 2, 0], [4, 2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 3], [4, 2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 3, 0], [4, 2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 3, 2], [4, 2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 3, 2, 0], [4, 2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 3, 1], [4, 2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 3, 1, 0], [4, 2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 3, 1, 2], [4, 2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 3, 1, 2, 0]]
2 [2, 0, 3, 1, 2, 0, 3, 1, 2] 0
[[2, 0, 3, 1, 2, 0, 3, 1, 2], [2, 0, 3, 1, 2, 0, 3, 1], [2, 0, 3, 1, 2, 0, 3, 1, 2, 1], [2, 0, 3, 1, 2, 0, 3, 1, 2, 1, 2], [2, 0, 3, 1, 2, 0, 3, 1, 2, 3], [2, 0, 3, 1, 2, 0, 3, 1, 2, 3, 2], [2, 0, 3, 1, 2, 0, 3, 1, 2, 3, 1], [2, 0, 3, 1, 2, 0, 3, 1, 2, 3, 1, 2], [2, 0, 3, 1, 2, 0, 3, 1, 2, 0], [2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 2], [2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 1], [2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 1, 2], [2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 3], [2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 3, 2], [2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 3, 1], [2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 3, 1, 2], [4, 2, 0, 3, 1, 2, 0, 3, 1, 2], [4, 2, 0, 3, 1, 2, 0, 3, 1], [4, 2, 0, 3, 1, 2, 0, 3, 1, 2, 1], [4, 2, 0, 3, 1, 2, 0, 3, 1, 2, 1, 2], [4, 2, 0, 3, 1, 2, 0, 3, 1, 2, 3], [4, 2, 0, 3, 1, 2, 0, 3, 1, 2, 3, 2], [4, 2, 0, 3, 1, 2, 0, 3, 1, 2, 3, 1], [4, 2, 0, 3, 1, 2, 0, 3, 1, 2, 3, 1, 2], [4, 2, 0, 3, 1, 2, 0, 3, 1, 2, 0], [4, 2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 2], [4, 2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 1], [4, 2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 1, 2], [4, 2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 3], [4, 2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 3, 2], [4, 2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 3, 1], [4, 2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 3, 1, 2]]
3 [2, 0, 3, 1, 2, 0, 3, 1, 0] 0
[[2, 0, 3, 1, 2, 0, 3, 1, 0], [2, 0, 3, 1, 2, 0, 3, 1], [2, 0, 3, 1, 2, 0, 3, 1, 0, 1], [2, 0, 3, 1, 2, 0, 3, 1, 0, 1, 0], [2, 0, 3, 1, 2, 0, 3, 1, 0, 3], [2, 0, 3, 1, 2, 0, 3, 1, 0, 3, 0], [2, 0, 3, 1, 2, 0, 3, 1, 0, 3, 1], [2, 0, 3, 1, 2, 0, 3, 1, 0, 3, 1, 0], [2, 0, 3, 1, 2, 0, 3, 1, 2, 0], [2, 0, 3, 1, 2, 0, 3, 1, 2], [2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 1], [2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 1, 0], [2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 3], [2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 3, 0], [2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 3, 1], [2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 3, 1, 0], [4, 2, 0, 3, 1, 2, 0, 3, 1, 0], [4, 2, 0, 3, 1, 2, 0, 3, 1], [4, 2, 0, 3, 1, 2, 0, 3, 1, 0, 1], [4, 2, 0, 3, 1, 2, 0, 3, 1, 0, 1, 0], [4, 2, 0, 3, 1, 2, 0, 3, 1, 0, 3], [4, 2, 0, 3, 1, 2, 0, 3, 1, 0, 3, 0], [4, 2, 0, 3, 1, 2, 0, 3, 1, 0, 3, 1], [4, 2, 0, 3, 1, 2, 0, 3, 1, 0, 3, 1, 0], [4, 2, 0, 3, 1, 2, 0, 3, 1, 2, 0], [4, 2, 0, 3, 1, 2, 0, 3, 1, 2], [4, 2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 1], [4, 2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 1, 0], [4, 2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 3], [4, 2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 3, 0], [4, 2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 3, 1], [4, 2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 3, 1, 0]]
4 [2, 0, 3, 1, 2, 0, 3, 1] 0
[[2, 0, 3, 1, 2, 0, 3, 1], [2, 0, 3, 1, 2, 0, 3], [2, 0, 3, 1, 2, 0, 3, 1, 3], [2, 0, 3, 1, 2, 0, 3, 1, 3, 1], [2, 0, 3, 1, 2, 0, 3, 1, 0], [2, 0, 3, 1, 2, 0, 3, 1, 0, 1], [2, 0, 3, 1, 2, 0, 3, 1, 0, 3], [2, 0, 3, 1, 2, 0, 3, 1, 0, 3, 1], [2, 0, 3, 1, 2, 0, 3, 1, 2], [2, 0, 3, 1, 2, 0, 3, 1, 2, 1], [2, 0, 3, 1, 2, 0, 3, 1, 2, 3], [2, 0, 3, 1, 2, 0, 3, 1, 2, 3, 1], [2, 0, 3, 1, 2, 0, 3, 1, 2, 0], [2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 1], [2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 3], [2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 3, 1], [4, 2, 0, 3, 1, 2, 0, 3, 1], [4, 2, 0, 3, 1, 2, 0, 3], [4, 2, 0, 3, 1, 2, 0, 3, 1, 3], [4, 2, 0, 3, 1, 2, 0, 3, 1, 3, 1], [4, 2, 0, 3, 1, 2, 0, 3, 1, 0], [4, 2, 0, 3, 1, 2, 0, 3, 1, 0, 1], [4, 2, 0, 3, 1, 2, 0, 3, 1, 0, 3], [4, 2, 0, 3, 1, 2, 0, 3, 1, 0, 3, 1], [4, 2, 0, 3, 1, 2, 0, 3, 1, 2], [4, 2, 0, 3, 1, 2, 0, 3, 1, 2, 1], [4, 2, 0, 3, 1, 2, 0, 3, 1, 2, 3], [4, 2, 0, 3, 1, 2, 0, 3, 1, 2, 3, 1], [4, 2, 0, 3, 1, 2, 0, 3, 1, 2, 0], [4, 2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 1], [4, 2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 3], [4, 2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 3, 1]]
5 [2, 0, 3, 1, 2, 0, 3] 0
[[2, 0, 3, 1, 2, 0, 3], [2, 0, 3, 1, 2, 0], [2, 0, 3, 1, 2, 0, 3, 0], [2, 0, 3, 1, 2, 0, 3, 0, 3], [2, 0, 3, 1, 2, 0, 3, 2], [2, 0, 3, 1, 2, 0, 3, 2, 3], [2, 0, 3, 1, 2, 0, 3, 2, 0], [2, 0, 3, 1, 2, 0, 3, 2, 0, 3], [2, 0, 3, 1, 2, 0, 3, 1], [2, 0, 3, 1, 2, 0, 3, 1, 3], [2, 0, 3, 1, 2, 0, 3, 1, 0], [2, 0, 3, 1, 2, 0, 3, 1, 0, 3], [2, 0, 3, 1, 2, 0, 3, 1, 2], [2, 0, 3, 1, 2, 0, 3, 1, 2, 3], [2, 0, 3, 1, 2, 0, 3, 1, 2, 0], [2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 3], [4, 2, 0, 3, 1, 2, 0, 3], [4, 2, 0, 3, 1, 2, 0], [4, 2, 0, 3, 1, 2, 0, 3, 0], [4, 2, 0, 3, 1, 2, 0, 3, 0, 3], [4, 2, 0, 3, 1, 2, 0, 3, 2], [4, 2, 0, 3, 1, 2, 0, 3, 2, 3], [4, 2, 0, 3, 1, 2, 0, 3, 2, 0], [4, 2, 0, 3, 1, 2, 0, 3, 2, 0, 3], [4, 2, 0, 3, 1, 2, 0, 3, 1], [4, 2, 0, 3, 1, 2, 0, 3, 1, 3], [4, 2, 0, 3, 1, 2, 0, 3, 1, 0], [4, 2, 0, 3, 1, 2, 0, 3, 1, 0, 3], [4, 2, 0, 3, 1, 2, 0, 3, 1, 2], [4, 2, 0, 3, 1, 2, 0, 3, 1, 2, 3], [4, 2, 0, 3, 1, 2, 0, 3, 1, 2, 0], [4, 2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 3]]
6 [2, 0, 3, 1, 2, 0, 1, 0] 0
[[2, 0, 3, 1, 2, 0, 1, 0], [2, 0, 3, 1, 2, 0, 1], [2, 0, 3, 1, 2, 0, 1, 0, 1], [2, 0, 3, 1, 2, 0, 1, 0, 1, 0], [2, 0, 3, 1, 2, 0, 1, 2, 0], [2, 0, 3, 1, 2, 0, 1, 2], [2, 0, 3, 1, 2, 0, 1, 2, 0, 1], [2, 0, 3, 1, 2, 0, 1, 2, 0, 1, 0], [2, 0, 3, 1, 2, 0, 3, 1, 0], [2, 0, 3, 1, 2, 0, 3, 1], [2, 0, 3, 1, 2, 0, 3, 1, 0, 1], [2, 0, 3, 1, 2, 0, 3, 1, 0, 1, 0], [2, 0, 3, 1, 2, 0, 3, 1, 2, 0], [2, 0, 3, 1, 2, 0, 3, 1, 2], [2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 1], [2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 1, 0], [4, 2, 0, 3, 1, 2, 0, 1, 0], [4, 2, 0, 3, 1, 2, 0, 1], [4, 2, 0, 3, 1, 2, 0, 1, 0, 1], [4, 2, 0, 3, 1, 2, 0, 1, 0, 1, 0], [4, 2, 0, 3, 1, 2, 0, 1, 2, 0], [4, 2, 0, 3, 1, 2, 0, 1, 2], [4, 2, 0, 3, 1, 2, 0, 1, 2, 0, 1], [4, 2, 0, 3, 1, 2, 0, 1, 2, 0, 1, 0], [4, 2, 0, 3, 1, 2, 0, 3, 1, 0], [4, 2, 0, 3, 1, 2, 0, 3, 1], [4, 2, 0, 3, 1, 2, 0, 3, 1, 0, 1], [4, 2, 0, 3, 1, 2, 0, 3, 1, 0, 1, 0], [4, 2, 0, 3, 1, 2, 0, 3, 1, 2, 0], [4, 2, 0, 3, 1, 2, 0, 3, 1, 2], [4, 2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 1], [4, 2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 1, 0]]
7 [2, 0, 3, 1, 2, 0, 1] 0
[[2, 0, 3, 1, 2, 0, 1], [2, 0, 3, 1, 2, 0], [2, 0, 3, 1, 2, 0, 1, 0], [2, 0, 3, 1, 2, 0, 1, 0, 1], [2, 0, 3, 1, 2, 0, 1, 2], [2, 0, 3, 1, 2, 0, 1, 2, 1], [2, 0, 3, 1, 2, 0, 1, 2, 0], [2, 0, 3, 1, 2, 0, 1, 2, 0, 1], [2, 0, 3, 1, 2, 0, 3, 1], [2, 0, 3, 1, 2, 0, 3], [2, 0, 3, 1, 2, 0, 3, 1, 0], [2, 0, 3, 1, 2, 0, 3, 1, 0, 1], [2, 0, 3, 1, 2, 0, 3, 1, 2], [2, 0, 3, 1, 2, 0, 3, 1, 2, 1], [2, 0, 3, 1, 2, 0, 3, 1, 2, 0], [2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 1], [4, 2, 0, 3, 1, 2, 0, 1], [4, 2, 0, 3, 1, 2, 0], [4, 2, 0, 3, 1, 2, 0, 1, 0], [4, 2, 0, 3, 1, 2, 0, 1, 0, 1], [4, 2, 0, 3, 1, 2, 0, 1, 2], [4, 2, 0, 3, 1, 2, 0, 1, 2, 1], [4, 2, 0, 3, 1, 2, 0, 1, 2, 0], [4, 2, 0, 3, 1, 2, 0, 1, 2, 0, 1], [4, 2, 0, 3, 1, 2, 0, 3, 1], [4, 2, 0, 3, 1, 2, 0, 3], [4, 2, 0, 3, 1, 2, 0, 3, 1, 0], [4, 2, 0, 3, 1, 2, 0, 3, 1, 0, 1], [4, 2, 0, 3, 1, 2, 0, 3, 1, 2], [4, 2, 0, 3, 1, 2, 0, 3, 1, 2, 1], [4, 2, 0, 3, 1, 2, 0, 3, 1, 2, 0], [4, 2, 0, 3, 1, 2, 0, 3, 1, 2, 0, 1]]
8 [2, 0, 3, 1, 2, 0] 0
[[2, 0, 3, 1, 2, 0], [2, 0, 3, 1, 2], [2, 0, 3, 1, 2, 0, 2], [2, 0, 3, 1, 2, 0, 2, 0], [2, 0, 3, 1, 2, 0, 1], [2, 0, 3, 1, 2, 0, 1, 0], [2, 0, 3, 1, 2, 0, 1, 2], [2, 0, 3, 1, 2, 0, 1, 2, 0], [2, 0, 3, 1, 2, 0, 3], [2, 0, 3, 1, 2, 0, 3, 0], [2, 0, 3, 1, 2, 0, 3, 2], [2, 0, 3, 1, 2, 0, 3, 2, 0], [2, 0, 3, 1, 2, 0, 3, 1], [2, 0, 3, 1, 2, 0, 3, 1, 0], [2, 0, 3, 1, 2, 0, 3, 1, 2], [2, 0, 3, 1, 2, 0, 3, 1, 2, 0], [4, 2, 0, 3, 1, 2, 0], [4, 2, 0, 3, 1, 2], [4, 2, 0, 3, 1, 2, 0, 2], [4, 2, 0, 3, 1, 2, 0, 2, 0], [4, 2, 0, 3, 1, 2, 0, 1], [4, 2, 0, 3, 1, 2, 0, 1, 0], [4, 2, 0, 3, 1, 2, 0, 1, 2], [4, 2, 0, 3, 1, 2, 0, 1, 2, 0], [4, 2, 0, 3, 1, 2, 0, 3], [4, 2, 0, 3, 1, 2, 0, 3, 0], [4, 2, 0, 3, 1, 2, 0, 3, 2], [4, 2, 0, 3, 1, 2, 0, 3, 2, 0], [4, 2, 0, 3, 1, 2, 0, 3, 1], [4, 2, 0, 3, 1, 2, 0, 3, 1, 0], [4, 2, 0, 3, 1, 2, 0, 3, 1, 2], [4, 2, 0, 3, 1, 2, 0, 3, 1, 2, 0]]
^C---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:1174, in Polyhedra_base._make_Line(self, polyhedron, data)
   1173 try:
-> 1174     obj = self._Line_pool.pop()
   1175 except IndexError:

IndexError: pop from empty list

During handling of the above exception, another exception occurred:

KeyboardInterrupt                         Traceback (most recent call last)
Cell In [1550], line 6
      4 for v in sortables(A,c[Integer(1):]):
      5     num+=Integer(1)
----> 6     d=p_lambda_int(B(A,c),lam(A,v),K(c,v)).dimension()
      7     print(num,v,d)
      8     print(K(c,v))

File ~/git/affine_dominance/software/domination5.py:15, in p_lambda_int(B, la, seqs)
     13 P = p_lambda(B, la, seqs[0])
     14 for s in seqs:
---> 15     P = P.intersection(p_lambda(B, la, s))
     16     if P.dimension()==0:
     17         break

File ~/git/affine_dominance/software/domination5.py:37, in p_lambda(B, la, seq)
     35 Em = E(B, k, -1)
     36 Hp = Polyhedron(ieqs=[(0,)*(k+1)+(1,)+(0,)*(m-k-1)])
---> 37 Hm = Polyhedron(ieqs=[(0,)*(k+1)+(-1,)+(0,)*(m-k-1)])
     38 #print("Hp:   ",Hp,Hp.vertices(),Hp.rays(),Hp.lines(),"\n")
     39 #print("Hm:   ",Hm,Hm.vertices(),Hm.rays(),Hm.lines(),"\n\n")
     40 Pp = P.intersection(Hp)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/constructor.py:768, in Polyhedron(vertices, rays, lines, ieqs, eqns, ambient_dim, base_ring, minimize, verbose, backend, mutable)
    766 if got_Vrep:
    767     Vrep = [vertices, rays, lines]
--> 768 return parent(Vrep, Hrep, convert=convert, verbose=verbose, mutable=mutable)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/parent.pyx:903, in sage.structure.parent.Parent.__call__ (build/cythonized/sage/structure/parent.c:12685)()
    901         return mor._call_(x)
    902     else:
--> 903         return mor._call_with_args(x, args, kwds)
    904 
    905 raise TypeError(_LazyString("No conversion defined from %s to %s", (R, self), {}))

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:177, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_with_args (build/cythonized/sage/structure/coerce_maps.c:7430)()
    175             return C._element_constructor(x, *args)
    176         else:
--> 177             return C._element_constructor(x, *args, **kwds)
    178 except Exception:
    179     if print_warnings:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:695, in Polyhedra_base._element_constructor_(self, *args, **kwds)
    693     if convert and Vrep:
    694         Vrep = [convert_base_ring(_) for _ in Vrep]
--> 695     return self.element_class(self, Vrep, Hrep, **kwds)
    696 if nargs == 1 and is_Polyhedron(args[0]):
    697     copy = kwds.pop('copy', args[0].parent() is not self)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:70, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
---> 70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:189, in Polyhedron_ppl.set_immutable(self)
    187 if not hasattr(self, '_Vrepresentation'):
    188     try:
--> 189         self._init_Vrepresentation_from_ppl(True)
    190     except TypeError as e:
    191         # Apparently the polyhedron is (no longer) integral.
    192         self._clear_cache()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:313, in Polyhedron_ppl._init_Vrepresentation_from_ppl(self, minimize)
    311     parent._make_Ray(self, coefficients)
    312 elif g.is_line():
--> 313     parent._make_Line(self, coefficients)
    314 else:
    315     assert False

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:1176, in Polyhedra_base._make_Line(self, polyhedron, data)
   1174     obj = self._Line_pool.pop()
   1175 except IndexError:
-> 1176     obj = Line(self)
   1177 obj._set_data(polyhedron, data)
   1178 return obj

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/representation.py:1145, in Vrepresentation.__init__(self, polyhedron_parent)
   1143 self._polyhedron_parent = polyhedron_parent
   1144 self._base_ring = polyhedron_parent.base_ring()
-> 1145 self._vector = polyhedron_parent.Vrepresentation_space()(0)
   1146 self._index = 0

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/parent.pyx:901, in sage.structure.parent.Parent.__call__ (build/cythonized/sage/structure/parent.c:12658)()
    899 if mor is not None:
    900     if no_extra_args:
--> 901         return mor._call_(x)
    902     else:
    903         return mor._call_with_args(x, args, kwds)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:158, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_ (build/cythonized/sage/structure/coerce_maps.c:6834)()
    156 cdef Parent C = self._codomain
    157 try:
--> 158     return C._element_constructor(x)
    159 except Exception:
    160     if print_warnings:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/modules/free_module.py:6380, in FreeModule_ambient_field._element_constructor_(self, e, *args, **kwds)
   6378 except AttributeError:
   6379     pass
-> 6380 return FreeModule_generic_field._element_constructor_(self, e, *args, **kwds)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/modules/free_module.py:2155, in FreeModule_generic._element_constructor_(self, x, coerce, copy, check)
   2111 r"""
   2112 Create an element of this free module from ``x``.
   2113 
   (...)
   2151     True
   2152 """
   2153 if (isinstance(x, (int, sage.rings.integer.Integer)) and
   2154     x == 0):
-> 2155     return self.zero_vector()
   2156 elif isinstance(x, free_module_element.FreeModuleElement):
   2157     if x.parent() is self:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/modules/free_module.py:1069, in Module_free_ambient.zero_vector(self)
   1051 """
   1052 Return the zero vector in this module.
   1053 
   (...)
   1064     (0, 0)
   1065 """
   1066 # Do *not* cache this -- it must be computed fresh each time, since
   1067 # it is used by __call__ to make a new copy of the 0 element.
-> 1069 return self.element_class(self, 0)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/modules/vector_rational_dense.pyx:141, in sage.modules.vector_rational_dense.Vector_rational_dense.__cinit__ (build/cythonized/sage/modules/vector_rational_dense.c:7951)()
    139         self._degree = 0
    140         return
--> 141     self._init(parent.degree(), <Parent?>parent)
    142 
    143 def __init__(self, parent, x, coerce=True, copy=True):

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/modules/vector_rational_dense.pyx:127, in sage.modules.vector_rational_dense.Vector_rational_dense._init (build/cythonized/sage/modules/vector_rational_dense.c:7632)()
    125 cdef mpq_t* entries = <mpq_t*>check_allocarray(degree, sizeof(mpq_t))
    126 cdef Py_ssize_t i
--> 127 sig_on()
    128 for i in range(degree):
    129     mpq_init(entries[i])

KeyboardInterrupt: 
sage: A=CartanMatrix(['C',5])
....: c=[4,2,0,3,1]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),K(c,v)).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [2, 0, 3, 1, 2, 0, 3, 1, 2, 0] 0
2 [2, 0, 3, 1, 2, 0, 3, 1, 2] 0
3 [2, 0, 3, 1, 2, 0, 3, 1, 0] 0
4 [2, 0, 3, 1, 2, 0, 3, 1] 0
5 [2, 0, 3, 1, 2, 0, 3] 0
6 [2, 0, 3, 1, 2, 0, 1, 0] 0
7 [2, 0, 3, 1, 2, 0, 1] 0
8 [2, 0, 3, 1, 2, 0] 0
9 [2, 0, 3, 1, 2, 3, 1] 0
10 [2, 0, 3, 1, 2, 3] 0
11 [2, 0, 3, 1, 2, 1] 0
12 [2, 0, 3, 1, 2] 0
13 [2, 0, 3, 1, 0] 0
14 [2, 0, 3, 1] 0
15 [2, 0, 3, 2] 0
16 [2, 0, 3] 0
17 [2, 0, 1, 2, 0, 1] 0
18 [2, 0, 1, 2, 0] 0
19 [2, 0, 1, 2] 0
20 [2, 0, 1, 0] 0
21 [2, 0, 1] 0
22 [2, 0] 0
23 [2, 3, 1, 2, 3, 1] 0
24 [2, 3, 1, 2, 3] 0
25 [2, 3, 1, 2, 1] 0
26 [2, 3, 1, 2] 0
27 [2, 3, 1] 0
28 [2, 3, 2] 0
29 [2, 3] 0
30 [2, 1, 2] 0
31 [2, 1] 0
32 [2] 0
33 [0, 3, 1, 0] 0
34 [0, 3, 1] 0
35 [0, 3] 0
36 [0, 1, 0] 0
37 [0, 1] 0
38 [0] 0
39 [3, 1] 0
40 [3] 0
41 [1] 0
42 [] 0
sage: A=CartanMatrix(['C',3])
....: c=[2,0,1]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),K(c,v)).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [0, 1, 0] 0
2 [0, 1] 0
3 [0] 0
4 [1] 0
5 [] 0
sage: A=CartanMatrix(['C',3])
....: c=[2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),K(c,v)).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [1, 0, 1] 0
2 [1, 0] 2
Failure!
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),K(c,v)).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [1, 2, 1, 2] 0
2 [1, 2, 1] 0
3 [1, 2] 0
4 [1] 0
5 [2] 0
6 [] 0
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),K(c,v)).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [2, 1, 2, 1] 0
2 [2, 1, 2] 0
3 [2, 1] 0
4 [2] 1
Failure!
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v)).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [2, 1, 2, 1] 0
2 [2, 1, 2] 1
Failure!
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v)).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [1, 2, 1, 2] 0
2 [1, 2, 1] 0
3 [1, 2] 1
Failure!
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v)).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [2, 1, 2, 1] 0
2 [2, 1, 2] 1
Failure!
sage: A=CartanMatrix(['C',3])
....: c=[1,2,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v)).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [2, 0] 0
2 [2] 0
3 [0] 0
4 [] 0
sage: A=CartanMatrix(['C',3])
....: c=[1,0,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v)).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [0, 2] 0
2 [0] 0
3 [2] 0
4 [] 0
sage: A=CartanMatrix(['C',3])
....: c=[2,0,1]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v)).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [0, 1, 0] 1
Failure!
sage: A=CartanMatrix(['C',3])
....: c=[1,0,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v)).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [0, 2] 0
2 [0] 0
3 [2] 0
4 [] 0
sage: A=CartanMatrix(['C',4])
....: c=[1,3,0,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v)).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [3, 0, 2, 3, 2] 0
2 [3, 0, 2, 3] 0
3 [3, 0, 2] 0
4 [3, 0] 1
Failure!
sage: A=CartanMatrix(['C',4])
....: c=[1,3,2,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v)).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [3, 2, 0, 3, 2] 0
2 [3, 2, 0, 3] 0
3 [3, 2, 0] 0
4 [3, 2, 3, 2] 0
5 [3, 2, 3] 0
6 [3, 2] 0
7 [3, 0] 1
Failure!
sage: A=CartanMatrix(['C',4])
....: c=[3,1,2,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v)).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [1, 2, 0, 1, 2, 0] 0
2 [1, 2, 0, 1, 2] 1
Failure!
sage: A=CartanMatrix(['C',4])
....: c=[3,1,2,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),K(c,v)).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [1, 2, 0, 1, 2, 0] 0
2 [1, 2, 0, 1, 2] 0
3 [1, 2, 0, 1, 0] 0
4 [1, 2, 0, 1] 0
5 [1, 2, 0] 0
6 [1, 2, 1] 0
7 [1, 2] 0
8 [1, 0, 1] 0
9 [1, 0] 0
10 [1] 0
11 [2, 0] 0
12 [2] 0
13 [0] 0
14 [] 0
sage: A=CartanMatrix(['C',5])
....: c=[4,2,0,3,1]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),K(c,v)).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [2, 0, 3, 1, 2, 0, 3, 1, 2, 0] 0
2 [2, 0, 3, 1, 2, 0, 3, 1, 2] 0
3 [2, 0, 3, 1, 2, 0, 3, 1, 0] 0
4 [2, 0, 3, 1, 2, 0, 3, 1] 0
5 [2, 0, 3, 1, 2, 0, 3] 0
6 [2, 0, 3, 1, 2, 0, 1, 0] 0
7 [2, 0, 3, 1, 2, 0, 1] 0
8 [2, 0, 3, 1, 2, 0] 0
9 [2, 0, 3, 1, 2, 3, 1] 0
10 [2, 0, 3, 1, 2, 3] 0
11 [2, 0, 3, 1, 2, 1] 0
12 [2, 0, 3, 1, 2] 0
13 [2, 0, 3, 1, 0] 0
14 [2, 0, 3, 1] 0
15 [2, 0, 3, 2] 0
16 [2, 0, 3] 0
17 [2, 0, 1, 2, 0, 1] 0
18 [2, 0, 1, 2, 0] 0
19 [2, 0, 1, 2] 0
20 [2, 0, 1, 0] 0
21 [2, 0, 1] 0
22 [2, 0] 0
23 [2, 3, 1, 2, 3, 1] 0
24 [2, 3, 1, 2, 3] 0
25 [2, 3, 1, 2, 1] 0
26 [2, 3, 1, 2] 0
27 [2, 3, 1] 0
28 [2, 3, 2] 0
29 [2, 3] 0
30 [2, 1, 2] 0
31 [2, 1] 0
32 [2] 0
33 [0, 3, 1, 0] 0
34 [0, 3, 1] 0
35 [0, 3] 0
36 [0, 1, 0] 0
37 [0, 1] 0
38 [0] 0
39 [3, 1] 0
40 [3] 0
41 [1] 0
42 [] 0
sage: A=CartanMatrix(['C',6])
....: c=[5,3,1,4,2,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),K(c,v)).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0] 0
2 [3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 2] 0
3 [3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4, 0] 0
4 [3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 4] 0
5 [3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 2, 0] 0
6 [3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 2] 0
7 [3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 0] 0
8 [3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1] 0
9 [3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 4] 0
10 [3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3] 0
11 [3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 1, 0] 0
12 [3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 1] 0
13 [3, 1, 4, 2, 0, 3, 1, 4, 2, 0] 0
14 [3, 1, 4, 2, 0, 3, 1, 4, 2, 3, 1, 4] 0
15 [3, 1, 4, 2, 0, 3, 1, 4, 2, 3, 1] 0
16 [3, 1, 4, 2, 0, 3, 1, 4, 2, 3, 4] 0
17 [3, 1, 4, 2, 0, 3, 1, 4, 2, 3] 0
18 [3, 1, 4, 2, 0, 3, 1, 4, 2, 1] 0
19 [3, 1, 4, 2, 0, 3, 1, 4, 2] 0
20 [3, 1, 4, 2, 0, 3, 1, 4, 0] 0
21 [3, 1, 4, 2, 0, 3, 1, 4] 0
22 [3, 1, 4, 2, 0, 3, 1, 2, 0, 3, 1, 0] 0
23 [3, 1, 4, 2, 0, 3, 1, 2, 0, 3, 1] 0
24 [3, 1, 4, 2, 0, 3, 1, 2, 0, 3] 0
25 [3, 1, 4, 2, 0, 3, 1, 2, 0, 1, 0] 0
26 [3, 1, 4, 2, 0, 3, 1, 2, 0, 1] 0
27 [3, 1, 4, 2, 0, 3, 1, 2, 0] 0
28 [3, 1, 4, 2, 0, 3, 1, 2, 3, 1] 0
29 [3, 1, 4, 2, 0, 3, 1, 2, 3] 0
30 [3, 1, 4, 2, 0, 3, 1, 2, 1] 0
31 [3, 1, 4, 2, 0, 3, 1, 2] 0
32 [3, 1, 4, 2, 0, 3, 1, 0] 0
33 [3, 1, 4, 2, 0, 3, 1] 0
34 [3, 1, 4, 2, 0, 3, 4, 2] 0
35 [3, 1, 4, 2, 0, 3, 4] 0
36 [3, 1, 4, 2, 0, 3, 2] 0
37 [3, 1, 4, 2, 0, 3] 0
38 [3, 1, 4, 2, 0, 1, 2, 0] 0
39 [3, 1, 4, 2, 0, 1, 2] 0
40 [3, 1, 4, 2, 0, 1, 0] 0
41 [3, 1, 4, 2, 0, 1] 0
42 [3, 1, 4, 2, 0] 0
43 [3, 1, 4, 2, 3, 1, 4, 2, 3, 1] 0
44 [3, 1, 4, 2, 3, 1, 4, 2, 3] 0
45 [3, 1, 4, 2, 3, 1, 4, 2, 1] 0
46 [3, 1, 4, 2, 3, 1, 4, 2] 0
47 [3, 1, 4, 2, 3, 1, 4] 0
48 [3, 1, 4, 2, 3, 1, 2, 1] 0
49 [3, 1, 4, 2, 3, 1, 2] 0
50 [3, 1, 4, 2, 3, 1] 0
51 [3, 1, 4, 2, 3, 4, 2] 0
52 [3, 1, 4, 2, 3, 4] 0
53 [3, 1, 4, 2, 3, 2] 0
54 [3, 1, 4, 2, 3] 0
55 [3, 1, 4, 2, 1] 0
56 [3, 1, 4, 2] 0
57 [3, 1, 4, 0, 3, 1] 0
58 [3, 1, 4, 0, 3] 0
59 [3, 1, 4, 0, 1] 0
60 [3, 1, 4, 0] 0
61 [3, 1, 4, 3] 0
62 [3, 1, 4] 0
63 [3, 1, 2, 0, 3, 1, 2, 0, 3, 1] 0
64 [3, 1, 2, 0, 3, 1, 2, 0, 3] 0
65 [3, 1, 2, 0, 3, 1, 2, 0, 1] 0
66 [3, 1, 2, 0, 3, 1, 2, 0] 0
67 [3, 1, 2, 0, 3, 1, 2, 3] 0
68 [3, 1, 2, 0, 3, 1, 2] 0
69 [3, 1, 2, 0, 3, 1, 0] 0
70 [3, 1, 2, 0, 3, 1] 0
71 [3, 1, 2, 0, 3] 0
72 [3, 1, 2, 0, 1, 2, 0] 0
73 [3, 1, 2, 0, 1, 2] 0
74 [3, 1, 2, 0, 1, 0] 0
75 [3, 1, 2, 0, 1] 0
76 [3, 1, 2, 0] 0
77 [3, 1, 2, 3, 1, 2] 0
78 [3, 1, 2, 3, 1] 0
79 [3, 1, 2, 3] 0
80 [3, 1, 2, 1] 0
81 [3, 1, 2] 0
82 [3, 1, 0, 1] 0
83 [3, 1, 0] 0
84 [3, 1] 0
85 [3, 4, 2, 0, 3, 4, 2] 0
86 [3, 4, 2, 0, 3, 4] 0
87 [3, 4, 2, 0, 3, 2] 0
88 [3, 4, 2, 0, 3] 0
89 [3, 4, 2, 0] 0
90 [3, 4, 2, 3, 4, 2] 0
91 [3, 4, 2, 3, 4] 0
92 [3, 4, 2, 3, 2] 0
93 [3, 4, 2, 3] 0
94 [3, 4, 2] 0
95 [3, 4, 0, 3] 0
96 [3, 4, 0] 0
97 [3, 4, 3] 0
98 [3, 4] 0
99 [3, 2, 0, 3] 0
100 [3, 2, 0] 0
101 [3, 2, 3] 0
102 [3, 2] 0
103 [3, 0] 0
104 [3] 0
105 [1, 4, 2, 0, 1, 2, 0] 0
106 [1, 4, 2, 0, 1, 2] 0
107 [1, 4, 2, 0, 1, 0] 0
108 [1, 4, 2, 0, 1] 0
109 [1, 4, 2, 0] 0
110 [1, 4, 2, 1] 0
111 [1, 4, 2] 0
112 [1, 4, 0, 1] 0
113 [1, 4, 0] 0
114 [1, 4] 0
115 [1, 2, 0, 1, 2, 0] 0
116 [1, 2, 0, 1, 2] 0
117 [1, 2, 0, 1, 0] 0
118 [1, 2, 0, 1] 0
119 [1, 2, 0] 0
120 [1, 2, 1] 0
121 [1, 2] 0
122 [1, 0, 1] 0
123 [1, 0] 0
124 [1] 0
125 [4, 2, 0] 0
126 [4, 2] 0
127 [4, 0] 0
128 [4] 0
129 [2, 0] 0
130 [2] 0
131 [0] 0
132 [] 0
sage: A=CartanMatrix(['C',7])
....: c=[6,4,2,0,5,3,1]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),K(c,v)).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 4, 2, 0] 0
2 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 4, 2] 0
3 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 4, 0] 0
4 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 4] 0
5 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 2, 0] 0
6 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 2] 0
7 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 0] 0
8 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1] 0
9 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 4] 0
10 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3] 0
11 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 1, 0] 0
12 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 1] 0
13 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 4, 2, 0, 5] 0
14 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 4, 2, 0, 3, 1, 2, 0] 0
15 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 4, 2, 0, 3, 1, 2] 0
16 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 4, 2, 0, 3, 1, 0] 0
17 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 4, 2, 0, 3, 1] 0
18 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 4, 2, 0, 3] 0
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [1569], line 6
      4 for v in sortables(A,c[Integer(1):]):
      5     num+=Integer(1)
----> 6     d=p_lambda_int(B(A,c),lam(A,v),K(c,v)).dimension()
      7     print(num,v,d)
      8     if d!=Integer(0):

File ~/git/affine_dominance/software/domination5.py:15, in p_lambda_int(B, la, seqs)
     13 P = p_lambda(B, la, seqs[0])
     14 for s in seqs:
---> 15     P = P.intersection(p_lambda(B, la, s))
     16     if P.dimension()==0:
     17         break

File ~/git/affine_dominance/software/domination5.py:49, in p_lambda(B, la, seq)
     45         P=Ep*Pp
     46     else:
     47         #print("Pp:   ",Pp,Pp.vertices(),Pp.rays(),Pp.lines(),"\n")
     48         #print("Pm:   ",Pm,Pm.vertices(),Pm.rays(),Pm.lines(),"\n\n")
---> 49         P=(Ep*Pp).convex_hull(Em*Pm)
     50     B.mutate(k)
     51 return P

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1312, in Polyhedron_base5.convex_hull(self, other)
   1310 hull_rays = self.rays() + other.rays()
   1311 hull_lines = self.lines() + other.lines()
-> 1312 return self.parent().element_class(self.parent(), [hull_vertices, hull_rays, hull_lines], None)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:174, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    171     lines = tuple(lines)
    173 if vertices or rays or lines:
--> 174     self._init_from_Vrepresentation(vertices, rays, lines, **kwds)
    175 else:
    176     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:99, in Polyhedron_ppl._init_from_Vrepresentation(self, vertices, rays, lines, minimize, verbose)
     72 def _init_from_Vrepresentation(self, vertices, rays, lines, minimize=True, verbose=False):
     73     """
     74     Construct polyhedron from V-representation data.
     75 
   (...)
     97         sage: Polyhedron_ppl._init_from_Vrepresentation(p, [], [], [])
     98     """
---> 99     gs = self._convert_generators_to_ppl(vertices, rays, lines)
    100     if gs.empty():
    101         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'empty')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:477, in Polyhedron_ppl._convert_generators_to_ppl(vertices, rays, lines)
    475     rays = []
    476 for r in rays:
--> 477     gs.insert(Polyhedron_ppl._convert_generator_to_ppl(r, RAY))
    478 if lines is None:
    479     lines = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:442, in Polyhedron_ppl._convert_generator_to_ppl(v, typ)
    440 d = LCM_list([denominator(v_i) for v_i in v])
    441 if d.is_one():
--> 442     return ob(Linear_Expression(v, 0))
    443 else:
    444     dv = [ d*v_i for v_i in v ]

File ppl/linear_algebra.pyx:653, in ppl.linear_algebra.Linear_Expression.__init__()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/representation.py:81, in PolyhedronRepresentation.__getitem__(self, i)
     69     """
     70     Return the length of the representation data.
     71 
   (...)
     77         3
     78     """
     79     return self._vector.degree()
---> 81 def __getitem__(self, i):
     82     """
     83     Supports indexing.
     84 
   (...)
     90         2
     91     """
     92     return self._vector[i]

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['C',3])
....: c=[1,0,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v)).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
....: 
1 [0, 2] 0
2 [0] 0
3 [2] 0
4 [] 0
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v)).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [1, 2, 1, 2] 0
2 [1, 2, 1] 0
3 [1, 2] 1
Failure!
sage: A=CartanMatrix(['C',4])
....: c=[1,0,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v)).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
Cell In [1572], line 6
      4 for v in sortables(A,c[Integer(1):]):
      5     num+=Integer(1)
----> 6     d=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v)).dimension()
      7     print(num,v,d)
      8     if d!=Integer(0):

File ~/git/affine_dominance/software/domination5.py:89, in B(A, c)
     87     out[i,i]=0
     88     for j in range(i+1,n):
---> 89         out[c[i],c[j]]=-A[c[i],c[j]]
     90         out[c[j],c[i]]=A[c[j],c[i]]
     91 return out

IndexError: list index out of range
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v)).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [1, 2, 3, 1, 2, 3, 1, 2, 3] 0
2 [1, 2, 3, 1, 2, 3, 1, 2] 0
3 [1, 2, 3, 1, 2, 3, 1] 0
4 [1, 2, 3, 1, 2, 3] 0
5 [1, 2, 3, 1, 2, 1] 0
6 [1, 2, 3, 1, 2] 0
7 [1, 2, 3, 1] 1
Failure!
sage: A=CartanMatrix(['C',4])
....: c=[3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),Kbackwards(c,v)).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [2, 1, 0, 2, 1, 2] 0
2 [2, 1, 0, 2, 1] 0
3 [2, 1, 0, 2] 0
4 [2, 1, 0, 1] 2
Failure!
sage: A=CartanMatrix(['C',4])
....: c=[3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),K(c,v)).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [2, 1, 0, 2, 1, 2] 0
2 [2, 1, 0, 2, 1] 0
3 [2, 1, 0, 2] 0
4 [2, 1, 0, 1] 0
5 [2, 1, 0] 0
6 [2, 1, 2] 0
7 [2, 1] 0
8 [2, 0] 0
9 [2] 0
10 [1, 0, 1] 0
11 [1, 0] 0
12 [1] 0
13 [0] 0
14 [] 0
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),K(c,v)).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [1, 2, 3, 1, 2, 3, 1, 2, 3] 0
2 [1, 2, 3, 1, 2, 3, 1, 2] 0
3 [1, 2, 3, 1, 2, 3, 1] 0
4 [1, 2, 3, 1, 2, 3] 0
5 [1, 2, 3, 1, 2, 1] 0
6 [1, 2, 3, 1, 2] 0
7 [1, 2, 3, 1] 0
8 [1, 2, 3, 2, 3] 0
9 [1, 2, 3, 2] 0
10 [1, 2, 3] 0
11 [1, 2, 1] 0
12 [1, 2] 0
13 [1, 3] 0
14 [1] 0
15 [2, 3, 2, 3] 0
16 [2, 3, 2] 0
17 [2, 3] 0
18 [2] 0
19 [3] 0
20 [] 0
sage: A=CartanMatrix(['C',4])
....: c=[0,2,1,3]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),K(c,v)).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [2, 1, 3, 2, 1, 3, 2, 1, 3] 0
2 [2, 1, 3, 2, 1, 3, 2, 1] 0
3 [2, 1, 3, 2, 1, 3, 2, 3] 0
4 [2, 1, 3, 2, 1, 3, 2] 0
5 [2, 1, 3, 2, 1, 3] 0
6 [2, 1, 3, 2, 1] 0
7 [2, 1, 3, 2, 3, 2] 0
8 [2, 1, 3, 2, 3] 0
9 [2, 1, 3, 2] 0
10 [2, 1, 3] 0
11 [2, 1, 2] 0
12 [2, 1] 0
13 [2, 3, 2, 3] 0
14 [2, 3, 2] 0
15 [2, 3] 0
16 [2] 0
17 [1, 3] 0
18 [1] 0
19 [3] 0
20 [] 0
sage: A=CartanMatrix(['C',4])
....: c=[1,3,0,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),K(c,v)).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [3, 0, 2, 3, 2] 0
2 [3, 0, 2, 3] 0
3 [3, 0, 2] 0
4 [3, 0] 0
5 [3, 2, 3, 2] 0
6 [3, 2, 3] 0
7 [3, 2] 0
8 [3] 0
9 [0, 2] 0
10 [0] 0
11 [2] 0
12 [] 0
sage: A=CartanMatrix(['A',3])
....: c=[0,2,1]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),K(c,v)).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [2, 1, 2] 0
2 [2, 1] 0
3 [2] 0
4 [1] 0
5 [] 0
sage: A=CartanMatrix(['A',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),K(c,v)).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [1, 2, 1] 0
2 [1, 2] 1
Failure!
sage: A=CartanMatrix(['B',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),K(c,v)).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [1, 2, 1, 2] 0
2 [1, 2, 1] 0
3 [1, 2] 0
4 [1] 0
5 [2] 0
6 [] 0
sage: A=CartanMatrix(['A',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),K(c,v)).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [1, 2, 1] 0
2 [1, 2] 1
Failure!
sage: A=CartanMatrix(['A',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),[v,inv_sortable(A,c,v)]).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
....: 
1 [1, 2, 1] 0
2 [1, 2] 1
Failure!
sage: A=CartanMatrix(['A',4])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),[v,inv_sortable(A,c,v)]).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
Cell In [1584], line 6
      4 for v in sortables(A,c[Integer(1):]):
      5     num+=Integer(1)
----> 6     d=p_lambda_int(B(A,c),lam(A,v),[v,inv_sortable(A,c,v)]).dimension()
      7     print(num,v,d)
      8     if d!=Integer(0):

File ~/git/affine_dominance/software/domination5.py:89, in B(A, c)
     87     out[i,i]=0
     88     for j in range(i+1,n):
---> 89         out[c[i],c[j]]=-A[c[i],c[j]]
     90         out[c[j],c[i]]=A[c[j],c[i]]
     91 return out

IndexError: list index out of range
sage: A=CartanMatrix(['A',4])
....: c=[0,1,2,3]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),[v,inv_sortable(A,c,v)]).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [1, 2, 3, 1, 2, 1] 0
2 [1, 2, 3, 1, 2] 2
Failure!
sage: A=CartanMatrix(['A',4])
....: c=[0,2,1,3]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),[v,inv_sortable(A,c,v)]).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [2, 1, 3, 2, 1, 3] 3
Failure!
sage: A=CartanMatrix(['A',4])
....: c=[0,2,1,3]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),[list(reversed(v)),list(reversed(inv_so
....: rtable(A,c,v)))]).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [2, 1, 3, 2, 1, 3] 0
2 [2, 1, 3, 2, 1] 0
3 [2, 1, 3, 2, 3] 0
4 [2, 1, 3, 2] 0
5 [2, 1, 3] 0
6 [2, 1, 2] 0
7 [2, 1] 0
8 [2, 3, 2] 0
9 [2, 3] 0
10 [2] 0
11 [1, 3] 0
12 [1] 0
13 [3] 0
14 [] 0
sage: A=CartanMatrix(['A',3])
....: c=[0,2,1]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),[list(reversed(v)),list(reversed(inv_so
....: rtable(A,c,v)))]).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [2, 1, 2] 1
Failure!
sage: A=CartanMatrix(['A',4])
....: c=[0,1,2,3]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),[list(reversed(v)),list(reversed(inv_so
....: rtable(A,c,v)))]).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [1, 2, 3, 1, 2, 1] 0
2 [1, 2, 3, 1, 2] 0
3 [1, 2, 3, 1] 0
4 [1, 2, 3, 2] 0
5 [1, 2, 3] 0
6 [1, 2, 1] 0
7 [1, 2] 0
8 [1, 3] 0
9 [1] 0
10 [2, 3, 2] 0
11 [2, 3] 0
12 [2] 0
13 [3] 0
14 [] 0
sage: A=CartanMatrix(['A',4])
....: c=[0,1,2,3]
....: num=0
....: for v in sortables(A,c):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),[list(reversed(v)),list(reversed(inv_so
....: rtable(A,c,v)))]).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [0, 1, 2, 3, 0, 1, 2, 0, 1, 0] 0
2 [0, 1, 2, 3, 0, 1, 2, 0, 1] 0
3 [0, 1, 2, 3, 0, 1, 2, 0] 0
4 [0, 1, 2, 3, 0, 1, 2, 1] 0
5 [0, 1, 2, 3, 0, 1, 2] 0
6 [0, 1, 2, 3, 0, 1, 0] 0
7 [0, 1, 2, 3, 0, 1] 0
8 [0, 1, 2, 3, 0, 2] 0
9 [0, 1, 2, 3, 0] 0
10 [0, 1, 2, 3, 1, 2, 1] 0
11 [0, 1, 2, 3, 1, 2] 0
12 [0, 1, 2, 3, 1] 0
13 [0, 1, 2, 3, 2] 0
14 [0, 1, 2, 3] 0
15 [0, 1, 2, 0, 1, 0] 0
16 [0, 1, 2, 0, 1] 0
17 [0, 1, 2, 0] 0
18 [0, 1, 2, 1] 0
19 [0, 1, 2] 0
20 [0, 1, 3, 0] 0
21 [0, 1, 3] 0
22 [0, 1, 0] 0
23 [0, 1] 0
24 [0, 2, 3, 2] 0
25 [0, 2, 3] 0
26 [0, 2] 0
27 [0, 3] 0
28 [0] 0
29 [1, 2, 3, 1, 2, 1] 0
30 [1, 2, 3, 1, 2] 0
31 [1, 2, 3, 1] 0
32 [1, 2, 3, 2] 0
33 [1, 2, 3] 0
34 [1, 2, 1] 0
35 [1, 2] 0
36 [1, 3] 0
37 [1] 0
38 [2, 3, 2] 0
39 [2, 3] 0
40 [2] 0
41 [3] 0
42 [] 0
sage: A=CartanMatrix(['A',4])
....: c=[0,1,2,3]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),[list(reversed(v)),list(reversed(inv_so
....: rtable(A,c,v)))]).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [1, 2, 3, 1, 2, 1] 0
2 [1, 2, 3, 1, 2] 0
3 [1, 2, 3, 1] 0
4 [1, 2, 3, 2] 0
5 [1, 2, 3] 0
6 [1, 2, 1] 0
7 [1, 2] 0
8 [1, 3] 0
9 [1] 0
10 [2, 3, 2] 0
11 [2, 3] 0
12 [2] 0
13 [3] 0
14 [] 0
sage: A=CartanMatrix(['A',4])
....: c=[0,1,2,3]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),[list(reversed(v)),list(reversed(inv_so
....: rtable(A,c[1:],v)))]).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [1, 2, 3, 1, 2, 1] 1
Failure!
sage: A=CartanMatrix(['A',3])
....: c=[0,1,2,3]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),[list(reversed(v)),list(reversed(inv_so
....: rtable(A,c[1:],v)))]).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
Cell In [1593], line 4
      2 c=[Integer(0),Integer(1),Integer(2),Integer(3)]
      3 num=Integer(0)
----> 4 for v in sortables(A,c[Integer(1):]):
      5     num+=Integer(1)
      6     d=p_lambda_int(B(A,c),lam(A,v),[list(reversed(v)),list(reversed(inv_sortable(A,c[Integer(1):],v)))]).dimension()

File ~/git/affine_dominance/software/domination5.py:261, in sortables(A, c)
    260 def sortables(A,c):
--> 261     yield from sortables_remaining(A,c,[],vector([1]*A.nrows()))

File ~/git/affine_dominance/software/domination5.py:268, in sortables_remaining(A, c, sort, vec)
    266 else:
    267     if vec[c[0]]>0:
--> 268         yield from sortables_remaining(A,c[1:]+[c[0]],sort+[c[0]],reflect_once(A,vec,c[0]))
    269     yield from sortables_remaining(A,c[1:],sort,vec)

File ~/git/affine_dominance/software/domination5.py:268, in sortables_remaining(A, c, sort, vec)
    266 else:
    267     if vec[c[0]]>0:
--> 268         yield from sortables_remaining(A,c[1:]+[c[0]],sort+[c[0]],reflect_once(A,vec,c[0]))
    269     yield from sortables_remaining(A,c[1:],sort,vec)

File ~/git/affine_dominance/software/domination5.py:267, in sortables_remaining(A, c, sort, vec)
    265     yield sort
    266 else:
--> 267     if vec[c[0]]>0:
    268         yield from sortables_remaining(A,c[1:]+[c[0]],sort+[c[0]],reflect_once(A,vec,c[0]))
    269     yield from sortables_remaining(A,c[1:],sort,vec)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/modules/free_module_element.pyx:1842, in sage.modules.free_module_element.FreeModuleElement.__getitem__ (build/cythonized/sage/modules/free_module_element.c:19571)()
   1840     n += d
   1841 if n < 0 or n >= d:
-> 1842     raise IndexError("vector index out of range")
   1843 return self.get_unsafe(n)
   1844 

IndexError: vector index out of range
sage: A=CartanMatrix(['A',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),[list(reversed(v)),list(reversed(inv_so
....: rtable(A,c[1:],v)))]).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [1, 2, 1] 1
Failure!
sage: A=CartanMatrix(['A',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v)),
....:     kinv=list(reversed(inv_sortable(A,c[1:],v))
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,kinv]).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
  Cell In [1595], line 7
    kinv=list(reversed(inv_sortable(A,c[Integer(1):],v))
             ^
SyntaxError: '(' was never closed

sage: A=CartanMatrix(['A',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v)),
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,kinv]).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In [1596], line 8
      6 k=list(reversed(v)),
      7 kinv=list(reversed(inv_sortable(A,c[Integer(1):],v)))
----> 8 d=p_lambda_int(B(A,c),lam(A,v),[k,kinv]).dimension()
      9 print(num,v,d)
     10 if d!=Integer(0):

File ~/git/affine_dominance/software/domination5.py:13, in p_lambda_int(B, la, seqs)
     12 def p_lambda_int(B, la, seqs):
---> 13     P = p_lambda(B, la, seqs[0])
     14     for s in seqs:
     15         P = P.intersection(p_lambda(B, la, s))

File ~/git/affine_dominance/software/domination5.py:27, in p_lambda(B, la, seq)
     25     B = block_matrix([[B,matrix(la).transpose()]])
     26     for k in reversed(seq):
---> 27         B.mutate(k)
     28     B, la  = B[:,:-1], B[:,-1] 
     29 # changed this to allow for zero columns
     30 #    P = Polyhedron(rays=B.columns(),base_ring=QQ).translation(la)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/matrix0.pyx:3589, in sage.matrix.matrix0.Matrix.mutate (build/cythonized/sage/matrix/matrix0.c:33615)()
   3587 ###################################################
   3588 
-> 3589 def mutate(self, Py_ssize_t k ):
   3590     """
   3591     Mutates ``self`` at row and column index ``k``.

TypeError: 'list' object cannot be interpreted as an integer
sage: A=CartanMatrix(['A',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v)),
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     print(k,kinv)
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,kinv]).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
([1, 2, 1],) []
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In [1597], line 9
      7 kinv=list(reversed(inv_sortable(A,c[Integer(1):],v)))
      8 print(k,kinv)
----> 9 d=p_lambda_int(B(A,c),lam(A,v),[k,kinv]).dimension()
     10 print(num,v,d)
     11 if d!=Integer(0):

File ~/git/affine_dominance/software/domination5.py:13, in p_lambda_int(B, la, seqs)
     12 def p_lambda_int(B, la, seqs):
---> 13     P = p_lambda(B, la, seqs[0])
     14     for s in seqs:
     15         P = P.intersection(p_lambda(B, la, s))

File ~/git/affine_dominance/software/domination5.py:27, in p_lambda(B, la, seq)
     25     B = block_matrix([[B,matrix(la).transpose()]])
     26     for k in reversed(seq):
---> 27         B.mutate(k)
     28     B, la  = B[:,:-1], B[:,-1] 
     29 # changed this to allow for zero columns
     30 #    P = Polyhedron(rays=B.columns(),base_ring=QQ).translation(la)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/matrix0.pyx:3589, in sage.matrix.matrix0.Matrix.mutate (build/cythonized/sage/matrix/matrix0.c:33615)()
   3587 ###################################################
   3588 
-> 3589 def mutate(self, Py_ssize_t k ):
   3590     """
   3591     Mutates ``self`` at row and column index ``k``.

TypeError: 'list' object cannot be interpreted as an integer
sage: A=CartanMatrix(['A',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v)),
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     print(v,k,kinv)
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,kinv]).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
[1, 2, 1] ([1, 2, 1],) []
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In [1598], line 9
      7 kinv=list(reversed(inv_sortable(A,c[Integer(1):],v)))
      8 print(v,k,kinv)
----> 9 d=p_lambda_int(B(A,c),lam(A,v),[k,kinv]).dimension()
     10 print(num,v,d)
     11 if d!=Integer(0):

File ~/git/affine_dominance/software/domination5.py:13, in p_lambda_int(B, la, seqs)
     12 def p_lambda_int(B, la, seqs):
---> 13     P = p_lambda(B, la, seqs[0])
     14     for s in seqs:
     15         P = P.intersection(p_lambda(B, la, s))

File ~/git/affine_dominance/software/domination5.py:27, in p_lambda(B, la, seq)
     25     B = block_matrix([[B,matrix(la).transpose()]])
     26     for k in reversed(seq):
---> 27         B.mutate(k)
     28     B, la  = B[:,:-1], B[:,-1] 
     29 # changed this to allow for zero columns
     30 #    P = Polyhedron(rays=B.columns(),base_ring=QQ).translation(la)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/matrix0.pyx:3589, in sage.matrix.matrix0.Matrix.mutate (build/cythonized/sage/matrix/matrix0.c:33615)()
   3587 ###################################################
   3588 
-> 3589 def mutate(self, Py_ssize_t k ):
   3590     """
   3591     Mutates ``self`` at row and column index ``k``.

TypeError: 'list' object cannot be interpreted as an integer
sage: A=CartanMatrix(['A',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     print(v,k,kinv)
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,kinv]).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
[1, 2, 1] [1, 2, 1] []
1 [1, 2, 1] 1
Failure!
sage: A=CartanMatrix(['A',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     print(v,k,kinv)
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,kinv,[c[0]]+k]).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
[1, 2, 1] [1, 2, 1] []
1 [1, 2, 1] 1
Failure!
sage: A=CartanMatrix(['A',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     print(v,k,kinv)
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,kinv,[c[0]]+k,c[0]+kinv]).dimension(
....: )
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
[1, 2, 1] [1, 2, 1] []
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In [1601], line 9
      7 kinv=list(reversed(inv_sortable(A,c[Integer(1):],v)))
      8 print(v,k,kinv)
----> 9 d=p_lambda_int(B(A,c),lam(A,v),[k,kinv,[c[Integer(0)]]+k,c[Integer(0)]+kinv]).dimension()
     10 print(num,v,d)
     11 if d!=Integer(0):

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/rings/integer.pyx:1764, in sage.rings.integer.Integer.__add__ (build/cythonized/sage/rings/integer.c:21739)()
   1762         return y
   1763 
-> 1764     return coercion_model.bin_op(left, right, operator.add)
   1765 
   1766 cpdef _add_(self, right) noexcept:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1276, in sage.structure.coerce.CoercionModel.bin_op (build/cythonized/sage/structure/coerce.c:16830)()
   1274     # We should really include the underlying error.
   1275     # This causes so much headache.
-> 1276     raise bin_op_exception(op, x, y)
   1277 
   1278 cpdef canonical_coercion(self, x, y) noexcept:

TypeError: unsupported operand parent(s) for +: 'Integer Ring' and '<class 'list'>'
sage: A=CartanMatrix(['A',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     print(v,k,kinv)
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,kinv,[c[0]]+k,[c[0]]+kinv]).dimensio
....: n()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
[1, 2, 1] [1, 2, 1] []
1 [1, 2, 1] 0
[1, 2] [2, 1] [2]
2 [1, 2] 0
[1] [1] [1, 2]
3 [1] 1
Failure!
sage: A=CartanMatrix(['A',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     print(v,k,kinv)
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,kinv,k+[c[0]],[c[0]]+kinv]).dimensio
....: n()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
[1, 2, 1] [1, 2, 1] []
1 [1, 2, 1] 0
[1, 2] [2, 1] [2]
2 [1, 2] 0
[1] [1] [1, 2]
3 [1] 0
[2] [2] [1]
4 [2] 1
Failure!
sage: A=CartanMatrix(['A',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     print(v,k,kinv)
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,kinv,k+[c[0]],kinv+[c[0]]]).dimensio
....: n()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
[1, 2, 1] [1, 2, 1] []
1 [1, 2, 1] 0
[1, 2] [2, 1] [2]
2 [1, 2] 0
[1] [1] [1, 2]
3 [1] 0
[2] [2] [1]
4 [2] 0
[] [] [2, 1, 2]
5 [] 0
sage: A=CartanMatrix(['A',4])
....: c=[0,1,2,3]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     print(v,k,kinv)
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,kinv,k+[c[0]],kinv+[c[0]]]).dimensio
....: n()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
[1, 2, 3, 1, 2, 1] [1, 2, 1, 3, 2, 1] []
1 [1, 2, 3, 1, 2, 1] 0
[1, 2, 3, 1, 2] [2, 1, 3, 2, 1] [3]
2 [1, 2, 3, 1, 2] 0
[1, 2, 3, 1] [1, 3, 2, 1] [2, 3]
3 [1, 2, 3, 1] 0
[1, 2, 3, 2] [2, 3, 2, 1] [2]
4 [1, 2, 3, 2] 0
[1, 2, 3] [3, 2, 1] [3, 2, 3]
5 [1, 2, 3] 0
[1, 2, 1] [1, 2, 1] [1, 2, 3]
6 [1, 2, 1] 0
[1, 2] [2, 1] [3, 1, 2, 3]
7 [1, 2] 0
[1, 3] [3, 1] [1, 2]
8 [1, 3] 0
[1] [1] [2, 3, 1, 2, 3]
9 [1] 0
[2, 3, 2] [2, 3, 2] [1]
10 [2, 3, 2] 0
[2, 3] [3, 2] [1, 3]
11 [2, 3] 0
[2] [2] [2, 1, 2, 3]
12 [2] 0
[3] [3] [2, 1, 2]
13 [3] 0
[] [] [3, 2, 3, 1, 2, 3]
14 [] 0
sage: A=CartanMatrix(['A',4])
....: c=[0,1,2,3]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,kinv,k+[c[0]],kinv+[c[0]]]).dimensio
....: n()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [1, 2, 3, 1, 2, 1] 0
2 [1, 2, 3, 1, 2] 0
3 [1, 2, 3, 1] 0
4 [1, 2, 3, 2] 0
5 [1, 2, 3] 0
6 [1, 2, 1] 0
7 [1, 2] 0
8 [1, 3] 0
9 [1] 0
10 [2, 3, 2] 0
11 [2, 3] 0
12 [2] 0
13 [3] 0
14 [] 0
sage: A=CartanMatrix(['A',5])
....: c=[0,1,2,3,4]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,kinv,k+[c[0]],kinv+[c[0]]]).dimensio
....: n()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
2 [1, 2, 3, 4, 1, 2, 3, 1, 2] 0
3 [1, 2, 3, 4, 1, 2, 3, 1] 0
4 [1, 2, 3, 4, 1, 2, 3, 2] 0
5 [1, 2, 3, 4, 1, 2, 3] 0
6 [1, 2, 3, 4, 1, 2, 1] 0
7 [1, 2, 3, 4, 1, 2] 0
8 [1, 2, 3, 4, 1, 3] 0
9 [1, 2, 3, 4, 1] 0
10 [1, 2, 3, 4, 2, 3, 2] 0
11 [1, 2, 3, 4, 2, 3] 0
12 [1, 2, 3, 4, 2] 0
13 [1, 2, 3, 4, 3] 0
14 [1, 2, 3, 4] 0
15 [1, 2, 3, 1, 2, 1] 0
16 [1, 2, 3, 1, 2] 0
17 [1, 2, 3, 1] 0
18 [1, 2, 3, 2] 0
19 [1, 2, 3] 0
20 [1, 2, 4, 1] 0
21 [1, 2, 4] 0
22 [1, 2, 1] 0
23 [1, 2] 0
24 [1, 3, 4, 3] 0
25 [1, 3, 4] 0
26 [1, 3] 0
27 [1, 4] 0
28 [1] 0
29 [2, 3, 4, 2, 3, 2] 0
30 [2, 3, 4, 2, 3] 0
31 [2, 3, 4, 2] 0
32 [2, 3, 4, 3] 0
33 [2, 3, 4] 0
34 [2, 3, 2] 0
35 [2, 3] 0
36 [2, 4] 0
37 [2] 0
38 [3, 4, 3] 0
39 [3, 4] 0
40 [3] 0
41 [4] 0
42 [] 0
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,kinv,k+[c[0]],kinv+[c[0]]]).dimensio
....: n()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
2 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
3 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
4 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1] 0
5 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
6 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
7 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1] 0
8 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
9 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1] 0
10 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
11 [1, 2, 3, 4, 1, 2, 3, 4, 1] 0
12 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4] 0
13 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3] 0
14 [1, 2, 3, 4, 1, 2, 3, 4, 2] 0
15 [1, 2, 3, 4, 1, 2, 3, 4] 0
16 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 1
Failure!
sage: A=CartanMatrix(['C',5])
....: c=[4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,kinv,k+[c[0]],kinv+[c[0]]]).dimensio
....: n()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
2 [3, 2, 1, 0, 3, 2, 1, 3, 2] 0
3 [3, 2, 1, 0, 3, 2, 1, 3] 0
4 [3, 2, 1, 0, 3, 2, 1, 2] 0
5 [3, 2, 1, 0, 3, 2, 1] 0
6 [3, 2, 1, 0, 3, 2, 3] 0
7 [3, 2, 1, 0, 3, 2] 0
8 [3, 2, 1, 0, 3, 1] 0
9 [3, 2, 1, 0, 3] 0
10 [3, 2, 1, 0, 2, 1, 2] 0
11 [3, 2, 1, 0, 2, 1] 0
12 [3, 2, 1, 0, 2] 0
13 [3, 2, 1, 0, 1] 0
14 [3, 2, 1, 0] 0
15 [3, 2, 1, 3, 2, 3] 0
16 [3, 2, 1, 3, 2] 0
17 [3, 2, 1, 3] 0
18 [3, 2, 1, 2] 0
19 [3, 2, 1] 0
20 [3, 2, 0, 3] 0
21 [3, 2, 0] 0
22 [3, 2, 3] 0
23 [3, 2] 0
24 [3, 1, 0, 1] 0
25 [3, 1, 0] 0
26 [3, 1] 0
27 [3, 0] 0
28 [3] 0
29 [2, 1, 0, 2, 1, 2] 0
30 [2, 1, 0, 2, 1] 0
31 [2, 1, 0, 2] 0
32 [2, 1, 0, 1] 0
33 [2, 1, 0] 0
34 [2, 1, 2] 0
35 [2, 1] 0
36 [2, 0] 0
37 [2] 0
38 [1, 0, 1] 0
39 [1, 0] 0
40 [1] 0
41 [0] 0
42 [] 0
sage: A=CartanMatrix(['C',3])
....: c=[2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,kinv,k+[c[0]],kinv+[c[0]]]).dimensio
....: n()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [1, 0, 1] 0
2 [1, 0] 0
3 [1] 0
4 [0] 0
5 [] 0
sage: A=CartanMatrix(['C',7])
....: c=[6,5,4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,kinv,k+[c[0]],kinv+[c[0]]]).dimensio
....: n()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
2 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
3 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] 0
4 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] 0
5 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] 0
6 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] 0
7 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] 0
8 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] 0
9 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5] 0
10 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] 0
11 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] 0
12 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4] 0
13 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 3] 0
14 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2] 0
15 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] 0
16 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4] 0
17 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5] 0
18 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 4] 0
19 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3] 0
20 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2, 5] 0
21 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2] 0
22 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 5] 0
23 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4] 0
24 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2, 3] 0
25 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2] 0
26 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3] 0
27 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 2] 0
28 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5] 0
29 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
30 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
31 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4] 0
32 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 3] 0
33 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2] 0
34 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 4] 0
35 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3] 0
36 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 2] 0
37 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4] 0
38 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2, 3] 0
39 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2] 0
40 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3] 0
41 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 2] 0
42 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1] 0
43 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
44 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
45 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5] 0
46 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 4] 0
47 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3] 0
48 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 5] 0
49 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4] 0
50 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 3] 0
51 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5] 0
52 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4, 3, 4] 0
53 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4, 3] 0
54 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4] 0
55 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 3] 0
56 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2] 0
57 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5, 4, 5] 0
58 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5, 4] 0
59 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5] 0
60 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 4] 0
61 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1] 0
62 [5, 4, 3, 2, 1, 0, 5, 4, 3, 5, 4, 5] 0
63 [5, 4, 3, 2, 1, 0, 5, 4, 3, 5, 4] 0
64 [5, 4, 3, 2, 1, 0, 5, 4, 3, 5] 0
65 [5, 4, 3, 2, 1, 0, 5, 4, 3, 4] 0
66 [5, 4, 3, 2, 1, 0, 5, 4, 3] 0
67 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 5, 2] 0
68 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 5] 0
69 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 2] 0
70 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1] 0
71 [5, 4, 3, 2, 1, 0, 5, 4, 2, 5] 0
72 [5, 4, 3, 2, 1, 0, 5, 4, 2] 0
73 [5, 4, 3, 2, 1, 0, 5, 4, 1, 5] 0
74 [5, 4, 3, 2, 1, 0, 5, 4, 1] 0
75 [5, 4, 3, 2, 1, 0, 5, 4, 5] 0
76 [5, 4, 3, 2, 1, 0, 5, 4] 0
77 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3, 2, 3] 0
78 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3, 2] 0
79 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3] 0
80 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 2] 0
81 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1] 0
82 [5, 4, 3, 2, 1, 0, 5, 3, 2, 3] 0
83 [5, 4, 3, 2, 1, 0, 5, 3, 2] 0
84 [5, 4, 3, 2, 1, 0, 5, 3, 1] 0
85 [5, 4, 3, 2, 1, 0, 5, 3] 0
86 [5, 4, 3, 2, 1, 0, 5, 2, 1, 2] 0
87 [5, 4, 3, 2, 1, 0, 5, 2, 1] 0
88 [5, 4, 3, 2, 1, 0, 5, 2] 0
89 [5, 4, 3, 2, 1, 0, 5, 1] 0
90 [5, 4, 3, 2, 1, 0, 5] 0
91 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
92 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
93 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4] 0
94 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 3] 0
95 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2] 0
96 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 4] 0
97 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3] 0
98 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 2] 0
99 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4] 0
100 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2, 3] 0
101 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2] 0
102 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3] 0
103 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 2] 0
104 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1] 0
105 [5, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3, 4] 0
106 [5, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3] 0
107 [5, 4, 3, 2, 1, 0, 4, 3, 2, 4] 0
108 [5, 4, 3, 2, 1, 0, 4, 3, 2, 3] 0
109 [5, 4, 3, 2, 1, 0, 4, 3, 2] 0
110 [5, 4, 3, 2, 1, 0, 4, 3, 1, 4] 0
111 [5, 4, 3, 2, 1, 0, 4, 3, 1] 0
112 [5, 4, 3, 2, 1, 0, 4, 3, 4] 0
113 [5, 4, 3, 2, 1, 0, 4, 3] 0
114 [5, 4, 3, 2, 1, 0, 4, 2, 1, 2] 0
115 [5, 4, 3, 2, 1, 0, 4, 2, 1] 0
116 [5, 4, 3, 2, 1, 0, 4, 2] 0
117 [5, 4, 3, 2, 1, 0, 4, 1] 0
118 [5, 4, 3, 2, 1, 0, 4] 0
119 [5, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
120 [5, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
121 [5, 4, 3, 2, 1, 0, 3, 2, 1, 3] 0
122 [5, 4, 3, 2, 1, 0, 3, 2, 1, 2] 0
123 [5, 4, 3, 2, 1, 0, 3, 2, 1] 0
124 [5, 4, 3, 2, 1, 0, 3, 2, 3] 0
125 [5, 4, 3, 2, 1, 0, 3, 2] 0
126 [5, 4, 3, 2, 1, 0, 3, 1] 0
127 [5, 4, 3, 2, 1, 0, 3] 0
128 [5, 4, 3, 2, 1, 0, 2, 1, 2] 0
129 [5, 4, 3, 2, 1, 0, 2, 1] 0
130 [5, 4, 3, 2, 1, 0, 2] 0
131 [5, 4, 3, 2, 1, 0, 1] 0
132 [5, 4, 3, 2, 1, 0] 0
133 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
134 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
135 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] 0
136 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] 0
137 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] 0
138 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] 0
139 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] 0
140 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] 0
141 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5] 0
142 [5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] 0
143 [5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] 0
144 [5, 4, 3, 2, 1, 5, 4, 3, 2, 4] 0
145 [5, 4, 3, 2, 1, 5, 4, 3, 2, 3] 0
146 [5, 4, 3, 2, 1, 5, 4, 3, 2] 0
147 [5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] 0
148 [5, 4, 3, 2, 1, 5, 4, 3, 5, 4] 0
149 [5, 4, 3, 2, 1, 5, 4, 3, 5] 0
150 [5, 4, 3, 2, 1, 5, 4, 3, 4] 0
151 [5, 4, 3, 2, 1, 5, 4, 3] 0
152 [5, 4, 3, 2, 1, 5, 4, 2, 5] 0
153 [5, 4, 3, 2, 1, 5, 4, 2] 0
154 [5, 4, 3, 2, 1, 5, 4, 5] 0
155 [5, 4, 3, 2, 1, 5, 4] 0
156 [5, 4, 3, 2, 1, 5, 3, 2, 3] 0
157 [5, 4, 3, 2, 1, 5, 3, 2] 0
158 [5, 4, 3, 2, 1, 5, 3] 0
159 [5, 4, 3, 2, 1, 5, 2] 0
160 [5, 4, 3, 2, 1, 5] 0
161 [5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
162 [5, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
163 [5, 4, 3, 2, 1, 4, 3, 2, 4] 0
164 [5, 4, 3, 2, 1, 4, 3, 2, 3] 0
165 [5, 4, 3, 2, 1, 4, 3, 2] 0
166 [5, 4, 3, 2, 1, 4, 3, 4] 0
167 [5, 4, 3, 2, 1, 4, 3] 0
168 [5, 4, 3, 2, 1, 4, 2] 0
169 [5, 4, 3, 2, 1, 4] 0
170 [5, 4, 3, 2, 1, 3, 2, 3] 0
171 [5, 4, 3, 2, 1, 3, 2] 0
172 [5, 4, 3, 2, 1, 3] 0
173 [5, 4, 3, 2, 1, 2] 0
174 [5, 4, 3, 2, 1] 0
175 [5, 4, 3, 2, 0, 5, 4, 3, 5, 4, 5] 0
176 [5, 4, 3, 2, 0, 5, 4, 3, 5, 4] 0
177 [5, 4, 3, 2, 0, 5, 4, 3, 5] 0
178 [5, 4, 3, 2, 0, 5, 4, 3, 4] 0
179 [5, 4, 3, 2, 0, 5, 4, 3] 0
180 [5, 4, 3, 2, 0, 5, 4, 5] 0
181 [5, 4, 3, 2, 0, 5, 4] 0
182 [5, 4, 3, 2, 0, 5, 3] 0
183 [5, 4, 3, 2, 0, 5] 0
184 [5, 4, 3, 2, 0, 4, 3, 4] 0
185 [5, 4, 3, 2, 0, 4, 3] 0
186 [5, 4, 3, 2, 0, 4] 0
187 [5, 4, 3, 2, 0, 3] 0
188 [5, 4, 3, 2, 0] 0
189 [5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
190 [5, 4, 3, 2, 5, 4, 3, 5, 4] 0
191 [5, 4, 3, 2, 5, 4, 3, 5] 0
192 [5, 4, 3, 2, 5, 4, 3, 4] 0
193 [5, 4, 3, 2, 5, 4, 3] 0
194 [5, 4, 3, 2, 5, 4, 5] 0
195 [5, 4, 3, 2, 5, 4] 0
196 [5, 4, 3, 2, 5, 3] 0
197 [5, 4, 3, 2, 5] 0
198 [5, 4, 3, 2, 4, 3, 4] 0
199 [5, 4, 3, 2, 4, 3] 0
200 [5, 4, 3, 2, 4] 0
201 [5, 4, 3, 2, 3] 0
202 [5, 4, 3, 2] 0
203 [5, 4, 3, 1, 0, 5, 4, 1, 5] 0
204 [5, 4, 3, 1, 0, 5, 4, 1] 0
205 [5, 4, 3, 1, 0, 5, 4, 5] 0
206 [5, 4, 3, 1, 0, 5, 4] 0
207 [5, 4, 3, 1, 0, 5, 1] 0
208 [5, 4, 3, 1, 0, 5] 0
209 [5, 4, 3, 1, 0, 4, 1] 0
210 [5, 4, 3, 1, 0, 4] 0
211 [5, 4, 3, 1, 0, 1] 0
212 [5, 4, 3, 1, 0] 0
213 [5, 4, 3, 1, 5, 4, 5] 0
214 [5, 4, 3, 1, 5, 4] 0
215 [5, 4, 3, 1, 5] 0
216 [5, 4, 3, 1, 4] 0
217 [5, 4, 3, 1] 0
218 [5, 4, 3, 0, 5, 4, 5] 0
219 [5, 4, 3, 0, 5, 4] 0
220 [5, 4, 3, 0, 5] 0
221 [5, 4, 3, 0, 4] 0
222 [5, 4, 3, 0] 0
223 [5, 4, 3, 5, 4, 5] 0
224 [5, 4, 3, 5, 4] 0
225 [5, 4, 3, 5] 0
226 [5, 4, 3, 4] 0
227 [5, 4, 3] 0
228 [5, 4, 2, 1, 0, 5, 2, 1, 2] 0
229 [5, 4, 2, 1, 0, 5, 2, 1] 0
230 [5, 4, 2, 1, 0, 5, 2] 0
231 [5, 4, 2, 1, 0, 5, 1] 0
232 [5, 4, 2, 1, 0, 5] 0
233 [5, 4, 2, 1, 0, 2, 1, 2] 0
234 [5, 4, 2, 1, 0, 2, 1] 0
235 [5, 4, 2, 1, 0, 2] 0
236 [5, 4, 2, 1, 0, 1] 0
237 [5, 4, 2, 1, 0] 0
238 [5, 4, 2, 1, 5, 2] 0
239 [5, 4, 2, 1, 5] 0
240 [5, 4, 2, 1, 2] 0
241 [5, 4, 2, 1] 0
242 [5, 4, 2, 0, 5] 0
243 [5, 4, 2, 0] 0
244 [5, 4, 2, 5] 0
245 [5, 4, 2] 0
246 [5, 4, 1, 0, 5, 1] 0
247 [5, 4, 1, 0, 5] 0
248 [5, 4, 1, 0, 1] 0
249 [5, 4, 1, 0] 0
250 [5, 4, 1, 5] 0
251 [5, 4, 1] 0
252 [5, 4, 0, 5] 0
253 [5, 4, 0] 0
254 [5, 4, 5] 0
255 [5, 4] 0
256 [5, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
257 [5, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
258 [5, 3, 2, 1, 0, 3, 2, 1, 3] 0
259 [5, 3, 2, 1, 0, 3, 2, 1, 2] 0
260 [5, 3, 2, 1, 0, 3, 2, 1] 0
261 [5, 3, 2, 1, 0, 3, 2, 3] 0
262 [5, 3, 2, 1, 0, 3, 2] 0
263 [5, 3, 2, 1, 0, 3, 1] 0
264 [5, 3, 2, 1, 0, 3] 0
265 [5, 3, 2, 1, 0, 2, 1, 2] 0
266 [5, 3, 2, 1, 0, 2, 1] 0
267 [5, 3, 2, 1, 0, 2] 0
268 [5, 3, 2, 1, 0, 1] 0
269 [5, 3, 2, 1, 0] 0
270 [5, 3, 2, 1, 3, 2, 3] 0
271 [5, 3, 2, 1, 3, 2] 0
272 [5, 3, 2, 1, 3] 0
273 [5, 3, 2, 1, 2] 0
274 [5, 3, 2, 1] 0
275 [5, 3, 2, 0, 3] 0
276 [5, 3, 2, 0] 0
277 [5, 3, 2, 3] 0
278 [5, 3, 2] 0
279 [5, 3, 1, 0, 1] 0
280 [5, 3, 1, 0] 0
281 [5, 3, 1] 0
282 [5, 3, 0] 0
283 [5, 3] 0
284 [5, 2, 1, 0, 2, 1, 2] 0
285 [5, 2, 1, 0, 2, 1] 0
286 [5, 2, 1, 0, 2] 0
287 [5, 2, 1, 0, 1] 0
288 [5, 2, 1, 0] 0
289 [5, 2, 1, 2] 0
290 [5, 2, 1] 0
291 [5, 2, 0] 0
292 [5, 2] 0
293 [5, 1, 0, 1] 0
294 [5, 1, 0] 0
295 [5, 1] 0
296 [5, 0] 0
297 [5] 0
298 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
299 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
300 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4] 0
301 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 3] 0
302 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2] 0
303 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 4] 0
304 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3] 0
305 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 2] 0
306 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4] 0
307 [4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2, 3] 0
308 [4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2] 0
309 [4, 3, 2, 1, 0, 4, 3, 2, 1, 3] 0
310 [4, 3, 2, 1, 0, 4, 3, 2, 1, 2] 0
311 [4, 3, 2, 1, 0, 4, 3, 2, 1] 0
312 [4, 3, 2, 1, 0, 4, 3, 2, 4, 3, 4] 0
313 [4, 3, 2, 1, 0, 4, 3, 2, 4, 3] 0
314 [4, 3, 2, 1, 0, 4, 3, 2, 4] 0
315 [4, 3, 2, 1, 0, 4, 3, 2, 3] 0
316 [4, 3, 2, 1, 0, 4, 3, 2] 0
317 [4, 3, 2, 1, 0, 4, 3, 1, 4] 0
318 [4, 3, 2, 1, 0, 4, 3, 1] 0
319 [4, 3, 2, 1, 0, 4, 3, 4] 0
320 [4, 3, 2, 1, 0, 4, 3] 0
321 [4, 3, 2, 1, 0, 4, 2, 1, 2] 0
322 [4, 3, 2, 1, 0, 4, 2, 1] 0
323 [4, 3, 2, 1, 0, 4, 2] 0
324 [4, 3, 2, 1, 0, 4, 1] 0
325 [4, 3, 2, 1, 0, 4] 0
326 [4, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
327 [4, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
328 [4, 3, 2, 1, 0, 3, 2, 1, 3] 0
329 [4, 3, 2, 1, 0, 3, 2, 1, 2] 0
330 [4, 3, 2, 1, 0, 3, 2, 1] 0
331 [4, 3, 2, 1, 0, 3, 2, 3] 0
332 [4, 3, 2, 1, 0, 3, 2] 0
333 [4, 3, 2, 1, 0, 3, 1] 0
334 [4, 3, 2, 1, 0, 3] 0
335 [4, 3, 2, 1, 0, 2, 1, 2] 0
336 [4, 3, 2, 1, 0, 2, 1] 0
337 [4, 3, 2, 1, 0, 2] 0
338 [4, 3, 2, 1, 0, 1] 0
339 [4, 3, 2, 1, 0] 0
340 [4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
341 [4, 3, 2, 1, 4, 3, 2, 4, 3] 0
342 [4, 3, 2, 1, 4, 3, 2, 4] 0
343 [4, 3, 2, 1, 4, 3, 2, 3] 0
344 [4, 3, 2, 1, 4, 3, 2] 0
345 [4, 3, 2, 1, 4, 3, 4] 0
346 [4, 3, 2, 1, 4, 3] 0
347 [4, 3, 2, 1, 4, 2] 0
348 [4, 3, 2, 1, 4] 0
349 [4, 3, 2, 1, 3, 2, 3] 0
350 [4, 3, 2, 1, 3, 2] 0
351 [4, 3, 2, 1, 3] 0
352 [4, 3, 2, 1, 2] 0
353 [4, 3, 2, 1] 0
354 [4, 3, 2, 0, 4, 3, 4] 0
355 [4, 3, 2, 0, 4, 3] 0
356 [4, 3, 2, 0, 4] 0
357 [4, 3, 2, 0, 3] 0
358 [4, 3, 2, 0] 0
359 [4, 3, 2, 4, 3, 4] 0
360 [4, 3, 2, 4, 3] 0
361 [4, 3, 2, 4] 0
362 [4, 3, 2, 3] 0
363 [4, 3, 2] 0
364 [4, 3, 1, 0, 4, 1] 0
365 [4, 3, 1, 0, 4] 0
366 [4, 3, 1, 0, 1] 0
367 [4, 3, 1, 0] 0
368 [4, 3, 1, 4] 0
369 [4, 3, 1] 0
370 [4, 3, 0, 4] 0
371 [4, 3, 0] 0
372 [4, 3, 4] 0
373 [4, 3] 0
374 [4, 2, 1, 0, 2, 1, 2] 0
375 [4, 2, 1, 0, 2, 1] 0
376 [4, 2, 1, 0, 2] 0
377 [4, 2, 1, 0, 1] 0
378 [4, 2, 1, 0] 0
379 [4, 2, 1, 2] 0
380 [4, 2, 1] 0
381 [4, 2, 0] 0
382 [4, 2] 0
383 [4, 1, 0, 1] 0
384 [4, 1, 0] 0
385 [4, 1] 0
386 [4, 0] 0
387 [4] 0
388 [3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
389 [3, 2, 1, 0, 3, 2, 1, 3, 2] 0
390 [3, 2, 1, 0, 3, 2, 1, 3] 0
391 [3, 2, 1, 0, 3, 2, 1, 2] 0
392 [3, 2, 1, 0, 3, 2, 1] 0
393 [3, 2, 1, 0, 3, 2, 3] 0
394 [3, 2, 1, 0, 3, 2] 0
395 [3, 2, 1, 0, 3, 1] 0
396 [3, 2, 1, 0, 3] 0
397 [3, 2, 1, 0, 2, 1, 2] 0
398 [3, 2, 1, 0, 2, 1] 0
399 [3, 2, 1, 0, 2] 0
400 [3, 2, 1, 0, 1] 0
401 [3, 2, 1, 0] 0
402 [3, 2, 1, 3, 2, 3] 0
403 [3, 2, 1, 3, 2] 0
404 [3, 2, 1, 3] 0
405 [3, 2, 1, 2] 0
406 [3, 2, 1] 0
407 [3, 2, 0, 3] 0
408 [3, 2, 0] 0
409 [3, 2, 3] 0
410 [3, 2] 0
411 [3, 1, 0, 1] 0
412 [3, 1, 0] 0
413 [3, 1] 0
414 [3, 0] 0
415 [3] 0
416 [2, 1, 0, 2, 1, 2] 0
417 [2, 1, 0, 2, 1] 0
418 [2, 1, 0, 2] 0
419 [2, 1, 0, 1] 0
420 [2, 1, 0] 0
421 [2, 1, 2] 0
422 [2, 1] 0
423 [2, 0] 0
424 [2] 0
425 [1, 0, 1] 0
426 [1, 0] 0
427 [1] 0
428 [0] 0
429 [] 0
sage: A=CartanMatrix(['C',7])
....: c=[6,5,4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,kinv,k+[c[0]],kinv]).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 3
Failure!
sage: A=CartanMatrix(['C',7])
....: c=[6,5,4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,kinv,k+[c[0]],[c[0]]+kinv]).dimensio
....: n()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
2 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
3 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] 0
4 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] 0
5 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] 0
6 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] 0
7 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] 0
8 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] 0
9 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5] 0
10 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] 0
11 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] 0
12 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4] 0
13 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 3] 0
14 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2] 0
15 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] 0
16 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4] 0
17 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5] 0
18 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 4] 0
19 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3] 0
20 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2, 5] 0
21 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2] 0
22 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 5] 0
23 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4] 0
24 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2, 3] 0
25 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2] 0
26 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3] 0
27 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 2] 0
28 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5] 0
29 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
30 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
31 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4] 0
32 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 3] 0
33 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2] 0
34 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 4] 0
35 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3] 0
36 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 2] 0
37 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4] 0
38 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2, 3] 0
39 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2] 0
40 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3] 0
41 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 2] 0
42 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1] 0
43 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
44 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
45 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5] 0
46 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 4] 0
47 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3] 0
48 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 5] 0
49 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4] 0
50 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 3] 0
51 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5] 0
52 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4, 3, 4] 0
53 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4, 3] 0
54 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4] 0
55 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 3] 0
56 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2] 0
57 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5, 4, 5] 0
58 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5, 4] 0
59 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5] 0
60 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 4] 0
61 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1] 0
62 [5, 4, 3, 2, 1, 0, 5, 4, 3, 5, 4, 5] 0
63 [5, 4, 3, 2, 1, 0, 5, 4, 3, 5, 4] 0
64 [5, 4, 3, 2, 1, 0, 5, 4, 3, 5] 0
65 [5, 4, 3, 2, 1, 0, 5, 4, 3, 4] 0
66 [5, 4, 3, 2, 1, 0, 5, 4, 3] 0
67 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 5, 2] 0
68 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 5] 0
69 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 2] 0
70 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1] 0
71 [5, 4, 3, 2, 1, 0, 5, 4, 2, 5] 0
72 [5, 4, 3, 2, 1, 0, 5, 4, 2] 0
73 [5, 4, 3, 2, 1, 0, 5, 4, 1, 5] 0
74 [5, 4, 3, 2, 1, 0, 5, 4, 1] 0
75 [5, 4, 3, 2, 1, 0, 5, 4, 5] 0
76 [5, 4, 3, 2, 1, 0, 5, 4] 0
77 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3, 2, 3] 0
78 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3, 2] 0
79 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3] 0
80 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 2] 0
81 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1] 0
82 [5, 4, 3, 2, 1, 0, 5, 3, 2, 3] 0
83 [5, 4, 3, 2, 1, 0, 5, 3, 2] 0
84 [5, 4, 3, 2, 1, 0, 5, 3, 1] 0
85 [5, 4, 3, 2, 1, 0, 5, 3] 0
86 [5, 4, 3, 2, 1, 0, 5, 2, 1, 2] 0
87 [5, 4, 3, 2, 1, 0, 5, 2, 1] 0
88 [5, 4, 3, 2, 1, 0, 5, 2] 0
89 [5, 4, 3, 2, 1, 0, 5, 1] 0
90 [5, 4, 3, 2, 1, 0, 5] 0
91 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
92 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
93 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4] 0
94 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 3] 0
95 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2] 0
96 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 4] 0
97 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3] 0
98 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 2] 0
99 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4] 0
100 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2, 3] 0
101 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2] 0
102 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3] 0
103 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 2] 0
104 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1] 0
105 [5, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3, 4] 0
106 [5, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3] 0
107 [5, 4, 3, 2, 1, 0, 4, 3, 2, 4] 0
108 [5, 4, 3, 2, 1, 0, 4, 3, 2, 3] 0
109 [5, 4, 3, 2, 1, 0, 4, 3, 2] 0
110 [5, 4, 3, 2, 1, 0, 4, 3, 1, 4] 0
111 [5, 4, 3, 2, 1, 0, 4, 3, 1] 0
112 [5, 4, 3, 2, 1, 0, 4, 3, 4] 0
113 [5, 4, 3, 2, 1, 0, 4, 3] 0
114 [5, 4, 3, 2, 1, 0, 4, 2, 1, 2] 0
115 [5, 4, 3, 2, 1, 0, 4, 2, 1] 0
116 [5, 4, 3, 2, 1, 0, 4, 2] 0
117 [5, 4, 3, 2, 1, 0, 4, 1] 0
118 [5, 4, 3, 2, 1, 0, 4] 0
119 [5, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
120 [5, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
121 [5, 4, 3, 2, 1, 0, 3, 2, 1, 3] 0
122 [5, 4, 3, 2, 1, 0, 3, 2, 1, 2] 0
123 [5, 4, 3, 2, 1, 0, 3, 2, 1] 0
124 [5, 4, 3, 2, 1, 0, 3, 2, 3] 0
125 [5, 4, 3, 2, 1, 0, 3, 2] 0
126 [5, 4, 3, 2, 1, 0, 3, 1] 0
127 [5, 4, 3, 2, 1, 0, 3] 0
128 [5, 4, 3, 2, 1, 0, 2, 1, 2] 0
129 [5, 4, 3, 2, 1, 0, 2, 1] 0
130 [5, 4, 3, 2, 1, 0, 2] 0
131 [5, 4, 3, 2, 1, 0, 1] 0
132 [5, 4, 3, 2, 1, 0] 0
133 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
134 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
135 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] 0
136 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] 0
137 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] 0
138 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] 0
139 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] 0
140 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] 0
141 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5] 0
142 [5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] 0
143 [5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] 0
144 [5, 4, 3, 2, 1, 5, 4, 3, 2, 4] 0
145 [5, 4, 3, 2, 1, 5, 4, 3, 2, 3] 0
146 [5, 4, 3, 2, 1, 5, 4, 3, 2] 0
147 [5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] 0
148 [5, 4, 3, 2, 1, 5, 4, 3, 5, 4] 0
149 [5, 4, 3, 2, 1, 5, 4, 3, 5] 0
150 [5, 4, 3, 2, 1, 5, 4, 3, 4] 0
151 [5, 4, 3, 2, 1, 5, 4, 3] 0
152 [5, 4, 3, 2, 1, 5, 4, 2, 5] 0
153 [5, 4, 3, 2, 1, 5, 4, 2] 0
154 [5, 4, 3, 2, 1, 5, 4, 5] 0
155 [5, 4, 3, 2, 1, 5, 4] 0
156 [5, 4, 3, 2, 1, 5, 3, 2, 3] 0
157 [5, 4, 3, 2, 1, 5, 3, 2] 0
158 [5, 4, 3, 2, 1, 5, 3] 0
159 [5, 4, 3, 2, 1, 5, 2] 0
160 [5, 4, 3, 2, 1, 5] 0
161 [5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
162 [5, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
163 [5, 4, 3, 2, 1, 4, 3, 2, 4] 0
164 [5, 4, 3, 2, 1, 4, 3, 2, 3] 0
165 [5, 4, 3, 2, 1, 4, 3, 2] 0
166 [5, 4, 3, 2, 1, 4, 3, 4] 0
167 [5, 4, 3, 2, 1, 4, 3] 0
168 [5, 4, 3, 2, 1, 4, 2] 0
169 [5, 4, 3, 2, 1, 4] 0
170 [5, 4, 3, 2, 1, 3, 2, 3] 0
171 [5, 4, 3, 2, 1, 3, 2] 0
172 [5, 4, 3, 2, 1, 3] 0
173 [5, 4, 3, 2, 1, 2] 0
174 [5, 4, 3, 2, 1] 0
175 [5, 4, 3, 2, 0, 5, 4, 3, 5, 4, 5] 4
Failure!
sage: A=CartanMatrix(['C',7])
....: c=[0,1,2,3,4,5,6]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,kinv,k+[c[0]],kinv+[c[0]]]).dimensio
....: n()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6] 0
2 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5] 0
3 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4] 0
4 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3] 0
5 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2] 0
6 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1] 0
7 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6] 0
8 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4] 0
9 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3] 0
10 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2] 0
11 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1] 0
12 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5] 0
13 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3] 0
14 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2] 0
15 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1] 0
16 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4] 0
17 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 1, 2] 0
18 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 1] 0
19 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3] 0
20 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 1] 0
21 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2] 0
22 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1] 0
23 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6] 0
24 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5] 0
25 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4] 0
26 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3] 0
27 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2] 0
28 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6] 0
29 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] 0
30 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] 0
31 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1] 0
32 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4] 0
33 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2] 0
34 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1] 0
35 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3] 0
36 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 1] 0
37 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2] 0
38 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1] 0
39 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 4] 0
40 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3] 0
41 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2] 0
42 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5] 0
43 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
44 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 1] 0
45 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3] 0
46 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 1] 0
47 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2] 0
48 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1] 0
49 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 2, 3] 0
50 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 2] 0
51 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4] 0
52 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 1, 2, 1] 0
53 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 1, 2] 0
54 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 1] 0
55 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 2] 0
56 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3] 0
57 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 1] 0
58 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2] 0
59 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6] 0
60 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5] 0
61 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3, 4] 0
62 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3] 0
63 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1] 0
64 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6] 0
65 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5] 0
66 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4] 0
67 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3] 0
68 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2] 0
69 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6] 0
70 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4] 0
71 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3] 0
72 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2] 0
73 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5] 0
74 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3] 0
75 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 2] 0
76 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4] 0
77 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 2] 0
78 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3] 0
79 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2] 0
80 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3, 4, 5, 6] 0
81 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3, 4, 5] 0
82 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3, 4] 0
83 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3] 0
84 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6] 0
85 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
86 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1] 0
87 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] 0
88 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1] 0
89 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] 0
90 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1] 0
91 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3] 0
92 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2] 0
93 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4] 0
94 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1] 0
95 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2] 0
96 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1] 0
97 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 2] 0
98 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3] 0
99 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 1] 0
100 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2] 0
101 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 3, 4] 0
102 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 3] 0
103 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1] 0
104 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 4, 2, 3] 0
105 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 4, 2] 0
106 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 4] 0
107 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 2] 0
108 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3] 0
109 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2] 0
110 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 3, 4] 0
111 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 3] 0
112 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5] 0
113 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
114 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
115 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 1] 0
116 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 2] 0
117 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3] 0
118 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 1] 0
119 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2] 0
120 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 3] 0
121 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1] 0
122 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 2, 3, 2] 0
123 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 2, 3] 0
124 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 2] 0
125 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 3] 0
126 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4] 0
127 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 1, 2, 1] 0
128 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 1, 2] 0
129 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 1] 0
130 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 2] 0
131 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3] 0
132 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 4, 5, 6, 1] 0
133 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 4, 5, 6] 0
134 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 4, 5, 1] 0
135 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 4, 5] 0
136 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 4, 1] 0
137 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 4] 0
138 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 1] 0
139 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2] 0
140 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 3, 4, 5, 6] 0
141 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 3, 4, 5] 0
142 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 3, 4] 0
143 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 3] 0
144 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6] 0
145 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 3, 4] 0
146 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 3] 0
147 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5] 0
148 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3, 4, 3] 0
149 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3, 4] 0
150 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3] 0
151 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 4, 5, 6] 0
152 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 4, 5] 0
153 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 4] 0
154 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1] 0
155 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6] 0
156 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5] 0
157 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4] 0
158 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3] 0
159 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2] 0
160 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6] 0
161 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4] 0
162 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3] 0
163 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2] 0
164 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5] 0
165 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3] 0
166 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 2] 0
167 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4] 0
168 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 2] 0
169 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3] 0
170 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2] 0
171 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5, 6] 0
172 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5] 0
173 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4] 0
174 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3] 0
175 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6] 0
176 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2, 3] 0
177 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2] 0
178 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4] 0
179 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 2] 0
180 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3] 0
181 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2] 0
182 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 3, 4] 0
183 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 3] 0
184 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5] 0
185 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3, 2] 0
186 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3] 0
187 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 2] 0
188 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 3] 0
189 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4] 0
190 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 2] 0
191 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3] 0
192 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 4, 5, 6] 0
193 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 4, 5] 0
194 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 4] 0
195 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2] 0
196 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6] 0
197 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5] 0
198 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4] 0
199 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3] 0
200 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3, 4, 5, 6] 0
201 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3, 4, 5, 3, 4] 0
202 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3, 4, 5, 3] 0
203 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3, 4, 5] 0
204 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3, 4, 3] 0
205 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3, 4] 0
206 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3] 0
207 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 4, 5, 6] 0
208 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 4, 5] 0
209 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 4] 0
210 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6] 0
211 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 1
Failure!
sage: A=CartanMatrix(['C',7])
....: c=[6,5,4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,kinv,k+[c[0]],kinv+[c[0]]]).dimensio
....: n()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
....: 
1 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
2 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
3 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] 0
4 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] 0
5 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] 0
6 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] 0
7 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] 0
8 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] 0
9 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5] 0
10 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] 0
11 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] 0
12 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4] 0
13 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 3] 0
14 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2] 0
15 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] 0
16 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4] 0
17 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5] 0
18 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 4] 0
19 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3] 0
20 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2, 5] 0
21 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2] 0
22 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 5] 0
23 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4] 0
24 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2, 3] 0
25 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2] 0
26 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3] 0
27 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 2] 0
28 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5] 0
29 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
30 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
31 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4] 0
32 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 3] 0
33 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2] 0
34 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 4] 0
35 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3] 0
36 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 2] 0
37 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4] 0
38 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2, 3] 0
39 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2] 0
40 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3] 0
41 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 2] 0
42 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1] 0
43 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
44 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
45 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5] 0
46 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 4] 0
47 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3] 0
48 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 5] 0
49 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4] 0
50 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 3] 0
51 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5] 0
52 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4, 3, 4] 0
53 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4, 3] 0
54 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4] 0
55 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 3] 0
56 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2] 0
57 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5, 4, 5] 0
58 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5, 4] 0
59 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5] 0
60 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 4] 0
61 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1] 0
62 [5, 4, 3, 2, 1, 0, 5, 4, 3, 5, 4, 5] 0
63 [5, 4, 3, 2, 1, 0, 5, 4, 3, 5, 4] 0
64 [5, 4, 3, 2, 1, 0, 5, 4, 3, 5] 0
65 [5, 4, 3, 2, 1, 0, 5, 4, 3, 4] 0
66 [5, 4, 3, 2, 1, 0, 5, 4, 3] 0
67 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 5, 2] 0
68 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 5] 0
69 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 2] 0
70 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1] 0
71 [5, 4, 3, 2, 1, 0, 5, 4, 2, 5] 0
72 [5, 4, 3, 2, 1, 0, 5, 4, 2] 0
73 [5, 4, 3, 2, 1, 0, 5, 4, 1, 5] 0
74 [5, 4, 3, 2, 1, 0, 5, 4, 1] 0
75 [5, 4, 3, 2, 1, 0, 5, 4, 5] 0
76 [5, 4, 3, 2, 1, 0, 5, 4] 0
77 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3, 2, 3] 0
78 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3, 2] 0
79 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3] 0
80 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 2] 0
81 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1] 0
82 [5, 4, 3, 2, 1, 0, 5, 3, 2, 3] 0
83 [5, 4, 3, 2, 1, 0, 5, 3, 2] 0
84 [5, 4, 3, 2, 1, 0, 5, 3, 1] 0
85 [5, 4, 3, 2, 1, 0, 5, 3] 0
86 [5, 4, 3, 2, 1, 0, 5, 2, 1, 2] 0
87 [5, 4, 3, 2, 1, 0, 5, 2, 1] 0
88 [5, 4, 3, 2, 1, 0, 5, 2] 0
89 [5, 4, 3, 2, 1, 0, 5, 1] 0
90 [5, 4, 3, 2, 1, 0, 5] 0
91 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
92 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
93 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4] 0
94 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 3] 0
95 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2] 0
96 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 4] 0
97 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3] 0
98 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 2] 0
99 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4] 0
100 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2, 3] 0
101 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2] 0
102 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3] 0
103 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 2] 0
104 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1] 0
105 [5, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3, 4] 0
106 [5, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3] 0
107 [5, 4, 3, 2, 1, 0, 4, 3, 2, 4] 0
108 [5, 4, 3, 2, 1, 0, 4, 3, 2, 3] 0
109 [5, 4, 3, 2, 1, 0, 4, 3, 2] 0
110 [5, 4, 3, 2, 1, 0, 4, 3, 1, 4] 0
111 [5, 4, 3, 2, 1, 0, 4, 3, 1] 0
112 [5, 4, 3, 2, 1, 0, 4, 3, 4] 0
113 [5, 4, 3, 2, 1, 0, 4, 3] 0
114 [5, 4, 3, 2, 1, 0, 4, 2, 1, 2] 0
115 [5, 4, 3, 2, 1, 0, 4, 2, 1] 0
116 [5, 4, 3, 2, 1, 0, 4, 2] 0
117 [5, 4, 3, 2, 1, 0, 4, 1] 0
118 [5, 4, 3, 2, 1, 0, 4] 0
119 [5, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
120 [5, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
121 [5, 4, 3, 2, 1, 0, 3, 2, 1, 3] 0
122 [5, 4, 3, 2, 1, 0, 3, 2, 1, 2] 0
123 [5, 4, 3, 2, 1, 0, 3, 2, 1] 0
124 [5, 4, 3, 2, 1, 0, 3, 2, 3] 0
125 [5, 4, 3, 2, 1, 0, 3, 2] 0
126 [5, 4, 3, 2, 1, 0, 3, 1] 0
127 [5, 4, 3, 2, 1, 0, 3] 0
128 [5, 4, 3, 2, 1, 0, 2, 1, 2] 0
129 [5, 4, 3, 2, 1, 0, 2, 1] 0
130 [5, 4, 3, 2, 1, 0, 2] 0
131 [5, 4, 3, 2, 1, 0, 1] 0
132 [5, 4, 3, 2, 1, 0] 0
133 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
134 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
135 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] 0
136 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] 0
137 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] 0
138 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] 0
139 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] 0
140 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] 0
141 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5] 0
142 [5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] 0
143 [5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] 0
144 [5, 4, 3, 2, 1, 5, 4, 3, 2, 4] 0
145 [5, 4, 3, 2, 1, 5, 4, 3, 2, 3] 0
146 [5, 4, 3, 2, 1, 5, 4, 3, 2] 0
147 [5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] 0
148 [5, 4, 3, 2, 1, 5, 4, 3, 5, 4] 0
149 [5, 4, 3, 2, 1, 5, 4, 3, 5] 0
150 [5, 4, 3, 2, 1, 5, 4, 3, 4] 0
151 [5, 4, 3, 2, 1, 5, 4, 3] 0
152 [5, 4, 3, 2, 1, 5, 4, 2, 5] 0
153 [5, 4, 3, 2, 1, 5, 4, 2] 0
154 [5, 4, 3, 2, 1, 5, 4, 5] 0
155 [5, 4, 3, 2, 1, 5, 4] 0
156 [5, 4, 3, 2, 1, 5, 3, 2, 3] 0
157 [5, 4, 3, 2, 1, 5, 3, 2] 0
158 [5, 4, 3, 2, 1, 5, 3] 0
159 [5, 4, 3, 2, 1, 5, 2] 0
160 [5, 4, 3, 2, 1, 5] 0
161 [5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
162 [5, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
163 [5, 4, 3, 2, 1, 4, 3, 2, 4] 0
164 [5, 4, 3, 2, 1, 4, 3, 2, 3] 0
165 [5, 4, 3, 2, 1, 4, 3, 2] 0
166 [5, 4, 3, 2, 1, 4, 3, 4] 0
167 [5, 4, 3, 2, 1, 4, 3] 0
168 [5, 4, 3, 2, 1, 4, 2] 0
169 [5, 4, 3, 2, 1, 4] 0
170 [5, 4, 3, 2, 1, 3, 2, 3] 0
171 [5, 4, 3, 2, 1, 3, 2] 0
172 [5, 4, 3, 2, 1, 3] 0
173 [5, 4, 3, 2, 1, 2] 0
174 [5, 4, 3, 2, 1] 0
175 [5, 4, 3, 2, 0, 5, 4, 3, 5, 4, 5] 0
176 [5, 4, 3, 2, 0, 5, 4, 3, 5, 4] 0
177 [5, 4, 3, 2, 0, 5, 4, 3, 5] 0
178 [5, 4, 3, 2, 0, 5, 4, 3, 4] 0
179 [5, 4, 3, 2, 0, 5, 4, 3] 0
180 [5, 4, 3, 2, 0, 5, 4, 5] 0
181 [5, 4, 3, 2, 0, 5, 4] 0
182 [5, 4, 3, 2, 0, 5, 3] 0
183 [5, 4, 3, 2, 0, 5] 0
184 [5, 4, 3, 2, 0, 4, 3, 4] 0
185 [5, 4, 3, 2, 0, 4, 3] 0
186 [5, 4, 3, 2, 0, 4] 0
187 [5, 4, 3, 2, 0, 3] 0
188 [5, 4, 3, 2, 0] 0
189 [5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
190 [5, 4, 3, 2, 5, 4, 3, 5, 4] 0
191 [5, 4, 3, 2, 5, 4, 3, 5] 0
192 [5, 4, 3, 2, 5, 4, 3, 4] 0
193 [5, 4, 3, 2, 5, 4, 3] 0
194 [5, 4, 3, 2, 5, 4, 5] 0
195 [5, 4, 3, 2, 5, 4] 0
196 [5, 4, 3, 2, 5, 3] 0
197 [5, 4, 3, 2, 5] 0
198 [5, 4, 3, 2, 4, 3, 4] 0
199 [5, 4, 3, 2, 4, 3] 0
200 [5, 4, 3, 2, 4] 0
201 [5, 4, 3, 2, 3] 0
202 [5, 4, 3, 2] 0
203 [5, 4, 3, 1, 0, 5, 4, 1, 5] 0
204 [5, 4, 3, 1, 0, 5, 4, 1] 0
205 [5, 4, 3, 1, 0, 5, 4, 5] 0
206 [5, 4, 3, 1, 0, 5, 4] 0
207 [5, 4, 3, 1, 0, 5, 1] 0
208 [5, 4, 3, 1, 0, 5] 0
209 [5, 4, 3, 1, 0, 4, 1] 0
210 [5, 4, 3, 1, 0, 4] 0
211 [5, 4, 3, 1, 0, 1] 0
212 [5, 4, 3, 1, 0] 0
213 [5, 4, 3, 1, 5, 4, 5] 0
214 [5, 4, 3, 1, 5, 4] 0
215 [5, 4, 3, 1, 5] 0
216 [5, 4, 3, 1, 4] 0
217 [5, 4, 3, 1] 0
218 [5, 4, 3, 0, 5, 4, 5] 0
219 [5, 4, 3, 0, 5, 4] 0
220 [5, 4, 3, 0, 5] 0
221 [5, 4, 3, 0, 4] 0
222 [5, 4, 3, 0] 0
223 [5, 4, 3, 5, 4, 5] 0
224 [5, 4, 3, 5, 4] 0
225 [5, 4, 3, 5] 0
226 [5, 4, 3, 4] 0
227 [5, 4, 3] 0
228 [5, 4, 2, 1, 0, 5, 2, 1, 2] 0
229 [5, 4, 2, 1, 0, 5, 2, 1] 0
230 [5, 4, 2, 1, 0, 5, 2] 0
231 [5, 4, 2, 1, 0, 5, 1] 0
232 [5, 4, 2, 1, 0, 5] 0
233 [5, 4, 2, 1, 0, 2, 1, 2] 0
234 [5, 4, 2, 1, 0, 2, 1] 0
235 [5, 4, 2, 1, 0, 2] 0
236 [5, 4, 2, 1, 0, 1] 0
237 [5, 4, 2, 1, 0] 0
238 [5, 4, 2, 1, 5, 2] 0
239 [5, 4, 2, 1, 5] 0
240 [5, 4, 2, 1, 2] 0
241 [5, 4, 2, 1] 0
242 [5, 4, 2, 0, 5] 0
243 [5, 4, 2, 0] 0
244 [5, 4, 2, 5] 0
245 [5, 4, 2] 0
246 [5, 4, 1, 0, 5, 1] 0
247 [5, 4, 1, 0, 5] 0
248 [5, 4, 1, 0, 1] 0
249 [5, 4, 1, 0] 0
250 [5, 4, 1, 5] 0
251 [5, 4, 1] 0
252 [5, 4, 0, 5] 0
253 [5, 4, 0] 0
254 [5, 4, 5] 0
255 [5, 4] 0
256 [5, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
257 [5, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
258 [5, 3, 2, 1, 0, 3, 2, 1, 3] 0
259 [5, 3, 2, 1, 0, 3, 2, 1, 2] 0
260 [5, 3, 2, 1, 0, 3, 2, 1] 0
261 [5, 3, 2, 1, 0, 3, 2, 3] 0
262 [5, 3, 2, 1, 0, 3, 2] 0
263 [5, 3, 2, 1, 0, 3, 1] 0
264 [5, 3, 2, 1, 0, 3] 0
265 [5, 3, 2, 1, 0, 2, 1, 2] 0
266 [5, 3, 2, 1, 0, 2, 1] 0
267 [5, 3, 2, 1, 0, 2] 0
268 [5, 3, 2, 1, 0, 1] 0
269 [5, 3, 2, 1, 0] 0
270 [5, 3, 2, 1, 3, 2, 3] 0
271 [5, 3, 2, 1, 3, 2] 0
272 [5, 3, 2, 1, 3] 0
273 [5, 3, 2, 1, 2] 0
274 [5, 3, 2, 1] 0
275 [5, 3, 2, 0, 3] 0
276 [5, 3, 2, 0] 0
277 [5, 3, 2, 3] 0
278 [5, 3, 2] 0
279 [5, 3, 1, 0, 1] 0
280 [5, 3, 1, 0] 0
281 [5, 3, 1] 0
282 [5, 3, 0] 0
283 [5, 3] 0
284 [5, 2, 1, 0, 2, 1, 2] 0
285 [5, 2, 1, 0, 2, 1] 0
286 [5, 2, 1, 0, 2] 0
287 [5, 2, 1, 0, 1] 0
288 [5, 2, 1, 0] 0
289 [5, 2, 1, 2] 0
290 [5, 2, 1] 0
291 [5, 2, 0] 0
292 [5, 2] 0
293 [5, 1, 0, 1] 0
294 [5, 1, 0] 0
295 [5, 1] 0
296 [5, 0] 0
297 [5] 0
298 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
299 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
300 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4] 0
301 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 3] 0
302 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2] 0
303 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 4] 0
304 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3] 0
305 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 2] 0
306 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4] 0
307 [4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2, 3] 0
308 [4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2] 0
309 [4, 3, 2, 1, 0, 4, 3, 2, 1, 3] 0
310 [4, 3, 2, 1, 0, 4, 3, 2, 1, 2] 0
311 [4, 3, 2, 1, 0, 4, 3, 2, 1] 0
312 [4, 3, 2, 1, 0, 4, 3, 2, 4, 3, 4] 0
313 [4, 3, 2, 1, 0, 4, 3, 2, 4, 3] 0
314 [4, 3, 2, 1, 0, 4, 3, 2, 4] 0
315 [4, 3, 2, 1, 0, 4, 3, 2, 3] 0
316 [4, 3, 2, 1, 0, 4, 3, 2] 0
317 [4, 3, 2, 1, 0, 4, 3, 1, 4] 0
318 [4, 3, 2, 1, 0, 4, 3, 1] 0
319 [4, 3, 2, 1, 0, 4, 3, 4] 0
320 [4, 3, 2, 1, 0, 4, 3] 0
321 [4, 3, 2, 1, 0, 4, 2, 1, 2] 0
322 [4, 3, 2, 1, 0, 4, 2, 1] 0
323 [4, 3, 2, 1, 0, 4, 2] 0
324 [4, 3, 2, 1, 0, 4, 1] 0
325 [4, 3, 2, 1, 0, 4] 0
326 [4, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
327 [4, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
328 [4, 3, 2, 1, 0, 3, 2, 1, 3] 0
329 [4, 3, 2, 1, 0, 3, 2, 1, 2] 0
330 [4, 3, 2, 1, 0, 3, 2, 1] 0
331 [4, 3, 2, 1, 0, 3, 2, 3] 0
332 [4, 3, 2, 1, 0, 3, 2] 0
333 [4, 3, 2, 1, 0, 3, 1] 0
334 [4, 3, 2, 1, 0, 3] 0
335 [4, 3, 2, 1, 0, 2, 1, 2] 0
336 [4, 3, 2, 1, 0, 2, 1] 0
337 [4, 3, 2, 1, 0, 2] 0
338 [4, 3, 2, 1, 0, 1] 0
339 [4, 3, 2, 1, 0] 0
340 [4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
341 [4, 3, 2, 1, 4, 3, 2, 4, 3] 0
342 [4, 3, 2, 1, 4, 3, 2, 4] 0
343 [4, 3, 2, 1, 4, 3, 2, 3] 0
344 [4, 3, 2, 1, 4, 3, 2] 0
345 [4, 3, 2, 1, 4, 3, 4] 0
346 [4, 3, 2, 1, 4, 3] 0
347 [4, 3, 2, 1, 4, 2] 0
348 [4, 3, 2, 1, 4] 0
349 [4, 3, 2, 1, 3, 2, 3] 0
350 [4, 3, 2, 1, 3, 2] 0
351 [4, 3, 2, 1, 3] 0
352 [4, 3, 2, 1, 2] 0
353 [4, 3, 2, 1] 0
354 [4, 3, 2, 0, 4, 3, 4] 0
355 [4, 3, 2, 0, 4, 3] 0
356 [4, 3, 2, 0, 4] 0
357 [4, 3, 2, 0, 3] 0
358 [4, 3, 2, 0] 0
359 [4, 3, 2, 4, 3, 4] 0
360 [4, 3, 2, 4, 3] 0
361 [4, 3, 2, 4] 0
362 [4, 3, 2, 3] 0
363 [4, 3, 2] 0
364 [4, 3, 1, 0, 4, 1] 0
365 [4, 3, 1, 0, 4] 0
366 [4, 3, 1, 0, 1] 0
367 [4, 3, 1, 0] 0
368 [4, 3, 1, 4] 0
369 [4, 3, 1] 0
370 [4, 3, 0, 4] 0
371 [4, 3, 0] 0
372 [4, 3, 4] 0
373 [4, 3] 0
374 [4, 2, 1, 0, 2, 1, 2] 0
375 [4, 2, 1, 0, 2, 1] 0
376 [4, 2, 1, 0, 2] 0
377 [4, 2, 1, 0, 1] 0
378 [4, 2, 1, 0] 0
379 [4, 2, 1, 2] 0
380 [4, 2, 1] 0
381 [4, 2, 0] 0
382 [4, 2] 0
383 [4, 1, 0, 1] 0
384 [4, 1, 0] 0
385 [4, 1] 0
386 [4, 0] 0
387 [4] 0
388 [3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
389 [3, 2, 1, 0, 3, 2, 1, 3, 2] 0
390 [3, 2, 1, 0, 3, 2, 1, 3] 0
391 [3, 2, 1, 0, 3, 2, 1, 2] 0
392 [3, 2, 1, 0, 3, 2, 1] 0
393 [3, 2, 1, 0, 3, 2, 3] 0
394 [3, 2, 1, 0, 3, 2] 0
395 [3, 2, 1, 0, 3, 1] 0
396 [3, 2, 1, 0, 3] 0
397 [3, 2, 1, 0, 2, 1, 2] 0
398 [3, 2, 1, 0, 2, 1] 0
399 [3, 2, 1, 0, 2] 0
400 [3, 2, 1, 0, 1] 0
401 [3, 2, 1, 0] 0
402 [3, 2, 1, 3, 2, 3] 0
403 [3, 2, 1, 3, 2] 0
404 [3, 2, 1, 3] 0
405 [3, 2, 1, 2] 0
406 [3, 2, 1] 0
407 [3, 2, 0, 3] 0
408 [3, 2, 0] 0
409 [3, 2, 3] 0
410 [3, 2] 0
411 [3, 1, 0, 1] 0
412 [3, 1, 0] 0
413 [3, 1] 0
414 [3, 0] 0
415 [3] 0
416 [2, 1, 0, 2, 1, 2] 0
417 [2, 1, 0, 2, 1] 0
418 [2, 1, 0, 2] 0
419 [2, 1, 0, 1] 0
420 [2, 1, 0] 0
421 [2, 1, 2] 0
422 [2, 1] 0
423 [2, 0] 0
424 [2] 0
425 [1, 0, 1] 0
426 [1, 0] 0
427 [1] 0
428 [0] 0
429 [] 0
sage: A=CartanMatrix(['C',7])
....: c=[6,5,4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,kinv,[c[0]]+k,[c[0]]+kinv]).dimensio
....: n()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
2 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
3 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] 0
4 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] 0
5 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] 0
6 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] 0
7 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] 0
8 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] 0
9 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5] 0
10 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] 0
11 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] 0
12 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4] 0
13 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 3] 0
14 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2] 0
15 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] 0
16 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4] 0
17 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5] 0
18 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 4] 0
19 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3] 0
20 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2, 5] 0
21 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2] 0
22 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 5] 0
23 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4] 0
24 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2, 3] 0
25 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2] 0
26 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3] 0
27 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 2] 0
28 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5] 0
29 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
30 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
31 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4] 0
32 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 3] 0
33 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2] 0
34 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 4] 0
35 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3] 0
36 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 2] 0
37 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4] 0
38 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2, 3] 0
39 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2] 0
40 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3] 0
41 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 2] 0
42 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1] 0
43 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
44 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
45 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5] 0
46 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 4] 0
47 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3] 0
48 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 5] 0
49 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4] 0
50 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 3] 0
51 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5] 0
52 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4, 3, 4] 0
53 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4, 3] 0
54 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4] 0
55 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 3] 0
56 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2] 0
57 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5, 4, 5] 0
58 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5, 4] 0
59 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5] 0
60 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 4] 0
61 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1] 0
62 [5, 4, 3, 2, 1, 0, 5, 4, 3, 5, 4, 5] 0
63 [5, 4, 3, 2, 1, 0, 5, 4, 3, 5, 4] 0
64 [5, 4, 3, 2, 1, 0, 5, 4, 3, 5] 0
65 [5, 4, 3, 2, 1, 0, 5, 4, 3, 4] 0
66 [5, 4, 3, 2, 1, 0, 5, 4, 3] 0
67 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 5, 2] 0
68 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 5] 0
69 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 2] 0
70 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1] 0
71 [5, 4, 3, 2, 1, 0, 5, 4, 2, 5] 0
72 [5, 4, 3, 2, 1, 0, 5, 4, 2] 0
73 [5, 4, 3, 2, 1, 0, 5, 4, 1, 5] 0
74 [5, 4, 3, 2, 1, 0, 5, 4, 1] 0
75 [5, 4, 3, 2, 1, 0, 5, 4, 5] 0
76 [5, 4, 3, 2, 1, 0, 5, 4] 0
77 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3, 2, 3] 0
78 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3, 2] 0
79 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3] 0
80 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 2] 0
81 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1] 0
82 [5, 4, 3, 2, 1, 0, 5, 3, 2, 3] 0
83 [5, 4, 3, 2, 1, 0, 5, 3, 2] 0
84 [5, 4, 3, 2, 1, 0, 5, 3, 1] 0
85 [5, 4, 3, 2, 1, 0, 5, 3] 0
86 [5, 4, 3, 2, 1, 0, 5, 2, 1, 2] 0
87 [5, 4, 3, 2, 1, 0, 5, 2, 1] 0
88 [5, 4, 3, 2, 1, 0, 5, 2] 0
89 [5, 4, 3, 2, 1, 0, 5, 1] 0
90 [5, 4, 3, 2, 1, 0, 5] 0
91 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
92 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
93 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4] 0
94 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 3] 0
95 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2] 0
96 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 4] 0
97 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3] 0
98 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 2] 0
99 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4] 0
100 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2, 3] 0
101 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2] 0
102 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3] 0
103 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 2] 0
104 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1] 0
105 [5, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3, 4] 0
106 [5, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3] 0
107 [5, 4, 3, 2, 1, 0, 4, 3, 2, 4] 0
108 [5, 4, 3, 2, 1, 0, 4, 3, 2, 3] 0
109 [5, 4, 3, 2, 1, 0, 4, 3, 2] 0
110 [5, 4, 3, 2, 1, 0, 4, 3, 1, 4] 0
111 [5, 4, 3, 2, 1, 0, 4, 3, 1] 0
112 [5, 4, 3, 2, 1, 0, 4, 3, 4] 0
113 [5, 4, 3, 2, 1, 0, 4, 3] 0
114 [5, 4, 3, 2, 1, 0, 4, 2, 1, 2] 0
115 [5, 4, 3, 2, 1, 0, 4, 2, 1] 0
116 [5, 4, 3, 2, 1, 0, 4, 2] 0
117 [5, 4, 3, 2, 1, 0, 4, 1] 0
118 [5, 4, 3, 2, 1, 0, 4] 0
119 [5, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
120 [5, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
121 [5, 4, 3, 2, 1, 0, 3, 2, 1, 3] 0
122 [5, 4, 3, 2, 1, 0, 3, 2, 1, 2] 0
123 [5, 4, 3, 2, 1, 0, 3, 2, 1] 0
124 [5, 4, 3, 2, 1, 0, 3, 2, 3] 0
125 [5, 4, 3, 2, 1, 0, 3, 2] 0
126 [5, 4, 3, 2, 1, 0, 3, 1] 0
127 [5, 4, 3, 2, 1, 0, 3] 0
128 [5, 4, 3, 2, 1, 0, 2, 1, 2] 0
129 [5, 4, 3, 2, 1, 0, 2, 1] 0
130 [5, 4, 3, 2, 1, 0, 2] 0
131 [5, 4, 3, 2, 1, 0, 1] 0
132 [5, 4, 3, 2, 1, 0] 0
133 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 4
Failure!
sage: A=CartanMatrix(['C',7])
....: c=[0,1,2,3,4,5,6]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv_para=list(reversed(inv_sortable(A,c[1:],v)))
....:     kinv=list(reversed(inv_sortable(A,c,v)))
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,kinv,k_inv_para]).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
Cell In [1617], line 9
      7 kinv_para=list(reversed(inv_sortable(A,c[Integer(1):],v)))
      8 kinv=list(reversed(inv_sortable(A,c,v)))
----> 9 d=p_lambda_int(B(A,c),lam(A,v),[k,kinv,k_inv_para]).dimension()
     10 print(num,v,d)
     11 if d!=Integer(0):

NameError: name 'k_inv_para' is not defined
sage: A=CartanMatrix(['C',7])
....: c=[0,1,2,3,4,5,6]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv_para=list(reversed(inv_sortable(A,c[1:],v)))
....:     kinv=list(reversed(inv_sortable(A,c,v)))
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,kinv,kinv_para]).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6] 0
2 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5] 0
3 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4] 0
4 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3] 0
5 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2] 0
6 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1] 3
Failure!
sage: A=CartanMatrix(['C',7])
....: c=[0,1,2,3,4,5,6]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv_para=list(reversed(inv_sortable(A,c[1:],v)))
....:     kinv=list(reversed(inv_sortable(A,c,v)))
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,kinv,kinv_para+[c[0]]]).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6] 0
2 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5] 0
3 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4] 0
4 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3] 0
5 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2] 0
6 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1] 3
Failure!
sage: A=CartanMatrix(['C',7])
....: c=[0,1,2,3,4,5,6]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv_para=list(reversed(inv_sortable(A,c[1:],v)))
....:     kinv=list(reversed(inv_sortable(A,c,v)))
....:     d=p_lambda_int(B(A,c),lam(A,v),[k+[c[0]],kinv,kinv_para+[c[0]]]).dimen
....: sion()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6] 4
Failure!
sage: A=CartanMatrix(['C',7])
....: c=[0,1,2,3,4,5,6]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv_para=list(reversed(inv_sortable(A,c[1:],v)))
....:     kinv=list(reversed(inv_sortable(A,c,v)))
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,k+[c[0]],kinv,kinv_para+[c[0]]]).dim
....: ension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6] 0
2 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5] 0
3 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4] 0
4 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3] 0
5 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2] 0
6 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1] 3
Failure!
sage: A=CartanMatrix(['C',7])
....: c=[6,5,4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,kinv,k+[c[0]],kinv+[c[0]]]).dimensio
....: 
....: n()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
....: 
  Cell In [1622], line 10
    print(num,v,d)
    ^
IndentationError: unexpected indent

sage: A=CartanMatrix(['C',7])
....: c=[6,5,4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,kinv,k+[c[0]],kinv+[c[0]]]).dimensio
....: n()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
....: 
1 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
2 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
3 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] 0
4 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] 0
5 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] 0
6 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] 0
7 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] 0
8 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] 0
9 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5] 0
10 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] 0
11 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] 0
12 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4] 0
13 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 3] 0
14 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2] 0
15 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] 0
16 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4] 0
17 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5] 0
18 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 4] 0
19 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3] 0
20 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2, 5] 0
21 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2] 0
22 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 5] 0
23 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4] 0
24 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2, 3] 0
25 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2] 0
26 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3] 0
27 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 2] 0
28 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5] 0
29 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
30 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
31 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4] 0
32 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 3] 0
33 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2] 0
34 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 4] 0
35 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3] 0
36 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 2] 0
37 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4] 0
38 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2, 3] 0
39 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2] 0
40 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3] 0
41 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 2] 0
42 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1] 0
43 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
44 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
45 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5] 0
46 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 4] 0
47 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3] 0
48 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 5] 0
49 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4] 0
50 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 3] 0
51 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5] 0
52 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4, 3, 4] 0
53 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4, 3] 0
54 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4] 0
55 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 3] 0
56 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2] 0
57 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5, 4, 5] 0
58 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5, 4] 0
59 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5] 0
60 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 4] 0
61 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1] 0
62 [5, 4, 3, 2, 1, 0, 5, 4, 3, 5, 4, 5] 0
63 [5, 4, 3, 2, 1, 0, 5, 4, 3, 5, 4] 0
64 [5, 4, 3, 2, 1, 0, 5, 4, 3, 5] 0
65 [5, 4, 3, 2, 1, 0, 5, 4, 3, 4] 0
66 [5, 4, 3, 2, 1, 0, 5, 4, 3] 0
67 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 5, 2] 0
68 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 5] 0
69 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 2] 0
70 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1] 0
71 [5, 4, 3, 2, 1, 0, 5, 4, 2, 5] 0
72 [5, 4, 3, 2, 1, 0, 5, 4, 2] 0
73 [5, 4, 3, 2, 1, 0, 5, 4, 1, 5] 0
74 [5, 4, 3, 2, 1, 0, 5, 4, 1] 0
75 [5, 4, 3, 2, 1, 0, 5, 4, 5] 0
76 [5, 4, 3, 2, 1, 0, 5, 4] 0
77 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3, 2, 3] 0
78 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3, 2] 0
79 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3] 0
80 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 2] 0
81 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1] 0
82 [5, 4, 3, 2, 1, 0, 5, 3, 2, 3] 0
83 [5, 4, 3, 2, 1, 0, 5, 3, 2] 0
84 [5, 4, 3, 2, 1, 0, 5, 3, 1] 0
85 [5, 4, 3, 2, 1, 0, 5, 3] 0
86 [5, 4, 3, 2, 1, 0, 5, 2, 1, 2] 0
87 [5, 4, 3, 2, 1, 0, 5, 2, 1] 0
88 [5, 4, 3, 2, 1, 0, 5, 2] 0
89 [5, 4, 3, 2, 1, 0, 5, 1] 0
90 [5, 4, 3, 2, 1, 0, 5] 0
91 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
92 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
93 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4] 0
94 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 3] 0
95 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2] 0
96 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 4] 0
97 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3] 0
98 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 2] 0
99 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4] 0
100 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2, 3] 0
101 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2] 0
102 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3] 0
103 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 2] 0
104 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1] 0
105 [5, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3, 4] 0
106 [5, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3] 0
107 [5, 4, 3, 2, 1, 0, 4, 3, 2, 4] 0
108 [5, 4, 3, 2, 1, 0, 4, 3, 2, 3] 0
109 [5, 4, 3, 2, 1, 0, 4, 3, 2] 0
110 [5, 4, 3, 2, 1, 0, 4, 3, 1, 4] 0
111 [5, 4, 3, 2, 1, 0, 4, 3, 1] 0
112 [5, 4, 3, 2, 1, 0, 4, 3, 4] 0
113 [5, 4, 3, 2, 1, 0, 4, 3] 0
114 [5, 4, 3, 2, 1, 0, 4, 2, 1, 2] 0
115 [5, 4, 3, 2, 1, 0, 4, 2, 1] 0
116 [5, 4, 3, 2, 1, 0, 4, 2] 0
117 [5, 4, 3, 2, 1, 0, 4, 1] 0
118 [5, 4, 3, 2, 1, 0, 4] 0
119 [5, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
120 [5, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
121 [5, 4, 3, 2, 1, 0, 3, 2, 1, 3] 0
122 [5, 4, 3, 2, 1, 0, 3, 2, 1, 2] 0
123 [5, 4, 3, 2, 1, 0, 3, 2, 1] 0
124 [5, 4, 3, 2, 1, 0, 3, 2, 3] 0
125 [5, 4, 3, 2, 1, 0, 3, 2] 0
126 [5, 4, 3, 2, 1, 0, 3, 1] 0
127 [5, 4, 3, 2, 1, 0, 3] 0
128 [5, 4, 3, 2, 1, 0, 2, 1, 2] 0
129 [5, 4, 3, 2, 1, 0, 2, 1] 0
130 [5, 4, 3, 2, 1, 0, 2] 0
131 [5, 4, 3, 2, 1, 0, 1] 0
132 [5, 4, 3, 2, 1, 0] 0
133 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
134 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
135 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] 0
136 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] 0
137 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] 0
138 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] 0
139 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] 0
140 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] 0
141 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5] 0
142 [5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] 0
143 [5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] 0
144 [5, 4, 3, 2, 1, 5, 4, 3, 2, 4] 0
145 [5, 4, 3, 2, 1, 5, 4, 3, 2, 3] 0
146 [5, 4, 3, 2, 1, 5, 4, 3, 2] 0
147 [5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] 0
148 [5, 4, 3, 2, 1, 5, 4, 3, 5, 4] 0
149 [5, 4, 3, 2, 1, 5, 4, 3, 5] 0
150 [5, 4, 3, 2, 1, 5, 4, 3, 4] 0
151 [5, 4, 3, 2, 1, 5, 4, 3] 0
152 [5, 4, 3, 2, 1, 5, 4, 2, 5] 0
153 [5, 4, 3, 2, 1, 5, 4, 2] 0
154 [5, 4, 3, 2, 1, 5, 4, 5] 0
155 [5, 4, 3, 2, 1, 5, 4] 0
156 [5, 4, 3, 2, 1, 5, 3, 2, 3] 0
157 [5, 4, 3, 2, 1, 5, 3, 2] 0
158 [5, 4, 3, 2, 1, 5, 3] 0
159 [5, 4, 3, 2, 1, 5, 2] 0
160 [5, 4, 3, 2, 1, 5] 0
161 [5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
162 [5, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
163 [5, 4, 3, 2, 1, 4, 3, 2, 4] 0
164 [5, 4, 3, 2, 1, 4, 3, 2, 3] 0
165 [5, 4, 3, 2, 1, 4, 3, 2] 0
166 [5, 4, 3, 2, 1, 4, 3, 4] 0
167 [5, 4, 3, 2, 1, 4, 3] 0
168 [5, 4, 3, 2, 1, 4, 2] 0
169 [5, 4, 3, 2, 1, 4] 0
170 [5, 4, 3, 2, 1, 3, 2, 3] 0
171 [5, 4, 3, 2, 1, 3, 2] 0
172 [5, 4, 3, 2, 1, 3] 0
173 [5, 4, 3, 2, 1, 2] 0
174 [5, 4, 3, 2, 1] 0
175 [5, 4, 3, 2, 0, 5, 4, 3, 5, 4, 5] 0
176 [5, 4, 3, 2, 0, 5, 4, 3, 5, 4] 0
177 [5, 4, 3, 2, 0, 5, 4, 3, 5] 0
178 [5, 4, 3, 2, 0, 5, 4, 3, 4] 0
179 [5, 4, 3, 2, 0, 5, 4, 3] 0
180 [5, 4, 3, 2, 0, 5, 4, 5] 0
181 [5, 4, 3, 2, 0, 5, 4] 0
182 [5, 4, 3, 2, 0, 5, 3] 0
183 [5, 4, 3, 2, 0, 5] 0
184 [5, 4, 3, 2, 0, 4, 3, 4] 0
185 [5, 4, 3, 2, 0, 4, 3] 0
186 [5, 4, 3, 2, 0, 4] 0
187 [5, 4, 3, 2, 0, 3] 0
188 [5, 4, 3, 2, 0] 0
189 [5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
190 [5, 4, 3, 2, 5, 4, 3, 5, 4] 0
191 [5, 4, 3, 2, 5, 4, 3, 5] 0
192 [5, 4, 3, 2, 5, 4, 3, 4] 0
193 [5, 4, 3, 2, 5, 4, 3] 0
194 [5, 4, 3, 2, 5, 4, 5] 0
195 [5, 4, 3, 2, 5, 4] 0
196 [5, 4, 3, 2, 5, 3] 0
197 [5, 4, 3, 2, 5] 0
198 [5, 4, 3, 2, 4, 3, 4] 0
199 [5, 4, 3, 2, 4, 3] 0
200 [5, 4, 3, 2, 4] 0
201 [5, 4, 3, 2, 3] 0
202 [5, 4, 3, 2] 0
203 [5, 4, 3, 1, 0, 5, 4, 1, 5] 0
204 [5, 4, 3, 1, 0, 5, 4, 1] 0
205 [5, 4, 3, 1, 0, 5, 4, 5] 0
206 [5, 4, 3, 1, 0, 5, 4] 0
207 [5, 4, 3, 1, 0, 5, 1] 0
208 [5, 4, 3, 1, 0, 5] 0
209 [5, 4, 3, 1, 0, 4, 1] 0
210 [5, 4, 3, 1, 0, 4] 0
211 [5, 4, 3, 1, 0, 1] 0
212 [5, 4, 3, 1, 0] 0
213 [5, 4, 3, 1, 5, 4, 5] 0
214 [5, 4, 3, 1, 5, 4] 0
215 [5, 4, 3, 1, 5] 0
216 [5, 4, 3, 1, 4] 0
217 [5, 4, 3, 1] 0
218 [5, 4, 3, 0, 5, 4, 5] 0
219 [5, 4, 3, 0, 5, 4] 0
220 [5, 4, 3, 0, 5] 0
221 [5, 4, 3, 0, 4] 0
222 [5, 4, 3, 0] 0
223 [5, 4, 3, 5, 4, 5] 0
224 [5, 4, 3, 5, 4] 0
225 [5, 4, 3, 5] 0
226 [5, 4, 3, 4] 0
227 [5, 4, 3] 0
228 [5, 4, 2, 1, 0, 5, 2, 1, 2] 0
229 [5, 4, 2, 1, 0, 5, 2, 1] 0
230 [5, 4, 2, 1, 0, 5, 2] 0
231 [5, 4, 2, 1, 0, 5, 1] 0
232 [5, 4, 2, 1, 0, 5] 0
233 [5, 4, 2, 1, 0, 2, 1, 2] 0
234 [5, 4, 2, 1, 0, 2, 1] 0
235 [5, 4, 2, 1, 0, 2] 0
236 [5, 4, 2, 1, 0, 1] 0
237 [5, 4, 2, 1, 0] 0
238 [5, 4, 2, 1, 5, 2] 0
239 [5, 4, 2, 1, 5] 0
240 [5, 4, 2, 1, 2] 0
241 [5, 4, 2, 1] 0
242 [5, 4, 2, 0, 5] 0
243 [5, 4, 2, 0] 0
244 [5, 4, 2, 5] 0
245 [5, 4, 2] 0
246 [5, 4, 1, 0, 5, 1] 0
247 [5, 4, 1, 0, 5] 0
248 [5, 4, 1, 0, 1] 0
249 [5, 4, 1, 0] 0
250 [5, 4, 1, 5] 0
251 [5, 4, 1] 0
252 [5, 4, 0, 5] 0
253 [5, 4, 0] 0
254 [5, 4, 5] 0
255 [5, 4] 0
256 [5, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
257 [5, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
258 [5, 3, 2, 1, 0, 3, 2, 1, 3] 0
259 [5, 3, 2, 1, 0, 3, 2, 1, 2] 0
260 [5, 3, 2, 1, 0, 3, 2, 1] 0
261 [5, 3, 2, 1, 0, 3, 2, 3] 0
262 [5, 3, 2, 1, 0, 3, 2] 0
263 [5, 3, 2, 1, 0, 3, 1] 0
264 [5, 3, 2, 1, 0, 3] 0
265 [5, 3, 2, 1, 0, 2, 1, 2] 0
266 [5, 3, 2, 1, 0, 2, 1] 0
267 [5, 3, 2, 1, 0, 2] 0
268 [5, 3, 2, 1, 0, 1] 0
269 [5, 3, 2, 1, 0] 0
270 [5, 3, 2, 1, 3, 2, 3] 0
271 [5, 3, 2, 1, 3, 2] 0
272 [5, 3, 2, 1, 3] 0
273 [5, 3, 2, 1, 2] 0
274 [5, 3, 2, 1] 0
275 [5, 3, 2, 0, 3] 0
276 [5, 3, 2, 0] 0
277 [5, 3, 2, 3] 0
278 [5, 3, 2] 0
279 [5, 3, 1, 0, 1] 0
280 [5, 3, 1, 0] 0
281 [5, 3, 1] 0
282 [5, 3, 0] 0
283 [5, 3] 0
284 [5, 2, 1, 0, 2, 1, 2] 0
285 [5, 2, 1, 0, 2, 1] 0
286 [5, 2, 1, 0, 2] 0
287 [5, 2, 1, 0, 1] 0
288 [5, 2, 1, 0] 0
289 [5, 2, 1, 2] 0
290 [5, 2, 1] 0
291 [5, 2, 0] 0
292 [5, 2] 0
293 [5, 1, 0, 1] 0
294 [5, 1, 0] 0
295 [5, 1] 0
296 [5, 0] 0
297 [5] 0
298 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
299 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
300 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4] 0
301 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 3] 0
302 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2] 0
303 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 4] 0
304 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3] 0
305 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 2] 0
306 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4] 0
307 [4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2, 3] 0
308 [4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2] 0
309 [4, 3, 2, 1, 0, 4, 3, 2, 1, 3] 0
310 [4, 3, 2, 1, 0, 4, 3, 2, 1, 2] 0
311 [4, 3, 2, 1, 0, 4, 3, 2, 1] 0
312 [4, 3, 2, 1, 0, 4, 3, 2, 4, 3, 4] 0
313 [4, 3, 2, 1, 0, 4, 3, 2, 4, 3] 0
314 [4, 3, 2, 1, 0, 4, 3, 2, 4] 0
315 [4, 3, 2, 1, 0, 4, 3, 2, 3] 0
316 [4, 3, 2, 1, 0, 4, 3, 2] 0
317 [4, 3, 2, 1, 0, 4, 3, 1, 4] 0
318 [4, 3, 2, 1, 0, 4, 3, 1] 0
319 [4, 3, 2, 1, 0, 4, 3, 4] 0
320 [4, 3, 2, 1, 0, 4, 3] 0
321 [4, 3, 2, 1, 0, 4, 2, 1, 2] 0
322 [4, 3, 2, 1, 0, 4, 2, 1] 0
323 [4, 3, 2, 1, 0, 4, 2] 0
324 [4, 3, 2, 1, 0, 4, 1] 0
325 [4, 3, 2, 1, 0, 4] 0
326 [4, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
327 [4, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
328 [4, 3, 2, 1, 0, 3, 2, 1, 3] 0
329 [4, 3, 2, 1, 0, 3, 2, 1, 2] 0
330 [4, 3, 2, 1, 0, 3, 2, 1] 0
331 [4, 3, 2, 1, 0, 3, 2, 3] 0
332 [4, 3, 2, 1, 0, 3, 2] 0
333 [4, 3, 2, 1, 0, 3, 1] 0
334 [4, 3, 2, 1, 0, 3] 0
335 [4, 3, 2, 1, 0, 2, 1, 2] 0
336 [4, 3, 2, 1, 0, 2, 1] 0
337 [4, 3, 2, 1, 0, 2] 0
338 [4, 3, 2, 1, 0, 1] 0
339 [4, 3, 2, 1, 0] 0
340 [4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
341 [4, 3, 2, 1, 4, 3, 2, 4, 3] 0
342 [4, 3, 2, 1, 4, 3, 2, 4] 0
343 [4, 3, 2, 1, 4, 3, 2, 3] 0
344 [4, 3, 2, 1, 4, 3, 2] 0
345 [4, 3, 2, 1, 4, 3, 4] 0
346 [4, 3, 2, 1, 4, 3] 0
347 [4, 3, 2, 1, 4, 2] 0
348 [4, 3, 2, 1, 4] 0
349 [4, 3, 2, 1, 3, 2, 3] 0
350 [4, 3, 2, 1, 3, 2] 0
351 [4, 3, 2, 1, 3] 0
352 [4, 3, 2, 1, 2] 0
353 [4, 3, 2, 1] 0
354 [4, 3, 2, 0, 4, 3, 4] 0
355 [4, 3, 2, 0, 4, 3] 0
356 [4, 3, 2, 0, 4] 0
357 [4, 3, 2, 0, 3] 0
358 [4, 3, 2, 0] 0
359 [4, 3, 2, 4, 3, 4] 0
360 [4, 3, 2, 4, 3] 0
361 [4, 3, 2, 4] 0
362 [4, 3, 2, 3] 0
363 [4, 3, 2] 0
364 [4, 3, 1, 0, 4, 1] 0
365 [4, 3, 1, 0, 4] 0
366 [4, 3, 1, 0, 1] 0
367 [4, 3, 1, 0] 0
368 [4, 3, 1, 4] 0
369 [4, 3, 1] 0
370 [4, 3, 0, 4] 0
371 [4, 3, 0] 0
372 [4, 3, 4] 0
373 [4, 3] 0
374 [4, 2, 1, 0, 2, 1, 2] 0
375 [4, 2, 1, 0, 2, 1] 0
376 [4, 2, 1, 0, 2] 0
377 [4, 2, 1, 0, 1] 0
378 [4, 2, 1, 0] 0
379 [4, 2, 1, 2] 0
380 [4, 2, 1] 0
381 [4, 2, 0] 0
382 [4, 2] 0
383 [4, 1, 0, 1] 0
384 [4, 1, 0] 0
385 [4, 1] 0
386 [4, 0] 0
387 [4] 0
388 [3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
389 [3, 2, 1, 0, 3, 2, 1, 3, 2] 0
390 [3, 2, 1, 0, 3, 2, 1, 3] 0
391 [3, 2, 1, 0, 3, 2, 1, 2] 0
392 [3, 2, 1, 0, 3, 2, 1] 0
393 [3, 2, 1, 0, 3, 2, 3] 0
394 [3, 2, 1, 0, 3, 2] 0
395 [3, 2, 1, 0, 3, 1] 0
396 [3, 2, 1, 0, 3] 0
397 [3, 2, 1, 0, 2, 1, 2] 0
398 [3, 2, 1, 0, 2, 1] 0
399 [3, 2, 1, 0, 2] 0
400 [3, 2, 1, 0, 1] 0
401 [3, 2, 1, 0] 0
402 [3, 2, 1, 3, 2, 3] 0
403 [3, 2, 1, 3, 2] 0
404 [3, 2, 1, 3] 0
405 [3, 2, 1, 2] 0
406 [3, 2, 1] 0
407 [3, 2, 0, 3] 0
408 [3, 2, 0] 0
409 [3, 2, 3] 0
410 [3, 2] 0
411 [3, 1, 0, 1] 0
412 [3, 1, 0] 0
413 [3, 1] 0
414 [3, 0] 0
415 [3] 0
416 [2, 1, 0, 2, 1, 2] 0
417 [2, 1, 0, 2, 1] 0
418 [2, 1, 0, 2] 0
419 [2, 1, 0, 1] 0
420 [2, 1, 0] 0
421 [2, 1, 2] 0
422 [2, 1] 0
423 [2, 0] 0
424 [2] 0
425 [1, 0, 1] 0
426 [1, 0] 0
427 [1] 0
428 [0] 0
429 [] 0
sage: A=CartanMatrix(['A',3])
....: c=[2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,kinv,k+[c[0]],kinv+[c[0]]]).dimensio
....: n()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [1, 0, 1] 0
2 [1, 0] 0
3 [1] 0
4 [0] 0
5 [] 0
sage: A=CartanMatrix(['A',5])
....: c=[4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,kinv,k+[c[0]],kinv+[c[0]]]).dimensio
....: n()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
2 [3, 2, 1, 0, 3, 2, 1, 3, 2] 0
3 [3, 2, 1, 0, 3, 2, 1, 3] 0
4 [3, 2, 1, 0, 3, 2, 1, 2] 0
5 [3, 2, 1, 0, 3, 2, 1] 0
6 [3, 2, 1, 0, 3, 2, 3] 0
7 [3, 2, 1, 0, 3, 2] 0
8 [3, 2, 1, 0, 3, 1] 0
9 [3, 2, 1, 0, 3] 0
10 [3, 2, 1, 0, 2, 1, 2] 0
11 [3, 2, 1, 0, 2, 1] 0
12 [3, 2, 1, 0, 2] 0
13 [3, 2, 1, 0, 1] 0
14 [3, 2, 1, 0] 0
15 [3, 2, 1, 3, 2, 3] 0
16 [3, 2, 1, 3, 2] 0
17 [3, 2, 1, 3] 0
18 [3, 2, 1, 2] 0
19 [3, 2, 1] 0
20 [3, 2, 0, 3] 0
21 [3, 2, 0] 0
22 [3, 2, 3] 0
23 [3, 2] 0
24 [3, 1, 0, 1] 0
25 [3, 1, 0] 0
26 [3, 1] 0
27 [3, 0] 0
28 [3] 0
29 [2, 1, 0, 2, 1, 2] 0
30 [2, 1, 0, 2, 1] 0
31 [2, 1, 0, 2] 0
32 [2, 1, 0, 1] 0
33 [2, 1, 0] 0
34 [2, 1, 2] 0
35 [2, 1] 0
36 [2, 0] 0
37 [2] 0
38 [1, 0, 1] 0
39 [1, 0] 0
40 [1] 0
41 [0] 0
42 [] 0
sage: A=CartanMatrix(['A',7])
....: c=[6,54,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,kinv,k+[c[0]],kinv+[c[0]]]).dimensio
....: n()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
Cell In [1626], line 4
      2 c=[Integer(6),Integer(54),Integer(3),Integer(2),Integer(1),Integer(0)]
      3 num=Integer(0)
----> 4 for v in sortables(A,c[Integer(1):]):
      5     num+=Integer(1)
      6     k=list(reversed(v))

File ~/git/affine_dominance/software/domination5.py:261, in sortables(A, c)
    260 def sortables(A,c):
--> 261     yield from sortables_remaining(A,c,[],vector([1]*A.nrows()))

File ~/git/affine_dominance/software/domination5.py:267, in sortables_remaining(A, c, sort, vec)
    265     yield sort
    266 else:
--> 267     if vec[c[0]]>0:
    268         yield from sortables_remaining(A,c[1:]+[c[0]],sort+[c[0]],reflect_once(A,vec,c[0]))
    269     yield from sortables_remaining(A,c[1:],sort,vec)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/modules/free_module_element.pyx:1842, in sage.modules.free_module_element.FreeModuleElement.__getitem__ (build/cythonized/sage/modules/free_module_element.c:19571)()
   1840     n += d
   1841 if n < 0 or n >= d:
-> 1842     raise IndexError("vector index out of range")
   1843 return self.get_unsafe(n)
   1844 

IndexError: vector index out of range
sage: A=CartanMatrix(['A',7])
....: c=[6,5,4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,kinv,k+[c[0]],kinv+[c[0]]]).dimensio
....: n()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
2 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
3 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] 0
4 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] 0
5 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] 0
6 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] 0
7 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] 0
8 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] 0
9 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5] 0
10 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] 0
11 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] 0
12 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4] 0
13 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 3] 0
14 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2] 0
15 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] 0
16 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4] 0
17 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5] 0
18 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 4] 0
19 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3] 0
20 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2, 5] 0
21 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2] 0
22 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 5] 0
23 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4] 0
24 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2, 3] 0
25 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2] 0
26 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3] 0
27 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 2] 0
28 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5] 0
29 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
30 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
31 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4] 0
32 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 3] 0
33 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2] 0
34 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 4] 0
35 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3] 0
36 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 2] 0
37 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4] 0
38 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2, 3] 0
39 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2] 0
40 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3] 0
41 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 2] 0
42 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1] 0
43 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
44 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
45 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5] 0
46 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 4] 0
47 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3] 0
48 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 5] 0
49 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4] 0
50 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 3] 0
51 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5] 0
52 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4, 3, 4] 0
53 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4, 3] 0
54 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4] 0
55 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 3] 0
56 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2] 0
57 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5, 4, 5] 0
58 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5, 4] 0
59 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5] 0
60 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 4] 0
61 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1] 0
62 [5, 4, 3, 2, 1, 0, 5, 4, 3, 5, 4, 5] 0
63 [5, 4, 3, 2, 1, 0, 5, 4, 3, 5, 4] 0
64 [5, 4, 3, 2, 1, 0, 5, 4, 3, 5] 0
65 [5, 4, 3, 2, 1, 0, 5, 4, 3, 4] 0
66 [5, 4, 3, 2, 1, 0, 5, 4, 3] 0
67 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 5, 2] 0
68 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 5] 0
69 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 2] 0
70 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1] 0
71 [5, 4, 3, 2, 1, 0, 5, 4, 2, 5] 0
72 [5, 4, 3, 2, 1, 0, 5, 4, 2] 0
73 [5, 4, 3, 2, 1, 0, 5, 4, 1, 5] 0
74 [5, 4, 3, 2, 1, 0, 5, 4, 1] 0
75 [5, 4, 3, 2, 1, 0, 5, 4, 5] 0
76 [5, 4, 3, 2, 1, 0, 5, 4] 0
77 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3, 2, 3] 0
78 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3, 2] 0
79 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3] 0
80 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 2] 0
81 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1] 0
82 [5, 4, 3, 2, 1, 0, 5, 3, 2, 3] 0
83 [5, 4, 3, 2, 1, 0, 5, 3, 2] 0
84 [5, 4, 3, 2, 1, 0, 5, 3, 1] 0
85 [5, 4, 3, 2, 1, 0, 5, 3] 0
86 [5, 4, 3, 2, 1, 0, 5, 2, 1, 2] 0
87 [5, 4, 3, 2, 1, 0, 5, 2, 1] 0
88 [5, 4, 3, 2, 1, 0, 5, 2] 0
89 [5, 4, 3, 2, 1, 0, 5, 1] 0
90 [5, 4, 3, 2, 1, 0, 5] 0
91 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
92 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
93 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4] 0
94 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 3] 0
95 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2] 0
96 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 4] 0
97 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3] 0
98 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 2] 0
99 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4] 0
100 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2, 3] 0
101 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2] 0
102 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3] 0
103 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 2] 0
104 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1] 0
105 [5, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3, 4] 0
106 [5, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3] 0
107 [5, 4, 3, 2, 1, 0, 4, 3, 2, 4] 0
108 [5, 4, 3, 2, 1, 0, 4, 3, 2, 3] 0
109 [5, 4, 3, 2, 1, 0, 4, 3, 2] 0
110 [5, 4, 3, 2, 1, 0, 4, 3, 1, 4] 0
111 [5, 4, 3, 2, 1, 0, 4, 3, 1] 0
112 [5, 4, 3, 2, 1, 0, 4, 3, 4] 0
113 [5, 4, 3, 2, 1, 0, 4, 3] 0
114 [5, 4, 3, 2, 1, 0, 4, 2, 1, 2] 0
115 [5, 4, 3, 2, 1, 0, 4, 2, 1] 0
116 [5, 4, 3, 2, 1, 0, 4, 2] 0
117 [5, 4, 3, 2, 1, 0, 4, 1] 0
118 [5, 4, 3, 2, 1, 0, 4] 0
119 [5, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
120 [5, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
121 [5, 4, 3, 2, 1, 0, 3, 2, 1, 3] 0
122 [5, 4, 3, 2, 1, 0, 3, 2, 1, 2] 0
123 [5, 4, 3, 2, 1, 0, 3, 2, 1] 0
124 [5, 4, 3, 2, 1, 0, 3, 2, 3] 0
125 [5, 4, 3, 2, 1, 0, 3, 2] 0
126 [5, 4, 3, 2, 1, 0, 3, 1] 0
127 [5, 4, 3, 2, 1, 0, 3] 0
128 [5, 4, 3, 2, 1, 0, 2, 1, 2] 0
129 [5, 4, 3, 2, 1, 0, 2, 1] 0
130 [5, 4, 3, 2, 1, 0, 2] 0
131 [5, 4, 3, 2, 1, 0, 1] 0
132 [5, 4, 3, 2, 1, 0] 0
133 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
134 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
135 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] 0
136 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] 0
137 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] 0
138 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] 0
139 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] 0
140 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] 0
141 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5] 0
142 [5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] 0
143 [5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] 0
144 [5, 4, 3, 2, 1, 5, 4, 3, 2, 4] 0
145 [5, 4, 3, 2, 1, 5, 4, 3, 2, 3] 0
146 [5, 4, 3, 2, 1, 5, 4, 3, 2] 0
147 [5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] 0
148 [5, 4, 3, 2, 1, 5, 4, 3, 5, 4] 0
149 [5, 4, 3, 2, 1, 5, 4, 3, 5] 0
150 [5, 4, 3, 2, 1, 5, 4, 3, 4] 0
151 [5, 4, 3, 2, 1, 5, 4, 3] 0
152 [5, 4, 3, 2, 1, 5, 4, 2, 5] 0
153 [5, 4, 3, 2, 1, 5, 4, 2] 0
154 [5, 4, 3, 2, 1, 5, 4, 5] 0
155 [5, 4, 3, 2, 1, 5, 4] 0
156 [5, 4, 3, 2, 1, 5, 3, 2, 3] 0
157 [5, 4, 3, 2, 1, 5, 3, 2] 0
158 [5, 4, 3, 2, 1, 5, 3] 0
159 [5, 4, 3, 2, 1, 5, 2] 0
160 [5, 4, 3, 2, 1, 5] 0
161 [5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
162 [5, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
163 [5, 4, 3, 2, 1, 4, 3, 2, 4] 0
164 [5, 4, 3, 2, 1, 4, 3, 2, 3] 0
165 [5, 4, 3, 2, 1, 4, 3, 2] 0
166 [5, 4, 3, 2, 1, 4, 3, 4] 0
167 [5, 4, 3, 2, 1, 4, 3] 0
168 [5, 4, 3, 2, 1, 4, 2] 0
169 [5, 4, 3, 2, 1, 4] 0
170 [5, 4, 3, 2, 1, 3, 2, 3] 0
171 [5, 4, 3, 2, 1, 3, 2] 0
172 [5, 4, 3, 2, 1, 3] 0
173 [5, 4, 3, 2, 1, 2] 0
174 [5, 4, 3, 2, 1] 0
175 [5, 4, 3, 2, 0, 5, 4, 3, 5, 4, 5] 0
176 [5, 4, 3, 2, 0, 5, 4, 3, 5, 4] 0
177 [5, 4, 3, 2, 0, 5, 4, 3, 5] 0
178 [5, 4, 3, 2, 0, 5, 4, 3, 4] 0
179 [5, 4, 3, 2, 0, 5, 4, 3] 0
180 [5, 4, 3, 2, 0, 5, 4, 5] 0
181 [5, 4, 3, 2, 0, 5, 4] 0
182 [5, 4, 3, 2, 0, 5, 3] 0
183 [5, 4, 3, 2, 0, 5] 0
184 [5, 4, 3, 2, 0, 4, 3, 4] 0
185 [5, 4, 3, 2, 0, 4, 3] 0
186 [5, 4, 3, 2, 0, 4] 0
187 [5, 4, 3, 2, 0, 3] 0
188 [5, 4, 3, 2, 0] 0
189 [5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
190 [5, 4, 3, 2, 5, 4, 3, 5, 4] 0
191 [5, 4, 3, 2, 5, 4, 3, 5] 0
192 [5, 4, 3, 2, 5, 4, 3, 4] 0
193 [5, 4, 3, 2, 5, 4, 3] 0
194 [5, 4, 3, 2, 5, 4, 5] 0
195 [5, 4, 3, 2, 5, 4] 0
196 [5, 4, 3, 2, 5, 3] 0
197 [5, 4, 3, 2, 5] 0
198 [5, 4, 3, 2, 4, 3, 4] 0
199 [5, 4, 3, 2, 4, 3] 0
200 [5, 4, 3, 2, 4] 0
201 [5, 4, 3, 2, 3] 0
202 [5, 4, 3, 2] 0
203 [5, 4, 3, 1, 0, 5, 4, 1, 5] 0
204 [5, 4, 3, 1, 0, 5, 4, 1] 0
205 [5, 4, 3, 1, 0, 5, 4, 5] 0
206 [5, 4, 3, 1, 0, 5, 4] 0
207 [5, 4, 3, 1, 0, 5, 1] 0
208 [5, 4, 3, 1, 0, 5] 0
209 [5, 4, 3, 1, 0, 4, 1] 0
210 [5, 4, 3, 1, 0, 4] 0
211 [5, 4, 3, 1, 0, 1] 0
212 [5, 4, 3, 1, 0] 0
213 [5, 4, 3, 1, 5, 4, 5] 0
214 [5, 4, 3, 1, 5, 4] 0
215 [5, 4, 3, 1, 5] 0
216 [5, 4, 3, 1, 4] 0
217 [5, 4, 3, 1] 0
218 [5, 4, 3, 0, 5, 4, 5] 0
219 [5, 4, 3, 0, 5, 4] 0
220 [5, 4, 3, 0, 5] 0
221 [5, 4, 3, 0, 4] 0
222 [5, 4, 3, 0] 0
223 [5, 4, 3, 5, 4, 5] 0
224 [5, 4, 3, 5, 4] 0
225 [5, 4, 3, 5] 0
226 [5, 4, 3, 4] 0
227 [5, 4, 3] 0
228 [5, 4, 2, 1, 0, 5, 2, 1, 2] 0
229 [5, 4, 2, 1, 0, 5, 2, 1] 0
230 [5, 4, 2, 1, 0, 5, 2] 0
231 [5, 4, 2, 1, 0, 5, 1] 0
232 [5, 4, 2, 1, 0, 5] 0
233 [5, 4, 2, 1, 0, 2, 1, 2] 0
234 [5, 4, 2, 1, 0, 2, 1] 0
235 [5, 4, 2, 1, 0, 2] 0
236 [5, 4, 2, 1, 0, 1] 0
237 [5, 4, 2, 1, 0] 0
238 [5, 4, 2, 1, 5, 2] 0
239 [5, 4, 2, 1, 5] 0
240 [5, 4, 2, 1, 2] 0
241 [5, 4, 2, 1] 0
242 [5, 4, 2, 0, 5] 0
243 [5, 4, 2, 0] 0
244 [5, 4, 2, 5] 0
245 [5, 4, 2] 0
246 [5, 4, 1, 0, 5, 1] 0
247 [5, 4, 1, 0, 5] 0
248 [5, 4, 1, 0, 1] 0
249 [5, 4, 1, 0] 0
250 [5, 4, 1, 5] 0
251 [5, 4, 1] 0
252 [5, 4, 0, 5] 0
253 [5, 4, 0] 0
254 [5, 4, 5] 0
255 [5, 4] 0
256 [5, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
257 [5, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
258 [5, 3, 2, 1, 0, 3, 2, 1, 3] 0
259 [5, 3, 2, 1, 0, 3, 2, 1, 2] 0
260 [5, 3, 2, 1, 0, 3, 2, 1] 0
261 [5, 3, 2, 1, 0, 3, 2, 3] 0
262 [5, 3, 2, 1, 0, 3, 2] 0
263 [5, 3, 2, 1, 0, 3, 1] 0
264 [5, 3, 2, 1, 0, 3] 0
265 [5, 3, 2, 1, 0, 2, 1, 2] 0
266 [5, 3, 2, 1, 0, 2, 1] 0
267 [5, 3, 2, 1, 0, 2] 0
268 [5, 3, 2, 1, 0, 1] 0
269 [5, 3, 2, 1, 0] 0
270 [5, 3, 2, 1, 3, 2, 3] 0
271 [5, 3, 2, 1, 3, 2] 0
272 [5, 3, 2, 1, 3] 0
273 [5, 3, 2, 1, 2] 0
274 [5, 3, 2, 1] 0
275 [5, 3, 2, 0, 3] 0
276 [5, 3, 2, 0] 0
277 [5, 3, 2, 3] 0
278 [5, 3, 2] 0
279 [5, 3, 1, 0, 1] 0
280 [5, 3, 1, 0] 0
281 [5, 3, 1] 0
282 [5, 3, 0] 0
283 [5, 3] 0
284 [5, 2, 1, 0, 2, 1, 2] 0
285 [5, 2, 1, 0, 2, 1] 0
286 [5, 2, 1, 0, 2] 0
287 [5, 2, 1, 0, 1] 0
288 [5, 2, 1, 0] 0
289 [5, 2, 1, 2] 0
290 [5, 2, 1] 0
291 [5, 2, 0] 0
292 [5, 2] 0
293 [5, 1, 0, 1] 0
294 [5, 1, 0] 0
295 [5, 1] 0
296 [5, 0] 0
297 [5] 0
298 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
299 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
300 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4] 0
301 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 3] 0
302 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2] 0
303 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 4] 0
304 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3] 0
305 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 2] 0
306 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4] 0
307 [4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2, 3] 0
308 [4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2] 0
309 [4, 3, 2, 1, 0, 4, 3, 2, 1, 3] 0
310 [4, 3, 2, 1, 0, 4, 3, 2, 1, 2] 0
311 [4, 3, 2, 1, 0, 4, 3, 2, 1] 0
312 [4, 3, 2, 1, 0, 4, 3, 2, 4, 3, 4] 0
313 [4, 3, 2, 1, 0, 4, 3, 2, 4, 3] 0
314 [4, 3, 2, 1, 0, 4, 3, 2, 4] 0
315 [4, 3, 2, 1, 0, 4, 3, 2, 3] 0
316 [4, 3, 2, 1, 0, 4, 3, 2] 0
317 [4, 3, 2, 1, 0, 4, 3, 1, 4] 0
318 [4, 3, 2, 1, 0, 4, 3, 1] 0
319 [4, 3, 2, 1, 0, 4, 3, 4] 0
320 [4, 3, 2, 1, 0, 4, 3] 0
321 [4, 3, 2, 1, 0, 4, 2, 1, 2] 0
322 [4, 3, 2, 1, 0, 4, 2, 1] 0
323 [4, 3, 2, 1, 0, 4, 2] 0
324 [4, 3, 2, 1, 0, 4, 1] 0
325 [4, 3, 2, 1, 0, 4] 0
326 [4, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
327 [4, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
328 [4, 3, 2, 1, 0, 3, 2, 1, 3] 0
329 [4, 3, 2, 1, 0, 3, 2, 1, 2] 0
330 [4, 3, 2, 1, 0, 3, 2, 1] 0
331 [4, 3, 2, 1, 0, 3, 2, 3] 0
332 [4, 3, 2, 1, 0, 3, 2] 0
333 [4, 3, 2, 1, 0, 3, 1] 0
334 [4, 3, 2, 1, 0, 3] 0
335 [4, 3, 2, 1, 0, 2, 1, 2] 0
336 [4, 3, 2, 1, 0, 2, 1] 0
337 [4, 3, 2, 1, 0, 2] 0
338 [4, 3, 2, 1, 0, 1] 0
339 [4, 3, 2, 1, 0] 0
340 [4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
341 [4, 3, 2, 1, 4, 3, 2, 4, 3] 0
342 [4, 3, 2, 1, 4, 3, 2, 4] 0
343 [4, 3, 2, 1, 4, 3, 2, 3] 0
344 [4, 3, 2, 1, 4, 3, 2] 0
345 [4, 3, 2, 1, 4, 3, 4] 0
346 [4, 3, 2, 1, 4, 3] 0
347 [4, 3, 2, 1, 4, 2] 0
348 [4, 3, 2, 1, 4] 0
349 [4, 3, 2, 1, 3, 2, 3] 0
350 [4, 3, 2, 1, 3, 2] 0
351 [4, 3, 2, 1, 3] 0
352 [4, 3, 2, 1, 2] 0
353 [4, 3, 2, 1] 0
354 [4, 3, 2, 0, 4, 3, 4] 0
355 [4, 3, 2, 0, 4, 3] 0
356 [4, 3, 2, 0, 4] 0
357 [4, 3, 2, 0, 3] 0
358 [4, 3, 2, 0] 0
359 [4, 3, 2, 4, 3, 4] 0
360 [4, 3, 2, 4, 3] 0
361 [4, 3, 2, 4] 0
362 [4, 3, 2, 3] 0
363 [4, 3, 2] 0
364 [4, 3, 1, 0, 4, 1] 0
365 [4, 3, 1, 0, 4] 0
366 [4, 3, 1, 0, 1] 0
367 [4, 3, 1, 0] 0
368 [4, 3, 1, 4] 0
369 [4, 3, 1] 0
370 [4, 3, 0, 4] 0
371 [4, 3, 0] 0
372 [4, 3, 4] 0
373 [4, 3] 0
374 [4, 2, 1, 0, 2, 1, 2] 0
375 [4, 2, 1, 0, 2, 1] 0
376 [4, 2, 1, 0, 2] 0
377 [4, 2, 1, 0, 1] 0
378 [4, 2, 1, 0] 0
379 [4, 2, 1, 2] 0
380 [4, 2, 1] 0
381 [4, 2, 0] 0
382 [4, 2] 0
383 [4, 1, 0, 1] 0
384 [4, 1, 0] 0
385 [4, 1] 0
386 [4, 0] 0
387 [4] 0
388 [3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
389 [3, 2, 1, 0, 3, 2, 1, 3, 2] 0
390 [3, 2, 1, 0, 3, 2, 1, 3] 0
391 [3, 2, 1, 0, 3, 2, 1, 2] 0
392 [3, 2, 1, 0, 3, 2, 1] 0
393 [3, 2, 1, 0, 3, 2, 3] 0
394 [3, 2, 1, 0, 3, 2] 0
395 [3, 2, 1, 0, 3, 1] 0
396 [3, 2, 1, 0, 3] 0
397 [3, 2, 1, 0, 2, 1, 2] 0
398 [3, 2, 1, 0, 2, 1] 0
399 [3, 2, 1, 0, 2] 0
400 [3, 2, 1, 0, 1] 0
401 [3, 2, 1, 0] 0
402 [3, 2, 1, 3, 2, 3] 0
403 [3, 2, 1, 3, 2] 0
404 [3, 2, 1, 3] 0
405 [3, 2, 1, 2] 0
406 [3, 2, 1] 0
407 [3, 2, 0, 3] 0
408 [3, 2, 0] 0
409 [3, 2, 3] 0
410 [3, 2] 0
411 [3, 1, 0, 1] 0
412 [3, 1, 0] 0
413 [3, 1] 0
414 [3, 0] 0
415 [3] 0
416 [2, 1, 0, 2, 1, 2] 0
417 [2, 1, 0, 2, 1] 0
418 [2, 1, 0, 2] 0
419 [2, 1, 0, 1] 0
420 [2, 1, 0] 0
421 [2, 1, 2] 0
422 [2, 1] 0
423 [2, 0] 0
424 [2] 0
425 [1, 0, 1] 0
426 [1, 0] 0
427 [1] 0
428 [0] 0
429 [] 0
sage: A=CartanMatrix(['A',9])
....: c=[8,7,6,5,4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,kinv,k+[c[0]],kinv+[c[0]]]).dimensio
....: n()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7, 6, 7] 0
2 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7, 6] 0
3 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7] 0
4 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 6] 0
5 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5] 0
6 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 7] 0
7 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6] 0
8 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 5] 0
9 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7] 0
10 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6, 5, 6] 0
11 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6, 5] 0
12 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6] 0
13 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 5] 0
14 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4] 0
15 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 7, 6, 7] 0
16 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 7, 6] 0
17 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 7] 0
18 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 6] 0
19 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5] 0
20 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 4, 7] 0
21 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 4] 0
22 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 7] 0
23 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6] 0
24 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 5, 4, 5] 0
25 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 5, 4] 0
26 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 5] 0
27 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 4] 0
28 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7] 0
29 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
30 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
31 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 4, 6] 0
32 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 4, 5] 0
33 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 4] 0
34 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 6] 0
35 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5] 0
36 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 4] 0
37 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6] 0
38 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 5, 4, 5] 0
39 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 5, 4] 0
40 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 5] 0
41 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 4] 0
42 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3] 0
43 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 5, 7, 6, 7] 0
44 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 5, 7, 6] 0
45 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 5, 7] 0
46 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 5, 6] 0
47 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 5] 0
48 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 7] 0
49 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6] 0
50 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 5] 0
51 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7] 0
52 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 6, 5, 6] 0
53 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 6, 5] 0
54 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 6] 0
55 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 5] 0
56 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4] 0
57 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 3, 7, 6, 7] 0
58 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 3, 7, 6] 0
59 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 3, 7] 0
60 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 3, 6] 0
61 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 3] 0
62 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 7, 6, 7] 0
63 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 7, 6] 0
64 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 7] 0
65 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 6] 0
66 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5] 0
67 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 4, 3, 7, 4] 0
68 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 4, 3, 7] 0
69 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 4, 3, 4] 0
70 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 4, 3] 0
71 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 4, 7] 0
72 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 4] 0
73 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 3, 7] 0
74 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 3] 0
75 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 7] 0
76 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6] 0
77 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 5, 4, 3, 5, 4, 5] 0
78 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 5, 4, 3, 5, 4] 0
79 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 5, 4, 3, 5] 0
80 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 5, 4, 3, 4] 0
81 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 5, 4, 3] 0
82 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 5, 4, 5] 0
83 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 5, 4] 0
84 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 5, 3] 0
85 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 5] 0
86 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 4, 3, 4] 0
87 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 4, 3] 0
88 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 4] 0
89 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 3] 0
90 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7] 0
91 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
92 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
93 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6] 0
94 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 5] 0
95 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4] 0
96 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 6] 0
97 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5] 0
98 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 4] 0
99 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6] 0
100 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4, 5] 0
101 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4] 0
102 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5] 0
103 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 4] 0
104 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3] 0
105 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5, 6] 0
106 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5] 0
107 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 6] 0
108 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 5] 0
109 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4] 0
110 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 3, 6] 0
111 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 3] 0
112 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 6] 0
113 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5] 0
114 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 4, 3, 4] 0
115 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 4, 3] 0
116 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 4] 0
117 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 3] 0
118 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6] 0
119 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
120 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
121 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 5, 4, 3, 5] 0
122 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 5, 4, 3, 4] 0
123 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 5, 4, 3] 0
124 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 5, 4, 5] 0
125 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 5, 4] 0
126 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 5, 3] 0
127 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 5] 0
128 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 4, 3, 4] 0
129 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 4, 3] 0
130 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 4] 0
131 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 3] 0
132 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2] 0
133 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7, 6, 7] 0
134 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7, 6] 0
135 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7] 0
136 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 6] 0
137 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5] 0
138 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 7] 0
139 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6] 0
140 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 5] 0
141 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7] 0
142 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6, 5, 6] 0
143 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6, 5] 0
144 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6] 0
145 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 5] 0
146 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4] 0
147 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 7, 6, 7] 0
148 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 7, 6] 0
149 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 7] 0
150 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 6] 0
151 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5] 0
152 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 4, 7] 0
153 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 4] 0
154 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 7] 0
155 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6] 0
156 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 5, 4, 5] 0
157 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 5, 4] 0
158 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 5] 0
159 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 4] 0
160 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7] 0
161 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
162 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
163 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 6, 5, 4, 6] 0
164 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 6, 5, 4, 5] 0
165 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 6, 5, 4] 0
166 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 6, 5, 6] 0
167 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 6, 5] 0
168 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 6, 4] 0
169 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 6] 0
170 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 5, 4, 5] 0
171 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 5, 4] 0
172 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 5] 0
173 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 4] 0
174 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3] 0
175 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 7, 6, 5, 7, 6, 7] 0
176 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 7, 6, 5, 7, 6] 0
177 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 7, 6, 5, 7] 0
178 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 7, 6, 5, 6] 0
179 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 7, 6, 5] 0
180 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 7, 6, 7] 0
181 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 7, 6] 0
182 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 7, 5] 0
183 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 7] 0
184 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 6, 5, 6] 0
185 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 6, 5] 0
186 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 6] 0
187 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 5] 0
188 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2] 0
189 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 7, 6, 5, 7, 6, 7] 0
190 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 7, 6, 5, 7, 6] 0
191 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 7, 6, 5, 7] 0
192 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 7, 6, 5, 6] 0
193 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 7, 6, 5] 0
194 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 7, 6, 7] 0
195 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 7, 6] 0
196 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 7, 5] 0
197 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 7] 0
198 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 6, 5, 6] 0
199 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 6, 5] 0
200 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 6] 0
201 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 5] 0
202 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4] 0
203 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 2, 7, 6, 3, 7] 0
204 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 2, 7, 6, 3] 0
205 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 2, 7, 6, 7] 0
206 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 2, 7, 6] 0
207 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 2, 7, 3] 0
208 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 2, 7] 0
209 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 2, 6, 3] 0
210 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 2, 6] 0
211 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 2, 3] 0
212 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 2] 0
213 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 7, 6, 7] 0
214 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 7, 6] 0
215 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 7] 0
216 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 6] 0
217 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3] 0
218 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 2, 7, 6, 7] 0
219 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 2, 7, 6] 0
220 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 2, 7] 0
221 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 2, 6] 0
222 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 2] 0
223 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 7, 6, 7] 0
224 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 7, 6] 0
225 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 7] 0
226 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 6] 0
227 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5] 0
228 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 2, 7, 4, 3, 4] 0
229 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 2, 7, 4, 3] 0
230 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 2, 7, 4] 0
231 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 2, 7, 3] 0
232 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 2, 7] 0
233 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 2, 4, 3, 4] 0
234 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 2, 4, 3] 0
235 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 2, 4] 0
236 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 2, 3] 0
237 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 2] 0
238 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 7, 4] 0
239 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 7] 0
240 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 4] 0
241 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3] 0
242 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 2, 7] 0
243 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 2] 0
244 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 7] 0
245 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 4] 0
246 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 3, 2, 7, 3] 0
247 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 3, 2, 7] 0
248 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 3, 2, 3] 0
249 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 3, 2] 0
250 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 3, 7] 0
251 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 3] 0
252 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 2, 7] 0
253 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 2] 0
254 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 7] 0
255 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6] 0
256 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
257 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
258 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 5, 4, 3, 5] 0
259 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 5, 4, 3, 4] 0
260 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 5, 4, 3] 0
261 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 5, 4, 5] 0
262 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 5, 4] 0
263 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 5, 3] 0
264 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 5] 0
265 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 4, 3, 4] 0
266 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 4, 3] 0
267 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 4] 0
268 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 3] 0
269 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2] 0
270 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 5, 4, 5] 0
271 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 5, 4] 0
272 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 5] 0
273 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 4] 0
274 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3] 0
275 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 2, 5] 0
276 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 2] 0
277 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 5] 0
278 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4] 0
279 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 3, 2, 3] 0
280 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 3, 2] 0
281 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 3] 0
282 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 2] 0
283 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5] 0
284 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 4, 3, 2, 4, 3, 4] 0
285 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 4, 3, 2, 4, 3] 0
286 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 4, 3, 2, 4] 0
287 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 4, 3, 2, 3] 0
288 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 4, 3, 2] 0
289 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 4, 3, 4] 0
290 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 4, 3] 0
291 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 4, 2] 0
292 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 4] 0
293 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 3, 2, 3] 0
294 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 3, 2] 0
295 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 3] 0
296 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 2] 0
297 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7] 0
298 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
299 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
300 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6] 0
301 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 5] 0
302 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4] 0
303 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 6] 0
304 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5] 0
305 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 4] 0
306 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6] 0
307 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4, 5] 0
308 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4] 0
309 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5] 0
310 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 4] 0
311 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3] 0
312 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5, 6] 0
313 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5] 0
314 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 6] 0
315 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 5] 0
316 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4] 0
317 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 3, 6] 0
318 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 3] 0
319 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 6] 0
320 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5] 0
321 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 4, 3, 4] 0
322 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 4, 3] 0
323 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 4] 0
324 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 3] 0
325 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6] 0
326 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
327 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
328 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3, 5] 0
329 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3, 4] 0
330 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3] 0
331 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 5] 0
332 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4] 0
333 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 3] 0
334 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5] 0
335 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 4, 3, 4] 0
336 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 4, 3] 0
337 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 4] 0
338 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 3] 0
339 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2] 0
340 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
341 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
342 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4, 6] 0
343 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4, 5] 0
344 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4] 0
345 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 6] 0
346 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5] 0
347 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 4] 0
348 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6] 0
349 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 5, 4, 5] 0
350 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 5, 4] 0
351 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 5] 0
352 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 4] 0
353 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3] 0
354 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 2, 6, 5, 6] 0
355 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 2, 6, 5] 0
356 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 2, 6] 0
357 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 2, 5] 0
358 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 2] 0
359 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 6, 5, 6] 0
360 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 6, 5] 0
361 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 6] 0
362 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 5] 0
363 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4] 0
364 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 3, 2, 6, 3] 0
365 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 3, 2, 6] 0
366 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 3, 2, 3] 0
367 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 3, 2] 0
368 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 3, 6] 0
369 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 3] 0
370 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 2, 6] 0
371 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 2] 0
372 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 6] 0
373 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5] 0
374 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 4, 3, 2, 4, 3, 4] 0
375 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 4, 3, 2, 4, 3] 0
376 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 4, 3, 2, 4] 0
377 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 4, 3, 2, 3] 0
378 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 4, 3, 2] 0
379 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 4, 3, 4] 0
380 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 4, 3] 0
381 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 4, 2] 0
382 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 4] 0
383 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 3, 2, 3] 0
384 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 3, 2] 0
385 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 3] 0
386 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 2] 0
387 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6] 0
388 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
389 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
390 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] 0
391 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] 0
392 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] 0
393 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] 0
394 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] 0
395 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] 0
396 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5] 0
397 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] 0
398 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] 0
399 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4] 0
400 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 3] 0
401 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2] 0
402 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] 0
403 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4] 0
404 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 5] 0
405 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 4] 0
406 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4, 3] 0
407 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4, 2, 5] 0
408 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4, 2] 0
409 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4, 5] 0
410 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4] 0
411 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 3, 2, 3] 0
412 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 3, 2] 0
413 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 3] 0
414 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 2] 0
415 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5] 0
416 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
417 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
418 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 4, 3, 2, 4] 0
419 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 4, 3, 2, 3] 0
420 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 4, 3, 2] 0
421 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 4, 3, 4] 0
422 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 4, 3] 0
423 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 4, 2] 0
424 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 4] 0
425 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 3, 2, 3] 0
426 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 3, 2] 0
427 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 3] 0
428 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 2] 0
429 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1] 0
430 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7, 6, 7] 0
431 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7, 6] 0
432 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7] 0
433 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 6] 0
434 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5] 0
435 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 7] 0
436 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6] 0
437 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 5] 0
438 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7] 0
439 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6, 5, 6] 0
440 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6, 5] 0
441 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6] 0
442 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 5] 0
443 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4] 0
444 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 7, 6, 7] 0
445 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 7, 6] 0
446 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 7] 0
447 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 6] 0
448 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5] 0
449 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 4, 7] 0
450 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 4] 0
451 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 7] 0
452 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6] 0
453 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 5, 4, 5] 0
454 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 5, 4] 0
455 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 5] 0
456 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 4] 0
457 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7] 0
458 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
459 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
460 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 4, 6] 0
461 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 4, 5] 0
462 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 4] 0
463 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 6] 0
464 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5] 0
465 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 4] 0
466 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6] 0
467 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 5, 4, 5] 0
468 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 5, 4] 0
469 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 5] 0
470 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 4] 0
471 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3] 0
472 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 5, 7, 6, 7] 0
473 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 5, 7, 6] 0
474 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 5, 7] 0
475 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 5, 6] 0
476 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 5] 0
477 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 7] 0
478 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6] 0
479 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 5] 0
480 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7] 0
481 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 6, 5, 6] 0
482 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 6, 5] 0
483 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 6] 0
484 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 5] 0
485 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4] 0
486 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 3, 7, 6, 7] 0
487 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 3, 7, 6] 0
488 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 3, 7] 0
489 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 3, 6] 0
490 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 3] 0
491 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 7, 6, 7] 0
492 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 7, 6] 0
493 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 7] 0
494 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 6] 0
495 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5] 0
496 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 4, 3, 7, 4] 0
497 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 4, 3, 7] 0
498 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 4, 3, 4] 0
499 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 4, 3] 0
500 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 4, 7] 0
501 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 4] 0
502 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 3, 7] 0
503 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 3] 0
504 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 7] 0
505 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6] 0
506 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 5, 4, 3, 5, 4, 5] 0
507 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 5, 4, 3, 5, 4] 0
508 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 5, 4, 3, 5] 0
509 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 5, 4, 3, 4] 0
510 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 5, 4, 3] 0
511 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 5, 4, 5] 0
512 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 5, 4] 0
513 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 5, 3] 0
514 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 5] 0
515 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 4, 3, 4] 0
516 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 4, 3] 0
517 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 4] 0
518 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 3] 0
519 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7] 0
520 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
521 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
522 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6] 0
523 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 5] 0
524 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4] 0
525 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 6] 0
526 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5] 0
527 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 4] 0
528 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6] 0
529 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4, 5] 0
530 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4] 0
531 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5] 0
532 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 4] 0
533 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3] 0
534 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5, 6] 0
535 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5] 0
536 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5, 4, 6] 0
537 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5, 4, 5] 0
538 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5, 4] 0
539 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5, 3, 6] 0
540 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5, 3] 0
541 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5, 6] 0
542 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5] 0
543 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 4, 3, 4] 0
544 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 4, 3] 0
545 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 4] 0
546 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 3] 0
547 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6] 0
548 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
549 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
550 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 5, 4, 3, 5] 0
551 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 5, 4, 3, 4] 0
552 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 5, 4, 3] 0
553 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 5, 4, 5] 0
554 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 5, 4] 0
555 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 5, 3] 0
556 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 5] 0
557 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 4, 3, 4] 0
558 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 4, 3] 0
559 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 4] 0
560 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 3] 0
561 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2] 0
562 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 7, 6, 5, 7, 6, 7] 0
563 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 7, 6, 5, 7, 6] 0
564 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 7, 6, 5, 7] 0
565 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 7, 6, 5, 6] 0
566 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 7, 6, 5] 0
567 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 7, 6, 7] 0
568 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 7, 6] 0
569 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 7, 5] 0
570 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 7] 0
571 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 6, 5, 6] 0
572 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 6, 5] 0
573 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 6] 0
574 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 5] 0
575 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6, 5, 4] 0
576 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6, 5, 7, 6, 7] 0
577 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6, 5, 7, 6] 0
578 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6, 5, 7] 0
579 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6, 5, 6] 0
580 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6, 5] 0
581 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6, 4, 7] 0
582 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6, 4] 0
583 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6, 7] 0
584 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6] 0
585 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 5, 4, 5] 0
586 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 5, 4] 0
587 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 5] 0
588 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 4] 0
589 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7] 0
590 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 6, 5, 4, 6, 5, 6] 0
591 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 6, 5, 4, 6, 5] 0
592 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 6, 5, 4, 6] 0
593 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 6, 5, 4, 5] 0
594 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 6, 5, 4] 0
595 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 6, 5, 6] 0
596 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 6, 5] 0
597 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 6, 4] 0
598 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 6] 0
599 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 5, 4, 5] 0
600 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 5, 4] 0
601 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 5] 0
602 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 4] 0
603 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1] 0
604 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7, 6, 7] 0
605 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7, 6] 0
606 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7] 0
607 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 6] 0
608 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5] 0
609 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 7] 0
610 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6] 0
611 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 5] 0
612 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7] 0
613 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6, 5, 6] 0
614 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6, 5] 0
615 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6] 0
616 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 5] 0
617 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4] 0
618 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6, 5, 7, 6, 7] 0
619 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6, 5, 7, 6] 0
620 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6, 5, 7] 0
621 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6, 5, 6] 0
622 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6, 5] 0
623 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6, 4, 7] 0
624 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6, 4] 0
625 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6, 7] 0
626 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6] 0
627 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 5, 4, 5] 0
628 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 5, 4] 0
629 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 5] 0
630 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 4] 0
631 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7] 0
632 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
633 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
634 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 6, 5, 4, 6] 0
635 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 6, 5, 4, 5] 0
636 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 6, 5, 4] 0
637 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 6, 5, 6] 0
638 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 6, 5] 0
639 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 6, 4] 0
640 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 6] 0
641 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 5, 4, 5] 0
642 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 5, 4] 0
643 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 5] 0
644 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 4] 0
645 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3] 0
646 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 7, 6, 5, 2, 7, 6, 7] 0
647 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 7, 6, 5, 2, 7, 6] 0
648 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 7, 6, 5, 2, 7] 0
649 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 7, 6, 5, 2, 6] 0
650 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 7, 6, 5, 2] 0
651 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 7, 6, 5, 7, 6, 7] 0
652 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 7, 6, 5, 7, 6] 0
653 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 7, 6, 5, 7] 0
654 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 7, 6, 5, 6] 0
655 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 7, 6, 5] 0
656 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 7, 6, 2, 7] 0
657 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 7, 6, 2] 0
658 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 7, 6, 7] 0
659 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 7, 6] 0
660 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 7, 5, 2] 0
661 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 7, 5] 0
662 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 7, 2] 0
663 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 7] 0
664 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 6, 5, 2, 6] 0
665 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 6, 5, 2] 0
666 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 6, 5, 6] 0
667 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 6, 5] 0
668 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 6, 2] 0
669 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 6] 0
670 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 5, 2] 0
671 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 5] 0
672 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 2] 0
673 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1] 0
674 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 7, 6, 5, 7, 6, 7] 0
675 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 7, 6, 5, 7, 6] 0
676 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 7, 6, 5, 7] 0
677 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 7, 6, 5, 6] 0
678 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 7, 6, 5] 0
679 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 7, 6, 7] 0
680 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 7, 6] 0
681 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 7, 5] 0
682 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 7] 0
683 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 6, 5, 6] 0
684 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 6, 5] 0
685 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 6] 0
686 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 5] 0
687 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2] 0
688 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 1, 7, 6, 5, 7, 6, 7] 0
689 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 1, 7, 6, 5, 7, 6] 0
690 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 1, 7, 6, 5, 7] 0
691 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 1, 7, 6, 5, 6] 0
692 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 1, 7, 6, 5] 0
693 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 1, 7, 6, 7] 0
694 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 1, 7, 6] 0
695 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 1, 7, 5] 0
696 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 1, 7] 0
697 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 1, 6, 5, 6] 0
698 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 1, 6, 5] 0
699 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 1, 6] 0
700 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 1, 5] 0
701 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 1] 0
702 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 7, 6, 5, 7, 6, 7] 0
703 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 7, 6, 5, 7, 6] 0
704 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 7, 6, 5, 7] 0
705 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 7, 6, 5, 6] 0
706 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 7, 6, 5] 0
707 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 7, 6, 7] 0
708 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 7, 6] 0
709 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 7, 5] 0
710 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 7] 0
711 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 6, 5, 6] 0
712 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 6, 5] 0
713 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 6] 0
714 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 5] 0
715 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4] 0
716 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 7, 6, 3, 2, 7, 3] 0
717 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 7, 6, 3, 2, 7] 0
718 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 7, 6, 3, 2, 3] 0
719 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 7, 6, 3, 2] 0
720 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 7, 6, 3, 7] 0
721 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 7, 6, 3] 0
722 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 7, 6, 2, 7] 0
723 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 7, 6, 2] 0
724 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 7, 6, 7] 0
725 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 7, 6] 0
726 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 7, 3, 2, 3] 0
727 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 7, 3, 2] 0
728 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 7, 3] 0
729 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 7, 2] 0
730 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 7] 0
731 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 6, 3, 2, 3] 0
732 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 6, 3, 2] 0
733 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 6, 3] 0
734 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 6, 2] 0
735 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 6] 0
736 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 3, 2, 3] 0
737 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 3, 2] 0
738 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 3] 0
739 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 2] 0
740 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1] 0
741 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 7, 6, 3, 7] 0
742 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 7, 6, 3] 0
743 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 7, 6, 7] 0
744 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 7, 6] 0
745 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 7, 3] 0
746 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 7] 0
747 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 6, 3] 0
748 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 6] 0
749 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 3] 0
750 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2] 0
751 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 1, 7, 6, 7] 0
752 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 1, 7, 6] 0
753 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 1, 7] 0
754 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 1, 6] 0
755 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 1] 0
756 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 7, 6, 7] 0
757 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 7, 6] 0
758 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 7] 0
759 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 6] 0
760 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3] 0
761 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 2, 1, 7, 6, 2, 7] 0
762 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 2, 1, 7, 6, 2] 0
763 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 2, 1, 7, 6, 7] 0
764 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 2, 1, 7, 6] 0
765 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 2, 1, 7, 2] 0
766 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 2, 1, 7] 0
767 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 2, 1, 6, 2] 0
768 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 2, 1, 6] 0
769 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 2, 1, 2] 0
770 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 2, 1] 0
771 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 2, 7, 6, 7] 0
772 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 2, 7, 6] 0
773 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 2, 7] 0
774 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 2, 6] 0
775 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 2] 0
776 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 1, 7, 6, 7] 0
777 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 1, 7, 6] 0
778 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 1, 7] 0
779 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 1, 6] 0
780 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 1] 0
781 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 7, 6, 7] 0
782 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 7, 6] 0
783 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 7] 0
784 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 6] 0
785 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5] 0
786 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 7, 4, 3, 2, 4, 3, 4] 0
787 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 7, 4, 3, 2, 4, 3] 0
788 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 7, 4, 3, 2, 4] 0
789 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 7, 4, 3, 2, 3] 0
790 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 7, 4, 3, 2] 0
791 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 7, 4, 3, 4] 0
792 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 7, 4, 3] 0
793 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 7, 4, 2] 0
794 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 7, 4] 0
795 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 7, 3, 2, 3] 0
796 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 7, 3, 2] 0
797 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 7, 3] 0
798 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 7, 2] 0
799 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 7] 0
800 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
801 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
802 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 4, 3, 2, 4] 0
803 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 4, 3, 2, 3] 0
804 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 4, 3, 2] 0
805 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 4, 3, 4] 0
806 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 4, 3] 0
807 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 4, 2] 0
808 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 4] 0
809 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 3, 2, 3] 0
810 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 3, 2] 0
811 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 3] 0
812 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 2] 0
813 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1] 0
814 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 7, 4, 3, 4] 0
815 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 7, 4, 3] 0
816 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 7, 4] 0
817 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 7, 3] 0
818 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 7] 0
819 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 4, 3, 4] 0
820 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 4, 3] 0
821 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 4] 0
822 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 3] 0
823 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2] 0
824 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 1, 7, 4] 0
825 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 1, 7] 0
826 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 1, 4] 0
827 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 1] 0
828 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 7, 4] 0
829 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 7] 0
830 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 4] 0
831 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3] 0
832 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 2, 1, 7, 2] 0
833 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 2, 1, 7] 0
834 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 2, 1, 2] 0
835 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 2, 1] 0
836 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 2, 7] 0
837 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 2] 0
838 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 1, 7] 0
839 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 1] 0
840 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 7] 0
841 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4] 0
842 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 3, 2, 1, 7, 3, 2, 3] 0
843 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 3, 2, 1, 7, 3, 2] 0
844 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 3, 2, 1, 7, 3] 0
845 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 3, 2, 1, 7, 2] 0
846 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 3, 2, 1, 7] 0
847 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 3, 2, 1, 3, 2, 3] 0
848 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 3, 2, 1, 3, 2] 0
849 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 3, 2, 1, 3] 0
850 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 3, 2, 1, 2] 0
851 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 3, 2, 1] 0
852 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 3, 2, 7, 3] 0
853 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 3, 2, 7] 0
854 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 3, 2, 3] 0
855 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 3, 2] 0
856 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 3, 1, 7] 0
857 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 3, 1] 0
858 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 3, 7] 0
859 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 3] 0
860 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 2, 1, 7, 2] 0
861 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 2, 1, 7] 0
862 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 2, 1, 2] 0
863 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 2, 1] 0
864 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 2, 7] 0
865 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 2] 0
866 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 1, 7] 0
867 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 1] 0
868 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 7] 0
869 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6] 0
870 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
871 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
872 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] 0
873 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] 0
874 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] 0
875 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] 0
876 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] 0
877 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] 0
878 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5] 0
879 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] 0
880 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] 0
881 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4] 0
882 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 3] 0
883 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4, 3, 2] 0
884 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] 0
885 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4] 0
886 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4, 3, 5] 0
887 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4, 3, 4] 0
888 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4, 3] 0
889 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4, 2, 5] 0
890 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4, 2] 0
891 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4, 5] 0
892 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4] 0
893 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 3, 2, 3] 0
894 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 3, 2] 0
895 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 3] 0
896 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 2] 0
897 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5] 0
898 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
899 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
900 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 4, 3, 2, 4] 0
901 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 4, 3, 2, 3] 0
902 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 4, 3, 2] 0
903 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 4, 3, 4] 0
904 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 4, 3] 0
905 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 4, 2] 0
906 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 4] 0
907 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 3, 2, 3] 0
908 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 3, 2] 0
909 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 3] 0
910 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 2] 0
911 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1] 0
912 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
913 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
914 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 5, 4, 3, 5] 0
915 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 5, 4, 3, 4] 0
916 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 5, 4, 3] 0
917 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 5, 4, 5] 0
918 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 5, 4] 0
919 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 5, 3] 0
920 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 5] 0
921 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 4, 3, 4] 0
922 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 4, 3] 0
923 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 4] 0
924 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 3] 0
925 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2] 0
926 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 1, 5, 4, 5] 0
927 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 1, 5, 4] 0
928 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 1, 5] 0
929 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 1, 4] 0
930 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 1] 0
931 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 5, 4, 5] 0
932 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 5, 4] 0
933 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 5] 0
934 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 4] 0
935 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3] 0
936 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 2, 1, 5, 2] 0
937 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 2, 1, 5] 0
938 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 2, 1, 2] 0
939 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 2, 1] 0
940 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 2, 5] 0
941 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 2] 0
942 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 1, 5] 0
943 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 1] 0
944 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 5] 0
945 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4] 0
946 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 3, 2, 1, 3, 2, 3] 0
947 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 3, 2, 1, 3, 2] 0
948 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 3, 2, 1, 3] 0
949 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 3, 2, 1, 2] 0
950 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 3, 2, 1] 0
951 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 3, 2, 3] 0
952 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 3, 2] 0
953 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 3, 1] 0
954 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 3] 0
955 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 2, 1, 2] 0
956 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 2, 1] 0
957 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 2] 0
958 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 1] 0
959 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5] 0
960 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
961 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
962 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 4, 3, 2, 4] 0
963 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 4, 3, 2, 3] 0
964 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 4, 3, 2] 0
965 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 4, 3, 4] 0
966 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 4, 3] 0
967 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 4, 2] 0
968 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 4] 0
969 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 3, 2, 3] 0
970 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 3, 2] 0
971 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 3] 0
972 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 2] 0
973 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1] 0
974 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3, 2, 4, 3, 4] 0
975 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3, 2, 4, 3] 0
976 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3, 2, 4] 0
977 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3, 2, 3] 0
978 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3, 2] 0
979 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3, 1, 4] 0
980 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3, 1] 0
981 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3, 4] 0
982 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3] 0
983 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 2, 1, 2] 0
984 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 2, 1] 0
985 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 2] 0
986 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 1] 0
987 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4] 0
988 [7, 6, 5, 4, 3, 2, 1, 0, 7, 3, 2, 1, 3, 2, 3] 0
989 [7, 6, 5, 4, 3, 2, 1, 0, 7, 3, 2, 1, 3, 2] 0
990 [7, 6, 5, 4, 3, 2, 1, 0, 7, 3, 2, 1, 3] 0
991 [7, 6, 5, 4, 3, 2, 1, 0, 7, 3, 2, 1, 2] 0
992 [7, 6, 5, 4, 3, 2, 1, 0, 7, 3, 2, 1] 0
993 [7, 6, 5, 4, 3, 2, 1, 0, 7, 3, 2, 3] 0
994 [7, 6, 5, 4, 3, 2, 1, 0, 7, 3, 2] 0
995 [7, 6, 5, 4, 3, 2, 1, 0, 7, 3, 1] 0
996 [7, 6, 5, 4, 3, 2, 1, 0, 7, 3] 0
997 [7, 6, 5, 4, 3, 2, 1, 0, 7, 2, 1, 2] 0
998 [7, 6, 5, 4, 3, 2, 1, 0, 7, 2, 1] 0
999 [7, 6, 5, 4, 3, 2, 1, 0, 7, 2] 0
1000 [7, 6, 5, 4, 3, 2, 1, 0, 7, 1] 0
1001 [7, 6, 5, 4, 3, 2, 1, 0, 7] 0
1002 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
1003 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
1004 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6] 0
1005 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 5] 0
1006 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4] 0
1007 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 6] 0
1008 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5] 0
1009 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 4] 0
1010 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6] 0
1011 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4, 5] 0
1012 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4] 0
1013 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5] 0
1014 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 4] 0
1015 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3] 0
1016 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5, 6] 0
1017 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5] 0
1018 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 6] 0
1019 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 5] 0
1020 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4] 0
1021 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 3, 6] 0
1022 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 3] 0
1023 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 6] 0
1024 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5] 0
1025 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 4, 3, 4] 0
1026 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 4, 3] 0
1027 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 4] 0
1028 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 3] 0
1029 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6] 0
1030 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
1031 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
1032 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3, 5] 0
1033 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3, 4] 0
1034 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3] 0
1035 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 5] 0
1036 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4] 0
1037 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 3] 0
1038 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5] 0
1039 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 4, 3, 4] 0
1040 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 4, 3] 0
1041 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 4] 0
1042 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 3] 0
1043 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2] 0
1044 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
1045 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
1046 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4, 6] 0
1047 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4, 5] 0
1048 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4] 0
1049 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 6] 0
1050 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5] 0
1051 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 4] 0
1052 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6] 0
1053 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 5, 4, 5] 0
1054 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 5, 4] 0
1055 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 5] 0
1056 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 4] 0
1057 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3] 0
1058 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 2, 6, 5, 6] 0
1059 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 2, 6, 5] 0
1060 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 2, 6] 0
1061 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 2, 5] 0
1062 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 2] 0
1063 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 6, 5, 6] 0
1064 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 6, 5] 0
1065 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 6] 0
1066 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 5] 0
1067 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4] 0
1068 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 3, 2, 6, 3] 0
1069 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 3, 2, 6] 0
1070 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 3, 2, 3] 0
1071 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 3, 2] 0
1072 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 3, 6] 0
1073 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 3] 0
1074 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 2, 6] 0
1075 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 2] 0
1076 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 6] 0
1077 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5] 0
1078 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 4, 3, 2, 4, 3, 4] 0
1079 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 4, 3, 2, 4, 3] 0
1080 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 4, 3, 2, 4] 0
1081 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 4, 3, 2, 3] 0
1082 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 4, 3, 2] 0
1083 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 4, 3, 4] 0
1084 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 4, 3] 0
1085 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 4, 2] 0
1086 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 4] 0
1087 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 3, 2, 3] 0
1088 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 3, 2] 0
1089 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 3] 0
1090 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 2] 0
1091 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6] 0
1092 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
1093 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
1094 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] 0
1095 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] 0
1096 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] 0
1097 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] 0
1098 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] 0
1099 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] 0
1100 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5] 0
1101 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] 0
1102 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] 0
1103 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4] 0
1104 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 3] 0
1105 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2] 0
1106 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] 0
1107 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4] 0
1108 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 5] 0
1109 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 4] 0
1110 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3] 0
1111 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 2, 5] 0
1112 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 2] 0
1113 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 5] 0
1114 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4] 0
1115 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 3, 2, 3] 0
1116 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 3, 2] 0
1117 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 3] 0
1118 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 2] 0
1119 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5] 0
1120 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
1121 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
1122 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 4, 3, 2, 4] 0
1123 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 4, 3, 2, 3] 0
1124 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 4, 3, 2] 0
1125 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 4, 3, 4] 0
1126 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 4, 3] 0
1127 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 4, 2] 0
1128 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 4] 0
1129 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 3, 2, 3] 0
1130 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 3, 2] 0
1131 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 3] 0
1132 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 2] 0
1133 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1] 0
1134 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
1135 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
1136 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6] 0
1137 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 5] 0
1138 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4] 0
1139 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 6] 0
1140 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5] 0
1141 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 4] 0
1142 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6] 0
1143 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4, 5] 0
1144 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4] 0
1145 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5] 0
1146 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 4] 0
1147 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3] 0
1148 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5, 6] 0
1149 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5] 0
1150 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 6] 0
1151 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 5] 0
1152 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4] 0
1153 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 3, 6] 0
1154 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 3] 0
1155 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 6] 0
1156 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5] 0
1157 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 4, 3, 4] 0
1158 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 4, 3] 0
1159 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 4] 0
1160 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 3] 0
1161 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6] 0
1162 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
1163 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
1164 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 5, 4, 3, 5] 0
1165 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 5, 4, 3, 4] 0
1166 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 5, 4, 3] 0
1167 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 5, 4, 5] 0
1168 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 5, 4] 0
1169 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 5, 3] 0
1170 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 5] 0
1171 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 4, 3, 4] 0
1172 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 4, 3] 0
1173 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 4] 0
1174 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 3] 0
1175 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2] 0
1176 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 6, 5, 4, 6, 5, 6] 0
1177 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 6, 5, 4, 6, 5] 0
1178 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 6, 5, 4, 6] 0
1179 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 6, 5, 4, 5] 0
1180 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 6, 5, 4] 0
1181 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 6, 5, 6] 0
1182 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 6, 5] 0
1183 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 6, 4] 0
1184 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 6] 0
1185 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 5, 4, 5] 0
1186 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 5, 4] 0
1187 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 5] 0
1188 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 4] 0
1189 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1] 0
1190 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
1191 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
1192 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 6, 5, 4, 6] 0
1193 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 6, 5, 4, 5] 0
1194 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 6, 5, 4] 0
1195 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 6, 5, 6] 0
1196 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 6, 5] 0
1197 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 6, 4] 0
1198 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 6] 0
1199 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 5, 4, 5] 0
1200 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 5, 4] 0
1201 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 5] 0
1202 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 4] 0
1203 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3] 0
1204 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 1, 6, 5, 2, 6] 0
1205 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 1, 6, 5, 2] 0
1206 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 1, 6, 5, 6] 0
1207 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 1, 6, 5] 0
1208 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 1, 6, 2] 0
1209 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 1, 6] 0
1210 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 1, 5, 2] 0
1211 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 1, 5] 0
1212 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 1, 2] 0
1213 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 1] 0
1214 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 6, 5, 6] 0
1215 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 6, 5] 0
1216 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 6] 0
1217 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 5] 0
1218 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2] 0
1219 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 1, 6, 5, 6] 0
1220 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 1, 6, 5] 0
1221 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 1, 6] 0
1222 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 1, 5] 0
1223 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 1] 0
1224 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 6, 5, 6] 0
1225 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 6, 5] 0
1226 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 6] 0
1227 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 5] 0
1228 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4] 0
1229 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 1, 6, 3, 2, 3] 0
1230 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 1, 6, 3, 2] 0
1231 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 1, 6, 3] 0
1232 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 1, 6, 2] 0
1233 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 1, 6] 0
1234 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 1, 3, 2, 3] 0
1235 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 1, 3, 2] 0
1236 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 1, 3] 0
1237 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 1, 2] 0
1238 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 1] 0
1239 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 6, 3] 0
1240 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 6] 0
1241 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 3] 0
1242 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2] 0
1243 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 1, 6] 0
1244 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 1] 0
1245 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 6] 0
1246 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 3] 0
1247 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 2, 1, 6, 2] 0
1248 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 2, 1, 6] 0
1249 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 2, 1, 2] 0
1250 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 2, 1] 0
1251 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 2, 6] 0
1252 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 2] 0
1253 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 1, 6] 0
1254 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 1] 0
1255 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 6] 0
1256 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5] 0
1257 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
1258 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
1259 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 4, 3, 2, 4] 0
1260 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 4, 3, 2, 3] 0
1261 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 4, 3, 2] 0
1262 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 4, 3, 4] 0
1263 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 4, 3] 0
1264 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 4, 2] 0
1265 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 4] 0
1266 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 3, 2, 3] 0
1267 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 3, 2] 0
1268 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 3] 0
1269 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 2] 0
1270 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1] 0
1271 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 4, 3, 4] 0
1272 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 4, 3] 0
1273 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 4] 0
1274 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 3] 0
1275 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2] 0
1276 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 1, 4] 0
1277 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 1] 0
1278 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 4] 0
1279 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3] 0
1280 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 2, 1, 2] 0
1281 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 2, 1] 0
1282 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 2] 0
1283 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 1] 0
1284 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4] 0
1285 [7, 6, 5, 4, 3, 2, 1, 0, 6, 3, 2, 1, 3, 2, 3] 0
1286 [7, 6, 5, 4, 3, 2, 1, 0, 6, 3, 2, 1, 3, 2] 0
1287 [7, 6, 5, 4, 3, 2, 1, 0, 6, 3, 2, 1, 3] 0
1288 [7, 6, 5, 4, 3, 2, 1, 0, 6, 3, 2, 1, 2] 0
1289 [7, 6, 5, 4, 3, 2, 1, 0, 6, 3, 2, 1] 0
1290 [7, 6, 5, 4, 3, 2, 1, 0, 6, 3, 2, 3] 0
1291 [7, 6, 5, 4, 3, 2, 1, 0, 6, 3, 2] 0
1292 [7, 6, 5, 4, 3, 2, 1, 0, 6, 3, 1] 0
1293 [7, 6, 5, 4, 3, 2, 1, 0, 6, 3] 0
1294 [7, 6, 5, 4, 3, 2, 1, 0, 6, 2, 1, 2] 0
1295 [7, 6, 5, 4, 3, 2, 1, 0, 6, 2, 1] 0
1296 [7, 6, 5, 4, 3, 2, 1, 0, 6, 2] 0
1297 [7, 6, 5, 4, 3, 2, 1, 0, 6, 1] 0
1298 [7, 6, 5, 4, 3, 2, 1, 0, 6] 0
1299 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
1300 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
1301 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] 0
1302 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] 0
1303 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] 0
1304 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] 0
1305 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] 0
1306 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] 0
1307 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5] 0
1308 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] 0
1309 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] 0
1310 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4] 0
1311 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 3] 0
1312 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2] 0
1313 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] 0
1314 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4] 0
1315 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5] 0
1316 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 4] 0
1317 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3] 0
1318 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2, 5] 0
1319 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2] 0
1320 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 5] 0
1321 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4] 0
1322 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2, 3] 0
1323 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2] 0
1324 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3] 0
1325 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 2] 0
1326 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5] 0
1327 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
1328 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
1329 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4] 0
1330 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 3] 0
1331 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2] 0
1332 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 4] 0
1333 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3] 0
1334 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 2] 0
1335 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4] 0
1336 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2, 3] 0
1337 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2] 0
1338 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3] 0
1339 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 2] 0
1340 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1] 0
1341 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
1342 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
1343 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5] 0
1344 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 4] 0
1345 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3] 0
1346 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 5] 0
1347 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4] 0
1348 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 3] 0
1349 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5] 0
1350 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4, 3, 4] 0
1351 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4, 3] 0
1352 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4] 0
1353 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 3] 0
1354 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2] 0
1355 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5, 4, 5] 0
1356 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5, 4] 0
1357 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5] 0
1358 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 4] 0
1359 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 1] 0
1360 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 5, 4, 5] 0
1361 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 5, 4] 0
1362 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 5] 0
1363 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 4] 0
1364 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3] 0
1365 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 5, 2] 0
1366 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 5] 0
1367 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 2] 0
1368 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 2, 1] 0
1369 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 2, 5] 0
1370 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 2] 0
1371 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 1, 5] 0
1372 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 1] 0
1373 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 5] 0
1374 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4] 0
1375 [7, 6, 5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3, 2, 3] 0
1376 [7, 6, 5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3, 2] 0
1377 [7, 6, 5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3] 0
1378 [7, 6, 5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 2] 0
1379 [7, 6, 5, 4, 3, 2, 1, 0, 5, 3, 2, 1] 0
1380 [7, 6, 5, 4, 3, 2, 1, 0, 5, 3, 2, 3] 0
1381 [7, 6, 5, 4, 3, 2, 1, 0, 5, 3, 2] 0
1382 [7, 6, 5, 4, 3, 2, 1, 0, 5, 3, 1] 0
1383 [7, 6, 5, 4, 3, 2, 1, 0, 5, 3] 0
1384 [7, 6, 5, 4, 3, 2, 1, 0, 5, 2, 1, 2] 0
1385 [7, 6, 5, 4, 3, 2, 1, 0, 5, 2, 1] 0
1386 [7, 6, 5, 4, 3, 2, 1, 0, 5, 2] 0
1387 [7, 6, 5, 4, 3, 2, 1, 0, 5, 1] 0
1388 [7, 6, 5, 4, 3, 2, 1, 0, 5] 0
1389 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
1390 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
1391 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4] 0
1392 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 3] 0
1393 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2] 0
1394 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 4] 0
1395 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3] 0
1396 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 2] 0
1397 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4] 0
1398 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2, 3] 0
1399 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2] 0
1400 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3] 0
1401 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 2] 0
1402 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1] 0
1403 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3, 4] 0
1404 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3] 0
1405 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 4] 0
1406 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 3] 0
1407 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3, 2] 0
1408 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3, 1, 4] 0
1409 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3, 1] 0
1410 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3, 4] 0
1411 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3] 0
1412 [7, 6, 5, 4, 3, 2, 1, 0, 4, 2, 1, 2] 0
1413 [7, 6, 5, 4, 3, 2, 1, 0, 4, 2, 1] 0
1414 [7, 6, 5, 4, 3, 2, 1, 0, 4, 2] 0
1415 [7, 6, 5, 4, 3, 2, 1, 0, 4, 1] 0
1416 [7, 6, 5, 4, 3, 2, 1, 0, 4] 0
1417 [7, 6, 5, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
1418 [7, 6, 5, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
1419 [7, 6, 5, 4, 3, 2, 1, 0, 3, 2, 1, 3] 0
1420 [7, 6, 5, 4, 3, 2, 1, 0, 3, 2, 1, 2] 0
1421 [7, 6, 5, 4, 3, 2, 1, 0, 3, 2, 1] 0
1422 [7, 6, 5, 4, 3, 2, 1, 0, 3, 2, 3] 0
1423 [7, 6, 5, 4, 3, 2, 1, 0, 3, 2] 0
1424 [7, 6, 5, 4, 3, 2, 1, 0, 3, 1] 0
1425 [7, 6, 5, 4, 3, 2, 1, 0, 3] 0
1426 [7, 6, 5, 4, 3, 2, 1, 0, 2, 1, 2] 0
1427 [7, 6, 5, 4, 3, 2, 1, 0, 2, 1] 0
1428 [7, 6, 5, 4, 3, 2, 1, 0, 2] 0
1429 [7, 6, 5, 4, 3, 2, 1, 0, 1] 0
1430 [7, 6, 5, 4, 3, 2, 1, 0] 0
1431 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7, 6, 7] 0
1432 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7, 6] 0
1433 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7] 0
1434 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 6] 0
1435 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5] 0
1436 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 7] 0
1437 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6] 0
1438 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 5] 0
1439 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7] 0
1440 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6, 5, 6] 0
1441 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6, 5] 0
1442 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6] 0
1443 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 5] 0
1444 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4] 0
1445 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 7, 6, 7] 0
1446 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 7, 6] 0
1447 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 7] 0
1448 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 6] 0
1449 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5] 0
1450 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 4, 7] 0
1451 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 4] 0
1452 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 7] 0
1453 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6] 0
1454 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 5, 4, 5] 0
1455 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 5, 4] 0
1456 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 5] 0
1457 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 4] 0
1458 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7] 0
1459 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
1460 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
1461 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 4, 6] 0
1462 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 4, 5] 0
1463 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 4] 0
1464 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 6] 0
1465 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5] 0
1466 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 4] 0
1467 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6] 0
1468 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 5, 4, 5] 0
1469 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 5, 4] 0
1470 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 5] 0
1471 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 4] 0
1472 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3] 0
1473 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 5, 7, 6, 7] 0
1474 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 5, 7, 6] 0
1475 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 5, 7] 0
1476 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 5, 6] 0
1477 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 5] 0
1478 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 7] 0
1479 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6] 0
1480 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 5] 0
1481 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7] 0
1482 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 6, 5, 6] 0
1483 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 6, 5] 0
1484 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 6] 0
1485 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 5] 0
1486 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4] 0
1487 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 3, 7, 6, 7] 0
1488 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 3, 7, 6] 0
1489 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 3, 7] 0
1490 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 3, 6] 0
1491 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 3] 0
1492 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 7, 6, 7] 0
1493 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 7, 6] 0
1494 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 7] 0
1495 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 6] 0
1496 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5] 0
1497 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 4, 3, 7, 4] 0
1498 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 4, 3, 7] 0
1499 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 4, 3, 4] 0
1500 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 4, 3] 0
1501 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 4, 7] 0
1502 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 4] 0
1503 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 3, 7] 0
1504 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 3] 0
1505 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 7] 0
1506 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6] 0
1507 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 5, 4, 3, 5, 4, 5] 0
1508 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 5, 4, 3, 5, 4] 0
1509 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 5, 4, 3, 5] 0
1510 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 5, 4, 3, 4] 0
1511 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 5, 4, 3] 0
1512 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 5, 4, 5] 0
1513 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 5, 4] 0
1514 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 5, 3] 0
1515 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 5] 0
1516 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 4, 3, 4] 0
1517 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 4, 3] 0
1518 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 4] 0
1519 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 3] 0
1520 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7] 0
1521 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
1522 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
1523 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6] 0
1524 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 5] 0
1525 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4] 0
1526 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 6] 0
1527 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5] 0
1528 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 4] 0
1529 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6] 0
1530 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4, 5] 0
1531 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4] 0
1532 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5] 0
1533 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 4] 0
1534 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3] 0
1535 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5, 6] 0
1536 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5] 0
1537 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 6] 0
1538 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 5] 0
1539 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4] 0
1540 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 3, 6] 0
1541 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 3] 0
1542 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 6] 0
1543 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5] 0
1544 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 4, 3, 4] 0
1545 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 4, 3] 0
1546 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 4] 0
1547 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 3] 0
1548 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6] 0
1549 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
1550 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
1551 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 5, 4, 3, 5] 0
1552 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 5, 4, 3, 4] 0
1553 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 5, 4, 3] 0
1554 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 5, 4, 5] 0
1555 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 5, 4] 0
1556 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 5, 3] 0
1557 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 5] 0
1558 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 4, 3, 4] 0
1559 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 4, 3] 0
1560 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 4] 0
1561 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 3] 0
1562 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2] 0
1563 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7, 6, 7] 0
1564 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7, 6] 0
1565 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7] 0
1566 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 6] 0
1567 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5] 0
1568 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 7] 0
1569 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6] 0
1570 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 5] 0
1571 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7] 0
1572 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6, 5, 6] 0
1573 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6, 5] 0
1574 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6] 0
1575 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 5] 0
1576 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4] 0
1577 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 7, 6, 7] 0
1578 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 7, 6] 0
1579 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 7] 0
1580 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 6] 0
1581 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5] 0
1582 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 4, 7] 0
1583 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 4] 0
1584 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 7] 0
1585 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6] 0
1586 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 5, 4, 5] 0
1587 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 5, 4] 0
1588 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 5] 0
1589 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 4] 0
1590 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7] 0
1591 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
1592 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
1593 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 6, 5, 4, 6] 0
1594 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 6, 5, 4, 5] 0
1595 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 6, 5, 4] 0
1596 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 6, 5, 6] 0
1597 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 6, 5] 0
1598 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 6, 4] 0
1599 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 6] 0
1600 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 5, 4, 5] 0
1601 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 5, 4] 0
1602 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 5] 0
1603 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 4] 0
1604 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3] 0
1605 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 7, 6, 5, 7, 6, 7] 0
1606 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 7, 6, 5, 7, 6] 0
1607 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 7, 6, 5, 7] 0
1608 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 7, 6, 5, 6] 0
1609 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 7, 6, 5] 0
1610 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 7, 6, 7] 0
1611 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 7, 6] 0
1612 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 7, 5] 0
1613 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 7] 0
1614 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 6, 5, 6] 0
1615 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 6, 5] 0
1616 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 6] 0
1617 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 5] 0
1618 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2] 0
1619 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 7, 6, 5, 7, 6, 7] 0
1620 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 7, 6, 5, 7, 6] 0
1621 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 7, 6, 5, 7] 0
1622 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 7, 6, 5, 6] 0
1623 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 7, 6, 5] 0
1624 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 7, 6, 7] 0
1625 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 7, 6] 0
1626 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 7, 5] 0
1627 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 7] 0
1628 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 6, 5, 6] 0
1629 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 6, 5] 0
1630 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 6] 0
1631 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 5] 0
1632 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4] 0
1633 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 2, 7, 6, 3, 7] 0
1634 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 2, 7, 6, 3] 0
1635 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 2, 7, 6, 7] 0
1636 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 2, 7, 6] 0
1637 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 2, 7, 3] 0
1638 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 2, 7] 0
1639 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 2, 6, 3] 0
1640 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 2, 6] 0
1641 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 2, 3] 0
1642 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 2] 0
1643 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 7, 6, 7] 0
1644 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 7, 6] 0
1645 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 7] 0
1646 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 6] 0
1647 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3] 0
1648 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 2, 7, 6, 7] 0
1649 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 2, 7, 6] 0
1650 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 2, 7] 0
1651 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 2, 6] 0
1652 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 2] 0
1653 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 7, 6, 7] 0
1654 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 7, 6] 0
1655 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 7] 0
1656 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 6] 0
1657 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5] 0
1658 [7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 2, 7, 4, 3, 4] 0
1659 [7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 2, 7, 4, 3] 0
1660 [7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 2, 7, 4] 0
1661 [7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 2, 7, 3] 0
1662 [7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 2, 7] 0
1663 [7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 2, 4, 3, 4] 0
1664 [7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 2, 4, 3] 0
1665 [7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 2, 4] 0
1666 [7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 2, 3] 0
1667 [7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 2] 0
1668 [7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 7, 4] 0
1669 [7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 7] 0
1670 [7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 4] 0
1671 [7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3] 0
1672 [7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 2, 7] 0
1673 [7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 2] 0
1674 [7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 7] 0
1675 [7, 6, 5, 4, 3, 2, 1, 7, 6, 4] 0
1676 [7, 6, 5, 4, 3, 2, 1, 7, 6, 3, 2, 7, 3] 0
1677 [7, 6, 5, 4, 3, 2, 1, 7, 6, 3, 2, 7] 0
1678 [7, 6, 5, 4, 3, 2, 1, 7, 6, 3, 2, 3] 0
1679 [7, 6, 5, 4, 3, 2, 1, 7, 6, 3, 2] 0
1680 [7, 6, 5, 4, 3, 2, 1, 7, 6, 3, 7] 0
1681 [7, 6, 5, 4, 3, 2, 1, 7, 6, 3] 0
1682 [7, 6, 5, 4, 3, 2, 1, 7, 6, 2, 7] 0
1683 [7, 6, 5, 4, 3, 2, 1, 7, 6, 2] 0
1684 [7, 6, 5, 4, 3, 2, 1, 7, 6, 7] 0
1685 [7, 6, 5, 4, 3, 2, 1, 7, 6] 0
1686 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
1687 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
1688 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 5, 4, 3, 5] 0
1689 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 5, 4, 3, 4] 0
1690 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 5, 4, 3] 0
1691 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 5, 4, 5] 0
1692 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 5, 4] 0
1693 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 5, 3] 0
1694 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 5] 0
1695 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 4, 3, 4] 0
1696 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 4, 3] 0
1697 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 4] 0
1698 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 3] 0
1699 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2] 0
1700 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 5, 4, 5] 0
1701 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 5, 4] 0
1702 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 5] 0
1703 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 4] 0
1704 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3] 0
1705 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 2, 5] 0
1706 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 2] 0
1707 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 5] 0
1708 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4] 0
1709 [7, 6, 5, 4, 3, 2, 1, 7, 5, 3, 2, 3] 0
1710 [7, 6, 5, 4, 3, 2, 1, 7, 5, 3, 2] 0
1711 [7, 6, 5, 4, 3, 2, 1, 7, 5, 3] 0
1712 [7, 6, 5, 4, 3, 2, 1, 7, 5, 2] 0
1713 [7, 6, 5, 4, 3, 2, 1, 7, 5] 0
1714 [7, 6, 5, 4, 3, 2, 1, 7, 4, 3, 2, 4, 3, 4] 0
1715 [7, 6, 5, 4, 3, 2, 1, 7, 4, 3, 2, 4, 3] 0
1716 [7, 6, 5, 4, 3, 2, 1, 7, 4, 3, 2, 4] 0
1717 [7, 6, 5, 4, 3, 2, 1, 7, 4, 3, 2, 3] 0
1718 [7, 6, 5, 4, 3, 2, 1, 7, 4, 3, 2] 0
1719 [7, 6, 5, 4, 3, 2, 1, 7, 4, 3, 4] 0
1720 [7, 6, 5, 4, 3, 2, 1, 7, 4, 3] 0
1721 [7, 6, 5, 4, 3, 2, 1, 7, 4, 2] 0
1722 [7, 6, 5, 4, 3, 2, 1, 7, 4] 0
1723 [7, 6, 5, 4, 3, 2, 1, 7, 3, 2, 3] 0
1724 [7, 6, 5, 4, 3, 2, 1, 7, 3, 2] 0
1725 [7, 6, 5, 4, 3, 2, 1, 7, 3] 0
1726 [7, 6, 5, 4, 3, 2, 1, 7, 2] 0
1727 [7, 6, 5, 4, 3, 2, 1, 7] 0
1728 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
1729 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
1730 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6] 0
1731 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 5] 0
1732 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4] 0
1733 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 6] 0
1734 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5] 0
1735 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 4] 0
1736 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6] 0
1737 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4, 5] 0
1738 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4] 0
1739 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5] 0
1740 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 4] 0
1741 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3] 0
1742 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5, 6] 0
1743 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5] 0
1744 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 6] 0
1745 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 5] 0
1746 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4] 0
1747 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 3, 6] 0
1748 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 3] 0
1749 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 6] 0
1750 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5] 0
1751 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 4, 3, 4] 0
1752 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 4, 3] 0
1753 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 4] 0
1754 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 3] 0
1755 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6] 0
1756 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
1757 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
1758 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3, 5] 0
1759 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3, 4] 0
1760 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3] 0
1761 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 5] 0
1762 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4] 0
1763 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 3] 0
1764 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5] 0
1765 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 4, 3, 4] 0
1766 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 4, 3] 0
1767 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 4] 0
1768 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 3] 0
1769 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2] 0
1770 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
1771 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
1772 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4, 6] 0
1773 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4, 5] 0
1774 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4] 0
1775 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 6] 0
1776 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5] 0
1777 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 4] 0
1778 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6] 0
1779 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 5, 4, 5] 0
1780 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 5, 4] 0
1781 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 5] 0
1782 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 4] 0
1783 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3] 0
1784 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 2, 6, 5, 6] 0
1785 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 2, 6, 5] 0
1786 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 2, 6] 0
1787 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 2, 5] 0
1788 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 2] 0
1789 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 6, 5, 6] 0
1790 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 6, 5] 0
1791 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 6] 0
1792 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 5] 0
1793 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4] 0
1794 [7, 6, 5, 4, 3, 2, 1, 6, 5, 3, 2, 6, 3] 0
1795 [7, 6, 5, 4, 3, 2, 1, 6, 5, 3, 2, 6] 0
1796 [7, 6, 5, 4, 3, 2, 1, 6, 5, 3, 2, 3] 0
1797 [7, 6, 5, 4, 3, 2, 1, 6, 5, 3, 2] 0
1798 [7, 6, 5, 4, 3, 2, 1, 6, 5, 3, 6] 0
1799 [7, 6, 5, 4, 3, 2, 1, 6, 5, 3] 0
1800 [7, 6, 5, 4, 3, 2, 1, 6, 5, 2, 6] 0
1801 [7, 6, 5, 4, 3, 2, 1, 6, 5, 2] 0
1802 [7, 6, 5, 4, 3, 2, 1, 6, 5, 6] 0
1803 [7, 6, 5, 4, 3, 2, 1, 6, 5] 0
1804 [7, 6, 5, 4, 3, 2, 1, 6, 4, 3, 2, 4, 3, 4] 0
1805 [7, 6, 5, 4, 3, 2, 1, 6, 4, 3, 2, 4, 3] 0
1806 [7, 6, 5, 4, 3, 2, 1, 6, 4, 3, 2, 4] 0
1807 [7, 6, 5, 4, 3, 2, 1, 6, 4, 3, 2, 3] 0
1808 [7, 6, 5, 4, 3, 2, 1, 6, 4, 3, 2] 0
1809 [7, 6, 5, 4, 3, 2, 1, 6, 4, 3, 4] 0
1810 [7, 6, 5, 4, 3, 2, 1, 6, 4, 3] 0
1811 [7, 6, 5, 4, 3, 2, 1, 6, 4, 2] 0
1812 [7, 6, 5, 4, 3, 2, 1, 6, 4] 0
1813 [7, 6, 5, 4, 3, 2, 1, 6, 3, 2, 3] 0
1814 [7, 6, 5, 4, 3, 2, 1, 6, 3, 2] 0
1815 [7, 6, 5, 4, 3, 2, 1, 6, 3] 0
1816 [7, 6, 5, 4, 3, 2, 1, 6, 2] 0
1817 [7, 6, 5, 4, 3, 2, 1, 6] 0
1818 [7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
1819 [7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
1820 [7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] 0
1821 [7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] 0
1822 [7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] 0
1823 [7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] 0
1824 [7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] 0
1825 [7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] 0
1826 [7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5] 0
1827 [7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] 0
1828 [7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] 0
1829 [7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4] 0
1830 [7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 3] 0
1831 [7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2] 0
1832 [7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] 0
1833 [7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4] 0
1834 [7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 5] 0
1835 [7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 4] 0
1836 [7, 6, 5, 4, 3, 2, 1, 5, 4, 3] 0
1837 [7, 6, 5, 4, 3, 2, 1, 5, 4, 2, 5] 0
1838 [7, 6, 5, 4, 3, 2, 1, 5, 4, 2] 0
1839 [7, 6, 5, 4, 3, 2, 1, 5, 4, 5] 0
1840 [7, 6, 5, 4, 3, 2, 1, 5, 4] 0
1841 [7, 6, 5, 4, 3, 2, 1, 5, 3, 2, 3] 0
1842 [7, 6, 5, 4, 3, 2, 1, 5, 3, 2] 0
1843 [7, 6, 5, 4, 3, 2, 1, 5, 3] 0
1844 [7, 6, 5, 4, 3, 2, 1, 5, 2] 0
1845 [7, 6, 5, 4, 3, 2, 1, 5] 0
1846 [7, 6, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
1847 [7, 6, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
1848 [7, 6, 5, 4, 3, 2, 1, 4, 3, 2, 4] 0
1849 [7, 6, 5, 4, 3, 2, 1, 4, 3, 2, 3] 0
1850 [7, 6, 5, 4, 3, 2, 1, 4, 3, 2] 0
1851 [7, 6, 5, 4, 3, 2, 1, 4, 3, 4] 0
1852 [7, 6, 5, 4, 3, 2, 1, 4, 3] 0
1853 [7, 6, 5, 4, 3, 2, 1, 4, 2] 0
1854 [7, 6, 5, 4, 3, 2, 1, 4] 0
1855 [7, 6, 5, 4, 3, 2, 1, 3, 2, 3] 0
1856 [7, 6, 5, 4, 3, 2, 1, 3, 2] 0
1857 [7, 6, 5, 4, 3, 2, 1, 3] 0
1858 [7, 6, 5, 4, 3, 2, 1, 2] 0
1859 [7, 6, 5, 4, 3, 2, 1] 0
1860 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7, 6, 7] 0
1861 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7, 6] 0
1862 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7] 0
1863 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 6] 0
1864 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5] 0
1865 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 7] 0
1866 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6] 0
1867 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 5] 0
1868 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7] 0
1869 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6, 5, 6] 0
1870 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6, 5] 0
1871 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6] 0
1872 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 5] 0
1873 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4] 0
1874 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6, 5, 7, 6, 7] 0
1875 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6, 5, 7, 6] 0
1876 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6, 5, 7] 0
1877 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6, 5, 6] 0
1878 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6, 5] 0
1879 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6, 4, 7] 0
1880 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6, 4] 0
1881 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6, 7] 0
1882 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6] 0
1883 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 5, 4, 5] 0
1884 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 5, 4] 0
1885 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 5] 0
1886 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 4] 0
1887 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7] 0
1888 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
1889 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
1890 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 6, 5, 4, 6] 0
1891 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 6, 5, 4, 5] 0
1892 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 6, 5, 4] 0
1893 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 6, 5, 6] 0
1894 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 6, 5] 0
1895 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 6, 4] 0
1896 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 6] 0
1897 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 5, 4, 5] 0
1898 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 5, 4] 0
1899 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 5] 0
1900 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 4] 0
1901 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3] 0
1902 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 7, 6, 5, 7, 6, 7] 0
1903 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 7, 6, 5, 7, 6] 0
1904 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 7, 6, 5, 7] 0
1905 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 7, 6, 5, 6] 0
1906 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 7, 6, 5] 0
1907 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 7, 6, 7] 0
1908 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 7, 6] 0
1909 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 7, 5] 0
1910 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 7] 0
1911 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 6, 5, 6] 0
1912 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 6, 5] 0
1913 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 6] 0
1914 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 5] 0
1915 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4] 0
1916 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 3, 7, 6, 7] 0
1917 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 3, 7, 6] 0
1918 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 3, 7] 0
1919 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 3, 6] 0
1920 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 3] 0
1921 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 7, 6, 7] 0
1922 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 7, 6] 0
1923 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 7] 0
1924 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 6] 0
1925 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5] 0
1926 [7, 6, 5, 4, 3, 2, 0, 7, 6, 4, 3, 7, 4] 0
1927 [7, 6, 5, 4, 3, 2, 0, 7, 6, 4, 3, 7] 0
1928 [7, 6, 5, 4, 3, 2, 0, 7, 6, 4, 3, 4] 0
1929 [7, 6, 5, 4, 3, 2, 0, 7, 6, 4, 3] 0
1930 [7, 6, 5, 4, 3, 2, 0, 7, 6, 4, 7] 0
1931 [7, 6, 5, 4, 3, 2, 0, 7, 6, 4] 0
1932 [7, 6, 5, 4, 3, 2, 0, 7, 6, 3, 7] 0
1933 [7, 6, 5, 4, 3, 2, 0, 7, 6, 3] 0
1934 [7, 6, 5, 4, 3, 2, 0, 7, 6, 7] 0
1935 [7, 6, 5, 4, 3, 2, 0, 7, 6] 0
1936 [7, 6, 5, 4, 3, 2, 0, 7, 5, 4, 3, 5, 4, 5] 0
1937 [7, 6, 5, 4, 3, 2, 0, 7, 5, 4, 3, 5, 4] 0
1938 [7, 6, 5, 4, 3, 2, 0, 7, 5, 4, 3, 5] 0
1939 [7, 6, 5, 4, 3, 2, 0, 7, 5, 4, 3, 4] 0
1940 [7, 6, 5, 4, 3, 2, 0, 7, 5, 4, 3] 0
1941 [7, 6, 5, 4, 3, 2, 0, 7, 5, 4, 5] 0
1942 [7, 6, 5, 4, 3, 2, 0, 7, 5, 4] 0
1943 [7, 6, 5, 4, 3, 2, 0, 7, 5, 3] 0
1944 [7, 6, 5, 4, 3, 2, 0, 7, 5] 0
1945 [7, 6, 5, 4, 3, 2, 0, 7, 4, 3, 4] 0
1946 [7, 6, 5, 4, 3, 2, 0, 7, 4, 3] 0
1947 [7, 6, 5, 4, 3, 2, 0, 7, 4] 0
1948 [7, 6, 5, 4, 3, 2, 0, 7, 3] 0
1949 [7, 6, 5, 4, 3, 2, 0, 7] 0
1950 [7, 6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
1951 [7, 6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
1952 [7, 6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 6, 5, 4, 6] 0
1953 [7, 6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 6, 5, 4, 5] 0
1954 [7, 6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 6, 5, 4] 0
1955 [7, 6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 6, 5, 6] 0
1956 [7, 6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 6, 5] 0
1957 [7, 6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 6, 4] 0
1958 [7, 6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 6] 0
1959 [7, 6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 5, 4, 5] 0
1960 [7, 6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 5, 4] 0
1961 [7, 6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 5] 0
1962 [7, 6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 4] 0
1963 [7, 6, 5, 4, 3, 2, 0, 6, 5, 4, 3] 0
1964 [7, 6, 5, 4, 3, 2, 0, 6, 5, 4, 6, 5, 6] 0
1965 [7, 6, 5, 4, 3, 2, 0, 6, 5, 4, 6, 5] 0
1966 [7, 6, 5, 4, 3, 2, 0, 6, 5, 4, 6] 0
1967 [7, 6, 5, 4, 3, 2, 0, 6, 5, 4, 5] 0
1968 [7, 6, 5, 4, 3, 2, 0, 6, 5, 4] 0
1969 [7, 6, 5, 4, 3, 2, 0, 6, 5, 3, 6] 0
1970 [7, 6, 5, 4, 3, 2, 0, 6, 5, 3] 0
1971 [7, 6, 5, 4, 3, 2, 0, 6, 5, 6] 0
1972 [7, 6, 5, 4, 3, 2, 0, 6, 5] 0
1973 [7, 6, 5, 4, 3, 2, 0, 6, 4, 3, 4] 0
1974 [7, 6, 5, 4, 3, 2, 0, 6, 4, 3] 0
1975 [7, 6, 5, 4, 3, 2, 0, 6, 4] 0
1976 [7, 6, 5, 4, 3, 2, 0, 6, 3] 0
1977 [7, 6, 5, 4, 3, 2, 0, 6] 0
1978 [7, 6, 5, 4, 3, 2, 0, 5, 4, 3, 5, 4, 5] 0
1979 [7, 6, 5, 4, 3, 2, 0, 5, 4, 3, 5, 4] 0
1980 [7, 6, 5, 4, 3, 2, 0, 5, 4, 3, 5] 0
1981 [7, 6, 5, 4, 3, 2, 0, 5, 4, 3, 4] 0
1982 [7, 6, 5, 4, 3, 2, 0, 5, 4, 3] 0
1983 [7, 6, 5, 4, 3, 2, 0, 5, 4, 5] 0
1984 [7, 6, 5, 4, 3, 2, 0, 5, 4] 0
1985 [7, 6, 5, 4, 3, 2, 0, 5, 3] 0
1986 [7, 6, 5, 4, 3, 2, 0, 5] 0
1987 [7, 6, 5, 4, 3, 2, 0, 4, 3, 4] 0
1988 [7, 6, 5, 4, 3, 2, 0, 4, 3] 0
1989 [7, 6, 5, 4, 3, 2, 0, 4] 0
1990 [7, 6, 5, 4, 3, 2, 0, 3] 0
1991 [7, 6, 5, 4, 3, 2, 0] 0
1992 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7, 6, 7] 0
1993 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7, 6] 0
1994 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7] 0
1995 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 6] 0
1996 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5] 0
1997 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 7] 0
1998 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6] 0
1999 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 5] 0
2000 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7] 0
2001 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6, 5, 6] 0
2002 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6, 5] 0
2003 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6] 0
2004 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 5] 0
2005 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4] 0
2006 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 7, 6, 7] 0
2007 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 7, 6] 0
2008 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 7] 0
2009 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 6] 0
2010 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5] 0
2011 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 4, 7] 0
2012 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 4] 0
2013 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 7] 0
2014 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6] 0
2015 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 5, 4, 5] 0
2016 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 5, 4] 0
2017 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 5] 0
2018 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 4] 0
2019 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7] 0
2020 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
2021 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
2022 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 4, 6] 0
2023 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 4, 5] 0
2024 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 4] 0
2025 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 6] 0
2026 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5] 0
2027 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 4] 0
2028 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6] 0
2029 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 5, 4, 5] 0
2030 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 5, 4] 0
2031 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 5] 0
2032 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 4] 0
2033 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3] 0
2034 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 5, 7, 6, 7] 0
2035 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 5, 7, 6] 0
2036 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 5, 7] 0
2037 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 5, 6] 0
2038 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 5] 0
2039 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 7] 0
2040 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6] 0
2041 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 5] 0
2042 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7] 0
2043 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 6, 5, 6] 0
2044 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 6, 5] 0
2045 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 6] 0
2046 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 5] 0
2047 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4] 0
2048 [7, 6, 5, 4, 3, 2, 7, 6, 5, 3, 7, 6, 7] 0
2049 [7, 6, 5, 4, 3, 2, 7, 6, 5, 3, 7, 6] 0
2050 [7, 6, 5, 4, 3, 2, 7, 6, 5, 3, 7] 0
2051 [7, 6, 5, 4, 3, 2, 7, 6, 5, 3, 6] 0
2052 [7, 6, 5, 4, 3, 2, 7, 6, 5, 3] 0
2053 [7, 6, 5, 4, 3, 2, 7, 6, 5, 7, 6, 7] 0
2054 [7, 6, 5, 4, 3, 2, 7, 6, 5, 7, 6] 0
2055 [7, 6, 5, 4, 3, 2, 7, 6, 5, 7] 0
2056 [7, 6, 5, 4, 3, 2, 7, 6, 5, 6] 0
2057 [7, 6, 5, 4, 3, 2, 7, 6, 5] 0
2058 [7, 6, 5, 4, 3, 2, 7, 6, 4, 3, 7, 4] 0
2059 [7, 6, 5, 4, 3, 2, 7, 6, 4, 3, 7] 0
2060 [7, 6, 5, 4, 3, 2, 7, 6, 4, 3, 4] 0
2061 [7, 6, 5, 4, 3, 2, 7, 6, 4, 3] 0
2062 [7, 6, 5, 4, 3, 2, 7, 6, 4, 7] 0
2063 [7, 6, 5, 4, 3, 2, 7, 6, 4] 0
2064 [7, 6, 5, 4, 3, 2, 7, 6, 3, 7] 0
2065 [7, 6, 5, 4, 3, 2, 7, 6, 3] 0
2066 [7, 6, 5, 4, 3, 2, 7, 6, 7] 0
2067 [7, 6, 5, 4, 3, 2, 7, 6] 0
2068 [7, 6, 5, 4, 3, 2, 7, 5, 4, 3, 5, 4, 5] 0
2069 [7, 6, 5, 4, 3, 2, 7, 5, 4, 3, 5, 4] 0
2070 [7, 6, 5, 4, 3, 2, 7, 5, 4, 3, 5] 0
2071 [7, 6, 5, 4, 3, 2, 7, 5, 4, 3, 4] 0
2072 [7, 6, 5, 4, 3, 2, 7, 5, 4, 3] 0
2073 [7, 6, 5, 4, 3, 2, 7, 5, 4, 5] 0
2074 [7, 6, 5, 4, 3, 2, 7, 5, 4] 0
2075 [7, 6, 5, 4, 3, 2, 7, 5, 3] 0
2076 [7, 6, 5, 4, 3, 2, 7, 5] 0
2077 [7, 6, 5, 4, 3, 2, 7, 4, 3, 4] 0
2078 [7, 6, 5, 4, 3, 2, 7, 4, 3] 0
2079 [7, 6, 5, 4, 3, 2, 7, 4] 0
2080 [7, 6, 5, 4, 3, 2, 7, 3] 0
2081 [7, 6, 5, 4, 3, 2, 7] 0
2082 [7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
2083 [7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
2084 [7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6] 0
2085 [7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 5] 0
2086 [7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4] 0
2087 [7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 6] 0
2088 [7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5] 0
2089 [7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 4] 0
2090 [7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6] 0
2091 [7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4, 5] 0
2092 [7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4] 0
2093 [7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5] 0
2094 [7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 4] 0
2095 [7, 6, 5, 4, 3, 2, 6, 5, 4, 3] 0
2096 [7, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5, 6] 0
2097 [7, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5] 0
2098 [7, 6, 5, 4, 3, 2, 6, 5, 4, 6] 0
2099 [7, 6, 5, 4, 3, 2, 6, 5, 4, 5] 0
2100 [7, 6, 5, 4, 3, 2, 6, 5, 4] 0
2101 [7, 6, 5, 4, 3, 2, 6, 5, 3, 6] 0
2102 [7, 6, 5, 4, 3, 2, 6, 5, 3] 0
2103 [7, 6, 5, 4, 3, 2, 6, 5, 6] 0
2104 [7, 6, 5, 4, 3, 2, 6, 5] 0
2105 [7, 6, 5, 4, 3, 2, 6, 4, 3, 4] 0
2106 [7, 6, 5, 4, 3, 2, 6, 4, 3] 0
2107 [7, 6, 5, 4, 3, 2, 6, 4] 0
2108 [7, 6, 5, 4, 3, 2, 6, 3] 0
2109 [7, 6, 5, 4, 3, 2, 6] 0
2110 [7, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
2111 [7, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
2112 [7, 6, 5, 4, 3, 2, 5, 4, 3, 5] 0
2113 [7, 6, 5, 4, 3, 2, 5, 4, 3, 4] 0
2114 [7, 6, 5, 4, 3, 2, 5, 4, 3] 0
2115 [7, 6, 5, 4, 3, 2, 5, 4, 5] 0
2116 [7, 6, 5, 4, 3, 2, 5, 4] 0
2117 [7, 6, 5, 4, 3, 2, 5, 3] 0
2118 [7, 6, 5, 4, 3, 2, 5] 0
2119 [7, 6, 5, 4, 3, 2, 4, 3, 4] 0
2120 [7, 6, 5, 4, 3, 2, 4, 3] 0
2121 [7, 6, 5, 4, 3, 2, 4] 0
2122 [7, 6, 5, 4, 3, 2, 3] 0
2123 [7, 6, 5, 4, 3, 2] 0
2124 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 1, 7, 6, 5, 7, 6, 7] 0
2125 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 1, 7, 6, 5, 7, 6] 0
2126 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 1, 7, 6, 5, 7] 0
2127 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 1, 7, 6, 5, 6] 0
2128 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 1, 7, 6, 5] 0
2129 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 1, 7, 6, 7] 0
2130 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 1, 7, 6] 0
2131 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 1, 7, 5] 0
2132 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 1, 7] 0
2133 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 1, 6, 5, 6] 0
2134 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 1, 6, 5] 0
2135 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 1, 6] 0
2136 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 1, 5] 0
2137 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 1] 0
2138 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 7, 6, 5, 7, 6, 7] 0
2139 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 7, 6, 5, 7, 6] 0
2140 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 7, 6, 5, 7] 0
2141 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 7, 6, 5, 6] 0
2142 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 7, 6, 5] 0
2143 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 7, 6, 7] 0
2144 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 7, 6] 0
2145 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 7, 5] 0
2146 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 7] 0
2147 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 6, 5, 6] 0
2148 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 6, 5] 0
2149 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 6] 0
2150 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 5] 0
2151 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4] 0
2152 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 1, 7, 6, 7] 0
2153 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 1, 7, 6] 0
2154 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 1, 7] 0
2155 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 1, 6] 0
2156 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 1] 0
2157 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 7, 6, 7] 0
2158 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 7, 6] 0
2159 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 7] 0
2160 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 6] 0
2161 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5] 0
2162 [7, 6, 5, 4, 3, 1, 0, 7, 6, 4, 1, 7] 0
2163 [7, 6, 5, 4, 3, 1, 0, 7, 6, 4, 1] 0
2164 [7, 6, 5, 4, 3, 1, 0, 7, 6, 4, 7] 0
2165 [7, 6, 5, 4, 3, 1, 0, 7, 6, 4] 0
2166 [7, 6, 5, 4, 3, 1, 0, 7, 6, 1, 7] 0
2167 [7, 6, 5, 4, 3, 1, 0, 7, 6, 1] 0
2168 [7, 6, 5, 4, 3, 1, 0, 7, 6, 7] 0
2169 [7, 6, 5, 4, 3, 1, 0, 7, 6] 0
2170 [7, 6, 5, 4, 3, 1, 0, 7, 5, 4, 1, 5] 0
2171 [7, 6, 5, 4, 3, 1, 0, 7, 5, 4, 1] 0
2172 [7, 6, 5, 4, 3, 1, 0, 7, 5, 4, 5] 0
2173 [7, 6, 5, 4, 3, 1, 0, 7, 5, 4] 0
2174 [7, 6, 5, 4, 3, 1, 0, 7, 5, 1] 0
2175 [7, 6, 5, 4, 3, 1, 0, 7, 5] 0
2176 [7, 6, 5, 4, 3, 1, 0, 7, 4, 1] 0
2177 [7, 6, 5, 4, 3, 1, 0, 7, 4] 0
2178 [7, 6, 5, 4, 3, 1, 0, 7, 1] 0
2179 [7, 6, 5, 4, 3, 1, 0, 7] 0
2180 [7, 6, 5, 4, 3, 1, 0, 6, 5, 4, 1, 6, 5, 6] 0
2181 [7, 6, 5, 4, 3, 1, 0, 6, 5, 4, 1, 6, 5] 0
2182 [7, 6, 5, 4, 3, 1, 0, 6, 5, 4, 1, 6] 0
2183 [7, 6, 5, 4, 3, 1, 0, 6, 5, 4, 1, 5] 0
2184 [7, 6, 5, 4, 3, 1, 0, 6, 5, 4, 1] 0
2185 [7, 6, 5, 4, 3, 1, 0, 6, 5, 4, 6, 5, 6] 0
2186 [7, 6, 5, 4, 3, 1, 0, 6, 5, 4, 6, 5] 0
2187 [7, 6, 5, 4, 3, 1, 0, 6, 5, 4, 6] 0
2188 [7, 6, 5, 4, 3, 1, 0, 6, 5, 4, 5] 0
2189 [7, 6, 5, 4, 3, 1, 0, 6, 5, 4] 0
2190 [7, 6, 5, 4, 3, 1, 0, 6, 5, 1, 6] 0
2191 [7, 6, 5, 4, 3, 1, 0, 6, 5, 1] 0
2192 [7, 6, 5, 4, 3, 1, 0, 6, 5, 6] 0
2193 [7, 6, 5, 4, 3, 1, 0, 6, 5] 0
2194 [7, 6, 5, 4, 3, 1, 0, 6, 4, 1] 0
2195 [7, 6, 5, 4, 3, 1, 0, 6, 4] 0
2196 [7, 6, 5, 4, 3, 1, 0, 6, 1] 0
2197 [7, 6, 5, 4, 3, 1, 0, 6] 0
2198 [7, 6, 5, 4, 3, 1, 0, 5, 4, 1, 5] 0
2199 [7, 6, 5, 4, 3, 1, 0, 5, 4, 1] 0
2200 [7, 6, 5, 4, 3, 1, 0, 5, 4, 5] 0
2201 [7, 6, 5, 4, 3, 1, 0, 5, 4] 0
2202 [7, 6, 5, 4, 3, 1, 0, 5, 1] 0
2203 [7, 6, 5, 4, 3, 1, 0, 5] 0
2204 [7, 6, 5, 4, 3, 1, 0, 4, 1] 0
2205 [7, 6, 5, 4, 3, 1, 0, 4] 0
2206 [7, 6, 5, 4, 3, 1, 0, 1] 0
2207 [7, 6, 5, 4, 3, 1, 0] 0
2208 [7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 7, 6, 5, 7, 6, 7] 0
2209 [7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 7, 6, 5, 7, 6] 0
2210 [7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 7, 6, 5, 7] 0
2211 [7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 7, 6, 5, 6] 0
2212 [7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 7, 6, 5] 0
2213 [7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 7, 6, 7] 0
2214 [7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 7, 6] 0
2215 [7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 7, 5] 0
2216 [7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 7] 0
2217 [7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 6, 5, 6] 0
2218 [7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 6, 5] 0
2219 [7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 6] 0
2220 [7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 5] 0
2221 [7, 6, 5, 4, 3, 1, 7, 6, 5, 4] 0
2222 [7, 6, 5, 4, 3, 1, 7, 6, 5, 7, 6, 7] 0
2223 [7, 6, 5, 4, 3, 1, 7, 6, 5, 7, 6] 0
2224 [7, 6, 5, 4, 3, 1, 7, 6, 5, 7] 0
2225 [7, 6, 5, 4, 3, 1, 7, 6, 5, 6] 0
2226 [7, 6, 5, 4, 3, 1, 7, 6, 5] 0
2227 [7, 6, 5, 4, 3, 1, 7, 6, 4, 7] 0
2228 [7, 6, 5, 4, 3, 1, 7, 6, 4] 0
2229 [7, 6, 5, 4, 3, 1, 7, 6, 7] 0
2230 [7, 6, 5, 4, 3, 1, 7, 6] 0
2231 [7, 6, 5, 4, 3, 1, 7, 5, 4, 5] 0
2232 [7, 6, 5, 4, 3, 1, 7, 5, 4] 0
2233 [7, 6, 5, 4, 3, 1, 7, 5] 0
2234 [7, 6, 5, 4, 3, 1, 7, 4] 0
2235 [7, 6, 5, 4, 3, 1, 7] 0
2236 [7, 6, 5, 4, 3, 1, 6, 5, 4, 6, 5, 6] 0
2237 [7, 6, 5, 4, 3, 1, 6, 5, 4, 6, 5] 0
2238 [7, 6, 5, 4, 3, 1, 6, 5, 4, 6] 0
2239 [7, 6, 5, 4, 3, 1, 6, 5, 4, 5] 0
2240 [7, 6, 5, 4, 3, 1, 6, 5, 4] 0
2241 [7, 6, 5, 4, 3, 1, 6, 5, 6] 0
2242 [7, 6, 5, 4, 3, 1, 6, 5] 0
2243 [7, 6, 5, 4, 3, 1, 6, 4] 0
2244 [7, 6, 5, 4, 3, 1, 6] 0
2245 [7, 6, 5, 4, 3, 1, 5, 4, 5] 0
2246 [7, 6, 5, 4, 3, 1, 5, 4] 0
2247 [7, 6, 5, 4, 3, 1, 5] 0
2248 [7, 6, 5, 4, 3, 1, 4] 0
2249 [7, 6, 5, 4, 3, 1] 0
2250 [7, 6, 5, 4, 3, 0, 7, 6, 5, 4, 7, 6, 5, 7, 6, 7] 0
2251 [7, 6, 5, 4, 3, 0, 7, 6, 5, 4, 7, 6, 5, 7, 6] 0
2252 [7, 6, 5, 4, 3, 0, 7, 6, 5, 4, 7, 6, 5, 7] 0
2253 [7, 6, 5, 4, 3, 0, 7, 6, 5, 4, 7, 6, 5, 6] 0
2254 [7, 6, 5, 4, 3, 0, 7, 6, 5, 4, 7, 6, 5] 0
2255 [7, 6, 5, 4, 3, 0, 7, 6, 5, 4, 7, 6, 7] 0
2256 [7, 6, 5, 4, 3, 0, 7, 6, 5, 4, 7, 6] 0
2257 [7, 6, 5, 4, 3, 0, 7, 6, 5, 4, 7, 5] 0
2258 [7, 6, 5, 4, 3, 0, 7, 6, 5, 4, 7] 0
2259 [7, 6, 5, 4, 3, 0, 7, 6, 5, 4, 6, 5, 6] 0
2260 [7, 6, 5, 4, 3, 0, 7, 6, 5, 4, 6, 5] 0
2261 [7, 6, 5, 4, 3, 0, 7, 6, 5, 4, 6] 0
2262 [7, 6, 5, 4, 3, 0, 7, 6, 5, 4, 5] 0
2263 [7, 6, 5, 4, 3, 0, 7, 6, 5, 4] 0
2264 [7, 6, 5, 4, 3, 0, 7, 6, 5, 7, 6, 7] 0
2265 [7, 6, 5, 4, 3, 0, 7, 6, 5, 7, 6] 0
2266 [7, 6, 5, 4, 3, 0, 7, 6, 5, 7] 0
2267 [7, 6, 5, 4, 3, 0, 7, 6, 5, 6] 0
2268 [7, 6, 5, 4, 3, 0, 7, 6, 5] 0
2269 [7, 6, 5, 4, 3, 0, 7, 6, 4, 7] 0
2270 [7, 6, 5, 4, 3, 0, 7, 6, 4] 0
2271 [7, 6, 5, 4, 3, 0, 7, 6, 7] 0
2272 [7, 6, 5, 4, 3, 0, 7, 6] 0
2273 [7, 6, 5, 4, 3, 0, 7, 5, 4, 5] 0
2274 [7, 6, 5, 4, 3, 0, 7, 5, 4] 0
2275 [7, 6, 5, 4, 3, 0, 7, 5] 0
2276 [7, 6, 5, 4, 3, 0, 7, 4] 0
2277 [7, 6, 5, 4, 3, 0, 7] 0
2278 [7, 6, 5, 4, 3, 0, 6, 5, 4, 6, 5, 6] 0
2279 [7, 6, 5, 4, 3, 0, 6, 5, 4, 6, 5] 0
2280 [7, 6, 5, 4, 3, 0, 6, 5, 4, 6] 0
2281 [7, 6, 5, 4, 3, 0, 6, 5, 4, 5] 0
2282 [7, 6, 5, 4, 3, 0, 6, 5, 4] 0
2283 [7, 6, 5, 4, 3, 0, 6, 5, 6] 0
2284 [7, 6, 5, 4, 3, 0, 6, 5] 0
2285 [7, 6, 5, 4, 3, 0, 6, 4] 0
2286 [7, 6, 5, 4, 3, 0, 6] 0
2287 [7, 6, 5, 4, 3, 0, 5, 4, 5] 0
2288 [7, 6, 5, 4, 3, 0, 5, 4] 0
2289 [7, 6, 5, 4, 3, 0, 5] 0
2290 [7, 6, 5, 4, 3, 0, 4] 0
2291 [7, 6, 5, 4, 3, 0] 0
2292 [7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7, 6, 7] 0
2293 [7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7, 6] 0
2294 [7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7] 0
2295 [7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 6] 0
2296 [7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5] 0
2297 [7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 7] 0
2298 [7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6] 0
2299 [7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 5] 0
2300 [7, 6, 5, 4, 3, 7, 6, 5, 4, 7] 0
2301 [7, 6, 5, 4, 3, 7, 6, 5, 4, 6, 5, 6] 0
2302 [7, 6, 5, 4, 3, 7, 6, 5, 4, 6, 5] 0
2303 [7, 6, 5, 4, 3, 7, 6, 5, 4, 6] 0
2304 [7, 6, 5, 4, 3, 7, 6, 5, 4, 5] 0
2305 [7, 6, 5, 4, 3, 7, 6, 5, 4] 0
2306 [7, 6, 5, 4, 3, 7, 6, 5, 7, 6, 7] 0
2307 [7, 6, 5, 4, 3, 7, 6, 5, 7, 6] 0
2308 [7, 6, 5, 4, 3, 7, 6, 5, 7] 0
2309 [7, 6, 5, 4, 3, 7, 6, 5, 6] 0
2310 [7, 6, 5, 4, 3, 7, 6, 5] 0
2311 [7, 6, 5, 4, 3, 7, 6, 4, 7] 0
2312 [7, 6, 5, 4, 3, 7, 6, 4] 0
2313 [7, 6, 5, 4, 3, 7, 6, 7] 0
2314 [7, 6, 5, 4, 3, 7, 6] 0
2315 [7, 6, 5, 4, 3, 7, 5, 4, 5] 0
2316 [7, 6, 5, 4, 3, 7, 5, 4] 0
2317 [7, 6, 5, 4, 3, 7, 5] 0
2318 [7, 6, 5, 4, 3, 7, 4] 0
2319 [7, 6, 5, 4, 3, 7] 0
2320 [7, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
2321 [7, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
2322 [7, 6, 5, 4, 3, 6, 5, 4, 6] 0
2323 [7, 6, 5, 4, 3, 6, 5, 4, 5] 0
2324 [7, 6, 5, 4, 3, 6, 5, 4] 0
2325 [7, 6, 5, 4, 3, 6, 5, 6] 0
2326 [7, 6, 5, 4, 3, 6, 5] 0
2327 [7, 6, 5, 4, 3, 6, 4] 0
2328 [7, 6, 5, 4, 3, 6] 0
2329 [7, 6, 5, 4, 3, 5, 4, 5] 0
2330 [7, 6, 5, 4, 3, 5, 4] 0
2331 [7, 6, 5, 4, 3, 5] 0
2332 [7, 6, 5, 4, 3, 4] 0
2333 [7, 6, 5, 4, 3] 0
2334 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 2, 1, 7, 6, 2, 7] 0
2335 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 2, 1, 7, 6, 2] 0
2336 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 2, 1, 7, 6, 7] 0
2337 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 2, 1, 7, 6] 0
2338 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 2, 1, 7, 2] 0
2339 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 2, 1, 7] 0
2340 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 2, 1, 6, 2] 0
2341 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 2, 1, 6] 0
2342 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 2, 1, 2] 0
2343 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 2, 1] 0
2344 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 2, 7, 6, 7] 0
2345 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 2, 7, 6] 0
2346 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 2, 7] 0
2347 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 2, 6] 0
2348 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 2] 0
2349 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 1, 7, 6, 7] 0
2350 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 1, 7, 6] 0
2351 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 1, 7] 0
2352 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 1, 6] 0
2353 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 1] 0
2354 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 7, 6, 7] 0
2355 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 7, 6] 0
2356 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 7] 0
2357 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 6] 0
2358 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5] 0
2359 [7, 6, 5, 4, 2, 1, 0, 7, 6, 2, 1, 7, 2] 0
2360 [7, 6, 5, 4, 2, 1, 0, 7, 6, 2, 1, 7] 0
2361 [7, 6, 5, 4, 2, 1, 0, 7, 6, 2, 1, 2] 0
2362 [7, 6, 5, 4, 2, 1, 0, 7, 6, 2, 1] 0
2363 [7, 6, 5, 4, 2, 1, 0, 7, 6, 2, 7] 0
2364 [7, 6, 5, 4, 2, 1, 0, 7, 6, 2] 0
2365 [7, 6, 5, 4, 2, 1, 0, 7, 6, 1, 7] 0
2366 [7, 6, 5, 4, 2, 1, 0, 7, 6, 1] 0
2367 [7, 6, 5, 4, 2, 1, 0, 7, 6, 7] 0
2368 [7, 6, 5, 4, 2, 1, 0, 7, 6] 0
2369 [7, 6, 5, 4, 2, 1, 0, 7, 5, 2, 1, 2] 0
2370 [7, 6, 5, 4, 2, 1, 0, 7, 5, 2, 1] 0
2371 [7, 6, 5, 4, 2, 1, 0, 7, 5, 2] 0
2372 [7, 6, 5, 4, 2, 1, 0, 7, 5, 1] 0
2373 [7, 6, 5, 4, 2, 1, 0, 7, 5] 0
2374 [7, 6, 5, 4, 2, 1, 0, 7, 2, 1, 2] 0
2375 [7, 6, 5, 4, 2, 1, 0, 7, 2, 1] 0
2376 [7, 6, 5, 4, 2, 1, 0, 7, 2] 0
2377 [7, 6, 5, 4, 2, 1, 0, 7, 1] 0
2378 [7, 6, 5, 4, 2, 1, 0, 7] 0
2379 [7, 6, 5, 4, 2, 1, 0, 6, 5, 2, 1, 6, 2] 0
2380 [7, 6, 5, 4, 2, 1, 0, 6, 5, 2, 1, 6] 0
2381 [7, 6, 5, 4, 2, 1, 0, 6, 5, 2, 1, 2] 0
2382 [7, 6, 5, 4, 2, 1, 0, 6, 5, 2, 1] 0
2383 [7, 6, 5, 4, 2, 1, 0, 6, 5, 2, 6] 0
2384 [7, 6, 5, 4, 2, 1, 0, 6, 5, 2] 0
2385 [7, 6, 5, 4, 2, 1, 0, 6, 5, 1, 6] 0
2386 [7, 6, 5, 4, 2, 1, 0, 6, 5, 1] 0
2387 [7, 6, 5, 4, 2, 1, 0, 6, 5, 6] 0
2388 [7, 6, 5, 4, 2, 1, 0, 6, 5] 0
2389 [7, 6, 5, 4, 2, 1, 0, 6, 2, 1, 2] 0
2390 [7, 6, 5, 4, 2, 1, 0, 6, 2, 1] 0
2391 [7, 6, 5, 4, 2, 1, 0, 6, 2] 0
2392 [7, 6, 5, 4, 2, 1, 0, 6, 1] 0
2393 [7, 6, 5, 4, 2, 1, 0, 6] 0
2394 [7, 6, 5, 4, 2, 1, 0, 5, 2, 1, 2] 0
2395 [7, 6, 5, 4, 2, 1, 0, 5, 2, 1] 0
2396 [7, 6, 5, 4, 2, 1, 0, 5, 2] 0
2397 [7, 6, 5, 4, 2, 1, 0, 5, 1] 0
2398 [7, 6, 5, 4, 2, 1, 0, 5] 0
2399 [7, 6, 5, 4, 2, 1, 0, 2, 1, 2] 0
2400 [7, 6, 5, 4, 2, 1, 0, 2, 1] 0
2401 [7, 6, 5, 4, 2, 1, 0, 2] 0
2402 [7, 6, 5, 4, 2, 1, 0, 1] 0
2403 [7, 6, 5, 4, 2, 1, 0] 0
2404 [7, 6, 5, 4, 2, 1, 7, 6, 5, 2, 7, 6, 7] 0
2405 [7, 6, 5, 4, 2, 1, 7, 6, 5, 2, 7, 6] 0
2406 [7, 6, 5, 4, 2, 1, 7, 6, 5, 2, 7] 0
2407 [7, 6, 5, 4, 2, 1, 7, 6, 5, 2, 6] 0
2408 [7, 6, 5, 4, 2, 1, 7, 6, 5, 2] 0
2409 [7, 6, 5, 4, 2, 1, 7, 6, 5, 7, 6, 7] 0
2410 [7, 6, 5, 4, 2, 1, 7, 6, 5, 7, 6] 0
2411 [7, 6, 5, 4, 2, 1, 7, 6, 5, 7] 0
2412 [7, 6, 5, 4, 2, 1, 7, 6, 5, 6] 0
2413 [7, 6, 5, 4, 2, 1, 7, 6, 5] 0
2414 [7, 6, 5, 4, 2, 1, 7, 6, 2, 7] 0
2415 [7, 6, 5, 4, 2, 1, 7, 6, 2] 0
2416 [7, 6, 5, 4, 2, 1, 7, 6, 7] 0
2417 [7, 6, 5, 4, 2, 1, 7, 6] 0
2418 [7, 6, 5, 4, 2, 1, 7, 5, 2] 0
2419 [7, 6, 5, 4, 2, 1, 7, 5] 0
2420 [7, 6, 5, 4, 2, 1, 7, 2] 0
2421 [7, 6, 5, 4, 2, 1, 7] 0
2422 [7, 6, 5, 4, 2, 1, 6, 5, 2, 6] 0
2423 [7, 6, 5, 4, 2, 1, 6, 5, 2] 0
2424 [7, 6, 5, 4, 2, 1, 6, 5, 6] 0
2425 [7, 6, 5, 4, 2, 1, 6, 5] 0
2426 [7, 6, 5, 4, 2, 1, 6, 2] 0
2427 [7, 6, 5, 4, 2, 1, 6] 0
2428 [7, 6, 5, 4, 2, 1, 5, 2] 0
2429 [7, 6, 5, 4, 2, 1, 5] 0
2430 [7, 6, 5, 4, 2, 1, 2] 0
2431 [7, 6, 5, 4, 2, 1] 0
2432 [7, 6, 5, 4, 2, 0, 7, 6, 5, 7, 6, 7] 0
2433 [7, 6, 5, 4, 2, 0, 7, 6, 5, 7, 6] 0
2434 [7, 6, 5, 4, 2, 0, 7, 6, 5, 7] 0
2435 [7, 6, 5, 4, 2, 0, 7, 6, 5, 6] 0
2436 [7, 6, 5, 4, 2, 0, 7, 6, 5] 0
2437 [7, 6, 5, 4, 2, 0, 7, 6, 7] 0
2438 [7, 6, 5, 4, 2, 0, 7, 6] 0
2439 [7, 6, 5, 4, 2, 0, 7, 5] 0
2440 [7, 6, 5, 4, 2, 0, 7] 0
2441 [7, 6, 5, 4, 2, 0, 6, 5, 6] 0
2442 [7, 6, 5, 4, 2, 0, 6, 5] 0
2443 [7, 6, 5, 4, 2, 0, 6] 0
2444 [7, 6, 5, 4, 2, 0, 5] 0
2445 [7, 6, 5, 4, 2, 0] 0
2446 [7, 6, 5, 4, 2, 7, 6, 5, 7, 6, 7] 0
2447 [7, 6, 5, 4, 2, 7, 6, 5, 7, 6] 0
2448 [7, 6, 5, 4, 2, 7, 6, 5, 7] 0
2449 [7, 6, 5, 4, 2, 7, 6, 5, 6] 0
2450 [7, 6, 5, 4, 2, 7, 6, 5] 0
2451 [7, 6, 5, 4, 2, 7, 6, 7] 0
2452 [7, 6, 5, 4, 2, 7, 6] 0
2453 [7, 6, 5, 4, 2, 7, 5] 0
2454 [7, 6, 5, 4, 2, 7] 0
2455 [7, 6, 5, 4, 2, 6, 5, 6] 0
2456 [7, 6, 5, 4, 2, 6, 5] 0
2457 [7, 6, 5, 4, 2, 6] 0
2458 [7, 6, 5, 4, 2, 5] 0
2459 [7, 6, 5, 4, 2] 0
2460 [7, 6, 5, 4, 1, 0, 7, 6, 5, 1, 7, 6, 7] 0
2461 [7, 6, 5, 4, 1, 0, 7, 6, 5, 1, 7, 6] 0
2462 [7, 6, 5, 4, 1, 0, 7, 6, 5, 1, 7] 0
2463 [7, 6, 5, 4, 1, 0, 7, 6, 5, 1, 6] 0
2464 [7, 6, 5, 4, 1, 0, 7, 6, 5, 1] 0
2465 [7, 6, 5, 4, 1, 0, 7, 6, 5, 7, 6, 7] 0
2466 [7, 6, 5, 4, 1, 0, 7, 6, 5, 7, 6] 0
2467 [7, 6, 5, 4, 1, 0, 7, 6, 5, 7] 0
2468 [7, 6, 5, 4, 1, 0, 7, 6, 5, 6] 0
2469 [7, 6, 5, 4, 1, 0, 7, 6, 5] 0
2470 [7, 6, 5, 4, 1, 0, 7, 6, 1, 7] 0
2471 [7, 6, 5, 4, 1, 0, 7, 6, 1] 0
2472 [7, 6, 5, 4, 1, 0, 7, 6, 7] 0
2473 [7, 6, 5, 4, 1, 0, 7, 6] 0
2474 [7, 6, 5, 4, 1, 0, 7, 5, 1] 0
2475 [7, 6, 5, 4, 1, 0, 7, 5] 0
2476 [7, 6, 5, 4, 1, 0, 7, 1] 0
2477 [7, 6, 5, 4, 1, 0, 7] 0
2478 [7, 6, 5, 4, 1, 0, 6, 5, 1, 6] 0
2479 [7, 6, 5, 4, 1, 0, 6, 5, 1] 0
2480 [7, 6, 5, 4, 1, 0, 6, 5, 6] 0
2481 [7, 6, 5, 4, 1, 0, 6, 5] 0
2482 [7, 6, 5, 4, 1, 0, 6, 1] 0
2483 [7, 6, 5, 4, 1, 0, 6] 0
2484 [7, 6, 5, 4, 1, 0, 5, 1] 0
2485 [7, 6, 5, 4, 1, 0, 5] 0
2486 [7, 6, 5, 4, 1, 0, 1] 0
2487 [7, 6, 5, 4, 1, 0] 0
2488 [7, 6, 5, 4, 1, 7, 6, 5, 7, 6, 7] 0
2489 [7, 6, 5, 4, 1, 7, 6, 5, 7, 6] 0
2490 [7, 6, 5, 4, 1, 7, 6, 5, 7] 0
2491 [7, 6, 5, 4, 1, 7, 6, 5, 6] 0
2492 [7, 6, 5, 4, 1, 7, 6, 5] 0
2493 [7, 6, 5, 4, 1, 7, 6, 7] 0
2494 [7, 6, 5, 4, 1, 7, 6] 0
2495 [7, 6, 5, 4, 1, 7, 5] 0
2496 [7, 6, 5, 4, 1, 7] 0
2497 [7, 6, 5, 4, 1, 6, 5, 6] 0
2498 [7, 6, 5, 4, 1, 6, 5] 0
2499 [7, 6, 5, 4, 1, 6] 0
2500 [7, 6, 5, 4, 1, 5] 0
2501 [7, 6, 5, 4, 1] 0
2502 [7, 6, 5, 4, 0, 7, 6, 5, 7, 6, 7] 0
2503 [7, 6, 5, 4, 0, 7, 6, 5, 7, 6] 0
2504 [7, 6, 5, 4, 0, 7, 6, 5, 7] 0
2505 [7, 6, 5, 4, 0, 7, 6, 5, 6] 0
2506 [7, 6, 5, 4, 0, 7, 6, 5] 0
2507 [7, 6, 5, 4, 0, 7, 6, 7] 0
2508 [7, 6, 5, 4, 0, 7, 6] 0
2509 [7, 6, 5, 4, 0, 7, 5] 0
2510 [7, 6, 5, 4, 0, 7] 0
2511 [7, 6, 5, 4, 0, 6, 5, 6] 0
2512 [7, 6, 5, 4, 0, 6, 5] 0
2513 [7, 6, 5, 4, 0, 6] 0
2514 [7, 6, 5, 4, 0, 5] 0
2515 [7, 6, 5, 4, 0] 0
2516 [7, 6, 5, 4, 7, 6, 5, 7, 6, 7] 0
2517 [7, 6, 5, 4, 7, 6, 5, 7, 6] 0
2518 [7, 6, 5, 4, 7, 6, 5, 7] 0
2519 [7, 6, 5, 4, 7, 6, 5, 6] 0
2520 [7, 6, 5, 4, 7, 6, 5] 0
2521 [7, 6, 5, 4, 7, 6, 7] 0
2522 [7, 6, 5, 4, 7, 6] 0
2523 [7, 6, 5, 4, 7, 5] 0
2524 [7, 6, 5, 4, 7] 0
2525 [7, 6, 5, 4, 6, 5, 6] 0
2526 [7, 6, 5, 4, 6, 5] 0
2527 [7, 6, 5, 4, 6] 0
2528 [7, 6, 5, 4, 5] 0
2529 [7, 6, 5, 4] 0
2530 [7, 6, 5, 3, 2, 1, 0, 7, 6, 3, 2, 1, 7, 3, 2, 3] 0
2531 [7, 6, 5, 3, 2, 1, 0, 7, 6, 3, 2, 1, 7, 3, 2] 0
2532 [7, 6, 5, 3, 2, 1, 0, 7, 6, 3, 2, 1, 7, 3] 0
2533 [7, 6, 5, 3, 2, 1, 0, 7, 6, 3, 2, 1, 7, 2] 0
2534 [7, 6, 5, 3, 2, 1, 0, 7, 6, 3, 2, 1, 7] 0
2535 [7, 6, 5, 3, 2, 1, 0, 7, 6, 3, 2, 1, 3, 2, 3] 0
2536 [7, 6, 5, 3, 2, 1, 0, 7, 6, 3, 2, 1, 3, 2] 0
2537 [7, 6, 5, 3, 2, 1, 0, 7, 6, 3, 2, 1, 3] 0
2538 [7, 6, 5, 3, 2, 1, 0, 7, 6, 3, 2, 1, 2] 0
2539 [7, 6, 5, 3, 2, 1, 0, 7, 6, 3, 2, 1] 0
2540 [7, 6, 5, 3, 2, 1, 0, 7, 6, 3, 2, 7, 3] 0
2541 [7, 6, 5, 3, 2, 1, 0, 7, 6, 3, 2, 7] 0
2542 [7, 6, 5, 3, 2, 1, 0, 7, 6, 3, 2, 3] 0
2543 [7, 6, 5, 3, 2, 1, 0, 7, 6, 3, 2] 0
2544 [7, 6, 5, 3, 2, 1, 0, 7, 6, 3, 1, 7] 0
2545 [7, 6, 5, 3, 2, 1, 0, 7, 6, 3, 1] 0
2546 [7, 6, 5, 3, 2, 1, 0, 7, 6, 3, 7] 0
2547 [7, 6, 5, 3, 2, 1, 0, 7, 6, 3] 0
2548 [7, 6, 5, 3, 2, 1, 0, 7, 6, 2, 1, 7, 2] 0
2549 [7, 6, 5, 3, 2, 1, 0, 7, 6, 2, 1, 7] 0
2550 [7, 6, 5, 3, 2, 1, 0, 7, 6, 2, 1, 2] 0
2551 [7, 6, 5, 3, 2, 1, 0, 7, 6, 2, 1] 0
2552 [7, 6, 5, 3, 2, 1, 0, 7, 6, 2, 7] 0
2553 [7, 6, 5, 3, 2, 1, 0, 7, 6, 2] 0
2554 [7, 6, 5, 3, 2, 1, 0, 7, 6, 1, 7] 0
2555 [7, 6, 5, 3, 2, 1, 0, 7, 6, 1] 0
2556 [7, 6, 5, 3, 2, 1, 0, 7, 6, 7] 0
2557 [7, 6, 5, 3, 2, 1, 0, 7, 6] 0
2558 [7, 6, 5, 3, 2, 1, 0, 7, 3, 2, 1, 3, 2, 3] 0
2559 [7, 6, 5, 3, 2, 1, 0, 7, 3, 2, 1, 3, 2] 0
2560 [7, 6, 5, 3, 2, 1, 0, 7, 3, 2, 1, 3] 0
2561 [7, 6, 5, 3, 2, 1, 0, 7, 3, 2, 1, 2] 0
2562 [7, 6, 5, 3, 2, 1, 0, 7, 3, 2, 1] 0
2563 [7, 6, 5, 3, 2, 1, 0, 7, 3, 2, 3] 0
2564 [7, 6, 5, 3, 2, 1, 0, 7, 3, 2] 0
2565 [7, 6, 5, 3, 2, 1, 0, 7, 3, 1] 0
2566 [7, 6, 5, 3, 2, 1, 0, 7, 3] 0
2567 [7, 6, 5, 3, 2, 1, 0, 7, 2, 1, 2] 0
2568 [7, 6, 5, 3, 2, 1, 0, 7, 2, 1] 0
2569 [7, 6, 5, 3, 2, 1, 0, 7, 2] 0
2570 [7, 6, 5, 3, 2, 1, 0, 7, 1] 0
2571 [7, 6, 5, 3, 2, 1, 0, 7] 0
2572 [7, 6, 5, 3, 2, 1, 0, 6, 3, 2, 1, 3, 2, 3] 0
2573 [7, 6, 5, 3, 2, 1, 0, 6, 3, 2, 1, 3, 2] 0
2574 [7, 6, 5, 3, 2, 1, 0, 6, 3, 2, 1, 3] 0
2575 [7, 6, 5, 3, 2, 1, 0, 6, 3, 2, 1, 2] 0
2576 [7, 6, 5, 3, 2, 1, 0, 6, 3, 2, 1] 0
2577 [7, 6, 5, 3, 2, 1, 0, 6, 3, 2, 3] 0
2578 [7, 6, 5, 3, 2, 1, 0, 6, 3, 2] 0
2579 [7, 6, 5, 3, 2, 1, 0, 6, 3, 1] 0
2580 [7, 6, 5, 3, 2, 1, 0, 6, 3] 0
2581 [7, 6, 5, 3, 2, 1, 0, 6, 2, 1, 2] 0
2582 [7, 6, 5, 3, 2, 1, 0, 6, 2, 1] 0
2583 [7, 6, 5, 3, 2, 1, 0, 6, 2] 0
2584 [7, 6, 5, 3, 2, 1, 0, 6, 1] 0
2585 [7, 6, 5, 3, 2, 1, 0, 6] 0
2586 [7, 6, 5, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
2587 [7, 6, 5, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
2588 [7, 6, 5, 3, 2, 1, 0, 3, 2, 1, 3] 0
2589 [7, 6, 5, 3, 2, 1, 0, 3, 2, 1, 2] 0
2590 [7, 6, 5, 3, 2, 1, 0, 3, 2, 1] 0
2591 [7, 6, 5, 3, 2, 1, 0, 3, 2, 3] 0
2592 [7, 6, 5, 3, 2, 1, 0, 3, 2] 0
2593 [7, 6, 5, 3, 2, 1, 0, 3, 1] 0
2594 [7, 6, 5, 3, 2, 1, 0, 3] 0
2595 [7, 6, 5, 3, 2, 1, 0, 2, 1, 2] 0
2596 [7, 6, 5, 3, 2, 1, 0, 2, 1] 0
2597 [7, 6, 5, 3, 2, 1, 0, 2] 0
2598 [7, 6, 5, 3, 2, 1, 0, 1] 0
2599 [7, 6, 5, 3, 2, 1, 0] 0
2600 [7, 6, 5, 3, 2, 1, 7, 6, 3, 2, 7, 3] 0
2601 [7, 6, 5, 3, 2, 1, 7, 6, 3, 2, 7] 0
2602 [7, 6, 5, 3, 2, 1, 7, 6, 3, 2, 3] 0
2603 [7, 6, 5, 3, 2, 1, 7, 6, 3, 2] 0
2604 [7, 6, 5, 3, 2, 1, 7, 6, 3, 7] 0
2605 [7, 6, 5, 3, 2, 1, 7, 6, 3] 0
2606 [7, 6, 5, 3, 2, 1, 7, 6, 2, 7] 0
2607 [7, 6, 5, 3, 2, 1, 7, 6, 2] 0
2608 [7, 6, 5, 3, 2, 1, 7, 6, 7] 0
2609 [7, 6, 5, 3, 2, 1, 7, 6] 0
2610 [7, 6, 5, 3, 2, 1, 7, 3, 2, 3] 0
2611 [7, 6, 5, 3, 2, 1, 7, 3, 2] 0
2612 [7, 6, 5, 3, 2, 1, 7, 3] 0
2613 [7, 6, 5, 3, 2, 1, 7, 2] 0
2614 [7, 6, 5, 3, 2, 1, 7] 0
2615 [7, 6, 5, 3, 2, 1, 6, 3, 2, 3] 0
2616 [7, 6, 5, 3, 2, 1, 6, 3, 2] 0
2617 [7, 6, 5, 3, 2, 1, 6, 3] 0
2618 [7, 6, 5, 3, 2, 1, 6, 2] 0
2619 [7, 6, 5, 3, 2, 1, 6] 0
2620 [7, 6, 5, 3, 2, 1, 3, 2, 3] 0
2621 [7, 6, 5, 3, 2, 1, 3, 2] 0
2622 [7, 6, 5, 3, 2, 1, 3] 0
2623 [7, 6, 5, 3, 2, 1, 2] 0
2624 [7, 6, 5, 3, 2, 1] 0
2625 [7, 6, 5, 3, 2, 0, 7, 6, 3, 7] 0
2626 [7, 6, 5, 3, 2, 0, 7, 6, 3] 0
2627 [7, 6, 5, 3, 2, 0, 7, 6, 7] 0
2628 [7, 6, 5, 3, 2, 0, 7, 6] 0
2629 [7, 6, 5, 3, 2, 0, 7, 3] 0
2630 [7, 6, 5, 3, 2, 0, 7] 0
2631 [7, 6, 5, 3, 2, 0, 6, 3] 0
2632 [7, 6, 5, 3, 2, 0, 6] 0
2633 [7, 6, 5, 3, 2, 0, 3] 0
2634 [7, 6, 5, 3, 2, 0] 0
2635 [7, 6, 5, 3, 2, 7, 6, 3, 7] 0
2636 [7, 6, 5, 3, 2, 7, 6, 3] 0
2637 [7, 6, 5, 3, 2, 7, 6, 7] 0
2638 [7, 6, 5, 3, 2, 7, 6] 0
2639 [7, 6, 5, 3, 2, 7, 3] 0
2640 [7, 6, 5, 3, 2, 7] 0
2641 [7, 6, 5, 3, 2, 6, 3] 0
2642 [7, 6, 5, 3, 2, 6] 0
2643 [7, 6, 5, 3, 2, 3] 0
2644 [7, 6, 5, 3, 2] 0
2645 [7, 6, 5, 3, 1, 0, 7, 6, 1, 7] 0
2646 [7, 6, 5, 3, 1, 0, 7, 6, 1] 0
2647 [7, 6, 5, 3, 1, 0, 7, 6, 7] 0
2648 [7, 6, 5, 3, 1, 0, 7, 6] 0
2649 [7, 6, 5, 3, 1, 0, 7, 1] 0
2650 [7, 6, 5, 3, 1, 0, 7] 0
2651 [7, 6, 5, 3, 1, 0, 6, 1] 0
2652 [7, 6, 5, 3, 1, 0, 6] 0
2653 [7, 6, 5, 3, 1, 0, 1] 0
2654 [7, 6, 5, 3, 1, 0] 0
2655 [7, 6, 5, 3, 1, 7, 6, 7] 0
2656 [7, 6, 5, 3, 1, 7, 6] 0
2657 [7, 6, 5, 3, 1, 7] 0
2658 [7, 6, 5, 3, 1, 6] 0
2659 [7, 6, 5, 3, 1] 0
2660 [7, 6, 5, 3, 0, 7, 6, 7] 0
2661 [7, 6, 5, 3, 0, 7, 6] 0
2662 [7, 6, 5, 3, 0, 7] 0
2663 [7, 6, 5, 3, 0, 6] 0
2664 [7, 6, 5, 3, 0] 0
2665 [7, 6, 5, 3, 7, 6, 7] 0
2666 [7, 6, 5, 3, 7, 6] 0
2667 [7, 6, 5, 3, 7] 0
2668 [7, 6, 5, 3, 6] 0
2669 [7, 6, 5, 3] 0
2670 [7, 6, 5, 2, 1, 0, 7, 6, 2, 1, 7, 2] 0
2671 [7, 6, 5, 2, 1, 0, 7, 6, 2, 1, 7] 0
2672 [7, 6, 5, 2, 1, 0, 7, 6, 2, 1, 2] 0
2673 [7, 6, 5, 2, 1, 0, 7, 6, 2, 1] 0
2674 [7, 6, 5, 2, 1, 0, 7, 6, 2, 7] 0
2675 [7, 6, 5, 2, 1, 0, 7, 6, 2] 0
2676 [7, 6, 5, 2, 1, 0, 7, 6, 1, 7] 0
2677 [7, 6, 5, 2, 1, 0, 7, 6, 1] 0
2678 [7, 6, 5, 2, 1, 0, 7, 6, 7] 0
2679 [7, 6, 5, 2, 1, 0, 7, 6] 0
2680 [7, 6, 5, 2, 1, 0, 7, 2, 1, 2] 0
2681 [7, 6, 5, 2, 1, 0, 7, 2, 1] 0
2682 [7, 6, 5, 2, 1, 0, 7, 2] 0
2683 [7, 6, 5, 2, 1, 0, 7, 1] 0
2684 [7, 6, 5, 2, 1, 0, 7] 0
2685 [7, 6, 5, 2, 1, 0, 6, 2, 1, 2] 0
2686 [7, 6, 5, 2, 1, 0, 6, 2, 1] 0
2687 [7, 6, 5, 2, 1, 0, 6, 2] 0
2688 [7, 6, 5, 2, 1, 0, 6, 1] 0
2689 [7, 6, 5, 2, 1, 0, 6] 0
2690 [7, 6, 5, 2, 1, 0, 2, 1, 2] 0
2691 [7, 6, 5, 2, 1, 0, 2, 1] 0
2692 [7, 6, 5, 2, 1, 0, 2] 0
2693 [7, 6, 5, 2, 1, 0, 1] 0
2694 [7, 6, 5, 2, 1, 0] 0
2695 [7, 6, 5, 2, 1, 7, 6, 2, 7] 0
2696 [7, 6, 5, 2, 1, 7, 6, 2] 0
2697 [7, 6, 5, 2, 1, 7, 6, 7] 0
2698 [7, 6, 5, 2, 1, 7, 6] 0
2699 [7, 6, 5, 2, 1, 7, 2] 0
2700 [7, 6, 5, 2, 1, 7] 0
2701 [7, 6, 5, 2, 1, 6, 2] 0
2702 [7, 6, 5, 2, 1, 6] 0
2703 [7, 6, 5, 2, 1, 2] 0
2704 [7, 6, 5, 2, 1] 0
2705 [7, 6, 5, 2, 0, 7, 6, 7] 0
2706 [7, 6, 5, 2, 0, 7, 6] 0
2707 [7, 6, 5, 2, 0, 7] 0
2708 [7, 6, 5, 2, 0, 6] 0
2709 [7, 6, 5, 2, 0] 0
2710 [7, 6, 5, 2, 7, 6, 7] 0
2711 [7, 6, 5, 2, 7, 6] 0
2712 [7, 6, 5, 2, 7] 0
2713 [7, 6, 5, 2, 6] 0
2714 [7, 6, 5, 2] 0
2715 [7, 6, 5, 1, 0, 7, 6, 1, 7] 0
2716 [7, 6, 5, 1, 0, 7, 6, 1] 0
2717 [7, 6, 5, 1, 0, 7, 6, 7] 0
2718 [7, 6, 5, 1, 0, 7, 6] 0
2719 [7, 6, 5, 1, 0, 7, 1] 0
2720 [7, 6, 5, 1, 0, 7] 0
2721 [7, 6, 5, 1, 0, 6, 1] 0
2722 [7, 6, 5, 1, 0, 6] 0
2723 [7, 6, 5, 1, 0, 1] 0
2724 [7, 6, 5, 1, 0] 0
2725 [7, 6, 5, 1, 7, 6, 7] 0
2726 [7, 6, 5, 1, 7, 6] 0
2727 [7, 6, 5, 1, 7] 0
2728 [7, 6, 5, 1, 6] 0
2729 [7, 6, 5, 1] 0
2730 [7, 6, 5, 0, 7, 6, 7] 0
2731 [7, 6, 5, 0, 7, 6] 0
2732 [7, 6, 5, 0, 7] 0
2733 [7, 6, 5, 0, 6] 0
2734 [7, 6, 5, 0] 0
2735 [7, 6, 5, 7, 6, 7] 0
2736 [7, 6, 5, 7, 6] 0
2737 [7, 6, 5, 7] 0
2738 [7, 6, 5, 6] 0
2739 [7, 6, 5] 0
2740 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
2741 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
2742 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 4, 3, 2, 4] 0
2743 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 4, 3, 2, 3] 0
2744 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 4, 3, 2] 0
2745 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 4, 3, 4] 0
2746 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 4, 3] 0
2747 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 4, 2] 0
2748 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 4] 0
2749 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 3, 2, 3] 0
2750 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 3, 2] 0
2751 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 3] 0
2752 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 2] 0
2753 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1] 0
2754 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3, 2, 4, 3, 4] 0
2755 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3, 2, 4, 3] 0
2756 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3, 2, 4] 0
2757 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3, 2, 3] 0
2758 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3, 2] 0
2759 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3, 1, 4] 0
2760 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3, 1] 0
2761 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3, 4] 0
2762 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3] 0
2763 [7, 6, 4, 3, 2, 1, 0, 7, 4, 2, 1, 2] 0
2764 [7, 6, 4, 3, 2, 1, 0, 7, 4, 2, 1] 0
2765 [7, 6, 4, 3, 2, 1, 0, 7, 4, 2] 0
2766 [7, 6, 4, 3, 2, 1, 0, 7, 4, 1] 0
2767 [7, 6, 4, 3, 2, 1, 0, 7, 4] 0
2768 [7, 6, 4, 3, 2, 1, 0, 7, 3, 2, 1, 3, 2, 3] 0
2769 [7, 6, 4, 3, 2, 1, 0, 7, 3, 2, 1, 3, 2] 0
2770 [7, 6, 4, 3, 2, 1, 0, 7, 3, 2, 1, 3] 0
2771 [7, 6, 4, 3, 2, 1, 0, 7, 3, 2, 1, 2] 0
2772 [7, 6, 4, 3, 2, 1, 0, 7, 3, 2, 1] 0
2773 [7, 6, 4, 3, 2, 1, 0, 7, 3, 2, 3] 0
2774 [7, 6, 4, 3, 2, 1, 0, 7, 3, 2] 0
2775 [7, 6, 4, 3, 2, 1, 0, 7, 3, 1] 0
2776 [7, 6, 4, 3, 2, 1, 0, 7, 3] 0
2777 [7, 6, 4, 3, 2, 1, 0, 7, 2, 1, 2] 0
2778 [7, 6, 4, 3, 2, 1, 0, 7, 2, 1] 0
2779 [7, 6, 4, 3, 2, 1, 0, 7, 2] 0
2780 [7, 6, 4, 3, 2, 1, 0, 7, 1] 0
2781 [7, 6, 4, 3, 2, 1, 0, 7] 0
2782 [7, 6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
2783 [7, 6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
2784 [7, 6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4] 0
2785 [7, 6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 3] 0
2786 [7, 6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2] 0
2787 [7, 6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 4] 0
2788 [7, 6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3] 0
2789 [7, 6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 2] 0
2790 [7, 6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4] 0
2791 [7, 6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2, 3] 0
2792 [7, 6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2] 0
2793 [7, 6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3] 0
2794 [7, 6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 2] 0
2795 [7, 6, 4, 3, 2, 1, 0, 4, 3, 2, 1] 0
2796 [7, 6, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3, 4] 0
2797 [7, 6, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3] 0
2798 [7, 6, 4, 3, 2, 1, 0, 4, 3, 2, 4] 0
2799 [7, 6, 4, 3, 2, 1, 0, 4, 3, 2, 3] 0
2800 [7, 6, 4, 3, 2, 1, 0, 4, 3, 2] 0
2801 [7, 6, 4, 3, 2, 1, 0, 4, 3, 1, 4] 0
2802 [7, 6, 4, 3, 2, 1, 0, 4, 3, 1] 0
2803 [7, 6, 4, 3, 2, 1, 0, 4, 3, 4] 0
2804 [7, 6, 4, 3, 2, 1, 0, 4, 3] 0
2805 [7, 6, 4, 3, 2, 1, 0, 4, 2, 1, 2] 0
2806 [7, 6, 4, 3, 2, 1, 0, 4, 2, 1] 0
2807 [7, 6, 4, 3, 2, 1, 0, 4, 2] 0
2808 [7, 6, 4, 3, 2, 1, 0, 4, 1] 0
2809 [7, 6, 4, 3, 2, 1, 0, 4] 0
2810 [7, 6, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
2811 [7, 6, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
2812 [7, 6, 4, 3, 2, 1, 0, 3, 2, 1, 3] 0
2813 [7, 6, 4, 3, 2, 1, 0, 3, 2, 1, 2] 0
2814 [7, 6, 4, 3, 2, 1, 0, 3, 2, 1] 0
2815 [7, 6, 4, 3, 2, 1, 0, 3, 2, 3] 0
2816 [7, 6, 4, 3, 2, 1, 0, 3, 2] 0
2817 [7, 6, 4, 3, 2, 1, 0, 3, 1] 0
2818 [7, 6, 4, 3, 2, 1, 0, 3] 0
2819 [7, 6, 4, 3, 2, 1, 0, 2, 1, 2] 0
2820 [7, 6, 4, 3, 2, 1, 0, 2, 1] 0
2821 [7, 6, 4, 3, 2, 1, 0, 2] 0
2822 [7, 6, 4, 3, 2, 1, 0, 1] 0
2823 [7, 6, 4, 3, 2, 1, 0] 0
2824 [7, 6, 4, 3, 2, 1, 7, 4, 3, 2, 4, 3, 4] 0
2825 [7, 6, 4, 3, 2, 1, 7, 4, 3, 2, 4, 3] 0
2826 [7, 6, 4, 3, 2, 1, 7, 4, 3, 2, 4] 0
2827 [7, 6, 4, 3, 2, 1, 7, 4, 3, 2, 3] 0
2828 [7, 6, 4, 3, 2, 1, 7, 4, 3, 2] 0
2829 [7, 6, 4, 3, 2, 1, 7, 4, 3, 4] 0
2830 [7, 6, 4, 3, 2, 1, 7, 4, 3] 0
2831 [7, 6, 4, 3, 2, 1, 7, 4, 2] 0
2832 [7, 6, 4, 3, 2, 1, 7, 4] 0
2833 [7, 6, 4, 3, 2, 1, 7, 3, 2, 3] 0
2834 [7, 6, 4, 3, 2, 1, 7, 3, 2] 0
2835 [7, 6, 4, 3, 2, 1, 7, 3] 0
2836 [7, 6, 4, 3, 2, 1, 7, 2] 0
2837 [7, 6, 4, 3, 2, 1, 7] 0
2838 [7, 6, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
2839 [7, 6, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
2840 [7, 6, 4, 3, 2, 1, 4, 3, 2, 4] 0
2841 [7, 6, 4, 3, 2, 1, 4, 3, 2, 3] 0
2842 [7, 6, 4, 3, 2, 1, 4, 3, 2] 0
2843 [7, 6, 4, 3, 2, 1, 4, 3, 4] 0
2844 [7, 6, 4, 3, 2, 1, 4, 3] 0
2845 [7, 6, 4, 3, 2, 1, 4, 2] 0
2846 [7, 6, 4, 3, 2, 1, 4] 0
2847 [7, 6, 4, 3, 2, 1, 3, 2, 3] 0
2848 [7, 6, 4, 3, 2, 1, 3, 2] 0
2849 [7, 6, 4, 3, 2, 1, 3] 0
2850 [7, 6, 4, 3, 2, 1, 2] 0
2851 [7, 6, 4, 3, 2, 1] 0
2852 [7, 6, 4, 3, 2, 0, 7, 4, 3, 4] 0
2853 [7, 6, 4, 3, 2, 0, 7, 4, 3] 0
2854 [7, 6, 4, 3, 2, 0, 7, 4] 0
2855 [7, 6, 4, 3, 2, 0, 7, 3] 0
2856 [7, 6, 4, 3, 2, 0, 7] 0
2857 [7, 6, 4, 3, 2, 0, 4, 3, 4] 0
2858 [7, 6, 4, 3, 2, 0, 4, 3] 0
2859 [7, 6, 4, 3, 2, 0, 4] 0
2860 [7, 6, 4, 3, 2, 0, 3] 0
2861 [7, 6, 4, 3, 2, 0] 0
2862 [7, 6, 4, 3, 2, 7, 4, 3, 4] 0
2863 [7, 6, 4, 3, 2, 7, 4, 3] 0
2864 [7, 6, 4, 3, 2, 7, 4] 0
2865 [7, 6, 4, 3, 2, 7, 3] 0
2866 [7, 6, 4, 3, 2, 7] 0
2867 [7, 6, 4, 3, 2, 4, 3, 4] 0
2868 [7, 6, 4, 3, 2, 4, 3] 0
2869 [7, 6, 4, 3, 2, 4] 0
2870 [7, 6, 4, 3, 2, 3] 0
2871 [7, 6, 4, 3, 2] 0
2872 [7, 6, 4, 3, 1, 0, 7, 4, 1] 0
2873 [7, 6, 4, 3, 1, 0, 7, 4] 0
2874 [7, 6, 4, 3, 1, 0, 7, 1] 0
2875 [7, 6, 4, 3, 1, 0, 7] 0
2876 [7, 6, 4, 3, 1, 0, 4, 1] 0
2877 [7, 6, 4, 3, 1, 0, 4] 0
2878 [7, 6, 4, 3, 1, 0, 1] 0
2879 [7, 6, 4, 3, 1, 0] 0
2880 [7, 6, 4, 3, 1, 7, 4] 0
2881 [7, 6, 4, 3, 1, 7] 0
2882 [7, 6, 4, 3, 1, 4] 0
2883 [7, 6, 4, 3, 1] 0
2884 [7, 6, 4, 3, 0, 7, 4] 0
2885 [7, 6, 4, 3, 0, 7] 0
2886 [7, 6, 4, 3, 0, 4] 0
2887 [7, 6, 4, 3, 0] 0
2888 [7, 6, 4, 3, 7, 4] 0
2889 [7, 6, 4, 3, 7] 0
2890 [7, 6, 4, 3, 4] 0
2891 [7, 6, 4, 3] 0
2892 [7, 6, 4, 2, 1, 0, 7, 2, 1, 2] 0
2893 [7, 6, 4, 2, 1, 0, 7, 2, 1] 0
2894 [7, 6, 4, 2, 1, 0, 7, 2] 0
2895 [7, 6, 4, 2, 1, 0, 7, 1] 0
2896 [7, 6, 4, 2, 1, 0, 7] 0
2897 [7, 6, 4, 2, 1, 0, 2, 1, 2] 0
2898 [7, 6, 4, 2, 1, 0, 2, 1] 0
2899 [7, 6, 4, 2, 1, 0, 2] 0
2900 [7, 6, 4, 2, 1, 0, 1] 0
2901 [7, 6, 4, 2, 1, 0] 0
2902 [7, 6, 4, 2, 1, 7, 2] 0
2903 [7, 6, 4, 2, 1, 7] 0
2904 [7, 6, 4, 2, 1, 2] 0
2905 [7, 6, 4, 2, 1] 0
2906 [7, 6, 4, 2, 0, 7] 0
2907 [7, 6, 4, 2, 0] 0
2908 [7, 6, 4, 2, 7] 0
2909 [7, 6, 4, 2] 0
2910 [7, 6, 4, 1, 0, 7, 1] 0
2911 [7, 6, 4, 1, 0, 7] 0
2912 [7, 6, 4, 1, 0, 1] 0
2913 [7, 6, 4, 1, 0] 0
2914 [7, 6, 4, 1, 7] 0
2915 [7, 6, 4, 1] 0
2916 [7, 6, 4, 0, 7] 0
2917 [7, 6, 4, 0] 0
2918 [7, 6, 4, 7] 0
2919 [7, 6, 4] 0
2920 [7, 6, 3, 2, 1, 0, 7, 3, 2, 1, 3, 2, 3] 0
2921 [7, 6, 3, 2, 1, 0, 7, 3, 2, 1, 3, 2] 0
2922 [7, 6, 3, 2, 1, 0, 7, 3, 2, 1, 3] 0
2923 [7, 6, 3, 2, 1, 0, 7, 3, 2, 1, 2] 0
2924 [7, 6, 3, 2, 1, 0, 7, 3, 2, 1] 0
2925 [7, 6, 3, 2, 1, 0, 7, 3, 2, 3] 0
2926 [7, 6, 3, 2, 1, 0, 7, 3, 2] 0
2927 [7, 6, 3, 2, 1, 0, 7, 3, 1] 0
2928 [7, 6, 3, 2, 1, 0, 7, 3] 0
2929 [7, 6, 3, 2, 1, 0, 7, 2, 1, 2] 0
2930 [7, 6, 3, 2, 1, 0, 7, 2, 1] 0
2931 [7, 6, 3, 2, 1, 0, 7, 2] 0
2932 [7, 6, 3, 2, 1, 0, 7, 1] 0
2933 [7, 6, 3, 2, 1, 0, 7] 0
2934 [7, 6, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
2935 [7, 6, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
2936 [7, 6, 3, 2, 1, 0, 3, 2, 1, 3] 0
2937 [7, 6, 3, 2, 1, 0, 3, 2, 1, 2] 0
2938 [7, 6, 3, 2, 1, 0, 3, 2, 1] 0
2939 [7, 6, 3, 2, 1, 0, 3, 2, 3] 0
2940 [7, 6, 3, 2, 1, 0, 3, 2] 0
2941 [7, 6, 3, 2, 1, 0, 3, 1] 0
2942 [7, 6, 3, 2, 1, 0, 3] 0
2943 [7, 6, 3, 2, 1, 0, 2, 1, 2] 0
2944 [7, 6, 3, 2, 1, 0, 2, 1] 0
2945 [7, 6, 3, 2, 1, 0, 2] 0
2946 [7, 6, 3, 2, 1, 0, 1] 0
2947 [7, 6, 3, 2, 1, 0] 0
2948 [7, 6, 3, 2, 1, 7, 3, 2, 3] 0
2949 [7, 6, 3, 2, 1, 7, 3, 2] 0
2950 [7, 6, 3, 2, 1, 7, 3] 0
2951 [7, 6, 3, 2, 1, 7, 2] 0
2952 [7, 6, 3, 2, 1, 7] 0
2953 [7, 6, 3, 2, 1, 3, 2, 3] 0
2954 [7, 6, 3, 2, 1, 3, 2] 0
2955 [7, 6, 3, 2, 1, 3] 0
2956 [7, 6, 3, 2, 1, 2] 0
2957 [7, 6, 3, 2, 1] 0
2958 [7, 6, 3, 2, 0, 7, 3] 0
2959 [7, 6, 3, 2, 0, 7] 0
2960 [7, 6, 3, 2, 0, 3] 0
2961 [7, 6, 3, 2, 0] 0
2962 [7, 6, 3, 2, 7, 3] 0
2963 [7, 6, 3, 2, 7] 0
2964 [7, 6, 3, 2, 3] 0
2965 [7, 6, 3, 2] 0
2966 [7, 6, 3, 1, 0, 7, 1] 0
2967 [7, 6, 3, 1, 0, 7] 0
2968 [7, 6, 3, 1, 0, 1] 0
2969 [7, 6, 3, 1, 0] 0
2970 [7, 6, 3, 1, 7] 0
2971 [7, 6, 3, 1] 0
2972 [7, 6, 3, 0, 7] 0
2973 [7, 6, 3, 0] 0
2974 [7, 6, 3, 7] 0
2975 [7, 6, 3] 0
2976 [7, 6, 2, 1, 0, 7, 2, 1, 2] 0
2977 [7, 6, 2, 1, 0, 7, 2, 1] 0
2978 [7, 6, 2, 1, 0, 7, 2] 0
2979 [7, 6, 2, 1, 0, 7, 1] 0
2980 [7, 6, 2, 1, 0, 7] 0
2981 [7, 6, 2, 1, 0, 2, 1, 2] 0
2982 [7, 6, 2, 1, 0, 2, 1] 0
2983 [7, 6, 2, 1, 0, 2] 0
2984 [7, 6, 2, 1, 0, 1] 0
2985 [7, 6, 2, 1, 0] 0
2986 [7, 6, 2, 1, 7, 2] 0
2987 [7, 6, 2, 1, 7] 0
2988 [7, 6, 2, 1, 2] 0
2989 [7, 6, 2, 1] 0
2990 [7, 6, 2, 0, 7] 0
2991 [7, 6, 2, 0] 0
2992 [7, 6, 2, 7] 0
2993 [7, 6, 2] 0
2994 [7, 6, 1, 0, 7, 1] 0
2995 [7, 6, 1, 0, 7] 0
2996 [7, 6, 1, 0, 1] 0
2997 [7, 6, 1, 0] 0
2998 [7, 6, 1, 7] 0
2999 [7, 6, 1] 0
3000 [7, 6, 0, 7] 0
3001 [7, 6, 0] 0
3002 [7, 6, 7] 0
3003 [7, 6] 0
3004 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
3005 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
3006 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] 0
3007 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] 0
3008 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] 0
3009 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] 0
3010 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] 0
3011 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] 0
3012 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5] 0
3013 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] 0
3014 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] 0
3015 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4] 0
3016 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 3] 0
3017 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2] 0
3018 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] 0
3019 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4] 0
3020 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5] 0
3021 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 4] 0
3022 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3] 0
3023 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2, 5] 0
3024 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2] 0
3025 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 5] 0
3026 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4] 0
3027 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2, 3] 0
3028 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2] 0
3029 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3] 0
3030 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 2] 0
3031 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5] 0
3032 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
3033 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
3034 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4] 0
3035 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 3] 0
3036 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2] 0
3037 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 4] 0
3038 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3] 0
3039 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 2] 0
3040 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4] 0
3041 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2, 3] 0
3042 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2] 0
3043 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3] 0
3044 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 2] 0
3045 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1] 0
3046 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
3047 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
3048 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5] 0
3049 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 4] 0
3050 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3] 0
3051 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 5] 0
3052 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4] 0
3053 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 3] 0
3054 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5] 0
3055 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4, 3, 4] 0
3056 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4, 3] 0
3057 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4] 0
3058 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 3] 0
3059 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2] 0
3060 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5, 4, 5] 0
3061 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5, 4] 0
3062 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5] 0
3063 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 4] 0
3064 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 1] 0
3065 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 5, 4, 5] 0
3066 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 5, 4] 0
3067 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 5] 0
3068 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 4] 0
3069 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3] 0
3070 [7, 5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 5, 2] 0
3071 [7, 5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 5] 0
3072 [7, 5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 2] 0
3073 [7, 5, 4, 3, 2, 1, 0, 5, 4, 2, 1] 0
3074 [7, 5, 4, 3, 2, 1, 0, 5, 4, 2, 5] 0
3075 [7, 5, 4, 3, 2, 1, 0, 5, 4, 2] 0
3076 [7, 5, 4, 3, 2, 1, 0, 5, 4, 1, 5] 0
3077 [7, 5, 4, 3, 2, 1, 0, 5, 4, 1] 0
3078 [7, 5, 4, 3, 2, 1, 0, 5, 4, 5] 0
3079 [7, 5, 4, 3, 2, 1, 0, 5, 4] 0
3080 [7, 5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3, 2, 3] 0
3081 [7, 5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3, 2] 0
3082 [7, 5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3] 0
3083 [7, 5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 2] 0
3084 [7, 5, 4, 3, 2, 1, 0, 5, 3, 2, 1] 0
3085 [7, 5, 4, 3, 2, 1, 0, 5, 3, 2, 3] 0
3086 [7, 5, 4, 3, 2, 1, 0, 5, 3, 2] 0
3087 [7, 5, 4, 3, 2, 1, 0, 5, 3, 1] 0
3088 [7, 5, 4, 3, 2, 1, 0, 5, 3] 0
3089 [7, 5, 4, 3, 2, 1, 0, 5, 2, 1, 2] 0
3090 [7, 5, 4, 3, 2, 1, 0, 5, 2, 1] 0
3091 [7, 5, 4, 3, 2, 1, 0, 5, 2] 0
3092 [7, 5, 4, 3, 2, 1, 0, 5, 1] 0
3093 [7, 5, 4, 3, 2, 1, 0, 5] 0
3094 [7, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
3095 [7, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
3096 [7, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4] 0
3097 [7, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 3] 0
3098 [7, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2] 0
3099 [7, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 4] 0
3100 [7, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3] 0
3101 [7, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 2] 0
3102 [7, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4] 0
3103 [7, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2, 3] 0
3104 [7, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2] 0
3105 [7, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3] 0
3106 [7, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 2] 0
3107 [7, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1] 0
3108 [7, 5, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3, 4] 0
3109 [7, 5, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3] 0
3110 [7, 5, 4, 3, 2, 1, 0, 4, 3, 2, 4] 0
3111 [7, 5, 4, 3, 2, 1, 0, 4, 3, 2, 3] 0
3112 [7, 5, 4, 3, 2, 1, 0, 4, 3, 2] 0
3113 [7, 5, 4, 3, 2, 1, 0, 4, 3, 1, 4] 0
3114 [7, 5, 4, 3, 2, 1, 0, 4, 3, 1] 0
3115 [7, 5, 4, 3, 2, 1, 0, 4, 3, 4] 0
3116 [7, 5, 4, 3, 2, 1, 0, 4, 3] 0
3117 [7, 5, 4, 3, 2, 1, 0, 4, 2, 1, 2] 0
3118 [7, 5, 4, 3, 2, 1, 0, 4, 2, 1] 0
3119 [7, 5, 4, 3, 2, 1, 0, 4, 2] 0
3120 [7, 5, 4, 3, 2, 1, 0, 4, 1] 0
3121 [7, 5, 4, 3, 2, 1, 0, 4] 0
3122 [7, 5, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
3123 [7, 5, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
3124 [7, 5, 4, 3, 2, 1, 0, 3, 2, 1, 3] 0
3125 [7, 5, 4, 3, 2, 1, 0, 3, 2, 1, 2] 0
3126 [7, 5, 4, 3, 2, 1, 0, 3, 2, 1] 0
3127 [7, 5, 4, 3, 2, 1, 0, 3, 2, 3] 0
3128 [7, 5, 4, 3, 2, 1, 0, 3, 2] 0
3129 [7, 5, 4, 3, 2, 1, 0, 3, 1] 0
3130 [7, 5, 4, 3, 2, 1, 0, 3] 0
3131 [7, 5, 4, 3, 2, 1, 0, 2, 1, 2] 0
3132 [7, 5, 4, 3, 2, 1, 0, 2, 1] 0
3133 [7, 5, 4, 3, 2, 1, 0, 2] 0
3134 [7, 5, 4, 3, 2, 1, 0, 1] 0
3135 [7, 5, 4, 3, 2, 1, 0] 0
3136 [7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
3137 [7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
3138 [7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] 0
3139 [7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] 0
3140 [7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] 0
3141 [7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] 0
3142 [7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] 0
3143 [7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] 0
3144 [7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5] 0
3145 [7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] 0
3146 [7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] 0
3147 [7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4] 0
3148 [7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 3] 0
3149 [7, 5, 4, 3, 2, 1, 5, 4, 3, 2] 0
3150 [7, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] 0
3151 [7, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4] 0
3152 [7, 5, 4, 3, 2, 1, 5, 4, 3, 5] 0
3153 [7, 5, 4, 3, 2, 1, 5, 4, 3, 4] 0
3154 [7, 5, 4, 3, 2, 1, 5, 4, 3] 0
3155 [7, 5, 4, 3, 2, 1, 5, 4, 2, 5] 0
3156 [7, 5, 4, 3, 2, 1, 5, 4, 2] 0
3157 [7, 5, 4, 3, 2, 1, 5, 4, 5] 0
3158 [7, 5, 4, 3, 2, 1, 5, 4] 0
3159 [7, 5, 4, 3, 2, 1, 5, 3, 2, 3] 0
3160 [7, 5, 4, 3, 2, 1, 5, 3, 2] 0
3161 [7, 5, 4, 3, 2, 1, 5, 3] 0
3162 [7, 5, 4, 3, 2, 1, 5, 2] 0
3163 [7, 5, 4, 3, 2, 1, 5] 0
3164 [7, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
3165 [7, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
3166 [7, 5, 4, 3, 2, 1, 4, 3, 2, 4] 0
3167 [7, 5, 4, 3, 2, 1, 4, 3, 2, 3] 0
3168 [7, 5, 4, 3, 2, 1, 4, 3, 2] 0
3169 [7, 5, 4, 3, 2, 1, 4, 3, 4] 0
3170 [7, 5, 4, 3, 2, 1, 4, 3] 0
3171 [7, 5, 4, 3, 2, 1, 4, 2] 0
3172 [7, 5, 4, 3, 2, 1, 4] 0
3173 [7, 5, 4, 3, 2, 1, 3, 2, 3] 0
3174 [7, 5, 4, 3, 2, 1, 3, 2] 0
3175 [7, 5, 4, 3, 2, 1, 3] 0
3176 [7, 5, 4, 3, 2, 1, 2] 0
3177 [7, 5, 4, 3, 2, 1] 0
3178 [7, 5, 4, 3, 2, 0, 5, 4, 3, 5, 4, 5] 0
3179 [7, 5, 4, 3, 2, 0, 5, 4, 3, 5, 4] 0
3180 [7, 5, 4, 3, 2, 0, 5, 4, 3, 5] 0
3181 [7, 5, 4, 3, 2, 0, 5, 4, 3, 4] 0
3182 [7, 5, 4, 3, 2, 0, 5, 4, 3] 0
3183 [7, 5, 4, 3, 2, 0, 5, 4, 5] 0
3184 [7, 5, 4, 3, 2, 0, 5, 4] 0
3185 [7, 5, 4, 3, 2, 0, 5, 3] 0
3186 [7, 5, 4, 3, 2, 0, 5] 0
3187 [7, 5, 4, 3, 2, 0, 4, 3, 4] 0
3188 [7, 5, 4, 3, 2, 0, 4, 3] 0
3189 [7, 5, 4, 3, 2, 0, 4] 0
3190 [7, 5, 4, 3, 2, 0, 3] 0
3191 [7, 5, 4, 3, 2, 0] 0
3192 [7, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
3193 [7, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
3194 [7, 5, 4, 3, 2, 5, 4, 3, 5] 0
3195 [7, 5, 4, 3, 2, 5, 4, 3, 4] 0
3196 [7, 5, 4, 3, 2, 5, 4, 3] 0
3197 [7, 5, 4, 3, 2, 5, 4, 5] 0
3198 [7, 5, 4, 3, 2, 5, 4] 0
3199 [7, 5, 4, 3, 2, 5, 3] 0
3200 [7, 5, 4, 3, 2, 5] 0
3201 [7, 5, 4, 3, 2, 4, 3, 4] 0
3202 [7, 5, 4, 3, 2, 4, 3] 0
3203 [7, 5, 4, 3, 2, 4] 0
3204 [7, 5, 4, 3, 2, 3] 0
3205 [7, 5, 4, 3, 2] 0
3206 [7, 5, 4, 3, 1, 0, 5, 4, 1, 5] 0
3207 [7, 5, 4, 3, 1, 0, 5, 4, 1] 0
3208 [7, 5, 4, 3, 1, 0, 5, 4, 5] 0
3209 [7, 5, 4, 3, 1, 0, 5, 4] 0
3210 [7, 5, 4, 3, 1, 0, 5, 1] 0
3211 [7, 5, 4, 3, 1, 0, 5] 0
3212 [7, 5, 4, 3, 1, 0, 4, 1] 0
3213 [7, 5, 4, 3, 1, 0, 4] 0
3214 [7, 5, 4, 3, 1, 0, 1] 0
3215 [7, 5, 4, 3, 1, 0] 0
3216 [7, 5, 4, 3, 1, 5, 4, 5] 0
3217 [7, 5, 4, 3, 1, 5, 4] 0
3218 [7, 5, 4, 3, 1, 5] 0
3219 [7, 5, 4, 3, 1, 4] 0
3220 [7, 5, 4, 3, 1] 0
3221 [7, 5, 4, 3, 0, 5, 4, 5] 0
3222 [7, 5, 4, 3, 0, 5, 4] 0
3223 [7, 5, 4, 3, 0, 5] 0
3224 [7, 5, 4, 3, 0, 4] 0
3225 [7, 5, 4, 3, 0] 0
3226 [7, 5, 4, 3, 5, 4, 5] 0
3227 [7, 5, 4, 3, 5, 4] 0
3228 [7, 5, 4, 3, 5] 0
3229 [7, 5, 4, 3, 4] 0
3230 [7, 5, 4, 3] 0
3231 [7, 5, 4, 2, 1, 0, 5, 2, 1, 2] 0
3232 [7, 5, 4, 2, 1, 0, 5, 2, 1] 0
3233 [7, 5, 4, 2, 1, 0, 5, 2] 0
3234 [7, 5, 4, 2, 1, 0, 5, 1] 0
3235 [7, 5, 4, 2, 1, 0, 5] 0
3236 [7, 5, 4, 2, 1, 0, 2, 1, 2] 0
3237 [7, 5, 4, 2, 1, 0, 2, 1] 0
3238 [7, 5, 4, 2, 1, 0, 2] 0
3239 [7, 5, 4, 2, 1, 0, 1] 0
3240 [7, 5, 4, 2, 1, 0] 0
3241 [7, 5, 4, 2, 1, 5, 2] 0
3242 [7, 5, 4, 2, 1, 5] 0
3243 [7, 5, 4, 2, 1, 2] 0
3244 [7, 5, 4, 2, 1] 0
3245 [7, 5, 4, 2, 0, 5] 0
3246 [7, 5, 4, 2, 0] 0
3247 [7, 5, 4, 2, 5] 0
3248 [7, 5, 4, 2] 0
3249 [7, 5, 4, 1, 0, 5, 1] 0
3250 [7, 5, 4, 1, 0, 5] 0
3251 [7, 5, 4, 1, 0, 1] 0
3252 [7, 5, 4, 1, 0] 0
3253 [7, 5, 4, 1, 5] 0
3254 [7, 5, 4, 1] 0
3255 [7, 5, 4, 0, 5] 0
3256 [7, 5, 4, 0] 0
3257 [7, 5, 4, 5] 0
3258 [7, 5, 4] 0
3259 [7, 5, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
3260 [7, 5, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
3261 [7, 5, 3, 2, 1, 0, 3, 2, 1, 3] 0
3262 [7, 5, 3, 2, 1, 0, 3, 2, 1, 2] 0
3263 [7, 5, 3, 2, 1, 0, 3, 2, 1] 0
3264 [7, 5, 3, 2, 1, 0, 3, 2, 3] 0
3265 [7, 5, 3, 2, 1, 0, 3, 2] 0
3266 [7, 5, 3, 2, 1, 0, 3, 1] 0
3267 [7, 5, 3, 2, 1, 0, 3] 0
3268 [7, 5, 3, 2, 1, 0, 2, 1, 2] 0
3269 [7, 5, 3, 2, 1, 0, 2, 1] 0
3270 [7, 5, 3, 2, 1, 0, 2] 0
3271 [7, 5, 3, 2, 1, 0, 1] 0
3272 [7, 5, 3, 2, 1, 0] 0
3273 [7, 5, 3, 2, 1, 3, 2, 3] 0
3274 [7, 5, 3, 2, 1, 3, 2] 0
3275 [7, 5, 3, 2, 1, 3] 0
3276 [7, 5, 3, 2, 1, 2] 0
3277 [7, 5, 3, 2, 1] 0
3278 [7, 5, 3, 2, 0, 3] 0
3279 [7, 5, 3, 2, 0] 0
3280 [7, 5, 3, 2, 3] 0
3281 [7, 5, 3, 2] 0
3282 [7, 5, 3, 1, 0, 1] 0
3283 [7, 5, 3, 1, 0] 0
3284 [7, 5, 3, 1] 0
3285 [7, 5, 3, 0] 0
3286 [7, 5, 3] 0
3287 [7, 5, 2, 1, 0, 2, 1, 2] 0
3288 [7, 5, 2, 1, 0, 2, 1] 0
3289 [7, 5, 2, 1, 0, 2] 0
3290 [7, 5, 2, 1, 0, 1] 0
3291 [7, 5, 2, 1, 0] 0
3292 [7, 5, 2, 1, 2] 0
3293 [7, 5, 2, 1] 0
3294 [7, 5, 2, 0] 0
3295 [7, 5, 2] 0
3296 [7, 5, 1, 0, 1] 0
3297 [7, 5, 1, 0] 0
3298 [7, 5, 1] 0
3299 [7, 5, 0] 0
3300 [7, 5] 0
3301 [7, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
3302 [7, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
3303 [7, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4] 0
3304 [7, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 3] 0
3305 [7, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2] 0
3306 [7, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 4] 0
3307 [7, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3] 0
3308 [7, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 2] 0
3309 [7, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4] 0
3310 [7, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2, 3] 0
3311 [7, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2] 0
3312 [7, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3] 0
3313 [7, 4, 3, 2, 1, 0, 4, 3, 2, 1, 2] 0
3314 [7, 4, 3, 2, 1, 0, 4, 3, 2, 1] 0
3315 [7, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3, 4] 0
3316 [7, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3] 0
3317 [7, 4, 3, 2, 1, 0, 4, 3, 2, 4] 0
3318 [7, 4, 3, 2, 1, 0, 4, 3, 2, 3] 0
3319 [7, 4, 3, 2, 1, 0, 4, 3, 2] 0
3320 [7, 4, 3, 2, 1, 0, 4, 3, 1, 4] 0
3321 [7, 4, 3, 2, 1, 0, 4, 3, 1] 0
3322 [7, 4, 3, 2, 1, 0, 4, 3, 4] 0
3323 [7, 4, 3, 2, 1, 0, 4, 3] 0
3324 [7, 4, 3, 2, 1, 0, 4, 2, 1, 2] 0
3325 [7, 4, 3, 2, 1, 0, 4, 2, 1] 0
3326 [7, 4, 3, 2, 1, 0, 4, 2] 0
3327 [7, 4, 3, 2, 1, 0, 4, 1] 0
3328 [7, 4, 3, 2, 1, 0, 4] 0
3329 [7, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
3330 [7, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
3331 [7, 4, 3, 2, 1, 0, 3, 2, 1, 3] 0
3332 [7, 4, 3, 2, 1, 0, 3, 2, 1, 2] 0
3333 [7, 4, 3, 2, 1, 0, 3, 2, 1] 0
3334 [7, 4, 3, 2, 1, 0, 3, 2, 3] 0
3335 [7, 4, 3, 2, 1, 0, 3, 2] 0
3336 [7, 4, 3, 2, 1, 0, 3, 1] 0
3337 [7, 4, 3, 2, 1, 0, 3] 0
3338 [7, 4, 3, 2, 1, 0, 2, 1, 2] 0
3339 [7, 4, 3, 2, 1, 0, 2, 1] 0
3340 [7, 4, 3, 2, 1, 0, 2] 0
3341 [7, 4, 3, 2, 1, 0, 1] 0
3342 [7, 4, 3, 2, 1, 0] 0
3343 [7, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
3344 [7, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
3345 [7, 4, 3, 2, 1, 4, 3, 2, 4] 0
3346 [7, 4, 3, 2, 1, 4, 3, 2, 3] 0
3347 [7, 4, 3, 2, 1, 4, 3, 2] 0
3348 [7, 4, 3, 2, 1, 4, 3, 4] 0
3349 [7, 4, 3, 2, 1, 4, 3] 0
3350 [7, 4, 3, 2, 1, 4, 2] 0
3351 [7, 4, 3, 2, 1, 4] 0
3352 [7, 4, 3, 2, 1, 3, 2, 3] 0
3353 [7, 4, 3, 2, 1, 3, 2] 0
3354 [7, 4, 3, 2, 1, 3] 0
3355 [7, 4, 3, 2, 1, 2] 0
3356 [7, 4, 3, 2, 1] 0
3357 [7, 4, 3, 2, 0, 4, 3, 4] 0
3358 [7, 4, 3, 2, 0, 4, 3] 0
3359 [7, 4, 3, 2, 0, 4] 0
3360 [7, 4, 3, 2, 0, 3] 0
3361 [7, 4, 3, 2, 0] 0
3362 [7, 4, 3, 2, 4, 3, 4] 0
3363 [7, 4, 3, 2, 4, 3] 0
3364 [7, 4, 3, 2, 4] 0
3365 [7, 4, 3, 2, 3] 0
3366 [7, 4, 3, 2] 0
3367 [7, 4, 3, 1, 0, 4, 1] 0
3368 [7, 4, 3, 1, 0, 4] 0
3369 [7, 4, 3, 1, 0, 1] 0
3370 [7, 4, 3, 1, 0] 0
3371 [7, 4, 3, 1, 4] 0
3372 [7, 4, 3, 1] 0
3373 [7, 4, 3, 0, 4] 0
3374 [7, 4, 3, 0] 0
3375 [7, 4, 3, 4] 0
3376 [7, 4, 3] 0
3377 [7, 4, 2, 1, 0, 2, 1, 2] 0
3378 [7, 4, 2, 1, 0, 2, 1] 0
3379 [7, 4, 2, 1, 0, 2] 0
3380 [7, 4, 2, 1, 0, 1] 0
3381 [7, 4, 2, 1, 0] 0
3382 [7, 4, 2, 1, 2] 0
3383 [7, 4, 2, 1] 0
3384 [7, 4, 2, 0] 0
3385 [7, 4, 2] 0
3386 [7, 4, 1, 0, 1] 0
3387 [7, 4, 1, 0] 0
3388 [7, 4, 1] 0
3389 [7, 4, 0] 0
3390 [7, 4] 0
3391 [7, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
3392 [7, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
3393 [7, 3, 2, 1, 0, 3, 2, 1, 3] 0
3394 [7, 3, 2, 1, 0, 3, 2, 1, 2] 0
3395 [7, 3, 2, 1, 0, 3, 2, 1] 0
3396 [7, 3, 2, 1, 0, 3, 2, 3] 0
3397 [7, 3, 2, 1, 0, 3, 2] 0
3398 [7, 3, 2, 1, 0, 3, 1] 0
3399 [7, 3, 2, 1, 0, 3] 0
3400 [7, 3, 2, 1, 0, 2, 1, 2] 0
3401 [7, 3, 2, 1, 0, 2, 1] 0
3402 [7, 3, 2, 1, 0, 2] 0
3403 [7, 3, 2, 1, 0, 1] 0
3404 [7, 3, 2, 1, 0] 0
3405 [7, 3, 2, 1, 3, 2, 3] 0
3406 [7, 3, 2, 1, 3, 2] 0
3407 [7, 3, 2, 1, 3] 0
3408 [7, 3, 2, 1, 2] 0
3409 [7, 3, 2, 1] 0
3410 [7, 3, 2, 0, 3] 0
3411 [7, 3, 2, 0] 0
3412 [7, 3, 2, 3] 0
3413 [7, 3, 2] 0
3414 [7, 3, 1, 0, 1] 0
3415 [7, 3, 1, 0] 0
3416 [7, 3, 1] 0
3417 [7, 3, 0] 0
3418 [7, 3] 0
3419 [7, 2, 1, 0, 2, 1, 2] 0
3420 [7, 2, 1, 0, 2, 1] 0
3421 [7, 2, 1, 0, 2] 0
3422 [7, 2, 1, 0, 1] 0
3423 [7, 2, 1, 0] 0
3424 [7, 2, 1, 2] 0
3425 [7, 2, 1] 0
3426 [7, 2, 0] 0
3427 [7, 2] 0
3428 [7, 1, 0, 1] 0
3429 [7, 1, 0] 0
3430 [7, 1] 0
3431 [7, 0] 0
3432 [7] 0
3433 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
3434 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
3435 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6] 0
3436 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 5] 0
3437 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4] 0
3438 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 6] 0
3439 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5] 0
3440 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 4] 0
3441 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6] 0
3442 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4, 5] 0
3443 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4] 0
3444 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5] 0
3445 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 4] 0
3446 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3] 0
3447 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5, 6] 0
3448 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5] 0
3449 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 6] 0
3450 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 5] 0
3451 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4] 0
3452 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 3, 6] 0
3453 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 3] 0
3454 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 6] 0
3455 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5] 0
3456 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 4, 3, 4] 0
3457 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 4, 3] 0
3458 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 4] 0
3459 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 3] 0
3460 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6] 0
3461 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
3462 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
3463 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3, 5] 0
3464 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3, 4] 0
3465 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3] 0
3466 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 5] 0
3467 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4] 0
3468 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 3] 0
3469 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5] 0
3470 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 4, 3, 4] 0
3471 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 4, 3] 0
3472 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 4] 0
3473 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 3] 0
3474 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2] 0
3475 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
3476 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
3477 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4, 6] 0
3478 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4, 5] 0
3479 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4] 0
3480 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 6] 0
3481 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5] 0
3482 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 4] 0
3483 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6] 0
3484 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 5, 4, 5] 0
3485 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 5, 4] 0
3486 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 5] 0
3487 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 4] 0
3488 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3] 0
3489 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 2, 6, 5, 6] 0
3490 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 2, 6, 5] 0
3491 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 2, 6] 0
3492 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 2, 5] 0
3493 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 2] 0
3494 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 6, 5, 6] 0
3495 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 6, 5] 0
3496 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 6] 0
3497 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 5] 0
3498 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4] 0
3499 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 3, 2, 6, 3] 0
3500 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 3, 2, 6] 0
3501 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 3, 2, 3] 0
3502 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 3, 2] 0
3503 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 3, 6] 0
3504 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 3] 0
3505 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 2, 6] 0
3506 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 2] 0
3507 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 6] 0
3508 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5] 0
3509 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 4, 3, 2, 4, 3, 4] 0
3510 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 4, 3, 2, 4, 3] 0
3511 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 4, 3, 2, 4] 0
3512 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 4, 3, 2, 3] 0
3513 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 4, 3, 2] 0
3514 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 4, 3, 4] 0
3515 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 4, 3] 0
3516 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 4, 2] 0
3517 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 4] 0
3518 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 3, 2, 3] 0
3519 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 3, 2] 0
3520 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 3] 0
3521 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 2] 0
3522 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6] 0
3523 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
3524 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
3525 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] 0
3526 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] 0
3527 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] 0
3528 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] 0
3529 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] 0
3530 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] 0
3531 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5] 0
3532 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] 0
3533 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] 0
3534 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4] 0
3535 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 3] 0
3536 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2] 0
3537 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] 0
3538 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4] 0
3539 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 5] 0
3540 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 4] 0
3541 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3] 0
3542 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 2, 5] 0
3543 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 2] 0
3544 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 5] 0
3545 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4] 0
3546 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 3, 2, 3] 0
3547 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 3, 2] 0
3548 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 3] 0
3549 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 2] 0
3550 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5] 0
3551 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
3552 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
3553 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 4, 3, 2, 4] 0
3554 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 4, 3, 2, 3] 0
3555 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 4, 3, 2] 0
3556 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 4, 3, 4] 0
3557 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 4, 3] 0
3558 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 4, 2] 0
3559 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 4] 0
3560 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 3, 2, 3] 0
3561 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 3, 2] 0
3562 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 3] 0
3563 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 2] 0
3564 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1] 0
3565 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
3566 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
3567 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6] 0
3568 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 5] 0
3569 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4] 0
3570 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 6] 0
3571 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5] 0
3572 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 4] 0
3573 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6] 0
3574 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4, 5] 0
3575 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4] 0
3576 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5] 0
3577 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 4] 0
3578 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3] 0
3579 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5, 6] 0
3580 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5] 0
3581 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 6] 0
3582 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 5] 0
3583 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4] 0
3584 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 3, 6] 0
3585 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 3] 0
3586 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 6] 0
3587 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5] 0
3588 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 4, 3, 4] 0
3589 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 4, 3] 0
3590 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 4] 0
3591 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 3] 0
3592 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6] 0
3593 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
3594 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
3595 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 5, 4, 3, 5] 0
3596 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 5, 4, 3, 4] 0
3597 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 5, 4, 3] 0
3598 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 5, 4, 5] 0
3599 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 5, 4] 0
3600 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 5, 3] 0
3601 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 5] 0
3602 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 4, 3, 4] 0
3603 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 4, 3] 0
3604 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 4] 0
3605 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 3] 0
3606 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2] 0
3607 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 6, 5, 4, 6, 5, 6] 0
3608 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 6, 5, 4, 6, 5] 0
3609 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 6, 5, 4, 6] 0
3610 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 6, 5, 4, 5] 0
3611 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 6, 5, 4] 0
3612 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 6, 5, 6] 0
3613 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 6, 5] 0
3614 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 6, 4] 0
3615 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 6] 0
3616 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 5, 4, 5] 0
3617 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 5, 4] 0
3618 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 5] 0
3619 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 4] 0
3620 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1] 0
3621 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
3622 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
3623 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 6, 5, 4, 6] 0
3624 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 6, 5, 4, 5] 0
3625 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 6, 5, 4] 0
3626 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 6, 5, 6] 0
3627 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 6, 5] 0
3628 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 6, 4] 0
3629 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 6] 0
3630 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 5, 4, 5] 0
3631 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 5, 4] 0
3632 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 5] 0
3633 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 4] 0
3634 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3] 0
3635 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 1, 6, 5, 2, 6] 0
3636 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 1, 6, 5, 2] 0
3637 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 1, 6, 5, 6] 0
3638 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 1, 6, 5] 0
3639 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 1, 6, 2] 0
3640 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 1, 6] 0
3641 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 1, 5, 2] 0
3642 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 1, 5] 0
3643 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 1, 2] 0
3644 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 1] 0
3645 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 6, 5, 6] 0
3646 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 6, 5] 0
3647 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 6] 0
3648 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 5] 0
3649 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2] 0
3650 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 1, 6, 5, 6] 0
3651 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 1, 6, 5] 0
3652 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 1, 6] 0
3653 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 1, 5] 0
3654 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 1] 0
3655 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 6, 5, 6] 0
3656 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 6, 5] 0
3657 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 6] 0
3658 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 5] 0
3659 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4] 0
3660 [6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 1, 6, 3, 2, 3] 0
3661 [6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 1, 6, 3, 2] 0
3662 [6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 1, 6, 3] 0
3663 [6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 1, 6, 2] 0
3664 [6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 1, 6] 0
3665 [6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 1, 3, 2, 3] 0
3666 [6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 1, 3, 2] 0
3667 [6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 1, 3] 0
3668 [6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 1, 2] 0
3669 [6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 1] 0
3670 [6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 6, 3] 0
3671 [6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 6] 0
3672 [6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 3] 0
3673 [6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2] 0
3674 [6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 1, 6] 0
3675 [6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 1] 0
3676 [6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 6] 0
3677 [6, 5, 4, 3, 2, 1, 0, 6, 5, 3] 0
3678 [6, 5, 4, 3, 2, 1, 0, 6, 5, 2, 1, 6, 2] 0
3679 [6, 5, 4, 3, 2, 1, 0, 6, 5, 2, 1, 6] 0
3680 [6, 5, 4, 3, 2, 1, 0, 6, 5, 2, 1, 2] 0
3681 [6, 5, 4, 3, 2, 1, 0, 6, 5, 2, 1] 0
3682 [6, 5, 4, 3, 2, 1, 0, 6, 5, 2, 6] 0
3683 [6, 5, 4, 3, 2, 1, 0, 6, 5, 2] 0
3684 [6, 5, 4, 3, 2, 1, 0, 6, 5, 1, 6] 0
3685 [6, 5, 4, 3, 2, 1, 0, 6, 5, 1] 0
3686 [6, 5, 4, 3, 2, 1, 0, 6, 5, 6] 0
3687 [6, 5, 4, 3, 2, 1, 0, 6, 5] 0
3688 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
3689 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
3690 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 4, 3, 2, 4] 0
3691 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 4, 3, 2, 3] 0
3692 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 4, 3, 2] 0
3693 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 4, 3, 4] 0
3694 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 4, 3] 0
3695 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 4, 2] 0
3696 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 4] 0
3697 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 3, 2, 3] 0
3698 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 3, 2] 0
3699 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 3] 0
3700 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 2] 0
3701 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1] 0
3702 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 4, 3, 4] 0
3703 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 4, 3] 0
3704 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 4] 0
3705 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 3] 0
3706 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2] 0
3707 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 1, 4] 0
3708 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 1] 0
3709 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 4] 0
3710 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3] 0
3711 [6, 5, 4, 3, 2, 1, 0, 6, 4, 2, 1, 2] 0
3712 [6, 5, 4, 3, 2, 1, 0, 6, 4, 2, 1] 0
3713 [6, 5, 4, 3, 2, 1, 0, 6, 4, 2] 0
3714 [6, 5, 4, 3, 2, 1, 0, 6, 4, 1] 0
3715 [6, 5, 4, 3, 2, 1, 0, 6, 4] 0
3716 [6, 5, 4, 3, 2, 1, 0, 6, 3, 2, 1, 3, 2, 3] 0
3717 [6, 5, 4, 3, 2, 1, 0, 6, 3, 2, 1, 3, 2] 0
3718 [6, 5, 4, 3, 2, 1, 0, 6, 3, 2, 1, 3] 0
3719 [6, 5, 4, 3, 2, 1, 0, 6, 3, 2, 1, 2] 0
3720 [6, 5, 4, 3, 2, 1, 0, 6, 3, 2, 1] 0
3721 [6, 5, 4, 3, 2, 1, 0, 6, 3, 2, 3] 0
3722 [6, 5, 4, 3, 2, 1, 0, 6, 3, 2] 0
3723 [6, 5, 4, 3, 2, 1, 0, 6, 3, 1] 0
3724 [6, 5, 4, 3, 2, 1, 0, 6, 3] 0
3725 [6, 5, 4, 3, 2, 1, 0, 6, 2, 1, 2] 0
3726 [6, 5, 4, 3, 2, 1, 0, 6, 2, 1] 0
3727 [6, 5, 4, 3, 2, 1, 0, 6, 2] 0
3728 [6, 5, 4, 3, 2, 1, 0, 6, 1] 0
3729 [6, 5, 4, 3, 2, 1, 0, 6] 0
3730 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
3731 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
3732 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] 0
3733 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] 0
3734 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] 0
3735 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] 0
3736 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] 0
3737 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] 0
3738 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5] 0
3739 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] 0
3740 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] 0
3741 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4] 0
3742 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 3] 0
3743 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2] 0
3744 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] 0
3745 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4] 0
3746 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5] 0
3747 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 4] 0
3748 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3] 0
3749 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2, 5] 0
3750 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2] 0
3751 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 5] 0
3752 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4] 0
3753 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2, 3] 0
3754 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2] 0
3755 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3] 0
3756 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 2] 0
3757 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5] 0
3758 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
3759 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
3760 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4] 0
3761 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 3] 0
3762 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2] 0
3763 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 4] 0
3764 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3] 0
3765 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 2] 0
3766 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4] 0
3767 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2, 3] 0
3768 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2] 0
3769 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3] 0
3770 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 2] 0
3771 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1] 0
3772 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
3773 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
3774 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5] 0
3775 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 4] 0
3776 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3] 0
3777 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 5] 0
3778 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4] 0
3779 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 3] 0
3780 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5] 0
3781 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4, 3, 4] 0
3782 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4, 3] 0
3783 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4] 0
3784 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 3] 0
3785 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2] 0
3786 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5, 4, 5] 0
3787 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5, 4] 0
3788 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5] 0
3789 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 4] 0
3790 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 1] 0
3791 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 5, 4, 5] 0
3792 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 5, 4] 0
3793 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 5] 0
3794 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 4] 0
3795 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3] 0
3796 [6, 5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 5, 2] 0
3797 [6, 5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 5] 0
3798 [6, 5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 2] 0
3799 [6, 5, 4, 3, 2, 1, 0, 5, 4, 2, 1] 0
3800 [6, 5, 4, 3, 2, 1, 0, 5, 4, 2, 5] 0
3801 [6, 5, 4, 3, 2, 1, 0, 5, 4, 2] 0
3802 [6, 5, 4, 3, 2, 1, 0, 5, 4, 1, 5] 0
3803 [6, 5, 4, 3, 2, 1, 0, 5, 4, 1] 0
3804 [6, 5, 4, 3, 2, 1, 0, 5, 4, 5] 0
3805 [6, 5, 4, 3, 2, 1, 0, 5, 4] 0
3806 [6, 5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3, 2, 3] 0
3807 [6, 5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3, 2] 0
3808 [6, 5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3] 0
3809 [6, 5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 2] 0
3810 [6, 5, 4, 3, 2, 1, 0, 5, 3, 2, 1] 0
3811 [6, 5, 4, 3, 2, 1, 0, 5, 3, 2, 3] 0
3812 [6, 5, 4, 3, 2, 1, 0, 5, 3, 2] 0
3813 [6, 5, 4, 3, 2, 1, 0, 5, 3, 1] 0
3814 [6, 5, 4, 3, 2, 1, 0, 5, 3] 0
3815 [6, 5, 4, 3, 2, 1, 0, 5, 2, 1, 2] 0
3816 [6, 5, 4, 3, 2, 1, 0, 5, 2, 1] 0
3817 [6, 5, 4, 3, 2, 1, 0, 5, 2] 0
3818 [6, 5, 4, 3, 2, 1, 0, 5, 1] 0
3819 [6, 5, 4, 3, 2, 1, 0, 5] 0
3820 [6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
3821 [6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
3822 [6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4] 0
3823 [6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 3] 0
3824 [6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2] 0
3825 [6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 4] 0
3826 [6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3] 0
3827 [6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 2] 0
3828 [6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4] 0
3829 [6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2, 3] 0
3830 [6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2] 0
3831 [6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3] 0
3832 [6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 2] 0
3833 [6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1] 0
3834 [6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3, 4] 0
3835 [6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3] 0
3836 [6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 4] 0
3837 [6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 3] 0
3838 [6, 5, 4, 3, 2, 1, 0, 4, 3, 2] 0
3839 [6, 5, 4, 3, 2, 1, 0, 4, 3, 1, 4] 0
3840 [6, 5, 4, 3, 2, 1, 0, 4, 3, 1] 0
3841 [6, 5, 4, 3, 2, 1, 0, 4, 3, 4] 0
3842 [6, 5, 4, 3, 2, 1, 0, 4, 3] 0
3843 [6, 5, 4, 3, 2, 1, 0, 4, 2, 1, 2] 0
3844 [6, 5, 4, 3, 2, 1, 0, 4, 2, 1] 0
3845 [6, 5, 4, 3, 2, 1, 0, 4, 2] 0
3846 [6, 5, 4, 3, 2, 1, 0, 4, 1] 0
3847 [6, 5, 4, 3, 2, 1, 0, 4] 0
3848 [6, 5, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
3849 [6, 5, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
3850 [6, 5, 4, 3, 2, 1, 0, 3, 2, 1, 3] 0
3851 [6, 5, 4, 3, 2, 1, 0, 3, 2, 1, 2] 0
3852 [6, 5, 4, 3, 2, 1, 0, 3, 2, 1] 0
3853 [6, 5, 4, 3, 2, 1, 0, 3, 2, 3] 0
3854 [6, 5, 4, 3, 2, 1, 0, 3, 2] 0
3855 [6, 5, 4, 3, 2, 1, 0, 3, 1] 0
3856 [6, 5, 4, 3, 2, 1, 0, 3] 0
3857 [6, 5, 4, 3, 2, 1, 0, 2, 1, 2] 0
3858 [6, 5, 4, 3, 2, 1, 0, 2, 1] 0
3859 [6, 5, 4, 3, 2, 1, 0, 2] 0
3860 [6, 5, 4, 3, 2, 1, 0, 1] 0
3861 [6, 5, 4, 3, 2, 1, 0] 0
3862 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
3863 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
3864 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6] 0
3865 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 5] 0
3866 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4] 0
3867 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 6] 0
3868 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5] 0
3869 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 4] 0
3870 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6] 0
3871 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4, 5] 0
3872 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4] 0
3873 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5] 0
3874 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 4] 0
3875 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3] 0
3876 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5, 6] 0
3877 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5] 0
3878 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 6] 0
3879 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 5] 0
3880 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4] 0
3881 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 3, 6] 0
3882 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 3] 0
3883 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 6] 0
3884 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5] 0
3885 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 4, 3, 4] 0
3886 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 4, 3] 0
3887 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 4] 0
3888 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 3] 0
3889 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6] 0
3890 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
3891 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
3892 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3, 5] 0
3893 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3, 4] 0
3894 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3] 0
3895 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 5] 0
3896 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4] 0
3897 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 3] 0
3898 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5] 0
3899 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 4, 3, 4] 0
3900 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 4, 3] 0
3901 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 4] 0
3902 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 3] 0
3903 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2] 0
3904 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
3905 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
3906 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4, 6] 0
3907 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4, 5] 0
3908 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4] 0
3909 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 6] 0
3910 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5] 0
3911 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 4] 0
3912 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6] 0
3913 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 5, 4, 5] 0
3914 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 5, 4] 0
3915 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 5] 0
3916 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 4] 0
3917 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3] 0
3918 [6, 5, 4, 3, 2, 1, 6, 5, 4, 2, 6, 5, 6] 0
3919 [6, 5, 4, 3, 2, 1, 6, 5, 4, 2, 6, 5] 0
3920 [6, 5, 4, 3, 2, 1, 6, 5, 4, 2, 6] 0
3921 [6, 5, 4, 3, 2, 1, 6, 5, 4, 2, 5] 0
3922 [6, 5, 4, 3, 2, 1, 6, 5, 4, 2] 0
3923 [6, 5, 4, 3, 2, 1, 6, 5, 4, 6, 5, 6] 0
3924 [6, 5, 4, 3, 2, 1, 6, 5, 4, 6, 5] 0
3925 [6, 5, 4, 3, 2, 1, 6, 5, 4, 6] 0
3926 [6, 5, 4, 3, 2, 1, 6, 5, 4, 5] 0
3927 [6, 5, 4, 3, 2, 1, 6, 5, 4] 0
3928 [6, 5, 4, 3, 2, 1, 6, 5, 3, 2, 6, 3] 0
3929 [6, 5, 4, 3, 2, 1, 6, 5, 3, 2, 6] 0
3930 [6, 5, 4, 3, 2, 1, 6, 5, 3, 2, 3] 0
3931 [6, 5, 4, 3, 2, 1, 6, 5, 3, 2] 0
3932 [6, 5, 4, 3, 2, 1, 6, 5, 3, 6] 0
3933 [6, 5, 4, 3, 2, 1, 6, 5, 3] 0
3934 [6, 5, 4, 3, 2, 1, 6, 5, 2, 6] 0
3935 [6, 5, 4, 3, 2, 1, 6, 5, 2] 0
3936 [6, 5, 4, 3, 2, 1, 6, 5, 6] 0
3937 [6, 5, 4, 3, 2, 1, 6, 5] 0
3938 [6, 5, 4, 3, 2, 1, 6, 4, 3, 2, 4, 3, 4] 0
3939 [6, 5, 4, 3, 2, 1, 6, 4, 3, 2, 4, 3] 0
3940 [6, 5, 4, 3, 2, 1, 6, 4, 3, 2, 4] 0
3941 [6, 5, 4, 3, 2, 1, 6, 4, 3, 2, 3] 0
3942 [6, 5, 4, 3, 2, 1, 6, 4, 3, 2] 0
3943 [6, 5, 4, 3, 2, 1, 6, 4, 3, 4] 0
3944 [6, 5, 4, 3, 2, 1, 6, 4, 3] 0
3945 [6, 5, 4, 3, 2, 1, 6, 4, 2] 0
3946 [6, 5, 4, 3, 2, 1, 6, 4] 0
3947 [6, 5, 4, 3, 2, 1, 6, 3, 2, 3] 0
3948 [6, 5, 4, 3, 2, 1, 6, 3, 2] 0
3949 [6, 5, 4, 3, 2, 1, 6, 3] 0
3950 [6, 5, 4, 3, 2, 1, 6, 2] 0
3951 [6, 5, 4, 3, 2, 1, 6] 0
3952 [6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
3953 [6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
3954 [6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] 0
3955 [6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] 0
3956 [6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] 0
3957 [6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] 0
3958 [6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] 0
3959 [6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] 0
3960 [6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5] 0
3961 [6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] 0
3962 [6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] 0
3963 [6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4] 0
3964 [6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 3] 0
3965 [6, 5, 4, 3, 2, 1, 5, 4, 3, 2] 0
3966 [6, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] 0
3967 [6, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4] 0
3968 [6, 5, 4, 3, 2, 1, 5, 4, 3, 5] 0
3969 [6, 5, 4, 3, 2, 1, 5, 4, 3, 4] 0
3970 [6, 5, 4, 3, 2, 1, 5, 4, 3] 0
3971 [6, 5, 4, 3, 2, 1, 5, 4, 2, 5] 0
3972 [6, 5, 4, 3, 2, 1, 5, 4, 2] 0
3973 [6, 5, 4, 3, 2, 1, 5, 4, 5] 0
3974 [6, 5, 4, 3, 2, 1, 5, 4] 0
3975 [6, 5, 4, 3, 2, 1, 5, 3, 2, 3] 0
3976 [6, 5, 4, 3, 2, 1, 5, 3, 2] 0
3977 [6, 5, 4, 3, 2, 1, 5, 3] 0
3978 [6, 5, 4, 3, 2, 1, 5, 2] 0
3979 [6, 5, 4, 3, 2, 1, 5] 0
3980 [6, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
3981 [6, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
3982 [6, 5, 4, 3, 2, 1, 4, 3, 2, 4] 0
3983 [6, 5, 4, 3, 2, 1, 4, 3, 2, 3] 0
3984 [6, 5, 4, 3, 2, 1, 4, 3, 2] 0
3985 [6, 5, 4, 3, 2, 1, 4, 3, 4] 0
3986 [6, 5, 4, 3, 2, 1, 4, 3] 0
3987 [6, 5, 4, 3, 2, 1, 4, 2] 0
3988 [6, 5, 4, 3, 2, 1, 4] 0
3989 [6, 5, 4, 3, 2, 1, 3, 2, 3] 0
3990 [6, 5, 4, 3, 2, 1, 3, 2] 0
3991 [6, 5, 4, 3, 2, 1, 3] 0
3992 [6, 5, 4, 3, 2, 1, 2] 0
3993 [6, 5, 4, 3, 2, 1] 0
3994 [6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
3995 [6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
3996 [6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 6, 5, 4, 6] 0
3997 [6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 6, 5, 4, 5] 0
3998 [6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 6, 5, 4] 0
3999 [6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 6, 5, 6] 0
4000 [6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 6, 5] 0
4001 [6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 6, 4] 0
4002 [6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 6] 0
4003 [6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 5, 4, 5] 0
4004 [6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 5, 4] 0
4005 [6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 5] 0
4006 [6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 4] 0
4007 [6, 5, 4, 3, 2, 0, 6, 5, 4, 3] 0
4008 [6, 5, 4, 3, 2, 0, 6, 5, 4, 6, 5, 6] 0
4009 [6, 5, 4, 3, 2, 0, 6, 5, 4, 6, 5] 0
4010 [6, 5, 4, 3, 2, 0, 6, 5, 4, 6] 0
4011 [6, 5, 4, 3, 2, 0, 6, 5, 4, 5] 0
4012 [6, 5, 4, 3, 2, 0, 6, 5, 4] 0
4013 [6, 5, 4, 3, 2, 0, 6, 5, 3, 6] 0
4014 [6, 5, 4, 3, 2, 0, 6, 5, 3] 0
4015 [6, 5, 4, 3, 2, 0, 6, 5, 6] 0
4016 [6, 5, 4, 3, 2, 0, 6, 5] 0
4017 [6, 5, 4, 3, 2, 0, 6, 4, 3, 4] 0
4018 [6, 5, 4, 3, 2, 0, 6, 4, 3] 0
4019 [6, 5, 4, 3, 2, 0, 6, 4] 0
4020 [6, 5, 4, 3, 2, 0, 6, 3] 0
4021 [6, 5, 4, 3, 2, 0, 6] 0
4022 [6, 5, 4, 3, 2, 0, 5, 4, 3, 5, 4, 5] 0
4023 [6, 5, 4, 3, 2, 0, 5, 4, 3, 5, 4] 0
4024 [6, 5, 4, 3, 2, 0, 5, 4, 3, 5] 0
4025 [6, 5, 4, 3, 2, 0, 5, 4, 3, 4] 0
4026 [6, 5, 4, 3, 2, 0, 5, 4, 3] 0
4027 [6, 5, 4, 3, 2, 0, 5, 4, 5] 0
4028 [6, 5, 4, 3, 2, 0, 5, 4] 0
4029 [6, 5, 4, 3, 2, 0, 5, 3] 0
4030 [6, 5, 4, 3, 2, 0, 5] 0
4031 [6, 5, 4, 3, 2, 0, 4, 3, 4] 0
4032 [6, 5, 4, 3, 2, 0, 4, 3] 0
4033 [6, 5, 4, 3, 2, 0, 4] 0
4034 [6, 5, 4, 3, 2, 0, 3] 0
4035 [6, 5, 4, 3, 2, 0] 0
4036 [6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
4037 [6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
4038 [6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6] 0
4039 [6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 5] 0
4040 [6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4] 0
4041 [6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 6] 0
4042 [6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5] 0
4043 [6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 4] 0
4044 [6, 5, 4, 3, 2, 6, 5, 4, 3, 6] 0
4045 [6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4, 5] 0
4046 [6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4] 0
4047 [6, 5, 4, 3, 2, 6, 5, 4, 3, 5] 0
4048 [6, 5, 4, 3, 2, 6, 5, 4, 3, 4] 0
4049 [6, 5, 4, 3, 2, 6, 5, 4, 3] 0
4050 [6, 5, 4, 3, 2, 6, 5, 4, 6, 5, 6] 0
4051 [6, 5, 4, 3, 2, 6, 5, 4, 6, 5] 0
4052 [6, 5, 4, 3, 2, 6, 5, 4, 6] 0
4053 [6, 5, 4, 3, 2, 6, 5, 4, 5] 0
4054 [6, 5, 4, 3, 2, 6, 5, 4] 0
4055 [6, 5, 4, 3, 2, 6, 5, 3, 6] 0
4056 [6, 5, 4, 3, 2, 6, 5, 3] 0
4057 [6, 5, 4, 3, 2, 6, 5, 6] 0
4058 [6, 5, 4, 3, 2, 6, 5] 0
4059 [6, 5, 4, 3, 2, 6, 4, 3, 4] 0
4060 [6, 5, 4, 3, 2, 6, 4, 3] 0
4061 [6, 5, 4, 3, 2, 6, 4] 0
4062 [6, 5, 4, 3, 2, 6, 3] 0
4063 [6, 5, 4, 3, 2, 6] 0
4064 [6, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
4065 [6, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
4066 [6, 5, 4, 3, 2, 5, 4, 3, 5] 0
4067 [6, 5, 4, 3, 2, 5, 4, 3, 4] 0
4068 [6, 5, 4, 3, 2, 5, 4, 3] 0
4069 [6, 5, 4, 3, 2, 5, 4, 5] 0
4070 [6, 5, 4, 3, 2, 5, 4] 0
4071 [6, 5, 4, 3, 2, 5, 3] 0
4072 [6, 5, 4, 3, 2, 5] 0
4073 [6, 5, 4, 3, 2, 4, 3, 4] 0
4074 [6, 5, 4, 3, 2, 4, 3] 0
4075 [6, 5, 4, 3, 2, 4] 0
4076 [6, 5, 4, 3, 2, 3] 0
4077 [6, 5, 4, 3, 2] 0
4078 [6, 5, 4, 3, 1, 0, 6, 5, 4, 1, 6, 5, 6] 0
4079 [6, 5, 4, 3, 1, 0, 6, 5, 4, 1, 6, 5] 0
4080 [6, 5, 4, 3, 1, 0, 6, 5, 4, 1, 6] 0
4081 [6, 5, 4, 3, 1, 0, 6, 5, 4, 1, 5] 0
4082 [6, 5, 4, 3, 1, 0, 6, 5, 4, 1] 0
4083 [6, 5, 4, 3, 1, 0, 6, 5, 4, 6, 5, 6] 0
4084 [6, 5, 4, 3, 1, 0, 6, 5, 4, 6, 5] 0
4085 [6, 5, 4, 3, 1, 0, 6, 5, 4, 6] 0
4086 [6, 5, 4, 3, 1, 0, 6, 5, 4, 5] 0
4087 [6, 5, 4, 3, 1, 0, 6, 5, 4] 0
4088 [6, 5, 4, 3, 1, 0, 6, 5, 1, 6] 0
4089 [6, 5, 4, 3, 1, 0, 6, 5, 1] 0
4090 [6, 5, 4, 3, 1, 0, 6, 5, 6] 0
4091 [6, 5, 4, 3, 1, 0, 6, 5] 0
4092 [6, 5, 4, 3, 1, 0, 6, 4, 1] 0
4093 [6, 5, 4, 3, 1, 0, 6, 4] 0
4094 [6, 5, 4, 3, 1, 0, 6, 1] 0
4095 [6, 5, 4, 3, 1, 0, 6] 0
4096 [6, 5, 4, 3, 1, 0, 5, 4, 1, 5] 0
4097 [6, 5, 4, 3, 1, 0, 5, 4, 1] 0
4098 [6, 5, 4, 3, 1, 0, 5, 4, 5] 0
4099 [6, 5, 4, 3, 1, 0, 5, 4] 0
4100 [6, 5, 4, 3, 1, 0, 5, 1] 0
4101 [6, 5, 4, 3, 1, 0, 5] 0
4102 [6, 5, 4, 3, 1, 0, 4, 1] 0
4103 [6, 5, 4, 3, 1, 0, 4] 0
4104 [6, 5, 4, 3, 1, 0, 1] 0
4105 [6, 5, 4, 3, 1, 0] 0
4106 [6, 5, 4, 3, 1, 6, 5, 4, 6, 5, 6] 0
4107 [6, 5, 4, 3, 1, 6, 5, 4, 6, 5] 0
4108 [6, 5, 4, 3, 1, 6, 5, 4, 6] 0
4109 [6, 5, 4, 3, 1, 6, 5, 4, 5] 0
4110 [6, 5, 4, 3, 1, 6, 5, 4] 0
4111 [6, 5, 4, 3, 1, 6, 5, 6] 0
4112 [6, 5, 4, 3, 1, 6, 5] 0
4113 [6, 5, 4, 3, 1, 6, 4] 0
4114 [6, 5, 4, 3, 1, 6] 0
4115 [6, 5, 4, 3, 1, 5, 4, 5] 0
4116 [6, 5, 4, 3, 1, 5, 4] 0
4117 [6, 5, 4, 3, 1, 5] 0
4118 [6, 5, 4, 3, 1, 4] 0
4119 [6, 5, 4, 3, 1] 0
4120 [6, 5, 4, 3, 0, 6, 5, 4, 6, 5, 6] 0
4121 [6, 5, 4, 3, 0, 6, 5, 4, 6, 5] 0
4122 [6, 5, 4, 3, 0, 6, 5, 4, 6] 0
4123 [6, 5, 4, 3, 0, 6, 5, 4, 5] 0
4124 [6, 5, 4, 3, 0, 6, 5, 4] 0
4125 [6, 5, 4, 3, 0, 6, 5, 6] 0
4126 [6, 5, 4, 3, 0, 6, 5] 0
4127 [6, 5, 4, 3, 0, 6, 4] 0
4128 [6, 5, 4, 3, 0, 6] 0
4129 [6, 5, 4, 3, 0, 5, 4, 5] 0
4130 [6, 5, 4, 3, 0, 5, 4] 0
4131 [6, 5, 4, 3, 0, 5] 0
4132 [6, 5, 4, 3, 0, 4] 0
4133 [6, 5, 4, 3, 0] 0
4134 [6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
4135 [6, 5, 4, 3, 6, 5, 4, 6, 5] 0
4136 [6, 5, 4, 3, 6, 5, 4, 6] 0
4137 [6, 5, 4, 3, 6, 5, 4, 5] 0
4138 [6, 5, 4, 3, 6, 5, 4] 0
4139 [6, 5, 4, 3, 6, 5, 6] 0
4140 [6, 5, 4, 3, 6, 5] 0
4141 [6, 5, 4, 3, 6, 4] 0
4142 [6, 5, 4, 3, 6] 0
4143 [6, 5, 4, 3, 5, 4, 5] 0
4144 [6, 5, 4, 3, 5, 4] 0
4145 [6, 5, 4, 3, 5] 0
4146 [6, 5, 4, 3, 4] 0
4147 [6, 5, 4, 3] 0
4148 [6, 5, 4, 2, 1, 0, 6, 5, 2, 1, 6, 2] 0
4149 [6, 5, 4, 2, 1, 0, 6, 5, 2, 1, 6] 0
4150 [6, 5, 4, 2, 1, 0, 6, 5, 2, 1, 2] 0
4151 [6, 5, 4, 2, 1, 0, 6, 5, 2, 1] 0
4152 [6, 5, 4, 2, 1, 0, 6, 5, 2, 6] 0
4153 [6, 5, 4, 2, 1, 0, 6, 5, 2] 0
4154 [6, 5, 4, 2, 1, 0, 6, 5, 1, 6] 0
4155 [6, 5, 4, 2, 1, 0, 6, 5, 1] 0
4156 [6, 5, 4, 2, 1, 0, 6, 5, 6] 0
4157 [6, 5, 4, 2, 1, 0, 6, 5] 0
4158 [6, 5, 4, 2, 1, 0, 6, 2, 1, 2] 0
4159 [6, 5, 4, 2, 1, 0, 6, 2, 1] 0
4160 [6, 5, 4, 2, 1, 0, 6, 2] 0
4161 [6, 5, 4, 2, 1, 0, 6, 1] 0
4162 [6, 5, 4, 2, 1, 0, 6] 0
4163 [6, 5, 4, 2, 1, 0, 5, 2, 1, 2] 0
4164 [6, 5, 4, 2, 1, 0, 5, 2, 1] 0
4165 [6, 5, 4, 2, 1, 0, 5, 2] 0
4166 [6, 5, 4, 2, 1, 0, 5, 1] 0
4167 [6, 5, 4, 2, 1, 0, 5] 0
4168 [6, 5, 4, 2, 1, 0, 2, 1, 2] 0
4169 [6, 5, 4, 2, 1, 0, 2, 1] 0
4170 [6, 5, 4, 2, 1, 0, 2] 0
4171 [6, 5, 4, 2, 1, 0, 1] 0
4172 [6, 5, 4, 2, 1, 0] 0
4173 [6, 5, 4, 2, 1, 6, 5, 2, 6] 0
4174 [6, 5, 4, 2, 1, 6, 5, 2] 0
4175 [6, 5, 4, 2, 1, 6, 5, 6] 0
4176 [6, 5, 4, 2, 1, 6, 5] 0
4177 [6, 5, 4, 2, 1, 6, 2] 0
4178 [6, 5, 4, 2, 1, 6] 0
4179 [6, 5, 4, 2, 1, 5, 2] 0
4180 [6, 5, 4, 2, 1, 5] 0
4181 [6, 5, 4, 2, 1, 2] 0
4182 [6, 5, 4, 2, 1] 0
4183 [6, 5, 4, 2, 0, 6, 5, 6] 0
4184 [6, 5, 4, 2, 0, 6, 5] 0
4185 [6, 5, 4, 2, 0, 6] 0
4186 [6, 5, 4, 2, 0, 5] 0
4187 [6, 5, 4, 2, 0] 0
4188 [6, 5, 4, 2, 6, 5, 6] 0
4189 [6, 5, 4, 2, 6, 5] 0
4190 [6, 5, 4, 2, 6] 0
4191 [6, 5, 4, 2, 5] 0
4192 [6, 5, 4, 2] 0
4193 [6, 5, 4, 1, 0, 6, 5, 1, 6] 0
4194 [6, 5, 4, 1, 0, 6, 5, 1] 0
4195 [6, 5, 4, 1, 0, 6, 5, 6] 0
4196 [6, 5, 4, 1, 0, 6, 5] 0
4197 [6, 5, 4, 1, 0, 6, 1] 0
4198 [6, 5, 4, 1, 0, 6] 0
4199 [6, 5, 4, 1, 0, 5, 1] 0
4200 [6, 5, 4, 1, 0, 5] 0
4201 [6, 5, 4, 1, 0, 1] 0
4202 [6, 5, 4, 1, 0] 0
4203 [6, 5, 4, 1, 6, 5, 6] 0
4204 [6, 5, 4, 1, 6, 5] 0
4205 [6, 5, 4, 1, 6] 0
4206 [6, 5, 4, 1, 5] 0
4207 [6, 5, 4, 1] 0
4208 [6, 5, 4, 0, 6, 5, 6] 0
4209 [6, 5, 4, 0, 6, 5] 0
4210 [6, 5, 4, 0, 6] 0
4211 [6, 5, 4, 0, 5] 0
4212 [6, 5, 4, 0] 0
4213 [6, 5, 4, 6, 5, 6] 0
4214 [6, 5, 4, 6, 5] 0
4215 [6, 5, 4, 6] 0
4216 [6, 5, 4, 5] 0
4217 [6, 5, 4] 0
4218 [6, 5, 3, 2, 1, 0, 6, 3, 2, 1, 3, 2, 3] 0
4219 [6, 5, 3, 2, 1, 0, 6, 3, 2, 1, 3, 2] 0
4220 [6, 5, 3, 2, 1, 0, 6, 3, 2, 1, 3] 0
4221 [6, 5, 3, 2, 1, 0, 6, 3, 2, 1, 2] 0
4222 [6, 5, 3, 2, 1, 0, 6, 3, 2, 1] 0
4223 [6, 5, 3, 2, 1, 0, 6, 3, 2, 3] 0
4224 [6, 5, 3, 2, 1, 0, 6, 3, 2] 0
4225 [6, 5, 3, 2, 1, 0, 6, 3, 1] 0
4226 [6, 5, 3, 2, 1, 0, 6, 3] 0
4227 [6, 5, 3, 2, 1, 0, 6, 2, 1, 2] 0
4228 [6, 5, 3, 2, 1, 0, 6, 2, 1] 0
4229 [6, 5, 3, 2, 1, 0, 6, 2] 0
4230 [6, 5, 3, 2, 1, 0, 6, 1] 0
4231 [6, 5, 3, 2, 1, 0, 6] 0
4232 [6, 5, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
4233 [6, 5, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
4234 [6, 5, 3, 2, 1, 0, 3, 2, 1, 3] 0
4235 [6, 5, 3, 2, 1, 0, 3, 2, 1, 2] 0
4236 [6, 5, 3, 2, 1, 0, 3, 2, 1] 0
4237 [6, 5, 3, 2, 1, 0, 3, 2, 3] 0
4238 [6, 5, 3, 2, 1, 0, 3, 2] 0
4239 [6, 5, 3, 2, 1, 0, 3, 1] 0
4240 [6, 5, 3, 2, 1, 0, 3] 0
4241 [6, 5, 3, 2, 1, 0, 2, 1, 2] 0
4242 [6, 5, 3, 2, 1, 0, 2, 1] 0
4243 [6, 5, 3, 2, 1, 0, 2] 0
4244 [6, 5, 3, 2, 1, 0, 1] 0
4245 [6, 5, 3, 2, 1, 0] 0
4246 [6, 5, 3, 2, 1, 6, 3, 2, 3] 0
4247 [6, 5, 3, 2, 1, 6, 3, 2] 0
4248 [6, 5, 3, 2, 1, 6, 3] 0
4249 [6, 5, 3, 2, 1, 6, 2] 0
4250 [6, 5, 3, 2, 1, 6] 0
4251 [6, 5, 3, 2, 1, 3, 2, 3] 0
4252 [6, 5, 3, 2, 1, 3, 2] 0
4253 [6, 5, 3, 2, 1, 3] 0
4254 [6, 5, 3, 2, 1, 2] 0
4255 [6, 5, 3, 2, 1] 0
4256 [6, 5, 3, 2, 0, 6, 3] 0
4257 [6, 5, 3, 2, 0, 6] 0
4258 [6, 5, 3, 2, 0, 3] 0
4259 [6, 5, 3, 2, 0] 0
4260 [6, 5, 3, 2, 6, 3] 0
4261 [6, 5, 3, 2, 6] 0
4262 [6, 5, 3, 2, 3] 0
4263 [6, 5, 3, 2] 0
4264 [6, 5, 3, 1, 0, 6, 1] 0
4265 [6, 5, 3, 1, 0, 6] 0
4266 [6, 5, 3, 1, 0, 1] 0
4267 [6, 5, 3, 1, 0] 0
4268 [6, 5, 3, 1, 6] 0
4269 [6, 5, 3, 1] 0
4270 [6, 5, 3, 0, 6] 0
4271 [6, 5, 3, 0] 0
4272 [6, 5, 3, 6] 0
4273 [6, 5, 3] 0
4274 [6, 5, 2, 1, 0, 6, 2, 1, 2] 0
4275 [6, 5, 2, 1, 0, 6, 2, 1] 0
4276 [6, 5, 2, 1, 0, 6, 2] 0
4277 [6, 5, 2, 1, 0, 6, 1] 0
4278 [6, 5, 2, 1, 0, 6] 0
4279 [6, 5, 2, 1, 0, 2, 1, 2] 0
4280 [6, 5, 2, 1, 0, 2, 1] 0
4281 [6, 5, 2, 1, 0, 2] 0
4282 [6, 5, 2, 1, 0, 1] 0
4283 [6, 5, 2, 1, 0] 0
4284 [6, 5, 2, 1, 6, 2] 0
4285 [6, 5, 2, 1, 6] 0
4286 [6, 5, 2, 1, 2] 0
4287 [6, 5, 2, 1] 0
4288 [6, 5, 2, 0, 6] 0
4289 [6, 5, 2, 0] 0
4290 [6, 5, 2, 6] 0
4291 [6, 5, 2] 0
4292 [6, 5, 1, 0, 6, 1] 0
4293 [6, 5, 1, 0, 6] 0
4294 [6, 5, 1, 0, 1] 0
4295 [6, 5, 1, 0] 0
4296 [6, 5, 1, 6] 0
4297 [6, 5, 1] 0
4298 [6, 5, 0, 6] 0
4299 [6, 5, 0] 0
4300 [6, 5, 6] 0
4301 [6, 5] 0
4302 [6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
4303 [6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
4304 [6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4] 0
4305 [6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 3] 0
4306 [6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2] 0
4307 [6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 4] 0
4308 [6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3] 0
4309 [6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 2] 0
4310 [6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4] 0
4311 [6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2, 3] 0
4312 [6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2] 0
4313 [6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3] 0
4314 [6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 2] 0
4315 [6, 4, 3, 2, 1, 0, 4, 3, 2, 1] 0
4316 [6, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3, 4] 0
4317 [6, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3] 0
4318 [6, 4, 3, 2, 1, 0, 4, 3, 2, 4] 0
4319 [6, 4, 3, 2, 1, 0, 4, 3, 2, 3] 0
4320 [6, 4, 3, 2, 1, 0, 4, 3, 2] 0
4321 [6, 4, 3, 2, 1, 0, 4, 3, 1, 4] 0
4322 [6, 4, 3, 2, 1, 0, 4, 3, 1] 0
4323 [6, 4, 3, 2, 1, 0, 4, 3, 4] 0
4324 [6, 4, 3, 2, 1, 0, 4, 3] 0
4325 [6, 4, 3, 2, 1, 0, 4, 2, 1, 2] 0
4326 [6, 4, 3, 2, 1, 0, 4, 2, 1] 0
4327 [6, 4, 3, 2, 1, 0, 4, 2] 0
4328 [6, 4, 3, 2, 1, 0, 4, 1] 0
4329 [6, 4, 3, 2, 1, 0, 4] 0
4330 [6, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
4331 [6, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
4332 [6, 4, 3, 2, 1, 0, 3, 2, 1, 3] 0
4333 [6, 4, 3, 2, 1, 0, 3, 2, 1, 2] 0
4334 [6, 4, 3, 2, 1, 0, 3, 2, 1] 0
4335 [6, 4, 3, 2, 1, 0, 3, 2, 3] 0
4336 [6, 4, 3, 2, 1, 0, 3, 2] 0
4337 [6, 4, 3, 2, 1, 0, 3, 1] 0
4338 [6, 4, 3, 2, 1, 0, 3] 0
4339 [6, 4, 3, 2, 1, 0, 2, 1, 2] 0
4340 [6, 4, 3, 2, 1, 0, 2, 1] 0
4341 [6, 4, 3, 2, 1, 0, 2] 0
4342 [6, 4, 3, 2, 1, 0, 1] 0
4343 [6, 4, 3, 2, 1, 0] 0
4344 [6, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
4345 [6, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
4346 [6, 4, 3, 2, 1, 4, 3, 2, 4] 0
4347 [6, 4, 3, 2, 1, 4, 3, 2, 3] 0
4348 [6, 4, 3, 2, 1, 4, 3, 2] 0
4349 [6, 4, 3, 2, 1, 4, 3, 4] 0
4350 [6, 4, 3, 2, 1, 4, 3] 0
4351 [6, 4, 3, 2, 1, 4, 2] 0
4352 [6, 4, 3, 2, 1, 4] 0
4353 [6, 4, 3, 2, 1, 3, 2, 3] 0
4354 [6, 4, 3, 2, 1, 3, 2] 0
4355 [6, 4, 3, 2, 1, 3] 0
4356 [6, 4, 3, 2, 1, 2] 0
4357 [6, 4, 3, 2, 1] 0
4358 [6, 4, 3, 2, 0, 4, 3, 4] 0
4359 [6, 4, 3, 2, 0, 4, 3] 0
4360 [6, 4, 3, 2, 0, 4] 0
4361 [6, 4, 3, 2, 0, 3] 0
4362 [6, 4, 3, 2, 0] 0
4363 [6, 4, 3, 2, 4, 3, 4] 0
4364 [6, 4, 3, 2, 4, 3] 0
4365 [6, 4, 3, 2, 4] 0
4366 [6, 4, 3, 2, 3] 0
4367 [6, 4, 3, 2] 0
4368 [6, 4, 3, 1, 0, 4, 1] 0
4369 [6, 4, 3, 1, 0, 4] 0
4370 [6, 4, 3, 1, 0, 1] 0
4371 [6, 4, 3, 1, 0] 0
4372 [6, 4, 3, 1, 4] 0
4373 [6, 4, 3, 1] 0
4374 [6, 4, 3, 0, 4] 0
4375 [6, 4, 3, 0] 0
4376 [6, 4, 3, 4] 0
4377 [6, 4, 3] 0
4378 [6, 4, 2, 1, 0, 2, 1, 2] 0
4379 [6, 4, 2, 1, 0, 2, 1] 0
4380 [6, 4, 2, 1, 0, 2] 0
4381 [6, 4, 2, 1, 0, 1] 0
4382 [6, 4, 2, 1, 0] 0
4383 [6, 4, 2, 1, 2] 0
4384 [6, 4, 2, 1] 0
4385 [6, 4, 2, 0] 0
4386 [6, 4, 2] 0
4387 [6, 4, 1, 0, 1] 0
4388 [6, 4, 1, 0] 0
4389 [6, 4, 1] 0
4390 [6, 4, 0] 0
4391 [6, 4] 0
4392 [6, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
4393 [6, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
4394 [6, 3, 2, 1, 0, 3, 2, 1, 3] 0
4395 [6, 3, 2, 1, 0, 3, 2, 1, 2] 0
4396 [6, 3, 2, 1, 0, 3, 2, 1] 0
4397 [6, 3, 2, 1, 0, 3, 2, 3] 0
4398 [6, 3, 2, 1, 0, 3, 2] 0
4399 [6, 3, 2, 1, 0, 3, 1] 0
4400 [6, 3, 2, 1, 0, 3] 0
4401 [6, 3, 2, 1, 0, 2, 1, 2] 0
4402 [6, 3, 2, 1, 0, 2, 1] 0
4403 [6, 3, 2, 1, 0, 2] 0
4404 [6, 3, 2, 1, 0, 1] 0
4405 [6, 3, 2, 1, 0] 0
4406 [6, 3, 2, 1, 3, 2, 3] 0
4407 [6, 3, 2, 1, 3, 2] 0
4408 [6, 3, 2, 1, 3] 0
4409 [6, 3, 2, 1, 2] 0
4410 [6, 3, 2, 1] 0
4411 [6, 3, 2, 0, 3] 0
4412 [6, 3, 2, 0] 0
4413 [6, 3, 2, 3] 0
4414 [6, 3, 2] 0
4415 [6, 3, 1, 0, 1] 0
4416 [6, 3, 1, 0] 0
4417 [6, 3, 1] 0
4418 [6, 3, 0] 0
4419 [6, 3] 0
4420 [6, 2, 1, 0, 2, 1, 2] 0
4421 [6, 2, 1, 0, 2, 1] 0
4422 [6, 2, 1, 0, 2] 0
4423 [6, 2, 1, 0, 1] 0
4424 [6, 2, 1, 0] 0
4425 [6, 2, 1, 2] 0
4426 [6, 2, 1] 0
4427 [6, 2, 0] 0
4428 [6, 2] 0
4429 [6, 1, 0, 1] 0
4430 [6, 1, 0] 0
4431 [6, 1] 0
4432 [6, 0] 0
4433 [6] 0
4434 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
4435 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
4436 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] 0
4437 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] 0
4438 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] 0
4439 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] 0
4440 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] 0
4441 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] 0
4442 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5] 0
4443 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] 0
4444 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] 0
4445 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4] 0
4446 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 3] 0
4447 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2] 0
4448 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] 0
4449 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4] 0
4450 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5] 0
4451 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 4] 0
4452 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3] 0
4453 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2, 5] 0
4454 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2] 0
4455 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 5] 0
4456 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4] 0
4457 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2, 3] 0
4458 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2] 0
4459 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3] 0
4460 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 2] 0
4461 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5] 0
4462 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
4463 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
4464 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4] 0
4465 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 3] 0
4466 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2] 0
4467 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 4] 0
4468 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3] 0
4469 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 2] 0
4470 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4] 0
4471 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2, 3] 0
4472 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2] 0
4473 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3] 0
4474 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 2] 0
4475 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1] 0
4476 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
4477 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
4478 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5] 0
4479 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 4] 0
4480 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3] 0
4481 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 5] 0
4482 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4] 0
4483 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 3] 0
4484 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5] 0
4485 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4, 3, 4] 0
4486 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4, 3] 0
4487 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4] 0
4488 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 3] 0
4489 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2] 0
4490 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5, 4, 5] 0
4491 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5, 4] 0
4492 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5] 0
4493 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 4] 0
4494 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1] 0
4495 [5, 4, 3, 2, 1, 0, 5, 4, 3, 5, 4, 5] 0
4496 [5, 4, 3, 2, 1, 0, 5, 4, 3, 5, 4] 0
4497 [5, 4, 3, 2, 1, 0, 5, 4, 3, 5] 0
4498 [5, 4, 3, 2, 1, 0, 5, 4, 3, 4] 0
4499 [5, 4, 3, 2, 1, 0, 5, 4, 3] 0
4500 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 5, 2] 0
4501 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 5] 0
4502 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 2] 0
4503 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1] 0
4504 [5, 4, 3, 2, 1, 0, 5, 4, 2, 5] 0
4505 [5, 4, 3, 2, 1, 0, 5, 4, 2] 0
4506 [5, 4, 3, 2, 1, 0, 5, 4, 1, 5] 0
4507 [5, 4, 3, 2, 1, 0, 5, 4, 1] 0
4508 [5, 4, 3, 2, 1, 0, 5, 4, 5] 0
4509 [5, 4, 3, 2, 1, 0, 5, 4] 0
4510 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3, 2, 3] 0
4511 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3, 2] 0
4512 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3] 0
4513 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 2] 0
4514 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1] 0
4515 [5, 4, 3, 2, 1, 0, 5, 3, 2, 3] 0
4516 [5, 4, 3, 2, 1, 0, 5, 3, 2] 0
4517 [5, 4, 3, 2, 1, 0, 5, 3, 1] 0
4518 [5, 4, 3, 2, 1, 0, 5, 3] 0
4519 [5, 4, 3, 2, 1, 0, 5, 2, 1, 2] 0
4520 [5, 4, 3, 2, 1, 0, 5, 2, 1] 0
4521 [5, 4, 3, 2, 1, 0, 5, 2] 0
4522 [5, 4, 3, 2, 1, 0, 5, 1] 0
4523 [5, 4, 3, 2, 1, 0, 5] 0
4524 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
4525 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
4526 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4] 0
4527 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 3] 0
4528 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2] 0
4529 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 4] 0
4530 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3] 0
4531 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 2] 0
4532 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4] 0
4533 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2, 3] 0
4534 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2] 0
4535 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3] 0
4536 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 2] 0
4537 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1] 0
4538 [5, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3, 4] 0
4539 [5, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3] 0
4540 [5, 4, 3, 2, 1, 0, 4, 3, 2, 4] 0
4541 [5, 4, 3, 2, 1, 0, 4, 3, 2, 3] 0
4542 [5, 4, 3, 2, 1, 0, 4, 3, 2] 0
4543 [5, 4, 3, 2, 1, 0, 4, 3, 1, 4] 0
4544 [5, 4, 3, 2, 1, 0, 4, 3, 1] 0
4545 [5, 4, 3, 2, 1, 0, 4, 3, 4] 0
4546 [5, 4, 3, 2, 1, 0, 4, 3] 0
4547 [5, 4, 3, 2, 1, 0, 4, 2, 1, 2] 0
4548 [5, 4, 3, 2, 1, 0, 4, 2, 1] 0
4549 [5, 4, 3, 2, 1, 0, 4, 2] 0
4550 [5, 4, 3, 2, 1, 0, 4, 1] 0
4551 [5, 4, 3, 2, 1, 0, 4] 0
4552 [5, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
4553 [5, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
4554 [5, 4, 3, 2, 1, 0, 3, 2, 1, 3] 0
4555 [5, 4, 3, 2, 1, 0, 3, 2, 1, 2] 0
4556 [5, 4, 3, 2, 1, 0, 3, 2, 1] 0
4557 [5, 4, 3, 2, 1, 0, 3, 2, 3] 0
4558 [5, 4, 3, 2, 1, 0, 3, 2] 0
4559 [5, 4, 3, 2, 1, 0, 3, 1] 0
4560 [5, 4, 3, 2, 1, 0, 3] 0
4561 [5, 4, 3, 2, 1, 0, 2, 1, 2] 0
4562 [5, 4, 3, 2, 1, 0, 2, 1] 0
4563 [5, 4, 3, 2, 1, 0, 2] 0
4564 [5, 4, 3, 2, 1, 0, 1] 0
4565 [5, 4, 3, 2, 1, 0] 0
4566 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
4567 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
4568 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] 0
4569 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] 0
4570 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] 0
4571 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] 0
4572 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] 0
4573 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] 0
4574 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5] 0
4575 [5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] 0
4576 [5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] 0
4577 [5, 4, 3, 2, 1, 5, 4, 3, 2, 4] 0
4578 [5, 4, 3, 2, 1, 5, 4, 3, 2, 3] 0
4579 [5, 4, 3, 2, 1, 5, 4, 3, 2] 0
4580 [5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] 0
4581 [5, 4, 3, 2, 1, 5, 4, 3, 5, 4] 0
4582 [5, 4, 3, 2, 1, 5, 4, 3, 5] 0
4583 [5, 4, 3, 2, 1, 5, 4, 3, 4] 0
4584 [5, 4, 3, 2, 1, 5, 4, 3] 0
4585 [5, 4, 3, 2, 1, 5, 4, 2, 5] 0
4586 [5, 4, 3, 2, 1, 5, 4, 2] 0
4587 [5, 4, 3, 2, 1, 5, 4, 5] 0
4588 [5, 4, 3, 2, 1, 5, 4] 0
4589 [5, 4, 3, 2, 1, 5, 3, 2, 3] 0
4590 [5, 4, 3, 2, 1, 5, 3, 2] 0
4591 [5, 4, 3, 2, 1, 5, 3] 0
4592 [5, 4, 3, 2, 1, 5, 2] 0
4593 [5, 4, 3, 2, 1, 5] 0
4594 [5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
4595 [5, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
4596 [5, 4, 3, 2, 1, 4, 3, 2, 4] 0
4597 [5, 4, 3, 2, 1, 4, 3, 2, 3] 0
4598 [5, 4, 3, 2, 1, 4, 3, 2] 0
4599 [5, 4, 3, 2, 1, 4, 3, 4] 0
4600 [5, 4, 3, 2, 1, 4, 3] 0
4601 [5, 4, 3, 2, 1, 4, 2] 0
4602 [5, 4, 3, 2, 1, 4] 0
4603 [5, 4, 3, 2, 1, 3, 2, 3] 0
4604 [5, 4, 3, 2, 1, 3, 2] 0
4605 [5, 4, 3, 2, 1, 3] 0
4606 [5, 4, 3, 2, 1, 2] 0
4607 [5, 4, 3, 2, 1] 0
4608 [5, 4, 3, 2, 0, 5, 4, 3, 5, 4, 5] 0
4609 [5, 4, 3, 2, 0, 5, 4, 3, 5, 4] 0
4610 [5, 4, 3, 2, 0, 5, 4, 3, 5] 0
4611 [5, 4, 3, 2, 0, 5, 4, 3, 4] 0
4612 [5, 4, 3, 2, 0, 5, 4, 3] 0
4613 [5, 4, 3, 2, 0, 5, 4, 5] 0
4614 [5, 4, 3, 2, 0, 5, 4] 0
4615 [5, 4, 3, 2, 0, 5, 3] 0
4616 [5, 4, 3, 2, 0, 5] 0
4617 [5, 4, 3, 2, 0, 4, 3, 4] 0
4618 [5, 4, 3, 2, 0, 4, 3] 0
4619 [5, 4, 3, 2, 0, 4] 0
4620 [5, 4, 3, 2, 0, 3] 0
4621 [5, 4, 3, 2, 0] 0
4622 [5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
4623 [5, 4, 3, 2, 5, 4, 3, 5, 4] 0
4624 [5, 4, 3, 2, 5, 4, 3, 5] 0
4625 [5, 4, 3, 2, 5, 4, 3, 4] 0
4626 [5, 4, 3, 2, 5, 4, 3] 0
4627 [5, 4, 3, 2, 5, 4, 5] 0
4628 [5, 4, 3, 2, 5, 4] 0
4629 [5, 4, 3, 2, 5, 3] 0
4630 [5, 4, 3, 2, 5] 0
4631 [5, 4, 3, 2, 4, 3, 4] 0
4632 [5, 4, 3, 2, 4, 3] 0
4633 [5, 4, 3, 2, 4] 0
4634 [5, 4, 3, 2, 3] 0
4635 [5, 4, 3, 2] 0
4636 [5, 4, 3, 1, 0, 5, 4, 1, 5] 0
4637 [5, 4, 3, 1, 0, 5, 4, 1] 0
4638 [5, 4, 3, 1, 0, 5, 4, 5] 0
4639 [5, 4, 3, 1, 0, 5, 4] 0
4640 [5, 4, 3, 1, 0, 5, 1] 0
4641 [5, 4, 3, 1, 0, 5] 0
4642 [5, 4, 3, 1, 0, 4, 1] 0
4643 [5, 4, 3, 1, 0, 4] 0
4644 [5, 4, 3, 1, 0, 1] 0
4645 [5, 4, 3, 1, 0] 0
4646 [5, 4, 3, 1, 5, 4, 5] 0
4647 [5, 4, 3, 1, 5, 4] 0
4648 [5, 4, 3, 1, 5] 0
4649 [5, 4, 3, 1, 4] 0
4650 [5, 4, 3, 1] 0
4651 [5, 4, 3, 0, 5, 4, 5] 0
4652 [5, 4, 3, 0, 5, 4] 0
4653 [5, 4, 3, 0, 5] 0
4654 [5, 4, 3, 0, 4] 0
4655 [5, 4, 3, 0] 0
4656 [5, 4, 3, 5, 4, 5] 0
4657 [5, 4, 3, 5, 4] 0
4658 [5, 4, 3, 5] 0
4659 [5, 4, 3, 4] 0
4660 [5, 4, 3] 0
4661 [5, 4, 2, 1, 0, 5, 2, 1, 2] 0
4662 [5, 4, 2, 1, 0, 5, 2, 1] 0
4663 [5, 4, 2, 1, 0, 5, 2] 0
4664 [5, 4, 2, 1, 0, 5, 1] 0
4665 [5, 4, 2, 1, 0, 5] 0
4666 [5, 4, 2, 1, 0, 2, 1, 2] 0
4667 [5, 4, 2, 1, 0, 2, 1] 0
4668 [5, 4, 2, 1, 0, 2] 0
4669 [5, 4, 2, 1, 0, 1] 0
4670 [5, 4, 2, 1, 0] 0
4671 [5, 4, 2, 1, 5, 2] 0
4672 [5, 4, 2, 1, 5] 0
4673 [5, 4, 2, 1, 2] 0
4674 [5, 4, 2, 1] 0
4675 [5, 4, 2, 0, 5] 0
4676 [5, 4, 2, 0] 0
4677 [5, 4, 2, 5] 0
4678 [5, 4, 2] 0
4679 [5, 4, 1, 0, 5, 1] 0
4680 [5, 4, 1, 0, 5] 0
4681 [5, 4, 1, 0, 1] 0
4682 [5, 4, 1, 0] 0
4683 [5, 4, 1, 5] 0
4684 [5, 4, 1] 0
4685 [5, 4, 0, 5] 0
4686 [5, 4, 0] 0
4687 [5, 4, 5] 0
4688 [5, 4] 0
4689 [5, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
4690 [5, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
4691 [5, 3, 2, 1, 0, 3, 2, 1, 3] 0
4692 [5, 3, 2, 1, 0, 3, 2, 1, 2] 0
4693 [5, 3, 2, 1, 0, 3, 2, 1] 0
4694 [5, 3, 2, 1, 0, 3, 2, 3] 0
4695 [5, 3, 2, 1, 0, 3, 2] 0
4696 [5, 3, 2, 1, 0, 3, 1] 0
4697 [5, 3, 2, 1, 0, 3] 0
4698 [5, 3, 2, 1, 0, 2, 1, 2] 0
4699 [5, 3, 2, 1, 0, 2, 1] 0
4700 [5, 3, 2, 1, 0, 2] 0
4701 [5, 3, 2, 1, 0, 1] 0
4702 [5, 3, 2, 1, 0] 0
4703 [5, 3, 2, 1, 3, 2, 3] 0
4704 [5, 3, 2, 1, 3, 2] 0
4705 [5, 3, 2, 1, 3] 0
4706 [5, 3, 2, 1, 2] 0
4707 [5, 3, 2, 1] 0
4708 [5, 3, 2, 0, 3] 0
4709 [5, 3, 2, 0] 0
4710 [5, 3, 2, 3] 0
4711 [5, 3, 2] 0
4712 [5, 3, 1, 0, 1] 0
4713 [5, 3, 1, 0] 0
4714 [5, 3, 1] 0
4715 [5, 3, 0] 0
4716 [5, 3] 0
4717 [5, 2, 1, 0, 2, 1, 2] 0
4718 [5, 2, 1, 0, 2, 1] 0
4719 [5, 2, 1, 0, 2] 0
4720 [5, 2, 1, 0, 1] 0
4721 [5, 2, 1, 0] 0
4722 [5, 2, 1, 2] 0
4723 [5, 2, 1] 0
4724 [5, 2, 0] 0
4725 [5, 2] 0
4726 [5, 1, 0, 1] 0
4727 [5, 1, 0] 0
4728 [5, 1] 0
4729 [5, 0] 0
4730 [5] 0
4731 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
4732 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
4733 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4] 0
4734 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 3] 0
4735 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2] 0
4736 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 4] 0
4737 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3] 0
4738 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 2] 0
4739 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4] 0
4740 [4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2, 3] 0
4741 [4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2] 0
4742 [4, 3, 2, 1, 0, 4, 3, 2, 1, 3] 0
4743 [4, 3, 2, 1, 0, 4, 3, 2, 1, 2] 0
4744 [4, 3, 2, 1, 0, 4, 3, 2, 1] 0
4745 [4, 3, 2, 1, 0, 4, 3, 2, 4, 3, 4] 0
4746 [4, 3, 2, 1, 0, 4, 3, 2, 4, 3] 0
4747 [4, 3, 2, 1, 0, 4, 3, 2, 4] 0
4748 [4, 3, 2, 1, 0, 4, 3, 2, 3] 0
4749 [4, 3, 2, 1, 0, 4, 3, 2] 0
4750 [4, 3, 2, 1, 0, 4, 3, 1, 4] 0
4751 [4, 3, 2, 1, 0, 4, 3, 1] 0
4752 [4, 3, 2, 1, 0, 4, 3, 4] 0
4753 [4, 3, 2, 1, 0, 4, 3] 0
4754 [4, 3, 2, 1, 0, 4, 2, 1, 2] 0
4755 [4, 3, 2, 1, 0, 4, 2, 1] 0
4756 [4, 3, 2, 1, 0, 4, 2] 0
4757 [4, 3, 2, 1, 0, 4, 1] 0
4758 [4, 3, 2, 1, 0, 4] 0
4759 [4, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
4760 [4, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
4761 [4, 3, 2, 1, 0, 3, 2, 1, 3] 0
4762 [4, 3, 2, 1, 0, 3, 2, 1, 2] 0
4763 [4, 3, 2, 1, 0, 3, 2, 1] 0
4764 [4, 3, 2, 1, 0, 3, 2, 3] 0
4765 [4, 3, 2, 1, 0, 3, 2] 0
4766 [4, 3, 2, 1, 0, 3, 1] 0
4767 [4, 3, 2, 1, 0, 3] 0
4768 [4, 3, 2, 1, 0, 2, 1, 2] 0
4769 [4, 3, 2, 1, 0, 2, 1] 0
4770 [4, 3, 2, 1, 0, 2] 0
4771 [4, 3, 2, 1, 0, 1] 0
4772 [4, 3, 2, 1, 0] 0
4773 [4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
4774 [4, 3, 2, 1, 4, 3, 2, 4, 3] 0
4775 [4, 3, 2, 1, 4, 3, 2, 4] 0
4776 [4, 3, 2, 1, 4, 3, 2, 3] 0
4777 [4, 3, 2, 1, 4, 3, 2] 0
4778 [4, 3, 2, 1, 4, 3, 4] 0
4779 [4, 3, 2, 1, 4, 3] 0
4780 [4, 3, 2, 1, 4, 2] 0
4781 [4, 3, 2, 1, 4] 0
4782 [4, 3, 2, 1, 3, 2, 3] 0
4783 [4, 3, 2, 1, 3, 2] 0
4784 [4, 3, 2, 1, 3] 0
4785 [4, 3, 2, 1, 2] 0
4786 [4, 3, 2, 1] 0
4787 [4, 3, 2, 0, 4, 3, 4] 0
4788 [4, 3, 2, 0, 4, 3] 0
4789 [4, 3, 2, 0, 4] 0
4790 [4, 3, 2, 0, 3] 0
4791 [4, 3, 2, 0] 0
4792 [4, 3, 2, 4, 3, 4] 0
4793 [4, 3, 2, 4, 3] 0
4794 [4, 3, 2, 4] 0
4795 [4, 3, 2, 3] 0
4796 [4, 3, 2] 0
4797 [4, 3, 1, 0, 4, 1] 0
4798 [4, 3, 1, 0, 4] 0
4799 [4, 3, 1, 0, 1] 0
4800 [4, 3, 1, 0] 0
4801 [4, 3, 1, 4] 0
4802 [4, 3, 1] 0
4803 [4, 3, 0, 4] 0
4804 [4, 3, 0] 0
4805 [4, 3, 4] 0
4806 [4, 3] 0
4807 [4, 2, 1, 0, 2, 1, 2] 0
4808 [4, 2, 1, 0, 2, 1] 0
4809 [4, 2, 1, 0, 2] 0
4810 [4, 2, 1, 0, 1] 0
4811 [4, 2, 1, 0] 0
4812 [4, 2, 1, 2] 0
4813 [4, 2, 1] 0
4814 [4, 2, 0] 0
4815 [4, 2] 0
4816 [4, 1, 0, 1] 0
4817 [4, 1, 0] 0
4818 [4, 1] 0
4819 [4, 0] 0
4820 [4] 0
4821 [3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
4822 [3, 2, 1, 0, 3, 2, 1, 3, 2] 0
4823 [3, 2, 1, 0, 3, 2, 1, 3] 0
4824 [3, 2, 1, 0, 3, 2, 1, 2] 0
4825 [3, 2, 1, 0, 3, 2, 1] 0
4826 [3, 2, 1, 0, 3, 2, 3] 0
4827 [3, 2, 1, 0, 3, 2] 0
4828 [3, 2, 1, 0, 3, 1] 0
4829 [3, 2, 1, 0, 3] 0
4830 [3, 2, 1, 0, 2, 1, 2] 0
4831 [3, 2, 1, 0, 2, 1] 0
4832 [3, 2, 1, 0, 2] 0
4833 [3, 2, 1, 0, 1] 0
4834 [3, 2, 1, 0] 0
4835 [3, 2, 1, 3, 2, 3] 0
4836 [3, 2, 1, 3, 2] 0
4837 [3, 2, 1, 3] 0
4838 [3, 2, 1, 2] 0
4839 [3, 2, 1] 0
4840 [3, 2, 0, 3] 0
4841 [3, 2, 0] 0
4842 [3, 2, 3] 0
4843 [3, 2] 0
4844 [3, 1, 0, 1] 0
4845 [3, 1, 0] 0
4846 [3, 1] 0
4847 [3, 0] 0
4848 [3] 0
4849 [2, 1, 0, 2, 1, 2] 0
4850 [2, 1, 0, 2, 1] 0
4851 [2, 1, 0, 2] 0
4852 [2, 1, 0, 1] 0
4853 [2, 1, 0] 0
4854 [2, 1, 2] 0
4855 [2, 1] 0
4856 [2, 0] 0
4857 [2] 0
4858 [1, 0, 1] 0
4859 [1, 0] 0
4860 [1] 0
4861 [0] 0
4862 [] 0
### reloading attached file domination5.py modified at 13:18:45 ###
### reloading attached file domination5.py modified at 13:19:09 ###
sage: A=CartanMatrix(['D',5])
....: c=[4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,kinv,k+[c[0]],kinv+[c[0]]]).dimensio
....: n()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
2 [3, 2, 1, 0, 3, 2, 1, 3, 2] 0
3 [3, 2, 1, 0, 3, 2, 1, 3] 0
4 [3, 2, 1, 0, 3, 2, 1, 2] 0
5 [3, 2, 1, 0, 3, 2, 1] 0
6 [3, 2, 1, 0, 3, 2, 3] 0
7 [3, 2, 1, 0, 3, 2] 0
8 [3, 2, 1, 0, 3, 1] 0
9 [3, 2, 1, 0, 3] 0
10 [3, 2, 1, 0, 2, 1, 2] 0
11 [3, 2, 1, 0, 2, 1] 0
12 [3, 2, 1, 0, 2] 0
13 [3, 2, 1, 0, 1] 0
14 [3, 2, 1, 0] 0
15 [3, 2, 1, 3, 2, 3] 0
16 [3, 2, 1, 3, 2] 0
17 [3, 2, 1, 3] 0
18 [3, 2, 1, 2] 0
19 [3, 2, 1] 0
20 [3, 2, 0, 3] 0
21 [3, 2, 0] 0
22 [3, 2, 3] 0
23 [3, 2] 0
24 [3, 1, 0, 1] 0
25 [3, 1, 0] 0
26 [3, 1] 0
27 [3, 0] 0
28 [3] 0
29 [2, 1, 0, 2, 1, 2] 0
30 [2, 1, 0, 2, 1] 0
31 [2, 1, 0, 2] 0
32 [2, 1, 0, 1] 0
33 [2, 1, 0] 0
34 [2, 1, 2] 0
35 [2, 1] 0
36 [2, 0] 0
37 [2] 0
38 [1, 0, 1] 0
39 [1, 0] 0
40 [1] 0
41 [0] 0
42 [] 0
sage: A=CartanMatrix(['D',4])
....: c=[3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,kinv,k+[c[0]],kinv+[c[0]]]).dimensio
....: n()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [2, 1, 0, 2, 1, 2] 1
Failure!
sage: A=CartanMatrix(['D',4])
....: c=[0,1,2,3]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,kinv,k+[c[0]],kinv+[c[0]]]).dimensio
....: n()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [1, 2, 3, 1, 2, 3] 0
2 [1, 2, 3, 1, 2] 1
Failure!
sage: A=CartanMatrix(['D',5])
....: c=[0,1,2,3,4]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,kinv,k+[c[0]],kinv+[c[0]]]).dimensio
....: n()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
2 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 1
Failure!
sage: A=CartanMatrix(['D',5])
....: c=[4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,kinv,k+[c[0]],kinv+[c[0]]]).dimensio
....: n()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
2 [3, 2, 1, 0, 3, 2, 1, 3, 2] 0
3 [3, 2, 1, 0, 3, 2, 1, 3] 0
4 [3, 2, 1, 0, 3, 2, 1, 2] 0
5 [3, 2, 1, 0, 3, 2, 1] 0
6 [3, 2, 1, 0, 3, 2, 3] 0
7 [3, 2, 1, 0, 3, 2] 0
8 [3, 2, 1, 0, 3, 1] 0
9 [3, 2, 1, 0, 3] 0
10 [3, 2, 1, 0, 2, 1, 2] 0
11 [3, 2, 1, 0, 2, 1] 0
12 [3, 2, 1, 0, 2] 0
13 [3, 2, 1, 0, 1] 0
14 [3, 2, 1, 0] 0
15 [3, 2, 1, 3, 2, 3] 0
16 [3, 2, 1, 3, 2] 0
17 [3, 2, 1, 3] 0
18 [3, 2, 1, 2] 0
19 [3, 2, 1] 0
20 [3, 2, 0, 3] 0
21 [3, 2, 0] 0
22 [3, 2, 3] 0
23 [3, 2] 0
24 [3, 1, 0, 1] 0
25 [3, 1, 0] 0
26 [3, 1] 0
27 [3, 0] 0
28 [3] 0
29 [2, 1, 0, 2, 1, 2] 0
30 [2, 1, 0, 2, 1] 0
31 [2, 1, 0, 2] 0
32 [2, 1, 0, 1] 0
33 [2, 1, 0] 0
34 [2, 1, 2] 0
35 [2, 1] 0
36 [2, 0] 0
37 [2] 0
38 [1, 0, 1] 0
39 [1, 0] 0
40 [1] 0
41 [0] 0
42 [] 0
sage: A=CartanMatrix(['D',4])
....: c=[0,1,2,3]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,kinv,k+[c[0]],kinv+[c[0]]]).dimensio
....: n()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [1, 2, 3, 1, 2, 3] 0
2 [1, 2, 3, 1, 2] 1
Failure!
sage: A=CartanMatrix(['D',4])
....: c=[3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,kinv,k+[c[0]],kinv+[c[0]]]).dimensio
....: n()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [2, 1, 0, 2, 1, 2] 1
Failure!
sage: A=CartanMatrix(['D',6])
....: c=[5,4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,kinv,k+[c[0]],kinv+[c[0]]]).dimensio
....: n()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 2
Failure!
sage: A=CartanMatrix(['D',6])
....: c=[0,1,2,3,4,5]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,kinv,k+[c[0]],kinv+[c[0]]]).dimensio
....: n()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5] 0
2 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4] 1
Failure!
sage: A=CartanMatrix(['D',7])
....: c=[6,5,4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,kinv,k+[c[0]],kinv+[c[0]]]).dimensio
....: n()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
2 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
3 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] 0
4 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] 0
^[5 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] 0
6 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] 0
7 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] 0
8 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] 0
9 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5] 0
10 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] 0
11 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] 0
12 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4] 0
13 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 3] 0
14 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2] 0
15 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] 0
16 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4] 0
17 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5] 0
18 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 4] 0
19 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3] 0
20 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2, 5] 0
21 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2] 0
22 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 5] 0
23 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4] 0
24 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2, 3] 0
25 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2] 0
26 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3] 0
27 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 2] 0
28 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5] 0
29 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
30 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
31 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4] 0
32 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 3] 0
33 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2] 0
34 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 4] 0
35 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3] 0
36 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 2] 0
37 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4] 0
38 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2, 3] 0
39 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2] 0
40 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3] 0
41 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 2] 0
42 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1] 0
43 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
44 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
45 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5] 0
46 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 4] 0
47 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3] 0
48 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 5] 0
49 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4] 0
50 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 3] 0
51 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5] 0
52 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4, 3, 4] 0
53 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4, 3] 0
54 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4] 0
55 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 3] 0
56 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2] 0
57 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5, 4, 5] 0
58 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5, 4] 0
59 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5] 0
60 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 4] 0
61 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1] 0
62 [5, 4, 3, 2, 1, 0, 5, 4, 3, 5, 4, 5] 0
63 [5, 4, 3, 2, 1, 0, 5, 4, 3, 5, 4] 0
64 [5, 4, 3, 2, 1, 0, 5, 4, 3, 5] 0
65 [5, 4, 3, 2, 1, 0, 5, 4, 3, 4] 0
66 [5, 4, 3, 2, 1, 0, 5, 4, 3] 0
67 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 5, 2] 0
68 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 5] 0
69 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 2] 0
70 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1] 0
71 [5, 4, 3, 2, 1, 0, 5, 4, 2, 5] 0
72 [5, 4, 3, 2, 1, 0, 5, 4, 2] 0
73 [5, 4, 3, 2, 1, 0, 5, 4, 1, 5] 0
74 [5, 4, 3, 2, 1, 0, 5, 4, 1] 0
75 [5, 4, 3, 2, 1, 0, 5, 4, 5] 0
76 [5, 4, 3, 2, 1, 0, 5, 4] 0
77 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3, 2, 3] 0
78 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3, 2] 0
79 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3] 0
80 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 2] 0
81 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1] 0
82 [5, 4, 3, 2, 1, 0, 5, 3, 2, 3] 0
83 [5, 4, 3, 2, 1, 0, 5, 3, 2] 0
84 [5, 4, 3, 2, 1, 0, 5, 3, 1] 0
85 [5, 4, 3, 2, 1, 0, 5, 3] 0
86 [5, 4, 3, 2, 1, 0, 5, 2, 1, 2] 0
87 [5, 4, 3, 2, 1, 0, 5, 2, 1] 0
88 [5, 4, 3, 2, 1, 0, 5, 2] 0
89 [5, 4, 3, 2, 1, 0, 5, 1] 0
90 [5, 4, 3, 2, 1, 0, 5] 0
91 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
92 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
93 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4] 0
94 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 3] 0
95 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2] 0
96 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 4] 0
97 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3] 0
98 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 2] 0
99 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4] 0
100 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2, 3] 0
101 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2] 0
102 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3] 0
103 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 2] 0
104 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1] 0
105 [5, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3, 4] 0
106 [5, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3] 0
107 [5, 4, 3, 2, 1, 0, 4, 3, 2, 4] 0
108 [5, 4, 3, 2, 1, 0, 4, 3, 2, 3] 0
109 [5, 4, 3, 2, 1, 0, 4, 3, 2] 0
110 [5, 4, 3, 2, 1, 0, 4, 3, 1, 4] 0
111 [5, 4, 3, 2, 1, 0, 4, 3, 1] 0
112 [5, 4, 3, 2, 1, 0, 4, 3, 4] 0
113 [5, 4, 3, 2, 1, 0, 4, 3] 0
114 [5, 4, 3, 2, 1, 0, 4, 2, 1, 2] 0
115 [5, 4, 3, 2, 1, 0, 4, 2, 1] 0
116 [5, 4, 3, 2, 1, 0, 4, 2] 0
117 [5, 4, 3, 2, 1, 0, 4, 1] 0
118 [5, 4, 3, 2, 1, 0, 4] 0
119 [5, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
120 [5, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
121 [5, 4, 3, 2, 1, 0, 3, 2, 1, 3] 0
122 [5, 4, 3, 2, 1, 0, 3, 2, 1, 2] 0
123 [5, 4, 3, 2, 1, 0, 3, 2, 1] 0
124 [5, 4, 3, 2, 1, 0, 3, 2, 3] 0
125 [5, 4, 3, 2, 1, 0, 3, 2] 0
126 [5, 4, 3, 2, 1, 0, 3, 1] 0
127 [5, 4, 3, 2, 1, 0, 3] 0
128 [5, 4, 3, 2, 1, 0, 2, 1, 2] 0
129 [5, 4, 3, 2, 1, 0, 2, 1] 0
130 [5, 4, 3, 2, 1, 0, 2] 0
131 [5, 4, 3, 2, 1, 0, 1] 0
132 [5, 4, 3, 2, 1, 0] 0
133 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
134 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
135 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] 0
136 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] 0
137 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] 0
138 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] 0
139 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] 0
140 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] 0
141 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5] 0
142 [5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] 0
143 [5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] 0
144 [5, 4, 3, 2, 1, 5, 4, 3, 2, 4] 0
145 [5, 4, 3, 2, 1, 5, 4, 3, 2, 3] 0
146 [5, 4, 3, 2, 1, 5, 4, 3, 2] 0
147 [5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] 0
148 [5, 4, 3, 2, 1, 5, 4, 3, 5, 4] 0
149 [5, 4, 3, 2, 1, 5, 4, 3, 5] 0
150 [5, 4, 3, 2, 1, 5, 4, 3, 4] 0
151 [5, 4, 3, 2, 1, 5, 4, 3] 0
152 [5, 4, 3, 2, 1, 5, 4, 2, 5] 0
153 [5, 4, 3, 2, 1, 5, 4, 2] 0
154 [5, 4, 3, 2, 1, 5, 4, 5] 0
155 [5, 4, 3, 2, 1, 5, 4] 0
156 [5, 4, 3, 2, 1, 5, 3, 2, 3] 0
157 [5, 4, 3, 2, 1, 5, 3, 2] 0
158 [5, 4, 3, 2, 1, 5, 3] 0
159 [5, 4, 3, 2, 1, 5, 2] 0
160 [5, 4, 3, 2, 1, 5] 0
161 [5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
162 [5, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
163 [5, 4, 3, 2, 1, 4, 3, 2, 4] 0
164 [5, 4, 3, 2, 1, 4, 3, 2, 3] 0
165 [5, 4, 3, 2, 1, 4, 3, 2] 0
166 [5, 4, 3, 2, 1, 4, 3, 4] 0
167 [5, 4, 3, 2, 1, 4, 3] 0
168 [5, 4, 3, 2, 1, 4, 2] 0
169 [5, 4, 3, 2, 1, 4] 0
170 [5, 4, 3, 2, 1, 3, 2, 3] 0
171 [5, 4, 3, 2, 1, 3, 2] 0
172 [5, 4, 3, 2, 1, 3] 0
173 [5, 4, 3, 2, 1, 2] 0
174 [5, 4, 3, 2, 1] 0
175 [5, 4, 3, 2, 0, 5, 4, 3, 5, 4, 5] 0
176 [5, 4, 3, 2, 0, 5, 4, 3, 5, 4] 0
177 [5, 4, 3, 2, 0, 5, 4, 3, 5] 0
178 [5, 4, 3, 2, 0, 5, 4, 3, 4] 0
179 [5, 4, 3, 2, 0, 5, 4, 3] 0
180 [5, 4, 3, 2, 0, 5, 4, 5] 0
181 [5, 4, 3, 2, 0, 5, 4] 0
182 [5, 4, 3, 2, 0, 5, 3] 0
183 [5, 4, 3, 2, 0, 5] 0
184 [5, 4, 3, 2, 0, 4, 3, 4] 0
185 [5, 4, 3, 2, 0, 4, 3] 0
186 [5, 4, 3, 2, 0, 4] 0
187 [5, 4, 3, 2, 0, 3] 0
188 [5, 4, 3, 2, 0] 0
189 [5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
190 [5, 4, 3, 2, 5, 4, 3, 5, 4] 0
191 [5, 4, 3, 2, 5, 4, 3, 5] 0
192 [5, 4, 3, 2, 5, 4, 3, 4] 0
193 [5, 4, 3, 2, 5, 4, 3] 0
194 [5, 4, 3, 2, 5, 4, 5] 0
195 [5, 4, 3, 2, 5, 4] 0
196 [5, 4, 3, 2, 5, 3] 0
197 [5, 4, 3, 2, 5] 0
198 [5, 4, 3, 2, 4, 3, 4] 0
199 [5, 4, 3, 2, 4, 3] 0
200 [5, 4, 3, 2, 4] 0
201 [5, 4, 3, 2, 3] 0
202 [5, 4, 3, 2] 0
203 [5, 4, 3, 1, 0, 5, 4, 1, 5] 0
204 [5, 4, 3, 1, 0, 5, 4, 1] 0
205 [5, 4, 3, 1, 0, 5, 4, 5] 0
206 [5, 4, 3, 1, 0, 5, 4] 0
207 [5, 4, 3, 1, 0, 5, 1] 0
208 [5, 4, 3, 1, 0, 5] 0
209 [5, 4, 3, 1, 0, 4, 1] 0
210 [5, 4, 3, 1, 0, 4] 0
211 [5, 4, 3, 1, 0, 1] 0
212 [5, 4, 3, 1, 0] 0
213 [5, 4, 3, 1, 5, 4, 5] 0
214 [5, 4, 3, 1, 5, 4] 0
215 [5, 4, 3, 1, 5] 0
216 [5, 4, 3, 1, 4] 0
217 [5, 4, 3, 1] 0
218 [5, 4, 3, 0, 5, 4, 5] 0
219 [5, 4, 3, 0, 5, 4] 0
220 [5, 4, 3, 0, 5] 0
221 [5, 4, 3, 0, 4] 0
222 [5, 4, 3, 0] 0
223 [5, 4, 3, 5, 4, 5] 0
224 [5, 4, 3, 5, 4] 0
225 [5, 4, 3, 5] 0
226 [5, 4, 3, 4] 0
227 [5, 4, 3] 0
228 [5, 4, 2, 1, 0, 5, 2, 1, 2] 0
229 [5, 4, 2, 1, 0, 5, 2, 1] 0
230 [5, 4, 2, 1, 0, 5, 2] 0
231 [5, 4, 2, 1, 0, 5, 1] 0
232 [5, 4, 2, 1, 0, 5] 0
233 [5, 4, 2, 1, 0, 2, 1, 2] 0
234 [5, 4, 2, 1, 0, 2, 1] 0
235 [5, 4, 2, 1, 0, 2] 0
236 [5, 4, 2, 1, 0, 1] 0
237 [5, 4, 2, 1, 0] 0
238 [5, 4, 2, 1, 5, 2] 0
239 [5, 4, 2, 1, 5] 0
240 [5, 4, 2, 1, 2] 0
241 [5, 4, 2, 1] 0
242 [5, 4, 2, 0, 5] 0
243 [5, 4, 2, 0] 0
244 [5, 4, 2, 5] 0
245 [5, 4, 2] 0
246 [5, 4, 1, 0, 5, 1] 0
247 [5, 4, 1, 0, 5] 0
248 [5, 4, 1, 0, 1] 0
249 [5, 4, 1, 0] 0
250 [5, 4, 1, 5] 0
251 [5, 4, 1] 0
252 [5, 4, 0, 5] 0
253 [5, 4, 0] 0
254 [5, 4, 5] 0
255 [5, 4] 0
256 [5, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
257 [5, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
258 [5, 3, 2, 1, 0, 3, 2, 1, 3] 0
259 [5, 3, 2, 1, 0, 3, 2, 1, 2] 0
260 [5, 3, 2, 1, 0, 3, 2, 1] 0
261 [5, 3, 2, 1, 0, 3, 2, 3] 0
262 [5, 3, 2, 1, 0, 3, 2] 0
263 [5, 3, 2, 1, 0, 3, 1] 0
264 [5, 3, 2, 1, 0, 3] 0
265 [5, 3, 2, 1, 0, 2, 1, 2] 0
266 [5, 3, 2, 1, 0, 2, 1] 0
267 [5, 3, 2, 1, 0, 2] 0
268 [5, 3, 2, 1, 0, 1] 0
269 [5, 3, 2, 1, 0] 0
270 [5, 3, 2, 1, 3, 2, 3] 0
271 [5, 3, 2, 1, 3, 2] 0
272 [5, 3, 2, 1, 3] 0
273 [5, 3, 2, 1, 2] 0
274 [5, 3, 2, 1] 0
275 [5, 3, 2, 0, 3] 0
276 [5, 3, 2, 0] 0
277 [5, 3, 2, 3] 0
278 [5, 3, 2] 0
279 [5, 3, 1, 0, 1] 0
280 [5, 3, 1, 0] 0
281 [5, 3, 1] 0
282 [5, 3, 0] 0
283 [5, 3] 0
284 [5, 2, 1, 0, 2, 1, 2] 0
285 [5, 2, 1, 0, 2, 1] 0
286 [5, 2, 1, 0, 2] 0
287 [5, 2, 1, 0, 1] 0
288 [5, 2, 1, 0] 0
289 [5, 2, 1, 2] 0
290 [5, 2, 1] 0
291 [5, 2, 0] 0
292 [5, 2] 0
293 [5, 1, 0, 1] 0
294 [5, 1, 0] 0
295 [5, 1] 0
296 [5, 0] 0
297 [5] 0
298 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
299 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
300 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4] 0
301 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 3] 0
302 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2] 0
303 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 4] 0
304 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3] 0
305 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 2] 0
306 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4] 0
307 [4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2, 3] 0
308 [4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2] 0
309 [4, 3, 2, 1, 0, 4, 3, 2, 1, 3] 0
310 [4, 3, 2, 1, 0, 4, 3, 2, 1, 2] 0
311 [4, 3, 2, 1, 0, 4, 3, 2, 1] 0
312 [4, 3, 2, 1, 0, 4, 3, 2, 4, 3, 4] 0
313 [4, 3, 2, 1, 0, 4, 3, 2, 4, 3] 0
314 [4, 3, 2, 1, 0, 4, 3, 2, 4] 0
315 [4, 3, 2, 1, 0, 4, 3, 2, 3] 0
316 [4, 3, 2, 1, 0, 4, 3, 2] 0
317 [4, 3, 2, 1, 0, 4, 3, 1, 4] 0
318 [4, 3, 2, 1, 0, 4, 3, 1] 0
319 [4, 3, 2, 1, 0, 4, 3, 4] 0
320 [4, 3, 2, 1, 0, 4, 3] 0
321 [4, 3, 2, 1, 0, 4, 2, 1, 2] 0
322 [4, 3, 2, 1, 0, 4, 2, 1] 0
323 [4, 3, 2, 1, 0, 4, 2] 0
324 [4, 3, 2, 1, 0, 4, 1] 0
325 [4, 3, 2, 1, 0, 4] 0
326 [4, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
327 [4, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
328 [4, 3, 2, 1, 0, 3, 2, 1, 3] 0
329 [4, 3, 2, 1, 0, 3, 2, 1, 2] 0
330 [4, 3, 2, 1, 0, 3, 2, 1] 0
331 [4, 3, 2, 1, 0, 3, 2, 3] 0
332 [4, 3, 2, 1, 0, 3, 2] 0
333 [4, 3, 2, 1, 0, 3, 1] 0
334 [4, 3, 2, 1, 0, 3] 0
335 [4, 3, 2, 1, 0, 2, 1, 2] 0
336 [4, 3, 2, 1, 0, 2, 1] 0
337 [4, 3, 2, 1, 0, 2] 0
338 [4, 3, 2, 1, 0, 1] 0
339 [4, 3, 2, 1, 0] 0
340 [4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
341 [4, 3, 2, 1, 4, 3, 2, 4, 3] 0
342 [4, 3, 2, 1, 4, 3, 2, 4] 0
343 [4, 3, 2, 1, 4, 3, 2, 3] 0
344 [4, 3, 2, 1, 4, 3, 2] 0
345 [4, 3, 2, 1, 4, 3, 4] 0
346 [4, 3, 2, 1, 4, 3] 0
347 [4, 3, 2, 1, 4, 2] 0
348 [4, 3, 2, 1, 4] 0
349 [4, 3, 2, 1, 3, 2, 3] 0
350 [4, 3, 2, 1, 3, 2] 0
351 [4, 3, 2, 1, 3] 0
352 [4, 3, 2, 1, 2] 0
353 [4, 3, 2, 1] 0
354 [4, 3, 2, 0, 4, 3, 4] 0
355 [4, 3, 2, 0, 4, 3] 0
356 [4, 3, 2, 0, 4] 0
357 [4, 3, 2, 0, 3] 0
358 [4, 3, 2, 0] 0
359 [4, 3, 2, 4, 3, 4] 0
360 [4, 3, 2, 4, 3] 0
361 [4, 3, 2, 4] 0
362 [4, 3, 2, 3] 0
363 [4, 3, 2] 0
364 [4, 3, 1, 0, 4, 1] 0
365 [4, 3, 1, 0, 4] 0
366 [4, 3, 1, 0, 1] 0
367 [4, 3, 1, 0] 0
368 [4, 3, 1, 4] 0
369 [4, 3, 1] 0
370 [4, 3, 0, 4] 0
371 [4, 3, 0] 0
372 [4, 3, 4] 0
373 [4, 3] 0
374 [4, 2, 1, 0, 2, 1, 2] 0
375 [4, 2, 1, 0, 2, 1] 0
376 [4, 2, 1, 0, 2] 0
377 [4, 2, 1, 0, 1] 0
378 [4, 2, 1, 0] 0
379 [4, 2, 1, 2] 0
380 [4, 2, 1] 0
381 [4, 2, 0] 0
382 [4, 2] 0
383 [4, 1, 0, 1] 0
384 [4, 1, 0] 0
385 [4, 1] 0
386 [4, 0] 0
387 [4] 0
388 [3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
389 [3, 2, 1, 0, 3, 2, 1, 3, 2] 0
390 [3, 2, 1, 0, 3, 2, 1, 3] 0
391 [3, 2, 1, 0, 3, 2, 1, 2] 0
392 [3, 2, 1, 0, 3, 2, 1] 0
393 [3, 2, 1, 0, 3, 2, 3] 0
394 [3, 2, 1, 0, 3, 2] 0
395 [3, 2, 1, 0, 3, 1] 0
396 [3, 2, 1, 0, 3] 0
397 [3, 2, 1, 0, 2, 1, 2] 0
398 [3, 2, 1, 0, 2, 1] 0
399 [3, 2, 1, 0, 2] 0
400 [3, 2, 1, 0, 1] 0
401 [3, 2, 1, 0] 0
402 [3, 2, 1, 3, 2, 3] 0
403 [3, 2, 1, 3, 2] 0
404 [3, 2, 1, 3] 0
405 [3, 2, 1, 2] 0
406 [3, 2, 1] 0
407 [3, 2, 0, 3] 0
408 [3, 2, 0] 0
409 [3, 2, 3] 0
410 [3, 2] 0
411 [3, 1, 0, 1] 0
412 [3, 1, 0] 0
413 [3, 1] 0
414 [3, 0] 0
415 [3] 0
416 [2, 1, 0, 2, 1, 2] 0
417 [2, 1, 0, 2, 1] 0
418 [2, 1, 0, 2] 0
419 [2, 1, 0, 1] 0
420 [2, 1, 0] 0
421 [2, 1, 2] 0
422 [2, 1] 0
423 [2, 0] 0
424 [2] 0
425 [1, 0, 1] 0
426 [1, 0] 0
427 [1] 0
428 [0] 0
429 [] 0
sage: A=CartanMatrix(['D',9])
....: c=[8,7,6,5,4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,kinv,k+[c[0]],kinv+[c[0]]]).dimensio
....: n()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7, 6, 7] 0
2 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7, 6] 0
3 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7] 0
4 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 6] 0
5 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5] 0
6 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 7] 0
7 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6] 0
8 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 5] 0
9 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7] 0
10 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6, 5, 6] 0
11 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6, 5] 0
12 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6] 0
13 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 5] 0
14 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4] 0
15 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 7, 6, 7] 0
16 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 7, 6] 0
17 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 7] 0
18 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 6] 0
19 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5] 0
20 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 4, 7] 0
21 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 4] 0
22 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 7] 0
23 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6] 0
24 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 5, 4, 5] 0
25 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 5, 4] 0
26 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 5] 0
27 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 4] 0
28 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7] 0
29 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
30 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
31 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 4, 6] 0
32 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 4, 5] 0
33 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 4] 0
34 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 6] 0
35 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5] 0
36 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 4] 0
37 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6] 0
38 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 5, 4, 5] 0
39 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 5, 4] 0
40 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 5] 0
41 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 4] 0
42 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3] 0
43 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 5, 7, 6, 7] 0
44 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 5, 7, 6] 0
45 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 5, 7] 0
46 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 5, 6] 0
47 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 5] 0
48 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 7] 0
49 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6] 0
50 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 5] 0
51 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7] 0
52 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 6, 5, 6] 0
53 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 6, 5] 0
54 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 6] 0
55 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 5] 0
56 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4] 0
57 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 3, 7, 6, 7] 0
58 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 3, 7, 6] 0
59 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 3, 7] 0
60 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 3, 6] 0
61 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 3] 0
62 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 7, 6, 7] 0
63 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 7, 6] 0
64 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 7] 0
65 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 6] 0
66 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5] 0
67 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 4, 3, 7, 4] 0
68 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 4, 3, 7] 0
69 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 4, 3, 4] 0
70 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 4, 3] 0
71 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 4, 7] 0
72 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 4] 0
73 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 3, 7] 0
74 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 3] 0
75 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 7] 0
76 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6] 0
77 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 5, 4, 3, 5, 4, 5] 0
78 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 5, 4, 3, 5, 4] 0
79 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 5, 4, 3, 5] 0
80 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 5, 4, 3, 4] 0
81 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 5, 4, 3] 0
82 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 5, 4, 5] 0
83 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 5, 4] 0
84 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 5, 3] 0
85 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 5] 0
86 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 4, 3, 4] 0
87 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 4, 3] 0
88 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 4] 0
89 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 3] 0
90 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7] 0
91 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
92 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
93 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6] 0
94 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 5] 0
95 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4] 0
96 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 6] 0
97 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5] 0
98 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 4] 0
99 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6] 0
100 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4, 5] 0
101 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4] 0
102 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5] 0
103 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 4] 0
104 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3] 0
105 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5, 6] 0
106 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5] 0
107 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 6] 0
108 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 5] 0
109 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4] 0
110 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 3, 6] 0
111 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 3] 0
112 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 6] 0
113 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5] 0
114 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 4, 3, 4] 0
115 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 4, 3] 0
116 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 4] 0
117 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 3] 0
118 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6] 0
119 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
120 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
121 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 5, 4, 3, 5] 0
122 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 5, 4, 3, 4] 0
123 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 5, 4, 3] 0
124 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 5, 4, 5] 0
125 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 5, 4] 0
126 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 5, 3] 0
127 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 5] 0
128 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 4, 3, 4] 0
129 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 4, 3] 0
130 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 4] 0
131 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 3] 0
132 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2] 0
133 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7, 6, 7] 0
134 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7, 6] 0
135 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7] 0
136 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 6] 0
137 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5] 0
138 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 7] 0
139 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6] 0
140 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 5] 0
141 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7] 0
142 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6, 5, 6] 0
143 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6, 5] 0
144 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6] 0
145 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 5] 0
146 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4] 0
147 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 7, 6, 7] 0
148 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 7, 6] 0
149 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 7] 0
150 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 6] 0
151 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5] 0
152 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 4, 7] 0
153 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 4] 0
154 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 7] 0
155 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6] 0
156 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 5, 4, 5] 0
157 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 5, 4] 0
158 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 5] 0
159 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 4] 0
160 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7] 0
161 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
162 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
163 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 6, 5, 4, 6] 0
164 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 6, 5, 4, 5] 0
165 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 6, 5, 4] 0
166 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 6, 5, 6] 0
167 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 6, 5] 0
168 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 6, 4] 0
169 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 6] 0
170 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 5, 4, 5] 0
171 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 5, 4] 0
172 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 5] 0
173 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 4] 0
174 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3] 0
175 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 7, 6, 5, 7, 6, 7] 0
176 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 7, 6, 5, 7, 6] 0
177 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 7, 6, 5, 7] 0
178 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 7, 6, 5, 6] 0
179 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 7, 6, 5] 0
180 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 7, 6, 7] 0
181 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 7, 6] 0
182 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 7, 5] 0
183 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 7] 0
184 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 6, 5, 6] 0
185 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 6, 5] 0
186 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 6] 0
187 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 5] 0
188 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2] 0
189 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 7, 6, 5, 7, 6, 7] 0
190 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 7, 6, 5, 7, 6] 0
191 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 7, 6, 5, 7] 0
192 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 7, 6, 5, 6] 0
193 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 7, 6, 5] 0
194 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 7, 6, 7] 0
195 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 7, 6] 0
196 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 7, 5] 0
197 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 7] 0
198 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 6, 5, 6] 0
199 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 6, 5] 0
200 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 6] 0
201 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 5] 0
202 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4] 0
203 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 2, 7, 6, 3, 7] 0
204 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 2, 7, 6, 3] 0
205 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 2, 7, 6, 7] 0
206 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 2, 7, 6] 0
207 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 2, 7, 3] 0
208 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 2, 7] 0
209 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 2, 6, 3] 0
210 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 2, 6] 0
211 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 2, 3] 0
212 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 2] 0
213 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 7, 6, 7] 0
214 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 7, 6] 0
215 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 7] 0
216 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 6] 0
217 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3] 0
218 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 2, 7, 6, 7] 0
219 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 2, 7, 6] 0
220 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 2, 7] 0
221 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 2, 6] 0
222 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 2] 0
223 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 7, 6, 7] 0
224 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 7, 6] 0
225 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 7] 0
226 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 6] 0
227 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5] 0
228 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 2, 7, 4, 3, 4] 0
229 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 2, 7, 4, 3] 0
230 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 2, 7, 4] 0
231 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 2, 7, 3] 0
232 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 2, 7] 0
233 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 2, 4, 3, 4] 0
234 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 2, 4, 3] 0
235 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 2, 4] 0
236 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 2, 3] 0
237 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 2] 0
238 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 7, 4] 0
239 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 7] 0
240 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 4] 0
241 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3] 0
242 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 2, 7] 0
243 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 2] 0
244 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 7] 0
245 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 4] 0
246 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 3, 2, 7, 3] 0
247 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 3, 2, 7] 0
248 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 3, 2, 3] 0
249 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 3, 2] 0
250 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 3, 7] 0
251 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 3] 0
252 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 2, 7] 0
253 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 2] 0
254 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 7] 0
255 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6] 0
256 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
257 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
258 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 5, 4, 3, 5] 0
259 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 5, 4, 3, 4] 0
260 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 5, 4, 3] 0
261 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 5, 4, 5] 0
262 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 5, 4] 0
263 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 5, 3] 0
264 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 5] 0
265 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 4, 3, 4] 0
266 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 4, 3] 0
267 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 4] 0
268 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 3] 0
269 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2] 0
270 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 5, 4, 5] 0
271 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 5, 4] 0
272 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 5] 0
273 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 4] 0
274 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3] 0
275 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 2, 5] 0
276 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 2] 0
277 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 5] 0
278 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4] 0
279 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 3, 2, 3] 0
280 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 3, 2] 0
281 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 3] 0
282 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 2] 0
283 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5] 0
284 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 4, 3, 2, 4, 3, 4] 0
285 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 4, 3, 2, 4, 3] 0
286 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 4, 3, 2, 4] 0
287 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 4, 3, 2, 3] 0
288 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 4, 3, 2] 0
289 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 4, 3, 4] 0
290 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 4, 3] 0
291 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 4, 2] 0
292 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 4] 0
293 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 3, 2, 3] 0
294 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 3, 2] 0
295 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 3] 0
296 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 2] 0
297 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7] 0
298 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
299 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
300 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6] 0
301 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 5] 0
302 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4] 0
303 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 6] 0
304 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5] 0
305 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 4] 0
306 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6] 0
307 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4, 5] 0
308 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4] 0
309 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5] 0
310 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 4] 0
311 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3] 0
312 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5, 6] 0
313 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5] 0
314 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 6] 0
315 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 5] 0
316 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4] 0
317 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 3, 6] 0
318 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 3] 0
319 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 6] 0
320 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5] 0
321 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 4, 3, 4] 0
322 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 4, 3] 0
323 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 4] 0
324 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 3] 0
325 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6] 0
326 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
327 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
328 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3, 5] 0
329 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3, 4] 0
330 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3] 0
331 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 5] 0
332 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4] 0
333 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 3] 0
334 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5] 0
335 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 4, 3, 4] 0
336 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 4, 3] 0
337 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 4] 0
338 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 3] 0
339 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2] 0
340 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
341 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
342 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4, 6] 0
343 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4, 5] 0
344 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4] 0
345 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 6] 0
346 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5] 0
347 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 4] 0
348 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6] 0
349 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 5, 4, 5] 0
350 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 5, 4] 0
351 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 5] 0
352 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 4] 0
353 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3] 0
354 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 2, 6, 5, 6] 0
355 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 2, 6, 5] 0
356 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 2, 6] 0
357 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 2, 5] 0
358 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 2] 0
359 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 6, 5, 6] 0
360 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 6, 5] 0
361 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 6] 0
362 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 5] 0
363 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4] 0
364 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 3, 2, 6, 3] 0
365 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 3, 2, 6] 0
366 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 3, 2, 3] 0
367 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 3, 2] 0
368 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 3, 6] 0
369 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 3] 0
370 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 2, 6] 0
371 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 2] 0
372 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 6] 0
373 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5] 0
374 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 4, 3, 2, 4, 3, 4] 0
375 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 4, 3, 2, 4, 3] 0
376 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 4, 3, 2, 4] 0
377 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 4, 3, 2, 3] 0
378 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 4, 3, 2] 0
379 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 4, 3, 4] 0
380 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 4, 3] 0
381 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 4, 2] 0
382 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 4] 0
383 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 3, 2, 3] 0
384 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 3, 2] 0
385 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 3] 0
386 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 2] 0
387 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6] 0
388 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
389 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
390 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] 0
391 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] 0
392 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] 0
393 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] 0
394 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] 0
395 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] 0
396 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5] 0
397 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] 0
398 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] 0
399 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4] 0
400 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 3] 0
401 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2] 0
402 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] 0
403 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4] 0
404 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 5] 0
405 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 4] 0
406 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4, 3] 0
407 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4, 2, 5] 0
408 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4, 2] 0
409 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4, 5] 0
410 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4] 0
411 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 3, 2, 3] 0
412 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 3, 2] 0
413 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 3] 0
414 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 2] 0
415 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5] 0
416 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
417 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
418 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 4, 3, 2, 4] 0
419 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 4, 3, 2, 3] 0
420 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 4, 3, 2] 0
421 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 4, 3, 4] 0
422 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 4, 3] 0
423 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 4, 2] 0
424 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 4] 0
425 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 3, 2, 3] 0
426 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 3, 2] 0
427 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 3] 0
428 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 2] 0
429 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1] 0
430 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7, 6, 7] 0
431 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7, 6] 0
432 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7] 0
433 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 6] 0
434 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5] 0
435 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 7] 0
436 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6] 0
437 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 5] 0
438 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7] 0
439 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6, 5, 6] 0
440 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6, 5] 0
441 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6] 0
442 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 5] 0
443 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4] 0
444 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 7, 6, 7] 0
445 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 7, 6] 0
446 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 7] 0
447 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 6] 0
448 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5] 0
449 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 4, 7] 0
450 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 4] 0
451 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 7] 0
452 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6] 0
453 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 5, 4, 5] 0
454 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 5, 4] 0
455 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 5] 0
456 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 4] 0
457 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7] 0
458 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
459 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
460 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 4, 6] 0
461 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 4, 5] 0
462 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 4] 0
463 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 6] 0
464 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5] 0
465 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 4] 0
466 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6] 0
467 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 5, 4, 5] 0
468 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 5, 4] 0
469 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 5] 0
470 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 4] 0
471 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3] 0
472 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 5, 7, 6, 7] 0
473 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 5, 7, 6] 0
474 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 5, 7] 0
475 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 5, 6] 0
476 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 5] 0
477 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 7] 0
478 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6] 0
479 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 5] 0
480 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7] 0
481 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 6, 5, 6] 0
482 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 6, 5] 0
483 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 6] 0
484 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 5] 0
485 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4] 0
486 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 3, 7, 6, 7] 0
487 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 3, 7, 6] 0
488 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 3, 7] 0
489 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 3, 6] 0
490 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 3] 0
491 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 7, 6, 7] 0
492 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 7, 6] 0
493 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 7] 0
494 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 6] 0
495 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5] 0
496 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 4, 3, 7, 4] 0
497 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 4, 3, 7] 0
498 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 4, 3, 4] 0
499 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 4, 3] 0
500 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 4, 7] 0
501 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 4] 0
502 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 3, 7] 0
503 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 3] 0
504 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 7] 0
505 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6] 0
506 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 5, 4, 3, 5, 4, 5] 0
507 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 5, 4, 3, 5, 4] 0
508 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 5, 4, 3, 5] 0
509 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 5, 4, 3, 4] 0
510 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 5, 4, 3] 0
511 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 5, 4, 5] 0
512 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 5, 4] 0
513 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 5, 3] 0
514 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 5] 0
515 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 4, 3, 4] 0
516 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 4, 3] 0
517 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 4] 0
518 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 3] 0
519 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7] 0
520 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
521 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
522 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6] 0
523 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 5] 0
524 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4] 0
525 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 6] 0
526 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5] 0
527 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 4] 0
528 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6] 0
529 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4, 5] 0
530 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4] 0
531 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5] 0
532 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 4] 0
533 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3] 0
534 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5, 6] 0
535 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5] 0
536 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5, 4, 6] 0
537 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5, 4, 5] 0
538 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5, 4] 0
539 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5, 3, 6] 0
540 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5, 3] 0
541 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5, 6] 0
542 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5] 0
543 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 4, 3, 4] 0
544 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 4, 3] 0
545 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 4] 0
546 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 3] 0
547 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6] 0
548 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
549 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
550 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 5, 4, 3, 5] 0
551 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 5, 4, 3, 4] 0
552 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 5, 4, 3] 0
553 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 5, 4, 5] 0
554 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 5, 4] 0
555 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 5, 3] 0
556 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 5] 0
557 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 4, 3, 4] 0
558 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 4, 3] 0
559 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 4] 0
560 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 3] 0
561 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2] 0
562 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 7, 6, 5, 7, 6, 7] 0
563 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 7, 6, 5, 7, 6] 0
564 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 7, 6, 5, 7] 0
565 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 7, 6, 5, 6] 0
566 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 7, 6, 5] 0
567 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 7, 6, 7] 0
568 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 7, 6] 0
569 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 7, 5] 0
570 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 7] 0
571 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 6, 5, 6] 0
572 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 6, 5] 0
573 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 6] 0
574 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 5] 0
575 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6, 5, 4] 0
576 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6, 5, 7, 6, 7] 0
577 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6, 5, 7, 6] 0
578 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6, 5, 7] 0
579 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6, 5, 6] 0
580 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6, 5] 0
581 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6, 4, 7] 0
582 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6, 4] 0
583 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6, 7] 0
584 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6] 0
585 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 5, 4, 5] 0
586 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 5, 4] 0
587 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 5] 0
588 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 4] 0
589 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7] 0
590 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 6, 5, 4, 6, 5, 6] 0
591 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 6, 5, 4, 6, 5] 0
592 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 6, 5, 4, 6] 0
593 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 6, 5, 4, 5] 0
594 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 6, 5, 4] 0
595 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 6, 5, 6] 0
596 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 6, 5] 0
597 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 6, 4] 0
598 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 6] 0
599 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 5, 4, 5] 0
600 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 5, 4] 0
601 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 5] 0
602 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 4] 0
603 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1] 0
604 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7, 6, 7] 0
605 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7, 6] 0
606 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7] 0
607 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 6] 0
608 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5] 0
609 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 7] 0
610 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6] 0
611 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 5] 0
612 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7] 0
613 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6, 5, 6] 0
614 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6, 5] 0
615 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6] 0
616 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 5] 0
617 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4] 0
618 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6, 5, 7, 6, 7] 0
619 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6, 5, 7, 6] 0
620 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6, 5, 7] 0
621 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6, 5, 6] 0
622 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6, 5] 0
623 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6, 4, 7] 0
624 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6, 4] 0
625 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6, 7] 0
626 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6] 0
627 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 5, 4, 5] 0
628 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 5, 4] 0
629 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 5] 0
630 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 4] 0
631 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7] 0
632 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
633 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
634 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 6, 5, 4, 6] 0
635 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 6, 5, 4, 5] 0
636 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 6, 5, 4] 0
637 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 6, 5, 6] 0
638 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 6, 5] 0
639 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 6, 4] 0
640 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 6] 0
641 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 5, 4, 5] 0
642 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 5, 4] 0
643 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 5] 0
644 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 4] 0
645 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3] 0
646 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 7, 6, 5, 2, 7, 6, 7] 0
647 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 7, 6, 5, 2, 7, 6] 0
648 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 7, 6, 5, 2, 7] 0
649 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 7, 6, 5, 2, 6] 0
650 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 7, 6, 5, 2] 0
651 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 7, 6, 5, 7, 6, 7] 0
652 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 7, 6, 5, 7, 6] 0
653 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 7, 6, 5, 7] 0
654 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 7, 6, 5, 6] 0
655 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 7, 6, 5] 0
656 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 7, 6, 2, 7] 0
657 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 7, 6, 2] 0
658 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 7, 6, 7] 0
659 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 7, 6] 0
660 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 7, 5, 2] 0
661 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 7, 5] 0
662 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 7, 2] 0
663 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 7] 0
664 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 6, 5, 2, 6] 0
665 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 6, 5, 2] 0
666 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 6, 5, 6] 0
667 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 6, 5] 0
668 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 6, 2] 0
669 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 6] 0
670 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 5, 2] 0
671 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 5] 0
672 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 2] 0
673 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1] 0
674 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 7, 6, 5, 7, 6, 7] 0
675 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 7, 6, 5, 7, 6] 0
676 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 7, 6, 5, 7] 0
677 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 7, 6, 5, 6] 0
678 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 7, 6, 5] 0
679 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 7, 6, 7] 0
680 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 7, 6] 0
681 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 7, 5] 0
682 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 7] 0
683 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 6, 5, 6] 0
684 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 6, 5] 0
685 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 6] 0
686 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 5] 0
687 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2] 0
688 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 1, 7, 6, 5, 7, 6, 7] 0
689 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 1, 7, 6, 5, 7, 6] 0
690 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 1, 7, 6, 5, 7] 0
691 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 1, 7, 6, 5, 6] 0
692 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 1, 7, 6, 5] 0
693 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 1, 7, 6, 7] 0
694 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 1, 7, 6] 0
695 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 1, 7, 5] 0
696 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 1, 7] 0
697 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 1, 6, 5, 6] 0
698 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 1, 6, 5] 0
699 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 1, 6] 0
700 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 1, 5] 0
701 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 1] 0
702 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 7, 6, 5, 7, 6, 7] 0
703 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 7, 6, 5, 7, 6] 0
704 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 7, 6, 5, 7] 0
705 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 7, 6, 5, 6] 0
706 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 7, 6, 5] 0
707 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 7, 6, 7] 0
708 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 7, 6] 0
709 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 7, 5] 0
710 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 7] 0
711 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 6, 5, 6] 0
712 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 6, 5] 0
713 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 6] 0
714 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 5] 0
715 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4] 0
716 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 7, 6, 3, 2, 7, 3] 0
717 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 7, 6, 3, 2, 7] 0
718 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 7, 6, 3, 2, 3] 0
719 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 7, 6, 3, 2] 0
720 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 7, 6, 3, 7] 0
721 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 7, 6, 3] 0
722 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 7, 6, 2, 7] 0
723 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 7, 6, 2] 0
724 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 7, 6, 7] 0
725 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 7, 6] 0
726 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 7, 3, 2, 3] 0
727 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 7, 3, 2] 0
728 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 7, 3] 0
729 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 7, 2] 0
730 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 7] 0
731 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 6, 3, 2, 3] 0
732 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 6, 3, 2] 0
733 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 6, 3] 0
734 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 6, 2] 0
735 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 6] 0
736 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 3, 2, 3] 0
737 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 3, 2] 0
738 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 3] 0
739 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 2] 0
740 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1] 0
741 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 7, 6, 3, 7] 0
742 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 7, 6, 3] 0
743 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 7, 6, 7] 0
744 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 7, 6] 0
745 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 7, 3] 0
746 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 7] 0
747 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 6, 3] 0
748 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 6] 0
749 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 3] 0
750 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2] 0
751 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 1, 7, 6, 7] 0
752 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 1, 7, 6] 0
753 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 1, 7] 0
754 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 1, 6] 0
755 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 1] 0
756 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 7, 6, 7] 0
757 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 7, 6] 0
758 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 7] 0
759 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 6] 0
760 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3] 0
761 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 2, 1, 7, 6, 2, 7] 0
762 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 2, 1, 7, 6, 2] 0
763 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 2, 1, 7, 6, 7] 0
764 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 2, 1, 7, 6] 0
765 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 2, 1, 7, 2] 0
766 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 2, 1, 7] 0
767 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 2, 1, 6, 2] 0
768 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 2, 1, 6] 0
769 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 2, 1, 2] 0
770 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 2, 1] 0
771 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 2, 7, 6, 7] 0
772 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 2, 7, 6] 0
773 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 2, 7] 0
774 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 2, 6] 0
775 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 2] 0
776 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 1, 7, 6, 7] 0
777 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 1, 7, 6] 0
778 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 1, 7] 0
779 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 1, 6] 0
780 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 1] 0
781 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 7, 6, 7] 0
782 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 7, 6] 0
783 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 7] 0
784 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 6] 0
785 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5] 0
786 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 7, 4, 3, 2, 4, 3, 4] 0
787 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 7, 4, 3, 2, 4, 3] 0
788 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 7, 4, 3, 2, 4] 0
789 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 7, 4, 3, 2, 3] 0
790 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 7, 4, 3, 2] 0
791 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 7, 4, 3, 4] 0
792 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 7, 4, 3] 0
793 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 7, 4, 2] 0
794 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 7, 4] 0
795 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 7, 3, 2, 3] 0
796 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 7, 3, 2] 0
797 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 7, 3] 0
798 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 7, 2] 0
799 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 7] 0
800 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
801 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
802 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 4, 3, 2, 4] 0
803 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 4, 3, 2, 3] 0
804 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 4, 3, 2] 0
805 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 4, 3, 4] 0
806 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 4, 3] 0
807 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 4, 2] 0
808 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 4] 0
809 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 3, 2, 3] 0
810 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 3, 2] 0
811 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 3] 0
812 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 2] 0
813 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1] 0
814 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 7, 4, 3, 4] 0
815 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 7, 4, 3] 0
816 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 7, 4] 0
817 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 7, 3] 0
818 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 7] 0
819 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 4, 3, 4] 0
820 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 4, 3] 0
821 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 4] 0
822 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 3] 0
823 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2] 0
824 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 1, 7, 4] 0
825 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 1, 7] 0
826 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 1, 4] 0
827 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 1] 0
828 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 7, 4] 0
829 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 7] 0
830 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 4] 0
831 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3] 0
832 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 2, 1, 7, 2] 0
833 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 2, 1, 7] 0
834 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 2, 1, 2] 0
835 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 2, 1] 0
836 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 2, 7] 0
837 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 2] 0
838 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 1, 7] 0
839 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 1] 0
840 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 7] 0
841 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4] 0
842 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 3, 2, 1, 7, 3, 2, 3] 0
843 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 3, 2, 1, 7, 3, 2] 0
844 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 3, 2, 1, 7, 3] 0
845 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 3, 2, 1, 7, 2] 0
846 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 3, 2, 1, 7] 0
847 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 3, 2, 1, 3, 2, 3] 0
848 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 3, 2, 1, 3, 2] 0
849 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 3, 2, 1, 3] 0
850 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 3, 2, 1, 2] 0
851 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 3, 2, 1] 0
852 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 3, 2, 7, 3] 0
853 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 3, 2, 7] 0
854 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 3, 2, 3] 0
855 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 3, 2] 0
856 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 3, 1, 7] 0
857 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 3, 1] 0
858 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 3, 7] 0
859 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 3] 0
860 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 2, 1, 7, 2] 0
861 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 2, 1, 7] 0
862 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 2, 1, 2] 0
863 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 2, 1] 0
864 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 2, 7] 0
865 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 2] 0
866 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 1, 7] 0
867 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 1] 0
868 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 7] 0
869 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6] 0
870 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
871 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
872 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] 0
873 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] 0
874 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] 0
875 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] 0
876 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] 0
877 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] 0
878 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5] 0
879 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] 0
880 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] 0
881 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4] 0
882 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 3] 0
883 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4, 3, 2] 0
884 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] 0
885 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4] 0
886 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4, 3, 5] 0
887 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4, 3, 4] 0
888 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4, 3] 0
889 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4, 2, 5] 0
890 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4, 2] 0
891 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4, 5] 0
892 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4] 0
893 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 3, 2, 3] 0
894 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 3, 2] 0
895 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 3] 0
896 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 2] 0
897 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5] 0
898 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
899 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
900 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 4, 3, 2, 4] 0
901 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 4, 3, 2, 3] 0
902 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 4, 3, 2] 0
903 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 4, 3, 4] 0
904 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 4, 3] 0
905 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 4, 2] 0
906 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 4] 0
907 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 3, 2, 3] 0
908 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 3, 2] 0
909 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 3] 0
910 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 2] 0
911 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1] 0
912 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
913 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
914 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 5, 4, 3, 5] 0
915 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 5, 4, 3, 4] 0
916 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 5, 4, 3] 0
917 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 5, 4, 5] 0
918 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 5, 4] 0
919 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 5, 3] 0
920 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 5] 0
921 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 4, 3, 4] 0
922 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 4, 3] 0
923 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 4] 0
924 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 3] 0
925 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2] 0
926 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 1, 5, 4, 5] 0
927 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 1, 5, 4] 0
928 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 1, 5] 0
929 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 1, 4] 0
930 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 1] 0
931 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 5, 4, 5] 0
932 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 5, 4] 0
933 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 5] 0
934 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 4] 0
935 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3] 0
936 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 2, 1, 5, 2] 0
937 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 2, 1, 5] 0
938 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 2, 1, 2] 0
939 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 2, 1] 0
940 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 2, 5] 0
941 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 2] 0
942 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 1, 5] 0
943 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 1] 0
944 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 5] 0
945 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4] 0
946 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 3, 2, 1, 3, 2, 3] 0
947 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 3, 2, 1, 3, 2] 0
948 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 3, 2, 1, 3] 0
949 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 3, 2, 1, 2] 0
950 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 3, 2, 1] 0
951 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 3, 2, 3] 0
952 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 3, 2] 0
953 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 3, 1] 0
954 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 3] 0
955 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 2, 1, 2] 0
956 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 2, 1] 0
957 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 2] 0
958 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 1] 0
959 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5] 0
960 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
961 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
962 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 4, 3, 2, 4] 0
963 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 4, 3, 2, 3] 0
964 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 4, 3, 2] 0
965 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 4, 3, 4] 0
966 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 4, 3] 0
967 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 4, 2] 0
968 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 4] 0
969 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 3, 2, 3] 0
970 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 3, 2] 0
971 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 3] 0
972 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 2] 0
973 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1] 0
974 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3, 2, 4, 3, 4] 0
975 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3, 2, 4, 3] 0
976 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3, 2, 4] 0
977 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3, 2, 3] 0
978 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3, 2] 0
979 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3, 1, 4] 0
980 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3, 1] 0
981 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3, 4] 0
982 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3] 0
983 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 2, 1, 2] 0
984 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 2, 1] 0
985 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 2] 0
986 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 1] 0
987 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4] 0
988 [7, 6, 5, 4, 3, 2, 1, 0, 7, 3, 2, 1, 3, 2, 3] 0
989 [7, 6, 5, 4, 3, 2, 1, 0, 7, 3, 2, 1, 3, 2] 0
990 [7, 6, 5, 4, 3, 2, 1, 0, 7, 3, 2, 1, 3] 0
991 [7, 6, 5, 4, 3, 2, 1, 0, 7, 3, 2, 1, 2] 0
992 [7, 6, 5, 4, 3, 2, 1, 0, 7, 3, 2, 1] 0
993 [7, 6, 5, 4, 3, 2, 1, 0, 7, 3, 2, 3] 0
994 [7, 6, 5, 4, 3, 2, 1, 0, 7, 3, 2] 0
995 [7, 6, 5, 4, 3, 2, 1, 0, 7, 3, 1] 0
996 [7, 6, 5, 4, 3, 2, 1, 0, 7, 3] 0
997 [7, 6, 5, 4, 3, 2, 1, 0, 7, 2, 1, 2] 0
998 [7, 6, 5, 4, 3, 2, 1, 0, 7, 2, 1] 0
999 [7, 6, 5, 4, 3, 2, 1, 0, 7, 2] 0
1000 [7, 6, 5, 4, 3, 2, 1, 0, 7, 1] 0
1001 [7, 6, 5, 4, 3, 2, 1, 0, 7] 0
1002 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
1003 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
1004 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6] 0
1005 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 5] 0
1006 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4] 0
1007 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 6] 0
1008 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5] 0
1009 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 4] 0
1010 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6] 0
1011 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4, 5] 0
1012 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4] 0
1013 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5] 0
1014 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 4] 0
1015 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3] 0
1016 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5, 6] 0
1017 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5] 0
1018 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 6] 0
1019 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 5] 0
1020 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4] 0
1021 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 3, 6] 0
1022 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 3] 0
1023 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 6] 0
1024 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5] 0
1025 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 4, 3, 4] 0
1026 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 4, 3] 0
1027 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 4] 0
1028 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 3] 0
1029 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6] 0
1030 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
1031 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
1032 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3, 5] 0
1033 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3, 4] 0
1034 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3] 0
1035 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 5] 0
1036 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4] 0
1037 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 3] 0
1038 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5] 0
1039 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 4, 3, 4] 0
1040 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 4, 3] 0
1041 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 4] 0
1042 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 3] 0
1043 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2] 0
1044 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
1045 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
1046 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4, 6] 0
1047 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4, 5] 0
1048 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4] 0
1049 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 6] 0
1050 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5] 0
1051 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 4] 0
1052 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6] 0
1053 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 5, 4, 5] 0
1054 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 5, 4] 0
1055 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 5] 0
1056 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 4] 0
1057 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3] 0
1058 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 2, 6, 5, 6] 0
1059 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 2, 6, 5] 0
1060 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 2, 6] 0
1061 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 2, 5] 0
1062 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 2] 0
1063 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 6, 5, 6] 0
1064 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 6, 5] 0
1065 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 6] 0
1066 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 5] 0
1067 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4] 0
1068 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 3, 2, 6, 3] 0
1069 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 3, 2, 6] 0
1070 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 3, 2, 3] 0
1071 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 3, 2] 0
1072 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 3, 6] 0
1073 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 3] 0
1074 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 2, 6] 0
1075 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 2] 0
1076 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 6] 0
1077 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5] 0
1078 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 4, 3, 2, 4, 3, 4] 0
1079 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 4, 3, 2, 4, 3] 0
1080 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 4, 3, 2, 4] 0
1081 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 4, 3, 2, 3] 0
1082 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 4, 3, 2] 0
1083 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 4, 3, 4] 0
1084 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 4, 3] 0
1085 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 4, 2] 0
1086 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 4] 0
1087 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 3, 2, 3] 0
1088 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 3, 2] 0
1089 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 3] 0
1090 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 2] 0
1091 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6] 0
1092 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
1093 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
1094 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] 0
1095 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] 0
1096 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] 0
1097 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] 0
1098 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] 0
1099 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] 0
1100 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5] 0
1101 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] 0
1102 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] 0
1103 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4] 0
1104 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 3] 0
1105 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2] 0
1106 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] 0
1107 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4] 0
1108 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 5] 0
1109 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 4] 0
1110 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3] 0
1111 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 2, 5] 0
1112 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 2] 0
1113 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 5] 0
1114 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4] 0
1115 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 3, 2, 3] 0
1116 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 3, 2] 0
1117 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 3] 0
1118 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 2] 0
1119 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5] 0
1120 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
1121 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
1122 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 4, 3, 2, 4] 0
1123 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 4, 3, 2, 3] 0
1124 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 4, 3, 2] 0
1125 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 4, 3, 4] 0
1126 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 4, 3] 0
1127 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 4, 2] 0
1128 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 4] 0
1129 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 3, 2, 3] 0
1130 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 3, 2] 0
1131 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 3] 0
1132 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 2] 0
1133 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1] 0
1134 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
1135 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
1136 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6] 0
1137 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 5] 0
1138 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4] 0
1139 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 6] 0
1140 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5] 0
1141 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 4] 0
1142 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6] 0
1143 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4, 5] 0
1144 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4] 0
1145 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5] 0
1146 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 4] 0
1147 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3] 0
1148 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5, 6] 0
1149 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5] 0
1150 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 6] 0
1151 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 5] 0
1152 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4] 0
1153 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 3, 6] 0
1154 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 3] 0
1155 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 6] 0
1156 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5] 0
1157 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 4, 3, 4] 0
1158 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 4, 3] 0
1159 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 4] 0
1160 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 3] 0
1161 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6] 0
1162 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
1163 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
1164 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 5, 4, 3, 5] 0
1165 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 5, 4, 3, 4] 0
1166 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 5, 4, 3] 0
1167 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 5, 4, 5] 0
1168 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 5, 4] 0
1169 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 5, 3] 0
1170 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 5] 0
1171 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 4, 3, 4] 0
1172 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 4, 3] 0
1173 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 4] 0
1174 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 3] 0
1175 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2] 0
1176 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 6, 5, 4, 6, 5, 6] 0
1177 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 6, 5, 4, 6, 5] 0
1178 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 6, 5, 4, 6] 0
1179 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 6, 5, 4, 5] 0
1180 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 6, 5, 4] 0
1181 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 6, 5, 6] 0
1182 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 6, 5] 0
1183 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 6, 4] 0
1184 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 6] 0
1185 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 5, 4, 5] 0
1186 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 5, 4] 0
1187 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 5] 0
1188 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 4] 0
1189 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1] 0
1190 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
1191 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
1192 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 6, 5, 4, 6] 0
1193 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 6, 5, 4, 5] 0
1194 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 6, 5, 4] 0
1195 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 6, 5, 6] 0
1196 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 6, 5] 0
1197 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 6, 4] 0
1198 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 6] 0
1199 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 5, 4, 5] 0
1200 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 5, 4] 0
1201 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 5] 0
1202 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 4] 0
1203 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3] 0
1204 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 1, 6, 5, 2, 6] 0
1205 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 1, 6, 5, 2] 0
1206 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 1, 6, 5, 6] 0
1207 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 1, 6, 5] 0
1208 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 1, 6, 2] 0
1209 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 1, 6] 0
1210 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 1, 5, 2] 0
1211 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 1, 5] 0
1212 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 1, 2] 0
1213 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 1] 0
1214 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 6, 5, 6] 0
1215 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 6, 5] 0
1216 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 6] 0
1217 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 5] 0
1218 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2] 0
1219 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 1, 6, 5, 6] 0
1220 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 1, 6, 5] 0
1221 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 1, 6] 0
1222 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 1, 5] 0
1223 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 1] 0
1224 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 6, 5, 6] 0
1225 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 6, 5] 0
1226 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 6] 0
1227 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 5] 0
1228 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4] 0
1229 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 1, 6, 3, 2, 3] 0
1230 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 1, 6, 3, 2] 0
1231 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 1, 6, 3] 0
1232 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 1, 6, 2] 0
1233 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 1, 6] 0
1234 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 1, 3, 2, 3] 0
1235 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 1, 3, 2] 0
1236 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 1, 3] 0
1237 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 1, 2] 0
1238 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 1] 0
1239 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 6, 3] 0
1240 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 6] 0
1241 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 3] 0
1242 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2] 0
1243 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 1, 6] 0
1244 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 1] 0
1245 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 6] 0
1246 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 3] 0
1247 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 2, 1, 6, 2] 0
1248 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 2, 1, 6] 0
1249 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 2, 1, 2] 0
1250 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 2, 1] 0
1251 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 2, 6] 0
1252 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 2] 0
1253 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 1, 6] 0
1254 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 1] 0
1255 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 6] 0
1256 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5] 0
1257 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
1258 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
1259 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 4, 3, 2, 4] 0
1260 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 4, 3, 2, 3] 0
1261 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 4, 3, 2] 0
1262 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 4, 3, 4] 0
1263 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 4, 3] 0
1264 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 4, 2] 0
1265 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 4] 0
1266 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 3, 2, 3] 0
1267 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 3, 2] 0
1268 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 3] 0
1269 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 2] 0
1270 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1] 0
1271 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 4, 3, 4] 0
1272 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 4, 3] 0
1273 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 4] 0
1274 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 3] 0
1275 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2] 0
1276 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 1, 4] 0
1277 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 1] 0
1278 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 4] 0
1279 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3] 0
1280 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 2, 1, 2] 0
1281 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 2, 1] 0
1282 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 2] 0
1283 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 1] 0
1284 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4] 0
1285 [7, 6, 5, 4, 3, 2, 1, 0, 6, 3, 2, 1, 3, 2, 3] 0
1286 [7, 6, 5, 4, 3, 2, 1, 0, 6, 3, 2, 1, 3, 2] 0
1287 [7, 6, 5, 4, 3, 2, 1, 0, 6, 3, 2, 1, 3] 0
1288 [7, 6, 5, 4, 3, 2, 1, 0, 6, 3, 2, 1, 2] 0
1289 [7, 6, 5, 4, 3, 2, 1, 0, 6, 3, 2, 1] 0
1290 [7, 6, 5, 4, 3, 2, 1, 0, 6, 3, 2, 3] 0
1291 [7, 6, 5, 4, 3, 2, 1, 0, 6, 3, 2] 0
1292 [7, 6, 5, 4, 3, 2, 1, 0, 6, 3, 1] 0
1293 [7, 6, 5, 4, 3, 2, 1, 0, 6, 3] 0
1294 [7, 6, 5, 4, 3, 2, 1, 0, 6, 2, 1, 2] 0
1295 [7, 6, 5, 4, 3, 2, 1, 0, 6, 2, 1] 0
1296 [7, 6, 5, 4, 3, 2, 1, 0, 6, 2] 0
1297 [7, 6, 5, 4, 3, 2, 1, 0, 6, 1] 0
1298 [7, 6, 5, 4, 3, 2, 1, 0, 6] 0
1299 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
1300 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
1301 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] 0
1302 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] 0
1303 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] 0
1304 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] 0
1305 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] 0
1306 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] 0
1307 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5] 0
1308 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] 0
1309 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] 0
1310 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4] 0
1311 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 3] 0
1312 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2] 0
1313 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] 0
1314 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4] 0
1315 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5] 0
1316 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 4] 0
1317 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3] 0
1318 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2, 5] 0
1319 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2] 0
1320 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 5] 0
1321 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4] 0
1322 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2, 3] 0
1323 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2] 0
1324 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3] 0
1325 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 2] 0
1326 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5] 0
1327 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
1328 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
1329 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4] 0
1330 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 3] 0
1331 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2] 0
1332 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 4] 0
1333 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3] 0
1334 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 2] 0
1335 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4] 0
1336 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2, 3] 0
1337 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2] 0
1338 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3] 0
1339 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 2] 0
1340 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1] 0
1341 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
1342 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
1343 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5] 0
1344 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 4] 0
1345 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3] 0
1346 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 5] 0
1347 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4] 0
1348 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 3] 0
1349 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5] 0
1350 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4, 3, 4] 0
1351 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4, 3] 0
1352 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4] 0
1353 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 3] 0
1354 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2] 0
1355 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5, 4, 5] 0
1356 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5, 4] 0
1357 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5] 0
1358 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 4] 0
1359 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 1] 0
1360 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 5, 4, 5] 0
1361 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 5, 4] 0
1362 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 5] 0
1363 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 4] 0
1364 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3] 0
1365 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 5, 2] 0
1366 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 5] 0
1367 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 2] 0
1368 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 2, 1] 0
1369 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 2, 5] 0
1370 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 2] 0
1371 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 1, 5] 0
1372 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 1] 0
1373 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 5] 0
1374 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4] 0
1375 [7, 6, 5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3, 2, 3] 0
1376 [7, 6, 5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3, 2] 0
1377 [7, 6, 5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3] 0
1378 [7, 6, 5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 2] 0
1379 [7, 6, 5, 4, 3, 2, 1, 0, 5, 3, 2, 1] 0
1380 [7, 6, 5, 4, 3, 2, 1, 0, 5, 3, 2, 3] 0
1381 [7, 6, 5, 4, 3, 2, 1, 0, 5, 3, 2] 0
1382 [7, 6, 5, 4, 3, 2, 1, 0, 5, 3, 1] 0
1383 [7, 6, 5, 4, 3, 2, 1, 0, 5, 3] 0
1384 [7, 6, 5, 4, 3, 2, 1, 0, 5, 2, 1, 2] 0
1385 [7, 6, 5, 4, 3, 2, 1, 0, 5, 2, 1] 0
1386 [7, 6, 5, 4, 3, 2, 1, 0, 5, 2] 0
1387 [7, 6, 5, 4, 3, 2, 1, 0, 5, 1] 0
1388 [7, 6, 5, 4, 3, 2, 1, 0, 5] 0
1389 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
1390 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
1391 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4] 0
1392 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 3] 0
1393 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2] 0
1394 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 4] 0
1395 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3] 0
1396 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 2] 0
1397 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4] 0
1398 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2, 3] 0
1399 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2] 0
1400 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3] 0
1401 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 2] 0
1402 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1] 0
1403 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3, 4] 0
1404 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3] 0
1405 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 4] 0
1406 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 3] 0
1407 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3, 2] 0
1408 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3, 1, 4] 0
1409 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3, 1] 0
1410 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3, 4] 0
1411 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3] 0
1412 [7, 6, 5, 4, 3, 2, 1, 0, 4, 2, 1, 2] 0
1413 [7, 6, 5, 4, 3, 2, 1, 0, 4, 2, 1] 0
1414 [7, 6, 5, 4, 3, 2, 1, 0, 4, 2] 0
1415 [7, 6, 5, 4, 3, 2, 1, 0, 4, 1] 0
1416 [7, 6, 5, 4, 3, 2, 1, 0, 4] 0
1417 [7, 6, 5, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
1418 [7, 6, 5, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
1419 [7, 6, 5, 4, 3, 2, 1, 0, 3, 2, 1, 3] 0
1420 [7, 6, 5, 4, 3, 2, 1, 0, 3, 2, 1, 2] 0
1421 [7, 6, 5, 4, 3, 2, 1, 0, 3, 2, 1] 0
1422 [7, 6, 5, 4, 3, 2, 1, 0, 3, 2, 3] 0
1423 [7, 6, 5, 4, 3, 2, 1, 0, 3, 2] 0
1424 [7, 6, 5, 4, 3, 2, 1, 0, 3, 1] 0
1425 [7, 6, 5, 4, 3, 2, 1, 0, 3] 0
1426 [7, 6, 5, 4, 3, 2, 1, 0, 2, 1, 2] 0
1427 [7, 6, 5, 4, 3, 2, 1, 0, 2, 1] 0
1428 [7, 6, 5, 4, 3, 2, 1, 0, 2] 0
1429 [7, 6, 5, 4, 3, 2, 1, 0, 1] 0
1430 [7, 6, 5, 4, 3, 2, 1, 0] 0
1431 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7, 6, 7] 0
1432 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7, 6] 0
1433 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7] 0
1434 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 6] 0
1435 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5] 0
1436 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 7] 0
1437 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6] 0
1438 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 5] 0
1439 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7] 0
1440 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6, 5, 6] 0
1441 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6, 5] 0
1442 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6] 0
1443 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 5] 0
1444 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4] 0
1445 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 7, 6, 7] 0
1446 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 7, 6] 0
1447 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 7] 0
1448 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 6] 0
1449 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5] 0
1450 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 4, 7] 0
1451 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 4] 0
1452 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 7] 0
1453 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6] 0
1454 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 5, 4, 5] 0
1455 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 5, 4] 0
1456 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 5] 0
1457 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 4] 0
1458 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7] 0
1459 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
1460 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
1461 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 4, 6] 0
1462 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 4, 5] 0
1463 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 4] 0
1464 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 6] 0
1465 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5] 0
1466 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 4] 0
1467 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6] 0
1468 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 5, 4, 5] 0
1469 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 5, 4] 0
1470 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 5] 0
1471 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 4] 0
1472 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3] 0
1473 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 5, 7, 6, 7] 0
1474 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 5, 7, 6] 0
1475 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 5, 7] 0
1476 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 5, 6] 0
1477 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 5] 0
1478 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 7] 0
1479 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6] 0
1480 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 5] 0
1481 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7] 0
1482 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 6, 5, 6] 0
1483 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 6, 5] 0
1484 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 6] 0
1485 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 5] 0
1486 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4] 0
1487 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 3, 7, 6, 7] 0
1488 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 3, 7, 6] 0
1489 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 3, 7] 0
1490 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 3, 6] 0
1491 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 3] 0
1492 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 7, 6, 7] 0
1493 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 7, 6] 0
1494 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 7] 0
1495 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 6] 0
1496 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5] 0
1497 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 4, 3, 7, 4] 0
1498 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 4, 3, 7] 0
1499 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 4, 3, 4] 0
1500 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 4, 3] 0
1501 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 4, 7] 0
1502 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 4] 0
1503 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 3, 7] 0
1504 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 3] 0
1505 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 7] 0
1506 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6] 0
1507 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 5, 4, 3, 5, 4, 5] 0
1508 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 5, 4, 3, 5, 4] 0
1509 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 5, 4, 3, 5] 0
1510 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 5, 4, 3, 4] 0
1511 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 5, 4, 3] 0
1512 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 5, 4, 5] 0
1513 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 5, 4] 0
1514 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 5, 3] 0
1515 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 5] 0
1516 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 4, 3, 4] 0
1517 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 4, 3] 0
1518 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 4] 0
1519 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 3] 0
1520 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7] 0
1521 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
1522 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
1523 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6] 0
1524 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 5] 0
1525 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4] 0
1526 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 6] 0
1527 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5] 0
1528 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 4] 0
1529 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6] 0
1530 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4, 5] 0
1531 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4] 0
1532 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5] 0
1533 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 4] 0
1534 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3] 0
1535 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5, 6] 0
1536 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5] 0
1537 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 6] 0
1538 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 5] 0
1539 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4] 0
1540 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 3, 6] 0
1541 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 3] 0
1542 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 6] 0
1543 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5] 0
1544 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 4, 3, 4] 0
1545 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 4, 3] 0
1546 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 4] 0
1547 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 3] 0
1548 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6] 0
1549 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
1550 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
1551 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 5, 4, 3, 5] 0
1552 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 5, 4, 3, 4] 0
1553 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 5, 4, 3] 0
1554 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 5, 4, 5] 0
1555 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 5, 4] 0
1556 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 5, 3] 0
1557 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 5] 0
1558 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 4, 3, 4] 0
1559 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 4, 3] 0
1560 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 4] 0
1561 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 3] 0
1562 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2] 0
1563 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7, 6, 7] 0
1564 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7, 6] 0
1565 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7] 0
1566 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 6] 0
1567 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5] 0
1568 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 7] 0
1569 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6] 0
1570 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 5] 0
1571 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7] 0
1572 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6, 5, 6] 0
1573 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6, 5] 0
1574 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6] 0
1575 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 5] 0
1576 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4] 0
1577 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 7, 6, 7] 0
1578 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 7, 6] 0
1579 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 7] 0
1580 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 6] 0
1581 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5] 0
1582 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 4, 7] 0
1583 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 4] 0
1584 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 7] 0
1585 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6] 0
1586 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 5, 4, 5] 0
1587 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 5, 4] 0
1588 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 5] 0
1589 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 4] 0
1590 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7] 0
1591 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
1592 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
1593 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 6, 5, 4, 6] 0
1594 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 6, 5, 4, 5] 0
1595 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 6, 5, 4] 0
1596 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 6, 5, 6] 0
1597 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 6, 5] 0
1598 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 6, 4] 0
1599 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 6] 0
1600 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 5, 4, 5] 0
1601 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 5, 4] 0
1602 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 5] 0
1603 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 4] 0
1604 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3] 0
1605 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 7, 6, 5, 7, 6, 7] 0
1606 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 7, 6, 5, 7, 6] 0
1607 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 7, 6, 5, 7] 0
1608 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 7, 6, 5, 6] 0
1609 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 7, 6, 5] 0
1610 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 7, 6, 7] 0
1611 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 7, 6] 0
1612 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 7, 5] 0
1613 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 7] 0
1614 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 6, 5, 6] 0
1615 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 6, 5] 0
1616 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 6] 0
1617 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 5] 0
1618 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2] 0
1619 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 7, 6, 5, 7, 6, 7] 0
1620 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 7, 6, 5, 7, 6] 0
1621 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 7, 6, 5, 7] 0
1622 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 7, 6, 5, 6] 0
1623 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 7, 6, 5] 0
1624 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 7, 6, 7] 0
1625 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 7, 6] 0
1626 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 7, 5] 0
1627 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 7] 0
1628 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 6, 5, 6] 0
1629 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 6, 5] 0
1630 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 6] 0
1631 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 5] 0
1632 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4] 0
1633 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 2, 7, 6, 3, 7] 0
1634 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 2, 7, 6, 3] 0
1635 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 2, 7, 6, 7] 0
1636 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 2, 7, 6] 0
1637 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 2, 7, 3] 0
1638 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 2, 7] 0
1639 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 2, 6, 3] 0
1640 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 2, 6] 0
1641 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 2, 3] 0
1642 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 2] 0
1643 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 7, 6, 7] 0
1644 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 7, 6] 0
1645 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 7] 0
1646 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 6] 0
1647 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3] 0
1648 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 2, 7, 6, 7] 0
1649 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 2, 7, 6] 0
1650 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 2, 7] 0
1651 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 2, 6] 0
1652 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 2] 0
1653 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 7, 6, 7] 0
1654 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 7, 6] 0
1655 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 7] 0
1656 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 6] 0
1657 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5] 0
1658 [7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 2, 7, 4, 3, 4] 0
1659 [7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 2, 7, 4, 3] 0
1660 [7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 2, 7, 4] 0
1661 [7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 2, 7, 3] 0
1662 [7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 2, 7] 0
1663 [7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 2, 4, 3, 4] 0
1664 [7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 2, 4, 3] 0
1665 [7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 2, 4] 0
1666 [7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 2, 3] 0
1667 [7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 2] 0
1668 [7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 7, 4] 0
1669 [7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 7] 0
1670 [7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 4] 0
1671 [7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3] 0
1672 [7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 2, 7] 0
1673 [7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 2] 0
1674 [7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 7] 0
1675 [7, 6, 5, 4, 3, 2, 1, 7, 6, 4] 0
1676 [7, 6, 5, 4, 3, 2, 1, 7, 6, 3, 2, 7, 3] 0
1677 [7, 6, 5, 4, 3, 2, 1, 7, 6, 3, 2, 7] 0
1678 [7, 6, 5, 4, 3, 2, 1, 7, 6, 3, 2, 3] 0
1679 [7, 6, 5, 4, 3, 2, 1, 7, 6, 3, 2] 0
1680 [7, 6, 5, 4, 3, 2, 1, 7, 6, 3, 7] 0
1681 [7, 6, 5, 4, 3, 2, 1, 7, 6, 3] 0
1682 [7, 6, 5, 4, 3, 2, 1, 7, 6, 2, 7] 0
1683 [7, 6, 5, 4, 3, 2, 1, 7, 6, 2] 0
1684 [7, 6, 5, 4, 3, 2, 1, 7, 6, 7] 0
1685 [7, 6, 5, 4, 3, 2, 1, 7, 6] 0
1686 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
1687 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
1688 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 5, 4, 3, 5] 0
1689 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 5, 4, 3, 4] 0
1690 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 5, 4, 3] 0
1691 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 5, 4, 5] 0
1692 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 5, 4] 0
1693 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 5, 3] 0
1694 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 5] 0
1695 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 4, 3, 4] 0
1696 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 4, 3] 0
1697 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 4] 0
1698 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 3] 0
1699 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2] 0
1700 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 5, 4, 5] 0
1701 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 5, 4] 0
1702 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 5] 0
1703 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 4] 0
1704 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3] 0
1705 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 2, 5] 0
1706 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 2] 0
1707 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 5] 0
1708 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4] 0
1709 [7, 6, 5, 4, 3, 2, 1, 7, 5, 3, 2, 3] 0
1710 [7, 6, 5, 4, 3, 2, 1, 7, 5, 3, 2] 0
1711 [7, 6, 5, 4, 3, 2, 1, 7, 5, 3] 0
1712 [7, 6, 5, 4, 3, 2, 1, 7, 5, 2] 0
1713 [7, 6, 5, 4, 3, 2, 1, 7, 5] 0
1714 [7, 6, 5, 4, 3, 2, 1, 7, 4, 3, 2, 4, 3, 4] 0
1715 [7, 6, 5, 4, 3, 2, 1, 7, 4, 3, 2, 4, 3] 0
1716 [7, 6, 5, 4, 3, 2, 1, 7, 4, 3, 2, 4] 0
1717 [7, 6, 5, 4, 3, 2, 1, 7, 4, 3, 2, 3] 0
1718 [7, 6, 5, 4, 3, 2, 1, 7, 4, 3, 2] 0
1719 [7, 6, 5, 4, 3, 2, 1, 7, 4, 3, 4] 0
1720 [7, 6, 5, 4, 3, 2, 1, 7, 4, 3] 0
1721 [7, 6, 5, 4, 3, 2, 1, 7, 4, 2] 0
1722 [7, 6, 5, 4, 3, 2, 1, 7, 4] 0
1723 [7, 6, 5, 4, 3, 2, 1, 7, 3, 2, 3] 0
1724 [7, 6, 5, 4, 3, 2, 1, 7, 3, 2] 0
1725 [7, 6, 5, 4, 3, 2, 1, 7, 3] 0
1726 [7, 6, 5, 4, 3, 2, 1, 7, 2] 0
1727 [7, 6, 5, 4, 3, 2, 1, 7] 0
1728 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
1729 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
1730 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6] 0
1731 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 5] 0
1732 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4] 0
1733 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 6] 0
1734 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5] 0
1735 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 4] 0
1736 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6] 0
1737 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4, 5] 0
1738 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4] 0
1739 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5] 0
1740 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 4] 0
1741 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3] 0
1742 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5, 6] 0
1743 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5] 0
1744 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 6] 0
1745 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 5] 0
1746 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4] 0
1747 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 3, 6] 0
1748 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 3] 0
1749 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 6] 0
1750 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5] 0
1751 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 4, 3, 4] 0
1752 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 4, 3] 0
1753 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 4] 0
1754 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 3] 0
1755 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6] 0
1756 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
1757 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
1758 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3, 5] 0
1759 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3, 4] 0
1760 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3] 0
1761 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 5] 0
1762 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4] 0
1763 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 3] 0
1764 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5] 0
1765 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 4, 3, 4] 0
1766 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 4, 3] 0
1767 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 4] 0
1768 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 3] 0
1769 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2] 0
1770 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
1771 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
1772 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4, 6] 0
1773 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4, 5] 0
1774 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4] 0
1775 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 6] 0
1776 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5] 0
1777 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 4] 0
1778 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6] 0
1779 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 5, 4, 5] 0
1780 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 5, 4] 0
1781 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 5] 0
1782 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 4] 0
1783 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3] 0
1784 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 2, 6, 5, 6] 0
1785 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 2, 6, 5] 0
1786 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 2, 6] 0
1787 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 2, 5] 0
1788 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 2] 0
1789 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 6, 5, 6] 0
1790 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 6, 5] 0
1791 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 6] 0
1792 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 5] 0
1793 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4] 0
1794 [7, 6, 5, 4, 3, 2, 1, 6, 5, 3, 2, 6, 3] 0
1795 [7, 6, 5, 4, 3, 2, 1, 6, 5, 3, 2, 6] 0
1796 [7, 6, 5, 4, 3, 2, 1, 6, 5, 3, 2, 3] 0
1797 [7, 6, 5, 4, 3, 2, 1, 6, 5, 3, 2] 0
1798 [7, 6, 5, 4, 3, 2, 1, 6, 5, 3, 6] 0
1799 [7, 6, 5, 4, 3, 2, 1, 6, 5, 3] 0
1800 [7, 6, 5, 4, 3, 2, 1, 6, 5, 2, 6] 0
1801 [7, 6, 5, 4, 3, 2, 1, 6, 5, 2] 0
1802 [7, 6, 5, 4, 3, 2, 1, 6, 5, 6] 0
1803 [7, 6, 5, 4, 3, 2, 1, 6, 5] 0
1804 [7, 6, 5, 4, 3, 2, 1, 6, 4, 3, 2, 4, 3, 4] 0
1805 [7, 6, 5, 4, 3, 2, 1, 6, 4, 3, 2, 4, 3] 0
1806 [7, 6, 5, 4, 3, 2, 1, 6, 4, 3, 2, 4] 0
1807 [7, 6, 5, 4, 3, 2, 1, 6, 4, 3, 2, 3] 0
1808 [7, 6, 5, 4, 3, 2, 1, 6, 4, 3, 2] 0
1809 [7, 6, 5, 4, 3, 2, 1, 6, 4, 3, 4] 0
1810 [7, 6, 5, 4, 3, 2, 1, 6, 4, 3] 0
1811 [7, 6, 5, 4, 3, 2, 1, 6, 4, 2] 0
1812 [7, 6, 5, 4, 3, 2, 1, 6, 4] 0
1813 [7, 6, 5, 4, 3, 2, 1, 6, 3, 2, 3] 0
1814 [7, 6, 5, 4, 3, 2, 1, 6, 3, 2] 0
1815 [7, 6, 5, 4, 3, 2, 1, 6, 3] 0
1816 [7, 6, 5, 4, 3, 2, 1, 6, 2] 0
1817 [7, 6, 5, 4, 3, 2, 1, 6] 0
1818 [7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
1819 [7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
1820 [7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] 0
1821 [7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] 0
1822 [7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] 0
1823 [7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] 0
1824 [7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] 0
1825 [7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] 0
1826 [7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5] 0
1827 [7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] 0
1828 [7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] 0
1829 [7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4] 0
1830 [7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 3] 0
1831 [7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2] 0
1832 [7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] 0
1833 [7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4] 0
1834 [7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 5] 0
1835 [7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 4] 0
1836 [7, 6, 5, 4, 3, 2, 1, 5, 4, 3] 0
1837 [7, 6, 5, 4, 3, 2, 1, 5, 4, 2, 5] 0
1838 [7, 6, 5, 4, 3, 2, 1, 5, 4, 2] 0
1839 [7, 6, 5, 4, 3, 2, 1, 5, 4, 5] 0
1840 [7, 6, 5, 4, 3, 2, 1, 5, 4] 0
1841 [7, 6, 5, 4, 3, 2, 1, 5, 3, 2, 3] 0
1842 [7, 6, 5, 4, 3, 2, 1, 5, 3, 2] 0
1843 [7, 6, 5, 4, 3, 2, 1, 5, 3] 0
1844 [7, 6, 5, 4, 3, 2, 1, 5, 2] 0
1845 [7, 6, 5, 4, 3, 2, 1, 5] 0
1846 [7, 6, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
1847 [7, 6, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
1848 [7, 6, 5, 4, 3, 2, 1, 4, 3, 2, 4] 0
1849 [7, 6, 5, 4, 3, 2, 1, 4, 3, 2, 3] 0
1850 [7, 6, 5, 4, 3, 2, 1, 4, 3, 2] 0
1851 [7, 6, 5, 4, 3, 2, 1, 4, 3, 4] 0
1852 [7, 6, 5, 4, 3, 2, 1, 4, 3] 0
1853 [7, 6, 5, 4, 3, 2, 1, 4, 2] 0
1854 [7, 6, 5, 4, 3, 2, 1, 4] 0
1855 [7, 6, 5, 4, 3, 2, 1, 3, 2, 3] 0
1856 [7, 6, 5, 4, 3, 2, 1, 3, 2] 0
1857 [7, 6, 5, 4, 3, 2, 1, 3] 0
1858 [7, 6, 5, 4, 3, 2, 1, 2] 0
1859 [7, 6, 5, 4, 3, 2, 1] 0
1860 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7, 6, 7] 0
1861 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7, 6] 0
1862 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7] 0
1863 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 6] 0
1864 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5] 0
1865 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 7] 0
1866 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6] 0
1867 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 5] 0
1868 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7] 0
1869 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6, 5, 6] 0
1870 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6, 5] 0
1871 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6] 0
1872 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 5] 0
1873 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4] 0
1874 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6, 5, 7, 6, 7] 0
1875 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6, 5, 7, 6] 0
1876 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6, 5, 7] 0
1877 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6, 5, 6] 0
1878 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6, 5] 0
1879 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6, 4, 7] 0
1880 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6, 4] 0
1881 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6, 7] 0
1882 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6] 0
1883 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 5, 4, 5] 0
1884 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 5, 4] 0
1885 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 5] 0
1886 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 4] 0
1887 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7] 0
1888 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
1889 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
1890 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 6, 5, 4, 6] 0
1891 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 6, 5, 4, 5] 0
1892 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 6, 5, 4] 0
1893 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 6, 5, 6] 0
1894 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 6, 5] 0
1895 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 6, 4] 0
1896 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 6] 0
1897 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 5, 4, 5] 0
1898 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 5, 4] 0
1899 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 5] 0
1900 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 4] 0
1901 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3] 0
1902 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 7, 6, 5, 7, 6, 7] 0
1903 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 7, 6, 5, 7, 6] 0
1904 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 7, 6, 5, 7] 0
1905 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 7, 6, 5, 6] 0
1906 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 7, 6, 5] 0
1907 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 7, 6, 7] 0
1908 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 7, 6] 0
1909 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 7, 5] 0
1910 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 7] 0
1911 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 6, 5, 6] 0
1912 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 6, 5] 0
1913 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 6] 0
1914 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 5] 0
1915 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4] 0
1916 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 3, 7, 6, 7] 0
1917 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 3, 7, 6] 0
1918 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 3, 7] 0
1919 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 3, 6] 0
1920 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 3] 0
1921 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 7, 6, 7] 0
1922 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 7, 6] 0
1923 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 7] 0
1924 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 6] 0
1925 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5] 0
1926 [7, 6, 5, 4, 3, 2, 0, 7, 6, 4, 3, 7, 4] 0
1927 [7, 6, 5, 4, 3, 2, 0, 7, 6, 4, 3, 7] 0
1928 [7, 6, 5, 4, 3, 2, 0, 7, 6, 4, 3, 4] 0
1929 [7, 6, 5, 4, 3, 2, 0, 7, 6, 4, 3] 0
1930 [7, 6, 5, 4, 3, 2, 0, 7, 6, 4, 7] 0
1931 [7, 6, 5, 4, 3, 2, 0, 7, 6, 4] 0
1932 [7, 6, 5, 4, 3, 2, 0, 7, 6, 3, 7] 0
1933 [7, 6, 5, 4, 3, 2, 0, 7, 6, 3] 0
1934 [7, 6, 5, 4, 3, 2, 0, 7, 6, 7] 0
1935 [7, 6, 5, 4, 3, 2, 0, 7, 6] 0
1936 [7, 6, 5, 4, 3, 2, 0, 7, 5, 4, 3, 5, 4, 5] 0
1937 [7, 6, 5, 4, 3, 2, 0, 7, 5, 4, 3, 5, 4] 0
1938 [7, 6, 5, 4, 3, 2, 0, 7, 5, 4, 3, 5] 0
1939 [7, 6, 5, 4, 3, 2, 0, 7, 5, 4, 3, 4] 0
1940 [7, 6, 5, 4, 3, 2, 0, 7, 5, 4, 3] 0
1941 [7, 6, 5, 4, 3, 2, 0, 7, 5, 4, 5] 0
1942 [7, 6, 5, 4, 3, 2, 0, 7, 5, 4] 0
1943 [7, 6, 5, 4, 3, 2, 0, 7, 5, 3] 0
1944 [7, 6, 5, 4, 3, 2, 0, 7, 5] 0
1945 [7, 6, 5, 4, 3, 2, 0, 7, 4, 3, 4] 0
1946 [7, 6, 5, 4, 3, 2, 0, 7, 4, 3] 0
1947 [7, 6, 5, 4, 3, 2, 0, 7, 4] 0
1948 [7, 6, 5, 4, 3, 2, 0, 7, 3] 0
1949 [7, 6, 5, 4, 3, 2, 0, 7] 0
1950 [7, 6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
1951 [7, 6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
1952 [7, 6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 6, 5, 4, 6] 0
1953 [7, 6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 6, 5, 4, 5] 0
1954 [7, 6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 6, 5, 4] 0
1955 [7, 6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 6, 5, 6] 0
1956 [7, 6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 6, 5] 0
1957 [7, 6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 6, 4] 0
1958 [7, 6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 6] 0
1959 [7, 6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 5, 4, 5] 0
1960 [7, 6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 5, 4] 0
1961 [7, 6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 5] 0
1962 [7, 6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 4] 0
1963 [7, 6, 5, 4, 3, 2, 0, 6, 5, 4, 3] 0
1964 [7, 6, 5, 4, 3, 2, 0, 6, 5, 4, 6, 5, 6] 0
1965 [7, 6, 5, 4, 3, 2, 0, 6, 5, 4, 6, 5] 0
1966 [7, 6, 5, 4, 3, 2, 0, 6, 5, 4, 6] 0
1967 [7, 6, 5, 4, 3, 2, 0, 6, 5, 4, 5] 0
1968 [7, 6, 5, 4, 3, 2, 0, 6, 5, 4] 0
1969 [7, 6, 5, 4, 3, 2, 0, 6, 5, 3, 6] 0
1970 [7, 6, 5, 4, 3, 2, 0, 6, 5, 3] 0
1971 [7, 6, 5, 4, 3, 2, 0, 6, 5, 6] 0
1972 [7, 6, 5, 4, 3, 2, 0, 6, 5] 0
1973 [7, 6, 5, 4, 3, 2, 0, 6, 4, 3, 4] 0
1974 [7, 6, 5, 4, 3, 2, 0, 6, 4, 3] 0
1975 [7, 6, 5, 4, 3, 2, 0, 6, 4] 0
1976 [7, 6, 5, 4, 3, 2, 0, 6, 3] 0
1977 [7, 6, 5, 4, 3, 2, 0, 6] 0
1978 [7, 6, 5, 4, 3, 2, 0, 5, 4, 3, 5, 4, 5] 0
1979 [7, 6, 5, 4, 3, 2, 0, 5, 4, 3, 5, 4] 0
1980 [7, 6, 5, 4, 3, 2, 0, 5, 4, 3, 5] 0
1981 [7, 6, 5, 4, 3, 2, 0, 5, 4, 3, 4] 0
1982 [7, 6, 5, 4, 3, 2, 0, 5, 4, 3] 0
1983 [7, 6, 5, 4, 3, 2, 0, 5, 4, 5] 0
1984 [7, 6, 5, 4, 3, 2, 0, 5, 4] 0
1985 [7, 6, 5, 4, 3, 2, 0, 5, 3] 0
1986 [7, 6, 5, 4, 3, 2, 0, 5] 0
1987 [7, 6, 5, 4, 3, 2, 0, 4, 3, 4] 0
1988 [7, 6, 5, 4, 3, 2, 0, 4, 3] 0
1989 [7, 6, 5, 4, 3, 2, 0, 4] 0
1990 [7, 6, 5, 4, 3, 2, 0, 3] 0
1991 [7, 6, 5, 4, 3, 2, 0] 0
1992 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7, 6, 7] 0
1993 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7, 6] 0
1994 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7] 0
1995 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 6] 0
1996 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5] 0
1997 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 7] 0
1998 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6] 0
1999 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 5] 0
2000 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7] 0
2001 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6, 5, 6] 0
2002 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6, 5] 0
2003 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6] 0
2004 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 5] 0
2005 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4] 0
2006 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 7, 6, 7] 0
2007 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 7, 6] 0
2008 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 7] 0
2009 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 6] 0
2010 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5] 0
2011 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 4, 7] 0
2012 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 4] 0
2013 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 7] 0
2014 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6] 0
2015 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 5, 4, 5] 0
2016 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 5, 4] 0
2017 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 5] 0
2018 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 4] 0
2019 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7] 0
2020 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
2021 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
2022 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 4, 6] 0
2023 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 4, 5] 0
2024 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 4] 0
2025 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 6] 0
2026 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5] 0
2027 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 4] 0
2028 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6] 0
2029 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 5, 4, 5] 0
2030 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 5, 4] 0
2031 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 5] 0
2032 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 4] 0
2033 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3] 0
2034 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 5, 7, 6, 7] 0
2035 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 5, 7, 6] 0
2036 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 5, 7] 0
2037 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 5, 6] 0
2038 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 5] 0
2039 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 7] 0
2040 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6] 0
2041 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 5] 0
2042 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7] 0
2043 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 6, 5, 6] 0
2044 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 6, 5] 0
2045 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 6] 0
2046 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 5] 0
2047 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4] 0
2048 [7, 6, 5, 4, 3, 2, 7, 6, 5, 3, 7, 6, 7] 0
2049 [7, 6, 5, 4, 3, 2, 7, 6, 5, 3, 7, 6] 0
2050 [7, 6, 5, 4, 3, 2, 7, 6, 5, 3, 7] 0
2051 [7, 6, 5, 4, 3, 2, 7, 6, 5, 3, 6] 0
2052 [7, 6, 5, 4, 3, 2, 7, 6, 5, 3] 0
2053 [7, 6, 5, 4, 3, 2, 7, 6, 5, 7, 6, 7] 0
2054 [7, 6, 5, 4, 3, 2, 7, 6, 5, 7, 6] 0
2055 [7, 6, 5, 4, 3, 2, 7, 6, 5, 7] 0
2056 [7, 6, 5, 4, 3, 2, 7, 6, 5, 6] 0
2057 [7, 6, 5, 4, 3, 2, 7, 6, 5] 0
2058 [7, 6, 5, 4, 3, 2, 7, 6, 4, 3, 7, 4] 0
2059 [7, 6, 5, 4, 3, 2, 7, 6, 4, 3, 7] 0
2060 [7, 6, 5, 4, 3, 2, 7, 6, 4, 3, 4] 0
2061 [7, 6, 5, 4, 3, 2, 7, 6, 4, 3] 0
2062 [7, 6, 5, 4, 3, 2, 7, 6, 4, 7] 0
2063 [7, 6, 5, 4, 3, 2, 7, 6, 4] 0
2064 [7, 6, 5, 4, 3, 2, 7, 6, 3, 7] 0
2065 [7, 6, 5, 4, 3, 2, 7, 6, 3] 0
2066 [7, 6, 5, 4, 3, 2, 7, 6, 7] 0
2067 [7, 6, 5, 4, 3, 2, 7, 6] 0
2068 [7, 6, 5, 4, 3, 2, 7, 5, 4, 3, 5, 4, 5] 0
2069 [7, 6, 5, 4, 3, 2, 7, 5, 4, 3, 5, 4] 0
2070 [7, 6, 5, 4, 3, 2, 7, 5, 4, 3, 5] 0
2071 [7, 6, 5, 4, 3, 2, 7, 5, 4, 3, 4] 0
2072 [7, 6, 5, 4, 3, 2, 7, 5, 4, 3] 0
2073 [7, 6, 5, 4, 3, 2, 7, 5, 4, 5] 0
2074 [7, 6, 5, 4, 3, 2, 7, 5, 4] 0
2075 [7, 6, 5, 4, 3, 2, 7, 5, 3] 0
2076 [7, 6, 5, 4, 3, 2, 7, 5] 0
2077 [7, 6, 5, 4, 3, 2, 7, 4, 3, 4] 0
2078 [7, 6, 5, 4, 3, 2, 7, 4, 3] 0
2079 [7, 6, 5, 4, 3, 2, 7, 4] 0
2080 [7, 6, 5, 4, 3, 2, 7, 3] 0
2081 [7, 6, 5, 4, 3, 2, 7] 0
2082 [7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
2083 [7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
2084 [7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6] 0
2085 [7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 5] 0
2086 [7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4] 0
2087 [7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 6] 0
2088 [7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5] 0
2089 [7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 4] 0
2090 [7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6] 0
2091 [7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4, 5] 0
2092 [7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4] 0
2093 [7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5] 0
2094 [7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 4] 0
2095 [7, 6, 5, 4, 3, 2, 6, 5, 4, 3] 0
2096 [7, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5, 6] 0
2097 [7, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5] 0
2098 [7, 6, 5, 4, 3, 2, 6, 5, 4, 6] 0
2099 [7, 6, 5, 4, 3, 2, 6, 5, 4, 5] 0
2100 [7, 6, 5, 4, 3, 2, 6, 5, 4] 0
2101 [7, 6, 5, 4, 3, 2, 6, 5, 3, 6] 0
2102 [7, 6, 5, 4, 3, 2, 6, 5, 3] 0
2103 [7, 6, 5, 4, 3, 2, 6, 5, 6] 0
2104 [7, 6, 5, 4, 3, 2, 6, 5] 0
2105 [7, 6, 5, 4, 3, 2, 6, 4, 3, 4] 0
2106 [7, 6, 5, 4, 3, 2, 6, 4, 3] 0
2107 [7, 6, 5, 4, 3, 2, 6, 4] 0
2108 [7, 6, 5, 4, 3, 2, 6, 3] 0
2109 [7, 6, 5, 4, 3, 2, 6] 0
2110 [7, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
2111 [7, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
2112 [7, 6, 5, 4, 3, 2, 5, 4, 3, 5] 0
2113 [7, 6, 5, 4, 3, 2, 5, 4, 3, 4] 0
2114 [7, 6, 5, 4, 3, 2, 5, 4, 3] 0
2115 [7, 6, 5, 4, 3, 2, 5, 4, 5] 0
2116 [7, 6, 5, 4, 3, 2, 5, 4] 0
2117 [7, 6, 5, 4, 3, 2, 5, 3] 0
2118 [7, 6, 5, 4, 3, 2, 5] 0
2119 [7, 6, 5, 4, 3, 2, 4, 3, 4] 0
2120 [7, 6, 5, 4, 3, 2, 4, 3] 0
2121 [7, 6, 5, 4, 3, 2, 4] 0
2122 [7, 6, 5, 4, 3, 2, 3] 0
2123 [7, 6, 5, 4, 3, 2] 0
2124 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 1, 7, 6, 5, 7, 6, 7] 0
2125 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 1, 7, 6, 5, 7, 6] 0
2126 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 1, 7, 6, 5, 7] 0
2127 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 1, 7, 6, 5, 6] 0
2128 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 1, 7, 6, 5] 0
2129 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 1, 7, 6, 7] 0
2130 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 1, 7, 6] 0
2131 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 1, 7, 5] 0
2132 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 1, 7] 0
2133 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 1, 6, 5, 6] 0
2134 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 1, 6, 5] 0
2135 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 1, 6] 0
2136 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 1, 5] 0
2137 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 1] 0
2138 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 7, 6, 5, 7, 6, 7] 0
2139 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 7, 6, 5, 7, 6] 0
2140 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 7, 6, 5, 7] 0
2141 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 7, 6, 5, 6] 0
2142 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 7, 6, 5] 0
2143 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 7, 6, 7] 0
2144 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 7, 6] 0
2145 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 7, 5] 0
2146 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 7] 0
2147 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 6, 5, 6] 0
2148 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 6, 5] 0
2149 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 6] 0
2150 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 5] 0
2151 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4] 0
2152 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 1, 7, 6, 7] 0
2153 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 1, 7, 6] 0
2154 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 1, 7] 0
2155 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 1, 6] 0
2156 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 1] 0
2157 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 7, 6, 7] 0
2158 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 7, 6] 0
2159 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 7] 0
2160 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 6] 0
2161 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5] 0
2162 [7, 6, 5, 4, 3, 1, 0, 7, 6, 4, 1, 7] 0
2163 [7, 6, 5, 4, 3, 1, 0, 7, 6, 4, 1] 0
2164 [7, 6, 5, 4, 3, 1, 0, 7, 6, 4, 7] 0
2165 [7, 6, 5, 4, 3, 1, 0, 7, 6, 4] 0
2166 [7, 6, 5, 4, 3, 1, 0, 7, 6, 1, 7] 0
2167 [7, 6, 5, 4, 3, 1, 0, 7, 6, 1] 0
2168 [7, 6, 5, 4, 3, 1, 0, 7, 6, 7] 0
2169 [7, 6, 5, 4, 3, 1, 0, 7, 6] 0
2170 [7, 6, 5, 4, 3, 1, 0, 7, 5, 4, 1, 5] 0
2171 [7, 6, 5, 4, 3, 1, 0, 7, 5, 4, 1] 0
2172 [7, 6, 5, 4, 3, 1, 0, 7, 5, 4, 5] 0
2173 [7, 6, 5, 4, 3, 1, 0, 7, 5, 4] 0
2174 [7, 6, 5, 4, 3, 1, 0, 7, 5, 1] 0
2175 [7, 6, 5, 4, 3, 1, 0, 7, 5] 0
2176 [7, 6, 5, 4, 3, 1, 0, 7, 4, 1] 0
2177 [7, 6, 5, 4, 3, 1, 0, 7, 4] 0
2178 [7, 6, 5, 4, 3, 1, 0, 7, 1] 0
2179 [7, 6, 5, 4, 3, 1, 0, 7] 0
2180 [7, 6, 5, 4, 3, 1, 0, 6, 5, 4, 1, 6, 5, 6] 0
2181 [7, 6, 5, 4, 3, 1, 0, 6, 5, 4, 1, 6, 5] 0
2182 [7, 6, 5, 4, 3, 1, 0, 6, 5, 4, 1, 6] 0
2183 [7, 6, 5, 4, 3, 1, 0, 6, 5, 4, 1, 5] 0
2184 [7, 6, 5, 4, 3, 1, 0, 6, 5, 4, 1] 0
2185 [7, 6, 5, 4, 3, 1, 0, 6, 5, 4, 6, 5, 6] 0
2186 [7, 6, 5, 4, 3, 1, 0, 6, 5, 4, 6, 5] 0
2187 [7, 6, 5, 4, 3, 1, 0, 6, 5, 4, 6] 0
2188 [7, 6, 5, 4, 3, 1, 0, 6, 5, 4, 5] 0
2189 [7, 6, 5, 4, 3, 1, 0, 6, 5, 4] 0
2190 [7, 6, 5, 4, 3, 1, 0, 6, 5, 1, 6] 0
2191 [7, 6, 5, 4, 3, 1, 0, 6, 5, 1] 0
2192 [7, 6, 5, 4, 3, 1, 0, 6, 5, 6] 0
2193 [7, 6, 5, 4, 3, 1, 0, 6, 5] 0
2194 [7, 6, 5, 4, 3, 1, 0, 6, 4, 1] 0
2195 [7, 6, 5, 4, 3, 1, 0, 6, 4] 0
2196 [7, 6, 5, 4, 3, 1, 0, 6, 1] 0
2197 [7, 6, 5, 4, 3, 1, 0, 6] 0
2198 [7, 6, 5, 4, 3, 1, 0, 5, 4, 1, 5] 0
2199 [7, 6, 5, 4, 3, 1, 0, 5, 4, 1] 0
2200 [7, 6, 5, 4, 3, 1, 0, 5, 4, 5] 0
2201 [7, 6, 5, 4, 3, 1, 0, 5, 4] 0
2202 [7, 6, 5, 4, 3, 1, 0, 5, 1] 0
2203 [7, 6, 5, 4, 3, 1, 0, 5] 0
2204 [7, 6, 5, 4, 3, 1, 0, 4, 1] 0
2205 [7, 6, 5, 4, 3, 1, 0, 4] 0
2206 [7, 6, 5, 4, 3, 1, 0, 1] 0
2207 [7, 6, 5, 4, 3, 1, 0] 0
2208 [7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 7, 6, 5, 7, 6, 7] 0
2209 [7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 7, 6, 5, 7, 6] 0
2210 [7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 7, 6, 5, 7] 0
2211 [7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 7, 6, 5, 6] 0
2212 [7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 7, 6, 5] 0
2213 [7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 7, 6, 7] 0
2214 [7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 7, 6] 0
2215 [7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 7, 5] 0
2216 [7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 7] 0
2217 [7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 6, 5, 6] 0
2218 [7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 6, 5] 0
2219 [7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 6] 0
2220 [7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 5] 0
2221 [7, 6, 5, 4, 3, 1, 7, 6, 5, 4] 0
2222 [7, 6, 5, 4, 3, 1, 7, 6, 5, 7, 6, 7] 0
2223 [7, 6, 5, 4, 3, 1, 7, 6, 5, 7, 6] 0
2224 [7, 6, 5, 4, 3, 1, 7, 6, 5, 7] 0
2225 [7, 6, 5, 4, 3, 1, 7, 6, 5, 6] 0
2226 [7, 6, 5, 4, 3, 1, 7, 6, 5] 0
2227 [7, 6, 5, 4, 3, 1, 7, 6, 4, 7] 0
2228 [7, 6, 5, 4, 3, 1, 7, 6, 4] 0
2229 [7, 6, 5, 4, 3, 1, 7, 6, 7] 0
2230 [7, 6, 5, 4, 3, 1, 7, 6] 0
2231 [7, 6, 5, 4, 3, 1, 7, 5, 4, 5] 0
2232 [7, 6, 5, 4, 3, 1, 7, 5, 4] 0
2233 [7, 6, 5, 4, 3, 1, 7, 5] 0
2234 [7, 6, 5, 4, 3, 1, 7, 4] 0
2235 [7, 6, 5, 4, 3, 1, 7] 0
2236 [7, 6, 5, 4, 3, 1, 6, 5, 4, 6, 5, 6] 0
2237 [7, 6, 5, 4, 3, 1, 6, 5, 4, 6, 5] 0
2238 [7, 6, 5, 4, 3, 1, 6, 5, 4, 6] 0
2239 [7, 6, 5, 4, 3, 1, 6, 5, 4, 5] 0
2240 [7, 6, 5, 4, 3, 1, 6, 5, 4] 0
2241 [7, 6, 5, 4, 3, 1, 6, 5, 6] 0
2242 [7, 6, 5, 4, 3, 1, 6, 5] 0
2243 [7, 6, 5, 4, 3, 1, 6, 4] 0
2244 [7, 6, 5, 4, 3, 1, 6] 0
2245 [7, 6, 5, 4, 3, 1, 5, 4, 5] 0
2246 [7, 6, 5, 4, 3, 1, 5, 4] 0
2247 [7, 6, 5, 4, 3, 1, 5] 0
2248 [7, 6, 5, 4, 3, 1, 4] 0
2249 [7, 6, 5, 4, 3, 1] 0
2250 [7, 6, 5, 4, 3, 0, 7, 6, 5, 4, 7, 6, 5, 7, 6, 7] 0
2251 [7, 6, 5, 4, 3, 0, 7, 6, 5, 4, 7, 6, 5, 7, 6] 0
2252 [7, 6, 5, 4, 3, 0, 7, 6, 5, 4, 7, 6, 5, 7] 0
2253 [7, 6, 5, 4, 3, 0, 7, 6, 5, 4, 7, 6, 5, 6] 0
2254 [7, 6, 5, 4, 3, 0, 7, 6, 5, 4, 7, 6, 5] 0
2255 [7, 6, 5, 4, 3, 0, 7, 6, 5, 4, 7, 6, 7] 0
2256 [7, 6, 5, 4, 3, 0, 7, 6, 5, 4, 7, 6] 0
2257 [7, 6, 5, 4, 3, 0, 7, 6, 5, 4, 7, 5] 0
2258 [7, 6, 5, 4, 3, 0, 7, 6, 5, 4, 7] 0
2259 [7, 6, 5, 4, 3, 0, 7, 6, 5, 4, 6, 5, 6] 0
2260 [7, 6, 5, 4, 3, 0, 7, 6, 5, 4, 6, 5] 0
2261 [7, 6, 5, 4, 3, 0, 7, 6, 5, 4, 6] 0
2262 [7, 6, 5, 4, 3, 0, 7, 6, 5, 4, 5] 0
2263 [7, 6, 5, 4, 3, 0, 7, 6, 5, 4] 0
2264 [7, 6, 5, 4, 3, 0, 7, 6, 5, 7, 6, 7] 0
2265 [7, 6, 5, 4, 3, 0, 7, 6, 5, 7, 6] 0
2266 [7, 6, 5, 4, 3, 0, 7, 6, 5, 7] 0
2267 [7, 6, 5, 4, 3, 0, 7, 6, 5, 6] 0
2268 [7, 6, 5, 4, 3, 0, 7, 6, 5] 0
2269 [7, 6, 5, 4, 3, 0, 7, 6, 4, 7] 0
2270 [7, 6, 5, 4, 3, 0, 7, 6, 4] 0
2271 [7, 6, 5, 4, 3, 0, 7, 6, 7] 0
2272 [7, 6, 5, 4, 3, 0, 7, 6] 0
2273 [7, 6, 5, 4, 3, 0, 7, 5, 4, 5] 0
2274 [7, 6, 5, 4, 3, 0, 7, 5, 4] 0
2275 [7, 6, 5, 4, 3, 0, 7, 5] 0
2276 [7, 6, 5, 4, 3, 0, 7, 4] 0
2277 [7, 6, 5, 4, 3, 0, 7] 0
2278 [7, 6, 5, 4, 3, 0, 6, 5, 4, 6, 5, 6] 0
2279 [7, 6, 5, 4, 3, 0, 6, 5, 4, 6, 5] 0
2280 [7, 6, 5, 4, 3, 0, 6, 5, 4, 6] 0
2281 [7, 6, 5, 4, 3, 0, 6, 5, 4, 5] 0
2282 [7, 6, 5, 4, 3, 0, 6, 5, 4] 0
2283 [7, 6, 5, 4, 3, 0, 6, 5, 6] 0
2284 [7, 6, 5, 4, 3, 0, 6, 5] 0
2285 [7, 6, 5, 4, 3, 0, 6, 4] 0
2286 [7, 6, 5, 4, 3, 0, 6] 0
2287 [7, 6, 5, 4, 3, 0, 5, 4, 5] 0
2288 [7, 6, 5, 4, 3, 0, 5, 4] 0
2289 [7, 6, 5, 4, 3, 0, 5] 0
2290 [7, 6, 5, 4, 3, 0, 4] 0
2291 [7, 6, 5, 4, 3, 0] 0
2292 [7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7, 6, 7] 0
2293 [7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7, 6] 0
2294 [7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7] 0
2295 [7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 6] 0
2296 [7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5] 0
2297 [7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 7] 0
2298 [7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6] 0
2299 [7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 5] 0
2300 [7, 6, 5, 4, 3, 7, 6, 5, 4, 7] 0
2301 [7, 6, 5, 4, 3, 7, 6, 5, 4, 6, 5, 6] 0
2302 [7, 6, 5, 4, 3, 7, 6, 5, 4, 6, 5] 0
2303 [7, 6, 5, 4, 3, 7, 6, 5, 4, 6] 0
2304 [7, 6, 5, 4, 3, 7, 6, 5, 4, 5] 0
2305 [7, 6, 5, 4, 3, 7, 6, 5, 4] 0
2306 [7, 6, 5, 4, 3, 7, 6, 5, 7, 6, 7] 0
2307 [7, 6, 5, 4, 3, 7, 6, 5, 7, 6] 0
2308 [7, 6, 5, 4, 3, 7, 6, 5, 7] 0
2309 [7, 6, 5, 4, 3, 7, 6, 5, 6] 0
2310 [7, 6, 5, 4, 3, 7, 6, 5] 0
2311 [7, 6, 5, 4, 3, 7, 6, 4, 7] 0
2312 [7, 6, 5, 4, 3, 7, 6, 4] 0
2313 [7, 6, 5, 4, 3, 7, 6, 7] 0
2314 [7, 6, 5, 4, 3, 7, 6] 0
2315 [7, 6, 5, 4, 3, 7, 5, 4, 5] 0
2316 [7, 6, 5, 4, 3, 7, 5, 4] 0
2317 [7, 6, 5, 4, 3, 7, 5] 0
2318 [7, 6, 5, 4, 3, 7, 4] 0
2319 [7, 6, 5, 4, 3, 7] 0
2320 [7, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
2321 [7, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
2322 [7, 6, 5, 4, 3, 6, 5, 4, 6] 0
2323 [7, 6, 5, 4, 3, 6, 5, 4, 5] 0
2324 [7, 6, 5, 4, 3, 6, 5, 4] 0
2325 [7, 6, 5, 4, 3, 6, 5, 6] 0
2326 [7, 6, 5, 4, 3, 6, 5] 0
2327 [7, 6, 5, 4, 3, 6, 4] 0
2328 [7, 6, 5, 4, 3, 6] 0
2329 [7, 6, 5, 4, 3, 5, 4, 5] 0
2330 [7, 6, 5, 4, 3, 5, 4] 0
2331 [7, 6, 5, 4, 3, 5] 0
2332 [7, 6, 5, 4, 3, 4] 0
2333 [7, 6, 5, 4, 3] 0
2334 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 2, 1, 7, 6, 2, 7] 0
2335 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 2, 1, 7, 6, 2] 0
2336 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 2, 1, 7, 6, 7] 0
2337 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 2, 1, 7, 6] 0
2338 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 2, 1, 7, 2] 0
2339 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 2, 1, 7] 0
2340 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 2, 1, 6, 2] 0
2341 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 2, 1, 6] 0
2342 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 2, 1, 2] 0
2343 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 2, 1] 0
2344 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 2, 7, 6, 7] 0
2345 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 2, 7, 6] 0
2346 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 2, 7] 0
2347 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 2, 6] 0
2348 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 2] 0
2349 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 1, 7, 6, 7] 0
2350 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 1, 7, 6] 0
2351 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 1, 7] 0
2352 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 1, 6] 0
2353 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 1] 0
2354 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 7, 6, 7] 0
2355 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 7, 6] 0
2356 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 7] 0
2357 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 6] 0
2358 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5] 0
2359 [7, 6, 5, 4, 2, 1, 0, 7, 6, 2, 1, 7, 2] 0
2360 [7, 6, 5, 4, 2, 1, 0, 7, 6, 2, 1, 7] 0
2361 [7, 6, 5, 4, 2, 1, 0, 7, 6, 2, 1, 2] 0
2362 [7, 6, 5, 4, 2, 1, 0, 7, 6, 2, 1] 0
2363 [7, 6, 5, 4, 2, 1, 0, 7, 6, 2, 7] 0
2364 [7, 6, 5, 4, 2, 1, 0, 7, 6, 2] 0
2365 [7, 6, 5, 4, 2, 1, 0, 7, 6, 1, 7] 0
2366 [7, 6, 5, 4, 2, 1, 0, 7, 6, 1] 0
2367 [7, 6, 5, 4, 2, 1, 0, 7, 6, 7] 0
2368 [7, 6, 5, 4, 2, 1, 0, 7, 6] 0
2369 [7, 6, 5, 4, 2, 1, 0, 7, 5, 2, 1, 2] 0
2370 [7, 6, 5, 4, 2, 1, 0, 7, 5, 2, 1] 0
2371 [7, 6, 5, 4, 2, 1, 0, 7, 5, 2] 0
2372 [7, 6, 5, 4, 2, 1, 0, 7, 5, 1] 0
2373 [7, 6, 5, 4, 2, 1, 0, 7, 5] 0
2374 [7, 6, 5, 4, 2, 1, 0, 7, 2, 1, 2] 0
2375 [7, 6, 5, 4, 2, 1, 0, 7, 2, 1] 0
2376 [7, 6, 5, 4, 2, 1, 0, 7, 2] 0
2377 [7, 6, 5, 4, 2, 1, 0, 7, 1] 0
2378 [7, 6, 5, 4, 2, 1, 0, 7] 0
2379 [7, 6, 5, 4, 2, 1, 0, 6, 5, 2, 1, 6, 2] 0
2380 [7, 6, 5, 4, 2, 1, 0, 6, 5, 2, 1, 6] 0
2381 [7, 6, 5, 4, 2, 1, 0, 6, 5, 2, 1, 2] 0
2382 [7, 6, 5, 4, 2, 1, 0, 6, 5, 2, 1] 0
2383 [7, 6, 5, 4, 2, 1, 0, 6, 5, 2, 6] 0
2384 [7, 6, 5, 4, 2, 1, 0, 6, 5, 2] 0
2385 [7, 6, 5, 4, 2, 1, 0, 6, 5, 1, 6] 0
2386 [7, 6, 5, 4, 2, 1, 0, 6, 5, 1] 0
2387 [7, 6, 5, 4, 2, 1, 0, 6, 5, 6] 0
2388 [7, 6, 5, 4, 2, 1, 0, 6, 5] 0
2389 [7, 6, 5, 4, 2, 1, 0, 6, 2, 1, 2] 0
2390 [7, 6, 5, 4, 2, 1, 0, 6, 2, 1] 0
2391 [7, 6, 5, 4, 2, 1, 0, 6, 2] 0
2392 [7, 6, 5, 4, 2, 1, 0, 6, 1] 0
2393 [7, 6, 5, 4, 2, 1, 0, 6] 0
2394 [7, 6, 5, 4, 2, 1, 0, 5, 2, 1, 2] 0
2395 [7, 6, 5, 4, 2, 1, 0, 5, 2, 1] 0
2396 [7, 6, 5, 4, 2, 1, 0, 5, 2] 0
2397 [7, 6, 5, 4, 2, 1, 0, 5, 1] 0
2398 [7, 6, 5, 4, 2, 1, 0, 5] 0
2399 [7, 6, 5, 4, 2, 1, 0, 2, 1, 2] 0
2400 [7, 6, 5, 4, 2, 1, 0, 2, 1] 0
2401 [7, 6, 5, 4, 2, 1, 0, 2] 0
2402 [7, 6, 5, 4, 2, 1, 0, 1] 0
2403 [7, 6, 5, 4, 2, 1, 0] 0
2404 [7, 6, 5, 4, 2, 1, 7, 6, 5, 2, 7, 6, 7] 0
2405 [7, 6, 5, 4, 2, 1, 7, 6, 5, 2, 7, 6] 0
2406 [7, 6, 5, 4, 2, 1, 7, 6, 5, 2, 7] 0
2407 [7, 6, 5, 4, 2, 1, 7, 6, 5, 2, 6] 0
2408 [7, 6, 5, 4, 2, 1, 7, 6, 5, 2] 0
2409 [7, 6, 5, 4, 2, 1, 7, 6, 5, 7, 6, 7] 0
2410 [7, 6, 5, 4, 2, 1, 7, 6, 5, 7, 6] 0
2411 [7, 6, 5, 4, 2, 1, 7, 6, 5, 7] 0
2412 [7, 6, 5, 4, 2, 1, 7, 6, 5, 6] 0
2413 [7, 6, 5, 4, 2, 1, 7, 6, 5] 0
2414 [7, 6, 5, 4, 2, 1, 7, 6, 2, 7] 0
2415 [7, 6, 5, 4, 2, 1, 7, 6, 2] 0
2416 [7, 6, 5, 4, 2, 1, 7, 6, 7] 0
2417 [7, 6, 5, 4, 2, 1, 7, 6] 0
2418 [7, 6, 5, 4, 2, 1, 7, 5, 2] 0
2419 [7, 6, 5, 4, 2, 1, 7, 5] 0
2420 [7, 6, 5, 4, 2, 1, 7, 2] 0
2421 [7, 6, 5, 4, 2, 1, 7] 0
2422 [7, 6, 5, 4, 2, 1, 6, 5, 2, 6] 0
2423 [7, 6, 5, 4, 2, 1, 6, 5, 2] 0
2424 [7, 6, 5, 4, 2, 1, 6, 5, 6] 0
2425 [7, 6, 5, 4, 2, 1, 6, 5] 0
2426 [7, 6, 5, 4, 2, 1, 6, 2] 0
2427 [7, 6, 5, 4, 2, 1, 6] 0
2428 [7, 6, 5, 4, 2, 1, 5, 2] 0
2429 [7, 6, 5, 4, 2, 1, 5] 0
2430 [7, 6, 5, 4, 2, 1, 2] 0
2431 [7, 6, 5, 4, 2, 1] 0
2432 [7, 6, 5, 4, 2, 0, 7, 6, 5, 7, 6, 7] 0
2433 [7, 6, 5, 4, 2, 0, 7, 6, 5, 7, 6] 0
2434 [7, 6, 5, 4, 2, 0, 7, 6, 5, 7] 0
2435 [7, 6, 5, 4, 2, 0, 7, 6, 5, 6] 0
2436 [7, 6, 5, 4, 2, 0, 7, 6, 5] 0
2437 [7, 6, 5, 4, 2, 0, 7, 6, 7] 0
2438 [7, 6, 5, 4, 2, 0, 7, 6] 0
2439 [7, 6, 5, 4, 2, 0, 7, 5] 0
2440 [7, 6, 5, 4, 2, 0, 7] 0
2441 [7, 6, 5, 4, 2, 0, 6, 5, 6] 0
2442 [7, 6, 5, 4, 2, 0, 6, 5] 0
2443 [7, 6, 5, 4, 2, 0, 6] 0
2444 [7, 6, 5, 4, 2, 0, 5] 0
2445 [7, 6, 5, 4, 2, 0] 0
2446 [7, 6, 5, 4, 2, 7, 6, 5, 7, 6, 7] 0
2447 [7, 6, 5, 4, 2, 7, 6, 5, 7, 6] 0
2448 [7, 6, 5, 4, 2, 7, 6, 5, 7] 0
2449 [7, 6, 5, 4, 2, 7, 6, 5, 6] 0
2450 [7, 6, 5, 4, 2, 7, 6, 5] 0
2451 [7, 6, 5, 4, 2, 7, 6, 7] 0
2452 [7, 6, 5, 4, 2, 7, 6] 0
2453 [7, 6, 5, 4, 2, 7, 5] 0
2454 [7, 6, 5, 4, 2, 7] 0
2455 [7, 6, 5, 4, 2, 6, 5, 6] 0
2456 [7, 6, 5, 4, 2, 6, 5] 0
2457 [7, 6, 5, 4, 2, 6] 0
2458 [7, 6, 5, 4, 2, 5] 0
2459 [7, 6, 5, 4, 2] 0
2460 [7, 6, 5, 4, 1, 0, 7, 6, 5, 1, 7, 6, 7] 0
2461 [7, 6, 5, 4, 1, 0, 7, 6, 5, 1, 7, 6] 0
2462 [7, 6, 5, 4, 1, 0, 7, 6, 5, 1, 7] 0
2463 [7, 6, 5, 4, 1, 0, 7, 6, 5, 1, 6] 0
2464 [7, 6, 5, 4, 1, 0, 7, 6, 5, 1] 0
2465 [7, 6, 5, 4, 1, 0, 7, 6, 5, 7, 6, 7] 0
2466 [7, 6, 5, 4, 1, 0, 7, 6, 5, 7, 6] 0
2467 [7, 6, 5, 4, 1, 0, 7, 6, 5, 7] 0
2468 [7, 6, 5, 4, 1, 0, 7, 6, 5, 6] 0
2469 [7, 6, 5, 4, 1, 0, 7, 6, 5] 0
2470 [7, 6, 5, 4, 1, 0, 7, 6, 1, 7] 0
2471 [7, 6, 5, 4, 1, 0, 7, 6, 1] 0
2472 [7, 6, 5, 4, 1, 0, 7, 6, 7] 0
2473 [7, 6, 5, 4, 1, 0, 7, 6] 0
2474 [7, 6, 5, 4, 1, 0, 7, 5, 1] 0
2475 [7, 6, 5, 4, 1, 0, 7, 5] 0
2476 [7, 6, 5, 4, 1, 0, 7, 1] 0
2477 [7, 6, 5, 4, 1, 0, 7] 0
2478 [7, 6, 5, 4, 1, 0, 6, 5, 1, 6] 0
2479 [7, 6, 5, 4, 1, 0, 6, 5, 1] 0
2480 [7, 6, 5, 4, 1, 0, 6, 5, 6] 0
2481 [7, 6, 5, 4, 1, 0, 6, 5] 0
2482 [7, 6, 5, 4, 1, 0, 6, 1] 0
2483 [7, 6, 5, 4, 1, 0, 6] 0
2484 [7, 6, 5, 4, 1, 0, 5, 1] 0
2485 [7, 6, 5, 4, 1, 0, 5] 0
2486 [7, 6, 5, 4, 1, 0, 1] 0
2487 [7, 6, 5, 4, 1, 0] 0
2488 [7, 6, 5, 4, 1, 7, 6, 5, 7, 6, 7] 0
2489 [7, 6, 5, 4, 1, 7, 6, 5, 7, 6] 0
2490 [7, 6, 5, 4, 1, 7, 6, 5, 7] 0
2491 [7, 6, 5, 4, 1, 7, 6, 5, 6] 0
2492 [7, 6, 5, 4, 1, 7, 6, 5] 0
2493 [7, 6, 5, 4, 1, 7, 6, 7] 0
2494 [7, 6, 5, 4, 1, 7, 6] 0
2495 [7, 6, 5, 4, 1, 7, 5] 0
2496 [7, 6, 5, 4, 1, 7] 0
2497 [7, 6, 5, 4, 1, 6, 5, 6] 0
2498 [7, 6, 5, 4, 1, 6, 5] 0
2499 [7, 6, 5, 4, 1, 6] 0
2500 [7, 6, 5, 4, 1, 5] 0
2501 [7, 6, 5, 4, 1] 0
2502 [7, 6, 5, 4, 0, 7, 6, 5, 7, 6, 7] 0
2503 [7, 6, 5, 4, 0, 7, 6, 5, 7, 6] 0
2504 [7, 6, 5, 4, 0, 7, 6, 5, 7] 0
2505 [7, 6, 5, 4, 0, 7, 6, 5, 6] 0
2506 [7, 6, 5, 4, 0, 7, 6, 5] 0
2507 [7, 6, 5, 4, 0, 7, 6, 7] 0
2508 [7, 6, 5, 4, 0, 7, 6] 0
2509 [7, 6, 5, 4, 0, 7, 5] 0
2510 [7, 6, 5, 4, 0, 7] 0
2511 [7, 6, 5, 4, 0, 6, 5, 6] 0
2512 [7, 6, 5, 4, 0, 6, 5] 0
2513 [7, 6, 5, 4, 0, 6] 0
2514 [7, 6, 5, 4, 0, 5] 0
2515 [7, 6, 5, 4, 0] 0
2516 [7, 6, 5, 4, 7, 6, 5, 7, 6, 7] 0
2517 [7, 6, 5, 4, 7, 6, 5, 7, 6] 0
2518 [7, 6, 5, 4, 7, 6, 5, 7] 0
2519 [7, 6, 5, 4, 7, 6, 5, 6] 0
2520 [7, 6, 5, 4, 7, 6, 5] 0
2521 [7, 6, 5, 4, 7, 6, 7] 0
2522 [7, 6, 5, 4, 7, 6] 0
2523 [7, 6, 5, 4, 7, 5] 0
2524 [7, 6, 5, 4, 7] 0
2525 [7, 6, 5, 4, 6, 5, 6] 0
2526 [7, 6, 5, 4, 6, 5] 0
2527 [7, 6, 5, 4, 6] 0
2528 [7, 6, 5, 4, 5] 0
2529 [7, 6, 5, 4] 0
2530 [7, 6, 5, 3, 2, 1, 0, 7, 6, 3, 2, 1, 7, 3, 2, 3] 0
2531 [7, 6, 5, 3, 2, 1, 0, 7, 6, 3, 2, 1, 7, 3, 2] 0
2532 [7, 6, 5, 3, 2, 1, 0, 7, 6, 3, 2, 1, 7, 3] 0
2533 [7, 6, 5, 3, 2, 1, 0, 7, 6, 3, 2, 1, 7, 2] 0
2534 [7, 6, 5, 3, 2, 1, 0, 7, 6, 3, 2, 1, 7] 0
2535 [7, 6, 5, 3, 2, 1, 0, 7, 6, 3, 2, 1, 3, 2, 3] 0
2536 [7, 6, 5, 3, 2, 1, 0, 7, 6, 3, 2, 1, 3, 2] 0
2537 [7, 6, 5, 3, 2, 1, 0, 7, 6, 3, 2, 1, 3] 0
2538 [7, 6, 5, 3, 2, 1, 0, 7, 6, 3, 2, 1, 2] 0
2539 [7, 6, 5, 3, 2, 1, 0, 7, 6, 3, 2, 1] 0
2540 [7, 6, 5, 3, 2, 1, 0, 7, 6, 3, 2, 7, 3] 0
2541 [7, 6, 5, 3, 2, 1, 0, 7, 6, 3, 2, 7] 0
2542 [7, 6, 5, 3, 2, 1, 0, 7, 6, 3, 2, 3] 0
2543 [7, 6, 5, 3, 2, 1, 0, 7, 6, 3, 2] 0
2544 [7, 6, 5, 3, 2, 1, 0, 7, 6, 3, 1, 7] 0
2545 [7, 6, 5, 3, 2, 1, 0, 7, 6, 3, 1] 0
2546 [7, 6, 5, 3, 2, 1, 0, 7, 6, 3, 7] 0
2547 [7, 6, 5, 3, 2, 1, 0, 7, 6, 3] 0
2548 [7, 6, 5, 3, 2, 1, 0, 7, 6, 2, 1, 7, 2] 0
2549 [7, 6, 5, 3, 2, 1, 0, 7, 6, 2, 1, 7] 0
2550 [7, 6, 5, 3, 2, 1, 0, 7, 6, 2, 1, 2] 0
2551 [7, 6, 5, 3, 2, 1, 0, 7, 6, 2, 1] 0
2552 [7, 6, 5, 3, 2, 1, 0, 7, 6, 2, 7] 0
2553 [7, 6, 5, 3, 2, 1, 0, 7, 6, 2] 0
2554 [7, 6, 5, 3, 2, 1, 0, 7, 6, 1, 7] 0
2555 [7, 6, 5, 3, 2, 1, 0, 7, 6, 1] 0
2556 [7, 6, 5, 3, 2, 1, 0, 7, 6, 7] 0
2557 [7, 6, 5, 3, 2, 1, 0, 7, 6] 0
2558 [7, 6, 5, 3, 2, 1, 0, 7, 3, 2, 1, 3, 2, 3] 0
2559 [7, 6, 5, 3, 2, 1, 0, 7, 3, 2, 1, 3, 2] 0
2560 [7, 6, 5, 3, 2, 1, 0, 7, 3, 2, 1, 3] 0
2561 [7, 6, 5, 3, 2, 1, 0, 7, 3, 2, 1, 2] 0
2562 [7, 6, 5, 3, 2, 1, 0, 7, 3, 2, 1] 0
2563 [7, 6, 5, 3, 2, 1, 0, 7, 3, 2, 3] 0
2564 [7, 6, 5, 3, 2, 1, 0, 7, 3, 2] 0
2565 [7, 6, 5, 3, 2, 1, 0, 7, 3, 1] 0
2566 [7, 6, 5, 3, 2, 1, 0, 7, 3] 0
2567 [7, 6, 5, 3, 2, 1, 0, 7, 2, 1, 2] 0
2568 [7, 6, 5, 3, 2, 1, 0, 7, 2, 1] 0
2569 [7, 6, 5, 3, 2, 1, 0, 7, 2] 0
2570 [7, 6, 5, 3, 2, 1, 0, 7, 1] 0
2571 [7, 6, 5, 3, 2, 1, 0, 7] 0
2572 [7, 6, 5, 3, 2, 1, 0, 6, 3, 2, 1, 3, 2, 3] 0
2573 [7, 6, 5, 3, 2, 1, 0, 6, 3, 2, 1, 3, 2] 0
2574 [7, 6, 5, 3, 2, 1, 0, 6, 3, 2, 1, 3] 0
2575 [7, 6, 5, 3, 2, 1, 0, 6, 3, 2, 1, 2] 0
2576 [7, 6, 5, 3, 2, 1, 0, 6, 3, 2, 1] 0
2577 [7, 6, 5, 3, 2, 1, 0, 6, 3, 2, 3] 0
2578 [7, 6, 5, 3, 2, 1, 0, 6, 3, 2] 0
2579 [7, 6, 5, 3, 2, 1, 0, 6, 3, 1] 0
2580 [7, 6, 5, 3, 2, 1, 0, 6, 3] 0
2581 [7, 6, 5, 3, 2, 1, 0, 6, 2, 1, 2] 0
2582 [7, 6, 5, 3, 2, 1, 0, 6, 2, 1] 0
2583 [7, 6, 5, 3, 2, 1, 0, 6, 2] 0
2584 [7, 6, 5, 3, 2, 1, 0, 6, 1] 0
2585 [7, 6, 5, 3, 2, 1, 0, 6] 0
2586 [7, 6, 5, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
2587 [7, 6, 5, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
2588 [7, 6, 5, 3, 2, 1, 0, 3, 2, 1, 3] 0
2589 [7, 6, 5, 3, 2, 1, 0, 3, 2, 1, 2] 0
2590 [7, 6, 5, 3, 2, 1, 0, 3, 2, 1] 0
2591 [7, 6, 5, 3, 2, 1, 0, 3, 2, 3] 0
2592 [7, 6, 5, 3, 2, 1, 0, 3, 2] 0
2593 [7, 6, 5, 3, 2, 1, 0, 3, 1] 0
2594 [7, 6, 5, 3, 2, 1, 0, 3] 0
2595 [7, 6, 5, 3, 2, 1, 0, 2, 1, 2] 0
2596 [7, 6, 5, 3, 2, 1, 0, 2, 1] 0
2597 [7, 6, 5, 3, 2, 1, 0, 2] 0
2598 [7, 6, 5, 3, 2, 1, 0, 1] 0
2599 [7, 6, 5, 3, 2, 1, 0] 0
2600 [7, 6, 5, 3, 2, 1, 7, 6, 3, 2, 7, 3] 0
2601 [7, 6, 5, 3, 2, 1, 7, 6, 3, 2, 7] 0
2602 [7, 6, 5, 3, 2, 1, 7, 6, 3, 2, 3] 0
2603 [7, 6, 5, 3, 2, 1, 7, 6, 3, 2] 0
2604 [7, 6, 5, 3, 2, 1, 7, 6, 3, 7] 0
2605 [7, 6, 5, 3, 2, 1, 7, 6, 3] 0
2606 [7, 6, 5, 3, 2, 1, 7, 6, 2, 7] 0
2607 [7, 6, 5, 3, 2, 1, 7, 6, 2] 0
2608 [7, 6, 5, 3, 2, 1, 7, 6, 7] 0
2609 [7, 6, 5, 3, 2, 1, 7, 6] 0
2610 [7, 6, 5, 3, 2, 1, 7, 3, 2, 3] 0
2611 [7, 6, 5, 3, 2, 1, 7, 3, 2] 0
2612 [7, 6, 5, 3, 2, 1, 7, 3] 0
2613 [7, 6, 5, 3, 2, 1, 7, 2] 0
2614 [7, 6, 5, 3, 2, 1, 7] 0
2615 [7, 6, 5, 3, 2, 1, 6, 3, 2, 3] 0
2616 [7, 6, 5, 3, 2, 1, 6, 3, 2] 0
2617 [7, 6, 5, 3, 2, 1, 6, 3] 0
2618 [7, 6, 5, 3, 2, 1, 6, 2] 0
2619 [7, 6, 5, 3, 2, 1, 6] 0
2620 [7, 6, 5, 3, 2, 1, 3, 2, 3] 0
2621 [7, 6, 5, 3, 2, 1, 3, 2] 0
2622 [7, 6, 5, 3, 2, 1, 3] 0
2623 [7, 6, 5, 3, 2, 1, 2] 0
2624 [7, 6, 5, 3, 2, 1] 0
2625 [7, 6, 5, 3, 2, 0, 7, 6, 3, 7] 0
2626 [7, 6, 5, 3, 2, 0, 7, 6, 3] 0
2627 [7, 6, 5, 3, 2, 0, 7, 6, 7] 0
2628 [7, 6, 5, 3, 2, 0, 7, 6] 0
2629 [7, 6, 5, 3, 2, 0, 7, 3] 0
2630 [7, 6, 5, 3, 2, 0, 7] 0
2631 [7, 6, 5, 3, 2, 0, 6, 3] 0
2632 [7, 6, 5, 3, 2, 0, 6] 0
2633 [7, 6, 5, 3, 2, 0, 3] 0
2634 [7, 6, 5, 3, 2, 0] 0
2635 [7, 6, 5, 3, 2, 7, 6, 3, 7] 0
2636 [7, 6, 5, 3, 2, 7, 6, 3] 0
2637 [7, 6, 5, 3, 2, 7, 6, 7] 0
2638 [7, 6, 5, 3, 2, 7, 6] 0
2639 [7, 6, 5, 3, 2, 7, 3] 0
2640 [7, 6, 5, 3, 2, 7] 0
2641 [7, 6, 5, 3, 2, 6, 3] 0
2642 [7, 6, 5, 3, 2, 6] 0
2643 [7, 6, 5, 3, 2, 3] 0
2644 [7, 6, 5, 3, 2] 0
2645 [7, 6, 5, 3, 1, 0, 7, 6, 1, 7] 0
2646 [7, 6, 5, 3, 1, 0, 7, 6, 1] 0
2647 [7, 6, 5, 3, 1, 0, 7, 6, 7] 0
2648 [7, 6, 5, 3, 1, 0, 7, 6] 0
2649 [7, 6, 5, 3, 1, 0, 7, 1] 0
2650 [7, 6, 5, 3, 1, 0, 7] 0
2651 [7, 6, 5, 3, 1, 0, 6, 1] 0
2652 [7, 6, 5, 3, 1, 0, 6] 0
2653 [7, 6, 5, 3, 1, 0, 1] 0
2654 [7, 6, 5, 3, 1, 0] 0
2655 [7, 6, 5, 3, 1, 7, 6, 7] 0
2656 [7, 6, 5, 3, 1, 7, 6] 0
2657 [7, 6, 5, 3, 1, 7] 0
2658 [7, 6, 5, 3, 1, 6] 0
2659 [7, 6, 5, 3, 1] 0
2660 [7, 6, 5, 3, 0, 7, 6, 7] 0
2661 [7, 6, 5, 3, 0, 7, 6] 0
2662 [7, 6, 5, 3, 0, 7] 0
2663 [7, 6, 5, 3, 0, 6] 0
2664 [7, 6, 5, 3, 0] 0
2665 [7, 6, 5, 3, 7, 6, 7] 0
2666 [7, 6, 5, 3, 7, 6] 0
2667 [7, 6, 5, 3, 7] 0
2668 [7, 6, 5, 3, 6] 0
2669 [7, 6, 5, 3] 0
2670 [7, 6, 5, 2, 1, 0, 7, 6, 2, 1, 7, 2] 0
2671 [7, 6, 5, 2, 1, 0, 7, 6, 2, 1, 7] 0
2672 [7, 6, 5, 2, 1, 0, 7, 6, 2, 1, 2] 0
2673 [7, 6, 5, 2, 1, 0, 7, 6, 2, 1] 0
2674 [7, 6, 5, 2, 1, 0, 7, 6, 2, 7] 0
2675 [7, 6, 5, 2, 1, 0, 7, 6, 2] 0
2676 [7, 6, 5, 2, 1, 0, 7, 6, 1, 7] 0
2677 [7, 6, 5, 2, 1, 0, 7, 6, 1] 0
2678 [7, 6, 5, 2, 1, 0, 7, 6, 7] 0
2679 [7, 6, 5, 2, 1, 0, 7, 6] 0
2680 [7, 6, 5, 2, 1, 0, 7, 2, 1, 2] 0
2681 [7, 6, 5, 2, 1, 0, 7, 2, 1] 0
2682 [7, 6, 5, 2, 1, 0, 7, 2] 0
2683 [7, 6, 5, 2, 1, 0, 7, 1] 0
2684 [7, 6, 5, 2, 1, 0, 7] 0
2685 [7, 6, 5, 2, 1, 0, 6, 2, 1, 2] 0
2686 [7, 6, 5, 2, 1, 0, 6, 2, 1] 0
2687 [7, 6, 5, 2, 1, 0, 6, 2] 0
2688 [7, 6, 5, 2, 1, 0, 6, 1] 0
2689 [7, 6, 5, 2, 1, 0, 6] 0
2690 [7, 6, 5, 2, 1, 0, 2, 1, 2] 0
2691 [7, 6, 5, 2, 1, 0, 2, 1] 0
2692 [7, 6, 5, 2, 1, 0, 2] 0
2693 [7, 6, 5, 2, 1, 0, 1] 0
2694 [7, 6, 5, 2, 1, 0] 0
2695 [7, 6, 5, 2, 1, 7, 6, 2, 7] 0
2696 [7, 6, 5, 2, 1, 7, 6, 2] 0
2697 [7, 6, 5, 2, 1, 7, 6, 7] 0
2698 [7, 6, 5, 2, 1, 7, 6] 0
2699 [7, 6, 5, 2, 1, 7, 2] 0
2700 [7, 6, 5, 2, 1, 7] 0
2701 [7, 6, 5, 2, 1, 6, 2] 0
2702 [7, 6, 5, 2, 1, 6] 0
2703 [7, 6, 5, 2, 1, 2] 0
2704 [7, 6, 5, 2, 1] 0
2705 [7, 6, 5, 2, 0, 7, 6, 7] 0
2706 [7, 6, 5, 2, 0, 7, 6] 0
2707 [7, 6, 5, 2, 0, 7] 0
2708 [7, 6, 5, 2, 0, 6] 0
2709 [7, 6, 5, 2, 0] 0
2710 [7, 6, 5, 2, 7, 6, 7] 0
2711 [7, 6, 5, 2, 7, 6] 0
2712 [7, 6, 5, 2, 7] 0
2713 [7, 6, 5, 2, 6] 0
2714 [7, 6, 5, 2] 0
2715 [7, 6, 5, 1, 0, 7, 6, 1, 7] 0
2716 [7, 6, 5, 1, 0, 7, 6, 1] 0
2717 [7, 6, 5, 1, 0, 7, 6, 7] 0
2718 [7, 6, 5, 1, 0, 7, 6] 0
2719 [7, 6, 5, 1, 0, 7, 1] 0
2720 [7, 6, 5, 1, 0, 7] 0
2721 [7, 6, 5, 1, 0, 6, 1] 0
2722 [7, 6, 5, 1, 0, 6] 0
2723 [7, 6, 5, 1, 0, 1] 0
2724 [7, 6, 5, 1, 0] 0
2725 [7, 6, 5, 1, 7, 6, 7] 0
2726 [7, 6, 5, 1, 7, 6] 0
2727 [7, 6, 5, 1, 7] 0
2728 [7, 6, 5, 1, 6] 0
2729 [7, 6, 5, 1] 0
2730 [7, 6, 5, 0, 7, 6, 7] 0
2731 [7, 6, 5, 0, 7, 6] 0
2732 [7, 6, 5, 0, 7] 0
2733 [7, 6, 5, 0, 6] 0
2734 [7, 6, 5, 0] 0
2735 [7, 6, 5, 7, 6, 7] 0
2736 [7, 6, 5, 7, 6] 0
2737 [7, 6, 5, 7] 0
2738 [7, 6, 5, 6] 0
2739 [7, 6, 5] 0
2740 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
2741 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
2742 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 4, 3, 2, 4] 0
2743 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 4, 3, 2, 3] 0
2744 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 4, 3, 2] 0
2745 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 4, 3, 4] 0
2746 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 4, 3] 0
2747 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 4, 2] 0
2748 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 4] 0
2749 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 3, 2, 3] 0
2750 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 3, 2] 0
2751 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 3] 0
2752 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 2] 0
2753 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1] 0
2754 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3, 2, 4, 3, 4] 0
2755 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3, 2, 4, 3] 0
2756 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3, 2, 4] 0
2757 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3, 2, 3] 0
2758 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3, 2] 0
2759 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3, 1, 4] 0
2760 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3, 1] 0
2761 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3, 4] 0
2762 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3] 0
2763 [7, 6, 4, 3, 2, 1, 0, 7, 4, 2, 1, 2] 0
2764 [7, 6, 4, 3, 2, 1, 0, 7, 4, 2, 1] 0
2765 [7, 6, 4, 3, 2, 1, 0, 7, 4, 2] 0
2766 [7, 6, 4, 3, 2, 1, 0, 7, 4, 1] 0
2767 [7, 6, 4, 3, 2, 1, 0, 7, 4] 0
2768 [7, 6, 4, 3, 2, 1, 0, 7, 3, 2, 1, 3, 2, 3] 0
2769 [7, 6, 4, 3, 2, 1, 0, 7, 3, 2, 1, 3, 2] 0
2770 [7, 6, 4, 3, 2, 1, 0, 7, 3, 2, 1, 3] 0
2771 [7, 6, 4, 3, 2, 1, 0, 7, 3, 2, 1, 2] 0
2772 [7, 6, 4, 3, 2, 1, 0, 7, 3, 2, 1] 0
2773 [7, 6, 4, 3, 2, 1, 0, 7, 3, 2, 3] 0
2774 [7, 6, 4, 3, 2, 1, 0, 7, 3, 2] 0
2775 [7, 6, 4, 3, 2, 1, 0, 7, 3, 1] 0
2776 [7, 6, 4, 3, 2, 1, 0, 7, 3] 0
2777 [7, 6, 4, 3, 2, 1, 0, 7, 2, 1, 2] 0
2778 [7, 6, 4, 3, 2, 1, 0, 7, 2, 1] 0
2779 [7, 6, 4, 3, 2, 1, 0, 7, 2] 0
2780 [7, 6, 4, 3, 2, 1, 0, 7, 1] 0
2781 [7, 6, 4, 3, 2, 1, 0, 7] 0
2782 [7, 6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
2783 [7, 6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
2784 [7, 6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4] 0
2785 [7, 6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 3] 0
2786 [7, 6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2] 0
2787 [7, 6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 4] 0
2788 [7, 6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3] 0
2789 [7, 6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 2] 0
2790 [7, 6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4] 0
2791 [7, 6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2, 3] 0
2792 [7, 6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2] 0
2793 [7, 6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3] 0
2794 [7, 6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 2] 0
2795 [7, 6, 4, 3, 2, 1, 0, 4, 3, 2, 1] 0
2796 [7, 6, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3, 4] 0
2797 [7, 6, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3] 0
2798 [7, 6, 4, 3, 2, 1, 0, 4, 3, 2, 4] 0
2799 [7, 6, 4, 3, 2, 1, 0, 4, 3, 2, 3] 0
2800 [7, 6, 4, 3, 2, 1, 0, 4, 3, 2] 0
2801 [7, 6, 4, 3, 2, 1, 0, 4, 3, 1, 4] 0
2802 [7, 6, 4, 3, 2, 1, 0, 4, 3, 1] 0
2803 [7, 6, 4, 3, 2, 1, 0, 4, 3, 4] 0
2804 [7, 6, 4, 3, 2, 1, 0, 4, 3] 0
2805 [7, 6, 4, 3, 2, 1, 0, 4, 2, 1, 2] 0
2806 [7, 6, 4, 3, 2, 1, 0, 4, 2, 1] 0
2807 [7, 6, 4, 3, 2, 1, 0, 4, 2] 0
2808 [7, 6, 4, 3, 2, 1, 0, 4, 1] 0
2809 [7, 6, 4, 3, 2, 1, 0, 4] 0
2810 [7, 6, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
2811 [7, 6, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
2812 [7, 6, 4, 3, 2, 1, 0, 3, 2, 1, 3] 0
2813 [7, 6, 4, 3, 2, 1, 0, 3, 2, 1, 2] 0
2814 [7, 6, 4, 3, 2, 1, 0, 3, 2, 1] 0
2815 [7, 6, 4, 3, 2, 1, 0, 3, 2, 3] 0
2816 [7, 6, 4, 3, 2, 1, 0, 3, 2] 0
2817 [7, 6, 4, 3, 2, 1, 0, 3, 1] 0
2818 [7, 6, 4, 3, 2, 1, 0, 3] 0
2819 [7, 6, 4, 3, 2, 1, 0, 2, 1, 2] 0
2820 [7, 6, 4, 3, 2, 1, 0, 2, 1] 0
2821 [7, 6, 4, 3, 2, 1, 0, 2] 0
2822 [7, 6, 4, 3, 2, 1, 0, 1] 0
2823 [7, 6, 4, 3, 2, 1, 0] 0
2824 [7, 6, 4, 3, 2, 1, 7, 4, 3, 2, 4, 3, 4] 0
2825 [7, 6, 4, 3, 2, 1, 7, 4, 3, 2, 4, 3] 0
2826 [7, 6, 4, 3, 2, 1, 7, 4, 3, 2, 4] 0
2827 [7, 6, 4, 3, 2, 1, 7, 4, 3, 2, 3] 0
2828 [7, 6, 4, 3, 2, 1, 7, 4, 3, 2] 0
2829 [7, 6, 4, 3, 2, 1, 7, 4, 3, 4] 0
2830 [7, 6, 4, 3, 2, 1, 7, 4, 3] 0
2831 [7, 6, 4, 3, 2, 1, 7, 4, 2] 0
2832 [7, 6, 4, 3, 2, 1, 7, 4] 0
2833 [7, 6, 4, 3, 2, 1, 7, 3, 2, 3] 0
2834 [7, 6, 4, 3, 2, 1, 7, 3, 2] 0
2835 [7, 6, 4, 3, 2, 1, 7, 3] 0
2836 [7, 6, 4, 3, 2, 1, 7, 2] 0
2837 [7, 6, 4, 3, 2, 1, 7] 0
2838 [7, 6, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
2839 [7, 6, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
2840 [7, 6, 4, 3, 2, 1, 4, 3, 2, 4] 0
2841 [7, 6, 4, 3, 2, 1, 4, 3, 2, 3] 0
2842 [7, 6, 4, 3, 2, 1, 4, 3, 2] 0
2843 [7, 6, 4, 3, 2, 1, 4, 3, 4] 0
2844 [7, 6, 4, 3, 2, 1, 4, 3] 0
2845 [7, 6, 4, 3, 2, 1, 4, 2] 0
2846 [7, 6, 4, 3, 2, 1, 4] 0
2847 [7, 6, 4, 3, 2, 1, 3, 2, 3] 0
2848 [7, 6, 4, 3, 2, 1, 3, 2] 0
2849 [7, 6, 4, 3, 2, 1, 3] 0
2850 [7, 6, 4, 3, 2, 1, 2] 0
2851 [7, 6, 4, 3, 2, 1] 0
2852 [7, 6, 4, 3, 2, 0, 7, 4, 3, 4] 0
2853 [7, 6, 4, 3, 2, 0, 7, 4, 3] 0
2854 [7, 6, 4, 3, 2, 0, 7, 4] 0
2855 [7, 6, 4, 3, 2, 0, 7, 3] 0
2856 [7, 6, 4, 3, 2, 0, 7] 0
2857 [7, 6, 4, 3, 2, 0, 4, 3, 4] 0
2858 [7, 6, 4, 3, 2, 0, 4, 3] 0
2859 [7, 6, 4, 3, 2, 0, 4] 0
2860 [7, 6, 4, 3, 2, 0, 3] 0
2861 [7, 6, 4, 3, 2, 0] 0
2862 [7, 6, 4, 3, 2, 7, 4, 3, 4] 0
2863 [7, 6, 4, 3, 2, 7, 4, 3] 0
2864 [7, 6, 4, 3, 2, 7, 4] 0
2865 [7, 6, 4, 3, 2, 7, 3] 0
2866 [7, 6, 4, 3, 2, 7] 0
2867 [7, 6, 4, 3, 2, 4, 3, 4] 0
2868 [7, 6, 4, 3, 2, 4, 3] 0
2869 [7, 6, 4, 3, 2, 4] 0
2870 [7, 6, 4, 3, 2, 3] 0
2871 [7, 6, 4, 3, 2] 0
2872 [7, 6, 4, 3, 1, 0, 7, 4, 1] 0
2873 [7, 6, 4, 3, 1, 0, 7, 4] 0
2874 [7, 6, 4, 3, 1, 0, 7, 1] 0
2875 [7, 6, 4, 3, 1, 0, 7] 0
2876 [7, 6, 4, 3, 1, 0, 4, 1] 0
2877 [7, 6, 4, 3, 1, 0, 4] 0
2878 [7, 6, 4, 3, 1, 0, 1] 0
2879 [7, 6, 4, 3, 1, 0] 0
2880 [7, 6, 4, 3, 1, 7, 4] 0
2881 [7, 6, 4, 3, 1, 7] 0
2882 [7, 6, 4, 3, 1, 4] 0
2883 [7, 6, 4, 3, 1] 0
2884 [7, 6, 4, 3, 0, 7, 4] 0
2885 [7, 6, 4, 3, 0, 7] 0
2886 [7, 6, 4, 3, 0, 4] 0
2887 [7, 6, 4, 3, 0] 0
2888 [7, 6, 4, 3, 7, 4] 0
2889 [7, 6, 4, 3, 7] 0
2890 [7, 6, 4, 3, 4] 0
2891 [7, 6, 4, 3] 0
2892 [7, 6, 4, 2, 1, 0, 7, 2, 1, 2] 0
2893 [7, 6, 4, 2, 1, 0, 7, 2, 1] 0
2894 [7, 6, 4, 2, 1, 0, 7, 2] 0
2895 [7, 6, 4, 2, 1, 0, 7, 1] 0
2896 [7, 6, 4, 2, 1, 0, 7] 0
2897 [7, 6, 4, 2, 1, 0, 2, 1, 2] 0
2898 [7, 6, 4, 2, 1, 0, 2, 1] 0
2899 [7, 6, 4, 2, 1, 0, 2] 0
2900 [7, 6, 4, 2, 1, 0, 1] 0
2901 [7, 6, 4, 2, 1, 0] 0
2902 [7, 6, 4, 2, 1, 7, 2] 0
2903 [7, 6, 4, 2, 1, 7] 0
2904 [7, 6, 4, 2, 1, 2] 0
2905 [7, 6, 4, 2, 1] 0
2906 [7, 6, 4, 2, 0, 7] 0
2907 [7, 6, 4, 2, 0] 0
2908 [7, 6, 4, 2, 7] 0
2909 [7, 6, 4, 2] 0
2910 [7, 6, 4, 1, 0, 7, 1] 0
2911 [7, 6, 4, 1, 0, 7] 0
2912 [7, 6, 4, 1, 0, 1] 0
2913 [7, 6, 4, 1, 0] 0
2914 [7, 6, 4, 1, 7] 0
2915 [7, 6, 4, 1] 0
2916 [7, 6, 4, 0, 7] 0
2917 [7, 6, 4, 0] 0
2918 [7, 6, 4, 7] 0
2919 [7, 6, 4] 0
2920 [7, 6, 3, 2, 1, 0, 7, 3, 2, 1, 3, 2, 3] 0
2921 [7, 6, 3, 2, 1, 0, 7, 3, 2, 1, 3, 2] 0
2922 [7, 6, 3, 2, 1, 0, 7, 3, 2, 1, 3] 0
2923 [7, 6, 3, 2, 1, 0, 7, 3, 2, 1, 2] 0
2924 [7, 6, 3, 2, 1, 0, 7, 3, 2, 1] 0
2925 [7, 6, 3, 2, 1, 0, 7, 3, 2, 3] 0
2926 [7, 6, 3, 2, 1, 0, 7, 3, 2] 0
2927 [7, 6, 3, 2, 1, 0, 7, 3, 1] 0
2928 [7, 6, 3, 2, 1, 0, 7, 3] 0
2929 [7, 6, 3, 2, 1, 0, 7, 2, 1, 2] 0
2930 [7, 6, 3, 2, 1, 0, 7, 2, 1] 0
2931 [7, 6, 3, 2, 1, 0, 7, 2] 0
2932 [7, 6, 3, 2, 1, 0, 7, 1] 0
2933 [7, 6, 3, 2, 1, 0, 7] 0
2934 [7, 6, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
2935 [7, 6, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
2936 [7, 6, 3, 2, 1, 0, 3, 2, 1, 3] 0
2937 [7, 6, 3, 2, 1, 0, 3, 2, 1, 2] 0
2938 [7, 6, 3, 2, 1, 0, 3, 2, 1] 0
2939 [7, 6, 3, 2, 1, 0, 3, 2, 3] 0
2940 [7, 6, 3, 2, 1, 0, 3, 2] 0
2941 [7, 6, 3, 2, 1, 0, 3, 1] 0
2942 [7, 6, 3, 2, 1, 0, 3] 0
2943 [7, 6, 3, 2, 1, 0, 2, 1, 2] 0
2944 [7, 6, 3, 2, 1, 0, 2, 1] 0
2945 [7, 6, 3, 2, 1, 0, 2] 0
2946 [7, 6, 3, 2, 1, 0, 1] 0
2947 [7, 6, 3, 2, 1, 0] 0
2948 [7, 6, 3, 2, 1, 7, 3, 2, 3] 0
2949 [7, 6, 3, 2, 1, 7, 3, 2] 0
2950 [7, 6, 3, 2, 1, 7, 3] 0
2951 [7, 6, 3, 2, 1, 7, 2] 0
2952 [7, 6, 3, 2, 1, 7] 0
2953 [7, 6, 3, 2, 1, 3, 2, 3] 0
2954 [7, 6, 3, 2, 1, 3, 2] 0
2955 [7, 6, 3, 2, 1, 3] 0
2956 [7, 6, 3, 2, 1, 2] 0
2957 [7, 6, 3, 2, 1] 0
2958 [7, 6, 3, 2, 0, 7, 3] 0
2959 [7, 6, 3, 2, 0, 7] 0
2960 [7, 6, 3, 2, 0, 3] 0
2961 [7, 6, 3, 2, 0] 0
2962 [7, 6, 3, 2, 7, 3] 0
2963 [7, 6, 3, 2, 7] 0
2964 [7, 6, 3, 2, 3] 0
2965 [7, 6, 3, 2] 0
2966 [7, 6, 3, 1, 0, 7, 1] 0
2967 [7, 6, 3, 1, 0, 7] 0
2968 [7, 6, 3, 1, 0, 1] 0
2969 [7, 6, 3, 1, 0] 0
2970 [7, 6, 3, 1, 7] 0
2971 [7, 6, 3, 1] 0
2972 [7, 6, 3, 0, 7] 0
2973 [7, 6, 3, 0] 0
2974 [7, 6, 3, 7] 0
2975 [7, 6, 3] 0
2976 [7, 6, 2, 1, 0, 7, 2, 1, 2] 0
2977 [7, 6, 2, 1, 0, 7, 2, 1] 0
2978 [7, 6, 2, 1, 0, 7, 2] 0
2979 [7, 6, 2, 1, 0, 7, 1] 0
2980 [7, 6, 2, 1, 0, 7] 0
2981 [7, 6, 2, 1, 0, 2, 1, 2] 0
2982 [7, 6, 2, 1, 0, 2, 1] 0
2983 [7, 6, 2, 1, 0, 2] 0
2984 [7, 6, 2, 1, 0, 1] 0
2985 [7, 6, 2, 1, 0] 0
2986 [7, 6, 2, 1, 7, 2] 0
2987 [7, 6, 2, 1, 7] 0
2988 [7, 6, 2, 1, 2] 0
2989 [7, 6, 2, 1] 0
2990 [7, 6, 2, 0, 7] 0
2991 [7, 6, 2, 0] 0
2992 [7, 6, 2, 7] 0
2993 [7, 6, 2] 0
2994 [7, 6, 1, 0, 7, 1] 0
2995 [7, 6, 1, 0, 7] 0
2996 [7, 6, 1, 0, 1] 0
2997 [7, 6, 1, 0] 0
2998 [7, 6, 1, 7] 0
2999 [7, 6, 1] 0
3000 [7, 6, 0, 7] 0
3001 [7, 6, 0] 0
3002 [7, 6, 7] 0
3003 [7, 6] 0
3004 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
3005 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
3006 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] 0
3007 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] 0
3008 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] 0
3009 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] 0
3010 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] 0
3011 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] 0
3012 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5] 0
3013 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] 0
3014 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] 0
3015 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4] 0
3016 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 3] 0
3017 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2] 0
3018 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] 0
3019 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4] 0
3020 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5] 0
3021 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 4] 0
3022 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3] 0
3023 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2, 5] 0
3024 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2] 0
3025 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 5] 0
3026 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4] 0
3027 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2, 3] 0
3028 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2] 0
3029 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3] 0
3030 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 2] 0
3031 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5] 0
3032 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
3033 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
3034 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4] 0
3035 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 3] 0
3036 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2] 0
3037 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 4] 0
3038 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3] 0
3039 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 2] 0
3040 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4] 0
3041 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2, 3] 0
3042 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2] 0
3043 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3] 0
3044 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 2] 0
3045 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1] 0
3046 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
3047 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
3048 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5] 0
3049 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 4] 0
3050 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3] 0
3051 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 5] 0
3052 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4] 0
3053 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 3] 0
3054 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5] 0
3055 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4, 3, 4] 0
3056 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4, 3] 0
3057 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4] 0
3058 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 3] 0
3059 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2] 0
3060 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5, 4, 5] 0
3061 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5, 4] 0
3062 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5] 0
3063 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 4] 0
3064 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 1] 0
3065 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 5, 4, 5] 0
3066 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 5, 4] 0
3067 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 5] 0
3068 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 4] 0
3069 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3] 0
3070 [7, 5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 5, 2] 0
3071 [7, 5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 5] 0
3072 [7, 5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 2] 0
3073 [7, 5, 4, 3, 2, 1, 0, 5, 4, 2, 1] 0
3074 [7, 5, 4, 3, 2, 1, 0, 5, 4, 2, 5] 0
3075 [7, 5, 4, 3, 2, 1, 0, 5, 4, 2] 0
3076 [7, 5, 4, 3, 2, 1, 0, 5, 4, 1, 5] 0
3077 [7, 5, 4, 3, 2, 1, 0, 5, 4, 1] 0
3078 [7, 5, 4, 3, 2, 1, 0, 5, 4, 5] 0
3079 [7, 5, 4, 3, 2, 1, 0, 5, 4] 0
3080 [7, 5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3, 2, 3] 0
3081 [7, 5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3, 2] 0
3082 [7, 5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3] 0
3083 [7, 5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 2] 0
3084 [7, 5, 4, 3, 2, 1, 0, 5, 3, 2, 1] 0
3085 [7, 5, 4, 3, 2, 1, 0, 5, 3, 2, 3] 0
3086 [7, 5, 4, 3, 2, 1, 0, 5, 3, 2] 0
3087 [7, 5, 4, 3, 2, 1, 0, 5, 3, 1] 0
3088 [7, 5, 4, 3, 2, 1, 0, 5, 3] 0
3089 [7, 5, 4, 3, 2, 1, 0, 5, 2, 1, 2] 0
3090 [7, 5, 4, 3, 2, 1, 0, 5, 2, 1] 0
3091 [7, 5, 4, 3, 2, 1, 0, 5, 2] 0
3092 [7, 5, 4, 3, 2, 1, 0, 5, 1] 0
3093 [7, 5, 4, 3, 2, 1, 0, 5] 0
3094 [7, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
3095 [7, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
3096 [7, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4] 0
3097 [7, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 3] 0
3098 [7, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2] 0
3099 [7, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 4] 0
3100 [7, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3] 0
3101 [7, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 2] 0
3102 [7, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4] 0
3103 [7, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2, 3] 0
3104 [7, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2] 0
3105 [7, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3] 0
3106 [7, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 2] 0
3107 [7, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1] 0
3108 [7, 5, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3, 4] 0
3109 [7, 5, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3] 0
3110 [7, 5, 4, 3, 2, 1, 0, 4, 3, 2, 4] 0
3111 [7, 5, 4, 3, 2, 1, 0, 4, 3, 2, 3] 0
3112 [7, 5, 4, 3, 2, 1, 0, 4, 3, 2] 0
3113 [7, 5, 4, 3, 2, 1, 0, 4, 3, 1, 4] 0
3114 [7, 5, 4, 3, 2, 1, 0, 4, 3, 1] 0
3115 [7, 5, 4, 3, 2, 1, 0, 4, 3, 4] 0
3116 [7, 5, 4, 3, 2, 1, 0, 4, 3] 0
3117 [7, 5, 4, 3, 2, 1, 0, 4, 2, 1, 2] 0
3118 [7, 5, 4, 3, 2, 1, 0, 4, 2, 1] 0
3119 [7, 5, 4, 3, 2, 1, 0, 4, 2] 0
3120 [7, 5, 4, 3, 2, 1, 0, 4, 1] 0
3121 [7, 5, 4, 3, 2, 1, 0, 4] 0
3122 [7, 5, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
3123 [7, 5, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
3124 [7, 5, 4, 3, 2, 1, 0, 3, 2, 1, 3] 0
3125 [7, 5, 4, 3, 2, 1, 0, 3, 2, 1, 2] 0
3126 [7, 5, 4, 3, 2, 1, 0, 3, 2, 1] 0
3127 [7, 5, 4, 3, 2, 1, 0, 3, 2, 3] 0
3128 [7, 5, 4, 3, 2, 1, 0, 3, 2] 0
3129 [7, 5, 4, 3, 2, 1, 0, 3, 1] 0
3130 [7, 5, 4, 3, 2, 1, 0, 3] 0
3131 [7, 5, 4, 3, 2, 1, 0, 2, 1, 2] 0
3132 [7, 5, 4, 3, 2, 1, 0, 2, 1] 0
3133 [7, 5, 4, 3, 2, 1, 0, 2] 0
3134 [7, 5, 4, 3, 2, 1, 0, 1] 0
3135 [7, 5, 4, 3, 2, 1, 0] 0
3136 [7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
3137 [7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
3138 [7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] 0
3139 [7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] 0
3140 [7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] 0
3141 [7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] 0
3142 [7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] 0
3143 [7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] 0
3144 [7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5] 0
3145 [7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] 0
3146 [7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] 0
3147 [7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4] 0
3148 [7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 3] 0
3149 [7, 5, 4, 3, 2, 1, 5, 4, 3, 2] 0
3150 [7, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] 0
3151 [7, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4] 0
3152 [7, 5, 4, 3, 2, 1, 5, 4, 3, 5] 0
3153 [7, 5, 4, 3, 2, 1, 5, 4, 3, 4] 0
3154 [7, 5, 4, 3, 2, 1, 5, 4, 3] 0
3155 [7, 5, 4, 3, 2, 1, 5, 4, 2, 5] 0
3156 [7, 5, 4, 3, 2, 1, 5, 4, 2] 0
3157 [7, 5, 4, 3, 2, 1, 5, 4, 5] 0
3158 [7, 5, 4, 3, 2, 1, 5, 4] 0
3159 [7, 5, 4, 3, 2, 1, 5, 3, 2, 3] 0
3160 [7, 5, 4, 3, 2, 1, 5, 3, 2] 0
3161 [7, 5, 4, 3, 2, 1, 5, 3] 0
3162 [7, 5, 4, 3, 2, 1, 5, 2] 0
3163 [7, 5, 4, 3, 2, 1, 5] 0
3164 [7, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
3165 [7, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
3166 [7, 5, 4, 3, 2, 1, 4, 3, 2, 4] 0
3167 [7, 5, 4, 3, 2, 1, 4, 3, 2, 3] 0
3168 [7, 5, 4, 3, 2, 1, 4, 3, 2] 0
3169 [7, 5, 4, 3, 2, 1, 4, 3, 4] 0
3170 [7, 5, 4, 3, 2, 1, 4, 3] 0
3171 [7, 5, 4, 3, 2, 1, 4, 2] 0
3172 [7, 5, 4, 3, 2, 1, 4] 0
3173 [7, 5, 4, 3, 2, 1, 3, 2, 3] 0
3174 [7, 5, 4, 3, 2, 1, 3, 2] 0
3175 [7, 5, 4, 3, 2, 1, 3] 0
3176 [7, 5, 4, 3, 2, 1, 2] 0
3177 [7, 5, 4, 3, 2, 1] 0
3178 [7, 5, 4, 3, 2, 0, 5, 4, 3, 5, 4, 5] 0
3179 [7, 5, 4, 3, 2, 0, 5, 4, 3, 5, 4] 0
3180 [7, 5, 4, 3, 2, 0, 5, 4, 3, 5] 0
3181 [7, 5, 4, 3, 2, 0, 5, 4, 3, 4] 0
3182 [7, 5, 4, 3, 2, 0, 5, 4, 3] 0
3183 [7, 5, 4, 3, 2, 0, 5, 4, 5] 0
3184 [7, 5, 4, 3, 2, 0, 5, 4] 0
3185 [7, 5, 4, 3, 2, 0, 5, 3] 0
3186 [7, 5, 4, 3, 2, 0, 5] 0
3187 [7, 5, 4, 3, 2, 0, 4, 3, 4] 0
3188 [7, 5, 4, 3, 2, 0, 4, 3] 0
3189 [7, 5, 4, 3, 2, 0, 4] 0
3190 [7, 5, 4, 3, 2, 0, 3] 0
3191 [7, 5, 4, 3, 2, 0] 0
3192 [7, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
3193 [7, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
3194 [7, 5, 4, 3, 2, 5, 4, 3, 5] 0
3195 [7, 5, 4, 3, 2, 5, 4, 3, 4] 0
3196 [7, 5, 4, 3, 2, 5, 4, 3] 0
3197 [7, 5, 4, 3, 2, 5, 4, 5] 0
3198 [7, 5, 4, 3, 2, 5, 4] 0
3199 [7, 5, 4, 3, 2, 5, 3] 0
3200 [7, 5, 4, 3, 2, 5] 0
3201 [7, 5, 4, 3, 2, 4, 3, 4] 0
3202 [7, 5, 4, 3, 2, 4, 3] 0
3203 [7, 5, 4, 3, 2, 4] 0
3204 [7, 5, 4, 3, 2, 3] 0
3205 [7, 5, 4, 3, 2] 0
3206 [7, 5, 4, 3, 1, 0, 5, 4, 1, 5] 0
3207 [7, 5, 4, 3, 1, 0, 5, 4, 1] 0
3208 [7, 5, 4, 3, 1, 0, 5, 4, 5] 0
3209 [7, 5, 4, 3, 1, 0, 5, 4] 0
3210 [7, 5, 4, 3, 1, 0, 5, 1] 0
3211 [7, 5, 4, 3, 1, 0, 5] 0
3212 [7, 5, 4, 3, 1, 0, 4, 1] 0
3213 [7, 5, 4, 3, 1, 0, 4] 0
3214 [7, 5, 4, 3, 1, 0, 1] 0
3215 [7, 5, 4, 3, 1, 0] 0
3216 [7, 5, 4, 3, 1, 5, 4, 5] 0
3217 [7, 5, 4, 3, 1, 5, 4] 0
3218 [7, 5, 4, 3, 1, 5] 0
3219 [7, 5, 4, 3, 1, 4] 0
3220 [7, 5, 4, 3, 1] 0
3221 [7, 5, 4, 3, 0, 5, 4, 5] 0
3222 [7, 5, 4, 3, 0, 5, 4] 0
3223 [7, 5, 4, 3, 0, 5] 0
3224 [7, 5, 4, 3, 0, 4] 0
3225 [7, 5, 4, 3, 0] 0
3226 [7, 5, 4, 3, 5, 4, 5] 0
3227 [7, 5, 4, 3, 5, 4] 0
3228 [7, 5, 4, 3, 5] 0
3229 [7, 5, 4, 3, 4] 0
3230 [7, 5, 4, 3] 0
3231 [7, 5, 4, 2, 1, 0, 5, 2, 1, 2] 0
3232 [7, 5, 4, 2, 1, 0, 5, 2, 1] 0
3233 [7, 5, 4, 2, 1, 0, 5, 2] 0
3234 [7, 5, 4, 2, 1, 0, 5, 1] 0
3235 [7, 5, 4, 2, 1, 0, 5] 0
3236 [7, 5, 4, 2, 1, 0, 2, 1, 2] 0
3237 [7, 5, 4, 2, 1, 0, 2, 1] 0
3238 [7, 5, 4, 2, 1, 0, 2] 0
3239 [7, 5, 4, 2, 1, 0, 1] 0
3240 [7, 5, 4, 2, 1, 0] 0
3241 [7, 5, 4, 2, 1, 5, 2] 0
3242 [7, 5, 4, 2, 1, 5] 0
3243 [7, 5, 4, 2, 1, 2] 0
3244 [7, 5, 4, 2, 1] 0
3245 [7, 5, 4, 2, 0, 5] 0
3246 [7, 5, 4, 2, 0] 0
3247 [7, 5, 4, 2, 5] 0
3248 [7, 5, 4, 2] 0
3249 [7, 5, 4, 1, 0, 5, 1] 0
3250 [7, 5, 4, 1, 0, 5] 0
3251 [7, 5, 4, 1, 0, 1] 0
3252 [7, 5, 4, 1, 0] 0
3253 [7, 5, 4, 1, 5] 0
3254 [7, 5, 4, 1] 0
3255 [7, 5, 4, 0, 5] 0
3256 [7, 5, 4, 0] 0
3257 [7, 5, 4, 5] 0
3258 [7, 5, 4] 0
3259 [7, 5, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
3260 [7, 5, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
3261 [7, 5, 3, 2, 1, 0, 3, 2, 1, 3] 0
3262 [7, 5, 3, 2, 1, 0, 3, 2, 1, 2] 0
3263 [7, 5, 3, 2, 1, 0, 3, 2, 1] 0
3264 [7, 5, 3, 2, 1, 0, 3, 2, 3] 0
3265 [7, 5, 3, 2, 1, 0, 3, 2] 0
3266 [7, 5, 3, 2, 1, 0, 3, 1] 0
3267 [7, 5, 3, 2, 1, 0, 3] 0
3268 [7, 5, 3, 2, 1, 0, 2, 1, 2] 0
3269 [7, 5, 3, 2, 1, 0, 2, 1] 0
3270 [7, 5, 3, 2, 1, 0, 2] 0
3271 [7, 5, 3, 2, 1, 0, 1] 0
3272 [7, 5, 3, 2, 1, 0] 0
3273 [7, 5, 3, 2, 1, 3, 2, 3] 0
3274 [7, 5, 3, 2, 1, 3, 2] 0
3275 [7, 5, 3, 2, 1, 3] 0
3276 [7, 5, 3, 2, 1, 2] 0
3277 [7, 5, 3, 2, 1] 0
3278 [7, 5, 3, 2, 0, 3] 0
3279 [7, 5, 3, 2, 0] 0
3280 [7, 5, 3, 2, 3] 0
3281 [7, 5, 3, 2] 0
3282 [7, 5, 3, 1, 0, 1] 0
3283 [7, 5, 3, 1, 0] 0
3284 [7, 5, 3, 1] 0
3285 [7, 5, 3, 0] 0
3286 [7, 5, 3] 0
3287 [7, 5, 2, 1, 0, 2, 1, 2] 0
3288 [7, 5, 2, 1, 0, 2, 1] 0
3289 [7, 5, 2, 1, 0, 2] 0
3290 [7, 5, 2, 1, 0, 1] 0
3291 [7, 5, 2, 1, 0] 0
3292 [7, 5, 2, 1, 2] 0
3293 [7, 5, 2, 1] 0
3294 [7, 5, 2, 0] 0
3295 [7, 5, 2] 0
3296 [7, 5, 1, 0, 1] 0
3297 [7, 5, 1, 0] 0
3298 [7, 5, 1] 0
3299 [7, 5, 0] 0
3300 [7, 5] 0
3301 [7, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
3302 [7, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
3303 [7, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4] 0
3304 [7, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 3] 0
3305 [7, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2] 0
3306 [7, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 4] 0
3307 [7, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3] 0
3308 [7, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 2] 0
3309 [7, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4] 0
3310 [7, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2, 3] 0
3311 [7, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2] 0
3312 [7, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3] 0
3313 [7, 4, 3, 2, 1, 0, 4, 3, 2, 1, 2] 0
3314 [7, 4, 3, 2, 1, 0, 4, 3, 2, 1] 0
3315 [7, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3, 4] 0
3316 [7, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3] 0
3317 [7, 4, 3, 2, 1, 0, 4, 3, 2, 4] 0
3318 [7, 4, 3, 2, 1, 0, 4, 3, 2, 3] 0
3319 [7, 4, 3, 2, 1, 0, 4, 3, 2] 0
3320 [7, 4, 3, 2, 1, 0, 4, 3, 1, 4] 0
3321 [7, 4, 3, 2, 1, 0, 4, 3, 1] 0
3322 [7, 4, 3, 2, 1, 0, 4, 3, 4] 0
3323 [7, 4, 3, 2, 1, 0, 4, 3] 0
3324 [7, 4, 3, 2, 1, 0, 4, 2, 1, 2] 0
3325 [7, 4, 3, 2, 1, 0, 4, 2, 1] 0
3326 [7, 4, 3, 2, 1, 0, 4, 2] 0
3327 [7, 4, 3, 2, 1, 0, 4, 1] 0
3328 [7, 4, 3, 2, 1, 0, 4] 0
3329 [7, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
3330 [7, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
3331 [7, 4, 3, 2, 1, 0, 3, 2, 1, 3] 0
3332 [7, 4, 3, 2, 1, 0, 3, 2, 1, 2] 0
3333 [7, 4, 3, 2, 1, 0, 3, 2, 1] 0
3334 [7, 4, 3, 2, 1, 0, 3, 2, 3] 0
3335 [7, 4, 3, 2, 1, 0, 3, 2] 0
3336 [7, 4, 3, 2, 1, 0, 3, 1] 0
3337 [7, 4, 3, 2, 1, 0, 3] 0
3338 [7, 4, 3, 2, 1, 0, 2, 1, 2] 0
3339 [7, 4, 3, 2, 1, 0, 2, 1] 0
3340 [7, 4, 3, 2, 1, 0, 2] 0
3341 [7, 4, 3, 2, 1, 0, 1] 0
3342 [7, 4, 3, 2, 1, 0] 0
3343 [7, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
3344 [7, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
3345 [7, 4, 3, 2, 1, 4, 3, 2, 4] 0
3346 [7, 4, 3, 2, 1, 4, 3, 2, 3] 0
3347 [7, 4, 3, 2, 1, 4, 3, 2] 0
3348 [7, 4, 3, 2, 1, 4, 3, 4] 0
3349 [7, 4, 3, 2, 1, 4, 3] 0
3350 [7, 4, 3, 2, 1, 4, 2] 0
3351 [7, 4, 3, 2, 1, 4] 0
3352 [7, 4, 3, 2, 1, 3, 2, 3] 0
3353 [7, 4, 3, 2, 1, 3, 2] 0
3354 [7, 4, 3, 2, 1, 3] 0
3355 [7, 4, 3, 2, 1, 2] 0
3356 [7, 4, 3, 2, 1] 0
3357 [7, 4, 3, 2, 0, 4, 3, 4] 0
3358 [7, 4, 3, 2, 0, 4, 3] 0
3359 [7, 4, 3, 2, 0, 4] 0
3360 [7, 4, 3, 2, 0, 3] 0
3361 [7, 4, 3, 2, 0] 0
3362 [7, 4, 3, 2, 4, 3, 4] 0
3363 [7, 4, 3, 2, 4, 3] 0
3364 [7, 4, 3, 2, 4] 0
3365 [7, 4, 3, 2, 3] 0
3366 [7, 4, 3, 2] 0
3367 [7, 4, 3, 1, 0, 4, 1] 0
3368 [7, 4, 3, 1, 0, 4] 0
3369 [7, 4, 3, 1, 0, 1] 0
3370 [7, 4, 3, 1, 0] 0
3371 [7, 4, 3, 1, 4] 0
3372 [7, 4, 3, 1] 0
3373 [7, 4, 3, 0, 4] 0
3374 [7, 4, 3, 0] 0
3375 [7, 4, 3, 4] 0
3376 [7, 4, 3] 0
3377 [7, 4, 2, 1, 0, 2, 1, 2] 0
3378 [7, 4, 2, 1, 0, 2, 1] 0
3379 [7, 4, 2, 1, 0, 2] 0
3380 [7, 4, 2, 1, 0, 1] 0
3381 [7, 4, 2, 1, 0] 0
3382 [7, 4, 2, 1, 2] 0
3383 [7, 4, 2, 1] 0
3384 [7, 4, 2, 0] 0
3385 [7, 4, 2] 0
3386 [7, 4, 1, 0, 1] 0
3387 [7, 4, 1, 0] 0
3388 [7, 4, 1] 0
3389 [7, 4, 0] 0
3390 [7, 4] 0
3391 [7, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
3392 [7, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
3393 [7, 3, 2, 1, 0, 3, 2, 1, 3] 0
3394 [7, 3, 2, 1, 0, 3, 2, 1, 2] 0
3395 [7, 3, 2, 1, 0, 3, 2, 1] 0
3396 [7, 3, 2, 1, 0, 3, 2, 3] 0
3397 [7, 3, 2, 1, 0, 3, 2] 0
3398 [7, 3, 2, 1, 0, 3, 1] 0
3399 [7, 3, 2, 1, 0, 3] 0
3400 [7, 3, 2, 1, 0, 2, 1, 2] 0
3401 [7, 3, 2, 1, 0, 2, 1] 0
3402 [7, 3, 2, 1, 0, 2] 0
3403 [7, 3, 2, 1, 0, 1] 0
3404 [7, 3, 2, 1, 0] 0
3405 [7, 3, 2, 1, 3, 2, 3] 0
3406 [7, 3, 2, 1, 3, 2] 0
3407 [7, 3, 2, 1, 3] 0
3408 [7, 3, 2, 1, 2] 0
3409 [7, 3, 2, 1] 0
3410 [7, 3, 2, 0, 3] 0
3411 [7, 3, 2, 0] 0
3412 [7, 3, 2, 3] 0
3413 [7, 3, 2] 0
3414 [7, 3, 1, 0, 1] 0
3415 [7, 3, 1, 0] 0
3416 [7, 3, 1] 0
3417 [7, 3, 0] 0
3418 [7, 3] 0
3419 [7, 2, 1, 0, 2, 1, 2] 0
3420 [7, 2, 1, 0, 2, 1] 0
3421 [7, 2, 1, 0, 2] 0
3422 [7, 2, 1, 0, 1] 0
3423 [7, 2, 1, 0] 0
3424 [7, 2, 1, 2] 0
3425 [7, 2, 1] 0
3426 [7, 2, 0] 0
3427 [7, 2] 0
3428 [7, 1, 0, 1] 0
3429 [7, 1, 0] 0
3430 [7, 1] 0
3431 [7, 0] 0
3432 [7] 0
3433 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
3434 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
3435 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6] 0
3436 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 5] 0
3437 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4] 0
3438 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 6] 0
3439 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5] 0
3440 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 4] 0
3441 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6] 0
3442 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4, 5] 0
3443 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4] 0
3444 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5] 0
3445 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 4] 0
3446 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3] 0
3447 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5, 6] 0
3448 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5] 0
3449 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 6] 0
3450 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 5] 0
3451 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4] 0
3452 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 3, 6] 0
3453 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 3] 0
3454 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 6] 0
3455 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5] 0
3456 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 4, 3, 4] 0
3457 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 4, 3] 0
3458 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 4] 0
3459 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 3] 0
3460 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6] 0
3461 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
3462 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
3463 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3, 5] 0
3464 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3, 4] 0
3465 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3] 0
3466 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 5] 0
3467 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4] 0
3468 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 3] 0
3469 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5] 0
3470 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 4, 3, 4] 0
3471 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 4, 3] 0
3472 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 4] 0
3473 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 3] 0
3474 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2] 0
3475 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
3476 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
3477 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4, 6] 0
3478 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4, 5] 0
3479 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4] 0
3480 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 6] 0
3481 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5] 0
3482 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 4] 0
3483 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6] 0
3484 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 5, 4, 5] 0
3485 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 5, 4] 0
3486 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 5] 0
3487 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 4] 0
3488 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3] 0
3489 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 2, 6, 5, 6] 0
3490 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 2, 6, 5] 0
3491 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 2, 6] 0
3492 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 2, 5] 0
3493 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 2] 0
3494 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 6, 5, 6] 0
3495 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 6, 5] 0
3496 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 6] 0
3497 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 5] 0
3498 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4] 0
3499 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 3, 2, 6, 3] 0
3500 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 3, 2, 6] 0
3501 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 3, 2, 3] 0
3502 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 3, 2] 0
3503 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 3, 6] 0
3504 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 3] 0
3505 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 2, 6] 0
3506 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 2] 0
3507 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 6] 0
3508 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5] 0
3509 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 4, 3, 2, 4, 3, 4] 0
3510 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 4, 3, 2, 4, 3] 0
3511 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 4, 3, 2, 4] 0
3512 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 4, 3, 2, 3] 0
3513 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 4, 3, 2] 0
3514 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 4, 3, 4] 0
3515 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 4, 3] 0
3516 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 4, 2] 0
3517 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 4] 0
3518 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 3, 2, 3] 0
3519 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 3, 2] 0
3520 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 3] 0
3521 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 2] 0
3522 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6] 0
3523 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
3524 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
3525 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] 0
3526 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] 0
3527 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] 0
3528 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] 0
3529 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] 0
3530 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] 0
3531 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5] 0
3532 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] 0
3533 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] 0
3534 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4] 0
3535 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 3] 0
3536 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2] 0
3537 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] 0
3538 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4] 0
3539 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 5] 0
3540 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 4] 0
3541 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3] 0
3542 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 2, 5] 0
3543 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 2] 0
3544 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 5] 0
3545 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4] 0
3546 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 3, 2, 3] 0
3547 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 3, 2] 0
3548 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 3] 0
3549 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 2] 0
3550 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5] 0
3551 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
3552 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
3553 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 4, 3, 2, 4] 0
3554 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 4, 3, 2, 3] 0
3555 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 4, 3, 2] 0
3556 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 4, 3, 4] 0
3557 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 4, 3] 0
3558 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 4, 2] 0
3559 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 4] 0
3560 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 3, 2, 3] 0
3561 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 3, 2] 0
3562 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 3] 0
3563 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 2] 0
3564 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1] 0
3565 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
3566 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
3567 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6] 0
3568 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 5] 0
3569 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4] 0
3570 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 6] 0
3571 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5] 0
3572 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 4] 0
3573 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6] 0
3574 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4, 5] 0
3575 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4] 0
3576 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5] 0
3577 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 4] 0
3578 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3] 0
3579 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5, 6] 0
3580 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5] 0
3581 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 6] 0
3582 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 5] 0
3583 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4] 0
3584 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 3, 6] 0
3585 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 3] 0
3586 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 6] 0
3587 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5] 0
3588 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 4, 3, 4] 0
3589 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 4, 3] 0
3590 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 4] 0
3591 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 3] 0
3592 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6] 0
3593 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
3594 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
3595 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 5, 4, 3, 5] 0
3596 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 5, 4, 3, 4] 0
3597 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 5, 4, 3] 0
3598 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 5, 4, 5] 0
3599 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 5, 4] 0
3600 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 5, 3] 0
3601 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 5] 0
3602 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 4, 3, 4] 0
3603 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 4, 3] 0
3604 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 4] 0
3605 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 3] 0
3606 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2] 0
3607 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 6, 5, 4, 6, 5, 6] 0
3608 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 6, 5, 4, 6, 5] 0
3609 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 6, 5, 4, 6] 0
3610 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 6, 5, 4, 5] 0
3611 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 6, 5, 4] 0
3612 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 6, 5, 6] 0
3613 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 6, 5] 0
3614 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 6, 4] 0
3615 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 6] 0
3616 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 5, 4, 5] 0
3617 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 5, 4] 0
3618 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 5] 0
3619 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 4] 0
3620 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1] 0
3621 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
3622 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
3623 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 6, 5, 4, 6] 0
3624 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 6, 5, 4, 5] 0
3625 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 6, 5, 4] 0
3626 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 6, 5, 6] 0
3627 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 6, 5] 0
3628 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 6, 4] 0
3629 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 6] 0
3630 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 5, 4, 5] 0
3631 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 5, 4] 0
3632 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 5] 0
3633 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 4] 0
3634 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3] 0
3635 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 1, 6, 5, 2, 6] 0
3636 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 1, 6, 5, 2] 0
3637 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 1, 6, 5, 6] 0
3638 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 1, 6, 5] 0
3639 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 1, 6, 2] 0
3640 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 1, 6] 0
3641 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 1, 5, 2] 0
3642 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 1, 5] 0
3643 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 1, 2] 0
3644 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 1] 0
3645 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 6, 5, 6] 0
3646 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 6, 5] 0
3647 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 6] 0
3648 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 5] 0
3649 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2] 0
3650 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 1, 6, 5, 6] 0
3651 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 1, 6, 5] 0
3652 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 1, 6] 0
3653 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 1, 5] 0
3654 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 1] 0
3655 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 6, 5, 6] 0
3656 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 6, 5] 0
3657 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 6] 0
3658 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 5] 0
3659 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4] 0
3660 [6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 1, 6, 3, 2, 3] 0
3661 [6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 1, 6, 3, 2] 0
3662 [6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 1, 6, 3] 0
3663 [6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 1, 6, 2] 0
3664 [6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 1, 6] 0
3665 [6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 1, 3, 2, 3] 0
3666 [6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 1, 3, 2] 0
3667 [6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 1, 3] 0
3668 [6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 1, 2] 0
3669 [6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 1] 0
3670 [6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 6, 3] 0
3671 [6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 6] 0
3672 [6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 3] 0
3673 [6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2] 0
3674 [6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 1, 6] 0
3675 [6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 1] 0
3676 [6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 6] 0
3677 [6, 5, 4, 3, 2, 1, 0, 6, 5, 3] 0
3678 [6, 5, 4, 3, 2, 1, 0, 6, 5, 2, 1, 6, 2] 0
3679 [6, 5, 4, 3, 2, 1, 0, 6, 5, 2, 1, 6] 0
3680 [6, 5, 4, 3, 2, 1, 0, 6, 5, 2, 1, 2] 0
3681 [6, 5, 4, 3, 2, 1, 0, 6, 5, 2, 1] 0
3682 [6, 5, 4, 3, 2, 1, 0, 6, 5, 2, 6] 0
3683 [6, 5, 4, 3, 2, 1, 0, 6, 5, 2] 0
3684 [6, 5, 4, 3, 2, 1, 0, 6, 5, 1, 6] 0
3685 [6, 5, 4, 3, 2, 1, 0, 6, 5, 1] 0
3686 [6, 5, 4, 3, 2, 1, 0, 6, 5, 6] 0
3687 [6, 5, 4, 3, 2, 1, 0, 6, 5] 0
3688 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
3689 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
3690 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 4, 3, 2, 4] 0
3691 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 4, 3, 2, 3] 0
3692 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 4, 3, 2] 0
3693 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 4, 3, 4] 0
3694 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 4, 3] 0
3695 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 4, 2] 0
3696 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 4] 0
3697 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 3, 2, 3] 0
3698 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 3, 2] 0
3699 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 3] 0
3700 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 2] 0
3701 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1] 0
3702 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 4, 3, 4] 0
3703 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 4, 3] 0
3704 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 4] 0
3705 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 3] 0
3706 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2] 0
3707 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 1, 4] 0
3708 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 1] 0
3709 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 4] 0
3710 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3] 0
3711 [6, 5, 4, 3, 2, 1, 0, 6, 4, 2, 1, 2] 0
3712 [6, 5, 4, 3, 2, 1, 0, 6, 4, 2, 1] 0
3713 [6, 5, 4, 3, 2, 1, 0, 6, 4, 2] 0
3714 [6, 5, 4, 3, 2, 1, 0, 6, 4, 1] 0
3715 [6, 5, 4, 3, 2, 1, 0, 6, 4] 0
3716 [6, 5, 4, 3, 2, 1, 0, 6, 3, 2, 1, 3, 2, 3] 0
3717 [6, 5, 4, 3, 2, 1, 0, 6, 3, 2, 1, 3, 2] 0
3718 [6, 5, 4, 3, 2, 1, 0, 6, 3, 2, 1, 3] 0
3719 [6, 5, 4, 3, 2, 1, 0, 6, 3, 2, 1, 2] 0
3720 [6, 5, 4, 3, 2, 1, 0, 6, 3, 2, 1] 0
3721 [6, 5, 4, 3, 2, 1, 0, 6, 3, 2, 3] 0
3722 [6, 5, 4, 3, 2, 1, 0, 6, 3, 2] 0
3723 [6, 5, 4, 3, 2, 1, 0, 6, 3, 1] 0
3724 [6, 5, 4, 3, 2, 1, 0, 6, 3] 0
3725 [6, 5, 4, 3, 2, 1, 0, 6, 2, 1, 2] 0
3726 [6, 5, 4, 3, 2, 1, 0, 6, 2, 1] 0
3727 [6, 5, 4, 3, 2, 1, 0, 6, 2] 0
3728 [6, 5, 4, 3, 2, 1, 0, 6, 1] 0
3729 [6, 5, 4, 3, 2, 1, 0, 6] 0
3730 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
3731 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
3732 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] 0
3733 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] 0
3734 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] 0
3735 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] 0
3736 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] 0
3737 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] 0
3738 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5] 0
3739 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] 0
3740 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] 0
3741 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4] 0
3742 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 3] 0
3743 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2] 0
3744 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] 0
3745 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4] 0
3746 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5] 0
3747 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 4] 0
3748 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3] 0
3749 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2, 5] 0
3750 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2] 0
3751 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 5] 0
3752 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4] 0
3753 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2, 3] 0
3754 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2] 0
3755 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3] 0
3756 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 2] 0
3757 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5] 0
3758 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
3759 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
3760 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4] 0
3761 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 3] 0
3762 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2] 0
3763 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 4] 0
3764 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3] 0
3765 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 2] 0
3766 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4] 0
3767 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2, 3] 0
3768 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2] 0
3769 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3] 0
3770 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 2] 0
3771 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1] 0
3772 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
3773 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
3774 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5] 0
3775 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 4] 0
3776 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3] 0
3777 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 5] 0
3778 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4] 0
3779 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 3] 0
3780 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5] 0
3781 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4, 3, 4] 0
3782 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4, 3] 0
3783 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4] 0
3784 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 3] 0
3785 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2] 0
3786 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5, 4, 5] 0
3787 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5, 4] 0
3788 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5] 0
3789 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 4] 0
3790 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 1] 0
3791 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 5, 4, 5] 0
3792 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 5, 4] 0
3793 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 5] 0
3794 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 4] 0
3795 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3] 0
3796 [6, 5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 5, 2] 0
3797 [6, 5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 5] 0
3798 [6, 5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 2] 0
3799 [6, 5, 4, 3, 2, 1, 0, 5, 4, 2, 1] 0
3800 [6, 5, 4, 3, 2, 1, 0, 5, 4, 2, 5] 0
3801 [6, 5, 4, 3, 2, 1, 0, 5, 4, 2] 0
3802 [6, 5, 4, 3, 2, 1, 0, 5, 4, 1, 5] 0
3803 [6, 5, 4, 3, 2, 1, 0, 5, 4, 1] 0
3804 [6, 5, 4, 3, 2, 1, 0, 5, 4, 5] 0
3805 [6, 5, 4, 3, 2, 1, 0, 5, 4] 0
3806 [6, 5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3, 2, 3] 0
3807 [6, 5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3, 2] 0
3808 [6, 5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3] 0
3809 [6, 5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 2] 0
3810 [6, 5, 4, 3, 2, 1, 0, 5, 3, 2, 1] 0
3811 [6, 5, 4, 3, 2, 1, 0, 5, 3, 2, 3] 0
3812 [6, 5, 4, 3, 2, 1, 0, 5, 3, 2] 0
3813 [6, 5, 4, 3, 2, 1, 0, 5, 3, 1] 0
3814 [6, 5, 4, 3, 2, 1, 0, 5, 3] 0
3815 [6, 5, 4, 3, 2, 1, 0, 5, 2, 1, 2] 0
3816 [6, 5, 4, 3, 2, 1, 0, 5, 2, 1] 0
3817 [6, 5, 4, 3, 2, 1, 0, 5, 2] 0
3818 [6, 5, 4, 3, 2, 1, 0, 5, 1] 0
3819 [6, 5, 4, 3, 2, 1, 0, 5] 0
3820 [6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
3821 [6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
3822 [6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4] 0
3823 [6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 3] 0
3824 [6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2] 0
3825 [6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 4] 0
3826 [6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3] 0
3827 [6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 2] 0
3828 [6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4] 0
3829 [6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2, 3] 0
3830 [6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2] 0
3831 [6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3] 0
3832 [6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 2] 0
3833 [6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1] 0
3834 [6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3, 4] 0
3835 [6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3] 0
3836 [6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 4] 0
3837 [6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 3] 0
3838 [6, 5, 4, 3, 2, 1, 0, 4, 3, 2] 0
3839 [6, 5, 4, 3, 2, 1, 0, 4, 3, 1, 4] 0
3840 [6, 5, 4, 3, 2, 1, 0, 4, 3, 1] 0
3841 [6, 5, 4, 3, 2, 1, 0, 4, 3, 4] 0
3842 [6, 5, 4, 3, 2, 1, 0, 4, 3] 0
3843 [6, 5, 4, 3, 2, 1, 0, 4, 2, 1, 2] 0
3844 [6, 5, 4, 3, 2, 1, 0, 4, 2, 1] 0
3845 [6, 5, 4, 3, 2, 1, 0, 4, 2] 0
3846 [6, 5, 4, 3, 2, 1, 0, 4, 1] 0
3847 [6, 5, 4, 3, 2, 1, 0, 4] 0
3848 [6, 5, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
3849 [6, 5, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
3850 [6, 5, 4, 3, 2, 1, 0, 3, 2, 1, 3] 0
3851 [6, 5, 4, 3, 2, 1, 0, 3, 2, 1, 2] 0
3852 [6, 5, 4, 3, 2, 1, 0, 3, 2, 1] 0
3853 [6, 5, 4, 3, 2, 1, 0, 3, 2, 3] 0
3854 [6, 5, 4, 3, 2, 1, 0, 3, 2] 0
3855 [6, 5, 4, 3, 2, 1, 0, 3, 1] 0
3856 [6, 5, 4, 3, 2, 1, 0, 3] 0
3857 [6, 5, 4, 3, 2, 1, 0, 2, 1, 2] 0
3858 [6, 5, 4, 3, 2, 1, 0, 2, 1] 0
3859 [6, 5, 4, 3, 2, 1, 0, 2] 0
3860 [6, 5, 4, 3, 2, 1, 0, 1] 0
3861 [6, 5, 4, 3, 2, 1, 0] 0
3862 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
3863 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
3864 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6] 0
3865 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 5] 0
3866 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4] 0
3867 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 6] 0
3868 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5] 0
3869 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 4] 0
3870 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6] 0
3871 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4, 5] 0
3872 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4] 0
3873 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5] 0
3874 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 4] 0
3875 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3] 0
3876 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5, 6] 0
3877 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5] 0
3878 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 6] 0
3879 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 5] 0
3880 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4] 0
3881 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 3, 6] 0
3882 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 3] 0
3883 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 6] 0
3884 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5] 0
3885 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 4, 3, 4] 0
3886 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 4, 3] 0
3887 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 4] 0
3888 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 3] 0
3889 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6] 0
3890 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
3891 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
3892 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3, 5] 0
3893 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3, 4] 0
3894 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3] 0
3895 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 5] 0
3896 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4] 0
3897 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 3] 0
3898 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5] 0
3899 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 4, 3, 4] 0
3900 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 4, 3] 0
3901 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 4] 0
3902 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 3] 0
3903 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2] 0
3904 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
3905 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
3906 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4, 6] 0
3907 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4, 5] 0
3908 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4] 0
3909 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 6] 0
3910 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5] 0
3911 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 4] 0
3912 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6] 0
3913 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 5, 4, 5] 0
3914 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 5, 4] 0
3915 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 5] 0
3916 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 4] 0
3917 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3] 0
3918 [6, 5, 4, 3, 2, 1, 6, 5, 4, 2, 6, 5, 6] 0
3919 [6, 5, 4, 3, 2, 1, 6, 5, 4, 2, 6, 5] 0
3920 [6, 5, 4, 3, 2, 1, 6, 5, 4, 2, 6] 0
3921 [6, 5, 4, 3, 2, 1, 6, 5, 4, 2, 5] 0
3922 [6, 5, 4, 3, 2, 1, 6, 5, 4, 2] 0
3923 [6, 5, 4, 3, 2, 1, 6, 5, 4, 6, 5, 6] 0
3924 [6, 5, 4, 3, 2, 1, 6, 5, 4, 6, 5] 0
3925 [6, 5, 4, 3, 2, 1, 6, 5, 4, 6] 0
3926 [6, 5, 4, 3, 2, 1, 6, 5, 4, 5] 0
3927 [6, 5, 4, 3, 2, 1, 6, 5, 4] 0
3928 [6, 5, 4, 3, 2, 1, 6, 5, 3, 2, 6, 3] 0
3929 [6, 5, 4, 3, 2, 1, 6, 5, 3, 2, 6] 0
3930 [6, 5, 4, 3, 2, 1, 6, 5, 3, 2, 3] 0
3931 [6, 5, 4, 3, 2, 1, 6, 5, 3, 2] 0
3932 [6, 5, 4, 3, 2, 1, 6, 5, 3, 6] 0
3933 [6, 5, 4, 3, 2, 1, 6, 5, 3] 0
3934 [6, 5, 4, 3, 2, 1, 6, 5, 2, 6] 0
3935 [6, 5, 4, 3, 2, 1, 6, 5, 2] 0
3936 [6, 5, 4, 3, 2, 1, 6, 5, 6] 0
3937 [6, 5, 4, 3, 2, 1, 6, 5] 0
3938 [6, 5, 4, 3, 2, 1, 6, 4, 3, 2, 4, 3, 4] 0
3939 [6, 5, 4, 3, 2, 1, 6, 4, 3, 2, 4, 3] 0
3940 [6, 5, 4, 3, 2, 1, 6, 4, 3, 2, 4] 0
3941 [6, 5, 4, 3, 2, 1, 6, 4, 3, 2, 3] 0
3942 [6, 5, 4, 3, 2, 1, 6, 4, 3, 2] 0
3943 [6, 5, 4, 3, 2, 1, 6, 4, 3, 4] 0
3944 [6, 5, 4, 3, 2, 1, 6, 4, 3] 0
3945 [6, 5, 4, 3, 2, 1, 6, 4, 2] 0
3946 [6, 5, 4, 3, 2, 1, 6, 4] 0
3947 [6, 5, 4, 3, 2, 1, 6, 3, 2, 3] 0
3948 [6, 5, 4, 3, 2, 1, 6, 3, 2] 0
3949 [6, 5, 4, 3, 2, 1, 6, 3] 0
3950 [6, 5, 4, 3, 2, 1, 6, 2] 0
3951 [6, 5, 4, 3, 2, 1, 6] 0
3952 [6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
3953 [6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
3954 [6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] 0
3955 [6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] 0
3956 [6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] 0
3957 [6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] 0
3958 [6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] 0
3959 [6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] 0
3960 [6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5] 0
3961 [6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] 0
3962 [6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] 0
3963 [6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4] 0
3964 [6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 3] 0
3965 [6, 5, 4, 3, 2, 1, 5, 4, 3, 2] 0
3966 [6, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] 0
3967 [6, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4] 0
3968 [6, 5, 4, 3, 2, 1, 5, 4, 3, 5] 0
3969 [6, 5, 4, 3, 2, 1, 5, 4, 3, 4] 0
3970 [6, 5, 4, 3, 2, 1, 5, 4, 3] 0
3971 [6, 5, 4, 3, 2, 1, 5, 4, 2, 5] 0
3972 [6, 5, 4, 3, 2, 1, 5, 4, 2] 0
3973 [6, 5, 4, 3, 2, 1, 5, 4, 5] 0
3974 [6, 5, 4, 3, 2, 1, 5, 4] 0
3975 [6, 5, 4, 3, 2, 1, 5, 3, 2, 3] 0
3976 [6, 5, 4, 3, 2, 1, 5, 3, 2] 0
3977 [6, 5, 4, 3, 2, 1, 5, 3] 0
3978 [6, 5, 4, 3, 2, 1, 5, 2] 0
3979 [6, 5, 4, 3, 2, 1, 5] 0
3980 [6, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
3981 [6, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
3982 [6, 5, 4, 3, 2, 1, 4, 3, 2, 4] 0
3983 [6, 5, 4, 3, 2, 1, 4, 3, 2, 3] 0
3984 [6, 5, 4, 3, 2, 1, 4, 3, 2] 0
3985 [6, 5, 4, 3, 2, 1, 4, 3, 4] 0
3986 [6, 5, 4, 3, 2, 1, 4, 3] 0
3987 [6, 5, 4, 3, 2, 1, 4, 2] 0
3988 [6, 5, 4, 3, 2, 1, 4] 0
3989 [6, 5, 4, 3, 2, 1, 3, 2, 3] 0
3990 [6, 5, 4, 3, 2, 1, 3, 2] 0
3991 [6, 5, 4, 3, 2, 1, 3] 0
3992 [6, 5, 4, 3, 2, 1, 2] 0
3993 [6, 5, 4, 3, 2, 1] 0
3994 [6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
3995 [6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
3996 [6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 6, 5, 4, 6] 0
3997 [6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 6, 5, 4, 5] 0
3998 [6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 6, 5, 4] 0
3999 [6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 6, 5, 6] 0
4000 [6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 6, 5] 0
4001 [6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 6, 4] 0
4002 [6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 6] 0
4003 [6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 5, 4, 5] 0
4004 [6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 5, 4] 0
4005 [6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 5] 0
4006 [6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 4] 0
4007 [6, 5, 4, 3, 2, 0, 6, 5, 4, 3] 0
4008 [6, 5, 4, 3, 2, 0, 6, 5, 4, 6, 5, 6] 0
4009 [6, 5, 4, 3, 2, 0, 6, 5, 4, 6, 5] 0
4010 [6, 5, 4, 3, 2, 0, 6, 5, 4, 6] 0
4011 [6, 5, 4, 3, 2, 0, 6, 5, 4, 5] 0
4012 [6, 5, 4, 3, 2, 0, 6, 5, 4] 0
4013 [6, 5, 4, 3, 2, 0, 6, 5, 3, 6] 0
4014 [6, 5, 4, 3, 2, 0, 6, 5, 3] 0
4015 [6, 5, 4, 3, 2, 0, 6, 5, 6] 0
4016 [6, 5, 4, 3, 2, 0, 6, 5] 0
4017 [6, 5, 4, 3, 2, 0, 6, 4, 3, 4] 0
4018 [6, 5, 4, 3, 2, 0, 6, 4, 3] 0
4019 [6, 5, 4, 3, 2, 0, 6, 4] 0
4020 [6, 5, 4, 3, 2, 0, 6, 3] 0
4021 [6, 5, 4, 3, 2, 0, 6] 0
4022 [6, 5, 4, 3, 2, 0, 5, 4, 3, 5, 4, 5] 0
4023 [6, 5, 4, 3, 2, 0, 5, 4, 3, 5, 4] 0
4024 [6, 5, 4, 3, 2, 0, 5, 4, 3, 5] 0
4025 [6, 5, 4, 3, 2, 0, 5, 4, 3, 4] 0
4026 [6, 5, 4, 3, 2, 0, 5, 4, 3] 0
4027 [6, 5, 4, 3, 2, 0, 5, 4, 5] 0
4028 [6, 5, 4, 3, 2, 0, 5, 4] 0
4029 [6, 5, 4, 3, 2, 0, 5, 3] 0
4030 [6, 5, 4, 3, 2, 0, 5] 0
4031 [6, 5, 4, 3, 2, 0, 4, 3, 4] 0
4032 [6, 5, 4, 3, 2, 0, 4, 3] 0
4033 [6, 5, 4, 3, 2, 0, 4] 0
4034 [6, 5, 4, 3, 2, 0, 3] 0
4035 [6, 5, 4, 3, 2, 0] 0
4036 [6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
4037 [6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
4038 [6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6] 0
4039 [6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 5] 0
4040 [6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4] 0
4041 [6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 6] 0
4042 [6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5] 0
4043 [6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 4] 0
4044 [6, 5, 4, 3, 2, 6, 5, 4, 3, 6] 0
4045 [6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4, 5] 0
4046 [6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4] 0
4047 [6, 5, 4, 3, 2, 6, 5, 4, 3, 5] 0
4048 [6, 5, 4, 3, 2, 6, 5, 4, 3, 4] 0
4049 [6, 5, 4, 3, 2, 6, 5, 4, 3] 0
4050 [6, 5, 4, 3, 2, 6, 5, 4, 6, 5, 6] 0
4051 [6, 5, 4, 3, 2, 6, 5, 4, 6, 5] 0
4052 [6, 5, 4, 3, 2, 6, 5, 4, 6] 0
4053 [6, 5, 4, 3, 2, 6, 5, 4, 5] 0
4054 [6, 5, 4, 3, 2, 6, 5, 4] 0
4055 [6, 5, 4, 3, 2, 6, 5, 3, 6] 0
4056 [6, 5, 4, 3, 2, 6, 5, 3] 0
4057 [6, 5, 4, 3, 2, 6, 5, 6] 0
4058 [6, 5, 4, 3, 2, 6, 5] 0
4059 [6, 5, 4, 3, 2, 6, 4, 3, 4] 0
4060 [6, 5, 4, 3, 2, 6, 4, 3] 0
4061 [6, 5, 4, 3, 2, 6, 4] 0
4062 [6, 5, 4, 3, 2, 6, 3] 0
4063 [6, 5, 4, 3, 2, 6] 0
4064 [6, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
4065 [6, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
4066 [6, 5, 4, 3, 2, 5, 4, 3, 5] 0
4067 [6, 5, 4, 3, 2, 5, 4, 3, 4] 0
4068 [6, 5, 4, 3, 2, 5, 4, 3] 0
4069 [6, 5, 4, 3, 2, 5, 4, 5] 0
4070 [6, 5, 4, 3, 2, 5, 4] 0
4071 [6, 5, 4, 3, 2, 5, 3] 0
4072 [6, 5, 4, 3, 2, 5] 0
4073 [6, 5, 4, 3, 2, 4, 3, 4] 0
4074 [6, 5, 4, 3, 2, 4, 3] 0
4075 [6, 5, 4, 3, 2, 4] 0
4076 [6, 5, 4, 3, 2, 3] 0
4077 [6, 5, 4, 3, 2] 0
4078 [6, 5, 4, 3, 1, 0, 6, 5, 4, 1, 6, 5, 6] 0
4079 [6, 5, 4, 3, 1, 0, 6, 5, 4, 1, 6, 5] 0
4080 [6, 5, 4, 3, 1, 0, 6, 5, 4, 1, 6] 0
4081 [6, 5, 4, 3, 1, 0, 6, 5, 4, 1, 5] 0
4082 [6, 5, 4, 3, 1, 0, 6, 5, 4, 1] 0
4083 [6, 5, 4, 3, 1, 0, 6, 5, 4, 6, 5, 6] 0
4084 [6, 5, 4, 3, 1, 0, 6, 5, 4, 6, 5] 0
4085 [6, 5, 4, 3, 1, 0, 6, 5, 4, 6] 0
4086 [6, 5, 4, 3, 1, 0, 6, 5, 4, 5] 0
4087 [6, 5, 4, 3, 1, 0, 6, 5, 4] 0
4088 [6, 5, 4, 3, 1, 0, 6, 5, 1, 6] 0
4089 [6, 5, 4, 3, 1, 0, 6, 5, 1] 0
4090 [6, 5, 4, 3, 1, 0, 6, 5, 6] 0
4091 [6, 5, 4, 3, 1, 0, 6, 5] 0
4092 [6, 5, 4, 3, 1, 0, 6, 4, 1] 0
4093 [6, 5, 4, 3, 1, 0, 6, 4] 0
4094 [6, 5, 4, 3, 1, 0, 6, 1] 0
4095 [6, 5, 4, 3, 1, 0, 6] 0
4096 [6, 5, 4, 3, 1, 0, 5, 4, 1, 5] 0
4097 [6, 5, 4, 3, 1, 0, 5, 4, 1] 0
4098 [6, 5, 4, 3, 1, 0, 5, 4, 5] 0
4099 [6, 5, 4, 3, 1, 0, 5, 4] 0
4100 [6, 5, 4, 3, 1, 0, 5, 1] 0
4101 [6, 5, 4, 3, 1, 0, 5] 0
4102 [6, 5, 4, 3, 1, 0, 4, 1] 0
4103 [6, 5, 4, 3, 1, 0, 4] 0
4104 [6, 5, 4, 3, 1, 0, 1] 0
4105 [6, 5, 4, 3, 1, 0] 0
4106 [6, 5, 4, 3, 1, 6, 5, 4, 6, 5, 6] 0
4107 [6, 5, 4, 3, 1, 6, 5, 4, 6, 5] 0
4108 [6, 5, 4, 3, 1, 6, 5, 4, 6] 0
4109 [6, 5, 4, 3, 1, 6, 5, 4, 5] 0
4110 [6, 5, 4, 3, 1, 6, 5, 4] 0
4111 [6, 5, 4, 3, 1, 6, 5, 6] 0
4112 [6, 5, 4, 3, 1, 6, 5] 0
4113 [6, 5, 4, 3, 1, 6, 4] 0
4114 [6, 5, 4, 3, 1, 6] 0
4115 [6, 5, 4, 3, 1, 5, 4, 5] 0
4116 [6, 5, 4, 3, 1, 5, 4] 0
4117 [6, 5, 4, 3, 1, 5] 0
4118 [6, 5, 4, 3, 1, 4] 0
4119 [6, 5, 4, 3, 1] 0
4120 [6, 5, 4, 3, 0, 6, 5, 4, 6, 5, 6] 0
4121 [6, 5, 4, 3, 0, 6, 5, 4, 6, 5] 0
4122 [6, 5, 4, 3, 0, 6, 5, 4, 6] 0
4123 [6, 5, 4, 3, 0, 6, 5, 4, 5] 0
4124 [6, 5, 4, 3, 0, 6, 5, 4] 0
4125 [6, 5, 4, 3, 0, 6, 5, 6] 0
4126 [6, 5, 4, 3, 0, 6, 5] 0
4127 [6, 5, 4, 3, 0, 6, 4] 0
4128 [6, 5, 4, 3, 0, 6] 0
4129 [6, 5, 4, 3, 0, 5, 4, 5] 0
4130 [6, 5, 4, 3, 0, 5, 4] 0
4131 [6, 5, 4, 3, 0, 5] 0
4132 [6, 5, 4, 3, 0, 4] 0
4133 [6, 5, 4, 3, 0] 0
4134 [6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
4135 [6, 5, 4, 3, 6, 5, 4, 6, 5] 0
4136 [6, 5, 4, 3, 6, 5, 4, 6] 0
4137 [6, 5, 4, 3, 6, 5, 4, 5] 0
4138 [6, 5, 4, 3, 6, 5, 4] 0
4139 [6, 5, 4, 3, 6, 5, 6] 0
4140 [6, 5, 4, 3, 6, 5] 0
4141 [6, 5, 4, 3, 6, 4] 0
4142 [6, 5, 4, 3, 6] 0
4143 [6, 5, 4, 3, 5, 4, 5] 0
4144 [6, 5, 4, 3, 5, 4] 0
4145 [6, 5, 4, 3, 5] 0
4146 [6, 5, 4, 3, 4] 0
4147 [6, 5, 4, 3] 0
4148 [6, 5, 4, 2, 1, 0, 6, 5, 2, 1, 6, 2] 0
4149 [6, 5, 4, 2, 1, 0, 6, 5, 2, 1, 6] 0
4150 [6, 5, 4, 2, 1, 0, 6, 5, 2, 1, 2] 0
4151 [6, 5, 4, 2, 1, 0, 6, 5, 2, 1] 0
4152 [6, 5, 4, 2, 1, 0, 6, 5, 2, 6] 0
4153 [6, 5, 4, 2, 1, 0, 6, 5, 2] 0
4154 [6, 5, 4, 2, 1, 0, 6, 5, 1, 6] 0
4155 [6, 5, 4, 2, 1, 0, 6, 5, 1] 0
4156 [6, 5, 4, 2, 1, 0, 6, 5, 6] 0
4157 [6, 5, 4, 2, 1, 0, 6, 5] 0
4158 [6, 5, 4, 2, 1, 0, 6, 2, 1, 2] 0
4159 [6, 5, 4, 2, 1, 0, 6, 2, 1] 0
4160 [6, 5, 4, 2, 1, 0, 6, 2] 0
4161 [6, 5, 4, 2, 1, 0, 6, 1] 0
4162 [6, 5, 4, 2, 1, 0, 6] 0
4163 [6, 5, 4, 2, 1, 0, 5, 2, 1, 2] 0
4164 [6, 5, 4, 2, 1, 0, 5, 2, 1] 0
4165 [6, 5, 4, 2, 1, 0, 5, 2] 0
4166 [6, 5, 4, 2, 1, 0, 5, 1] 0
4167 [6, 5, 4, 2, 1, 0, 5] 0
4168 [6, 5, 4, 2, 1, 0, 2, 1, 2] 0
4169 [6, 5, 4, 2, 1, 0, 2, 1] 0
4170 [6, 5, 4, 2, 1, 0, 2] 0
4171 [6, 5, 4, 2, 1, 0, 1] 0
4172 [6, 5, 4, 2, 1, 0] 0
4173 [6, 5, 4, 2, 1, 6, 5, 2, 6] 0
4174 [6, 5, 4, 2, 1, 6, 5, 2] 0
4175 [6, 5, 4, 2, 1, 6, 5, 6] 0
4176 [6, 5, 4, 2, 1, 6, 5] 0
4177 [6, 5, 4, 2, 1, 6, 2] 0
4178 [6, 5, 4, 2, 1, 6] 0
4179 [6, 5, 4, 2, 1, 5, 2] 0
4180 [6, 5, 4, 2, 1, 5] 0
4181 [6, 5, 4, 2, 1, 2] 0
4182 [6, 5, 4, 2, 1] 0
4183 [6, 5, 4, 2, 0, 6, 5, 6] 0
4184 [6, 5, 4, 2, 0, 6, 5] 0
4185 [6, 5, 4, 2, 0, 6] 0
4186 [6, 5, 4, 2, 0, 5] 0
4187 [6, 5, 4, 2, 0] 0
4188 [6, 5, 4, 2, 6, 5, 6] 0
4189 [6, 5, 4, 2, 6, 5] 0
4190 [6, 5, 4, 2, 6] 0
4191 [6, 5, 4, 2, 5] 0
4192 [6, 5, 4, 2] 0
4193 [6, 5, 4, 1, 0, 6, 5, 1, 6] 0
4194 [6, 5, 4, 1, 0, 6, 5, 1] 0
4195 [6, 5, 4, 1, 0, 6, 5, 6] 0
4196 [6, 5, 4, 1, 0, 6, 5] 0
4197 [6, 5, 4, 1, 0, 6, 1] 0
4198 [6, 5, 4, 1, 0, 6] 0
4199 [6, 5, 4, 1, 0, 5, 1] 0
4200 [6, 5, 4, 1, 0, 5] 0
4201 [6, 5, 4, 1, 0, 1] 0
4202 [6, 5, 4, 1, 0] 0
4203 [6, 5, 4, 1, 6, 5, 6] 0
4204 [6, 5, 4, 1, 6, 5] 0
4205 [6, 5, 4, 1, 6] 0
4206 [6, 5, 4, 1, 5] 0
4207 [6, 5, 4, 1] 0
4208 [6, 5, 4, 0, 6, 5, 6] 0
4209 [6, 5, 4, 0, 6, 5] 0
4210 [6, 5, 4, 0, 6] 0
4211 [6, 5, 4, 0, 5] 0
4212 [6, 5, 4, 0] 0
4213 [6, 5, 4, 6, 5, 6] 0
4214 [6, 5, 4, 6, 5] 0
4215 [6, 5, 4, 6] 0
4216 [6, 5, 4, 5] 0
4217 [6, 5, 4] 0
4218 [6, 5, 3, 2, 1, 0, 6, 3, 2, 1, 3, 2, 3] 0
4219 [6, 5, 3, 2, 1, 0, 6, 3, 2, 1, 3, 2] 0
4220 [6, 5, 3, 2, 1, 0, 6, 3, 2, 1, 3] 0
4221 [6, 5, 3, 2, 1, 0, 6, 3, 2, 1, 2] 0
4222 [6, 5, 3, 2, 1, 0, 6, 3, 2, 1] 0
4223 [6, 5, 3, 2, 1, 0, 6, 3, 2, 3] 0
4224 [6, 5, 3, 2, 1, 0, 6, 3, 2] 0
4225 [6, 5, 3, 2, 1, 0, 6, 3, 1] 0
4226 [6, 5, 3, 2, 1, 0, 6, 3] 0
4227 [6, 5, 3, 2, 1, 0, 6, 2, 1, 2] 0
4228 [6, 5, 3, 2, 1, 0, 6, 2, 1] 0
4229 [6, 5, 3, 2, 1, 0, 6, 2] 0
4230 [6, 5, 3, 2, 1, 0, 6, 1] 0
4231 [6, 5, 3, 2, 1, 0, 6] 0
4232 [6, 5, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
4233 [6, 5, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
4234 [6, 5, 3, 2, 1, 0, 3, 2, 1, 3] 0
4235 [6, 5, 3, 2, 1, 0, 3, 2, 1, 2] 0
4236 [6, 5, 3, 2, 1, 0, 3, 2, 1] 0
4237 [6, 5, 3, 2, 1, 0, 3, 2, 3] 0
4238 [6, 5, 3, 2, 1, 0, 3, 2] 0
4239 [6, 5, 3, 2, 1, 0, 3, 1] 0
4240 [6, 5, 3, 2, 1, 0, 3] 0
4241 [6, 5, 3, 2, 1, 0, 2, 1, 2] 0
4242 [6, 5, 3, 2, 1, 0, 2, 1] 0
4243 [6, 5, 3, 2, 1, 0, 2] 0
4244 [6, 5, 3, 2, 1, 0, 1] 0
4245 [6, 5, 3, 2, 1, 0] 0
4246 [6, 5, 3, 2, 1, 6, 3, 2, 3] 0
4247 [6, 5, 3, 2, 1, 6, 3, 2] 0
4248 [6, 5, 3, 2, 1, 6, 3] 0
4249 [6, 5, 3, 2, 1, 6, 2] 0
4250 [6, 5, 3, 2, 1, 6] 0
4251 [6, 5, 3, 2, 1, 3, 2, 3] 0
4252 [6, 5, 3, 2, 1, 3, 2] 0
4253 [6, 5, 3, 2, 1, 3] 0
4254 [6, 5, 3, 2, 1, 2] 0
4255 [6, 5, 3, 2, 1] 0
4256 [6, 5, 3, 2, 0, 6, 3] 0
4257 [6, 5, 3, 2, 0, 6] 0
4258 [6, 5, 3, 2, 0, 3] 0
4259 [6, 5, 3, 2, 0] 0
4260 [6, 5, 3, 2, 6, 3] 0
4261 [6, 5, 3, 2, 6] 0
4262 [6, 5, 3, 2, 3] 0
4263 [6, 5, 3, 2] 0
4264 [6, 5, 3, 1, 0, 6, 1] 0
4265 [6, 5, 3, 1, 0, 6] 0
4266 [6, 5, 3, 1, 0, 1] 0
4267 [6, 5, 3, 1, 0] 0
4268 [6, 5, 3, 1, 6] 0
4269 [6, 5, 3, 1] 0
4270 [6, 5, 3, 0, 6] 0
4271 [6, 5, 3, 0] 0
4272 [6, 5, 3, 6] 0
4273 [6, 5, 3] 0
4274 [6, 5, 2, 1, 0, 6, 2, 1, 2] 0
4275 [6, 5, 2, 1, 0, 6, 2, 1] 0
4276 [6, 5, 2, 1, 0, 6, 2] 0
4277 [6, 5, 2, 1, 0, 6, 1] 0
4278 [6, 5, 2, 1, 0, 6] 0
4279 [6, 5, 2, 1, 0, 2, 1, 2] 0
4280 [6, 5, 2, 1, 0, 2, 1] 0
4281 [6, 5, 2, 1, 0, 2] 0
4282 [6, 5, 2, 1, 0, 1] 0
4283 [6, 5, 2, 1, 0] 0
4284 [6, 5, 2, 1, 6, 2] 0
4285 [6, 5, 2, 1, 6] 0
4286 [6, 5, 2, 1, 2] 0
4287 [6, 5, 2, 1] 0
4288 [6, 5, 2, 0, 6] 0
4289 [6, 5, 2, 0] 0
4290 [6, 5, 2, 6] 0
4291 [6, 5, 2] 0
4292 [6, 5, 1, 0, 6, 1] 0
4293 [6, 5, 1, 0, 6] 0
4294 [6, 5, 1, 0, 1] 0
4295 [6, 5, 1, 0] 0
4296 [6, 5, 1, 6] 0
4297 [6, 5, 1] 0
4298 [6, 5, 0, 6] 0
4299 [6, 5, 0] 0
4300 [6, 5, 6] 0
4301 [6, 5] 0
4302 [6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
4303 [6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
4304 [6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4] 0
4305 [6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 3] 0
4306 [6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2] 0
4307 [6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 4] 0
4308 [6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3] 0
4309 [6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 2] 0
4310 [6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4] 0
4311 [6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2, 3] 0
4312 [6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2] 0
4313 [6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3] 0
4314 [6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 2] 0
4315 [6, 4, 3, 2, 1, 0, 4, 3, 2, 1] 0
4316 [6, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3, 4] 0
4317 [6, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3] 0
4318 [6, 4, 3, 2, 1, 0, 4, 3, 2, 4] 0
4319 [6, 4, 3, 2, 1, 0, 4, 3, 2, 3] 0
4320 [6, 4, 3, 2, 1, 0, 4, 3, 2] 0
4321 [6, 4, 3, 2, 1, 0, 4, 3, 1, 4] 0
4322 [6, 4, 3, 2, 1, 0, 4, 3, 1] 0
4323 [6, 4, 3, 2, 1, 0, 4, 3, 4] 0
4324 [6, 4, 3, 2, 1, 0, 4, 3] 0
4325 [6, 4, 3, 2, 1, 0, 4, 2, 1, 2] 0
4326 [6, 4, 3, 2, 1, 0, 4, 2, 1] 0
4327 [6, 4, 3, 2, 1, 0, 4, 2] 0
4328 [6, 4, 3, 2, 1, 0, 4, 1] 0
4329 [6, 4, 3, 2, 1, 0, 4] 0
4330 [6, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
4331 [6, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
4332 [6, 4, 3, 2, 1, 0, 3, 2, 1, 3] 0
4333 [6, 4, 3, 2, 1, 0, 3, 2, 1, 2] 0
4334 [6, 4, 3, 2, 1, 0, 3, 2, 1] 0
4335 [6, 4, 3, 2, 1, 0, 3, 2, 3] 0
4336 [6, 4, 3, 2, 1, 0, 3, 2] 0
4337 [6, 4, 3, 2, 1, 0, 3, 1] 0
4338 [6, 4, 3, 2, 1, 0, 3] 0
4339 [6, 4, 3, 2, 1, 0, 2, 1, 2] 0
4340 [6, 4, 3, 2, 1, 0, 2, 1] 0
4341 [6, 4, 3, 2, 1, 0, 2] 0
4342 [6, 4, 3, 2, 1, 0, 1] 0
4343 [6, 4, 3, 2, 1, 0] 0
4344 [6, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
4345 [6, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
4346 [6, 4, 3, 2, 1, 4, 3, 2, 4] 0
4347 [6, 4, 3, 2, 1, 4, 3, 2, 3] 0
4348 [6, 4, 3, 2, 1, 4, 3, 2] 0
4349 [6, 4, 3, 2, 1, 4, 3, 4] 0
4350 [6, 4, 3, 2, 1, 4, 3] 0
4351 [6, 4, 3, 2, 1, 4, 2] 0
4352 [6, 4, 3, 2, 1, 4] 0
4353 [6, 4, 3, 2, 1, 3, 2, 3] 0
4354 [6, 4, 3, 2, 1, 3, 2] 0
4355 [6, 4, 3, 2, 1, 3] 0
4356 [6, 4, 3, 2, 1, 2] 0
4357 [6, 4, 3, 2, 1] 0
4358 [6, 4, 3, 2, 0, 4, 3, 4] 0
4359 [6, 4, 3, 2, 0, 4, 3] 0
4360 [6, 4, 3, 2, 0, 4] 0
4361 [6, 4, 3, 2, 0, 3] 0
4362 [6, 4, 3, 2, 0] 0
4363 [6, 4, 3, 2, 4, 3, 4] 0
4364 [6, 4, 3, 2, 4, 3] 0
4365 [6, 4, 3, 2, 4] 0
4366 [6, 4, 3, 2, 3] 0
4367 [6, 4, 3, 2] 0
4368 [6, 4, 3, 1, 0, 4, 1] 0
4369 [6, 4, 3, 1, 0, 4] 0
4370 [6, 4, 3, 1, 0, 1] 0
4371 [6, 4, 3, 1, 0] 0
4372 [6, 4, 3, 1, 4] 0
4373 [6, 4, 3, 1] 0
4374 [6, 4, 3, 0, 4] 0
4375 [6, 4, 3, 0] 0
4376 [6, 4, 3, 4] 0
4377 [6, 4, 3] 0
4378 [6, 4, 2, 1, 0, 2, 1, 2] 0
4379 [6, 4, 2, 1, 0, 2, 1] 0
4380 [6, 4, 2, 1, 0, 2] 0
4381 [6, 4, 2, 1, 0, 1] 0
4382 [6, 4, 2, 1, 0] 0
4383 [6, 4, 2, 1, 2] 0
4384 [6, 4, 2, 1] 0
4385 [6, 4, 2, 0] 0
4386 [6, 4, 2] 0
4387 [6, 4, 1, 0, 1] 0
4388 [6, 4, 1, 0] 0
4389 [6, 4, 1] 0
4390 [6, 4, 0] 0
4391 [6, 4] 0
4392 [6, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
4393 [6, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
4394 [6, 3, 2, 1, 0, 3, 2, 1, 3] 0
4395 [6, 3, 2, 1, 0, 3, 2, 1, 2] 0
4396 [6, 3, 2, 1, 0, 3, 2, 1] 0
4397 [6, 3, 2, 1, 0, 3, 2, 3] 0
4398 [6, 3, 2, 1, 0, 3, 2] 0
4399 [6, 3, 2, 1, 0, 3, 1] 0
4400 [6, 3, 2, 1, 0, 3] 0
4401 [6, 3, 2, 1, 0, 2, 1, 2] 0
4402 [6, 3, 2, 1, 0, 2, 1] 0
4403 [6, 3, 2, 1, 0, 2] 0
4404 [6, 3, 2, 1, 0, 1] 0
4405 [6, 3, 2, 1, 0] 0
4406 [6, 3, 2, 1, 3, 2, 3] 0
4407 [6, 3, 2, 1, 3, 2] 0
4408 [6, 3, 2, 1, 3] 0
4409 [6, 3, 2, 1, 2] 0
4410 [6, 3, 2, 1] 0
4411 [6, 3, 2, 0, 3] 0
4412 [6, 3, 2, 0] 0
4413 [6, 3, 2, 3] 0
4414 [6, 3, 2] 0
4415 [6, 3, 1, 0, 1] 0
4416 [6, 3, 1, 0] 0
4417 [6, 3, 1] 0
4418 [6, 3, 0] 0
4419 [6, 3] 0
4420 [6, 2, 1, 0, 2, 1, 2] 0
4421 [6, 2, 1, 0, 2, 1] 0
4422 [6, 2, 1, 0, 2] 0
4423 [6, 2, 1, 0, 1] 0
4424 [6, 2, 1, 0] 0
4425 [6, 2, 1, 2] 0
4426 [6, 2, 1] 0
4427 [6, 2, 0] 0
4428 [6, 2] 0
4429 [6, 1, 0, 1] 0
4430 [6, 1, 0] 0
4431 [6, 1] 0
4432 [6, 0] 0
4433 [6] 0
4434 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
4435 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
4436 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] 0
4437 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] 0
4438 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] 0
4439 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] 0
4440 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] 0
4441 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] 0
4442 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5] 0
4443 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] 0
4444 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] 0
4445 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4] 0
4446 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 3] 0
4447 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2] 0
4448 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] 0
4449 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4] 0
4450 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5] 0
4451 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 4] 0
4452 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3] 0
4453 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2, 5] 0
4454 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2] 0
4455 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 5] 0
4456 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4] 0
4457 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2, 3] 0
4458 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2] 0
4459 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3] 0
4460 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 2] 0
4461 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5] 0
4462 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
4463 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
4464 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4] 0
4465 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 3] 0
4466 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2] 0
4467 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 4] 0
4468 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3] 0
4469 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 2] 0
4470 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4] 0
4471 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2, 3] 0
4472 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2] 0
4473 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3] 0
4474 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 2] 0
4475 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1] 0
4476 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
4477 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
4478 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5] 0
4479 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 4] 0
4480 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3] 0
4481 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 5] 0
4482 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4] 0
4483 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 3] 0
4484 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5] 0
4485 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4, 3, 4] 0
4486 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4, 3] 0
4487 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4] 0
4488 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 3] 0
4489 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2] 0
4490 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5, 4, 5] 0
4491 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5, 4] 0
4492 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5] 0
4493 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 4] 0
4494 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1] 0
4495 [5, 4, 3, 2, 1, 0, 5, 4, 3, 5, 4, 5] 0
4496 [5, 4, 3, 2, 1, 0, 5, 4, 3, 5, 4] 0
4497 [5, 4, 3, 2, 1, 0, 5, 4, 3, 5] 0
4498 [5, 4, 3, 2, 1, 0, 5, 4, 3, 4] 0
4499 [5, 4, 3, 2, 1, 0, 5, 4, 3] 0
4500 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 5, 2] 0
4501 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 5] 0
4502 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 2] 0
4503 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1] 0
4504 [5, 4, 3, 2, 1, 0, 5, 4, 2, 5] 0
4505 [5, 4, 3, 2, 1, 0, 5, 4, 2] 0
4506 [5, 4, 3, 2, 1, 0, 5, 4, 1, 5] 0
4507 [5, 4, 3, 2, 1, 0, 5, 4, 1] 0
4508 [5, 4, 3, 2, 1, 0, 5, 4, 5] 0
4509 [5, 4, 3, 2, 1, 0, 5, 4] 0
4510 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3, 2, 3] 0
4511 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3, 2] 0
4512 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3] 0
4513 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 2] 0
4514 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1] 0
4515 [5, 4, 3, 2, 1, 0, 5, 3, 2, 3] 0
4516 [5, 4, 3, 2, 1, 0, 5, 3, 2] 0
4517 [5, 4, 3, 2, 1, 0, 5, 3, 1] 0
4518 [5, 4, 3, 2, 1, 0, 5, 3] 0
4519 [5, 4, 3, 2, 1, 0, 5, 2, 1, 2] 0
4520 [5, 4, 3, 2, 1, 0, 5, 2, 1] 0
4521 [5, 4, 3, 2, 1, 0, 5, 2] 0
4522 [5, 4, 3, 2, 1, 0, 5, 1] 0
4523 [5, 4, 3, 2, 1, 0, 5] 0
4524 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
4525 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
4526 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4] 0
4527 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 3] 0
4528 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2] 0
4529 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 4] 0
4530 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3] 0
4531 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 2] 0
4532 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4] 0
4533 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2, 3] 0
4534 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2] 0
4535 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3] 0
4536 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 2] 0
4537 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1] 0
4538 [5, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3, 4] 0
4539 [5, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3] 0
4540 [5, 4, 3, 2, 1, 0, 4, 3, 2, 4] 0
4541 [5, 4, 3, 2, 1, 0, 4, 3, 2, 3] 0
4542 [5, 4, 3, 2, 1, 0, 4, 3, 2] 0
4543 [5, 4, 3, 2, 1, 0, 4, 3, 1, 4] 0
4544 [5, 4, 3, 2, 1, 0, 4, 3, 1] 0
4545 [5, 4, 3, 2, 1, 0, 4, 3, 4] 0
4546 [5, 4, 3, 2, 1, 0, 4, 3] 0
4547 [5, 4, 3, 2, 1, 0, 4, 2, 1, 2] 0
4548 [5, 4, 3, 2, 1, 0, 4, 2, 1] 0
4549 [5, 4, 3, 2, 1, 0, 4, 2] 0
4550 [5, 4, 3, 2, 1, 0, 4, 1] 0
4551 [5, 4, 3, 2, 1, 0, 4] 0
4552 [5, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
4553 [5, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
4554 [5, 4, 3, 2, 1, 0, 3, 2, 1, 3] 0
4555 [5, 4, 3, 2, 1, 0, 3, 2, 1, 2] 0
4556 [5, 4, 3, 2, 1, 0, 3, 2, 1] 0
4557 [5, 4, 3, 2, 1, 0, 3, 2, 3] 0
4558 [5, 4, 3, 2, 1, 0, 3, 2] 0
4559 [5, 4, 3, 2, 1, 0, 3, 1] 0
4560 [5, 4, 3, 2, 1, 0, 3] 0
4561 [5, 4, 3, 2, 1, 0, 2, 1, 2] 0
4562 [5, 4, 3, 2, 1, 0, 2, 1] 0
4563 [5, 4, 3, 2, 1, 0, 2] 0
4564 [5, 4, 3, 2, 1, 0, 1] 0
4565 [5, 4, 3, 2, 1, 0] 0
4566 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
4567 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
4568 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] 0
4569 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] 0
4570 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] 0
4571 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] 0
4572 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] 0
4573 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] 0
4574 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5] 0
4575 [5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] 0
4576 [5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] 0
4577 [5, 4, 3, 2, 1, 5, 4, 3, 2, 4] 0
4578 [5, 4, 3, 2, 1, 5, 4, 3, 2, 3] 0
4579 [5, 4, 3, 2, 1, 5, 4, 3, 2] 0
4580 [5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] 0
4581 [5, 4, 3, 2, 1, 5, 4, 3, 5, 4] 0
4582 [5, 4, 3, 2, 1, 5, 4, 3, 5] 0
4583 [5, 4, 3, 2, 1, 5, 4, 3, 4] 0
4584 [5, 4, 3, 2, 1, 5, 4, 3] 0
4585 [5, 4, 3, 2, 1, 5, 4, 2, 5] 0
4586 [5, 4, 3, 2, 1, 5, 4, 2] 0
4587 [5, 4, 3, 2, 1, 5, 4, 5] 0
4588 [5, 4, 3, 2, 1, 5, 4] 0
4589 [5, 4, 3, 2, 1, 5, 3, 2, 3] 0
4590 [5, 4, 3, 2, 1, 5, 3, 2] 0
4591 [5, 4, 3, 2, 1, 5, 3] 0
4592 [5, 4, 3, 2, 1, 5, 2] 0
4593 [5, 4, 3, 2, 1, 5] 0
4594 [5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
4595 [5, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
4596 [5, 4, 3, 2, 1, 4, 3, 2, 4] 0
4597 [5, 4, 3, 2, 1, 4, 3, 2, 3] 0
4598 [5, 4, 3, 2, 1, 4, 3, 2] 0
4599 [5, 4, 3, 2, 1, 4, 3, 4] 0
4600 [5, 4, 3, 2, 1, 4, 3] 0
4601 [5, 4, 3, 2, 1, 4, 2] 0
4602 [5, 4, 3, 2, 1, 4] 0
4603 [5, 4, 3, 2, 1, 3, 2, 3] 0
4604 [5, 4, 3, 2, 1, 3, 2] 0
4605 [5, 4, 3, 2, 1, 3] 0
4606 [5, 4, 3, 2, 1, 2] 0
4607 [5, 4, 3, 2, 1] 0
4608 [5, 4, 3, 2, 0, 5, 4, 3, 5, 4, 5] 0
4609 [5, 4, 3, 2, 0, 5, 4, 3, 5, 4] 0
4610 [5, 4, 3, 2, 0, 5, 4, 3, 5] 0
4611 [5, 4, 3, 2, 0, 5, 4, 3, 4] 0
4612 [5, 4, 3, 2, 0, 5, 4, 3] 0
4613 [5, 4, 3, 2, 0, 5, 4, 5] 0
4614 [5, 4, 3, 2, 0, 5, 4] 0
4615 [5, 4, 3, 2, 0, 5, 3] 0
4616 [5, 4, 3, 2, 0, 5] 0
4617 [5, 4, 3, 2, 0, 4, 3, 4] 0
4618 [5, 4, 3, 2, 0, 4, 3] 0
4619 [5, 4, 3, 2, 0, 4] 0
4620 [5, 4, 3, 2, 0, 3] 0
4621 [5, 4, 3, 2, 0] 0
4622 [5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
4623 [5, 4, 3, 2, 5, 4, 3, 5, 4] 0
4624 [5, 4, 3, 2, 5, 4, 3, 5] 0
4625 [5, 4, 3, 2, 5, 4, 3, 4] 0
4626 [5, 4, 3, 2, 5, 4, 3] 0
4627 [5, 4, 3, 2, 5, 4, 5] 0
4628 [5, 4, 3, 2, 5, 4] 0
4629 [5, 4, 3, 2, 5, 3] 0
4630 [5, 4, 3, 2, 5] 0
4631 [5, 4, 3, 2, 4, 3, 4] 0
4632 [5, 4, 3, 2, 4, 3] 0
4633 [5, 4, 3, 2, 4] 0
4634 [5, 4, 3, 2, 3] 0
4635 [5, 4, 3, 2] 0
4636 [5, 4, 3, 1, 0, 5, 4, 1, 5] 0
4637 [5, 4, 3, 1, 0, 5, 4, 1] 0
4638 [5, 4, 3, 1, 0, 5, 4, 5] 0
4639 [5, 4, 3, 1, 0, 5, 4] 0
4640 [5, 4, 3, 1, 0, 5, 1] 0
4641 [5, 4, 3, 1, 0, 5] 0
4642 [5, 4, 3, 1, 0, 4, 1] 0
4643 [5, 4, 3, 1, 0, 4] 0
4644 [5, 4, 3, 1, 0, 1] 0
4645 [5, 4, 3, 1, 0] 0
4646 [5, 4, 3, 1, 5, 4, 5] 0
4647 [5, 4, 3, 1, 5, 4] 0
4648 [5, 4, 3, 1, 5] 0
4649 [5, 4, 3, 1, 4] 0
4650 [5, 4, 3, 1] 0
4651 [5, 4, 3, 0, 5, 4, 5] 0
4652 [5, 4, 3, 0, 5, 4] 0
4653 [5, 4, 3, 0, 5] 0
4654 [5, 4, 3, 0, 4] 0
4655 [5, 4, 3, 0] 0
4656 [5, 4, 3, 5, 4, 5] 0
4657 [5, 4, 3, 5, 4] 0
4658 [5, 4, 3, 5] 0
4659 [5, 4, 3, 4] 0
4660 [5, 4, 3] 0
4661 [5, 4, 2, 1, 0, 5, 2, 1, 2] 0
4662 [5, 4, 2, 1, 0, 5, 2, 1] 0
4663 [5, 4, 2, 1, 0, 5, 2] 0
4664 [5, 4, 2, 1, 0, 5, 1] 0
4665 [5, 4, 2, 1, 0, 5] 0
4666 [5, 4, 2, 1, 0, 2, 1, 2] 0
4667 [5, 4, 2, 1, 0, 2, 1] 0
4668 [5, 4, 2, 1, 0, 2] 0
4669 [5, 4, 2, 1, 0, 1] 0
4670 [5, 4, 2, 1, 0] 0
4671 [5, 4, 2, 1, 5, 2] 0
4672 [5, 4, 2, 1, 5] 0
4673 [5, 4, 2, 1, 2] 0
4674 [5, 4, 2, 1] 0
4675 [5, 4, 2, 0, 5] 0
4676 [5, 4, 2, 0] 0
4677 [5, 4, 2, 5] 0
4678 [5, 4, 2] 0
4679 [5, 4, 1, 0, 5, 1] 0
4680 [5, 4, 1, 0, 5] 0
4681 [5, 4, 1, 0, 1] 0
4682 [5, 4, 1, 0] 0
4683 [5, 4, 1, 5] 0
4684 [5, 4, 1] 0
4685 [5, 4, 0, 5] 0
4686 [5, 4, 0] 0
4687 [5, 4, 5] 0
4688 [5, 4] 0
4689 [5, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
4690 [5, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
4691 [5, 3, 2, 1, 0, 3, 2, 1, 3] 0
4692 [5, 3, 2, 1, 0, 3, 2, 1, 2] 0
4693 [5, 3, 2, 1, 0, 3, 2, 1] 0
4694 [5, 3, 2, 1, 0, 3, 2, 3] 0
4695 [5, 3, 2, 1, 0, 3, 2] 0
4696 [5, 3, 2, 1, 0, 3, 1] 0
4697 [5, 3, 2, 1, 0, 3] 0
4698 [5, 3, 2, 1, 0, 2, 1, 2] 0
4699 [5, 3, 2, 1, 0, 2, 1] 0
4700 [5, 3, 2, 1, 0, 2] 0
4701 [5, 3, 2, 1, 0, 1] 0
4702 [5, 3, 2, 1, 0] 0
4703 [5, 3, 2, 1, 3, 2, 3] 0
4704 [5, 3, 2, 1, 3, 2] 0
4705 [5, 3, 2, 1, 3] 0
4706 [5, 3, 2, 1, 2] 0
4707 [5, 3, 2, 1] 0
4708 [5, 3, 2, 0, 3] 0
4709 [5, 3, 2, 0] 0
4710 [5, 3, 2, 3] 0
4711 [5, 3, 2] 0
4712 [5, 3, 1, 0, 1] 0
4713 [5, 3, 1, 0] 0
4714 [5, 3, 1] 0
4715 [5, 3, 0] 0
4716 [5, 3] 0
4717 [5, 2, 1, 0, 2, 1, 2] 0
4718 [5, 2, 1, 0, 2, 1] 0
4719 [5, 2, 1, 0, 2] 0
4720 [5, 2, 1, 0, 1] 0
4721 [5, 2, 1, 0] 0
4722 [5, 2, 1, 2] 0
4723 [5, 2, 1] 0
4724 [5, 2, 0] 0
4725 [5, 2] 0
4726 [5, 1, 0, 1] 0
4727 [5, 1, 0] 0
4728 [5, 1] 0
4729 [5, 0] 0
4730 [5] 0
4731 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
4732 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
4733 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4] 0
4734 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 3] 0
4735 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2] 0
4736 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 4] 0
4737 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3] 0
4738 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 2] 0
4739 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4] 0
4740 [4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2, 3] 0
4741 [4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2] 0
4742 [4, 3, 2, 1, 0, 4, 3, 2, 1, 3] 0
4743 [4, 3, 2, 1, 0, 4, 3, 2, 1, 2] 0
4744 [4, 3, 2, 1, 0, 4, 3, 2, 1] 0
4745 [4, 3, 2, 1, 0, 4, 3, 2, 4, 3, 4] 0
4746 [4, 3, 2, 1, 0, 4, 3, 2, 4, 3] 0
4747 [4, 3, 2, 1, 0, 4, 3, 2, 4] 0
4748 [4, 3, 2, 1, 0, 4, 3, 2, 3] 0
4749 [4, 3, 2, 1, 0, 4, 3, 2] 0
4750 [4, 3, 2, 1, 0, 4, 3, 1, 4] 0
4751 [4, 3, 2, 1, 0, 4, 3, 1] 0
4752 [4, 3, 2, 1, 0, 4, 3, 4] 0
4753 [4, 3, 2, 1, 0, 4, 3] 0
4754 [4, 3, 2, 1, 0, 4, 2, 1, 2] 0
4755 [4, 3, 2, 1, 0, 4, 2, 1] 0
4756 [4, 3, 2, 1, 0, 4, 2] 0
4757 [4, 3, 2, 1, 0, 4, 1] 0
4758 [4, 3, 2, 1, 0, 4] 0
4759 [4, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
4760 [4, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
4761 [4, 3, 2, 1, 0, 3, 2, 1, 3] 0
4762 [4, 3, 2, 1, 0, 3, 2, 1, 2] 0
4763 [4, 3, 2, 1, 0, 3, 2, 1] 0
4764 [4, 3, 2, 1, 0, 3, 2, 3] 0
4765 [4, 3, 2, 1, 0, 3, 2] 0
4766 [4, 3, 2, 1, 0, 3, 1] 0
4767 [4, 3, 2, 1, 0, 3] 0
4768 [4, 3, 2, 1, 0, 2, 1, 2] 0
4769 [4, 3, 2, 1, 0, 2, 1] 0
4770 [4, 3, 2, 1, 0, 2] 0
4771 [4, 3, 2, 1, 0, 1] 0
4772 [4, 3, 2, 1, 0] 0
4773 [4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
4774 [4, 3, 2, 1, 4, 3, 2, 4, 3] 0
4775 [4, 3, 2, 1, 4, 3, 2, 4] 0
4776 [4, 3, 2, 1, 4, 3, 2, 3] 0
4777 [4, 3, 2, 1, 4, 3, 2] 0
4778 [4, 3, 2, 1, 4, 3, 4] 0
4779 [4, 3, 2, 1, 4, 3] 0
4780 [4, 3, 2, 1, 4, 2] 0
4781 [4, 3, 2, 1, 4] 0
4782 [4, 3, 2, 1, 3, 2, 3] 0
4783 [4, 3, 2, 1, 3, 2] 0
4784 [4, 3, 2, 1, 3] 0
4785 [4, 3, 2, 1, 2] 0
4786 [4, 3, 2, 1] 0
4787 [4, 3, 2, 0, 4, 3, 4] 0
4788 [4, 3, 2, 0, 4, 3] 0
4789 [4, 3, 2, 0, 4] 0
4790 [4, 3, 2, 0, 3] 0
4791 [4, 3, 2, 0] 0
4792 [4, 3, 2, 4, 3, 4] 0
4793 [4, 3, 2, 4, 3] 0
4794 [4, 3, 2, 4] 0
4795 [4, 3, 2, 3] 0
4796 [4, 3, 2] 0
4797 [4, 3, 1, 0, 4, 1] 0
4798 [4, 3, 1, 0, 4] 0
4799 [4, 3, 1, 0, 1] 0
4800 [4, 3, 1, 0] 0
4801 [4, 3, 1, 4] 0
4802 [4, 3, 1] 0
4803 [4, 3, 0, 4] 0
4804 [4, 3, 0] 0
4805 [4, 3, 4] 0
4806 [4, 3] 0
4807 [4, 2, 1, 0, 2, 1, 2] 0
4808 [4, 2, 1, 0, 2, 1] 0
4809 [4, 2, 1, 0, 2] 0
4810 [4, 2, 1, 0, 1] 0
4811 [4, 2, 1, 0] 0
4812 [4, 2, 1, 2] 0
4813 [4, 2, 1] 0
4814 [4, 2, 0] 0
4815 [4, 2] 0
4816 [4, 1, 0, 1] 0
4817 [4, 1, 0] 0
4818 [4, 1] 0
4819 [4, 0] 0
4820 [4] 0
4821 [3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
4822 [3, 2, 1, 0, 3, 2, 1, 3, 2] 0
4823 [3, 2, 1, 0, 3, 2, 1, 3] 0
4824 [3, 2, 1, 0, 3, 2, 1, 2] 0
4825 [3, 2, 1, 0, 3, 2, 1] 0
4826 [3, 2, 1, 0, 3, 2, 3] 0
4827 [3, 2, 1, 0, 3, 2] 0
4828 [3, 2, 1, 0, 3, 1] 0
4829 [3, 2, 1, 0, 3] 0
4830 [3, 2, 1, 0, 2, 1, 2] 0
4831 [3, 2, 1, 0, 2, 1] 0
4832 [3, 2, 1, 0, 2] 0
4833 [3, 2, 1, 0, 1] 0
4834 [3, 2, 1, 0] 0
4835 [3, 2, 1, 3, 2, 3] 0
4836 [3, 2, 1, 3, 2] 0
4837 [3, 2, 1, 3] 0
4838 [3, 2, 1, 2] 0
4839 [3, 2, 1] 0
4840 [3, 2, 0, 3] 0
4841 [3, 2, 0] 0
4842 [3, 2, 3] 0
4843 [3, 2] 0
4844 [3, 1, 0, 1] 0
4845 [3, 1, 0] 0
4846 [3, 1] 0
4847 [3, 0] 0
4848 [3] 0
4849 [2, 1, 0, 2, 1, 2] 0
4850 [2, 1, 0, 2, 1] 0
4851 [2, 1, 0, 2] 0
4852 [2, 1, 0, 1] 0
4853 [2, 1, 0] 0
4854 [2, 1, 2] 0
4855 [2, 1] 0
4856 [2, 0] 0
4857 [2] 0
4858 [1, 0, 1] 0
4859 [1, 0] 0
4860 [1] 0
4861 [0] 0
4862 [] 0
sage: A=CartanMatrix(['C',3])
....: c=[2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,kinv]).dimension()
....:     print(num,v,d)
....: 
1 [1, 0, 1] 1
2 [1, 0] 1
3 [1] 2
4 [0] 2
5 [] 2
sage: A=CartanMatrix(['C',3])
....: c=[2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,c+[c[0]]]).dimension()
....:     print(num,v,d)
1 [1, 0, 1] 2
2 [1, 0] 2
3 [1] 2
4 [0] 2
5 [] 2
sage: A=CartanMatrix(['C',3])
....: c=[2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,k+[c[0]]]).dimension()
....:     print(num,v,d)
1 [1, 0, 1] 2
2 [1, 0] 2
3 [1] 2
4 [0] 2
5 [] 2
sage: A=CartanMatrix(['C',3])
....: c=[2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     d=p_lambda_int(B(A,c),lam(A,v),[kinv,kinv+[c[0]]]).dimension()
....:     print(num,v,d)
1 [1, 0, 1] 2
2 [1, 0] 2
3 [1] 2
4 [0] 2
5 [] 2
sage: A=CartanMatrix(['C',3])
....: c=[2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,kinv]).dimension()
....:     print(num,v,d)
1 [1, 0, 1] 1
2 [1, 0] 1
3 [1] 2
4 [0] 2
5 [] 2
sage: A=CartanMatrix(['C',3])
....: c=[2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,kinvk+[c[0]]]).dimension()
....:     print(num,v,d)
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
Cell In [1645], line 8
      6 k=list(reversed(v))
      7 kinv=list(reversed(inv_sortable(A,c[Integer(1):],v)))
----> 8 d=p_lambda_int(B(A,c),lam(A,v),[k,kinvk+[c[Integer(0)]]]).dimension()
      9 print(num,v,d)

NameError: name 'kinvk' is not defined
sage: A=CartanMatrix(['C',3])
....: c=[2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,kinv+[c[0]]]).dimension()
....:     print(num,v,d)
1 [1, 0, 1] 0
2 [1, 0] 1
3 [1] 2
4 [0] 0
5 [] 1
sage: A=CartanMatrix(['C',3])
....: c=[2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,k+[c[0]],kinv+[c[0]]]).dimension()
....:     print(num,v,d)
1 [1, 0, 1] 0
2 [1, 0] 1
3 [1] 2
4 [0] 0
5 [] 1
sage: A=CartanMatrix(['C',3])
....: c=[2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,kinv,k+[c[0]],kinv+[c[0]]]).dimensio
....: n()
....:     print(num,v,d)
1 [1, 0, 1] 0
2 [1, 0] 0
3 [1] 0
4 [0] 0
5 [] 0
sage: A=CartanMatrix(['C',3])
....: c=[2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     d=p_lambda_int(B(A,c),lam(A,v),[kinv,k+[c[0]],kinv+[c[0]]]).dimension(
....: )
....:     print(num,v,d)
1 [1, 0, 1] 2
2 [1, 0] 1
3 [1] 0
4 [0] 1
5 [] 0
sage: A=CartanMatrix(['C',3])
....: c=[2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,k+[c[0]],kinv+[c[0]]]).dimension()
....:     print(num,v,d)
1 [1, 0, 1] 0
2 [1, 0] 1
3 [1] 2
4 [0] 0
5 [] 1
sage: A=CartanMatrix(['C',3])
....: c=[2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,kinv,kinv+[c[0]]]).dimension()
....:     print(num,v,d)
1 [1, 0, 1] 0
2 [1, 0] 1
3 [1] 2
4 [0] 0
5 [] 1
sage: A=CartanMatrix(['C',3])
....: c=[2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,kinv,k+[c[0]]]).dimension()
....:     print(num,v,d)
1 [1, 0, 1] 1
2 [1, 0] 0
3 [1] 0
4 [0] 2
5 [] 1
sage: A=CartanMatrix(['C',3])
....: c=[2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     d=p_lambda_int(B(A,c),lam(A,v),[kinv,k+[c[0]],kinv+[c[0]]]).dimension(
....: )
....:     print(num,v,d)
1 [1, 0, 1] 2
2 [1, 0] 1
3 [1] 0
4 [0] 1
5 [] 0
sage: A=CartanMatrix(['C',3])
....: c=[2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,kinv,k+[c[0]],kinv+[c[0]]]).dimensio
....: n()
....:     print(num,v,d)
1 [1, 0, 1] 0
2 [1, 0] 0
3 [1] 0
4 [0] 0
5 [] 0
sage: A=CartanMatrix(['C',3])
....: c=[2,0,1]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,kinv,k+[c[0]],kinv+[c[0]]]).dimensio
....: n()
....:     print(num,v,d)
1 [0, 1, 0] 0
2 [0, 1] 0
3 [0] 0
4 [1] 0
5 [] 0
sage: A=CartanMatrix(['C',3])
....: c=[2,0,1]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,kinv]).dimension()
....:     print(num,v,d)
1 [0, 1, 0] 1
2 [0, 1] 2
3 [0] 2
4 [1] 1
5 [] 2
sage: A=CartanMatrix(['C',3])
....: c=[2,0,1]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     d=p_lambda_int(B(A,c),lam(A,v),[kinv,k+[c[0]],kinv+[c[0]]]).dimension(
....: )
....:     print(num,v,d)
1 [0, 1, 0] 1
2 [0, 1] 0
3 [0] 0
4 [1] 2
5 [] 1
sage: A=CartanMatrix(['C',3])
....: c=[2,0,1]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,k+[c[0]],kinv+[c[0]]]).dimension()
....:     print(num,v,d)
1 [0, 1, 0] 1
2 [0, 1] 2
3 [0] 1
4 [1] 0
5 [] 0
sage: A=CartanMatrix(['C',3])
....: c=[2,0,1]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,kinv,k+[c[0]],kinv+[c[0]]]).dimensio
....: n()
....:     print(num,v,d)
1 [0, 1, 0] 0
2 [0, 1] 0
3 [0] 0
4 [1] 0
5 [] 0
sage: A=CartanMatrix(['C',3])
....: c=[2,0,1]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,kinv,kinv+[c[0]]]).dimension()
....:     print(num,v,d)
1 [0, 1, 0] 1
2 [0, 1] 2
3 [0] 1
4 [1] 0
5 [] 0
sage: A=CartanMatrix(['C',3])
....: c=[2,0,1]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,kinv,k+[c[0]]]).dimension()
....:     print(num,v,d)
1 [0, 1, 0] 0
2 [0, 1] 0
3 [0] 1
4 [1] 1
5 [] 2
sage: A=CartanMatrix(['C',3])
....: c=[2,0,1]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,kinv,k+[c[0]],kinv+[c[0]]]).dimensio
....: n()
....:     print(num,v,d)
1 [0, 1, 0] 0
2 [0, 1] 0
3 [0] 0
4 [1] 0
5 [] 0
sage: A=CartanMatrix(['C',3])
....: c=[2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,kinv,k+[c[0]],kinv+[c[0]]]).dimensio
....: n()
....:     print(num,v,d)
1 [1, 0, 1] 0
2 [1, 0] 0
3 [1] 0
4 [0] 0
5 [] 0
sage: A=CartanMatrix(['C',3])
....: c=[2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     print(num,v,d)
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     Ps=list(p_lambda(B(A,c),lam(A,v),seq) for seq in [k,kinv,k+[c[0]],kinv
....: +[c[0]]])
....:     for i in range(len(Ps)):
....:         for j in range(i+1,len(Ps)):
....:             if Ps[i].intersection(Ps[j]).dimension()==0:
....:                 fails=false
....:                 break
....:     if fails:
....:         print('FAILS!')
....:         break
....: 
1 [1, 0, 1] 0
2 [1, 0] 0
3 [1] 0
4 [0] 0
5 [] 0
sage: A=CartanMatrix(['C',3])
....: c=[2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     print(num,v)
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     Ps=list(p_lambda(B(A,c),lam(A,v),seq) for seq in [k,kinv,k+[c[0]],kinv
....: +[c[0]]])
....:     for i in range(len(Ps)):
....:         for j in range(i+1,len(Ps)):
....:             if Ps[i].intersection(Ps[j]).dimension()==0:
....:                 fails=false
....:                 break
....:     if fails:
....:         print('FAILS!')
....:         break
1 [1, 0, 1]
2 [1, 0]
3 [1]
4 [0]
5 []
sage: A=CartanMatrix(['C',5])
....: c=[4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     print(num,v)
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     Ps=list(p_lambda(B(A,c),lam(A,v),seq) for seq in [k,kinv,k+[c[0]],kinv
....: +[c[0]]])
....:     for i in range(len(Ps)):
....:         for j in range(i+1,len(Ps)):
....:             if Ps[i].intersection(Ps[j]).dimension()==0:
....:                 fails=false
....:                 break
....:     if fails:
....:         print('FAILS!')
....:         break
1 [3, 2, 1, 0, 3, 2, 1, 3, 2, 3]
2 [3, 2, 1, 0, 3, 2, 1, 3, 2]
3 [3, 2, 1, 0, 3, 2, 1, 3]
4 [3, 2, 1, 0, 3, 2, 1, 2]
5 [3, 2, 1, 0, 3, 2, 1]
6 [3, 2, 1, 0, 3, 2, 3]
7 [3, 2, 1, 0, 3, 2]
8 [3, 2, 1, 0, 3, 1]
9 [3, 2, 1, 0, 3]
10 [3, 2, 1, 0, 2, 1, 2]
11 [3, 2, 1, 0, 2, 1]
12 [3, 2, 1, 0, 2]
13 [3, 2, 1, 0, 1]
14 [3, 2, 1, 0]
15 [3, 2, 1, 3, 2, 3]
16 [3, 2, 1, 3, 2]
17 [3, 2, 1, 3]
18 [3, 2, 1, 2]
19 [3, 2, 1]
20 [3, 2, 0, 3]
21 [3, 2, 0]
22 [3, 2, 3]
23 [3, 2]
24 [3, 1, 0, 1]
25 [3, 1, 0]
26 [3, 1]
27 [3, 0]
28 [3]
29 [2, 1, 0, 2, 1, 2]
30 [2, 1, 0, 2, 1]
31 [2, 1, 0, 2]
32 [2, 1, 0, 1]
33 [2, 1, 0]
34 [2, 1, 2]
35 [2, 1]
36 [2, 0]
37 [2]
38 [1, 0, 1]
39 [1, 0]
40 [1]
41 [0]
42 []
sage: A=CartanMatrix(['C',5])
....: c=[4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     print(num,v)
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     Ps=list(p_lambda(B(A,c),lam(A,v),seq) for seq in [k,kinv,k+[c[0]],kinv
....: +[c[0]]])
....:     for i in range(len(Ps)):
....:         for j in range(i+1,len(Ps)):
....:             if Ps[i].intersection(Ps[j]).dimension()==0:
....:                 print(i,j)
....:                 fails=false
....:                 break
....:     if fails:
....:         print('FAILS!')
....:         break
1 [3, 2, 1, 0, 3, 2, 1, 3, 2, 3]
0 3
2 [3, 2, 1, 0, 3, 2, 1, 3, 2]
0 3
1 2
3 [3, 2, 1, 0, 3, 2, 1, 3]
0 3
1 2
4 [3, 2, 1, 0, 3, 2, 1, 2]
0 3
5 [3, 2, 1, 0, 3, 2, 1]
0 3
6 [3, 2, 1, 0, 3, 2, 3]
1 2
7 [3, 2, 1, 0, 3, 2]
0 3
8 [3, 2, 1, 0, 3, 1]
0 3
9 [3, 2, 1, 0, 3]
0 3
10 [3, 2, 1, 0, 2, 1, 2]
0 3
11 [3, 2, 1, 0, 2, 1]
1 2
12 [3, 2, 1, 0, 2]
1 2
13 [3, 2, 1, 0, 1]
0 3
14 [3, 2, 1, 0]
15 [3, 2, 1, 3, 2, 3]
1 2
16 [3, 2, 1, 3, 2]
0 3
1 2
17 [3, 2, 1, 3]
0 3
1 2
18 [3, 2, 1, 2]
1 2
19 [3, 2, 1]
1 2
20 [3, 2, 0, 3]
0 3
21 [3, 2, 0]
0 3
22 [3, 2, 3]
0 3
23 [3, 2]
1 2
24 [3, 1, 0, 1]
0 3
1 2
25 [3, 1, 0]
1 2
26 [3, 1]
1 2
27 [3, 0]
0 3
1 2
28 [3]
1 2
29 [2, 1, 0, 2, 1, 2]
0 3
30 [2, 1, 0, 2, 1]
0 3
1 2
31 [2, 1, 0, 2]
0 3
1 2
32 [2, 1, 0, 1]
0 3
33 [2, 1, 0]
0 3
34 [2, 1, 2]
1 2
35 [2, 1]
0 3
36 [2, 0]
0 3
37 [2]
0 3
38 [1, 0, 1]
0 3
39 [1, 0]
1 2
40 [1]
1 2
41 [0]
0 3
42 []
sage: A=CartanMatrix(['C',7])
....: c=[6,5,4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     print(num,v)
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     Ps=list(p_lambda(B(A,c),lam(A,v),seq) for seq in [k,kinv,k+[c[0]],kinv
....: +[c[0]]])
....:     for i in range(len(Ps)):
....:         for j in range(i+1,len(Ps)):
....:             if Ps[i].intersection(Ps[j]).dimension()==0:
....:                 print(i,j)
....:                 fails=false
....:                 break
....:     if fails:
....:         print('FAILS!')
....:         break
1 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5]
0 3
2 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4]
0 3
1 2
3 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5]
0 3
1 2
4 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4]
0 3
5 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3]
0 3
6 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5]
0 3
1 2
7 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4]
0 3
1 2
8 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3]
0 3
9 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5]
0 3
1 2
10 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4]
0 3
1 2
11 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3]
0 3
1 2
12 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4]
0 3
1 2
13 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 3]
0 3
1 2
14 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2]
0 3
1 2
15 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5]
0 3
1 2
16 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4]
0 3
1 2
17 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5]
0 3
1 2
18 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 4]
0 3
1 2
19 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3]
0 3
1 2
20 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2, 5]
0 3
21 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2]
0 3
1 2
22 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 5]
0 3
23 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4]
0 3
1 2
24 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2, 3]
0 3
1 2
25 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2]
0 3
1 2
26 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3]
0 3
1 2
27 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 2]
0 3
1 2
28 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5]
0 3
1 2
29 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4]
0 3
30 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3]
0 3
1 2
31 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4]
0 3
1 2
32 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 3]
0 3
33 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2]
0 3
34 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 4]
0 3
1 2
35 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3]
0 3
36 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 2]
0 3
37 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4]
0 3
38 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2, 3]
0 3
39 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2]
0 3
1 2
40 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3]
0 3
1 2
41 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 2]
0 3
42 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1]
0 3
43 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5]
1 2
44 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4]
0 3
1 2
45 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5]
0 3
1 2
46 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 4]
1 2
47 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3]
1 2
48 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 5]
0 3
49 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4]
0 3
1 2
50 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 3]
1 2
51 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5]
0 3
1 2
52 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4, 3, 4]
0 3
1 2
53 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4, 3]
0 3
54 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4]
0 3
55 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 3]
0 3
1 2
56 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2]
0 3
57 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5, 4, 5]
0 3
58 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5, 4]
0 3
1 2
59 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5]
0 3
1 2
60 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 4]
0 3
61 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1]
0 3
62 [5, 4, 3, 2, 1, 0, 5, 4, 3, 5, 4, 5]
0 3
63 [5, 4, 3, 2, 1, 0, 5, 4, 3, 5, 4]
0 3
1 2
64 [5, 4, 3, 2, 1, 0, 5, 4, 3, 5]
0 3
1 2
65 [5, 4, 3, 2, 1, 0, 5, 4, 3, 4]
0 3
66 [5, 4, 3, 2, 1, 0, 5, 4, 3]
0 3
67 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 5, 2]
0 3
1 2
68 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 5]
1 2
69 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 2]
0 3
70 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1]
0 3
1 2
71 [5, 4, 3, 2, 1, 0, 5, 4, 2, 5]
1 2
72 [5, 4, 3, 2, 1, 0, 5, 4, 2]
0 3
1 2
73 [5, 4, 3, 2, 1, 0, 5, 4, 1, 5]
0 3
1 2
74 [5, 4, 3, 2, 1, 0, 5, 4, 1]
0 3
75 [5, 4, 3, 2, 1, 0, 5, 4, 5]
1 2
76 [5, 4, 3, 2, 1, 0, 5, 4]
0 3
77 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3, 2, 3]
0 3
78 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3, 2]
0 3
1 2
79 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3]
0 3
1 2
80 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 2]
0 3
81 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1]
0 3
82 [5, 4, 3, 2, 1, 0, 5, 3, 2, 3]
0 3
1 2
83 [5, 4, 3, 2, 1, 0, 5, 3, 2]
0 3
84 [5, 4, 3, 2, 1, 0, 5, 3, 1]
0 3
85 [5, 4, 3, 2, 1, 0, 5, 3]
0 3
86 [5, 4, 3, 2, 1, 0, 5, 2, 1, 2]
0 3
87 [5, 4, 3, 2, 1, 0, 5, 2, 1]
0 3
1 2
88 [5, 4, 3, 2, 1, 0, 5, 2]
0 3
1 2
89 [5, 4, 3, 2, 1, 0, 5, 1]
0 3
90 [5, 4, 3, 2, 1, 0, 5]
0 3
91 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4]
0 3
92 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3]
0 3
1 2
93 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4]
0 3
1 2
94 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 3]
0 3
95 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2]
0 3
96 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 4]
1 2
97 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3]
0 3
1 2
98 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 2]
0 3
99 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4]
0 3
1 2
100 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2, 3]
0 3
1 2
101 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2]
1 2
102 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3]
1 2
103 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 2]
0 3
1 2
104 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1]
1 2
105 [5, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3, 4]
1 2
106 [5, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3]
0 3
1 2
107 [5, 4, 3, 2, 1, 0, 4, 3, 2, 4]
0 3
1 2
108 [5, 4, 3, 2, 1, 0, 4, 3, 2, 3]
1 2
109 [5, 4, 3, 2, 1, 0, 4, 3, 2]
1 2
110 [5, 4, 3, 2, 1, 0, 4, 3, 1, 4]
0 3
111 [5, 4, 3, 2, 1, 0, 4, 3, 1]
0 3
1 2
112 [5, 4, 3, 2, 1, 0, 4, 3, 4]
0 3
113 [5, 4, 3, 2, 1, 0, 4, 3]
1 2
114 [5, 4, 3, 2, 1, 0, 4, 2, 1, 2]
0 3
1 2
115 [5, 4, 3, 2, 1, 0, 4, 2, 1]
1 2
116 [5, 4, 3, 2, 1, 0, 4, 2]
1 2
117 [5, 4, 3, 2, 1, 0, 4, 1]
0 3
1 2
118 [5, 4, 3, 2, 1, 0, 4]
1 2
119 [5, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3]
0 3
120 [5, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2]
0 3
1 2
121 [5, 4, 3, 2, 1, 0, 3, 2, 1, 3]
0 3
1 2
122 [5, 4, 3, 2, 1, 0, 3, 2, 1, 2]
0 3
123 [5, 4, 3, 2, 1, 0, 3, 2, 1]
0 3
124 [5, 4, 3, 2, 1, 0, 3, 2, 3]
1 2
125 [5, 4, 3, 2, 1, 0, 3, 2]
0 3
126 [5, 4, 3, 2, 1, 0, 3, 1]
0 3
127 [5, 4, 3, 2, 1, 0, 3]
0 3
128 [5, 4, 3, 2, 1, 0, 2, 1, 2]
0 3
129 [5, 4, 3, 2, 1, 0, 2, 1]
1 2
130 [5, 4, 3, 2, 1, 0, 2]
1 2
131 [5, 4, 3, 2, 1, 0, 1]
0 3
132 [5, 4, 3, 2, 1, 0]
133 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5]
1 2
134 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4]
0 3
1 2
135 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5]
0 3
1 2
136 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4]
1 2
137 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3]
1 2
138 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5]
0 3
1 2
139 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4]
0 3
1 2
140 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3]
1 2
141 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5]
0 3
1 2
142 [5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4]
0 3
1 2
143 [5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3]
0 3
1 2
144 [5, 4, 3, 2, 1, 5, 4, 3, 2, 4]
0 3
1 2
145 [5, 4, 3, 2, 1, 5, 4, 3, 2, 3]
0 3
1 2
146 [5, 4, 3, 2, 1, 5, 4, 3, 2]
0 3
1 2
147 [5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5]
0 3
1 2
148 [5, 4, 3, 2, 1, 5, 4, 3, 5, 4]
0 3
1 2
149 [5, 4, 3, 2, 1, 5, 4, 3, 5]
0 3
1 2
150 [5, 4, 3, 2, 1, 5, 4, 3, 4]
0 3
1 2
151 [5, 4, 3, 2, 1, 5, 4, 3]
0 3
1 2
152 [5, 4, 3, 2, 1, 5, 4, 2, 5]
1 2
153 [5, 4, 3, 2, 1, 5, 4, 2]
0 3
1 2
154 [5, 4, 3, 2, 1, 5, 4, 5]
1 2
155 [5, 4, 3, 2, 1, 5, 4]
0 3
1 2
156 [5, 4, 3, 2, 1, 5, 3, 2, 3]
0 3
1 2
157 [5, 4, 3, 2, 1, 5, 3, 2]
0 3
1 2
158 [5, 4, 3, 2, 1, 5, 3]
0 3
1 2
159 [5, 4, 3, 2, 1, 5, 2]
0 3
1 2
160 [5, 4, 3, 2, 1, 5]
0 3
1 2
161 [5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4]
1 2
162 [5, 4, 3, 2, 1, 4, 3, 2, 4, 3]
0 3
1 2
163 [5, 4, 3, 2, 1, 4, 3, 2, 4]
0 3
1 2
164 [5, 4, 3, 2, 1, 4, 3, 2, 3]
1 2
165 [5, 4, 3, 2, 1, 4, 3, 2]
1 2
166 [5, 4, 3, 2, 1, 4, 3, 4]
0 3
1 2
167 [5, 4, 3, 2, 1, 4, 3]
1 2
168 [5, 4, 3, 2, 1, 4, 2]
1 2
169 [5, 4, 3, 2, 1, 4]
1 2
170 [5, 4, 3, 2, 1, 3, 2, 3]
1 2
171 [5, 4, 3, 2, 1, 3, 2]
0 3
1 2
172 [5, 4, 3, 2, 1, 3]
0 3
1 2
173 [5, 4, 3, 2, 1, 2]
1 2
174 [5, 4, 3, 2, 1]
1 2
175 [5, 4, 3, 2, 0, 5, 4, 3, 5, 4, 5]
0 3
176 [5, 4, 3, 2, 0, 5, 4, 3, 5, 4]
0 3
1 2
177 [5, 4, 3, 2, 0, 5, 4, 3, 5]
0 3
1 2
178 [5, 4, 3, 2, 0, 5, 4, 3, 4]
0 3
179 [5, 4, 3, 2, 0, 5, 4, 3]
0 3
180 [5, 4, 3, 2, 0, 5, 4, 5]
0 3
1 2
181 [5, 4, 3, 2, 0, 5, 4]
0 3
182 [5, 4, 3, 2, 0, 5, 3]
0 3
183 [5, 4, 3, 2, 0, 5]
0 3
184 [5, 4, 3, 2, 0, 4, 3, 4]
0 3
185 [5, 4, 3, 2, 0, 4, 3]
0 3
1 2
186 [5, 4, 3, 2, 0, 4]
0 3
1 2
187 [5, 4, 3, 2, 0, 3]
0 3
188 [5, 4, 3, 2, 0]
0 3
189 [5, 4, 3, 2, 5, 4, 3, 5, 4, 5]
0 3
190 [5, 4, 3, 2, 5, 4, 3, 5, 4]
0 3
1 2
191 [5, 4, 3, 2, 5, 4, 3, 5]
0 3
1 2
192 [5, 4, 3, 2, 5, 4, 3, 4]
0 3
193 [5, 4, 3, 2, 5, 4, 3]
0 3
194 [5, 4, 3, 2, 5, 4, 5]
1 2
195 [5, 4, 3, 2, 5, 4]
0 3
1 2
196 [5, 4, 3, 2, 5, 3]
0 3
197 [5, 4, 3, 2, 5]
0 3
1 2
198 [5, 4, 3, 2, 4, 3, 4]
0 3
1 2
199 [5, 4, 3, 2, 4, 3]
1 2
200 [5, 4, 3, 2, 4]
1 2
201 [5, 4, 3, 2, 3]
0 3
1 2
202 [5, 4, 3, 2]
1 2
203 [5, 4, 3, 1, 0, 5, 4, 1, 5]
0 3
1 2
204 [5, 4, 3, 1, 0, 5, 4, 1]
0 3
1 2
205 [5, 4, 3, 1, 0, 5, 4, 5]
1 2
206 [5, 4, 3, 1, 0, 5, 4]
0 3
1 2
207 [5, 4, 3, 1, 0, 5, 1]
0 3
1 2
208 [5, 4, 3, 1, 0, 5]
0 3
1 2
209 [5, 4, 3, 1, 0, 4, 1]
0 3
1 2
210 [5, 4, 3, 1, 0, 4]
1 2
211 [5, 4, 3, 1, 0, 1]
0 3
1 2
212 [5, 4, 3, 1, 0]
1 2
213 [5, 4, 3, 1, 5, 4, 5]
1 2
214 [5, 4, 3, 1, 5, 4]
0 3
1 2
215 [5, 4, 3, 1, 5]
0 3
1 2
216 [5, 4, 3, 1, 4]
1 2
217 [5, 4, 3, 1]
1 2
218 [5, 4, 3, 0, 5, 4, 5]
0 3
1 2
219 [5, 4, 3, 0, 5, 4]
0 3
1 2
220 [5, 4, 3, 0, 5]
0 3
1 2
221 [5, 4, 3, 0, 4]
0 3
1 2
222 [5, 4, 3, 0]
0 3
1 2
223 [5, 4, 3, 5, 4, 5]
1 2
224 [5, 4, 3, 5, 4]
0 3
1 2
225 [5, 4, 3, 5]
0 3
1 2
226 [5, 4, 3, 4]
1 2
227 [5, 4, 3]
1 2
228 [5, 4, 2, 1, 0, 5, 2, 1, 2]
0 3
229 [5, 4, 2, 1, 0, 5, 2, 1]
0 3
1 2
230 [5, 4, 2, 1, 0, 5, 2]
0 3
1 2
231 [5, 4, 2, 1, 0, 5, 1]
0 3
232 [5, 4, 2, 1, 0, 5]
0 3
233 [5, 4, 2, 1, 0, 2, 1, 2]
0 3
234 [5, 4, 2, 1, 0, 2, 1]
0 3
1 2
235 [5, 4, 2, 1, 0, 2]
0 3
1 2
236 [5, 4, 2, 1, 0, 1]
0 3
237 [5, 4, 2, 1, 0]
0 3
238 [5, 4, 2, 1, 5, 2]
0 3
1 2
239 [5, 4, 2, 1, 5]
0 3
240 [5, 4, 2, 1, 2]
1 2
241 [5, 4, 2, 1]
0 3
1 2
242 [5, 4, 2, 0, 5]
0 3
243 [5, 4, 2, 0]
0 3
244 [5, 4, 2, 5]
0 3
245 [5, 4, 2]
0 3
1 2
246 [5, 4, 1, 0, 5, 1]
0 3
247 [5, 4, 1, 0, 5]
0 3
1 2
248 [5, 4, 1, 0, 1]
0 3
1 2
249 [5, 4, 1, 0]
1 2
250 [5, 4, 1, 5]
0 3
1 2
251 [5, 4, 1]
1 2
252 [5, 4, 0, 5]
0 3
253 [5, 4, 0]
0 3
1 2
254 [5, 4, 5]
0 3
255 [5, 4]
1 2
256 [5, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3]
0 3
1 2
257 [5, 3, 2, 1, 0, 3, 2, 1, 3, 2]
0 3
1 2
258 [5, 3, 2, 1, 0, 3, 2, 1, 3]
0 3
1 2
259 [5, 3, 2, 1, 0, 3, 2, 1, 2]
0 3
1 2
260 [5, 3, 2, 1, 0, 3, 2, 1]
0 3
1 2
261 [5, 3, 2, 1, 0, 3, 2, 3]
1 2
262 [5, 3, 2, 1, 0, 3, 2]
0 3
1 2
263 [5, 3, 2, 1, 0, 3, 1]
0 3
1 2
264 [5, 3, 2, 1, 0, 3]
0 3
1 2
265 [5, 3, 2, 1, 0, 2, 1, 2]
0 3
1 2
266 [5, 3, 2, 1, 0, 2, 1]
1 2
267 [5, 3, 2, 1, 0, 2]
1 2
268 [5, 3, 2, 1, 0, 1]
0 3
1 2
269 [5, 3, 2, 1, 0]
1 2
270 [5, 3, 2, 1, 3, 2, 3]
1 2
271 [5, 3, 2, 1, 3, 2]
0 3
1 2
272 [5, 3, 2, 1, 3]
0 3
1 2
273 [5, 3, 2, 1, 2]
1 2
274 [5, 3, 2, 1]
1 2
275 [5, 3, 2, 0, 3]
0 3
1 2
276 [5, 3, 2, 0]
0 3
1 2
277 [5, 3, 2, 3]
0 3
1 2
278 [5, 3, 2]
1 2
279 [5, 3, 1, 0, 1]
0 3
1 2
280 [5, 3, 1, 0]
1 2
281 [5, 3, 1]
1 2
282 [5, 3, 0]
0 3
1 2
283 [5, 3]
1 2
284 [5, 2, 1, 0, 2, 1, 2]
0 3
1 2
285 [5, 2, 1, 0, 2, 1]
0 3
1 2
286 [5, 2, 1, 0, 2]
0 3
1 2
287 [5, 2, 1, 0, 1]
0 3
1 2
288 [5, 2, 1, 0]
0 3
1 2
289 [5, 2, 1, 2]
1 2
290 [5, 2, 1]
0 3
1 2
291 [5, 2, 0]
0 3
1 2
292 [5, 2]
0 3
1 2
293 [5, 1, 0, 1]
0 3
1 2
294 [5, 1, 0]
1 2
295 [5, 1]
1 2
296 [5, 0]
0 3
1 2
297 [5]
1 2
298 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4]
0 3
299 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3]
0 3
1 2
300 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4]
0 3
1 2
301 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 3]
0 3
302 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2]
0 3
303 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 4]
0 3
1 2
304 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3]
0 3
1 2
305 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 2]
0 3
306 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4]
0 3
1 2
307 [4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2, 3]
0 3
1 2
308 [4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2]
0 3
1 2
309 [4, 3, 2, 1, 0, 4, 3, 2, 1, 3]
0 3
1 2
310 [4, 3, 2, 1, 0, 4, 3, 2, 1, 2]
0 3
1 2
311 [4, 3, 2, 1, 0, 4, 3, 2, 1]
0 3
1 2
312 [4, 3, 2, 1, 0, 4, 3, 2, 4, 3, 4]
0 3
1 2
313 [4, 3, 2, 1, 0, 4, 3, 2, 4, 3]
0 3
1 2
314 [4, 3, 2, 1, 0, 4, 3, 2, 4]
0 3
1 2
315 [4, 3, 2, 1, 0, 4, 3, 2, 3]
0 3
1 2
316 [4, 3, 2, 1, 0, 4, 3, 2]
0 3
1 2
317 [4, 3, 2, 1, 0, 4, 3, 1, 4]
0 3
318 [4, 3, 2, 1, 0, 4, 3, 1]
0 3
1 2
319 [4, 3, 2, 1, 0, 4, 3, 4]
0 3
320 [4, 3, 2, 1, 0, 4, 3]
0 3
1 2
321 [4, 3, 2, 1, 0, 4, 2, 1, 2]
0 3
1 2
322 [4, 3, 2, 1, 0, 4, 2, 1]
0 3
1 2
323 [4, 3, 2, 1, 0, 4, 2]
0 3
1 2
324 [4, 3, 2, 1, 0, 4, 1]
0 3
1 2
325 [4, 3, 2, 1, 0, 4]
0 3
1 2
326 [4, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3]
0 3
327 [4, 3, 2, 1, 0, 3, 2, 1, 3, 2]
0 3
1 2
328 [4, 3, 2, 1, 0, 3, 2, 1, 3]
0 3
1 2
329 [4, 3, 2, 1, 0, 3, 2, 1, 2]
0 3
330 [4, 3, 2, 1, 0, 3, 2, 1]
0 3
331 [4, 3, 2, 1, 0, 3, 2, 3]
0 3
1 2
332 [4, 3, 2, 1, 0, 3, 2]
0 3
333 [4, 3, 2, 1, 0, 3, 1]
0 3
334 [4, 3, 2, 1, 0, 3]
0 3
335 [4, 3, 2, 1, 0, 2, 1, 2]
0 3
336 [4, 3, 2, 1, 0, 2, 1]
0 3
1 2
337 [4, 3, 2, 1, 0, 2]
0 3
1 2
338 [4, 3, 2, 1, 0, 1]
0 3
339 [4, 3, 2, 1, 0]
0 3
340 [4, 3, 2, 1, 4, 3, 2, 4, 3, 4]
1 2
341 [4, 3, 2, 1, 4, 3, 2, 4, 3]
0 3
1 2
342 [4, 3, 2, 1, 4, 3, 2, 4]
0 3
1 2
343 [4, 3, 2, 1, 4, 3, 2, 3]
1 2
344 [4, 3, 2, 1, 4, 3, 2]
1 2
345 [4, 3, 2, 1, 4, 3, 4]
0 3
346 [4, 3, 2, 1, 4, 3]
0 3
1 2
347 [4, 3, 2, 1, 4, 2]
1 2
348 [4, 3, 2, 1, 4]
0 3
1 2
349 [4, 3, 2, 1, 3, 2, 3]
0 3
1 2
350 [4, 3, 2, 1, 3, 2]
0 3
351 [4, 3, 2, 1, 3]
0 3
352 [4, 3, 2, 1, 2]
0 3
1 2
353 [4, 3, 2, 1]
0 3
354 [4, 3, 2, 0, 4, 3, 4]
0 3
355 [4, 3, 2, 0, 4, 3]
0 3
1 2
356 [4, 3, 2, 0, 4]
0 3
1 2
357 [4, 3, 2, 0, 3]
0 3
358 [4, 3, 2, 0]
0 3
359 [4, 3, 2, 4, 3, 4]
0 3
360 [4, 3, 2, 4, 3]
0 3
1 2
361 [4, 3, 2, 4]
0 3
1 2
362 [4, 3, 2, 3]
0 3
363 [4, 3, 2]
0 3
364 [4, 3, 1, 0, 4, 1]
0 3
1 2
365 [4, 3, 1, 0, 4]
1 2
366 [4, 3, 1, 0, 1]
0 3
367 [4, 3, 1, 0]
0 3
1 2
368 [4, 3, 1, 4]
1 2
369 [4, 3, 1]
0 3
1 2
370 [4, 3, 0, 4]
0 3
1 2
371 [4, 3, 0]
0 3
372 [4, 3, 4]
1 2
373 [4, 3]
0 3
374 [4, 2, 1, 0, 2, 1, 2]
0 3
375 [4, 2, 1, 0, 2, 1]
0 3
1 2
376 [4, 2, 1, 0, 2]
0 3
1 2
377 [4, 2, 1, 0, 1]
0 3
378 [4, 2, 1, 0]
0 3
379 [4, 2, 1, 2]
0 3
1 2
380 [4, 2, 1]
0 3
381 [4, 2, 0]
0 3
382 [4, 2]
0 3
383 [4, 1, 0, 1]
0 3
384 [4, 1, 0]
0 3
1 2
385 [4, 1]
0 3
1 2
386 [4, 0]
0 3
387 [4]
0 3
388 [3, 2, 1, 0, 3, 2, 1, 3, 2, 3]
0 3
389 [3, 2, 1, 0, 3, 2, 1, 3, 2]
0 3
1 2
390 [3, 2, 1, 0, 3, 2, 1, 3]
0 3
1 2
391 [3, 2, 1, 0, 3, 2, 1, 2]
0 3
392 [3, 2, 1, 0, 3, 2, 1]
0 3
393 [3, 2, 1, 0, 3, 2, 3]
1 2
394 [3, 2, 1, 0, 3, 2]
0 3
1 2
395 [3, 2, 1, 0, 3, 1]
0 3
396 [3, 2, 1, 0, 3]
0 3
1 2
397 [3, 2, 1, 0, 2, 1, 2]
0 3
1 2
398 [3, 2, 1, 0, 2, 1]
1 2
399 [3, 2, 1, 0, 2]
1 2
400 [3, 2, 1, 0, 1]
0 3
1 2
401 [3, 2, 1, 0]
1 2
402 [3, 2, 1, 3, 2, 3]
1 2
403 [3, 2, 1, 3, 2]
0 3
1 2
404 [3, 2, 1, 3]
0 3
1 2
405 [3, 2, 1, 2]
1 2
406 [3, 2, 1]
1 2
407 [3, 2, 0, 3]
0 3
408 [3, 2, 0]
0 3
1 2
409 [3, 2, 3]
0 3
410 [3, 2]
1 2
411 [3, 1, 0, 1]
0 3
1 2
412 [3, 1, 0]
1 2
413 [3, 1]
1 2
414 [3, 0]
0 3
1 2
415 [3]
1 2
416 [2, 1, 0, 2, 1, 2]
0 3
417 [2, 1, 0, 2, 1]
0 3
1 2
418 [2, 1, 0, 2]
0 3
1 2
419 [2, 1, 0, 1]
0 3
420 [2, 1, 0]
0 3
421 [2, 1, 2]
1 2
422 [2, 1]
0 3
423 [2, 0]
0 3
424 [2]
0 3
425 [1, 0, 1]
0 3
426 [1, 0]
1 2
427 [1]
1 2
428 [0]
0 3
429 []
sage: A=CartanMatrix(['C',7])
....: c=[6,5,4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     print(num,v)
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     if p_lambda_int(B(A,c),lam(A,v),[k,kinv+[c[0]]]).dimension()>0 and p_l
....: ambda_int(B(A,c),lam(A,c),[kinv,k+[c[0]]]).dimension()>0:
....:         print('FAILS!')
....:         break
1 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5]
2 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4]
3 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5]
4 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4]
5 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3]
6 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5]
7 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4]
8 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3]
9 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5]
10 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4]
11 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3]
12 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4]
13 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 3]
14 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2]
15 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5]
16 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4]
17 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5]
18 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 4]
19 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3]
20 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2, 5]
21 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2]
22 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 5]
23 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4]
24 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2, 3]
25 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2]
26 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3]
27 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 2]
28 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5]
29 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4]
30 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3]
31 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4]
32 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 3]
33 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2]
34 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 4]
35 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3]
36 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 2]
37 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4]
38 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2, 3]
39 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2]
40 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3]
41 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 2]
42 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1]
43 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5]
FAILS!
sage: A=CartanMatrix(['C',7])
....: c=[6,5,4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     fails=true
....:     num+=1
....:     print(num,v)
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     if p_lambda_int(B(A,c),lam(A,v),[k,kinv+[c[0]]]).dimension()>0 and p_l
....: ambda_int(B(A,c),lam(A,c),[kinv,k+[c[0]]]).dimension()>0:
....:         print('FAILS!')
....:         break
1 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5]
2 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4]
3 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5]
4 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4]
5 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3]
6 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5]
7 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4]
8 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3]
9 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5]
10 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4]
11 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3]
12 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4]
13 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 3]
14 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2]
15 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5]
16 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4]
17 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5]
18 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 4]
19 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3]
20 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2, 5]
21 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2]
22 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 5]
23 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4]
24 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2, 3]
25 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2]
26 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3]
27 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 2]
28 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5]
29 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4]
30 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3]
31 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4]
32 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 3]
33 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2]
34 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 4]
35 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3]
36 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 2]
37 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4]
38 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2, 3]
39 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2]
40 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3]
41 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 2]
42 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1]
43 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5]
FAILS!
sage: A=CartanMatrix(['C',7])
....: c=[6,5,4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     fails=true
....:     num+=1
....:     print(num,v)
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     Ps=list(p_lambda(B(A,c),lam(A,v),seq) for seq in [k,kinv,k+[c[0]],kinv
....: +[c[0]]])
....:     for i in range(len(Ps)):
....:         for j in range(i+1,len(Ps)):
....:             if Ps[i].intersection(Ps[j]).dimension()==0:
....:                 print(i,j)
....:                 fails=false
....:                 break
....:     if fails:
....:         print('FAILS!')
....:         break
1 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5]
0 3
2 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4]
0 3
1 2
3 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5]
0 3
1 2
4 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4]
0 3
5 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3]
0 3
6 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5]
0 3
1 2
7 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4]
0 3
1 2
8 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3]
0 3
9 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5]
0 3
1 2
10 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4]
0 3
1 2
11 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3]
0 3
1 2
12 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4]
0 3
1 2
13 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 3]
0 3
1 2
14 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2]
0 3
1 2
15 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5]
0 3
1 2
16 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4]
0 3
1 2
17 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5]
0 3
1 2
18 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 4]
0 3
1 2
19 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3]
0 3
1 2
20 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2, 5]
0 3
21 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2]
0 3
1 2
22 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 5]
0 3
23 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4]
0 3
1 2
24 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2, 3]
0 3
1 2
25 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2]
0 3
1 2
26 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3]
0 3
1 2
27 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 2]
0 3
1 2
28 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5]
0 3
1 2
29 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4]
0 3
30 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3]
0 3
1 2
31 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4]
0 3
1 2
32 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 3]
0 3
33 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2]
0 3
34 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 4]
0 3
1 2
35 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3]
0 3
36 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 2]
0 3
37 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4]
0 3
38 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2, 3]
0 3
39 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2]
0 3
1 2
40 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3]
0 3
1 2
41 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 2]
0 3
42 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1]
0 3
43 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5]
1 2
44 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4]
0 3
1 2
45 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5]
0 3
1 2
46 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 4]
1 2
47 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3]
1 2
48 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 5]
0 3
49 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4]
0 3
1 2
50 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 3]
1 2
51 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5]
0 3
1 2
52 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4, 3, 4]
0 3
1 2
53 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4, 3]
0 3
54 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4]
0 3
55 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 3]
0 3
1 2
56 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2]
0 3
57 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5, 4, 5]
0 3
58 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5, 4]
0 3
1 2
59 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5]
0 3
1 2
60 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 4]
0 3
61 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1]
0 3
62 [5, 4, 3, 2, 1, 0, 5, 4, 3, 5, 4, 5]
0 3
63 [5, 4, 3, 2, 1, 0, 5, 4, 3, 5, 4]
0 3
1 2
64 [5, 4, 3, 2, 1, 0, 5, 4, 3, 5]
0 3
1 2
65 [5, 4, 3, 2, 1, 0, 5, 4, 3, 4]
0 3
66 [5, 4, 3, 2, 1, 0, 5, 4, 3]
0 3
67 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 5, 2]
0 3
1 2
68 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 5]
1 2
69 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 2]
0 3
70 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1]
0 3
1 2
71 [5, 4, 3, 2, 1, 0, 5, 4, 2, 5]
1 2
72 [5, 4, 3, 2, 1, 0, 5, 4, 2]
0 3
1 2
73 [5, 4, 3, 2, 1, 0, 5, 4, 1, 5]
0 3
1 2
74 [5, 4, 3, 2, 1, 0, 5, 4, 1]
0 3
75 [5, 4, 3, 2, 1, 0, 5, 4, 5]
1 2
76 [5, 4, 3, 2, 1, 0, 5, 4]
0 3
77 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3, 2, 3]
0 3
78 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3, 2]
0 3
1 2
79 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3]
0 3
1 2
80 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 2]
0 3
81 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1]
0 3
82 [5, 4, 3, 2, 1, 0, 5, 3, 2, 3]
0 3
1 2
83 [5, 4, 3, 2, 1, 0, 5, 3, 2]
0 3
84 [5, 4, 3, 2, 1, 0, 5, 3, 1]
0 3
85 [5, 4, 3, 2, 1, 0, 5, 3]
0 3
86 [5, 4, 3, 2, 1, 0, 5, 2, 1, 2]
0 3
87 [5, 4, 3, 2, 1, 0, 5, 2, 1]
0 3
1 2
88 [5, 4, 3, 2, 1, 0, 5, 2]
0 3
1 2
89 [5, 4, 3, 2, 1, 0, 5, 1]
0 3
90 [5, 4, 3, 2, 1, 0, 5]
0 3
91 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4]
0 3
92 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3]
0 3
1 2
93 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4]
0 3
1 2
94 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 3]
0 3
95 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2]
0 3
96 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 4]
1 2
97 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3]
0 3
1 2
98 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 2]
0 3
99 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4]
0 3
1 2
100 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2, 3]
0 3
1 2
101 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2]
1 2
102 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3]
1 2
103 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 2]
0 3
1 2
104 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1]
1 2
105 [5, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3, 4]
1 2
106 [5, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3]
0 3
1 2
107 [5, 4, 3, 2, 1, 0, 4, 3, 2, 4]
0 3
1 2
108 [5, 4, 3, 2, 1, 0, 4, 3, 2, 3]
1 2
109 [5, 4, 3, 2, 1, 0, 4, 3, 2]
1 2
110 [5, 4, 3, 2, 1, 0, 4, 3, 1, 4]
0 3
111 [5, 4, 3, 2, 1, 0, 4, 3, 1]
0 3
1 2
112 [5, 4, 3, 2, 1, 0, 4, 3, 4]
0 3
113 [5, 4, 3, 2, 1, 0, 4, 3]
1 2
114 [5, 4, 3, 2, 1, 0, 4, 2, 1, 2]
0 3
1 2
115 [5, 4, 3, 2, 1, 0, 4, 2, 1]
1 2
116 [5, 4, 3, 2, 1, 0, 4, 2]
1 2
117 [5, 4, 3, 2, 1, 0, 4, 1]
0 3
1 2
118 [5, 4, 3, 2, 1, 0, 4]
1 2
119 [5, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3]
0 3
120 [5, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2]
0 3
1 2
121 [5, 4, 3, 2, 1, 0, 3, 2, 1, 3]
0 3
1 2
122 [5, 4, 3, 2, 1, 0, 3, 2, 1, 2]
0 3
123 [5, 4, 3, 2, 1, 0, 3, 2, 1]
0 3
124 [5, 4, 3, 2, 1, 0, 3, 2, 3]
1 2
125 [5, 4, 3, 2, 1, 0, 3, 2]
0 3
126 [5, 4, 3, 2, 1, 0, 3, 1]
0 3
127 [5, 4, 3, 2, 1, 0, 3]
0 3
128 [5, 4, 3, 2, 1, 0, 2, 1, 2]
0 3
129 [5, 4, 3, 2, 1, 0, 2, 1]
1 2
130 [5, 4, 3, 2, 1, 0, 2]
1 2
131 [5, 4, 3, 2, 1, 0, 1]
0 3
132 [5, 4, 3, 2, 1, 0]
FAILS!
sage: A=CartanMatrix(['C',7])
....: c=[6,5,4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     print(num,v)
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     if p_lambda_int(B(A,c),lam(A,v),[k,kinv+[c[0]]]).dimension()>0 and p_l
....: ambda_int(B(A,c),lam(A,c),[kinv,k+[c[0]]]).dimension()>0:
....:         print('FAILS!')
....:         break
....: 
1 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5]
2 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4]
3 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5]
4 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4]
5 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3]
6 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5]
7 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4]
8 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3]
9 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5]
10 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4]
11 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3]
12 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4]
13 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 3]
14 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2]
15 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5]
16 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4]
17 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5]
18 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 4]
19 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3]
20 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2, 5]
21 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2]
22 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 5]
23 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4]
24 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2, 3]
25 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2]
26 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3]
27 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 2]
28 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5]
29 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4]
30 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3]
31 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4]
32 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 3]
33 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2]
34 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 4]
35 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3]
36 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 2]
37 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4]
38 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2, 3]
39 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2]
40 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3]
41 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 2]
42 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1]
43 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5]
FAILS!
sage: A=CartanMatrix(['C',7])
....: c=[6,5,4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     if p_lambda_int(B(A,c),lam(A,v),[k,kinv+[c[0]]]).dimension()>0 and p_l
....: ambda_int(B(A,c),lam(A,c),[kinv,k+[c[0]]]).dimension()>0:
....:         print(n,v,'FAILS!')
....: 
5 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] FAILS!
5 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 4] FAILS!
5 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3] FAILS!
5 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 3] FAILS!
5 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 5] FAILS!
5 [5, 4, 3, 2, 1, 0, 5, 4, 2, 5] FAILS!
5 [5, 4, 3, 2, 1, 0, 5, 4, 5] FAILS!
5 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 4] FAILS!
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [1673], line 8
      6 k=list(reversed(v))
      7 kinv=list(reversed(inv_sortable(A,c[Integer(1):],v)))
----> 8 if p_lambda_int(B(A,c),lam(A,v),[k,kinv+[c[Integer(0)]]]).dimension()>Integer(0) and p_lambda_int(B(A,c),lam(A,c),[kinv,k+[c[Integer(0)]]]).dimension()>Integer(0):
      9     print(n,v,'FAILS!')

File ~/git/affine_dominance/software/domination5.py:13, in p_lambda_int(B, la, seqs)
     12 def p_lambda_int(B, la, seqs):
---> 13     P = p_lambda(B, la, seqs[0])
     14     for s in seqs:
     15         P = P.intersection(p_lambda(B, la, s))

File ~/git/affine_dominance/software/domination5.py:41, in p_lambda(B, la, seq)
     38 #print("Hp:   ",Hp,Hp.vertices(),Hp.rays(),Hp.lines(),"\n")
     39 #print("Hm:   ",Hm,Hm.vertices(),Hm.rays(),Hm.lines(),"\n\n")
     40 Pp = P.intersection(Hp)
---> 41 Pm = P.intersection(Hm)
     42 if Pp.dimension() < rk:
     43     P=Em*Pm

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1371, in Polyhedron_base5.intersection(self, other)
   1369 parent = self.parent()
   1370 try:
-> 1371     intersection = parent.element_class(parent, None, [new_ieqs, new_eqns])
   1373     # Force calculation of the vertices.
   1374     _ = intersection.n_vertices()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:179, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    177 elif Hrep is not None:
    178     ieqs, eqns = Hrep
--> 179     self._init_from_Hrepresentation(ieqs, eqns, **kwds)
    180 else:
    181     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:129, in Polyhedron_ppl._init_from_Hrepresentation(self, ieqs, eqns, minimize, verbose)
    106 def _init_from_Hrepresentation(self, ieqs, eqns, minimize=True, verbose=False):
    107     """
    108     Construct polyhedron from H-representation data.
    109 
   (...)
    127         sage: Polyhedron_ppl._init_from_Hrepresentation(p, [], [])
    128     """
--> 129     cs = self._convert_constraints_to_ppl(ieqs, eqns)
    130     if cs.empty():
    131         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'universe')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:534, in Polyhedron_ppl._convert_constraints_to_ppl(ieqs, eqns)
    532     ieqs = []
    533 for ieq in ieqs:
--> 534     cs.insert(Polyhedron_ppl._convert_constraint_to_ppl(ieq, INEQUALITY))
    535 if eqns is None:
    536     eqns = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:509, in Polyhedron_ppl._convert_constraint_to_ppl(c, typ)
    507 A = dc[1:]
    508 if typ == INEQUALITY:
--> 509     return Linear_Expression(A, b) >= 0
    510 else:
    511     return Linear_Expression(A, b) == 0

File ppl/linear_algebra.pyx:654, in ppl.linear_algebra.Linear_Expression.__init__()

File ppl/linear_algebra.pyx:49, in ppl.linear_algebra.PPL_Coefficient_from_pyobject()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/rings/integer.pyx:914, in sage.rings.integer.Integer.__richcmp__ (build/cythonized/sage/rings/integer.c:16498)()
    912     c = mpz_cmp_d((<Integer>left).value, d)
    913 else:
--> 914     return coercion_model.richcmp(left, right, op)
    915 
    916 return rich_to_bool_sgn(op, c)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:2021, in sage.structure.coerce.CoercionModel.richcmp (build/cythonized/sage/structure/coerce.c:26173)()
   2019 # Coerce to a common parent
   2020 try:
-> 2021     x, y = self.canonical_coercion(x, y)
   2022 except (TypeError, NotImplementedError):
   2023     pass

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1422, in sage.structure.coerce.CoercionModel.canonical_coercion (build/cythonized/sage/structure/coerce.c:18956)()
   1420             self._record_exception()
   1421 
-> 1422     raise TypeError("no common canonical parent for objects with parents: '%s' and '%s'"%(xp, yp))
   1423 
   1424 cpdef coercion_maps(self, R, S) noexcept:

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['C',7])
....: c=[6,5,4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     if p_lambda_int(B(A,c),lam(A,v),[k,kinv+[c[0]]]).dimension()>0 and p_l
....: ambda_int(B(A,c),lam(A,c),[kinv,k+[c[0]]]).dimension()>0:
....:         print(num,v,'FAILS!')
43 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] FAILS!
46 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 4] FAILS!
47 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3] FAILS!
50 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 3] FAILS!
68 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 5] FAILS!
71 [5, 4, 3, 2, 1, 0, 5, 4, 2, 5] FAILS!
75 [5, 4, 3, 2, 1, 0, 5, 4, 5] FAILS!
96 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 4] FAILS!
101 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2] FAILS!
102 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3] FAILS!
104 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1] FAILS!
105 [5, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3, 4] FAILS!
108 [5, 4, 3, 2, 1, 0, 4, 3, 2, 3] FAILS!
109 [5, 4, 3, 2, 1, 0, 4, 3, 2] FAILS!
113 [5, 4, 3, 2, 1, 0, 4, 3] FAILS!
115 [5, 4, 3, 2, 1, 0, 4, 2, 1] FAILS!
116 [5, 4, 3, 2, 1, 0, 4, 2] FAILS!
118 [5, 4, 3, 2, 1, 0, 4] FAILS!
124 [5, 4, 3, 2, 1, 0, 3, 2, 3] FAILS!
129 [5, 4, 3, 2, 1, 0, 2, 1] FAILS!
130 [5, 4, 3, 2, 1, 0, 2] FAILS!
132 [5, 4, 3, 2, 1, 0] FAILS!
133 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] FAILS!
136 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] FAILS!
137 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] FAILS!
140 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] FAILS!
152 [5, 4, 3, 2, 1, 5, 4, 2, 5] FAILS!
154 [5, 4, 3, 2, 1, 5, 4, 5] FAILS!
161 [5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] FAILS!
164 [5, 4, 3, 2, 1, 4, 3, 2, 3] FAILS!
165 [5, 4, 3, 2, 1, 4, 3, 2] FAILS!
167 [5, 4, 3, 2, 1, 4, 3] FAILS!
168 [5, 4, 3, 2, 1, 4, 2] FAILS!
169 [5, 4, 3, 2, 1, 4] FAILS!
170 [5, 4, 3, 2, 1, 3, 2, 3] FAILS!
173 [5, 4, 3, 2, 1, 2] FAILS!
174 [5, 4, 3, 2, 1] FAILS!
194 [5, 4, 3, 2, 5, 4, 5] FAILS!
199 [5, 4, 3, 2, 4, 3] FAILS!
200 [5, 4, 3, 2, 4] FAILS!
202 [5, 4, 3, 2] FAILS!
205 [5, 4, 3, 1, 0, 5, 4, 5] FAILS!
210 [5, 4, 3, 1, 0, 4] FAILS!
212 [5, 4, 3, 1, 0] FAILS!
213 [5, 4, 3, 1, 5, 4, 5] FAILS!
216 [5, 4, 3, 1, 4] FAILS!
217 [5, 4, 3, 1] FAILS!
223 [5, 4, 3, 5, 4, 5] FAILS!
226 [5, 4, 3, 4] FAILS!
227 [5, 4, 3] FAILS!
240 [5, 4, 2, 1, 2] FAILS!
249 [5, 4, 1, 0] FAILS!
251 [5, 4, 1] FAILS!
255 [5, 4] FAILS!
261 [5, 3, 2, 1, 0, 3, 2, 3] FAILS!
266 [5, 3, 2, 1, 0, 2, 1] FAILS!
267 [5, 3, 2, 1, 0, 2] FAILS!
269 [5, 3, 2, 1, 0] FAILS!
270 [5, 3, 2, 1, 3, 2, 3] FAILS!
273 [5, 3, 2, 1, 2] FAILS!
274 [5, 3, 2, 1] FAILS!
278 [5, 3, 2] FAILS!
280 [5, 3, 1, 0] FAILS!
281 [5, 3, 1] FAILS!
283 [5, 3] FAILS!
289 [5, 2, 1, 2] FAILS!
294 [5, 1, 0] FAILS!
295 [5, 1] FAILS!
297 [5] FAILS!
340 [4, 3, 2, 1, 4, 3, 2, 4, 3, 4] FAILS!
343 [4, 3, 2, 1, 4, 3, 2, 3] FAILS!
344 [4, 3, 2, 1, 4, 3, 2] FAILS!
347 [4, 3, 2, 1, 4, 2] FAILS!
365 [4, 3, 1, 0, 4] FAILS!
368 [4, 3, 1, 4] FAILS!
372 [4, 3, 4] FAILS!
393 [3, 2, 1, 0, 3, 2, 3] FAILS!
398 [3, 2, 1, 0, 2, 1] FAILS!
399 [3, 2, 1, 0, 2] FAILS!
401 [3, 2, 1, 0] FAILS!
402 [3, 2, 1, 3, 2, 3] FAILS!
405 [3, 2, 1, 2] FAILS!
406 [3, 2, 1] FAILS!
410 [3, 2] FAILS!
412 [3, 1, 0] FAILS!
413 [3, 1] FAILS!
415 [3] FAILS!
421 [2, 1, 2] FAILS!
426 [1, 0] FAILS!
427 [1] FAILS!
429 [] FAILS!
sage: A=CartanMatrix(['C',7])
....: c=[6,5,4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     fails=true
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     Ps=list(p_lambda(B(A,c),lam(A,v),seq) for seq in [k,kinv,k+[c[0]],kinv
....: +[c[0]]])
....:     for i in range(len(Ps)):
....:         for j in range(i+1,len(Ps)):
....:             if Ps[i].intersection(Ps[j]).dimension()==0:
....:                 print(i,j)
....:                 fails=false
....:                 break
....:     if fails:
....:         print(num,v,'FAILS!')
0 3

0 3
1 2
0 3
1 2
0 3
0 3
0 3
1 2
0 3
1 2
0 3
0 3
1 2
0 3
1 2
0 3
1 2
0 3
1 2
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [1675], line 9
      7 k=list(reversed(v))
      8 kinv=list(reversed(inv_sortable(A,c[Integer(1):],v)))
----> 9 Ps=list(p_lambda(B(A,c),lam(A,v),seq) for seq in [k,kinv,k+[c[Integer(0)]],kinv+[c[Integer(0)]]])     
     10 for i in range(len(Ps)):
     11     for j in range(i+Integer(1),len(Ps)):

Cell In [1675], line 9, in <genexpr>(.0)
      7 k=list(reversed(v))
      8 kinv=list(reversed(inv_sortable(A,c[Integer(1):],v)))
----> 9 Ps=list(p_lambda(B(A,c),lam(A,v),seq) for seq in [k,kinv,k+[c[Integer(0)]],kinv+[c[Integer(0)]]])     
     10 for i in range(len(Ps)):
     11     for j in range(i+Integer(1),len(Ps)):

File ~/git/affine_dominance/software/domination5.py:49, in p_lambda(B, la, seq)
     45         P=Ep*Pp
     46     else:
     47         #print("Pp:   ",Pp,Pp.vertices(),Pp.rays(),Pp.lines(),"\n")
     48         #print("Pm:   ",Pm,Pm.vertices(),Pm.rays(),Pm.lines(),"\n\n")
---> 49         P=(Ep*Pp).convex_hull(Em*Pm)
     50     B.mutate(k)
     51 return P

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1312, in Polyhedron_base5.convex_hull(self, other)
   1310 hull_rays = self.rays() + other.rays()
   1311 hull_lines = self.lines() + other.lines()
-> 1312 return self.parent().element_class(self.parent(), [hull_vertices, hull_rays, hull_lines], None)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:174, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    171     lines = tuple(lines)
    173 if vertices or rays or lines:
--> 174     self._init_from_Vrepresentation(vertices, rays, lines, **kwds)
    175 else:
    176     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:99, in Polyhedron_ppl._init_from_Vrepresentation(self, vertices, rays, lines, minimize, verbose)
     72 def _init_from_Vrepresentation(self, vertices, rays, lines, minimize=True, verbose=False):
     73     """
     74     Construct polyhedron from V-representation data.
     75 
   (...)
     97         sage: Polyhedron_ppl._init_from_Vrepresentation(p, [], [], [])
     98     """
---> 99     gs = self._convert_generators_to_ppl(vertices, rays, lines)
    100     if gs.empty():
    101         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'empty')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:473, in Polyhedron_ppl._convert_generators_to_ppl(vertices, rays, lines)
    471     vertices = []
    472 for v in vertices:
--> 473     gs.insert(Polyhedron_ppl._convert_generator_to_ppl(v, VERTEX))
    474 if rays is None:
    475     rays = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:442, in Polyhedron_ppl._convert_generator_to_ppl(v, typ)
    440 d = LCM_list([denominator(v_i) for v_i in v])
    441 if d.is_one():
--> 442     return ob(Linear_Expression(v, 0))
    443 else:
    444     dv = [ d*v_i for v_i in v ]

File ppl/linear_algebra.pyx:653, in ppl.linear_algebra.Linear_Expression.__init__()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/representation.py:81, in PolyhedronRepresentation.__getitem__(self, i)
     69     """
     70     Return the length of the representation data.
     71 
   (...)
     77         3
     78     """
     79     return self._vector.degree()
---> 81 def __getitem__(self, i):
     82     """
     83     Supports indexing.
     84 
   (...)
     90         2
     91     """
     92     return self._vector[i]

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['C',7])
....: c=[6,5,4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     fails=true
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     Ps=list(p_lambda(B(A,c),lam(A,v),seq) for seq in [k,kinv,k+[c[0]],kinv
....: +[c[0]]])
....:     for i in range(len(Ps)):
....:         for j in range(i+1,len(Ps)):
....:             if Ps[i].intersection(Ps[j]).dimension()==0:
....:                 fails=false
....:                 break
....:     if fails:
....:         print(num,v,'FAILS!')

^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [1676], line 9
      7 k=list(reversed(v))
      8 kinv=list(reversed(inv_sortable(A,c[Integer(1):],v)))
----> 9 Ps=list(p_lambda(B(A,c),lam(A,v),seq) for seq in [k,kinv,k+[c[Integer(0)]],kinv+[c[Integer(0)]]])     
     10 for i in range(len(Ps)):
     11     for j in range(i+Integer(1),len(Ps)):

Cell In [1676], line 9, in <genexpr>(.0)
      7 k=list(reversed(v))
      8 kinv=list(reversed(inv_sortable(A,c[Integer(1):],v)))
----> 9 Ps=list(p_lambda(B(A,c),lam(A,v),seq) for seq in [k,kinv,k+[c[Integer(0)]],kinv+[c[Integer(0)]]])     
     10 for i in range(len(Ps)):
     11     for j in range(i+Integer(1),len(Ps)):

File ~/git/affine_dominance/software/domination5.py:40, in p_lambda(B, la, seq)
     37 Hm = Polyhedron(ieqs=[(0,)*(k+1)+(-1,)+(0,)*(m-k-1)])
     38 #print("Hp:   ",Hp,Hp.vertices(),Hp.rays(),Hp.lines(),"\n")
     39 #print("Hm:   ",Hm,Hm.vertices(),Hm.rays(),Hm.lines(),"\n\n")
---> 40 Pp = P.intersection(Hp)
     41 Pm = P.intersection(Hm)
     42 if Pp.dimension() < rk:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1371, in Polyhedron_base5.intersection(self, other)
   1369 parent = self.parent()
   1370 try:
-> 1371     intersection = parent.element_class(parent, None, [new_ieqs, new_eqns])
   1373     # Force calculation of the vertices.
   1374     _ = intersection.n_vertices()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:70, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
---> 70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:195, in Polyhedron_ppl.set_immutable(self)
    193         raise e
    194 if not hasattr(self, '_Hrepresentation'):
--> 195     self._init_Hrepresentation_from_ppl(True)
    196 self._is_mutable = False

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:344, in Polyhedron_ppl._init_Hrepresentation_from_ppl(self, minimize)
    342 for c in cs:
    343     if c.is_inequality():
--> 344         parent._make_Inequality(self, (c.inhomogeneous_term(),) + c.coefficients())
    345     elif c.is_equality():
    346         parent._make_Equation(self, (c.inhomogeneous_term(),) + c.coefficients())

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:1069, in Polyhedra_base._make_Inequality(self, polyhedron, data)
   1067 except IndexError:
   1068     obj = Inequality(self)
-> 1069 obj._set_data(polyhedron, data)
   1070 return obj

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/representation.py:439, in Hrepresentation._set_data(self, polyhedron, data)
    436 if len(data) != self._vector.degree():
    437     raise ValueError('H-representation data requires a list of length ambient_dim+1')
--> 439 self._vector[:] = data
    440 self._A[:] = data[1:]
    441 self._b = self._base_ring(data[0])

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/modules/free_module_element.pyx:1893, in sage.modules.free_module_element.FreeModuleElement.__setitem__ (build/cythonized/sage/modules/free_module_element.c:20047)()
   1891 if isinstance(i, slice):
   1892     PySlice_GetIndicesEx(i, d, &start, &stop, &step, &slicelength)
-> 1893     values = [R(x) for x in value]
   1894     if len(values) != slicelength:
   1895         raise IndexError("slice assignment would change dimension")

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/parent.pyx:901, in sage.structure.parent.Parent.__call__ (build/cythonized/sage/structure/parent.c:12658)()
    899 if mor is not None:
    900     if no_extra_args:
--> 901         return mor._call_(x)
    902     else:
    903         return mor._call_with_args(x, args, kwds)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:158, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_ (build/cythonized/sage/structure/coerce_maps.c:6834)()
    156 cdef Parent C = self._codomain
    157 try:
--> 158     return C._element_constructor(x)
    159 except Exception:
    160     if print_warnings:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/rings/rational.pyx:536, in sage.rings.rational.Rational.__init__ (build/cythonized/sage/rings/rational.cpp:14305)()
    534     """
    535     if x is not None:
--> 536         self.__set_value(x, base)
    537 
    538 def __reduce__(self):

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/rings/rational.pyx:670, in sage.rings.rational.Rational._Rational__set_value (build/cythonized/sage/rings/rational.cpp:16246)()
    668         raise TypeError("unable to convert {!r} to a rational".format(x))
    669 
--> 670 elif isinstance(x, fractions.Fraction):
    671     mpz_set(mpq_numref(self.value), (<integer.Integer> integer.Integer(x.numerator)).value)
    672     mpz_set(mpq_denref(self.value), (<integer.Integer> integer.Integer(x.denominator)).value)

File <frozen abc>:117, in __instancecheck__(cls, instance)

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['C',7])
....: c=[6,5,4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     fails=true
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     Ps=list(p_lambda(B(A,c),lam(A,v),seq) for seq in [k,kinv,k+[c[0]],kinv
....: +[c[0]]])
....:     for i in range(len(Ps)):
....:         for j in range(i+1,len(Ps)):
....:             if Ps[i].intersection(Ps[j]).dimension()==0:
....:                 fails=false
....:                 break
....:     if fails:
....:         print(num,v,'FAILS!')
....:     else:
....:         print(num)
....: 
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132 [5, 4, 3, 2, 1, 0] FAILS!
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
325
326
327
328
329
330
331
332
333
334
335
336
337
338
339
340
341
342
343
344
345
346
347
348
349
350
351
352
353
354
355
356
357
358
359
360
361
362
363
364
365
366
367
368
369
370
371
372
373
374
375
376
377
378
379
380
381
382
383
384
385
386
387
388
389
390
391
392
393
394
395
396
397
398
399
400
401
402
403
404
405
406
407
408
409
410
411
412
413
414
415
416
417
418
419
420
421
422
423
424
425
426
427
428
429 [] FAILS!
sage: A=CartanMatrix(['C',5])
....: c=[4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     fails=true
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     Ps=list(p_lambda(B(A,c),lam(A,v),seq) for seq in [k,kinv,k+[c[0]],kinv
....: +[c[0]]])
....:     for i in range(len(Ps)):
....:         for j in range(i+1,len(Ps)):
....:             if Ps[i].intersection(Ps[j]).dimension()==0:
....:                 fails=false
....:                 break
....:     if fails:
....:         print(num,v,'FAILS!')
....:     else:
....:         print(num)
1
2
3
4
5
6
7
8
9
10
11
12
13
14 [3, 2, 1, 0] FAILS!
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42 [] FAILS!
sage: A=CartanMatrix(['C',3])
....: c=[2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     fails=true
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     Ps=list(p_lambda(B(A,c),lam(A,v),seq) for seq in [k,kinv,k+[c[0]],kinv
....: +[c[0]]])
....:     for i in range(len(Ps)):
....:         for j in range(i+1,len(Ps)):
....:             if Ps[i].intersection(Ps[j]).dimension()==0:
....:                 fails=false
....:                 break
....:     if fails:
....:         print(num,v,'FAILS!')
....:     else:
....:         print(num)
1
2 [1, 0] FAILS!
3
4
5 [] FAILS!
sage: A=CartanMatrix(['C',9])
....: c=[8,7,6,5,4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     fails=true
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     Ps=list(p_lambda(B(A,c),lam(A,v),seq) for seq in [k,kinv,k+[c[0]],kinv
....: +[c[0]]])
....:     for i in range(len(Ps)):
....:         for j in range(i+1,len(Ps)):
....:             if Ps[i].intersection(Ps[j]).dimension()==0:
....:                 fails=false
....:                 break
....:     if fails:
....:         print(num,v,'FAILS!')
....:     else:
....:         if num//25*25==num:
....:             print(num)
....: 
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [1680], line 9
      7 k=list(reversed(v))
      8 kinv=list(reversed(inv_sortable(A,c[Integer(1):],v)))
----> 9 Ps=list(p_lambda(B(A,c),lam(A,v),seq) for seq in [k,kinv,k+[c[Integer(0)]],kinv+[c[Integer(0)]]])     
     10 for i in range(len(Ps)):
     11     for j in range(i+Integer(1),len(Ps)):

Cell In [1680], line 9, in <genexpr>(.0)
      7 k=list(reversed(v))
      8 kinv=list(reversed(inv_sortable(A,c[Integer(1):],v)))
----> 9 Ps=list(p_lambda(B(A,c),lam(A,v),seq) for seq in [k,kinv,k+[c[Integer(0)]],kinv+[c[Integer(0)]]])     
     10 for i in range(len(Ps)):
     11     for j in range(i+Integer(1),len(Ps)):

File ~/git/affine_dominance/software/domination5.py:49, in p_lambda(B, la, seq)
     45         P=Ep*Pp
     46     else:
     47         #print("Pp:   ",Pp,Pp.vertices(),Pp.rays(),Pp.lines(),"\n")
     48         #print("Pm:   ",Pm,Pm.vertices(),Pm.rays(),Pm.lines(),"\n\n")
---> 49         P=(Ep*Pp).convex_hull(Em*Pm)
     50     B.mutate(k)
     51 return P

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1312, in Polyhedron_base5.convex_hull(self, other)
   1310 hull_rays = self.rays() + other.rays()
   1311 hull_lines = self.lines() + other.lines()
-> 1312 return self.parent().element_class(self.parent(), [hull_vertices, hull_rays, hull_lines], None)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:70, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
---> 70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:189, in Polyhedron_ppl.set_immutable(self)
    187 if not hasattr(self, '_Vrepresentation'):
    188     try:
--> 189         self._init_Vrepresentation_from_ppl(True)
    190     except TypeError as e:
    191         # Apparently the polyhedron is (no longer) integral.
    192         self._clear_cache()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:300, in Polyhedron_ppl._init_Vrepresentation_from_ppl(self, minimize)
    298     raise TypeError("Vrepresentation of mutable polyhedra cannot be recomputed")
    299 self._Vrepresentation = []
--> 300 gs = self._ppl_polyhedron.minimized_generators()
    301 parent = self.parent()
    302 for g in gs:

File ppl/polyhedron.pyx:340, in ppl.polyhedron.Polyhedron.minimized_generators()

KeyboardInterrupt: 
sage: A=CartanMatrix(['C',9])
....: c=[8,7,6,5,4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     fails=true
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     Ps=list(p_lambda(B(A,c),lam(A,v),seq) for seq in [k,kinv,k+[c[0]],kinv
....: +[c[0]]])
....:     for i in range(len(Ps)):
....:         for j in range(i+1,len(Ps)):
....:             if Ps[i].intersection(Ps[j]).dimension()==0:
....:                 fails=false
....:                 break
....:     if fails:
....:         print(num,v,'FAILS!')
....:     else:
....:         if (num//10)*10==num:
....:             print(num)
10
20
30
40
50
60
70
80
90
100
110
120
130
140
150
160
170
180
190
200
210
220
230
240
250
260
270
280
290
300
310
320
330
340
350
360
370
380
390
400
410
420
430
440
450
460
470
480
490
500
510
520
530
540
550
560
570
580
590
600
610
620
630
640
650
660
670
680
690
700
710
720
730
740
750
760
770
780
790
800
810
820
830
840
850
860
870
880
890
900
910
920
930
940
950
960
970
980
990
1000
1010
1020
1030
1040
1050
1060
1070
1080
1090
1100
1110
1120
1130
1140
1150
1160
1170
1180
1190
1200
1210
1220
1230
1240
1250
1260
1270
1280
1290
1300
1310
1320
1330
1340
1350
1360
1370
1380
1390
1400
1410
1420
1430 [7, 6, 5, 4, 3, 2, 1, 0] FAILS!
1440
1450
1460
1470
1480
1490
1500
1510
1520
1530
1540
1550
1560
1570
1580
1590
1600
1610
1620
1630
1640
1650
1660
1670
1680
1690
1700
1710
1720
1730
1740
1750
1760
1770
1780
1790
1800
1810
1820
1830
1840
1850
1860
1870
1880
1890
1900
1910
1920
1930
1940
1950
1960
1970
1980
1990
2000
2010
2020
2030
2040
2050
2060
2070
2080
2090
2100
2110
2120
2130
2140
2150
2160
2170
2180
2190
2200
2210
2220
2230
2240
2250
2260
2270
2280
2290
2300
2310
2320
2330
2340
2350
2360
2370
2380
2390
2400
2410
2420
2430
2440
2450
2460
2470
2480
2490
2500
2510
2520
2530
2540
2550
2560
2570
2580
2590
2600
2610
2620
2630
2640
2650
2660
2670
2680
2690
2700
2710
2720
2730
2740
2750
2760
2770
2780
2790
2800
2810
2820
2830
2840
2850
2860
2870
2880
2890
2900
2910
2920
2930
2940
2950
2960
2970
2980
2990
3000
3010
3020
3030
3040
3050
3060
3070
3080
3090
3100
3110
3120
3130
3140
3150
3160
3170
3180
3190
3200
3210
3220
3230
3240
3250
3260
3270
3280
3290
3300
3310
3320
3330
3340
3350
3360
3370
3380
3390
3400
3410
3420
3430
3440
3450
3460
3470
3480
3490
3500
3510
3520
3530
3540
3550
3560
3570
3580
3590
3600
3610
3620
3630
3640
3650
3660
3670
3680
3690
3700
3710
3720
3730
3740
3750
3760
3770
3780
3790
3800
3810
3820
3830
3840
3850
3860
3870
3880
3890
3900
3910
3920
3930
3940
3950
3960
3970
3980
3990
4000
4010
4020
4030
4040
4050
4060
4070
4080
4090
4100
4110
4120
4130
4140
4150
4160
4170
4180
4190
4200
4210
4220
4230
4240
4250
4260
4270
4280
4290
4300
4310
4320
4330
4340
4350
4360
4370
4380
4390
4400
4410
4420
4430
4440
4450
4460
4470
4480
4490
4500
4510
4520
4530
4540
4550
4560
4570
4580
4590
4600
4610
4620
4630
4640
4650
4660
4670
4680
4690
4700
4710
4720
4730
4740
4750
4760
4770
4780
4790
4800
4810
4820
4830
4840
4850
4860
4862 [] FAILS!
sage: 
