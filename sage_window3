Last login: Tue Sep  3 20:35:59 on ttys011

The default interactive shell is now zsh.
To update your account to use zsh, please run `chsh -s /bin/zsh`.
For more details, please visit https://support.apple.com/kb/HT208050.
clear ; /Applications/SageMath-10-2.app/Contents/Frameworks/Sage.framework/Versions/Current/venv/bin/sage ; exit
MA-C02K804RDR53:~ reading$ clear ; /Applications/SageMath-10-2.app/Contents/Frameworks/Sage.framework/Versions/Current/venv/bin/sage ; exit















┌────────────────────────────────────────────────────────────────────┐
│ SageMath version 10.2, Release Date: 2023-12-03                    │
│ Using Python 3.11.1. Type "help()" for help.                       │
└────────────────────────────────────────────────────────────────────┘
....:     elif v==[] or c[0]!=v[0]:  # The "induction on rank" case.
....:         out=K(c[1:],v)
....:     else:  # The "induction on length" case.  This is provably the right t
....: hing to do.
....:         for k in K(c[1:]+[c[0]],v[1:]):
....:             if k!=[] and k[0]==v[0]:
....:                 out=out+[k[1:]]
....:             else:
....:                 out=out+[[v[0]]+k]
....:     return out
....: 
....: # old
....: def Kbip(cplus,cminus,Coxnum):
....:     out = [cminus+cplus,cminus,[]]
....:     for i in range(Coxnum-1):
....:         if (i//2)*2==i:  #even
....:             out=out+[out[-1]+cplus]
....:         else:
....:             out=out+[out[-1]+cminus]
....:     return out
....: 
....: 
....: '''
....: 
'\n#This was just a test of how python works\ndef even(n):\n    for i in range(n):\n        if i==(i//2)*2:\n            yield(i)\n'
'\n# An old version (failed in B3):\ndef K(c,v):  # A set of sequences depending on a sortable element v, given by its c-sorting word\n    out = []\n    if c==[]:   # The terminal case (empty sequence for the rank-0 Coxeter group)\n        out=[[]]\n    elif v==[] or c[0]!=v[0]:  # The "induction on rank" case.\n        oldK=K(c[1:],v)\n        #print([c],oldK)\n        for k in oldK:\n            out=out+[[c[0]]+k]\n        out=oldK+out\n    else:  # The "induction on length" case.  This is provably the right thing to do.\n        for k in K(c[1:]+[c[0]],v[1:]):\n            if k!=[] and k[0]==v[0]:\n                out=out+[k[1:]]\n            else:\n                out=out+[[v[0]]+k]\n    return out\n\n# Another old version (also failed in B3)\ndef K(c,v):  # A set of sequences depending on a sortable element v, given by its c-sorting word\n    out = []\n    if c==[]:   \n        out=[[]]\n    elif v==[] or c[0]!=v[0]:\n        oldK=K(c[1:],v)\n        for k in oldK:\n            out=out+[k+[c[0]]]\n        out=oldK+out\n    else:\n        for k in K(c[1:]+[c[0]],v[1:]):\n            if k!=[] and k[0]==v[0]:\n                out=out+[k[1:]]\n            else:\n                out=out+[[v[0]]+k]\n    return out\n\n#Another\ndef K(c,v):  # A set of sequences depending on a sortable element v, given by its c-sorting word\n    out = []\n    if c==[]:   # The terminal case (empty sequence for the rank-0 Coxeter group)\n        out=[[]]\n    elif v==[] or c[0]!=v[0]:  # The "induction on rank" case.\n        for i in range(len(c)):\n            out=out+[c[0:i+1]]\n        out=K(c[1:],v)+out\n    else:  # The "induction on length" case.  This is provably the right thing to do.\n        for k in K(c[1:]+[c[0]],v[1:]):\n            if k!=[] and k[0]==v[0]:\n                out=out+[k[1:]]\n            else:\n                out=out+[[v[0]]+k]\n    return out\n\n\n\n# An experiment (a pretty dumb one... yields the list [v])\ndef K(c,v):  # A set of sequences depending on a sortable element v, given by its c-sorting word\n    out = []\n    if c==[]:   # The terminal case (empty sequence for the rank-0 Coxeter group)\n        out=[[]]\n    elif v==[] or c[0]!=v[0]:  # The "induction on rank" case.\n        out=K(c[1:],v)\n    else:  # The "induction on length" case.  This is provably the right thing to do.\n        for k in K(c[1:]+[c[0]],v[1:]):\n            if k!=[] and k[0]==v[0]:\n                out=out+[k[1:]]\n            else:\n                out=out+[[v[0]]+k]\n    return out\n\n# old\ndef Kbip(cplus,cminus,Coxnum):\n    out = [cminus+cplus,cminus,[]]\n    for i in range(Coxnum-1):\n        if (i//2)*2==i:  #even\n            out=out+[out[-1]+cplus]\n        else:\n            out=out+[out[-1]+cminus]\n    return out\n\n\n'
sage: p_lambda_faster(Matrix([[0,1],[-1,0]]),(1,1),[])
A 2-dimensional polyhedron in QQ^2 defined as the convex hull of 1 vertex and 2 rays
sage: vec=(1,1)
sage: for sec in [[1,0],[1],[],[0],[0,1]]:
....:     P=p_lambda_faster(Matrix([[0,1],[-1,0]]),vec,seq)
....:     P
....:     P.vertices()
....:     P.rays()
....:     print("\n")
....: 
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In [4], line 2
      1 for sec in [[Integer(1),Integer(0)],[Integer(1)],[],[Integer(0)],[Integer(0),Integer(1)]]:
----> 2     P=p_lambda_faster(Matrix([[Integer(0),Integer(1)],[-Integer(1),Integer(0)]]),vec,seq) 
      3     P
      4     P.vertices()

Cell In [1], line 138, in p_lambda_faster(B, la, seq)
    136 n = B.ncols()
    137 B = block_matrix([[B,matrix(la).transpose()]])
--> 138 for k in seq:
    139     B.mutate(k)
    140 B, la  = B[:,:-Integer(1)], B[:,-Integer(1)] 

TypeError: 'function' object is not iterable
sage: for sec in [[1,0],[1],[],[0],[0,1]]:
....:     P=p_lambda_faster(Matrix([[0,1],[-1,0]]),vec,seq)
....:     P
....:     P.vertices()
....:     P.rays()
....:     print("\n")
....: 
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In [5], line 2
      1 for sec in [[Integer(1),Integer(0)],[Integer(1)],[],[Integer(0)],[Integer(0),Integer(1)]]:
----> 2     P=p_lambda_faster(Matrix([[Integer(0),Integer(1)],[-Integer(1),Integer(0)]]),vec,seq) 
      3     P
      4     P.vertices()

Cell In [1], line 138, in p_lambda_faster(B, la, seq)
    136 n = B.ncols()
    137 B = block_matrix([[B,matrix(la).transpose()]])
--> 138 for k in seq:
    139     B.mutate(k)
    140 B, la  = B[:,:-Integer(1)], B[:,-Integer(1)] 

TypeError: 'function' object is not iterable
sage: for sec in [[1,0],[1],[],[0],[0,1]]:
....:     P=p_lambda_faster(Matrix([[0,1],[-1,0]]),(1,1),seq)
....:     P
....:     P.vertices()
....:     P.rays()
....:     print("\n")
....: 
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In [6], line 2
      1 for sec in [[Integer(1),Integer(0)],[Integer(1)],[],[Integer(0)],[Integer(0),Integer(1)]]:
----> 2     P=p_lambda_faster(Matrix([[Integer(0),Integer(1)],[-Integer(1),Integer(0)]]),(Integer(1),Integer(1)),seq) 
      3     P
      4     P.vertices()

Cell In [1], line 138, in p_lambda_faster(B, la, seq)
    136 n = B.ncols()
    137 B = block_matrix([[B,matrix(la).transpose()]])
--> 138 for k in seq:
    139     B.mutate(k)
    140 B, la  = B[:,:-Integer(1)], B[:,-Integer(1)] 

TypeError: 'function' object is not iterable
sage: for sec in [[1,0],[1],[],[0],[0,1]]:
....:     P=p_lambda_faster(Matrix([[0,1],[-1,0]]),(1,1),[])
....:     P
....:     P.vertices()
....:     P.rays()
....:     print("\n")
....: 
A 2-dimensional polyhedron in QQ^2 defined as the convex hull of 1 vertex and 2 rays
(A vertex at (1, 1),)
(A ray in the direction (1, 0), A ray in the direction (0, -1))


A 2-dimensional polyhedron in QQ^2 defined as the convex hull of 1 vertex and 2 rays
(A vertex at (1, 1),)
(A ray in the direction (1, 0), A ray in the direction (0, -1))


A 2-dimensional polyhedron in QQ^2 defined as the convex hull of 1 vertex and 2 rays
(A vertex at (1, 1),)
(A ray in the direction (1, 0), A ray in the direction (0, -1))


A 2-dimensional polyhedron in QQ^2 defined as the convex hull of 1 vertex and 2 rays
(A vertex at (1, 1),)
(A ray in the direction (1, 0), A ray in the direction (0, -1))


A 2-dimensional polyhedron in QQ^2 defined as the convex hull of 1 vertex and 2 rays
(A vertex at (1, 1),)
(A ray in the direction (1, 0), A ray in the direction (0, -1))


sage: for sec in [[1,0],[1],[],[0],[0,1]]:
....:     P=p_lambda_faster(Matrix([[0,1],[-1,0]]),vec,seq)
....:     P
....:     P.vertices()
....:     P.rays()
....:     print("\n")
....: 
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In [8], line 2
      1 for sec in [[Integer(1),Integer(0)],[Integer(1)],[],[Integer(0)],[Integer(0),Integer(1)]]:
----> 2     P=p_lambda_faster(Matrix([[Integer(0),Integer(1)],[-Integer(1),Integer(0)]]),vec,seq) 
      3     P
      4     P.vertices()

Cell In [1], line 138, in p_lambda_faster(B, la, seq)
    136 n = B.ncols()
    137 B = block_matrix([[B,matrix(la).transpose()]])
--> 138 for k in seq:
    139     B.mutate(k)
    140 B, la  = B[:,:-Integer(1)], B[:,-Integer(1)] 

TypeError: 'function' object is not iterable
sage: for sec in [[1,0],[1],[],[0],[0,1]]:
....:     print(sec)
....:     P=p_lambda_faster(Matrix([[0,1],[-1,0]]),vec,seq)
....:     P
....:     P.vertices()
....:     P.rays()
....:     print("\n")
....: 
[1, 0]
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In [9], line 3
      1 for sec in [[Integer(1),Integer(0)],[Integer(1)],[],[Integer(0)],[Integer(0),Integer(1)]]:
      2     print(sec)
----> 3     P=p_lambda_faster(Matrix([[Integer(0),Integer(1)],[-Integer(1),Integer(0)]]),vec,seq) 
      4     P
      5     P.vertices()

Cell In [1], line 138, in p_lambda_faster(B, la, seq)
    136 n = B.ncols()
    137 B = block_matrix([[B,matrix(la).transpose()]])
--> 138 for k in seq:
    139     B.mutate(k)
    140 B, la  = B[:,:-Integer(1)], B[:,-Integer(1)] 

TypeError: 'function' object is not iterable
sage: A=CartanMatrix(['D',8])
sage: A
[ 2 -1  0  0  0  0  0  0]
[-1  2 -1  0  0  0  0  0]
[ 0 -1  2 -1  0  0  0  0]
[ 0  0 -1  2 -1  0  0  0]
[ 0  0  0 -1  2 -1  0  0]
[ 0  0  0  0 -1  2 -1 -1]
[ 0  0  0  0  0 -1  2  0]
[ 0  0  0  0  0 -1  0  2]
sage: A=CartanMatrix(['A',3])
sage: c=[0,1,2]
sage: p_lambda_faster(Matrix([[0,1,0],[-1,0,1],[0,-1,0]]),(1,1,1),[])
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex, 1 ray, 1 line
sage: P=p_lambda_faster(Matrix([[0,1,0],[-1,0,1],[0,-1,0]]),(1,1,1),[]);P
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex, 1 ray, 1 line
sage: P=p_lambda_faster(Matrix([[0,1,0],[-1,0,1],[0,-1,0]]),(1,1,1),[]);P;P.vert
....: ices();P_rays();P.lines()
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex, 1 ray, 1 line
(A vertex at (1, 0, 1),)
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
Cell In [16], line 1
----> 1 P=p_lambda_faster(Matrix([[Integer(0),Integer(1),Integer(0)],[-Integer(1),Integer(0),Integer(1)],[Integer(0),-Integer(1),Integer(0)]]),(Integer(1),Integer(1),Integer(1)),[]);P;P.vertices();P_rays();P.lines()

NameError: name 'P_rays' is not defined
sage: P=p_lambda_faster(Matrix([[0,1,0],[-1,0,1],[0,-1,0]]),(1,1,1),[]);P;P.vert
....: ices();P.rays();P.lines()
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex, 1 ray, 1 line
(A vertex at (1, 0, 1),)
(A ray in the direction (1, 0, -1),)
(A line in the direction (0, 1, 0),)
sage: P=p_lambda_faster(Matrix([[0,1],[-1,0]]),(1,1),[]);P;P.vertices();P.rays()
....: ;P.lines()
A 2-dimensional polyhedron in QQ^2 defined as the convex hull of 1 vertex and 2 rays
(A vertex at (1, 1),)
(A ray in the direction (1, 0), A ray in the direction (0, -1))
()
sage: P=p_lambda_faster(Matrix([[0,1,0],[-1,0,1],[0,-1,0]]),(1,1,1),[1]);P;P.ver
....: tices();P.rays();P.lines()
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 lines
(A vertex at (2, 0, 0),)
()
(A line in the direction (1, 0, -1), A line in the direction (0, 1, 0))
sage: P=p_lambda_faster(Matrix([[0,1],[-1,0]]),(1,1),[0]);P;P.vertices();P.rays(
....: );P.lines()
A 2-dimensional polyhedron in QQ^2 defined as the convex hull of 1 vertex and 2 rays
(A vertex at (1, 1),)
(A ray in the direction (0, 1), A ray in the direction (1, 0))
()
sage: _.intersection(__)
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
Cell In [21], line 1
----> 1 _.intersection(__)

AttributeError: 'tuple' object has no attribute 'intersection'
sage: P=p_lambda_faster(Matrix([[0,1,0],[-1,0,1],[0,-1,0]]),(1,1,1),[1]);P;P.ver
....: tices();P.rays();P.lines()
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 lines
(A vertex at (2, 0, 0),)
()
(A line in the direction (1, 0, -1), A line in the direction (0, 1, 0))
sage: P=p_lambda_faster(Matrix([[0,1],[-1,0]]),(1,1),[0]);P;P.vertices();P.rays(
....: );P.lines()
A 2-dimensional polyhedron in QQ^2 defined as the convex hull of 1 vertex and 2 rays
(A vertex at (1, 1),)
(A ray in the direction (0, 1), A ray in the direction (1, 0))
()
....:     elif v==[] or c[0]!=v[0]:  # The "induction on rank" case.
....:         out=K(c[1:],v)
....:     else:  # The "induction on length" case.  This is provably the right t
....: hing to do.
....:         for k in K(c[1:]+[c[0]],v[1:]):
....:             if k!=[] and k[0]==v[0]:
....:                 out=out+[k[1:]]
....:             else:
....:                 out=out+[[v[0]]+k]
....:     return out
....: 
....: # old
....: def Kbip(cplus,cminus,Coxnum):
....:     out = [cminus+cplus,cminus,[]]
....:     for i in range(Coxnum-1):
....:         if (i//2)*2==i:  #even
....:             out=out+[out[-1]+cplus]
....:         else:
....:             out=out+[out[-1]+cminus]
....:     return out
....: 
....: 
....: '''
....: 
'\n#This was just a test of how python works\ndef even(n):\n    for i in range(n):\n        if i==(i//2)*2:\n            yield(i)\n'
'\n# An old version (failed in B3):\ndef K(c,v):  # A set of sequences depending on a sortable element v, given by its c-sorting word\n    out = []\n    if c==[]:   # The terminal case (empty sequence for the rank-0 Coxeter group)\n        out=[[]]\n    elif v==[] or c[0]!=v[0]:  # The "induction on rank" case.\n        oldK=K(c[1:],v)\n        #print([c],oldK)\n        for k in oldK:\n            out=out+[[c[0]]+k]\n        out=oldK+out\n    else:  # The "induction on length" case.  This is provably the right thing to do.\n        for k in K(c[1:]+[c[0]],v[1:]):\n            if k!=[] and k[0]==v[0]:\n                out=out+[k[1:]]\n            else:\n                out=out+[[v[0]]+k]\n    return out\n\n# Another old version (also failed in B3)\ndef K(c,v):  # A set of sequences depending on a sortable element v, given by its c-sorting word\n    out = []\n    if c==[]:   \n        out=[[]]\n    elif v==[] or c[0]!=v[0]:\n        oldK=K(c[1:],v)\n        for k in oldK:\n            out=out+[k+[c[0]]]\n        out=oldK+out\n    else:\n        for k in K(c[1:]+[c[0]],v[1:]):\n            if k!=[] and k[0]==v[0]:\n                out=out+[k[1:]]\n            else:\n                out=out+[[v[0]]+k]\n    return out\n\n#Another\ndef K(c,v):  # A set of sequences depending on a sortable element v, given by its c-sorting word\n    out = []\n    if c==[]:   # The terminal case (empty sequence for the rank-0 Coxeter group)\n        out=[[]]\n    elif v==[] or c[0]!=v[0]:  # The "induction on rank" case.\n        for i in range(len(c)):\n            out=out+[c[0:i+1]]\n        out=K(c[1:],v)+out\n    else:  # The "induction on length" case.  This is provably the right thing to do.\n        for k in K(c[1:]+[c[0]],v[1:]):\n            if k!=[] and k[0]==v[0]:\n                out=out+[k[1:]]\n            else:\n                out=out+[[v[0]]+k]\n    return out\n\n\n\n# An experiment (a pretty dumb one... yields the list [v])\ndef K(c,v):  # A set of sequences depending on a sortable element v, given by its c-sorting word\n    out = []\n    if c==[]:   # The terminal case (empty sequence for the rank-0 Coxeter group)\n        out=[[]]\n    elif v==[] or c[0]!=v[0]:  # The "induction on rank" case.\n        out=K(c[1:],v)\n    else:  # The "induction on length" case.  This is provably the right thing to do.\n        for k in K(c[1:]+[c[0]],v[1:]):\n            if k!=[] and k[0]==v[0]:\n                out=out+[k[1:]]\n            else:\n                out=out+[[v[0]]+k]\n    return out\n\n# old\ndef Kbip(cplus,cminus,Coxnum):\n    out = [cminus+cplus,cminus,[]]\n    for i in range(Coxnum-1):\n        if (i//2)*2==i:  #even\n            out=out+[out[-1]+cplus]\n        else:\n            out=out+[out[-1]+cminus]\n    return out\n\n\n'
sage: A=CartanMatrix(['B',5])
....: c=[0,1,2,3,4]
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),Kprefix(c,6))
....:     print(n,v,P.dimension())
....:     n+=1
....:     if P.dimension()!=0:
....:         print('FAILURE')
....:         break
....: 
1 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4] 0
2 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3] 0
3 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2] 0
4 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1] 0
5 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0] 0
6 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4] 0
7 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2] 0
8 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1] 0
9 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0] 0
10 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3] 0
11 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1] 0
12 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0] 0
13 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2] 0
14 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 0] 0
15 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1] 0
16 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0] 0
17 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4] 0
18 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3] 0
19 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2] 0
20 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1] 0
21 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4] 0
22 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1] 0
23 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0] 0
24 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2] 0
25 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0] 0
26 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1] 0
27 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0] 0
28 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2] 0
29 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1] 0
30 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3] 0
31 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0] 0
32 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1] 0
33 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0] 0
34 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 1] 0
35 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2] 0
36 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 0] 0
37 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1] 0
38 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2, 3, 4] 0
39 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2, 3] 0
40 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2] 0
41 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0] 0
42 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
43 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
44 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
45 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1] 0
46 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4] 0
47 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
48 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 1] 0
49 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3] 0
50 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 1] 0
51 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2] 0
52 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1] 0
53 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2, 3, 4] 0
54 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2, 3] 0
55 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2] 0
56 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4] 0
57 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0] 0
58 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1] 0
59 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0] 0
60 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 1] 0
61 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2] 0
62 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0] 0
63 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1] 0
64 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 2] 0
65 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0] 0
66 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2, 1] 0
67 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2] 0
68 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1] 0
69 [0, 1, 2, 3, 4, 0, 1, 2, 3, 2] 0
70 [0, 1, 2, 3, 4, 0, 1, 2, 3] 0
71 [0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0] 0
72 [0, 1, 2, 3, 4, 0, 1, 2, 0, 1] 0
73 [0, 1, 2, 3, 4, 0, 1, 2, 0] 0
74 [0, 1, 2, 3, 4, 0, 1, 2, 1] 0
75 [0, 1, 2, 3, 4, 0, 1, 2] 0
76 [0, 1, 2, 3, 4, 0, 1, 3, 4, 0] 0
77 [0, 1, 2, 3, 4, 0, 1, 3, 4] 0
78 [0, 1, 2, 3, 4, 0, 1, 3, 0] 0
79 [0, 1, 2, 3, 4, 0, 1, 3] 0
80 [0, 1, 2, 3, 4, 0, 1, 0] 0
81 [0, 1, 2, 3, 4, 0, 1] 0
82 [0, 1, 2, 3, 4, 0, 2, 3, 4, 2, 3, 4] 0
83 [0, 1, 2, 3, 4, 0, 2, 3, 4, 2, 3] 0
84 [0, 1, 2, 3, 4, 0, 2, 3, 4, 2] 0
85 [0, 1, 2, 3, 4, 0, 2, 3, 4] 0
86 [0, 1, 2, 3, 4, 0, 2, 3, 2] 0
87 [0, 1, 2, 3, 4, 0, 2, 3] 0
88 [0, 1, 2, 3, 4, 0, 2] 0
89 [0, 1, 2, 3, 4, 0, 3, 4] 0
90 [0, 1, 2, 3, 4, 0, 3] 0
91 [0, 1, 2, 3, 4, 0] 0
92 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
93 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
94 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
95 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1] 0
96 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
97 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
98 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1] 0
99 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
100 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1] 0
101 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
102 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1] 0
103 [0, 1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4] 0
104 [0, 1, 2, 3, 4, 1, 2, 3, 4, 2, 3] 0
105 [0, 1, 2, 3, 4, 1, 2, 3, 4, 2] 0
106 [0, 1, 2, 3, 4, 1, 2, 3, 4] 0
107 [0, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
108 [0, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
109 [0, 1, 2, 3, 4, 1, 2, 3, 1] 0
110 [0, 1, 2, 3, 4, 1, 2, 3, 2] 0
111 [0, 1, 2, 3, 4, 1, 2, 3] 0
112 [0, 1, 2, 3, 4, 1, 2, 1] 0
113 [0, 1, 2, 3, 4, 1, 2] 0
114 [0, 1, 2, 3, 4, 1, 3, 4] 0
115 [0, 1, 2, 3, 4, 1, 3] 0
116 [0, 1, 2, 3, 4, 1] 0
117 [0, 1, 2, 3, 4, 2, 3, 4, 2, 3, 4] 0
118 [0, 1, 2, 3, 4, 2, 3, 4, 2, 3] 0
119 [0, 1, 2, 3, 4, 2, 3, 4, 2] 0
120 [0, 1, 2, 3, 4, 2, 3, 4] 0
121 [0, 1, 2, 3, 4, 2, 3, 2] 0
122 [0, 1, 2, 3, 4, 2, 3] 0
123 [0, 1, 2, 3, 4, 2] 0
124 [0, 1, 2, 3, 4, 3, 4] 0
125 [0, 1, 2, 3, 4, 3] 0
126 [0, 1, 2, 3, 4] 0
127 [0, 1, 2, 3, 0, 1, 2, 0, 1, 0] 0
128 [0, 1, 2, 3, 0, 1, 2, 0, 1] 0
129 [0, 1, 2, 3, 0, 1, 2, 0] 0
130 [0, 1, 2, 3, 0, 1, 2, 1] 0
131 [0, 1, 2, 3, 0, 1, 2] 0
132 [0, 1, 2, 3, 0, 1, 0] 0
133 [0, 1, 2, 3, 0, 1] 0
134 [0, 1, 2, 3, 0, 2] 0
135 [0, 1, 2, 3, 0] 0
136 [0, 1, 2, 3, 1, 2, 1] 0
137 [0, 1, 2, 3, 1, 2] 0
138 [0, 1, 2, 3, 1] 0
139 [0, 1, 2, 3, 2] 0
140 [0, 1, 2, 3] 0
141 [0, 1, 2, 4, 0, 1, 0] 0
142 [0, 1, 2, 4, 0, 1] 0
143 [0, 1, 2, 4, 0] 0
144 [0, 1, 2, 4, 1] 0
145 [0, 1, 2, 4] 0
146 [0, 1, 2, 0, 1, 0] 0
147 [0, 1, 2, 0, 1] 0
148 [0, 1, 2, 0] 0
149 [0, 1, 2, 1] 0
150 [0, 1, 2] 0
151 [0, 1, 3, 4, 0, 3, 4] 0
152 [0, 1, 3, 4, 0, 3] 0
153 [0, 1, 3, 4, 0] 0
154 [0, 1, 3, 4, 3, 4] 0
155 [0, 1, 3, 4, 3] 0
156 [0, 1, 3, 4] 0
157 [0, 1, 3, 0] 0
158 [0, 1, 3] 0
159 [0, 1, 4, 0] 0
160 [0, 1, 4] 0
161 [0, 1, 0] 0
162 [0, 1] 0
163 [0, 2, 3, 4, 2, 3, 4, 2, 3, 4] 0
164 [0, 2, 3, 4, 2, 3, 4, 2, 3] 0
165 [0, 2, 3, 4, 2, 3, 4, 2] 0
166 [0, 2, 3, 4, 2, 3, 4] 0
167 [0, 2, 3, 4, 2, 3, 2] 0
168 [0, 2, 3, 4, 2, 3] 0
169 [0, 2, 3, 4, 2] 0
170 [0, 2, 3, 4, 3, 4] 0
171 [0, 2, 3, 4, 3] 0
172 [0, 2, 3, 4] 0
173 [0, 2, 3, 2] 0
174 [0, 2, 3] 0
175 [0, 2, 4] 0
176 [0, 2] 0
177 [0, 3, 4, 3, 4] 0
178 [0, 3, 4, 3] 0
179 [0, 3, 4] 0
180 [0, 3] 0
181 [0, 4] 0
182 [0] 0
183 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
184 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
185 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
186 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1] 0
187 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
188 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
189 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1] 0
190 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
191 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1] 0
192 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
193 [1, 2, 3, 4, 1, 2, 3, 4, 1] 0
194 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4] 0
195 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3] 0
196 [1, 2, 3, 4, 1, 2, 3, 4, 2] 0
197 [1, 2, 3, 4, 1, 2, 3, 4] 0
198 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
199 [1, 2, 3, 4, 1, 2, 3, 1, 2] 0
200 [1, 2, 3, 4, 1, 2, 3, 1] 0
201 [1, 2, 3, 4, 1, 2, 3, 2] 0
202 [1, 2, 3, 4, 1, 2, 3] 0
203 [1, 2, 3, 4, 1, 2, 1] 0
204 [1, 2, 3, 4, 1, 2] 0
205 [1, 2, 3, 4, 1, 3, 4] 0
206 [1, 2, 3, 4, 1, 3] 0
207 [1, 2, 3, 4, 1] 0
208 [1, 2, 3, 4, 2, 3, 4, 2, 3, 4] 0
209 [1, 2, 3, 4, 2, 3, 4, 2, 3] 0
210 [1, 2, 3, 4, 2, 3, 4, 2] 0
211 [1, 2, 3, 4, 2, 3, 4] 0
212 [1, 2, 3, 4, 2, 3, 2] 0
213 [1, 2, 3, 4, 2, 3] 0
214 [1, 2, 3, 4, 2] 0
215 [1, 2, 3, 4, 3, 4] 0
216 [1, 2, 3, 4, 3] 0
217 [1, 2, 3, 4] 0
218 [1, 2, 3, 1, 2, 1] 0
219 [1, 2, 3, 1, 2] 0
220 [1, 2, 3, 1] 0
221 [1, 2, 3, 2] 0
222 [1, 2, 3] 0
223 [1, 2, 4, 1] 0
224 [1, 2, 4] 0
225 [1, 2, 1] 0
226 [1, 2] 0
227 [1, 3, 4, 3, 4] 0
228 [1, 3, 4, 3] 0
229 [1, 3, 4] 0
230 [1, 3] 0
231 [1, 4] 0
232 [1] 0
233 [2, 3, 4, 2, 3, 4, 2, 3, 4] 0
234 [2, 3, 4, 2, 3, 4, 2, 3] 0
235 [2, 3, 4, 2, 3, 4, 2] 0
236 [2, 3, 4, 2, 3, 4] 0
237 [2, 3, 4, 2, 3, 2] 0
238 [2, 3, 4, 2, 3] 0
239 [2, 3, 4, 2] 0
240 [2, 3, 4, 3, 4] 0
241 [2, 3, 4, 3] 0
242 [2, 3, 4] 0
243 [2, 3, 2] 0
244 [2, 3] 0
245 [2, 4] 0
246 [2] 0
247 [3, 4, 3, 4] 0
248 [3, 4, 3] 0
249 [3, 4] 0
250 [3] 0
251 [4] 0
252 [] 0
sage: v=[]
sage: A=CartanMatrix(['B',5])
sage: c=[0,1,2,3,4]
sage: p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(len(c))
....: ))
....: 
....: 
....: 
A 2-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 2 rays
sage: list(c_inf_prefix(c,i) for i in range(len(c)))
....: 
....: 
....: 
[[], [0], [0, 1], [0, 1, 2], [0, 1, 2, 3]]
sage: list(c_inf_prefix(c,i) for i in range(len(c)+1))
[[], [0], [0, 1], [0, 1, 2], [0, 1, 2, 3], [0, 1, 2, 3, 4]]
sage: p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(len(c)+
....: 1)))
A 2-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 2 rays
sage: p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(len(c)+
....: 2)))
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
sage: list(c_inf_prefix(c,i) for i in range(len(c)+2))
[[], [0], [0, 1], [0, 1, 2], [0, 1, 2, 3], [0, 1, 2, 3, 4], [0, 1, 2, 3, 4, 0]]
sage: A=CartanMatrix(['B',7])
sage: c=[0,1,2,3,4,5,6]
sage: p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(len(c)+
....: 2)))
A 0-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex
sage: c=[1,2,3,4,5,6,0]
sage: p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(len(c)+
....: 2)))
A 0-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex
sage: c=[2,3,4,5,6,0,1]
sage: p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(len(c)+
....: 2)))
A 0-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex
sage: c=[3,4,5,6,0,1,2]
sage: p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(len(c)+
....: 2)))
A 0-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex
sage: c=[4,5,6,0,1,2,3]
sage: p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(len(c)+
....: 2)))
A 0-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex
sage: c=[5,6,0,1,2,3,4]
sage: p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(len(c)+
....: 2)))
A 0-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex
sage: c=[6,0,1,2,3,4,5]
sage: p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(len(c)+
....: 2)))
A 0-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex
sage: c=[0,1,2,3,4,5,6]
sage: p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(len(c)+
....: 2)))
A 0-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex
sage: c=[0,5,2,6,4,1,3]
sage: p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(len(c)+
....: 2)))
A 0-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex
sage: c=[5,2,6,4,1,3,0]
sage: p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(len(c)+
....: 2)))
A 0-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex
sage: c=[2,6,4,1,3,0,5]
sage: p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(len(c)+
....: 2)))
A 0-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex
sage: c=[6,4,1,3,0,5,2]
sage: p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(len(c)+
....: 2)))
A 0-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex
sage: c=[4,1,3,0,5,2,6]
sage: p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(len(c)+
....: 2)))
A 0-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex
sage: c=[1,3,0,5,2,6,4]
sage: p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(len(c)+
....: 2)))
A 0-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex
sage: c=[3,0,5,2,6,4,1]
sage: p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(len(c)+
....: 2)))
A 0-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex
sage: c=[0,5,2,6,4,1,3]
sage: p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(len(c)+
....: 2)))
A 0-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex
sage: p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(1,len(c
....: )+2)))
A 0-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex
sage: list(c_inf_prefix(c,i) for i in range(1,len(c)+2))
[[0],
 [0, 5],
 [0, 5, 2],
 [0, 5, 2, 6],
 [0, 5, 2, 6, 4],
 [0, 5, 2, 6, 4, 1],
 [0, 5, 2, 6, 4, 1, 3],
 [0, 5, 2, 6, 4, 1, 3, 0]]
sage: reverse(c)
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
Cell In [70], line 1
----> 1 reverse(c)

NameError: name 'reverse' is not defined
sage: c.reverse()
sage: c)
  Cell In [72], line 1
    c)
     ^
SyntaxError: unmatched ')'

sage: c
[3, 1, 4, 6, 2, 5, 0]
sage: c.reverse()
sage: reversed(c)
<list_reverseiterator object at 0x14b512110>
sage: list(c_inf_prefix(reversed(c),i) for i in range(1,len(c)+2))
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In [76], line 1
----> 1 list(c_inf_prefix(reversed(c),i) for i in range(Integer(1),len(c)+Integer(2)))

Cell In [76], line 1, in <genexpr>(.0)
----> 1 list(c_inf_prefix(reversed(c),i) for i in range(Integer(1),len(c)+Integer(2)))

Cell In [24], line 202, in c_inf_prefix(c, i)
    201 def c_inf_prefix(c,i):
--> 202 	return list(c[i%len(c)] for i in range(i))

Cell In [24], line 202, in <genexpr>(.0)
    201 def c_inf_prefix(c,i):
--> 202 	return list(c[i%len(c)] for i in range(i))

TypeError: object of type 'list_reverseiterator' has no len()
sage: c
[0, 5, 2, 6, 4, 1, 3]
sage: len(c)
7
sage: list(c_inf_prefix(list(reversed(c)),i) for i in range(1,len(c)+2))
[[3],
 [3, 1],
 [3, 1, 4],
 [3, 1, 4, 6],
 [3, 1, 4, 6, 2],
 [3, 1, 4, 6, 2, 5],
 [3, 1, 4, 6, 2, 5, 0],
 [3, 1, 4, 6, 2, 5, 0, 3]]
sage: p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(list(reversed(c)),i) for i
....: in range(1,len(c)+2)))
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 135 vertices
sage: p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(1,len(c
....: )+2)))
A 0-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex
sage: list(c_inf_prefix(c,i) for i in range(1,len(c)+2))
[[0],
 [0, 5],
 [0, 5, 2],
 [0, 5, 2, 6],
 [0, 5, 2, 6, 4],
 [0, 5, 2, 6, 4, 1],
 [0, 5, 2, 6, 4, 1, 3],
 [0, 5, 2, 6, 4, 1, 3, 0]]
sage: c
[0, 5, 2, 6, 4, 1, 3]
sage: v
[]
sage: v=[0];p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(1
....: ,len(c)+2)))
A 0-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex
sage: v=[];p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(0,
....: len(c)+2)))
A 0-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex
sage: v=[];p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(0,
....: len(c)+1)))
A 0-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex
sage: v=[];p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(le
....: n(c)+1)))
A 0-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex
sage: v=[];p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(le
....: n(c))))
A 1-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex and 1 ray
sage: v=[];p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(le
....: n(c)+1)))
A 0-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex
sage: list(c_inf_prefix(c,i) for i in range(len(c)+1))
[[],
 [0],
 [0, 5],
 [0, 5, 2],
 [0, 5, 2, 6],
 [0, 5, 2, 6, 4],
 [0, 5, 2, 6, 4, 1],
 [0, 5, 2, 6, 4, 1, 3]]
sage: v=[0];p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(l
....: en(c)+1)))
A 0-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex
sage: v=[0];p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(l
....: en(c))))
A 1-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex and 1 ray
sage: v=[0];p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(l
....: en(c)+1)))
A 0-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex
sage: c=
  Cell In [95], line 1
    c=
      ^
SyntaxError: invalid syntax

sage: c=[0,5,2,6,4,1,3]
sage: v=[];p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(le
....: n(c)+1)))
A 0-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex
sage: c=[5,2,6,4,1,3,0]
sage: v=[];p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(le
....: n(c)+1)))
A 0-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex
sage: c=[2,6,4,1,3,0,5]
sage: c=[6,4,1,3,0,5,2]
sage: c=[2,6,4,1,3,0,5]
sage: v=[];p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(le
....: n(c)+1)))
A 0-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex
sage: c=[6,4,1,3,0,5,2]
sage: v=[];p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(le
....: n(c)+1)))
A 0-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex
sage: c=[4,1,3,0,5,2,6]
sage: v=[];p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(le
....: n(c)+1)))
A 0-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex
sage: c=[1,3,0,5,2,6,4]
sage: v=[];p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(le
....: n(c)+1)))
A 0-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex
sage: v=[6];p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(l
....: en(c)+1)))
A 0-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex
sage: v=[5];p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(l
....: en(c)+1)))
A 0-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex
sage: c
[1, 3, 0, 5, 2, 6, 4]
sage: v=[1,3];p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range
....: (len(c)+1)))
A 0-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex
sage: for v in sortables(A,c): =[1,3];p_lambda_int(B(A,c),lam(A,v),list(c_inf_pr
....: efix(c,i) for i in range(len(c)+1)))
  Cell In [114], line 1
    for v in sortables(A,c): =[Integer(1),Integer(3)];p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(len(c)+Integer(1))))
                             ^
SyntaxError: invalid syntax

sage: for v in sortables(A,c): p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,
....: i) for i in range(len(c)+1)))
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 66 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 112 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 106 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 167 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 104 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 161 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 126 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 191 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 176 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 199 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 84 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 111 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 137 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 166 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 148 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 174 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 174 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 200 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 225 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 252 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 123 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 181 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 234 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 181 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 266 vertices
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [115], line 1
----> 1 for v in sortables(A,c): p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(len(c)+Integer(1))))

Cell In [24], line 127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_faster(B, la, seqs[Integer(0)])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_faster(B, la, s))
    128     if P.dimension()==Integer(0):
    129         break

Cell In [24], line 159, in p_lambda_faster(B, la, seq)
    155         P=Ep*Pp
    156     else:
    157         #print("Pp:   ",Pp,Pp.vertices(),Pp.rays(),Pp.lines(),"\n")
    158         #print("Pm:   ",Pm,Pm.vertices(),Pm.rays(),Pm.lines(),"\n\n")
--> 159         P=(Ep*Pp).convex_hull(Em*Pm)
    160     B.mutate(k)
    161 return P

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1312, in Polyhedron_base5.convex_hull(self, other)
   1310 hull_rays = self.rays() + other.rays()
   1311 hull_lines = self.lines() + other.lines()
-> 1312 return self.parent().element_class(self.parent(), [hull_vertices, hull_rays, hull_lines], None)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:174, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    171     lines = tuple(lines)
    173 if vertices or rays or lines:
--> 174     self._init_from_Vrepresentation(vertices, rays, lines, **kwds)
    175 else:
    176     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:99, in Polyhedron_ppl._init_from_Vrepresentation(self, vertices, rays, lines, minimize, verbose)
     72 def _init_from_Vrepresentation(self, vertices, rays, lines, minimize=True, verbose=False):
     73     """
     74     Construct polyhedron from V-representation data.
     75 
   (...)
     97         sage: Polyhedron_ppl._init_from_Vrepresentation(p, [], [], [])
     98     """
---> 99     gs = self._convert_generators_to_ppl(vertices, rays, lines)
    100     if gs.empty():
    101         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'empty')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:473, in Polyhedron_ppl._convert_generators_to_ppl(vertices, rays, lines)
    471     vertices = []
    472 for v in vertices:
--> 473     gs.insert(Polyhedron_ppl._convert_generator_to_ppl(v, VERTEX))
    474 if rays is None:
    475     rays = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:442, in Polyhedron_ppl._convert_generator_to_ppl(v, typ)
    440 d = LCM_list([denominator(v_i) for v_i in v])
    441 if d.is_one():
--> 442     return ob(Linear_Expression(v, 0))
    443 else:
    444     dv = [ d*v_i for v_i in v ]

File ppl/linear_algebra.pyx:653, in ppl.linear_algebra.Linear_Expression.__init__()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/representation.py:81, in PolyhedronRepresentation.__getitem__(self, i)
     69     """
     70     Return the length of the representation data.
     71 
   (...)
     77         3
     78     """
     79     return self._vector.degree()
---> 81 def __getitem__(self, i):
     82     """
     83     Supports indexing.
     84 
   (...)
     90         2
     91     """
     92     return self._vector[i]

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: for v in sortables(A,c): p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,
....: i) for i in range(min(len(c),len(v))+1)))
....: 
....: 
....: 
....: 
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 66 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 112 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 106 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 167 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 104 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 161 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 126 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 191 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 176 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 199 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 84 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 111 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 137 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 166 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 148 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 174 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 174 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 200 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 225 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 252 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 123 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 181 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 234 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 181 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 266 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 258 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 132 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 201 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 189 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 271 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 275 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 201 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 211 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 247 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 182 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 272 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 262 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 161 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 216 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 195 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 269 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 205 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 281 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 270 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 290 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 244 vertices
A 6-dimensional polyhedron in QQ^7 defined as the convex hull of 269 vertices
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [116], line 1
----> 1 for v in sortables(A,c): p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(min(len(c),len(v))+Integer(1))))

Cell In [24], line 127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_faster(B, la, seqs[Integer(0)])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_faster(B, la, s))
    128     if P.dimension()==Integer(0):
    129         break

Cell In [24], line 141, in p_lambda_faster(B, la, seq)
    139     B.mutate(k)
    140 B, la  = B[:,:-Integer(1)], B[:,-Integer(1)] 
--> 141 P = Polyhedron(rays=B.columns(),base_ring=QQ).translation(la)
    142 #print("P:   ",P,P.vertices(),P.rays(),P.lines(),"\n")
    143 for k in reversed(seq):

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/constructor.py:768, in Polyhedron(vertices, rays, lines, ieqs, eqns, ambient_dim, base_ring, minimize, verbose, backend, mutable)
    766 if got_Vrep:
    767     Vrep = [vertices, rays, lines]
--> 768 return parent(Vrep, Hrep, convert=convert, verbose=verbose, mutable=mutable)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/parent.pyx:903, in sage.structure.parent.Parent.__call__ (build/cythonized/sage/structure/parent.c:12685)()
    901         return mor._call_(x)
    902     else:
--> 903         return mor._call_with_args(x, args, kwds)
    904 
    905 raise TypeError(_LazyString("No conversion defined from %s to %s", (R, self), {}))

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:177, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_with_args (build/cythonized/sage/structure/coerce_maps.c:7430)()
    175             return C._element_constructor(x, *args)
    176         else:
--> 177             return C._element_constructor(x, *args, **kwds)
    178 except Exception:
    179     if print_warnings:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:695, in Polyhedra_base._element_constructor_(self, *args, **kwds)
    693     if convert and Vrep:
    694         Vrep = [convert_base_ring(_) for _ in Vrep]
--> 695     return self.element_class(self, Vrep, Hrep, **kwds)
    696 if nargs == 1 and is_Polyhedron(args[0]):
    697     copy = kwds.pop('copy', args[0].parent() is not self)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:174, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    171     lines = tuple(lines)
    173 if vertices or rays or lines:
--> 174     self._init_from_Vrepresentation(vertices, rays, lines, **kwds)
    175 else:
    176     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:99, in Polyhedron_ppl._init_from_Vrepresentation(self, vertices, rays, lines, minimize, verbose)
     72 def _init_from_Vrepresentation(self, vertices, rays, lines, minimize=True, verbose=False):
     73     """
     74     Construct polyhedron from V-representation data.
     75 
   (...)
     97         sage: Polyhedron_ppl._init_from_Vrepresentation(p, [], [], [])
     98     """
---> 99     gs = self._convert_generators_to_ppl(vertices, rays, lines)
    100     if gs.empty():
    101         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'empty')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:477, in Polyhedron_ppl._convert_generators_to_ppl(vertices, rays, lines)
    475     rays = []
    476 for r in rays:
--> 477     gs.insert(Polyhedron_ppl._convert_generator_to_ppl(r, RAY))
    478 if lines is None:
    479     lines = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:442, in Polyhedron_ppl._convert_generator_to_ppl(v, typ)
    440 d = LCM_list([denominator(v_i) for v_i in v])
    441 if d.is_one():
--> 442     return ob(Linear_Expression(v, 0))
    443 else:
    444     dv = [ d*v_i for v_i in v ]

File ppl/linear_algebra.pyx:654, in ppl.linear_algebra.Linear_Expression.__init__()

File ppl/linear_algebra.pyx:49, in ppl.linear_algebra.PPL_Coefficient_from_pyobject()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:1107, in sage.structure.element.Element.__richcmp__ (build/cythonized/sage/structure/element.c:18121)()
   1105         return (<Element>self)._richcmp_(other, op)
   1106     else:
-> 1107         return coercion_model.richcmp(self, other, op)
   1108 
   1109 cpdef _richcmp_(left, right, int op) noexcept:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:2021, in sage.structure.coerce.CoercionModel.richcmp (build/cythonized/sage/structure/coerce.c:26173)()
   2019 # Coerce to a common parent
   2020 try:
-> 2021     x, y = self.canonical_coercion(x, y)
   2022 except (TypeError, NotImplementedError):
   2023     pass

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1422, in sage.structure.coerce.CoercionModel.canonical_coercion (build/cythonized/sage/structure/coerce.c:18956)()
   1420             self._record_exception()
   1421 
-> 1422     raise TypeError("no common canonical parent for objects with parents: '%s' and '%s'"%(xp, yp))
   1423 
   1424 cpdef coercion_maps(self, R, S) noexcept:

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: for v in sortables(A,c): p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,
....: i) for i in range(max(len(c),len(v))+1)))

^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [117], line 1
----> 1 for v in sortables(A,c): p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(max(len(c),len(v))+Integer(1))))

Cell In [24], line 127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_faster(B, la, seqs[Integer(0)])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_faster(B, la, s))
    128     if P.dimension()==Integer(0):
    129         break

Cell In [24], line 159, in p_lambda_faster(B, la, seq)
    155         P=Ep*Pp
    156     else:
    157         #print("Pp:   ",Pp,Pp.vertices(),Pp.rays(),Pp.lines(),"\n")
    158         #print("Pm:   ",Pm,Pm.vertices(),Pm.rays(),Pm.lines(),"\n\n")
--> 159         P=(Ep*Pp).convex_hull(Em*Pm)
    160     B.mutate(k)
    161 return P

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1312, in Polyhedron_base5.convex_hull(self, other)
   1310 hull_rays = self.rays() + other.rays()
   1311 hull_lines = self.lines() + other.lines()
-> 1312 return self.parent().element_class(self.parent(), [hull_vertices, hull_rays, hull_lines], None)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:70, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
---> 70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:189, in Polyhedron_ppl.set_immutable(self)
    187 if not hasattr(self, '_Vrepresentation'):
    188     try:
--> 189         self._init_Vrepresentation_from_ppl(True)
    190     except TypeError as e:
    191         # Apparently the polyhedron is (no longer) integral.
    192         self._clear_cache()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:300, in Polyhedron_ppl._init_Vrepresentation_from_ppl(self, minimize)
    298     raise TypeError("Vrepresentation of mutable polyhedra cannot be recomputed")
    299 self._Vrepresentation = []
--> 300 gs = self._ppl_polyhedron.minimized_generators()
    301 parent = self.parent()
    302 for g in gs:

File ppl/polyhedron.pyx:340, in ppl.polyhedron.Polyhedron.minimized_generators()

KeyboardInterrupt: 
sage: A=CartanMatrix(['B',7])
sage: c=[1,3,0,5,2,6,4]
sage: v=[];p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(le
....: n(c)+1)))
A 0-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex
sage: v=[1];p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(l
....: en(c)+1)))
A 0-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex
sage: v=[];p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(le
....: n(c)+1)))
A 0-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex
sage: list(c_inf_prefix(c,i) for i in range(len(c)+1))
[[],
 [1],
 [1, 3],
 [1, 3, 0],
 [1, 3, 0, 5],
 [1, 3, 0, 5, 2],
 [1, 3, 0, 5, 2, 6],
 [1, 3, 0, 5, 2, 6, 4]]
sage: v=[];p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(1,
....: len(c)+2)))
A 0-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex
sage: list(c_inf_prefix(c,i) for i in range(1,len(c)+2))
[[1],
 [1, 3],
 [1, 3, 0],
 [1, 3, 0, 5],
 [1, 3, 0, 5, 2],
 [1, 3, 0, 5, 2, 6],
 [1, 3, 0, 5, 2, 6, 4],
 [1, 3, 0, 5, 2, 6, 4, 1]]
sage: c
[1, 3, 0, 5, 2, 6, 4]
sage: v=[];p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(1,
....: len(c)+1)))
A 1-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex and 1 ray
sage: v=[];p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(1,
....: len(c)+2)))
A 0-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex
sage: c
[1, 3, 0, 5, 2, 6, 4]
sage: v=[3];p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(2
....: ,len(c)+3)))
A 0-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex
sage: v=[];p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(2,
....: len(c)+3)))
A 0-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex
sage: v=[];p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(3,
....: len(c)+4)))
A 1-dimensional polyhedron in QQ^7 defined as the convex hull of 2 vertices
sage: c[1:]
[3, 0, 5, 2, 6, 4]
sage: c
[1, 3, 0, 5, 2, 6, 4]
sage: c[1:]+c[0]
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In [135], line 1
----> 1 c[Integer(1):]+c[Integer(0)]

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/rings/integer.pyx:1764, in sage.rings.integer.Integer.__add__ (build/cythonized/sage/rings/integer.c:21739)()
   1762         return y
   1763 
-> 1764     return coercion_model.bin_op(left, right, operator.add)
   1765 
   1766 cpdef _add_(self, right) noexcept:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1276, in sage.structure.coerce.CoercionModel.bin_op (build/cythonized/sage/structure/coerce.c:16830)()
   1274     # We should really include the underlying error.
   1275     # This causes so much headache.
-> 1276     raise bin_op_exception(op, x, y)
   1277 
   1278 cpdef canonical_coercion(self, x, y) noexcept:

TypeError: unsupported operand parent(s) for +: '<class 'list'>' and 'Integer Ring'
sage: c[1:]+[c[0]]
[3, 0, 5, 2, 6, 4, 1]
sage: c
[1, 3, 0, 5, 2, 6, 4]
sage: 15//4
3
sage: 16//4
4
sage: N=16;M=4; (N//M)*M+N%M
16
sage: N=15;M=4; (N//M)*M+N%M
15
sage: N=14;M=4; (N//M)*M+N%M
14
sage: N=14;M=3; (N//M)*M+N%M
14
sage: def prefix_start_index(c,v):
....:     if v=[]:
....:         return 1
....:     elif v[0]=c[0]:
....:         return prefix_start_index(c[1:]+[c[0]],v[1:])+1
....:     else:
....:         p=prefix_start_index(c[1:],v)
....:         return p//(len(c)-1)*len(c)+p%(len(c)-1)
....: 
  Cell In [144], line 2
    if v=[]:
       ^
SyntaxError: invalid syntax. Maybe you meant '==' or ':=' instead of '='?

sage: def prefix_start_index(c,v):
....:     if v==[]:
....:         return 1
....:     elif v[0]=c[0]:
....:         return prefix_start_index(c[1:]+[c[0]],v[1:])+1
....:     else:
....:         p=prefix_start_index(c[1:],v)
....:         return p//(len(c)-1)*len(c)+p%(len(c)-1)
....: 
  Cell In [145], line 4
    elif v[Integer(0)]=c[Integer(0)]:
         ^
SyntaxError: cannot assign to subscript here. Maybe you meant '==' instead of '='?

sage: def prefix_start_index(c,v):
....:     if v==[]:
....:         return 1
....:     elif v[0]==c[0]:
....:         return prefix_start_index(c[1:]+[c[0]],v[1:])+1
....:     else:
....:         p=prefix_start_index(c[1:],v)
....:         return p//(len(c)-1)*len(c)+p%(len(c)-1)
....: 
sage: A=CartanMatrix(['B',3])
sage: c=[2,0,1]
sage: for v in sortables(A,c):
....:     print(prefix_start_index(c,v),v)
....: 
10 [2, 0, 1, 2, 0, 1, 2, 0, 1]
9 [2, 0, 1, 2, 0, 1, 2, 0]
8 [2, 0, 1, 2, 0, 1, 2]
9 [2, 0, 1, 2, 0, 1, 0]
7 [2, 0, 1, 2, 0, 1]
6 [2, 0, 1, 2, 0]
7 [2, 0, 1, 2, 1]
5 [2, 0, 1, 2]
6 [2, 0, 1, 0]
4 [2, 0, 1]
3 [2, 0]
7 [2, 1, 2, 1]
5 [2, 1, 2]
4 [2, 1]
2 [2]
6 [0, 1, 0]
4 [0, 1]
3 [0]
6 [1]
1 []
sage: for v in sortables(A,c):
....:     print(prefix_start_index(c,v),v)
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,v)))
....: 
10 [2, 0, 1, 2, 0, 1, 2, 0, 1]
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In [150], line 3
      1 for v in sortables(A,c):
      2     print(prefix_start_index(c,v),v)
----> 3     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,v)))

Cell In [24], line 202, in c_inf_prefix(c, i)
    201 def c_inf_prefix(c,i):
--> 202 	return list(c[i%len(c)] for i in range(i))

TypeError: 'list' object cannot be interpreted as an integer
sage: for v in sortables(A,c):
....:     print(prefix_start_index(c,v),v)
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(p
....: refix_start_index(c,v)+1,prefix_start_index(c,v)+len(c)+2)))
....: 
10 [2, 0, 1, 2, 0, 1, 2, 0, 1]
9 [2, 0, 1, 2, 0, 1, 2, 0]
8 [2, 0, 1, 2, 0, 1, 2]
9 [2, 0, 1, 2, 0, 1, 0]
7 [2, 0, 1, 2, 0, 1]
6 [2, 0, 1, 2, 0]
7 [2, 0, 1, 2, 1]
5 [2, 0, 1, 2]
6 [2, 0, 1, 0]
4 [2, 0, 1]
3 [2, 0]
7 [2, 1, 2, 1]
5 [2, 1, 2]
4 [2, 1]
2 [2]
6 [0, 1, 0]
4 [0, 1]
3 [0]
6 [1]
1 []
sage: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(p
....: refix_start_index(c,v)+1,prefix_start_index(c,v)+len(c)+2)))
....:     print(prefix_start_index(c,v),v,P)
....: 
10 [2, 0, 1, 2, 0, 1, 2, 0, 1] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
9 [2, 0, 1, 2, 0, 1, 2, 0] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray
8 [2, 0, 1, 2, 0, 1, 2] A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices
9 [2, 0, 1, 2, 0, 1, 0] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray
7 [2, 0, 1, 2, 0, 1] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
6 [2, 0, 1, 2, 0] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray
7 [2, 0, 1, 2, 1] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices
5 [2, 0, 1, 2] A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices
6 [2, 0, 1, 0] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 1 ray
4 [2, 0, 1] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
3 [2, 0] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray
7 [2, 1, 2, 1] A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices
5 [2, 1, 2] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices
4 [2, 1] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices
2 [2] A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices
6 [0, 1, 0] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 1 ray
4 [0, 1] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 4 vertices
3 [0] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 1 ray
6 [1] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 4 vertices and 1 ray
1 [] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(p
....: refix_start_index(c,v),prefix_start_index(c,v)+len(c)+1)))
....:     print(prefix_start_index(c,v),v,P)
....: 
10 [2, 0, 1, 2, 0, 1, 2, 0, 1] A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray
9 [2, 0, 1, 2, 0, 1, 2, 0] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
8 [2, 0, 1, 2, 0, 1, 2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
9 [2, 0, 1, 2, 0, 1, 0] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices
7 [2, 0, 1, 2, 0, 1] A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray
6 [2, 0, 1, 2, 0] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
7 [2, 0, 1, 2, 1] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray
5 [2, 0, 1, 2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
6 [2, 0, 1, 0] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices
4 [2, 0, 1] A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray
3 [2, 0] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
7 [2, 1, 2, 1] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 1 ray
5 [2, 1, 2] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 4 vertices
4 [2, 1] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray
2 [2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
6 [0, 1, 0] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 4 vertices
4 [0, 1] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 1 ray
3 [0] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices
6 [1] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 5 vertices
1 [] A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray
sage: v=[];p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(3,
....: len(c)+4)))
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 4 vertices
sage: v=[];p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(1,
....: len(c)+2)))
A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray
sage: A
[ 2 -1  0]
[-1  2 -1]
[ 0 -2  2]
sage: c
[2, 0, 1]
sage: B(A,c)
[ 0  1  0]
[-1  0 -1]
[ 0  2  0]
sage: v=[];p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(le
....: n(c)+1)))
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: def prefix_start_index(c,v):
....:     if v==[]:
....:         return 0
....:     elif v[0]==c[0]:
....:         return prefix_start_index(c[1:]+[c[0]],v[1:])+1
....:     else:
....:         p=prefix_start_index(c[1:],v)
....:         return p//(len(c)-1)*len(c)+p%(len(c)-1)
....: 
sage: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(p
....: refix_start_index(c,v),prefix_start_index(c,v)+len(c)+1)))
....:     print(prefix_start_index(c,v),v,P)
....: 
9 [2, 0, 1, 2, 0, 1, 2, 0, 1] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
8 [2, 0, 1, 2, 0, 1, 2, 0] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
7 [2, 0, 1, 2, 0, 1, 2] A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray
7 [2, 0, 1, 2, 0, 1, 0] A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray
6 [2, 0, 1, 2, 0, 1] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
5 [2, 0, 1, 2, 0] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
5 [2, 0, 1, 2, 1] A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices
4 [2, 0, 1, 2] A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray
4 [2, 0, 1, 0] A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray
3 [2, 0, 1] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
2 [2, 0] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
5 [2, 1, 2, 1] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 5 vertices
4 [2, 1, 2] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 1 ray
2 [2, 1] A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices
1 [2] A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray
4 [0, 1, 0] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 1 ray
3 [0, 1] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 4 vertices
1 [0] A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray
3 [1] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 5 vertices
0 [] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: c
[2, 0, 1]
sage: sage: A=CartanMatrix(['A',7])
....: ....: c=[2,6,0,5,4,3,1]
....: 
sage: B(A,c)
[ 0  1  0  0  0  0  0]
[-1  0 -1  0  0  0  0]
[ 0  1  0  1  0  0  0]
[ 0  0 -1  0 -1  0  0]
[ 0  0  0  1  0 -1  0]
[ 0  0  0  0  1  0 -1]
[ 0  0  0  0  0  1  0]
sage: forall v in sortables(A,c):
....:     if len(v)>=28:
....:          print(v)
  Cell In [165], line 1
    forall v in sortables(A,c):
           ^
SyntaxError: invalid syntax

sage: for v in sortables(A,c):
....:     if len(v)>=28:
....:          print(v)
....: 
[2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 0, 5, 4, 3, 1, 2, 6, 5, 4, 3, 6, 5]
sage: A=CartanMatrix(['A',2])
sage: c=[0,1]
sage: p_lambda_int(B(A,c),lam(A,[]),[[],[0],[0,1]]).
  Cell In [169], line 1
    p_lambda_int(B(A,c),lam(A,[]),[[],[Integer(0)],[Integer(0),Integer(1)]]).
                                                                             ^
SyntaxError: invalid syntax

sage: p_lambda_int(B(A,c),lam(A,[]),[[],[0],[0,1]])
A 0-dimensional polyhedron in QQ^2 defined as the convex hull of 1 vertex
sage: p_lambda_int(B(A,c),lam(A,[1]),[[],[0],[0,1]])
A 0-dimensional polyhedron in QQ^2 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['A',3])
sage: c=[0,1,3]
sage: c=[0,1,2]
sage: p_lambda_int(B(A,c),lam(A,[]),[[],[0],[0,1],[0,1,2]])
A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray
sage: p_lambda_int(B(A,c),lam(A,[]),[[],[0],[0,1],[0,1,2],[0,1,2,3]])
---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
Cell In [176], line 1
----> 1 p_lambda_int(B(A,c),lam(A,[]),[[],[Integer(0)],[Integer(0),Integer(1)],[Integer(0),Integer(1),Integer(2)],[Integer(0),Integer(1),Integer(2),Integer(3)]])

Cell In [24], line 127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_faster(B, la, seqs[Integer(0)])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_faster(B, la, s))
    128     if P.dimension()==Integer(0):
    129         break

Cell In [24], line 139, in p_lambda_faster(B, la, seq)
    137 B = block_matrix([[B,matrix(la).transpose()]])
    138 for k in seq:
--> 139     B.mutate(k)
    140 B, la  = B[:,:-Integer(1)], B[:,-Integer(1)] 
    141 P = Polyhedron(rays=B.columns(),base_ring=QQ).translation(la)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/matrix0.pyx:3643, in sage.matrix.matrix0.Matrix.mutate (build/cythonized/sage/matrix/matrix0.c:33715)()
   3641 
   3642         if k < 0 or k >= self._nrows or k >= self._ncols:
-> 3643             raise IndexError("The mutation index is invalid")
   3644 
   3645         pairs = self.nonzero_positions()

IndexError: The mutation index is invalid
sage: p_lambda_int(B(A,c),lam(A,[]),[[],[0],[0,1],[0,1,2],[0,1,2,0]])
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: p_lambda_int(B(A,c),lam(A,[]),[[0],[0,1],[0,1,2],[0,1,2,0]])
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: p_lambda_int(B(A,c),lam(A,[]),[[0,1],[0,1,2],[0,1,2,0]])
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray
sage: p_lambda_int(B(A,c),lam(A,[]),[[0],[0,1],[0,1,2],[0,1,2,0]])
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: p_lambda_int(B(A,c),lam(A,[]),[[],[0],[0,1],[0,1,2],[0,1,2,0]])
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: p_lambda_int(B(A,c),lam(A,[]),[[],[0],[0,1],[0,1,2]])
A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray
sage: p_lambda_int(B(A,c),lam(A,[]),[[],[0],[0,1],[0,1,2],[0,1,2,0]])
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: p_lambda_int(B(A,c),lam(A,[]),[[0],[0,1],[0,1,2],[0,1,2,0]])
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
....:     elif v==[] or c[0]!=v[0]:  # The "induction on rank" case.
....:         out=K(c[1:],v)
....:     else:  # The "induction on length" case.  This is provably the right t
....: hing to do.
....:         for k in K(c[1:]+[c[0]],v[1:]):
....:             if k!=[] and k[0]==v[0]:
....:                 out=out+[k[1:]]
....:             else:
....:                 out=out+[[v[0]]+k]
....:     return out
....: 
....: # old
....: def Kbip(cplus,cminus,Coxnum):
....:     out = [cminus+cplus,cminus,[]]
....:     for i in range(Coxnum-1):
....:         if (i//2)*2==i:  #even
....:             out=out+[out[-1]+cplus]
....:         else:
....:             out=out+[out[-1]+cminus]
....:     return out
....: 
....: 
....: '''
....: 
'\n#This was just a test of how python works\ndef even(n):\n    for i in range(n):\n        if i==(i//2)*2:\n            yield(i)\n'
'\n# An old version (failed in B3):\ndef K(c,v):  # A set of sequences depending on a sortable element v, given by its c-sorting word\n    out = []\n    if c==[]:   # The terminal case (empty sequence for the rank-0 Coxeter group)\n        out=[[]]\n    elif v==[] or c[0]!=v[0]:  # The "induction on rank" case.\n        oldK=K(c[1:],v)\n        #print([c],oldK)\n        for k in oldK:\n            out=out+[[c[0]]+k]\n        out=oldK+out\n    else:  # The "induction on length" case.  This is provably the right thing to do.\n        for k in K(c[1:]+[c[0]],v[1:]):\n            if k!=[] and k[0]==v[0]:\n                out=out+[k[1:]]\n            else:\n                out=out+[[v[0]]+k]\n    return out\n\n# Another old version (also failed in B3)\ndef K(c,v):  # A set of sequences depending on a sortable element v, given by its c-sorting word\n    out = []\n    if c==[]:   \n        out=[[]]\n    elif v==[] or c[0]!=v[0]:\n        oldK=K(c[1:],v)\n        for k in oldK:\n            out=out+[k+[c[0]]]\n        out=oldK+out\n    else:\n        for k in K(c[1:]+[c[0]],v[1:]):\n            if k!=[] and k[0]==v[0]:\n                out=out+[k[1:]]\n            else:\n                out=out+[[v[0]]+k]\n    return out\n\n#Another\ndef K(c,v):  # A set of sequences depending on a sortable element v, given by its c-sorting word\n    out = []\n    if c==[]:   # The terminal case (empty sequence for the rank-0 Coxeter group)\n        out=[[]]\n    elif v==[] or c[0]!=v[0]:  # The "induction on rank" case.\n        for i in range(len(c)):\n            out=out+[c[0:i+1]]\n        out=K(c[1:],v)+out\n    else:  # The "induction on length" case.  This is provably the right thing to do.\n        for k in K(c[1:]+[c[0]],v[1:]):\n            if k!=[] and k[0]==v[0]:\n                out=out+[k[1:]]\n            else:\n                out=out+[[v[0]]+k]\n    return out\n\n\n\n# An experiment (a pretty dumb one... yields the list [v])\ndef K(c,v):  # A set of sequences depending on a sortable element v, given by its c-sorting word\n    out = []\n    if c==[]:   # The terminal case (empty sequence for the rank-0 Coxeter group)\n        out=[[]]\n    elif v==[] or c[0]!=v[0]:  # The "induction on rank" case.\n        out=K(c[1:],v)\n    else:  # The "induction on length" case.  This is provably the right thing to do.\n        for k in K(c[1:]+[c[0]],v[1:]):\n            if k!=[] and k[0]==v[0]:\n                out=out+[k[1:]]\n            else:\n                out=out+[[v[0]]+k]\n    return out\n\n# old\ndef Kbip(cplus,cminus,Coxnum):\n    out = [cminus+cplus,cminus,[]]\n    for i in range(Coxnum-1):\n        if (i//2)*2==i:  #even\n            out=out+[out[-1]+cplus]\n        else:\n            out=out+[out[-1]+cminus]\n    return out\n\n\n'
sage: %attach /Users/reading/git/affine_dominance/domination4.py
sage: A
[ 2 -1  0]
[-1  2 -1]
[ 0 -1  2]
sage: A=CartanMatrix(['C'5])
  Cell In [188], line 1
    A=CartanMatrix(['C'5])
                    ^
SyntaxError: invalid syntax. Perhaps you forgot a comma?

sage: A=CartanMatrix(['C',5])
sage: c=[0,1,2,3,4]
....: for v in sortables(A,c):
....:     if (v==[] or v[0]!=0):
....:         vinv=inv_sortable(A,c,v)
....:         P=p_lambda_int(B(A,c),lam(A,v),[v,inv])
....:         print(v,P.dimension())
....: 
....: 
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
Cell In [190], line 5
      3 if (v==[] or v[Integer(0)]!=Integer(0)):
      4     vinv=inv_sortable(A,c,v)
----> 5     P=p_lambda_int(B(A,c),lam(A,v),[v,inv])
      6     print(v,P.dimension())

NameError: name 'inv' is not defined
sage: c=[0,1,2,3,4]
....: for v in sortables(A,c):
....:     if (v==[] or v[0]!=0):
....:         vinv=inv_sortable(A,c,v)
....:         P=p_lambda_int(B(A,c),lam(A,v),[v,vinv])
....:         print(v,P.dimension())
....: 
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1] 2
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 3
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1] 0
[1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4] 0
[1, 2, 3, 4, 1, 2, 3, 4, 2, 3] 0
[1, 2, 3, 4, 1, 2, 3, 4, 2] 0
[1, 2, 3, 4, 1, 2, 3, 4] 0
[1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 2
[1, 2, 3, 4, 1, 2, 3, 1, 2] 3
[1, 2, 3, 4, 1, 2, 3, 1] 2
[1, 2, 3, 4, 1, 2, 3, 2] 0
[1, 2, 3, 4, 1, 2, 3] 0
[1, 2, 3, 4, 1, 2, 1] 3
[1, 2, 3, 4, 1, 2] 0
[1, 2, 3, 4, 1, 3, 4] 0
[1, 2, 3, 4, 1, 3] 0
[1, 2, 3, 4, 1] 0
[1, 2, 3, 4, 2, 3, 4, 2, 3, 4] 0
[1, 2, 3, 4, 2, 3, 4, 2, 3] 2
[1, 2, 3, 4, 2, 3, 4, 2] 3
[1, 2, 3, 4, 2, 3, 4] 4
[1, 2, 3, 4, 2, 3, 2] 3
[1, 2, 3, 4, 2, 3] 4
[1, 2, 3, 4, 2] 4
[1, 2, 3, 4, 3, 4] 0
[1, 2, 3, 4, 3] 2
[1, 2, 3, 4] 3
[1, 2, 3, 1, 2, 1] 3
[1, 2, 3, 1, 2] 0
[1, 2, 3, 1] 0
[1, 2, 3, 2] 4
[1, 2, 3] 3
[1, 2, 4, 1] 0
[1, 2, 4] 0
[1, 2, 1] 0
[1, 2] 2
[1, 3, 4, 3, 4] 0
[1, 3, 4, 3] 3
[1, 3, 4] 4
[1, 3] 4
[1, 4] 0
[1] 3
[2, 3, 4, 2, 3, 4, 2, 3, 4] 0
[2, 3, 4, 2, 3, 4, 2, 3] 0
[2, 3, 4, 2, 3, 4, 2] 0
[2, 3, 4, 2, 3, 4] 2
[2, 3, 4, 2, 3, 2] 0
[2, 3, 4, 2, 3] 0
[2, 3, 4, 2] 0
[2, 3, 4, 3, 4] 0
[2, 3, 4, 3] 0
[2, 3, 4] 0
[2, 3, 2] 2
[2, 3] 0
[2, 4] 0
[2] 0
[3, 4, 3, 4] 0
[3, 4, 3] 2
[3, 4] 3
[3] 3
[4] 0
[] 2
sage: c=[0,1,2,3,4]
....: for v in sortables(A,c):
....:     if (v==[] or v[0]!=0):
....:         vinv=inv_sortable(A,c[1:],v)
....:         P=p_lambda_int(B(A,c),lam(A,v),[v,vinv])
....:         print(v,P.dimension())
....: 
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 2
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 1
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 1
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1] 2
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 3
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2] 2
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1] 1
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 2
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1] 1
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 2
[1, 2, 3, 4, 1, 2, 3, 4, 1] 3
[1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4] 3
[1, 2, 3, 4, 1, 2, 3, 4, 2, 3] 3
[1, 2, 3, 4, 1, 2, 3, 4, 2] 2
[1, 2, 3, 4, 1, 2, 3, 4] 3
[1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 2
[1, 2, 3, 4, 1, 2, 3, 1, 2] 3
[1, 2, 3, 4, 1, 2, 3, 1] 3
[1, 2, 3, 4, 1, 2, 3, 2] 1
[1, 2, 3, 4, 1, 2, 3] 2
[1, 2, 3, 4, 1, 2, 1] 4
[1, 2, 3, 4, 1, 2] 3
[1, 2, 3, 4, 1, 3, 4] 2
[1, 2, 3, 4, 1, 3] 1
[1, 2, 3, 4, 1] 2
[1, 2, 3, 4, 2, 3, 4, 2, 3, 4] 1
[1, 2, 3, 4, 2, 3, 4, 2, 3] 2
[1, 2, 3, 4, 2, 3, 4, 2] 3
[1, 2, 3, 4, 2, 3, 4] 4
[1, 2, 3, 4, 2, 3, 2] 3
[1, 2, 3, 4, 2, 3] 4
[1, 2, 3, 4, 2] 4
[1, 2, 3, 4, 3, 4] 1
[1, 2, 3, 4, 3] 2
[1, 2, 3, 4] 3
[1, 2, 3, 1, 2, 1] 4
[1, 2, 3, 1, 2] 4
[1, 2, 3, 1] 3
[1, 2, 3, 2] 4
[1, 2, 3] 3
[1, 2, 4, 1] 3
[1, 2, 4] 2
[1, 2, 1] 3
[1, 2] 3
[1, 3, 4, 3, 4] 2
[1, 3, 4, 3] 3
[1, 3, 4] 4
[1, 3] 4
[1, 4] 3
[1] 4
[2, 3, 4, 2, 3, 4, 2, 3, 4] 3
[2, 3, 4, 2, 3, 4, 2, 3] 2
[2, 3, 4, 2, 3, 4, 2] 2
[2, 3, 4, 2, 3, 4] 3
[2, 3, 4, 2, 3, 2] 3
[2, 3, 4, 2, 3] 3
[2, 3, 4, 2] 4
[2, 3, 4, 3, 4] 4
[2, 3, 4, 3] 4
[2, 3, 4] 4
[2, 3, 2] 4
[2, 3] 4
[2, 4] 4
[2] 4
[3, 4, 3, 4] 3
[3, 4, 3] 3
[3, 4] 4
[3] 4
[4] 4
[] 4
sage: A=CartanMatrix(['A',4])
....: c=list(range(A.nrows()))
....: for v in parasortables(A,c):
....:     p_lambda_int(B(A,c),lam(A,v),[v,inv_sortable(A,c,v)])
....: 
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['A',4])
....: c=list(range(A.nrows()))
....: for v in sortables(A,c):
....:     p_lambda_int(B(A,c),lam(A,v),[v,inv_sortable(A,c,v)])
....: 
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['A',6])
....: c=list(range(A.nrows()))
....: for v in sortables(A,c):
....:     p_lambda_int(B(A,c),lam(A,v),[v,inv_sortable(A,c,v)])
....: 
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [195], line 4
      2 c=list(range(A.nrows()))
      3 for v in sortables(A,c):
----> 4     p_lambda_int(B(A,c),lam(A,v),[v,inv_sortable(A,c,v)])

File ~/git/affine_dominance/domination4.py:127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_faster(B, la, seqs[0])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_faster(B, la, s))
    128     if P.dimension()==0:
    129         break

File ~/git/affine_dominance/domination4.py:150, in p_lambda_faster(B, la, seq)
    147 Hm = Polyhedron(ieqs=[(0,)*(k+1)+(-1,)+(0,)*(m-k-1)])
    148 #print("Hp:   ",Hp,Hp.vertices(),Hp.rays(),Hp.lines(),"\n")
    149 #print("Hm:   ",Hm,Hm.vertices(),Hm.rays(),Hm.lines(),"\n\n")
--> 150 Pp = P.intersection(Hp)
    151 Pm = P.intersection(Hm)
    152 if Pp.dimension() < rk:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1371, in Polyhedron_base5.intersection(self, other)
   1369 parent = self.parent()
   1370 try:
-> 1371     intersection = parent.element_class(parent, None, [new_ieqs, new_eqns])
   1373     # Force calculation of the vertices.
   1374     _ = intersection.n_vertices()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:179, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    177 elif Hrep is not None:
    178     ieqs, eqns = Hrep
--> 179     self._init_from_Hrepresentation(ieqs, eqns, **kwds)
    180 else:
    181     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:129, in Polyhedron_ppl._init_from_Hrepresentation(self, ieqs, eqns, minimize, verbose)
    106 def _init_from_Hrepresentation(self, ieqs, eqns, minimize=True, verbose=False):
    107     """
    108     Construct polyhedron from H-representation data.
    109 
   (...)
    127         sage: Polyhedron_ppl._init_from_Hrepresentation(p, [], [])
    128     """
--> 129     cs = self._convert_constraints_to_ppl(ieqs, eqns)
    130     if cs.empty():
    131         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'universe')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:534, in Polyhedron_ppl._convert_constraints_to_ppl(ieqs, eqns)
    532     ieqs = []
    533 for ieq in ieqs:
--> 534     cs.insert(Polyhedron_ppl._convert_constraint_to_ppl(ieq, INEQUALITY))
    535 if eqns is None:
    536     eqns = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:509, in Polyhedron_ppl._convert_constraint_to_ppl(c, typ)
    507 A = dc[1:]
    508 if typ == INEQUALITY:
--> 509     return Linear_Expression(A, b) >= 0
    510 else:
    511     return Linear_Expression(A, b) == 0

File ppl/linear_algebra.pyx:654, in ppl.linear_algebra.Linear_Expression.__init__()

File ppl/linear_algebra.pyx:49, in ppl.linear_algebra.PPL_Coefficient_from_pyobject()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/rings/integer.pyx:914, in sage.rings.integer.Integer.__richcmp__ (build/cythonized/sage/rings/integer.c:16498)()
    912     c = mpz_cmp_d((<Integer>left).value, d)
    913 else:
--> 914     return coercion_model.richcmp(left, right, op)
    915 
    916 return rich_to_bool_sgn(op, c)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:2021, in sage.structure.coerce.CoercionModel.richcmp (build/cythonized/sage/structure/coerce.c:26173)()
   2019 # Coerce to a common parent
   2020 try:
-> 2021     x, y = self.canonical_coercion(x, y)
   2022 except (TypeError, NotImplementedError):
   2023     pass

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1422, in sage.structure.coerce.CoercionModel.canonical_coercion (build/cythonized/sage/structure/coerce.c:18956)()
   1420             self._record_exception()
   1421 
-> 1422     raise TypeError("no common canonical parent for objects with parents: '%s' and '%s'"%(xp, yp))
   1423 
   1424 cpdef coercion_maps(self, R, S) noexcept:

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: c=[0,1,2,3,4]
....: for v in sortables(A,c):
....:     if (v==[] or v[0]!=0):
....:         vinv=inv_sortable(A,c[1:],v)
....:         P=p_lambda_int(B(A,c),lam(A,v),[v,[c[0]]+vinv])
....:         print(v,P.dimension())
....: 
---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
Cell In [196], line 5
      3 if (v==[] or v[Integer(0)]!=Integer(0)):
      4     vinv=inv_sortable(A,c[Integer(1):],v)
----> 5     P=p_lambda_int(B(A,c),lam(A,v),[v,[c[Integer(0)]]+vinv])
      6     print(v,P.dimension())

File ~/git/affine_dominance/domination4.py:173, in B(A, c)
    171     out[i,i]=0
    172     for j in range(i+1,n):
--> 173         out[c[i],c[j]]=-A[c[i],c[j]]
    174         out[c[j],c[i]]=A[c[j],c[i]]
    175 return out

IndexError: list index out of range
sage: c=[0,1,2,3,4]
....: for v in sortables(A,c):
....:     if (v==[] or v[0]!=0):
....:         vinv=inv_sortable(A,c[1:],v)
....:         P=p_lambda_int(B(A,c),lam(A,v),[v,[c[0]]+vinv])
....:         print(v,P.dimension())
....: 
---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
Cell In [197], line 5
      3 if (v==[] or v[Integer(0)]!=Integer(0)):
      4     vinv=inv_sortable(A,c[Integer(1):],v)
----> 5     P=p_lambda_int(B(A,c),lam(A,v),[v,[c[Integer(0)]]+vinv])
      6     print(v,P.dimension())

File ~/git/affine_dominance/domination4.py:173, in B(A, c)
    171     out[i,i]=0
    172     for j in range(i+1,n):
--> 173         out[c[i],c[j]]=-A[c[i],c[j]]
    174         out[c[j],c[i]]=A[c[j],c[i]]
    175 return out

IndexError: list index out of range
sage: A=CartanMatrix(['C',5])
sage: c=[0,1,2,3,4]
....: for v in sortables(A,c):
....:     if (v==[] or v[0]!=0):
....:         vinv=inv_sortable(A,c[1:],v)
....:         P=p_lambda_int(B(A,c),lam(A,v),[v,[c[0]]+vinv])
....:         print(v,P.dimension())
....: 
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1] 2
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 3
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1] 0
[1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4] 0
[1, 2, 3, 4, 1, 2, 3, 4, 2, 3] 0
[1, 2, 3, 4, 1, 2, 3, 4, 2] 0
[1, 2, 3, 4, 1, 2, 3, 4] 0
[1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 2
[1, 2, 3, 4, 1, 2, 3, 1, 2] 3
[1, 2, 3, 4, 1, 2, 3, 1] 2
[1, 2, 3, 4, 1, 2, 3, 2] 0
[1, 2, 3, 4, 1, 2, 3] 0
[1, 2, 3, 4, 1, 2, 1] 3
[1, 2, 3, 4, 1, 2] 0
[1, 2, 3, 4, 1, 3, 4] 0
[1, 2, 3, 4, 1, 3] 0
[1, 2, 3, 4, 1] 0
[1, 2, 3, 4, 2, 3, 4, 2, 3, 4] 0
[1, 2, 3, 4, 2, 3, 4, 2, 3] 2
[1, 2, 3, 4, 2, 3, 4, 2] 3
[1, 2, 3, 4, 2, 3, 4] 4
[1, 2, 3, 4, 2, 3, 2] 3
[1, 2, 3, 4, 2, 3] 4
[1, 2, 3, 4, 2] 4
[1, 2, 3, 4, 3, 4] 0
[1, 2, 3, 4, 3] 2
[1, 2, 3, 4] 3
[1, 2, 3, 1, 2, 1] 3
[1, 2, 3, 1, 2] 0
[1, 2, 3, 1] 0
[1, 2, 3, 2] 4
[1, 2, 3] 3
[1, 2, 4, 1] 0
[1, 2, 4] 0
[1, 2, 1] 0
[1, 2] 2
[1, 3, 4, 3, 4] 0
[1, 3, 4, 3] 3
[1, 3, 4] 4
[1, 3] 4
[1, 4] 0
[1] 3
[2, 3, 4, 2, 3, 4, 2, 3, 4] 0
[2, 3, 4, 2, 3, 4, 2, 3] 0
[2, 3, 4, 2, 3, 4, 2] 0
[2, 3, 4, 2, 3, 4] 2
[2, 3, 4, 2, 3, 2] 0
[2, 3, 4, 2, 3] 0
[2, 3, 4, 2] 0
[2, 3, 4, 3, 4] 0
[2, 3, 4, 3] 0
[2, 3, 4] 0
[2, 3, 2] 2
[2, 3] 0
[2, 4] 0
[2] 0
[3, 4, 3, 4] 0
[3, 4, 3] 2
[3, 4] 3
[3] 3
[4] 0
[] 2
sage: c=[0,1,2,3,4]
....: for v in sortables(A,c):
....:     if (v==[] or v[0]!=0):
....:         vinv=inv_sortable(A,c[1:],v)
....:         P=p_lambda_int(B(A,c),lam(A,v),[v,vinv+[c[0]]])
....:         print(v,P.dimension())
....: 
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1] 2
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 3
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 1
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 1
[1, 2, 3, 4, 1, 2, 3, 4, 1] 2
[1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4] 0
[1, 2, 3, 4, 1, 2, 3, 4, 2, 3] 0
[1, 2, 3, 4, 1, 2, 3, 4, 2] 0
[1, 2, 3, 4, 1, 2, 3, 4] 2
[1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 2
[1, 2, 3, 4, 1, 2, 3, 1, 2] 3
[1, 2, 3, 4, 1, 2, 3, 1] 3
[1, 2, 3, 4, 1, 2, 3, 2] 0
[1, 2, 3, 4, 1, 2, 3] 1
[1, 2, 3, 4, 1, 2, 1] 4
[1, 2, 3, 4, 1, 2] 2
[1, 2, 3, 4, 1, 3, 4] 0
[1, 2, 3, 4, 1, 3] 0
[1, 2, 3, 4, 1] 1
[1, 2, 3, 4, 2, 3, 4, 2, 3, 4] 0
[1, 2, 3, 4, 2, 3, 4, 2, 3] 2
[1, 2, 3, 4, 2, 3, 4, 2] 3
[1, 2, 3, 4, 2, 3, 4] 4
[1, 2, 3, 4, 2, 3, 2] 3
[1, 2, 3, 4, 2, 3] 4
[1, 2, 3, 4, 2] 4
[1, 2, 3, 4, 3, 4] 0
[1, 2, 3, 4, 3] 2
[1, 2, 3, 4] 3
[1, 2, 3, 1, 2, 1] 4
[1, 2, 3, 1, 2] 3
[1, 2, 3, 1] 2
[1, 2, 3, 2] 4
[1, 2, 3] 3
[1, 2, 4, 1] 2
[1, 2, 4] 1
[1, 2, 1] 3
[1, 2] 3
[1, 3, 4, 3, 4] 1
[1, 3, 4, 3] 3
[1, 3, 4] 4
[1, 3] 4
[1, 4] 2
[1] 4
[2, 3, 4, 2, 3, 4, 2, 3, 4] 2
[2, 3, 4, 2, 3, 4, 2, 3] 1
[2, 3, 4, 2, 3, 4, 2] 1
[2, 3, 4, 2, 3, 4] 3
[2, 3, 4, 2, 3, 2] 2
[2, 3, 4, 2, 3] 2
[2, 3, 4, 2] 3
[2, 3, 4, 3, 4] 3
[2, 3, 4, 3] 3
[2, 3, 4] 3
[2, 3, 2] 4
[2, 3] 3
[2, 4] 3
[2] 4
[3, 4, 3, 4] 2
[3, 4, 3] 3
[3, 4] 4
[3] 4
[4] 3
[] 4
sage: c=[0,1,2,3,4]
....: for v in sortables(A,c):
....:     if (v==[] or v[0]!=0):
....:         vinv=inv_sortable(A,c[1:],v)
....:         P=p_lambda_int(B(A,c),lam(A,v),[[],[c[0]],v,vinv+[c[0]]])
....:         print(v,P.dimension())
....: 
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1] 2
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 2
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1] 1
[1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4] 0
[1, 2, 3, 4, 1, 2, 3, 4, 2, 3] 0
[1, 2, 3, 4, 1, 2, 3, 4, 2] 0
[1, 2, 3, 4, 1, 2, 3, 4] 1
[1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 2
[1, 2, 3, 4, 1, 2, 3, 1, 2] 3
[1, 2, 3, 4, 1, 2, 3, 1] 2
[1, 2, 3, 4, 1, 2, 3, 2] 0
[1, 2, 3, 4, 1, 2, 3] 0
[1, 2, 3, 4, 1, 2, 1] 4
[1, 2, 3, 4, 1, 2] 2
[1, 2, 3, 4, 1, 3, 4] 0
[1, 2, 3, 4, 1, 3] 0
[1, 2, 3, 4, 1] 0
[1, 2, 3, 4, 2, 3, 4, 2, 3, 4] 0
[1, 2, 3, 4, 2, 3, 4, 2, 3] 2
[1, 2, 3, 4, 2, 3, 4, 2] 3
[1, 2, 3, 4, 2, 3, 4] 4
[1, 2, 3, 4, 2, 3, 2] 3
[1, 2, 3, 4, 2, 3] 4
[1, 2, 3, 4, 2] 4
[1, 2, 3, 4, 3, 4] 0
[1, 2, 3, 4, 3] 2
[1, 2, 3, 4] 3
[1, 2, 3, 1, 2, 1] 4
[1, 2, 3, 1, 2] 3
[1, 2, 3, 1] 2
[1, 2, 3, 2] 4
[1, 2, 3] 3
[1, 2, 4, 1] 0
[1, 2, 4] 0
[1, 2, 1] 2
[1, 2] 1
[1, 3, 4, 3, 4] 0
[1, 3, 4, 3] 2
[1, 3, 4] 3
[1, 3] 3
[1, 4] 0
[1] 2
[2, 3, 4, 2, 3, 4, 2, 3, 4] 0
[2, 3, 4, 2, 3, 4, 2, 3] 0
[2, 3, 4, 2, 3, 4, 2] 0
[2, 3, 4, 2, 3, 4] 1
[2, 3, 4, 2, 3, 2] 1
[2, 3, 4, 2, 3] 0
[2, 3, 4, 2] 2
[2, 3, 4, 3, 4] 1
[2, 3, 4, 3] 2
[2, 3, 4] 2
[2, 3, 2] 4
[2, 3] 3
[2, 4] 1
[2] 3
[3, 4, 3, 4] 0
[3, 4, 3] 0
[3, 4] 3
[3] 3
[4] 1
[] 2
sage: c=[0,1,2,3,4]
....: for v in sortables(A,c):
....:     if (v==[] or v[0]!=0):
....:         vinv=inv_sortable(A,c[1:],v)
....:         P=p_lambda_int(B(A,c),lam(A,v),[[],[c[0]],v,vinv])
....:         print(v,P.dimension())
....: 
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1] 1
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 2
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2] 1
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 1
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 1
[1, 2, 3, 4, 1, 2, 3, 4, 1] 3
[1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4] 1
[1, 2, 3, 4, 1, 2, 3, 4, 2, 3] 2
[1, 2, 3, 4, 1, 2, 3, 4, 2] 1
[1, 2, 3, 4, 1, 2, 3, 4] 3
[1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 1
[1, 2, 3, 4, 1, 2, 3, 1, 2] 3
[1, 2, 3, 4, 1, 2, 3, 1] 2
[1, 2, 3, 4, 1, 2, 3, 2] 0
[1, 2, 3, 4, 1, 2, 3] 1
[1, 2, 3, 4, 1, 2, 1] 4
[1, 2, 3, 4, 1, 2] 3
[1, 2, 3, 4, 1, 3, 4] 0
[1, 2, 3, 4, 1, 3] 0
[1, 2, 3, 4, 1] 1
[1, 2, 3, 4, 2, 3, 4, 2, 3, 4] 0
[1, 2, 3, 4, 2, 3, 4, 2, 3] 0
[1, 2, 3, 4, 2, 3, 4, 2] 2
[1, 2, 3, 4, 2, 3, 4] 4
[1, 2, 3, 4, 2, 3, 2] 1
[1, 2, 3, 4, 2, 3] 4
[1, 2, 3, 4, 2] 4
[1, 2, 3, 4, 3, 4] 0
[1, 2, 3, 4, 3] 0
[1, 2, 3, 4] 3
[1, 2, 3, 1, 2, 1] 4
[1, 2, 3, 1, 2] 4
[1, 2, 3, 1] 3
[1, 2, 3, 2] 4
[1, 2, 3] 3
[1, 2, 4, 1] 2
[1, 2, 4] 0
[1, 2, 1] 3
[1, 2] 2
[1, 3, 4, 3, 4] 0
[1, 3, 4, 3] 1
[1, 3, 4] 3
[1, 3] 3
[1, 4] 0
[1] 3
[2, 3, 4, 2, 3, 4, 2, 3, 4] 1
[2, 3, 4, 2, 3, 4, 2, 3] 0
[2, 3, 4, 2, 3, 4, 2] 0
[2, 3, 4, 2, 3, 4] 2
[2, 3, 4, 2, 3, 2] 2
[2, 3, 4, 2, 3] 2
[2, 3, 4, 2] 4
[2, 3, 4, 3, 4] 2
[2, 3, 4, 3] 3
[2, 3, 4] 4
[2, 3, 2] 4
[2, 3] 4
[2, 4] 3
[2] 4
[3, 4, 3, 4] 1
[3, 4, 3] 0
[3, 4] 3
[3] 3
[4] 2
[] 3
sage: c=[0,1,2,3,4]
....: for v in sortables(A,c):
....:     if (v==[] or v[0]!=0):
....:         vinv=inv_sortable(A,c[1:],v)
....:         P=p_lambda_int(B(A,c),lam(A,v),[[],[c[0]]+v,vinv])
....:         print(v,P.dimension())
....: 
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 3
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2] 3
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1] 2
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1] 3
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1] 2
[1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4] 4
[1, 2, 3, 4, 1, 2, 3, 4, 2, 3] 4
[1, 2, 3, 4, 1, 2, 3, 4, 2] 4
[1, 2, 3, 4, 1, 2, 3, 4] 4
[1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 3
[1, 2, 3, 4, 1, 2, 3, 1, 2] 0
[1, 2, 3, 4, 1, 2, 3, 1] 0
[1, 2, 3, 4, 1, 2, 3, 2] 4
[1, 2, 3, 4, 1, 2, 3] 4
[1, 2, 3, 4, 1, 2, 1] 0
[1, 2, 3, 4, 1, 2] 3
[1, 2, 3, 4, 1, 3, 4] 4
[1, 2, 3, 4, 1, 3] 4
[1, 2, 3, 4, 1] 3
[1, 2, 3, 4, 2, 3, 4, 2, 3, 4] 2
[1, 2, 3, 4, 2, 3, 4, 2, 3] 0
[1, 2, 3, 4, 2, 3, 4, 2] 0
[1, 2, 3, 4, 2, 3, 4] 0
[1, 2, 3, 4, 2, 3, 2] 2
[1, 2, 3, 4, 2, 3] 0
[1, 2, 3, 4, 2] 0
[1, 2, 3, 4, 3, 4] 3
[1, 2, 3, 4, 3] 3
[1, 2, 3, 4] 2
[1, 2, 3, 1, 2, 1] 2
[1, 2, 3, 1, 2] 3
[1, 2, 3, 1] 3
[1, 2, 3, 2] 0
[1, 2, 3] 0
[1, 2, 4, 1] 4
[1, 2, 4] 2
[1, 2, 1] 4
[1, 2] 0
[1, 3, 4, 3, 4] 0
[1, 3, 4, 3] 0
[1, 3, 4] 0
[1, 3] 0
[1, 4] 0
[1] 0
[2, 3, 4, 2, 3, 4, 2, 3, 4] 3
[2, 3, 4, 2, 3, 4, 2, 3] 0
[2, 3, 4, 2, 3, 4, 2] 0
[2, 3, 4, 2, 3, 4] 0
[2, 3, 4, 2, 3, 2] 3
[2, 3, 4, 2, 3] 2
[2, 3, 4, 2] 3
[2, 3, 4, 3, 4] 4
[2, 3, 4, 3] 4
[2, 3, 4] 4
[2, 3, 2] 3
[2, 3] 4
[2, 4] 4
[2] 4
[3, 4, 3, 4] 2
[3, 4, 3] 0
[3, 4] 0
[3] 2
[4] 3
[] 3
sage: c=[0,1,2,3,4]
....: m=0
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(5
....: )))
....:     m=max(m,P.dimension())
....:     print(v,P.dimension())
....: 
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 0] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 1] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 0] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2, 3, 4] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2, 3] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 1, 2] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 1] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 1] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2, 3, 4] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2, 3] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 1] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 2] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 0] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2, 1] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 1] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 2] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3] 4
[0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0] 4
[0, 1, 2, 3, 4, 0, 1, 2, 0, 1] 4
[0, 1, 2, 3, 4, 0, 1, 2, 0] 4
[0, 1, 2, 3, 4, 0, 1, 2, 1] 4
[0, 1, 2, 3, 4, 0, 1, 2] 4
[0, 1, 2, 3, 4, 0, 1, 3, 4, 0] 4
[0, 1, 2, 3, 4, 0, 1, 3, 4] 4
[0, 1, 2, 3, 4, 0, 1, 3, 0] 4
[0, 1, 2, 3, 4, 0, 1, 3] 4
[0, 1, 2, 3, 4, 0, 1, 0] 4
[0, 1, 2, 3, 4, 0, 1] 4
[0, 1, 2, 3, 4, 0, 2, 3, 4, 2, 3, 4] 4
[0, 1, 2, 3, 4, 0, 2, 3, 4, 2, 3] 4
[0, 1, 2, 3, 4, 0, 2, 3, 4, 2] 4
[0, 1, 2, 3, 4, 0, 2, 3, 4] 4
[0, 1, 2, 3, 4, 0, 2, 3, 2] 4
[0, 1, 2, 3, 4, 0, 2, 3] 4
[0, 1, 2, 3, 4, 0, 2] 4
[0, 1, 2, 3, 4, 0, 3, 4] 4
[0, 1, 2, 3, 4, 0, 3] 4
[0, 1, 2, 3, 4, 0] 4
[0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 4
[0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 4
[0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 4
[0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1] 4
[0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 4
[0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2] 4
[0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1] 4
[0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 4
[0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1] 4
[0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 4
[0, 1, 2, 3, 4, 1, 2, 3, 4, 1] 4
[0, 1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4] 4
[0, 1, 2, 3, 4, 1, 2, 3, 4, 2, 3] 4
[0, 1, 2, 3, 4, 1, 2, 3, 4, 2] 4
[0, 1, 2, 3, 4, 1, 2, 3, 4] 4
[0, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 4
[0, 1, 2, 3, 4, 1, 2, 3, 1, 2] 4
[0, 1, 2, 3, 4, 1, 2, 3, 1] 4
[0, 1, 2, 3, 4, 1, 2, 3, 2] 4
[0, 1, 2, 3, 4, 1, 2, 3] 4
[0, 1, 2, 3, 4, 1, 2, 1] 4
[0, 1, 2, 3, 4, 1, 2] 4
[0, 1, 2, 3, 4, 1, 3, 4] 4
[0, 1, 2, 3, 4, 1, 3] 4
[0, 1, 2, 3, 4, 1] 4
[0, 1, 2, 3, 4, 2, 3, 4, 2, 3, 4] 4
[0, 1, 2, 3, 4, 2, 3, 4, 2, 3] 4
[0, 1, 2, 3, 4, 2, 3, 4, 2] 4
[0, 1, 2, 3, 4, 2, 3, 4] 4
[0, 1, 2, 3, 4, 2, 3, 2] 4
[0, 1, 2, 3, 4, 2, 3] 4
[0, 1, 2, 3, 4, 2] 4
[0, 1, 2, 3, 4, 3, 4] 4
[0, 1, 2, 3, 4, 3] 4
[0, 1, 2, 3, 4] 4
[0, 1, 2, 3, 0, 1, 2, 0, 1, 0] 4
[0, 1, 2, 3, 0, 1, 2, 0, 1] 4
[0, 1, 2, 3, 0, 1, 2, 0] 4
[0, 1, 2, 3, 0, 1, 2, 1] 4
[0, 1, 2, 3, 0, 1, 2] 4
[0, 1, 2, 3, 0, 1, 0] 4
[0, 1, 2, 3, 0, 1] 4
[0, 1, 2, 3, 0, 2] 4
[0, 1, 2, 3, 0] 4
[0, 1, 2, 3, 1, 2, 1] 4
[0, 1, 2, 3, 1, 2] 4
[0, 1, 2, 3, 1] 4
[0, 1, 2, 3, 2] 4
[0, 1, 2, 3] 4
[0, 1, 2, 4, 0, 1, 0] 3
[0, 1, 2, 4, 0, 1] 3
[0, 1, 2, 4, 0] 3
[0, 1, 2, 4, 1] 3
[0, 1, 2, 4] 3
[0, 1, 2, 0, 1, 0] 3
[0, 1, 2, 0, 1] 3
[0, 1, 2, 0] 3
[0, 1, 2, 1] 3
[0, 1, 2] 3
[0, 1, 3, 4, 0, 3, 4] 4
[0, 1, 3, 4, 0, 3] 4
[0, 1, 3, 4, 0] 4
[0, 1, 3, 4, 3, 4] 4
[0, 1, 3, 4, 3] 4
[0, 1, 3, 4] 4
[0, 1, 3, 0] 4
[0, 1, 3] 4
[0, 1, 4, 0] 3
[0, 1, 4] 3
[0, 1, 0] 3
[0, 1] 3
[0, 2, 3, 4, 2, 3, 4, 2, 3, 4] 3
[0, 2, 3, 4, 2, 3, 4, 2, 3] 3
[0, 2, 3, 4, 2, 3, 4, 2] 3
[0, 2, 3, 4, 2, 3, 4] 3
[0, 2, 3, 4, 2, 3, 2] 3
[0, 2, 3, 4, 2, 3] 3
[0, 2, 3, 4, 2] 3
[0, 2, 3, 4, 3, 4] 3
[0, 2, 3, 4, 3] 3
[0, 2, 3, 4] 3
[0, 2, 3, 2] 3
[0, 2, 3] 3
[0, 2, 4] 2
[0, 2] 2
[0, 3, 4, 3, 4] 3
[0, 3, 4, 3] 3
[0, 3, 4] 3
[0, 3] 3
[0, 4] 2
[0] 2
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 4
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 4
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 4
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1] 4
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 4
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2] 4
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1] 4
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 4
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1] 4
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 4
[1, 2, 3, 4, 1, 2, 3, 4, 1] 4
[1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4] 4
[1, 2, 3, 4, 1, 2, 3, 4, 2, 3] 4
[1, 2, 3, 4, 1, 2, 3, 4, 2] 4
[1, 2, 3, 4, 1, 2, 3, 4] 4
[1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 4
[1, 2, 3, 4, 1, 2, 3, 1, 2] 4
[1, 2, 3, 4, 1, 2, 3, 1] 4
[1, 2, 3, 4, 1, 2, 3, 2] 4
[1, 2, 3, 4, 1, 2, 3] 4
[1, 2, 3, 4, 1, 2, 1] 4
[1, 2, 3, 4, 1, 2] 4
[1, 2, 3, 4, 1, 3, 4] 4
[1, 2, 3, 4, 1, 3] 4
[1, 2, 3, 4, 1] 4
[1, 2, 3, 4, 2, 3, 4, 2, 3, 4] 4
[1, 2, 3, 4, 2, 3, 4, 2, 3] 4
[1, 2, 3, 4, 2, 3, 4, 2] 4
[1, 2, 3, 4, 2, 3, 4] 4
[1, 2, 3, 4, 2, 3, 2] 4
[1, 2, 3, 4, 2, 3] 4
[1, 2, 3, 4, 2] 4
[1, 2, 3, 4, 3, 4] 4
[1, 2, 3, 4, 3] 4
[1, 2, 3, 4] 4
[1, 2, 3, 1, 2, 1] 4
[1, 2, 3, 1, 2] 4
[1, 2, 3, 1] 4
[1, 2, 3, 2] 4
[1, 2, 3] 4
[1, 2, 4, 1] 3
[1, 2, 4] 3
[1, 2, 1] 3
[1, 2] 3
[1, 3, 4, 3, 4] 4
[1, 3, 4, 3] 4
[1, 3, 4] 4
[1, 3] 4
[1, 4] 3
[1] 3
[2, 3, 4, 2, 3, 4, 2, 3, 4] 3
[2, 3, 4, 2, 3, 4, 2, 3] 3
[2, 3, 4, 2, 3, 4, 2] 3
[2, 3, 4, 2, 3, 4] 3
[2, 3, 4, 2, 3, 2] 3
[2, 3, 4, 2, 3] 3
[2, 3, 4, 2] 3
[2, 3, 4, 3, 4] 3
[2, 3, 4, 3] 3
[2, 3, 4] 3
[2, 3, 2] 3
[2, 3] 3
[2, 4] 2
[2] 2
[3, 4, 3, 4] 3
[3, 4, 3] 3
[3, 4] 3
[3] 3
[4] 2
[] 2
sage: c=[0,1,2,3,4]
....: m=0
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(1
....: 5)))
....:     m=max(m,P.dimension())
....:     print(v,P.dimension())
....: print m
  Cell In [205], line 7
    print m
    ^
SyntaxError: Missing parentheses in call to 'print'. Did you mean print(...)?

sage: c=[0,1,2,3,4]
....: m=0
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(1
....: 5)))
....:     m=max(m,P.dimension())
....:     print(v,P.dimension())
....: print(m)

[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3] 4
^C---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:1066, in Polyhedra_base._make_Inequality(self, polyhedron, data)
   1065 try:
-> 1066     obj = self._Inequality_pool.pop()
   1067 except IndexError:

IndexError: pop from empty list

During handling of the above exception, another exception occurred:

KeyboardInterrupt                         Traceback (most recent call last)
Cell In [206], line 4
      2 m=Integer(0)
      3 for v in sortables(A,c):
----> 4     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(Integer(15))))
      5     m=max(m,P.dimension())
      6     print(v,P.dimension())

File ~/git/affine_dominance/domination4.py:127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_faster(B, la, seqs[0])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_faster(B, la, s))
    128     if P.dimension()==0:
    129         break

File ~/git/affine_dominance/domination4.py:151, in p_lambda_faster(B, la, seq)
    148 #print("Hp:   ",Hp,Hp.vertices(),Hp.rays(),Hp.lines(),"\n")
    149 #print("Hm:   ",Hm,Hm.vertices(),Hm.rays(),Hm.lines(),"\n\n")
    150 Pp = P.intersection(Hp)
--> 151 Pm = P.intersection(Hm)
    152 if Pp.dimension() < rk:
    153     P=Em*Pm

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1371, in Polyhedron_base5.intersection(self, other)
   1369 parent = self.parent()
   1370 try:
-> 1371     intersection = parent.element_class(parent, None, [new_ieqs, new_eqns])
   1373     # Force calculation of the vertices.
   1374     _ = intersection.n_vertices()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:70, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
---> 70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:195, in Polyhedron_ppl.set_immutable(self)
    193         raise e
    194 if not hasattr(self, '_Hrepresentation'):
--> 195     self._init_Hrepresentation_from_ppl(True)
    196 self._is_mutable = False

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:344, in Polyhedron_ppl._init_Hrepresentation_from_ppl(self, minimize)
    342 for c in cs:
    343     if c.is_inequality():
--> 344         parent._make_Inequality(self, (c.inhomogeneous_term(),) + c.coefficients())
    345     elif c.is_equality():
    346         parent._make_Equation(self, (c.inhomogeneous_term(),) + c.coefficients())

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:1068, in Polyhedra_base._make_Inequality(self, polyhedron, data)
   1066     obj = self._Inequality_pool.pop()
   1067 except IndexError:
-> 1068     obj = Inequality(self)
   1069 obj._set_data(polyhedron, data)
   1070 return obj

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/representation.py:410, in Hrepresentation.__init__(self, polyhedron_parent)
    408 self._base_ring = polyhedron_parent.base_ring()
    409 self._vector = polyhedron_parent.Hrepresentation_space()(0)
--> 410 self._A = polyhedron_parent.ambient_space()(0)
    411 self._b = polyhedron_parent.base_ring()(0)
    412 self._index = 0

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/parent.pyx:901, in sage.structure.parent.Parent.__call__ (build/cythonized/sage/structure/parent.c:12658)()
    899 if mor is not None:
    900     if no_extra_args:
--> 901         return mor._call_(x)
    902     else:
    903         return mor._call_with_args(x, args, kwds)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:158, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_ (build/cythonized/sage/structure/coerce_maps.c:6834)()
    156 cdef Parent C = self._codomain
    157 try:
--> 158     return C._element_constructor(x)
    159 except Exception:
    160     if print_warnings:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/modules/free_module.py:6380, in FreeModule_ambient_field._element_constructor_(self, e, *args, **kwds)
   6378 except AttributeError:
   6379     pass
-> 6380 return FreeModule_generic_field._element_constructor_(self, e, *args, **kwds)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/modules/free_module.py:2155, in FreeModule_generic._element_constructor_(self, x, coerce, copy, check)
   2111 r"""
   2112 Create an element of this free module from ``x``.
   2113 
   (...)
   2151     True
   2152 """
   2153 if (isinstance(x, (int, sage.rings.integer.Integer)) and
   2154     x == 0):
-> 2155     return self.zero_vector()
   2156 elif isinstance(x, free_module_element.FreeModuleElement):
   2157     if x.parent() is self:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/modules/free_module.py:1069, in Module_free_ambient.zero_vector(self)
   1051 """
   1052 Return the zero vector in this module.
   1053 
   (...)
   1064     (0, 0)
   1065 """
   1066 # Do *not* cache this -- it must be computed fresh each time, since
   1067 # it is used by __call__ to make a new copy of the 0 element.
-> 1069 return self.element_class(self, 0)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/modules/vector_rational_dense.pyx:141, in sage.modules.vector_rational_dense.Vector_rational_dense.__cinit__ (build/cythonized/sage/modules/vector_rational_dense.c:7951)()
    139         self._degree = 0
    140         return
--> 141     self._init(parent.degree(), <Parent?>parent)
    142 
    143 def __init__(self, parent, x, coerce=True, copy=True):

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/modules/vector_rational_dense.pyx:127, in sage.modules.vector_rational_dense.Vector_rational_dense._init (build/cythonized/sage/modules/vector_rational_dense.c:7632)()
    125 cdef mpq_t* entries = <mpq_t*>check_allocarray(degree, sizeof(mpq_t))
    126 cdef Py_ssize_t i
--> 127 sig_on()
    128 for i in range(degree):
    129     mpq_init(entries[i])

KeyboardInterrupt: 
sage: c=[0,1,2,3,4]
....: m=0
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(2
....: 0)))
....:     m=max(m,P.dimension())
....:     print(v,P.dimension())
....: print(m)

[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3] 4
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2] 4
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [207], line 4
      2 m=Integer(0)
      3 for v in sortables(A,c):
----> 4     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(Integer(20))))
      5     m=max(m,P.dimension())
      6     print(v,P.dimension())

File ~/git/affine_dominance/domination4.py:127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_faster(B, la, seqs[0])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_faster(B, la, s))
    128     if P.dimension()==0:
    129         break

File ~/git/affine_dominance/domination4.py:151, in p_lambda_faster(B, la, seq)
    148 #print("Hp:   ",Hp,Hp.vertices(),Hp.rays(),Hp.lines(),"\n")
    149 #print("Hm:   ",Hm,Hm.vertices(),Hm.rays(),Hm.lines(),"\n\n")
    150 Pp = P.intersection(Hp)
--> 151 Pm = P.intersection(Hm)
    152 if Pp.dimension() < rk:
    153     P=Em*Pm

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1371, in Polyhedron_base5.intersection(self, other)
   1369 parent = self.parent()
   1370 try:
-> 1371     intersection = parent.element_class(parent, None, [new_ieqs, new_eqns])
   1373     # Force calculation of the vertices.
   1374     _ = intersection.n_vertices()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:179, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    177 elif Hrep is not None:
    178     ieqs, eqns = Hrep
--> 179     self._init_from_Hrepresentation(ieqs, eqns, **kwds)
    180 else:
    181     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:129, in Polyhedron_ppl._init_from_Hrepresentation(self, ieqs, eqns, minimize, verbose)
    106 def _init_from_Hrepresentation(self, ieqs, eqns, minimize=True, verbose=False):
    107     """
    108     Construct polyhedron from H-representation data.
    109 
   (...)
    127         sage: Polyhedron_ppl._init_from_Hrepresentation(p, [], [])
    128     """
--> 129     cs = self._convert_constraints_to_ppl(ieqs, eqns)
    130     if cs.empty():
    131         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'universe')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:534, in Polyhedron_ppl._convert_constraints_to_ppl(ieqs, eqns)
    532     ieqs = []
    533 for ieq in ieqs:
--> 534     cs.insert(Polyhedron_ppl._convert_constraint_to_ppl(ieq, INEQUALITY))
    535 if eqns is None:
    536     eqns = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:509, in Polyhedron_ppl._convert_constraint_to_ppl(c, typ)
    507 A = dc[1:]
    508 if typ == INEQUALITY:
--> 509     return Linear_Expression(A, b) >= 0
    510 else:
    511     return Linear_Expression(A, b) == 0

File ppl/linear_algebra.pyx:654, in ppl.linear_algebra.Linear_Expression.__init__()

File ppl/linear_algebra.pyx:49, in ppl.linear_algebra.PPL_Coefficient_from_pyobject()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/rings/integer.pyx:914, in sage.rings.integer.Integer.__richcmp__ (build/cythonized/sage/rings/integer.c:16498)()
    912     c = mpz_cmp_d((<Integer>left).value, d)
    913 else:
--> 914     return coercion_model.richcmp(left, right, op)
    915 
    916 return rich_to_bool_sgn(op, c)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:2021, in sage.structure.coerce.CoercionModel.richcmp (build/cythonized/sage/structure/coerce.c:26173)()
   2019 # Coerce to a common parent
   2020 try:
-> 2021     x, y = self.canonical_coercion(x, y)
   2022 except (TypeError, NotImplementedError):
   2023     pass

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1422, in sage.structure.coerce.CoercionModel.canonical_coercion (build/cythonized/sage/structure/coerce.c:18956)()
   1420             self._record_exception()
   1421 
-> 1422     raise TypeError("no common canonical parent for objects with parents: '%s' and '%s'"%(xp, yp))
   1423 
   1424 cpdef coercion_maps(self, R, S) noexcept:

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: c=[0,1,2,3,4]
....: m=0
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(6
....: 0)))
....:     m=max(m,P.dimension())
....:     print(v,P.dimension())
....: print(m)

[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2, 3, 4] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2, 3] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2, 3, 4] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2, 3] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3] 0
[0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 0, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2] 0
[0, 1, 2, 3, 4, 0, 1, 3, 4, 0] 0
[0, 1, 2, 3, 4, 0, 1, 3, 4] 0
[0, 1, 2, 3, 4, 0, 1, 3, 0] 0
[0, 1, 2, 3, 4, 0, 1, 3] 0
[0, 1, 2, 3, 4, 0, 1, 0] 0
[0, 1, 2, 3, 4, 0, 1] 0
[0, 1, 2, 3, 4, 0, 2, 3, 4, 2, 3, 4] 0
[0, 1, 2, 3, 4, 0, 2, 3, 4, 2, 3] 0
[0, 1, 2, 3, 4, 0, 2, 3, 4, 2] 0
[0, 1, 2, 3, 4, 0, 2, 3, 4] 0
[0, 1, 2, 3, 4, 0, 2, 3, 2] 0
[0, 1, 2, 3, 4, 0, 2, 3] 0
[0, 1, 2, 3, 4, 0, 2] 0
[0, 1, 2, 3, 4, 0, 3, 4] 0
[0, 1, 2, 3, 4, 0, 3] 0
[0, 1, 2, 3, 4, 0] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 1] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 2, 3] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 2] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4] 0
[0, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
[0, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
[0, 1, 2, 3, 4, 1, 2, 3, 1] 0
[0, 1, 2, 3, 4, 1, 2, 3, 2] 0
[0, 1, 2, 3, 4, 1, 2, 3] 0
[0, 1, 2, 3, 4, 1, 2, 1] 0
[0, 1, 2, 3, 4, 1, 2] 0
[0, 1, 2, 3, 4, 1, 3, 4] 0
[0, 1, 2, 3, 4, 1, 3] 0
[0, 1, 2, 3, 4, 1] 0
[0, 1, 2, 3, 4, 2, 3, 4, 2, 3, 4] 0
[0, 1, 2, 3, 4, 2, 3, 4, 2, 3] 0
[0, 1, 2, 3, 4, 2, 3, 4, 2] 0
[0, 1, 2, 3, 4, 2, 3, 4] 0
[0, 1, 2, 3, 4, 2, 3, 2] 0
[0, 1, 2, 3, 4, 2, 3] 0
[0, 1, 2, 3, 4, 2] 0
[0, 1, 2, 3, 4, 3, 4] 0
[0, 1, 2, 3, 4, 3] 0
[0, 1, 2, 3, 4] 0
[0, 1, 2, 3, 0, 1, 2, 0, 1, 0] 0
[0, 1, 2, 3, 0, 1, 2, 0, 1] 0
[0, 1, 2, 3, 0, 1, 2, 0] 0
[0, 1, 2, 3, 0, 1, 2, 1] 0
[0, 1, 2, 3, 0, 1, 2] 0
[0, 1, 2, 3, 0, 1, 0] 0
[0, 1, 2, 3, 0, 1] 0
[0, 1, 2, 3, 0, 2] 0
[0, 1, 2, 3, 0] 0
[0, 1, 2, 3, 1, 2, 1] 0
[0, 1, 2, 3, 1, 2] 0
[0, 1, 2, 3, 1] 0
[0, 1, 2, 3, 2] 0
[0, 1, 2, 3] 0
[0, 1, 2, 4, 0, 1, 0] 0
[0, 1, 2, 4, 0, 1] 0
[0, 1, 2, 4, 0] 0
[0, 1, 2, 4, 1] 0
[0, 1, 2, 4] 0
[0, 1, 2, 0, 1, 0] 0
[0, 1, 2, 0, 1] 0
[0, 1, 2, 0] 0
[0, 1, 2, 1] 0
[0, 1, 2] 0
[0, 1, 3, 4, 0, 3, 4] 0
[0, 1, 3, 4, 0, 3] 0
[0, 1, 3, 4, 0] 0
[0, 1, 3, 4, 3, 4] 0
[0, 1, 3, 4, 3] 0
[0, 1, 3, 4] 0
[0, 1, 3, 0] 0
[0, 1, 3] 0
[0, 1, 4, 0] 0
[0, 1, 4] 0
[0, 1, 0] 0
[0, 1] 0
[0, 2, 3, 4, 2, 3, 4, 2, 3, 4] 0
[0, 2, 3, 4, 2, 3, 4, 2, 3] 0
[0, 2, 3, 4, 2, 3, 4, 2] 0
[0, 2, 3, 4, 2, 3, 4] 0
[0, 2, 3, 4, 2, 3, 2] 0
[0, 2, 3, 4, 2, 3] 0
[0, 2, 3, 4, 2] 0
[0, 2, 3, 4, 3, 4] 0
[0, 2, 3, 4, 3] 0
[0, 2, 3, 4] 0
[0, 2, 3, 2] 0
[0, 2, 3] 0
[0, 2, 4] 0
[0, 2] 0
[0, 3, 4, 3, 4] 0
[0, 3, 4, 3] 0
[0, 3, 4] 0
[0, 3] 0
[0, 4] 0
[0] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1] 0
[1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4] 0
[1, 2, 3, 4, 1, 2, 3, 4, 2, 3] 0
[1, 2, 3, 4, 1, 2, 3, 4, 2] 0
[1, 2, 3, 4, 1, 2, 3, 4] 0
[1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
[1, 2, 3, 4, 1, 2, 3, 1, 2] 0
[1, 2, 3, 4, 1, 2, 3, 1] 0
[1, 2, 3, 4, 1, 2, 3, 2] 0
[1, 2, 3, 4, 1, 2, 3] 0
[1, 2, 3, 4, 1, 2, 1] 0
[1, 2, 3, 4, 1, 2] 0
[1, 2, 3, 4, 1, 3, 4] 0
[1, 2, 3, 4, 1, 3] 0
[1, 2, 3, 4, 1] 0
[1, 2, 3, 4, 2, 3, 4, 2, 3, 4] 0
[1, 2, 3, 4, 2, 3, 4, 2, 3] 0
[1, 2, 3, 4, 2, 3, 4, 2] 0
[1, 2, 3, 4, 2, 3, 4] 0
[1, 2, 3, 4, 2, 3, 2] 0
[1, 2, 3, 4, 2, 3] 0
[1, 2, 3, 4, 2] 0
[1, 2, 3, 4, 3, 4] 0
[1, 2, 3, 4, 3] 0
[1, 2, 3, 4] 0
[1, 2, 3, 1, 2, 1] 0
[1, 2, 3, 1, 2] 0
[1, 2, 3, 1] 0
[1, 2, 3, 2] 0
[1, 2, 3] 0
[1, 2, 4, 1] 0
[1, 2, 4] 0
[1, 2, 1] 0
[1, 2] 0
[1, 3, 4, 3, 4] 0
[1, 3, 4, 3] 0
[1, 3, 4] 0
[1, 3] 0
[1, 4] 0
[1] 0
[2, 3, 4, 2, 3, 4, 2, 3, 4] 0
[2, 3, 4, 2, 3, 4, 2, 3] 0
[2, 3, 4, 2, 3, 4, 2] 0
[2, 3, 4, 2, 3, 4] 0
[2, 3, 4, 2, 3, 2] 0
[2, 3, 4, 2, 3] 0
[2, 3, 4, 2] 0
[2, 3, 4, 3, 4] 0
[2, 3, 4, 3] 0
[2, 3, 4] 0
[2, 3, 2] 0
[2, 3] 0
[2, 4] 0
[2] 0
[3, 4, 3, 4] 0
[3, 4, 3] 0
[3, 4] 0
[3] 0
[4] 0
[] 0
0
sage: 
sage: C
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
Cell In [209], line 1
----> 1 C

NameError: name 'C' is not defined
sage: A
[ 2 -1  0  0  0]
[-1  2 -1  0  0]
[ 0 -1  2 -1  0]
[ 0  0 -1  2 -2]
[ 0  0  0 -1  2]
sage: c=[0,1,2,3,4]
....: m=0
....: for v in sortables(A,c):
....:     if (v==[] or v[0]!=c[0]):
....:          P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in ra
....: nge(50)))
....:         m=max(m,P.dimension())
....:         print(v,P.dimension())
....: print(m)
  File <tokenize>:6
    m=max(m,P.dimension())
    ^
IndentationError: unindent does not match any outer indentation level

sage: c=[0,1,2,3,4]
....: m=0
....: for v in sortables(A,c):
....:     if (v==[] or v[0]!=c[0]):
....:         P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in ran
....: ge(50)))
....:         m=max(m,P.dimension())
....:         print(v,P.dimension())
....: print(m)

[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1] 0
[1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4] 0
[1, 2, 3, 4, 1, 2, 3, 4, 2, 3] 0
[1, 2, 3, 4, 1, 2, 3, 4, 2] 0
[1, 2, 3, 4, 1, 2, 3, 4] 0
[1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
[1, 2, 3, 4, 1, 2, 3, 1, 2] 0
[1, 2, 3, 4, 1, 2, 3, 1] 0
[1, 2, 3, 4, 1, 2, 3, 2] 0
[1, 2, 3, 4, 1, 2, 3] 0
[1, 2, 3, 4, 1, 2, 1] 0
[1, 2, 3, 4, 1, 2] 0
[1, 2, 3, 4, 1, 3, 4] 0
[1, 2, 3, 4, 1, 3] 0
[1, 2, 3, 4, 1] 0
[1, 2, 3, 4, 2, 3, 4, 2, 3, 4] 0
[1, 2, 3, 4, 2, 3, 4, 2, 3] 0
[1, 2, 3, 4, 2, 3, 4, 2] 0
[1, 2, 3, 4, 2, 3, 4] 0
[1, 2, 3, 4, 2, 3, 2] 0
[1, 2, 3, 4, 2, 3] 0
[1, 2, 3, 4, 2] 0
[1, 2, 3, 4, 3, 4] 0
[1, 2, 3, 4, 3] 0
[1, 2, 3, 4] 0
[1, 2, 3, 1, 2, 1] 0
[1, 2, 3, 1, 2] 0
[1, 2, 3, 1] 0
[1, 2, 3, 2] 0
[1, 2, 3] 0
[1, 2, 4, 1] 0
[1, 2, 4] 0
[1, 2, 1] 0
[1, 2] 0
[1, 3, 4, 3, 4] 0
[1, 3, 4, 3] 0
[1, 3, 4] 0
[1, 3] 0
[1, 4] 0
[1] 0
[2, 3, 4, 2, 3, 4, 2, 3, 4] 0
[2, 3, 4, 2, 3, 4, 2, 3] 0
[2, 3, 4, 2, 3, 4, 2] 0
[2, 3, 4, 2, 3, 4] 0
[2, 3, 4, 2, 3, 2] 0
[2, 3, 4, 2, 3] 0
[2, 3, 4, 2] 0
[2, 3, 4, 3, 4] 0
[2, 3, 4, 3] 0
[2, 3, 4] 0
[2, 3, 2] 0
[2, 3] 0
[2, 4] 0
[2] 0
[3, 4, 3, 4] 0
[3, 4, 3] 0
[3, 4] 0
[3] 0
[4] 0
[] 0
0
sage: 
sage: c=[0,1,2,3,4]
....: m=0
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(5
....: 0)))
....:     m=max(m,P.dimension())
....:     print(v,P.dimension())
....: print(m)
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2, 3, 4] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2, 3] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2, 3, 4] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2, 3] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3] 0
[0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 0, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2] 0
[0, 1, 2, 3, 4, 0, 1, 3, 4, 0] 0
[0, 1, 2, 3, 4, 0, 1, 3, 4] 0
[0, 1, 2, 3, 4, 0, 1, 3, 0] 0
[0, 1, 2, 3, 4, 0, 1, 3] 0
[0, 1, 2, 3, 4, 0, 1, 0] 0
[0, 1, 2, 3, 4, 0, 1] 0
[0, 1, 2, 3, 4, 0, 2, 3, 4, 2, 3, 4] 0
[0, 1, 2, 3, 4, 0, 2, 3, 4, 2, 3] 0
[0, 1, 2, 3, 4, 0, 2, 3, 4, 2] 0
[0, 1, 2, 3, 4, 0, 2, 3, 4] 0
[0, 1, 2, 3, 4, 0, 2, 3, 2] 0
[0, 1, 2, 3, 4, 0, 2, 3] 0
[0, 1, 2, 3, 4, 0, 2] 0
[0, 1, 2, 3, 4, 0, 3, 4] 0
[0, 1, 2, 3, 4, 0, 3] 0
[0, 1, 2, 3, 4, 0] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 1] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 2, 3] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 2] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4] 0
[0, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
[0, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
[0, 1, 2, 3, 4, 1, 2, 3, 1] 0
[0, 1, 2, 3, 4, 1, 2, 3, 2] 0
[0, 1, 2, 3, 4, 1, 2, 3] 0
[0, 1, 2, 3, 4, 1, 2, 1] 0
[0, 1, 2, 3, 4, 1, 2] 0
[0, 1, 2, 3, 4, 1, 3, 4] 0
[0, 1, 2, 3, 4, 1, 3] 0
[0, 1, 2, 3, 4, 1] 0
[0, 1, 2, 3, 4, 2, 3, 4, 2, 3, 4] 0
[0, 1, 2, 3, 4, 2, 3, 4, 2, 3] 0
[0, 1, 2, 3, 4, 2, 3, 4, 2] 0
[0, 1, 2, 3, 4, 2, 3, 4] 0
[0, 1, 2, 3, 4, 2, 3, 2] 0
[0, 1, 2, 3, 4, 2, 3] 0
[0, 1, 2, 3, 4, 2] 0
[0, 1, 2, 3, 4, 3, 4] 0
[0, 1, 2, 3, 4, 3] 0
[0, 1, 2, 3, 4] 0
[0, 1, 2, 3, 0, 1, 2, 0, 1, 0] 0
[0, 1, 2, 3, 0, 1, 2, 0, 1] 0
[0, 1, 2, 3, 0, 1, 2, 0] 0
[0, 1, 2, 3, 0, 1, 2, 1] 0
[0, 1, 2, 3, 0, 1, 2] 0
[0, 1, 2, 3, 0, 1, 0] 0
[0, 1, 2, 3, 0, 1] 0
[0, 1, 2, 3, 0, 2] 0
[0, 1, 2, 3, 0] 0
[0, 1, 2, 3, 1, 2, 1] 0
[0, 1, 2, 3, 1, 2] 0
[0, 1, 2, 3, 1] 0
[0, 1, 2, 3, 2] 0
[0, 1, 2, 3] 0
[0, 1, 2, 4, 0, 1, 0] 0
[0, 1, 2, 4, 0, 1] 0
[0, 1, 2, 4, 0] 0
[0, 1, 2, 4, 1] 0
[0, 1, 2, 4] 0
[0, 1, 2, 0, 1, 0] 0
[0, 1, 2, 0, 1] 0
[0, 1, 2, 0] 0
[0, 1, 2, 1] 0
[0, 1, 2] 0
[0, 1, 3, 4, 0, 3, 4] 0
[0, 1, 3, 4, 0, 3] 0
[0, 1, 3, 4, 0] 0
[0, 1, 3, 4, 3, 4] 0
[0, 1, 3, 4, 3] 0
[0, 1, 3, 4] 0
[0, 1, 3, 0] 0
[0, 1, 3] 0
[0, 1, 4, 0] 0
[0, 1, 4] 0
[0, 1, 0] 0
[0, 1] 0
[0, 2, 3, 4, 2, 3, 4, 2, 3, 4] 0
[0, 2, 3, 4, 2, 3, 4, 2, 3] 0
[0, 2, 3, 4, 2, 3, 4, 2] 0
[0, 2, 3, 4, 2, 3, 4] 0
[0, 2, 3, 4, 2, 3, 2] 0
[0, 2, 3, 4, 2, 3] 0
[0, 2, 3, 4, 2] 0
[0, 2, 3, 4, 3, 4] 0
[0, 2, 3, 4, 3] 0
[0, 2, 3, 4] 0
[0, 2, 3, 2] 0
[0, 2, 3] 0
[0, 2, 4] 0
[0, 2] 0
[0, 3, 4, 3, 4] 0
[0, 3, 4, 3] 0
[0, 3, 4] 0
[0, 3] 0
[0, 4] 0
[0] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1] 0
[1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4] 0
[1, 2, 3, 4, 1, 2, 3, 4, 2, 3] 0
[1, 2, 3, 4, 1, 2, 3, 4, 2] 0
[1, 2, 3, 4, 1, 2, 3, 4] 0
[1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
[1, 2, 3, 4, 1, 2, 3, 1, 2] 0
[1, 2, 3, 4, 1, 2, 3, 1] 0
[1, 2, 3, 4, 1, 2, 3, 2] 0
[1, 2, 3, 4, 1, 2, 3] 0
[1, 2, 3, 4, 1, 2, 1] 0
[1, 2, 3, 4, 1, 2] 0
[1, 2, 3, 4, 1, 3, 4] 0
[1, 2, 3, 4, 1, 3] 0
[1, 2, 3, 4, 1] 0
[1, 2, 3, 4, 2, 3, 4, 2, 3, 4] 0
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [214], line 4
      2 m=Integer(0)
      3 for v in sortables(A,c):
----> 4     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(Integer(50))))
      5     m=max(m,P.dimension())
      6     print(v,P.dimension())

File ~/git/affine_dominance/domination4.py:127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_faster(B, la, seqs[0])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_faster(B, la, s))
    128     if P.dimension()==0:
    129         break

File ~/git/affine_dominance/domination4.py:146, in p_lambda_faster(B, la, seq)
    144 Ep = E(B, k, 1)
    145 Em = E(B, k, -1)
--> 146 Hp = Polyhedron(ieqs=[(0,)*(k+1)+(1,)+(0,)*(m-k-1)])
    147 Hm = Polyhedron(ieqs=[(0,)*(k+1)+(-1,)+(0,)*(m-k-1)])
    148 #print("Hp:   ",Hp,Hp.vertices(),Hp.rays(),Hp.lines(),"\n")
    149 #print("Hm:   ",Hm,Hm.vertices(),Hm.rays(),Hm.lines(),"\n\n")

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/constructor.py:768, in Polyhedron(vertices, rays, lines, ieqs, eqns, ambient_dim, base_ring, minimize, verbose, backend, mutable)
    766 if got_Vrep:
    767     Vrep = [vertices, rays, lines]
--> 768 return parent(Vrep, Hrep, convert=convert, verbose=verbose, mutable=mutable)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/parent.pyx:903, in sage.structure.parent.Parent.__call__ (build/cythonized/sage/structure/parent.c:12685)()
    901         return mor._call_(x)
    902     else:
--> 903         return mor._call_with_args(x, args, kwds)
    904 
    905 raise TypeError(_LazyString("No conversion defined from %s to %s", (R, self), {}))

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:177, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_with_args (build/cythonized/sage/structure/coerce_maps.c:7430)()
    175             return C._element_constructor(x, *args)
    176         else:
--> 177             return C._element_constructor(x, *args, **kwds)
    178 except Exception:
    179     if print_warnings:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:695, in Polyhedra_base._element_constructor_(self, *args, **kwds)
    693     if convert and Vrep:
    694         Vrep = [convert_base_ring(_) for _ in Vrep]
--> 695     return self.element_class(self, Vrep, Hrep, **kwds)
    696 if nargs == 1 and is_Polyhedron(args[0]):
    697     copy = kwds.pop('copy', args[0].parent() is not self)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:70, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
---> 70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:189, in Polyhedron_ppl.set_immutable(self)
    187 if not hasattr(self, '_Vrepresentation'):
    188     try:
--> 189         self._init_Vrepresentation_from_ppl(True)
    190     except TypeError as e:
    191         # Apparently the polyhedron is (no longer) integral.
    192         self._clear_cache()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:278, in Polyhedron_ppl._init_Vrepresentation_from_ppl(self, minimize)
    275     else:
    276         return self._Vrepresentation[index]
--> 278 def _init_Vrepresentation_from_ppl(self, minimize):
    279     """
    280     Create the Vrepresentation objects from the ppl polyhedron.
    281 
   (...)
    295         Generator_System {point(0/2, 1/2), point(2/1, 0/1), point(24/6, 5/6)}
    296     """
    297     if not self._is_mutable:

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: c=[0,1,2,3,4]
....: m=0
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(3
....: 5)))
....:     m=max(m,P.dimension())
....:     print(v,P.dimension())
....: print(m)
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2, 3, 4] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2, 3] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2, 3, 4] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2, 3] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3] 0
[0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 0, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2] 0
[0, 1, 2, 3, 4, 0, 1, 3, 4, 0] 0
[0, 1, 2, 3, 4, 0, 1, 3, 4] 0
[0, 1, 2, 3, 4, 0, 1, 3, 0] 0
[0, 1, 2, 3, 4, 0, 1, 3] 0
[0, 1, 2, 3, 4, 0, 1, 0] 0
[0, 1, 2, 3, 4, 0, 1] 0
[0, 1, 2, 3, 4, 0, 2, 3, 4, 2, 3, 4] 0
[0, 1, 2, 3, 4, 0, 2, 3, 4, 2, 3] 0
[0, 1, 2, 3, 4, 0, 2, 3, 4, 2] 0
[0, 1, 2, 3, 4, 0, 2, 3, 4] 0
[0, 1, 2, 3, 4, 0, 2, 3, 2] 0
[0, 1, 2, 3, 4, 0, 2, 3] 0
[0, 1, 2, 3, 4, 0, 2] 0
[0, 1, 2, 3, 4, 0, 3, 4] 0
[0, 1, 2, 3, 4, 0, 3] 0
[0, 1, 2, 3, 4, 0] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 1] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 2, 3] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 2] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4] 0
[0, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
[0, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
[0, 1, 2, 3, 4, 1, 2, 3, 1] 0
[0, 1, 2, 3, 4, 1, 2, 3, 2] 0
[0, 1, 2, 3, 4, 1, 2, 3] 0
[0, 1, 2, 3, 4, 1, 2, 1] 0
[0, 1, 2, 3, 4, 1, 2] 0
[0, 1, 2, 3, 4, 1, 3, 4] 0
[0, 1, 2, 3, 4, 1, 3] 0
[0, 1, 2, 3, 4, 1] 0
[0, 1, 2, 3, 4, 2, 3, 4, 2, 3, 4] 0
[0, 1, 2, 3, 4, 2, 3, 4, 2, 3] 0
[0, 1, 2, 3, 4, 2, 3, 4, 2] 0
[0, 1, 2, 3, 4, 2, 3, 4] 0
[0, 1, 2, 3, 4, 2, 3, 2] 0
[0, 1, 2, 3, 4, 2, 3] 0
[0, 1, 2, 3, 4, 2] 0
[0, 1, 2, 3, 4, 3, 4] 0
[0, 1, 2, 3, 4, 3] 0
[0, 1, 2, 3, 4] 0
[0, 1, 2, 3, 0, 1, 2, 0, 1, 0] 0
[0, 1, 2, 3, 0, 1, 2, 0, 1] 0
[0, 1, 2, 3, 0, 1, 2, 0] 0
[0, 1, 2, 3, 0, 1, 2, 1] 0
[0, 1, 2, 3, 0, 1, 2] 0
[0, 1, 2, 3, 0, 1, 0] 0
[0, 1, 2, 3, 0, 1] 0
[0, 1, 2, 3, 0, 2] 0
[0, 1, 2, 3, 0] 0
[0, 1, 2, 3, 1, 2, 1] 0
[0, 1, 2, 3, 1, 2] 0
[0, 1, 2, 3, 1] 0
[0, 1, 2, 3, 2] 0
[0, 1, 2, 3] 0
[0, 1, 2, 4, 0, 1, 0] 0
[0, 1, 2, 4, 0, 1] 0
[0, 1, 2, 4, 0] 0
[0, 1, 2, 4, 1] 0
[0, 1, 2, 4] 0
[0, 1, 2, 0, 1, 0] 0
[0, 1, 2, 0, 1] 0
[0, 1, 2, 0] 0
[0, 1, 2, 1] 0
[0, 1, 2] 0
[0, 1, 3, 4, 0, 3, 4] 0
[0, 1, 3, 4, 0, 3] 0
[0, 1, 3, 4, 0] 0
[0, 1, 3, 4, 3, 4] 0
[0, 1, 3, 4, 3] 0
[0, 1, 3, 4] 0
[0, 1, 3, 0] 0
[0, 1, 3] 0
[0, 1, 4, 0] 0
[0, 1, 4] 0
[0, 1, 0] 0
[0, 1] 0
[0, 2, 3, 4, 2, 3, 4, 2, 3, 4] 0
[0, 2, 3, 4, 2, 3, 4, 2, 3] 0
[0, 2, 3, 4, 2, 3, 4, 2] 0
[0, 2, 3, 4, 2, 3, 4] 0
[0, 2, 3, 4, 2, 3, 2] 0
[0, 2, 3, 4, 2, 3] 0
[0, 2, 3, 4, 2] 0
[0, 2, 3, 4, 3, 4] 0
[0, 2, 3, 4, 3] 0
[0, 2, 3, 4] 0
[0, 2, 3, 2] 0
[0, 2, 3] 0
[0, 2, 4] 0
[0, 2] 0
[0, 3, 4, 3, 4] 0
[0, 3, 4, 3] 0
[0, 3, 4] 0
[0, 3] 0
[0, 4] 0
[0] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1] 0
[1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4] 0
[1, 2, 3, 4, 1, 2, 3, 4, 2, 3] 0
[1, 2, 3, 4, 1, 2, 3, 4, 2] 0
[1, 2, 3, 4, 1, 2, 3, 4] 0
[1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
[1, 2, 3, 4, 1, 2, 3, 1, 2] 0
[1, 2, 3, 4, 1, 2, 3, 1] 0
[1, 2, 3, 4, 1, 2, 3, 2] 0
[1, 2, 3, 4, 1, 2, 3] 0
[1, 2, 3, 4, 1, 2, 1] 0
[1, 2, 3, 4, 1, 2] 0
[1, 2, 3, 4, 1, 3, 4] 0
[1, 2, 3, 4, 1, 3] 0
[1, 2, 3, 4, 1] 0
[1, 2, 3, 4, 2, 3, 4, 2, 3, 4] 0
[1, 2, 3, 4, 2, 3, 4, 2, 3] 0
[1, 2, 3, 4, 2, 3, 4, 2] 0
[1, 2, 3, 4, 2, 3, 4] 0
[1, 2, 3, 4, 2, 3, 2] 0
[1, 2, 3, 4, 2, 3] 0
[1, 2, 3, 4, 2] 0
[1, 2, 3, 4, 3, 4] 0
[1, 2, 3, 4, 3] 0
[1, 2, 3, 4] 0
[1, 2, 3, 1, 2, 1] 0
[1, 2, 3, 1, 2] 0
[1, 2, 3, 1] 0
[1, 2, 3, 2] 0
[1, 2, 3] 0
[1, 2, 4, 1] 0
[1, 2, 4] 0
[1, 2, 1] 0
[1, 2] 0
[1, 3, 4, 3, 4] 0
[1, 3, 4, 3] 0
[1, 3, 4] 0
[1, 3] 0
[1, 4] 0
[1] 0
[2, 3, 4, 2, 3, 4, 2, 3, 4] 0
[2, 3, 4, 2, 3, 4, 2, 3] 0
[2, 3, 4, 2, 3, 4, 2] 0
[2, 3, 4, 2, 3, 4] 0
[2, 3, 4, 2, 3, 2] 0
[2, 3, 4, 2, 3] 0
[2, 3, 4, 2] 0
[2, 3, 4, 3, 4] 0
[2, 3, 4, 3] 0
[2, 3, 4] 0
[2, 3, 2] 0
[2, 3] 0
[2, 4] 0
[2] 0
[3, 4, 3, 4] 0
[3, 4, 3] 0
[3, 4] 0
[3] 0
[4] 0
[] 0
0
sage: c=[0,1,2,3,4]
....: m=0
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(2
....: 7)))
....:     m=max(m,P.dimension())
....:     print(v,P.dimension())
....:     if m>0:
....:         break
....: print(m)
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2, 3, 4] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2, 3] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2, 3, 4] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2, 3] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3] 0
[0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 0, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2] 0
[0, 1, 2, 3, 4, 0, 1, 3, 4, 0] 0
[0, 1, 2, 3, 4, 0, 1, 3, 4] 0
[0, 1, 2, 3, 4, 0, 1, 3, 0] 0
[0, 1, 2, 3, 4, 0, 1, 3] 0
[0, 1, 2, 3, 4, 0, 1, 0] 0
[0, 1, 2, 3, 4, 0, 1] 0
[0, 1, 2, 3, 4, 0, 2, 3, 4, 2, 3, 4] 0
[0, 1, 2, 3, 4, 0, 2, 3, 4, 2, 3] 0
[0, 1, 2, 3, 4, 0, 2, 3, 4, 2] 0
[0, 1, 2, 3, 4, 0, 2, 3, 4] 0
[0, 1, 2, 3, 4, 0, 2, 3, 2] 0
[0, 1, 2, 3, 4, 0, 2, 3] 0
[0, 1, 2, 3, 4, 0, 2] 0
[0, 1, 2, 3, 4, 0, 3, 4] 0
[0, 1, 2, 3, 4, 0, 3] 0
[0, 1, 2, 3, 4, 0] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 1] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 2, 3] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 2] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4] 0
[0, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
[0, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
[0, 1, 2, 3, 4, 1, 2, 3, 1] 0
[0, 1, 2, 3, 4, 1, 2, 3, 2] 0
[0, 1, 2, 3, 4, 1, 2, 3] 0
[0, 1, 2, 3, 4, 1, 2, 1] 0
[0, 1, 2, 3, 4, 1, 2] 0
[0, 1, 2, 3, 4, 1, 3, 4] 0
[0, 1, 2, 3, 4, 1, 3] 0
[0, 1, 2, 3, 4, 1] 0
[0, 1, 2, 3, 4, 2, 3, 4, 2, 3, 4] 0
[0, 1, 2, 3, 4, 2, 3, 4, 2, 3] 0
[0, 1, 2, 3, 4, 2, 3, 4, 2] 0
[0, 1, 2, 3, 4, 2, 3, 4] 0
[0, 1, 2, 3, 4, 2, 3, 2] 0
[0, 1, 2, 3, 4, 2, 3] 0
[0, 1, 2, 3, 4, 2] 0
[0, 1, 2, 3, 4, 3, 4] 0
[0, 1, 2, 3, 4, 3] 0
[0, 1, 2, 3, 4] 0
[0, 1, 2, 3, 0, 1, 2, 0, 1, 0] 0
[0, 1, 2, 3, 0, 1, 2, 0, 1] 0
[0, 1, 2, 3, 0, 1, 2, 0] 0
[0, 1, 2, 3, 0, 1, 2, 1] 0
[0, 1, 2, 3, 0, 1, 2] 0
[0, 1, 2, 3, 0, 1, 0] 0
[0, 1, 2, 3, 0, 1] 0
[0, 1, 2, 3, 0, 2] 0
[0, 1, 2, 3, 0] 0
[0, 1, 2, 3, 1, 2, 1] 0
[0, 1, 2, 3, 1, 2] 0
[0, 1, 2, 3, 1] 0
[0, 1, 2, 3, 2] 0
[0, 1, 2, 3] 0
[0, 1, 2, 4, 0, 1, 0] 0
[0, 1, 2, 4, 0, 1] 0
[0, 1, 2, 4, 0] 0
[0, 1, 2, 4, 1] 0
[0, 1, 2, 4] 0
[0, 1, 2, 0, 1, 0] 0
[0, 1, 2, 0, 1] 0
[0, 1, 2, 0] 0
[0, 1, 2, 1] 0
[0, 1, 2] 0
[0, 1, 3, 4, 0, 3, 4] 0
[0, 1, 3, 4, 0, 3] 0
[0, 1, 3, 4, 0] 0
[0, 1, 3, 4, 3, 4] 0
[0, 1, 3, 4, 3] 0
[0, 1, 3, 4] 0
[0, 1, 3, 0] 0
[0, 1, 3] 0
[0, 1, 4, 0] 0
[0, 1, 4] 0
[0, 1, 0] 0
[0, 1] 0
[0, 2, 3, 4, 2, 3, 4, 2, 3, 4] 0
[0, 2, 3, 4, 2, 3, 4, 2, 3] 0
[0, 2, 3, 4, 2, 3, 4, 2] 0
[0, 2, 3, 4, 2, 3, 4] 0
[0, 2, 3, 4, 2, 3, 2] 0
[0, 2, 3, 4, 2, 3] 0
[0, 2, 3, 4, 2] 0
[0, 2, 3, 4, 3, 4] 0
[0, 2, 3, 4, 3] 0
[0, 2, 3, 4] 0
[0, 2, 3, 2] 0
[0, 2, 3] 0
[0, 2, 4] 0
[0, 2] 0
[0, 3, 4, 3, 4] 0
[0, 3, 4, 3] 0
[0, 3, 4] 0
[0, 3] 0
[0, 4] 0
[0] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1] 0
[1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4] 0
[1, 2, 3, 4, 1, 2, 3, 4, 2, 3] 0
[1, 2, 3, 4, 1, 2, 3, 4, 2] 0
[1, 2, 3, 4, 1, 2, 3, 4] 0
[1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
[1, 2, 3, 4, 1, 2, 3, 1, 2] 0
[1, 2, 3, 4, 1, 2, 3, 1] 0
[1, 2, 3, 4, 1, 2, 3, 2] 0
[1, 2, 3, 4, 1, 2, 3] 0
[1, 2, 3, 4, 1, 2, 1] 0
[1, 2, 3, 4, 1, 2] 0
[1, 2, 3, 4, 1, 3, 4] 0
[1, 2, 3, 4, 1, 3] 0
[1, 2, 3, 4, 1] 0
[1, 2, 3, 4, 2, 3, 4, 2, 3, 4] 0
[1, 2, 3, 4, 2, 3, 4, 2, 3] 0
[1, 2, 3, 4, 2, 3, 4, 2] 0
[1, 2, 3, 4, 2, 3, 4] 0
[1, 2, 3, 4, 2, 3, 2] 0
[1, 2, 3, 4, 2, 3] 0
[1, 2, 3, 4, 2] 0
[1, 2, 3, 4, 3, 4] 0
[1, 2, 3, 4, 3] 0
[1, 2, 3, 4] 0
[1, 2, 3, 1, 2, 1] 0
[1, 2, 3, 1, 2] 0
[1, 2, 3, 1] 0
[1, 2, 3, 2] 0
[1, 2, 3] 0
[1, 2, 4, 1] 0
[1, 2, 4] 0
[1, 2, 1] 0
[1, 2] 0
[1, 3, 4, 3, 4] 0
[1, 3, 4, 3] 0
[1, 3, 4] 0
[1, 3] 0
[1, 4] 0
[1] 0
[2, 3, 4, 2, 3, 4, 2, 3, 4] 0
[2, 3, 4, 2, 3, 4, 2, 3] 0
[2, 3, 4, 2, 3, 4, 2] 0
[2, 3, 4, 2, 3, 4] 0
[2, 3, 4, 2, 3, 2] 0
[2, 3, 4, 2, 3] 0
[2, 3, 4, 2] 0
[2, 3, 4, 3, 4] 0
[2, 3, 4, 3] 0
[2, 3, 4] 0
[2, 3, 2] 0
[2, 3] 0
[2, 4] 0
[2] 0
[3, 4, 3, 4] 0
[3, 4, 3] 0
[3, 4] 0
[3] 0
[4] 0
[] 0
0
sage: c=[0,1,2,3,4]
....: m=0
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(2
....: 1)))
....:     m=max(m,P.dimension())
....:     print(v,P.dimension())
....:     if m>0:
....:         break
....: print(m)
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4] 4
4
sage: c=[0,1,2,3,4]
....: m=0
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(2
....: 3)))
....:     m=max(m,P.dimension())
....:     print(v,P.dimension())
....:     if m>0:
....:         break
....: print(m)
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4] 3
3
sage: c=[0,1,2,3,4]
....: m=0
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(2
....: 4)))
....:     m=max(m,P.dimension())
....:     print(v,P.dimension())
....:     if m>0:
....:         break
....: print(m)
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4] 3
3
sage: c=[0,1,2,3,4]
....: m=0
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(2
....: 5)))
....:     m=max(m,P.dimension())
....:     print(v,P.dimension())
....:     if m>0:
....:         break
....: print(m)
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4] 2
2
sage: c=[0,1,2,3,4]
....: m=0
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(2
....: 6)))
....:     m=max(m,P.dimension())
....:     print(v,P.dimension())
....:     if m>0:
....:         break
....: print(m)
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4] 2
2
sage: c=[0,1,2,3,4]
....: m=0
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(2
....: 6)))
....:     m=max(m,P.dimension())
....:     print(v,P.dimension())
....:     if m>0:
....:         break
....: print(m)
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4] 2
2
sage: c=[0,1,2,3,4]
....: m=0
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(2
....: 7)))
....:     m=max(m,P.dimension())
....:     print(v,P.dimension())
....:     if m>0:
....:         break
....: print(m)
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2, 3, 4] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2, 3] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2, 3, 4] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2, 3] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3] 0
[0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 0, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 0] 0
[0, 1, 2, 3, 4, 0, 1, 2, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2] 0
[0, 1, 2, 3, 4, 0, 1, 3, 4, 0] 0
[0, 1, 2, 3, 4, 0, 1, 3, 4] 0
[0, 1, 2, 3, 4, 0, 1, 3, 0] 0
[0, 1, 2, 3, 4, 0, 1, 3] 0
[0, 1, 2, 3, 4, 0, 1, 0] 0
[0, 1, 2, 3, 4, 0, 1] 0
[0, 1, 2, 3, 4, 0, 2, 3, 4, 2, 3, 4] 0
[0, 1, 2, 3, 4, 0, 2, 3, 4, 2, 3] 0
[0, 1, 2, 3, 4, 0, 2, 3, 4, 2] 0
[0, 1, 2, 3, 4, 0, 2, 3, 4] 0
[0, 1, 2, 3, 4, 0, 2, 3, 2] 0
[0, 1, 2, 3, 4, 0, 2, 3] 0
[0, 1, 2, 3, 4, 0, 2] 0
[0, 1, 2, 3, 4, 0, 3, 4] 0
[0, 1, 2, 3, 4, 0, 3] 0
[0, 1, 2, 3, 4, 0] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 1] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 2, 3] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4, 2] 0
[0, 1, 2, 3, 4, 1, 2, 3, 4] 0
[0, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
[0, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
[0, 1, 2, 3, 4, 1, 2, 3, 1] 0
[0, 1, 2, 3, 4, 1, 2, 3, 2] 0
[0, 1, 2, 3, 4, 1, 2, 3] 0
[0, 1, 2, 3, 4, 1, 2, 1] 0
[0, 1, 2, 3, 4, 1, 2] 0
[0, 1, 2, 3, 4, 1, 3, 4] 0
[0, 1, 2, 3, 4, 1, 3] 0
[0, 1, 2, 3, 4, 1] 0
[0, 1, 2, 3, 4, 2, 3, 4, 2, 3, 4] 0
[0, 1, 2, 3, 4, 2, 3, 4, 2, 3] 0
[0, 1, 2, 3, 4, 2, 3, 4, 2] 0
[0, 1, 2, 3, 4, 2, 3, 4] 0
[0, 1, 2, 3, 4, 2, 3, 2] 0
[0, 1, 2, 3, 4, 2, 3] 0
[0, 1, 2, 3, 4, 2] 0
[0, 1, 2, 3, 4, 3, 4] 0
[0, 1, 2, 3, 4, 3] 0
[0, 1, 2, 3, 4] 0
[0, 1, 2, 3, 0, 1, 2, 0, 1, 0] 0
[0, 1, 2, 3, 0, 1, 2, 0, 1] 0
[0, 1, 2, 3, 0, 1, 2, 0] 0
[0, 1, 2, 3, 0, 1, 2, 1] 0
[0, 1, 2, 3, 0, 1, 2] 0
[0, 1, 2, 3, 0, 1, 0] 0
[0, 1, 2, 3, 0, 1] 0
[0, 1, 2, 3, 0, 2] 0
[0, 1, 2, 3, 0] 0
[0, 1, 2, 3, 1, 2, 1] 0
[0, 1, 2, 3, 1, 2] 0
[0, 1, 2, 3, 1] 0
[0, 1, 2, 3, 2] 0
[0, 1, 2, 3] 0
[0, 1, 2, 4, 0, 1, 0] 0
[0, 1, 2, 4, 0, 1] 0
[0, 1, 2, 4, 0] 0
[0, 1, 2, 4, 1] 0
[0, 1, 2, 4] 0
[0, 1, 2, 0, 1, 0] 0
[0, 1, 2, 0, 1] 0
[0, 1, 2, 0] 0
[0, 1, 2, 1] 0
[0, 1, 2] 0
[0, 1, 3, 4, 0, 3, 4] 0
[0, 1, 3, 4, 0, 3] 0
[0, 1, 3, 4, 0] 0
[0, 1, 3, 4, 3, 4] 0
[0, 1, 3, 4, 3] 0
[0, 1, 3, 4] 0
[0, 1, 3, 0] 0
[0, 1, 3] 0
[0, 1, 4, 0] 0
[0, 1, 4] 0
[0, 1, 0] 0
[0, 1] 0
[0, 2, 3, 4, 2, 3, 4, 2, 3, 4] 0
[0, 2, 3, 4, 2, 3, 4, 2, 3] 0
[0, 2, 3, 4, 2, 3, 4, 2] 0
[0, 2, 3, 4, 2, 3, 4] 0
[0, 2, 3, 4, 2, 3, 2] 0
[0, 2, 3, 4, 2, 3] 0
[0, 2, 3, 4, 2] 0
[0, 2, 3, 4, 3, 4] 0
[0, 2, 3, 4, 3] 0
[0, 2, 3, 4] 0
[0, 2, 3, 2] 0
[0, 2, 3] 0
[0, 2, 4] 0
[0, 2] 0
[0, 3, 4, 3, 4] 0
[0, 3, 4, 3] 0
[0, 3, 4] 0
[0, 3] 0
[0, 4] 0
[0] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1] 0
[1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4] 0
[1, 2, 3, 4, 1, 2, 3, 4, 2, 3] 0
[1, 2, 3, 4, 1, 2, 3, 4, 2] 0
[1, 2, 3, 4, 1, 2, 3, 4] 0
[1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
[1, 2, 3, 4, 1, 2, 3, 1, 2] 0
[1, 2, 3, 4, 1, 2, 3, 1] 0
[1, 2, 3, 4, 1, 2, 3, 2] 0
[1, 2, 3, 4, 1, 2, 3] 0
[1, 2, 3, 4, 1, 2, 1] 0
[1, 2, 3, 4, 1, 2] 0
[1, 2, 3, 4, 1, 3, 4] 0
[1, 2, 3, 4, 1, 3] 0
[1, 2, 3, 4, 1] 0
[1, 2, 3, 4, 2, 3, 4, 2, 3, 4] 0
[1, 2, 3, 4, 2, 3, 4, 2, 3] 0
[1, 2, 3, 4, 2, 3, 4, 2] 0
[1, 2, 3, 4, 2, 3, 4] 0
[1, 2, 3, 4, 2, 3, 2] 0
[1, 2, 3, 4, 2, 3] 0
[1, 2, 3, 4, 2] 0
[1, 2, 3, 4, 3, 4] 0
[1, 2, 3, 4, 3] 0
[1, 2, 3, 4] 0
[1, 2, 3, 1, 2, 1] 0
[1, 2, 3, 1, 2] 0
[1, 2, 3, 1] 0
[1, 2, 3, 2] 0
[1, 2, 3] 0
[1, 2, 4, 1] 0
[1, 2, 4] 0
[1, 2, 1] 0
[1, 2] 0
[1, 3, 4, 3, 4] 0
[1, 3, 4, 3] 0
[1, 3, 4] 0
[1, 3] 0
[1, 4] 0
[1] 0
[2, 3, 4, 2, 3, 4, 2, 3, 4] 0
[2, 3, 4, 2, 3, 4, 2, 3] 0
[2, 3, 4, 2, 3, 4, 2] 0
[2, 3, 4, 2, 3, 4] 0
[2, 3, 4, 2, 3, 2] 0
[2, 3, 4, 2, 3] 0
[2, 3, 4, 2] 0
[2, 3, 4, 3, 4] 0
[2, 3, 4, 3] 0
[2, 3, 4] 0
[2, 3, 2] 0
[2, 3] 0
[2, 4] 0
[2] 0
[3, 4, 3, 4] 0
[3, 4, 3] 0
[3, 4] 0
[3] 0
[4] 0
[] 0
0
sage: c=[0,1,2,3,4]
....: m=0
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(2
....: 7)))
....:     m=max(m,P.dimension())
....:     print(v,P.dimension())
....:     if m>0:
....:         break
....: print(m)
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1] 0
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0] 0
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [224], line 4
      2 m=Integer(0)
      3 for v in sortables(A,c):
----> 4     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(Integer(27))))
      5     m=max(m,P.dimension())
      6     print(v,P.dimension())

File ~/git/affine_dominance/domination4.py:127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_faster(B, la, seqs[0])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_faster(B, la, s))
    128     if P.dimension()==0:
    129         break

File ~/git/affine_dominance/domination4.py:159, in p_lambda_faster(B, la, seq)
    155         P=Ep*Pp
    156     else:
    157         #print("Pp:   ",Pp,Pp.vertices(),Pp.rays(),Pp.lines(),"\n")
    158         #print("Pm:   ",Pm,Pm.vertices(),Pm.rays(),Pm.lines(),"\n\n")
--> 159         P=(Ep*Pp).convex_hull(Em*Pm)
    160     B.mutate(k)
    161 return P

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4099, in sage.structure.element.Matrix.__mul__ (build/cythonized/sage/structure/element.c:35219)()
   4097 
   4098         if BOTH_ARE_ELEMENT(cl):
-> 4099             return coercion_model.bin_op(left, right, mul)
   4100 
   4101         cdef long value

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1222, in sage.structure.coerce.CoercionModel.bin_op (build/cythonized/sage/structure/coerce.c:15809)()
   1220 if action is not None:
   1221     if (<Action>action)._is_left:
-> 1222         return (<Action>action)._act_(x, y)
   1223     else:
   1224         return (<Action>action)._act_(y, x)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_actions.pyx:157, in sage.structure.coerce_actions.ActedUponAction._act_ (build/cythonized/sage/structure/coerce_actions.c:8579)()
    155     <... 'sage.structure.coerce_actions.ActedUponAction'>
    156 """
--> 157 return (<Element>x)._acted_upon_(g, not self._is_left)
    158 
    159 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:949, in sage.structure.element.Element._acted_upon_ (build/cythonized/sage/structure/element.c:16495)()
    947     return None
    948 
--> 949 cpdef _acted_upon_(self, x, bint self_on_left) noexcept:
    950     """
    951     Use this method to implement ``self`` acted on by x.

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1450, in Polyhedron_base5._acted_upon_(self, actor, self_on_left)
   1448         raise ValueError("matrices should act on the left")
   1449     else:
-> 1450         return self.linear_transformation(actor)
   1451 else:
   1452     return self.dilation(actor)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1879, in Polyhedron_base5.linear_transformation(self, linear_transf, new_base_ring)
   1873     pref_rep = 'Vrep' if self.n_vertices() <= self.n_inequalities() else 'Hrep'
   1875     return new_parent.element_class(new_parent, [new_vertices, new_rays, new_lines],
   1876                                     [new_inequalities, new_equations],
   1877                                     Vrep_minimal=True, Hrep_minimal=True, pref_rep=pref_rep)
-> 1879 return new_parent.element_class(new_parent, [tuple(new_vertices), tuple(new_rays), tuple(new_lines)], None)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:174, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    171     lines = tuple(lines)
    173 if vertices or rays or lines:
--> 174     self._init_from_Vrepresentation(vertices, rays, lines, **kwds)
    175 else:
    176     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:99, in Polyhedron_ppl._init_from_Vrepresentation(self, vertices, rays, lines, minimize, verbose)
     72 def _init_from_Vrepresentation(self, vertices, rays, lines, minimize=True, verbose=False):
     73     """
     74     Construct polyhedron from V-representation data.
     75 
   (...)
     97         sage: Polyhedron_ppl._init_from_Vrepresentation(p, [], [], [])
     98     """
---> 99     gs = self._convert_generators_to_ppl(vertices, rays, lines)
    100     if gs.empty():
    101         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'empty')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:473, in Polyhedron_ppl._convert_generators_to_ppl(vertices, rays, lines)
    471     vertices = []
    472 for v in vertices:
--> 473     gs.insert(Polyhedron_ppl._convert_generator_to_ppl(v, VERTEX))
    474 if rays is None:
    475     rays = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:442, in Polyhedron_ppl._convert_generator_to_ppl(v, typ)
    440 d = LCM_list([denominator(v_i) for v_i in v])
    441 if d.is_one():
--> 442     return ob(Linear_Expression(v, 0))
    443 else:
    444     dv = [ d*v_i for v_i in v ]

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: p_lambda_int(B(A,c),lam(A,[]),[[],[0],[0,1],[0,1,2],[0,1,2,3],[0,1,2,3,4],
....: [0,1,2,3,4,5]])
---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
Cell In [225], line 1
----> 1 p_lambda_int(B(A,c),lam(A,[]),[[],[Integer(0)],[Integer(0),Integer(1)],[Integer(0),Integer(1),Integer(2)],[Integer(0),Integer(1),Integer(2),Integer(3)],[Integer(0),Integer(1),Integer(2),Integer(3),Integer(4)],[Integer(0),Integer(1),Integer(2),Integer(3),Integer(4),Integer(5)]])

File ~/git/affine_dominance/domination4.py:127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_faster(B, la, seqs[0])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_faster(B, la, s))
    128     if P.dimension()==0:
    129         break

File ~/git/affine_dominance/domination4.py:139, in p_lambda_faster(B, la, seq)
    137 B = block_matrix([[B,matrix(la).transpose()]])
    138 for k in seq:
--> 139     B.mutate(k)
    140 B, la  = B[:,:-1], B[:,-1] 
    141 P = Polyhedron(rays=B.columns(),base_ring=QQ).translation(la)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/matrix0.pyx:3643, in sage.matrix.matrix0.Matrix.mutate (build/cythonized/sage/matrix/matrix0.c:33715)()
   3641 
   3642         if k < 0 or k >= self._nrows or k >= self._ncols:
-> 3643             raise IndexError("The mutation index is invalid")
   3644 
   3645         pairs = self.nonzero_positions()

IndexError: The mutation index is invalid
sage: p_lambda_int(B(A,c),lam(A,[]),[[],[0],[0,1],[0,1,2],[0,1,2,3],[0,1,2,3,4],
....: [0,1,2,3,4,0]])
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
sage: p_lambda_int(B(A,c),lam(A,[]),[[],[0],[0,1],[0,1,2],[0,1,2,3],[0,1,2,3,4]]
....: )
A 2-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 2 rays
sage: p_lambda_int(B(A,c),lam(A,[]),[[],[0],[0,1],[0,1,2],[0,1,2,3],[0,1,2,3,4],
....: [0,1,2,3,4,0]])
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
sage: B(A,c)
[ 0  1  0  0  0]
[-1  0  1  0  0]
[ 0 -1  0  1  0]
[ 0  0 -1  0  2]
[ 0  0  0 -1  0]
sage: p_lambda_int(B(A,c),lam(A,[]),[[],[0,1,2,3,4,0]])
A 2-dimensional polyhedron in QQ^5 defined as the convex hull of 4 vertices
sage: p_lambda_int(B(A,c),lam(A,[]),[[],[0],[0,1],[0,1,2],[0,1,2,3],[0,1,2,3,4,0
....: ]])
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
sage: p_lambda_int(B(A,c),lam(A,[]),[[],[0],[0,1],[0,1,2],[0,1,2,3,4,0]])
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
sage: p_lambda_int(B(A,c),lam(A,[]),[[],[0],[0,1],[0,1,2,3,4,0]])
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
sage: p_lambda_int(B(A,c),lam(A,[]),[[],[0],[0,1,2,3,4,0]])
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
sage: p_lambda_int(B(A,c),lam(A,[]),[[],[0,1,2,3,4,0]])
A 2-dimensional polyhedron in QQ^5 defined as the convex hull of 4 vertices
sage: p_lambda_int(B(A,c),lam(A,[]),[[0],[0,1,2,3,4,0]])
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
sage: p_lambda_int(B(A,c),lam(A,[0]),[[],[1,2,3,4]])
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 3 vertices, 3 rays, 1 line
sage: p_lambda_int(B(A,c),lam(A,[0]),[[],[1,2,3,4,0]])
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 19 vertices and 1 ray
sage: p_lambda_int(B(A,c),lam(A,[]),[[0],[0,1,2,3,4,0]])
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
sage: c=[2,3,4,0,1]
....: m=0
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(2
....: 6)))
....:     m=max(m,P.dimension())
....:     print(v,P.dimension())
....:     if m>0:
....:         break
....: print(m)
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0] 0
^C^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [240], line 4
      2 m=Integer(0)
      3 for v in sortables(A,c):
----> 4     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(Integer(26))))
      5     m=max(m,P.dimension())
      6     print(v,P.dimension())

File ~/git/affine_dominance/domination4.py:127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_faster(B, la, seqs[0])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_faster(B, la, s))
    128     if P.dimension()==0:
    129         break

File ~/git/affine_dominance/domination4.py:155, in p_lambda_faster(B, la, seq)
    153     P=Em*Pm
    154 elif Pm.dimension() < rk:
--> 155     P=Ep*Pp
    156 else:
    157     #print("Pp:   ",Pp,Pp.vertices(),Pp.rays(),Pp.lines(),"\n")
    158     #print("Pm:   ",Pm,Pm.vertices(),Pm.rays(),Pm.lines(),"\n\n")
    159     P=(Ep*Pp).convex_hull(Em*Pm)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4099, in sage.structure.element.Matrix.__mul__ (build/cythonized/sage/structure/element.c:35219)()
   4097 
   4098         if BOTH_ARE_ELEMENT(cl):
-> 4099             return coercion_model.bin_op(left, right, mul)
   4100 
   4101         cdef long value

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1222, in sage.structure.coerce.CoercionModel.bin_op (build/cythonized/sage/structure/coerce.c:15809)()
   1220 if action is not None:
   1221     if (<Action>action)._is_left:
-> 1222         return (<Action>action)._act_(x, y)
   1223     else:
   1224         return (<Action>action)._act_(y, x)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_actions.pyx:157, in sage.structure.coerce_actions.ActedUponAction._act_ (build/cythonized/sage/structure/coerce_actions.c:8579)()
    155     <... 'sage.structure.coerce_actions.ActedUponAction'>
    156 """
--> 157 return (<Element>x)._acted_upon_(g, not self._is_left)
    158 
    159 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:949, in sage.structure.element.Element._acted_upon_ (build/cythonized/sage/structure/element.c:16495)()
    947     return None
    948 
--> 949 cpdef _acted_upon_(self, x, bint self_on_left) noexcept:
    950     """
    951     Use this method to implement ``self`` acted on by x.

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1450, in Polyhedron_base5._acted_upon_(self, actor, self_on_left)
   1448         raise ValueError("matrices should act on the left")
   1449     else:
-> 1450         return self.linear_transformation(actor)
   1451 else:
   1452     return self.dilation(actor)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1879, in Polyhedron_base5.linear_transformation(self, linear_transf, new_base_ring)
   1873     pref_rep = 'Vrep' if self.n_vertices() <= self.n_inequalities() else 'Hrep'
   1875     return new_parent.element_class(new_parent, [new_vertices, new_rays, new_lines],
   1876                                     [new_inequalities, new_equations],
   1877                                     Vrep_minimal=True, Hrep_minimal=True, pref_rep=pref_rep)
-> 1879 return new_parent.element_class(new_parent, [tuple(new_vertices), tuple(new_rays), tuple(new_lines)], None)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:174, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    171     lines = tuple(lines)
    173 if vertices or rays or lines:
--> 174     self._init_from_Vrepresentation(vertices, rays, lines, **kwds)
    175 else:
    176     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:99, in Polyhedron_ppl._init_from_Vrepresentation(self, vertices, rays, lines, minimize, verbose)
     72 def _init_from_Vrepresentation(self, vertices, rays, lines, minimize=True, verbose=False):
     73     """
     74     Construct polyhedron from V-representation data.
     75 
   (...)
     97         sage: Polyhedron_ppl._init_from_Vrepresentation(p, [], [], [])
     98     """
---> 99     gs = self._convert_generators_to_ppl(vertices, rays, lines)
    100     if gs.empty():
    101         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'empty')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:473, in Polyhedron_ppl._convert_generators_to_ppl(vertices, rays, lines)
    471     vertices = []
    472 for v in vertices:
--> 473     gs.insert(Polyhedron_ppl._convert_generator_to_ppl(v, VERTEX))
    474 if rays is None:
    475     rays = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:442, in Polyhedron_ppl._convert_generator_to_ppl(v, typ)
    440 d = LCM_list([denominator(v_i) for v_i in v])
    441 if d.is_one():
--> 442     return ob(Linear_Expression(v, 0))
    443 else:
    444     dv = [ d*v_i for v_i in v ]

File ppl/linear_algebra.pyx:654, in ppl.linear_algebra.Linear_Expression.__init__()

File ppl/linear_algebra.pyx:49, in ppl.linear_algebra.PPL_Coefficient_from_pyobject()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:1107, in sage.structure.element.Element.__richcmp__ (build/cythonized/sage/structure/element.c:18121)()
   1105         return (<Element>self)._richcmp_(other, op)
   1106     else:
-> 1107         return coercion_model.richcmp(self, other, op)
   1108 
   1109 cpdef _richcmp_(left, right, int op) noexcept:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:2021, in sage.structure.coerce.CoercionModel.richcmp (build/cythonized/sage/structure/coerce.c:26173)()
   2019 # Coerce to a common parent
   2020 try:
-> 2021     x, y = self.canonical_coercion(x, y)
   2022 except (TypeError, NotImplementedError):
   2023     pass

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1422, in sage.structure.coerce.CoercionModel.canonical_coercion (build/cythonized/sage/structure/coerce.c:18956)()
   1420             self._record_exception()
   1421 
-> 1422     raise TypeError("no common canonical parent for objects with parents: '%s' and '%s'"%(xp, yp))
   1423 
   1424 cpdef coercion_maps(self, R, S) noexcept:

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: c=[2,3,4,0,1]
....: m=0
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(2
....: 0)))
....:     m=max(m,P.dimension())
....:     print(v,P.dimension())
....:     if m>0:
....:         break
....: print(m)
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1] 4
4
sage: c=[2,3,4,0,1]
....: m=0
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(2
....: 3)))
....:     m=max(m,P.dimension())
....:     print(v,P.dimension())
....:     if m>0:
....:         break
....: print(m)
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1] 3
3
sage: c=[2,3,4,0,1]
....: m=0
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(2
....: 4)))
....:     m=max(m,P.dimension())
....:     print(v,P.dimension())
....:     if m>0:
....:         break
....: print(m)
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1] 3
3
sage: c=[2,3,4,0,1]
....: m=0
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(2
....: 5)))
....:     m=max(m,P.dimension())
....:     print(v,P.dimension())
....:     if m>0:
....:         break
....: print(m)
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1] 1
1
sage: c=[2,3,4,0,1]
....: m=0
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(2
....: 6)))
....:     m=max(m,P.dimension())
....:     print(v,P.dimension())
....:     if m>0:
....:         break
....: print(m)
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 0] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 1] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 0] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2, 3] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 1] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 1] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2, 3] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 1] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 2] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2, 1] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 2] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 1] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 3, 0] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 3] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 0] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 1] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 2, 3, 4, 2] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 2, 3, 4] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 2, 3, 2] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 2, 3] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 2] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0, 3] 0
[2, 3, 4, 0, 1, 2, 3, 4, 0] 0
[2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1] 0
[2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
[2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1] 0
[2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
[2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1] 0
[2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
[2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1] 0
[2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 2] 0
[2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4] 0
[2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
[2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
[2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 1] 0
[2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 2] 0
[2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3] 0
[2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 1] 0
[2, 3, 4, 0, 1, 2, 3, 4, 1, 2] 0
[2, 3, 4, 0, 1, 2, 3, 4, 1, 3] 0
[2, 3, 4, 0, 1, 2, 3, 4, 1] 0
[2, 3, 4, 0, 1, 2, 3, 4, 2, 3, 4, 2] 0
[2, 3, 4, 0, 1, 2, 3, 4, 2, 3, 4] 0
[2, 3, 4, 0, 1, 2, 3, 4, 2, 3, 2] 0
[2, 3, 4, 0, 1, 2, 3, 4, 2, 3] 0
[2, 3, 4, 0, 1, 2, 3, 4, 2] 0
[2, 3, 4, 0, 1, 2, 3, 4, 3] 0
[2, 3, 4, 0, 1, 2, 3, 4] 0
[2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0] 0
[2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1] 0
[2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0] 0
[2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 1] 0
[2, 3, 4, 0, 1, 2, 3, 0, 1, 2] 0
[2, 3, 4, 0, 1, 2, 3, 0, 1, 0] 0
[2, 3, 4, 0, 1, 2, 3, 0, 1] 0
[2, 3, 4, 0, 1, 2, 3, 0, 2] 0
[2, 3, 4, 0, 1, 2, 3, 0] 0
[2, 3, 4, 0, 1, 2, 3, 1, 2, 1] 0
[2, 3, 4, 0, 1, 2, 3, 1, 2] 0
[2, 3, 4, 0, 1, 2, 3, 1] 0
[2, 3, 4, 0, 1, 2, 3, 2] 0
[2, 3, 4, 0, 1, 2, 3] 0
[2, 3, 4, 0, 1, 2, 0, 1, 0] 0
[2, 3, 4, 0, 1, 2, 0, 1] 0
[2, 3, 4, 0, 1, 2, 0] 0
[2, 3, 4, 0, 1, 2, 1] 0
[2, 3, 4, 0, 1, 2] 0
[2, 3, 4, 0, 1, 3, 4, 0] 0
[2, 3, 4, 0, 1, 3, 4] 0
[2, 3, 4, 0, 1, 3, 0] 0
[2, 3, 4, 0, 1, 3] 0
[2, 3, 4, 0, 1, 0] 0
[2, 3, 4, 0, 1] 0
[2, 3, 4, 0, 2, 3, 4, 2, 3, 4] 0
[2, 3, 4, 0, 2, 3, 4, 2, 3] 0
[2, 3, 4, 0, 2, 3, 4, 2] 0
[2, 3, 4, 0, 2, 3, 4] 0
[2, 3, 4, 0, 2, 3, 2] 0
[2, 3, 4, 0, 2, 3] 0
[2, 3, 4, 0, 2] 0
[2, 3, 4, 0, 3, 4] 0
[2, 3, 4, 0, 3] 0
[2, 3, 4, 0] 0
[2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1] 0
[2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
[2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1] 0
[2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
[2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1] 0
[2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
[2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1] 0
[2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 2] 0
[2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
[2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
[2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
[2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1] 0
[2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 2] 0
[2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
[2, 3, 4, 1, 2, 3, 4, 1, 2, 1] 0
[2, 3, 4, 1, 2, 3, 4, 1, 2] 0
[2, 3, 4, 1, 2, 3, 4, 1, 3] 0
[2, 3, 4, 1, 2, 3, 4, 1] 0
[2, 3, 4, 1, 2, 3, 4, 2, 3, 4, 2] 0
[2, 3, 4, 1, 2, 3, 4, 2, 3, 4] 0
[2, 3, 4, 1, 2, 3, 4, 2, 3, 2] 0
[2, 3, 4, 1, 2, 3, 4, 2, 3] 0
[2, 3, 4, 1, 2, 3, 4, 2] 0
[2, 3, 4, 1, 2, 3, 4, 3] 0
[2, 3, 4, 1, 2, 3, 4] 0
[2, 3, 4, 1, 2, 3, 1, 2, 1] 0
[2, 3, 4, 1, 2, 3, 1, 2] 0
[2, 3, 4, 1, 2, 3, 1] 0
[2, 3, 4, 1, 2, 3, 2] 0
[2, 3, 4, 1, 2, 3] 0
[2, 3, 4, 1, 2, 1] 0
[2, 3, 4, 1, 2] 0
[2, 3, 4, 1, 3, 4] 0
[2, 3, 4, 1, 3] 0
[2, 3, 4, 1] 0
[2, 3, 4, 2, 3, 4, 2, 3, 4] 0
[2, 3, 4, 2, 3, 4, 2, 3] 0
[2, 3, 4, 2, 3, 4, 2] 0
[2, 3, 4, 2, 3, 4] 0
[2, 3, 4, 2, 3, 2] 0
[2, 3, 4, 2, 3] 0
[2, 3, 4, 2] 0
[2, 3, 4, 3, 4] 0
[2, 3, 4, 3] 0
[2, 3, 4] 0
[2, 3, 0, 1, 2, 3, 0, 1, 2, 0] 0
[2, 3, 0, 1, 2, 3, 0, 1, 2] 0
[2, 3, 0, 1, 2, 3, 0, 1, 0] 0
[2, 3, 0, 1, 2, 3, 0, 1] 0
[2, 3, 0, 1, 2, 3, 0] 0
[2, 3, 0, 1, 2, 3, 1] 0
[2, 3, 0, 1, 2, 3] 0
[2, 3, 0, 1, 2, 0, 1, 0] 0
[2, 3, 0, 1, 2, 0, 1] 0
[2, 3, 0, 1, 2, 0] 0
[2, 3, 0, 1, 2, 1] 0
[2, 3, 0, 1, 2] 0
[2, 3, 0, 1, 0] 0
[2, 3, 0, 1] 0
[2, 3, 0, 2] 0
[2, 3, 0] 0
[2, 3, 1, 2, 3, 1] 0
[2, 3, 1, 2, 3] 0
[2, 3, 1, 2, 1] 0
[2, 3, 1, 2] 0
[2, 3, 1] 0
[2, 3, 2] 0
[2, 3] 0
[2, 4, 0, 1, 2, 0, 1] 0
[2, 4, 0, 1, 2, 0] 0
[2, 4, 0, 1, 2] 0
[2, 4, 0, 1, 0] 0
[2, 4, 0, 1] 0
[2, 4, 0] 0
[2, 4, 1, 2] 0
[2, 4, 1] 0
[2, 4] 0
[2, 0, 1, 2, 0, 1] 0
[2, 0, 1, 2, 0] 0
[2, 0, 1, 2] 0
[2, 0, 1, 0] 0
[2, 0, 1] 0
[2, 0] 0
[2, 1, 2] 0
[2, 1] 0
[2] 0
[3, 4, 0, 1, 3, 4, 0] 0
[3, 4, 0, 1, 3, 4] 0
[3, 4, 0, 1, 3, 0] 0
[3, 4, 0, 1, 3] 0
[3, 4, 0, 1, 0] 0
[3, 4, 0, 1] 0
[3, 4, 0, 3, 4] 0
[3, 4, 0, 3] 0
[3, 4, 0] 0
[3, 4, 1, 3, 4] 0
[3, 4, 1, 3] 0
[3, 4, 1] 0
[3, 4, 3, 4] 0
[3, 4, 3] 0
[3, 4] 0
[3, 0, 1, 0] 0
[3, 0, 1] 0
[3, 0] 0
[3, 1] 0
[3] 0
[4, 0, 1, 0] 0
[4, 0, 1] 0
[4, 0] 0
[4, 1] 0
[4] 0
[0, 1, 0] 0
[0, 1] 0
[0] 0
[1] 0
[] 0
0
sage: c=[0,1,2,3,4]
....: m=0
....: for v in sortables(A,c):
....:     if (v==[] or v[0]!=c[0])
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(1
....: 0)))
....:     m=max(m,P.dimension())
....:     print(v,P.dimension())
....:     if m>0:
....:         break
....: print(m)
  Cell In [246], line 4
    if (v==[] or v[Integer(0)]!=c[Integer(0)])
                                              ^
SyntaxError: expected ':'

sage: c=[0,1,2,3,4]
....: m=0
....: for v in sortables(A,c):
....:     if (v==[] or v[0]!=c[0]):
....:         P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in ran
....: ge(10)))
....:         m=max(m,P.dimension())
....:         print(v,P.dimension())
....:         if m>0:
....:             break
....: print(m)
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 4
4
sage: c=[0,1,2,3,4]
....: m=0
....: for v in sortables(A,c):
....:     if (v==[] or v[0]!=c[0]):
....:         P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in ran
....: ge(15)))
....:         m=max(m,P.dimension())
....:         print(v,P.dimension())
....:         if m>0:
....:             break
....: print(m)
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 4
4
sage: c=[0,1,2,3,4]
....: m=0
....: for v in sortables(A,c):
....:     if (v==[] or v[0]!=c[0]):
....:         P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in ran
....: ge(20)))
....:         m=max(m,P.dimension())
....:         print(v,P.dimension())
....:         if m>0:
....:             break
....: print(m)
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 4
4
sage: c=[0,1,2,3,4]
....: m=0
....: for v in sortables(A,c):
....:     if (v==[] or v[0]!=c[0]):
....:         P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in ran
....: ge(23)))
....:         m=max(m,P.dimension())
....:         print(v,P.dimension())
....:         if m>0:
....:             break
....: print(m)
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 3
3
sage: c=[0,1,2,3,4]
....: m=0
....: for v in sortables(A,c):
....:     if (v==[] or v[0]!=c[0]):
....:         P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in ran
....: ge(25)))
....:         m=max(m,P.dimension())
....:         print(v,P.dimension())
....:         if m>0:
....:             break
....: print(m)
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 2
2
sage: c=[0,1,2,3,4]
....: m=0
....: for v in sortables(A,c):
....:     if (v==[] or v[0]!=c[0]):
....:         P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in ran
....: ge(26)))
....:         m=max(m,P.dimension())
....:         print(v,P.dimension())
....:         if m>0:
....:             break
....: print(m)
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 2
2
sage: c=[0,1,2,3,4]
....: m=0
....: for v in sortables(A,c):
....:     if (v==[] or v[0]!=c[0]):
....:         P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in ran
....: ge(27)))
....:         m=max(m,P.dimension())
....:         print(v,P.dimension())
....:         if m>0:
....:             break
....: print(m)
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1] 0
[1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4] 0
[1, 2, 3, 4, 1, 2, 3, 4, 2, 3] 0
[1, 2, 3, 4, 1, 2, 3, 4, 2] 0
[1, 2, 3, 4, 1, 2, 3, 4] 0
[1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
[1, 2, 3, 4, 1, 2, 3, 1, 2] 0
[1, 2, 3, 4, 1, 2, 3, 1] 0
[1, 2, 3, 4, 1, 2, 3, 2] 0
[1, 2, 3, 4, 1, 2, 3] 0
[1, 2, 3, 4, 1, 2, 1] 0
[1, 2, 3, 4, 1, 2] 0
[1, 2, 3, 4, 1, 3, 4] 0
[1, 2, 3, 4, 1, 3] 0
[1, 2, 3, 4, 1] 0
[1, 2, 3, 4, 2, 3, 4, 2, 3, 4] 0
[1, 2, 3, 4, 2, 3, 4, 2, 3] 0
[1, 2, 3, 4, 2, 3, 4, 2] 0
[1, 2, 3, 4, 2, 3, 4] 0
[1, 2, 3, 4, 2, 3, 2] 0
[1, 2, 3, 4, 2, 3] 0
[1, 2, 3, 4, 2] 0
[1, 2, 3, 4, 3, 4] 0
[1, 2, 3, 4, 3] 0
[1, 2, 3, 4] 0
[1, 2, 3, 1, 2, 1] 0
[1, 2, 3, 1, 2] 0
[1, 2, 3, 1] 0
[1, 2, 3, 2] 0
[1, 2, 3] 0
[1, 2, 4, 1] 0
[1, 2, 4] 0
[1, 2, 1] 0
[1, 2] 0
[1, 3, 4, 3, 4] 0
[1, 3, 4, 3] 0
[1, 3, 4] 0
[1, 3] 0
[1, 4] 0
[1] 0
[2, 3, 4, 2, 3, 4, 2, 3, 4] 0
[2, 3, 4, 2, 3, 4, 2, 3] 0
[2, 3, 4, 2, 3, 4, 2] 0
[2, 3, 4, 2, 3, 4] 0
[2, 3, 4, 2, 3, 2] 0
[2, 3, 4, 2, 3] 0
[2, 3, 4, 2] 0
[2, 3, 4, 3, 4] 0
[2, 3, 4, 3] 0
[2, 3, 4] 0
[2, 3, 2] 0
[2, 3] 0
[2, 4] 0
[2] 0
[3, 4, 3, 4] 0
[3, 4, 3] 0
[3, 4] 0
[3] 0
[4] 0
[] 0
0
### detaching file /Users/reading/git/affine_dominance/domination4.py because it does not exist (deleted?) ###
sage: A
[ 2 -1  0  0  0]
[-1  2 -1  0  0]
[ 0 -1  2 -1  0]
[ 0  0 -1  2 -2]
[ 0  0  0 -1  2]
sage: A=CartanMatrix(['C',5])
sage: c=[0,1,2,3,4]
....: m=0
....: for v in sortables(A,c):
....:     if (v==[] or v[0]!=c[0]):
....:         P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in ran
....: ge(27)))
....:         m=max(m,P.dimension())
....:         print(v,P.dimension())
....:         if m>0:
....:             break
....: print(m)
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1] 0
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [256], line 5
      3 for v in sortables(A,c):
      4     if (v==[] or v[Integer(0)]!=c[Integer(0)]):
----> 5         P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(Integer(27))))
      6         m=max(m,P.dimension())
      7         print(v,P.dimension())

File ~/git/affine_dominance/domination4.py:127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_faster(B, la, seqs[0])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_faster(B, la, s))
    128     if P.dimension()==0:
    129         break

File ~/git/affine_dominance/domination4.py:150, in p_lambda_faster(B, la, seq)
    147 Hm = Polyhedron(ieqs=[(0,)*(k+1)+(-1,)+(0,)*(m-k-1)])
    148 #print("Hp:   ",Hp,Hp.vertices(),Hp.rays(),Hp.lines(),"\n")
    149 #print("Hm:   ",Hm,Hm.vertices(),Hm.rays(),Hm.lines(),"\n\n")
--> 150 Pp = P.intersection(Hp)
    151 Pm = P.intersection(Hm)
    152 if Pp.dimension() < rk:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1367, in Polyhedron_base5.intersection(self, other)
   1314 @coerce_binop
   1315 def intersection(self, other):
   1316     r"""
   1317     Return the intersection of one polyhedron with another.
   1318 
   (...)
   1365          defined as the convex hull of 4 vertices
   1366     """
-> 1367     new_ieqs = self.inequalities() + other.inequalities()
   1368     new_eqns = self.equations() + other.equations()
   1369     parent = self.parent()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/misc/cachefunc.pyx:2329, in sage.misc.cachefunc.CachedMethodCallerNoArgs.__call__ (build/cythonized/sage/misc/cachefunc.c:16226)()
   2327 if self.cache is None:
   2328     f = self.f
-> 2329     self.cache = f(self._instance)
   2330 return self.cache
   2331 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:874, in Polyhedron_base0.inequalities(self)
    871         if H.is_inequality():
    872             yield H
--> 874 @cached_method
    875 def inequalities(self):
    876     """
    877     Return all inequalities.
    878 
   (...)
    897         [-6, 0, 1, 1, 1]
    898     """
    899     return tuple(self.inequality_generator())

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: c=[0,1,2,3,4]
....: for v in sortables(A,c):
....:     if (v==[] or v[0]!=c[0]):
....:         P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in ran
....: ge(27)))
....:         if P.dimension()>0
....:             print("FAILURE!",v,P.dimension())
  Cell In [257], line 5
    if P.dimension()>Integer(0)
                               ^
SyntaxError: expected ':'

sage: c=[0,1,2,3,4]
....: for v in sortables(A,c):
....:     if (v==[] or v[0]!=c[0]):
....:         P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in ran
....: ge(27)))
....:         if P.dimension()>0:
....:             print("FAILURE!",v,P.dimension())
....: 
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [258], line 2
      1 c=[Integer(0),Integer(1),Integer(2),Integer(3),Integer(4)]
----> 2 for v in sortables(A,c):
      3     if (v==[] or v[Integer(0)]!=c[Integer(0)]):
      4         P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(Integer(27))))

File ~/git/affine_dominance/domination4.py:264, in sortables(A, c)
    263 def sortables(A,c):
--> 264     yield from sortables_remaining(A,c,[],vector([1]*A.nrows()))

File ~/git/affine_dominance/domination4.py:271, in sortables_remaining(A, c, sort, vec)
    269 else:
    270     if vec[c[0]]>0:
--> 271         yield from sortables_remaining(A,c[1:]+[c[0]],sort+[c[0]],reflect(A,vec,c[0]))
    272     yield from sortables_remaining(A,c[1:],sort,vec)

File ~/git/affine_dominance/domination4.py:271, in sortables_remaining(A, c, sort, vec)
    269 else:
    270     if vec[c[0]]>0:
--> 271         yield from sortables_remaining(A,c[1:]+[c[0]],sort+[c[0]],reflect(A,vec,c[0]))
    272     yield from sortables_remaining(A,c[1:],sort,vec)

    [... skipping similar frames: sortables_remaining at line 271 (9 times)]

File ~/git/affine_dominance/domination4.py:271, in sortables_remaining(A, c, sort, vec)
    269 else:
    270     if vec[c[0]]>0:
--> 271         yield from sortables_remaining(A,c[1:]+[c[0]],sort+[c[0]],reflect(A,vec,c[0]))
    272     yield from sortables_remaining(A,c[1:],sort,vec)

File ~/git/affine_dominance/domination4.py:248, in reflect(A, vec, s)
    247 def reflect(A,vec,s):
--> 248     return vector(vec)-vec[s]*vector(A.column(s))

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:1356, in sage.structure.element.Element.__sub__ (build/cythonized/sage/structure/element.c:19436)()
   1354     return (<Element>left)._sub_(right)
   1355 if BOTH_ARE_ELEMENT(cl):
-> 1356     return coercion_model.bin_op(left, right, sub)
   1357 
   1358 try:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1228, in sage.structure.coerce.CoercionModel.bin_op (build/cythonized/sage/structure/coerce.c:15872)()
   1226 # Now coerce to a common parent and do the operation there
   1227 try:
-> 1228     xy = self.canonical_coercion(x, y)
   1229 except TypeError:
   1230     self._record_exception()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1344, in sage.structure.coerce.CoercionModel.canonical_coercion (build/cythonized/sage/structure/coerce.c:17323)()
   1342     x_elt = x
   1343 if y_map is not None:
-> 1344     y_elt = (<Map>y_map)._call_(y)
   1345 else:
   1346     y_elt = y

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:158, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_ (build/cythonized/sage/structure/coerce_maps.c:6834)()
    156 cdef Parent C = self._codomain
    157 try:
--> 158     return C._element_constructor(x)
    159 except Exception:
    160     if print_warnings:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/modules/free_module.py:2110, in FreeModule_generic._element_constructor_(self, x, coerce, copy, check)
   2107     A = self.ambient_module().sparse_module()
   2108     return A.span(self.basis())
-> 2110 def _element_constructor_(self, x, coerce=True, copy=True, check=True):
   2111     r"""
   2112     Create an element of this free module from ``x``.
   2113 
   (...)
   2151         True
   2152     """
   2153     if (isinstance(x, (int, sage.rings.integer.Integer)) and
   2154         x == 0):

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: c=[0,1,2,3,4]
....: for v in sortables(A,c):
....:     if (v==[] or v[0]!=c[0]):
....:         P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in ran
....: ge(27)))
....:         print(v)
....:         if P.dimension()>0:
....:             print("FAILURE!",P.dimension())
....: 
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1]
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2]
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1]
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1]
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
[1, 2, 3, 4, 1, 2, 3, 4, 1]
[1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4]
[1, 2, 3, 4, 1, 2, 3, 4, 2, 3]
[1, 2, 3, 4, 1, 2, 3, 4, 2]
[1, 2, 3, 4, 1, 2, 3, 4]
[1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
[1, 2, 3, 4, 1, 2, 3, 1, 2]
[1, 2, 3, 4, 1, 2, 3, 1]
[1, 2, 3, 4, 1, 2, 3, 2]
[1, 2, 3, 4, 1, 2, 3]
[1, 2, 3, 4, 1, 2, 1]
[1, 2, 3, 4, 1, 2]
[1, 2, 3, 4, 1, 3, 4]
[1, 2, 3, 4, 1, 3]
[1, 2, 3, 4, 1]
[1, 2, 3, 4, 2, 3, 4, 2, 3, 4]
[1, 2, 3, 4, 2, 3, 4, 2, 3]
[1, 2, 3, 4, 2, 3, 4, 2]
[1, 2, 3, 4, 2, 3, 4]
[1, 2, 3, 4, 2, 3, 2]
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [259], line 4
      2 for v in sortables(A,c):
      3     if (v==[] or v[Integer(0)]!=c[Integer(0)]):
----> 4         P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(Integer(27))))
      5         print(v)
      6         if P.dimension()>Integer(0):

File ~/git/affine_dominance/domination4.py:127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_faster(B, la, seqs[0])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_faster(B, la, s))
    128     if P.dimension()==0:
    129         break

File ~/git/affine_dominance/domination4.py:150, in p_lambda_faster(B, la, seq)
    147 Hm = Polyhedron(ieqs=[(0,)*(k+1)+(-1,)+(0,)*(m-k-1)])
    148 #print("Hp:   ",Hp,Hp.vertices(),Hp.rays(),Hp.lines(),"\n")
    149 #print("Hm:   ",Hm,Hm.vertices(),Hm.rays(),Hm.lines(),"\n\n")
--> 150 Pp = P.intersection(Hp)
    151 Pm = P.intersection(Hm)
    152 if Pp.dimension() < rk:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1371, in Polyhedron_base5.intersection(self, other)
   1369 parent = self.parent()
   1370 try:
-> 1371     intersection = parent.element_class(parent, None, [new_ieqs, new_eqns])
   1373     # Force calculation of the vertices.
   1374     _ = intersection.n_vertices()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:179, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    177 elif Hrep is not None:
    178     ieqs, eqns = Hrep
--> 179     self._init_from_Hrepresentation(ieqs, eqns, **kwds)
    180 else:
    181     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:129, in Polyhedron_ppl._init_from_Hrepresentation(self, ieqs, eqns, minimize, verbose)
    106 def _init_from_Hrepresentation(self, ieqs, eqns, minimize=True, verbose=False):
    107     """
    108     Construct polyhedron from H-representation data.
    109 
   (...)
    127         sage: Polyhedron_ppl._init_from_Hrepresentation(p, [], [])
    128     """
--> 129     cs = self._convert_constraints_to_ppl(ieqs, eqns)
    130     if cs.empty():
    131         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'universe')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:534, in Polyhedron_ppl._convert_constraints_to_ppl(ieqs, eqns)
    532     ieqs = []
    533 for ieq in ieqs:
--> 534     cs.insert(Polyhedron_ppl._convert_constraint_to_ppl(ieq, INEQUALITY))
    535 if eqns is None:
    536     eqns = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:509, in Polyhedron_ppl._convert_constraint_to_ppl(c, typ)
    507 A = dc[1:]
    508 if typ == INEQUALITY:
--> 509     return Linear_Expression(A, b) >= 0
    510 else:
    511     return Linear_Expression(A, b) == 0

File ppl/linear_algebra.pyx:654, in ppl.linear_algebra.Linear_Expression.__init__()

File ppl/linear_algebra.pyx:49, in ppl.linear_algebra.PPL_Coefficient_from_pyobject()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/rings/integer.pyx:914, in sage.rings.integer.Integer.__richcmp__ (build/cythonized/sage/rings/integer.c:16498)()
    912     c = mpz_cmp_d((<Integer>left).value, d)
    913 else:
--> 914     return coercion_model.richcmp(left, right, op)
    915 
    916 return rich_to_bool_sgn(op, c)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:2021, in sage.structure.coerce.CoercionModel.richcmp (build/cythonized/sage/structure/coerce.c:26173)()
   2019 # Coerce to a common parent
   2020 try:
-> 2021     x, y = self.canonical_coercion(x, y)
   2022 except (TypeError, NotImplementedError):
   2023     pass

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1422, in sage.structure.coerce.CoercionModel.canonical_coercion (build/cythonized/sage/structure/coerce.c:18967)()
   1420             self._record_exception()
   1421 
-> 1422     raise TypeError("no common canonical parent for objects with parents: '%s' and '%s'"%(xp, yp))
   1423 
   1424 cpdef coercion_maps(self, R, S) noexcept:

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: c=[0,1,2,3,4]
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range(2
....: 7)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:             print("FAILURE!",P.dimension())
....: 
1 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
2 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3]
3 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2]
4 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1]
5 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0]
6 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
7 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
8 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
9 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
10 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3]
11 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
12 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0]
13 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2]
14 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 0]
15 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1]
16 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0]
17 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4]
18 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3]
19 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2]
20 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1]
21 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
22 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1]
23 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0]
24 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
25 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0]
26 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
27 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
28 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2]
29 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1]
30 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3]
31 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0]
32 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
33 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0]
34 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 1]
35 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2]
36 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 0]
37 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1]
38 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2, 3, 4]
39 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2, 3]
40 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2]
41 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0]
42 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
43 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
44 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
45 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1]
46 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4]
47 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 1, 2]
48 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 1]
49 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3]
50 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 1]
51 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2]
52 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1]
53 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2, 3, 4]
54 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2, 3]
55 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2]
56 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
57 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
58 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1]
59 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0]
60 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 1]
61 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
62 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0]
63 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
64 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 2]
65 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
66 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2, 1]
67 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2]
68 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1]
69 [0, 1, 2, 3, 4, 0, 1, 2, 3, 2]
70 [0, 1, 2, 3, 4, 0, 1, 2, 3]
71 [0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0]
72 [0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
73 [0, 1, 2, 3, 4, 0, 1, 2, 0]
74 [0, 1, 2, 3, 4, 0, 1, 2, 1]
75 [0, 1, 2, 3, 4, 0, 1, 2]
76 [0, 1, 2, 3, 4, 0, 1, 3, 4, 0]
77 [0, 1, 2, 3, 4, 0, 1, 3, 4]
78 [0, 1, 2, 3, 4, 0, 1, 3, 0]
79 [0, 1, 2, 3, 4, 0, 1, 3]
80 [0, 1, 2, 3, 4, 0, 1, 0]
81 [0, 1, 2, 3, 4, 0, 1]
82 [0, 1, 2, 3, 4, 0, 2, 3, 4, 2, 3, 4]
83 [0, 1, 2, 3, 4, 0, 2, 3, 4, 2, 3]
84 [0, 1, 2, 3, 4, 0, 2, 3, 4, 2]
85 [0, 1, 2, 3, 4, 0, 2, 3, 4]
86 [0, 1, 2, 3, 4, 0, 2, 3, 2]
87 [0, 1, 2, 3, 4, 0, 2, 3]
88 [0, 1, 2, 3, 4, 0, 2]
89 [0, 1, 2, 3, 4, 0, 3, 4]
90 [0, 1, 2, 3, 4, 0, 3]
91 [0, 1, 2, 3, 4, 0]
92 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
93 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
94 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
95 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1]
96 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
97 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2]
98 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1]
99 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
100 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1]
101 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
102 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1]
103 [0, 1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4]
104 [0, 1, 2, 3, 4, 1, 2, 3, 4, 2, 3]
105 [0, 1, 2, 3, 4, 1, 2, 3, 4, 2]
106 [0, 1, 2, 3, 4, 1, 2, 3, 4]
107 [0, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
108 [0, 1, 2, 3, 4, 1, 2, 3, 1, 2]
109 [0, 1, 2, 3, 4, 1, 2, 3, 1]
110 [0, 1, 2, 3, 4, 1, 2, 3, 2]
111 [0, 1, 2, 3, 4, 1, 2, 3]
112 [0, 1, 2, 3, 4, 1, 2, 1]
113 [0, 1, 2, 3, 4, 1, 2]
114 [0, 1, 2, 3, 4, 1, 3, 4]
115 [0, 1, 2, 3, 4, 1, 3]
116 [0, 1, 2, 3, 4, 1]
117 [0, 1, 2, 3, 4, 2, 3, 4, 2, 3, 4]
118 [0, 1, 2, 3, 4, 2, 3, 4, 2, 3]
119 [0, 1, 2, 3, 4, 2, 3, 4, 2]
120 [0, 1, 2, 3, 4, 2, 3, 4]
121 [0, 1, 2, 3, 4, 2, 3, 2]
122 [0, 1, 2, 3, 4, 2, 3]
123 [0, 1, 2, 3, 4, 2]
124 [0, 1, 2, 3, 4, 3, 4]
125 [0, 1, 2, 3, 4, 3]
126 [0, 1, 2, 3, 4]
127 [0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
128 [0, 1, 2, 3, 0, 1, 2, 0, 1]
129 [0, 1, 2, 3, 0, 1, 2, 0]
130 [0, 1, 2, 3, 0, 1, 2, 1]
131 [0, 1, 2, 3, 0, 1, 2]
132 [0, 1, 2, 3, 0, 1, 0]
133 [0, 1, 2, 3, 0, 1]
134 [0, 1, 2, 3, 0, 2]
135 [0, 1, 2, 3, 0]
136 [0, 1, 2, 3, 1, 2, 1]
137 [0, 1, 2, 3, 1, 2]
138 [0, 1, 2, 3, 1]
139 [0, 1, 2, 3, 2]
140 [0, 1, 2, 3]
141 [0, 1, 2, 4, 0, 1, 0]
142 [0, 1, 2, 4, 0, 1]
143 [0, 1, 2, 4, 0]
144 [0, 1, 2, 4, 1]
145 [0, 1, 2, 4]
146 [0, 1, 2, 0, 1, 0]
147 [0, 1, 2, 0, 1]
148 [0, 1, 2, 0]
149 [0, 1, 2, 1]
150 [0, 1, 2]
151 [0, 1, 3, 4, 0, 3, 4]
152 [0, 1, 3, 4, 0, 3]
153 [0, 1, 3, 4, 0]
154 [0, 1, 3, 4, 3, 4]
155 [0, 1, 3, 4, 3]
156 [0, 1, 3, 4]
157 [0, 1, 3, 0]
158 [0, 1, 3]
159 [0, 1, 4, 0]
160 [0, 1, 4]
161 [0, 1, 0]
162 [0, 1]
163 [0, 2, 3, 4, 2, 3, 4, 2, 3, 4]
164 [0, 2, 3, 4, 2, 3, 4, 2, 3]
165 [0, 2, 3, 4, 2, 3, 4, 2]
166 [0, 2, 3, 4, 2, 3, 4]
167 [0, 2, 3, 4, 2, 3, 2]
168 [0, 2, 3, 4, 2, 3]
169 [0, 2, 3, 4, 2]
170 [0, 2, 3, 4, 3, 4]
171 [0, 2, 3, 4, 3]
172 [0, 2, 3, 4]
173 [0, 2, 3, 2]
174 [0, 2, 3]
175 [0, 2, 4]
176 [0, 2]
177 [0, 3, 4, 3, 4]
178 [0, 3, 4, 3]
179 [0, 3, 4]
180 [0, 3]
181 [0, 4]
182 [0]
183 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
184 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
185 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
186 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1]
187 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
188 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2]
189 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1]
190 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
191 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1]
192 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
193 [1, 2, 3, 4, 1, 2, 3, 4, 1]
194 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4]
195 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3]
196 [1, 2, 3, 4, 1, 2, 3, 4, 2]
197 [1, 2, 3, 4, 1, 2, 3, 4]
198 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
199 [1, 2, 3, 4, 1, 2, 3, 1, 2]
200 [1, 2, 3, 4, 1, 2, 3, 1]
201 [1, 2, 3, 4, 1, 2, 3, 2]
202 [1, 2, 3, 4, 1, 2, 3]
203 [1, 2, 3, 4, 1, 2, 1]
204 [1, 2, 3, 4, 1, 2]
205 [1, 2, 3, 4, 1, 3, 4]
206 [1, 2, 3, 4, 1, 3]
207 [1, 2, 3, 4, 1]
208 [1, 2, 3, 4, 2, 3, 4, 2, 3, 4]
209 [1, 2, 3, 4, 2, 3, 4, 2, 3]
210 [1, 2, 3, 4, 2, 3, 4, 2]
211 [1, 2, 3, 4, 2, 3, 4]
212 [1, 2, 3, 4, 2, 3, 2]
213 [1, 2, 3, 4, 2, 3]
214 [1, 2, 3, 4, 2]
215 [1, 2, 3, 4, 3, 4]
216 [1, 2, 3, 4, 3]
217 [1, 2, 3, 4]
218 [1, 2, 3, 1, 2, 1]
219 [1, 2, 3, 1, 2]
220 [1, 2, 3, 1]
221 [1, 2, 3, 2]
222 [1, 2, 3]
223 [1, 2, 4, 1]
224 [1, 2, 4]
225 [1, 2, 1]
226 [1, 2]
227 [1, 3, 4, 3, 4]
228 [1, 3, 4, 3]
229 [1, 3, 4]
230 [1, 3]
231 [1, 4]
232 [1]
233 [2, 3, 4, 2, 3, 4, 2, 3, 4]
234 [2, 3, 4, 2, 3, 4, 2, 3]
235 [2, 3, 4, 2, 3, 4, 2]
236 [2, 3, 4, 2, 3, 4]
237 [2, 3, 4, 2, 3, 2]
238 [2, 3, 4, 2, 3]
239 [2, 3, 4, 2]
240 [2, 3, 4, 3, 4]
241 [2, 3, 4, 3]
242 [2, 3, 4]
243 [2, 3, 2]
244 [2, 3]
245 [2, 4]
246 [2]
247 [3, 4, 3, 4]
248 [3, 4, 3]
249 [3, 4]
250 [3]
251 [4]
252 []
sage: A=CartanMatrix(['C',5])
sage: c
[0, 1, 2, 3, 4]
sage: coxnum
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
Cell In [263], line 1
----> 1 coxnum

NameError: name 'coxnum' is not defined
sage: coxnum=10
sage: A=CartanMatrix(['C',5])
sage: c
[0, 1, 2, 3, 4]
sage: coxnum
10
sage: n=1
....: for v in sortables(A,c):
....:     print(n,v)
....:     n+=1
....:     Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in ra
....: nge((coxnum+2)*A.nrows()))
....:     fails=true
....:     for i in range(len(Ps)):
....:         if (Ps[i].intersection(Ps[0])).dimension()==0:
....:             fails=false
....:             break
....:     if fails:
....:         print('FAILS!')
....:         break
....: 
1 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
FAILS!
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: coxnum=8
....: n=1
....: for v in sortables(A,c):
....:     print(n,v)
....:     n+=1
....:     Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in ra
....: nge((coxnum+2)*A.nrows()))
....:     fails=true
....:     for i in range(len(Ps)):
....:         for j in range(i+1,len(Ps)):
....:             if (Ps[i].intersection(Ps[j])).dimension()==0:
....:                 fails=false
....:                 break
....:     if fails:
....:         print('FAILS!')
....:         break
....: 
1 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
2 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1]
3 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0]
4 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 1]
5 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
6 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0]
7 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
8 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 2]
9 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
10 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2, 1]
11 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2]
12 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1]
13 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 2]
14 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3]
15 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0]
16 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
17 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 0]
FAILS!
sage: A=CartanMatrix('C',3)
....: c=[0,1,2]
....: coxnum=6
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range((
....: coxnum+2)*A.nrows())))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:             print("FAILURE!",P.dimension())
....: 
Traceback (most recent call last):

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/IPython/core/interactiveshell.py:3433 in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)

  Cell In [270], line 1
    A=CartanMatrix('C',Integer(3))

  File sage/misc/classcall_metaclass.pyx:320 in sage.misc.classcall_metaclass.ClasscallMetaclass.__call__ (build/cythonized/sage/misc/classcall_metaclass.c:3156)
    return cls.classcall(cls, *args, **kwds)

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/combinat/root_system/cartan_matrix.py:294 in __classcall_private__
    cartan_type = CartanType(data)

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/combinat/root_system/cartan_type.py:612 in __call__
    return CartanType([t[0], eval(t[1:])])

  File <string>
    
    ^
SyntaxError: invalid syntax

sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: coxnum=6
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in range((
....: coxnum+2)*A.nrows())))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:             print("FAILURE!",P.dimension())
....: 
1 [0, 1, 2, 0, 1, 2, 0, 1, 2]
2 [0, 1, 2, 0, 1, 2, 0, 1]
3 [0, 1, 2, 0, 1, 2, 0]
4 [0, 1, 2, 0, 1, 2]
5 [0, 1, 2, 0, 1, 0]
6 [0, 1, 2, 0, 1]
7 [0, 1, 2, 0]
8 [0, 1, 2, 1, 2]
9 [0, 1, 2, 1]
10 [0, 1, 2]
11 [0, 1, 0]
12 [0, 1]
13 [0, 2]
14 [0]
15 [1, 2, 1, 2]
16 [1, 2, 1]
17 [1, 2]
18 [1]
19 [2]
20 []
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: coxnum=6
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),Kprefix(c,coxnum))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:             print("FAILURE!",P.dimension())
....: 
1 [0, 1, 2, 0, 1, 2, 0, 1, 2]
2 [0, 1, 2, 0, 1, 2, 0, 1]
3 [0, 1, 2, 0, 1, 2, 0]
4 [0, 1, 2, 0, 1, 2]
5 [0, 1, 2, 0, 1, 0]
6 [0, 1, 2, 0, 1]
7 [0, 1, 2, 0]
8 [0, 1, 2, 1, 2]
9 [0, 1, 2, 1]
10 [0, 1, 2]
11 [0, 1, 0]
12 [0, 1]
13 [0, 2]
14 [0]
15 [1, 2, 1, 2]
16 [1, 2, 1]
17 [1, 2]
18 [1]
19 [2]
20 []
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: coxnum=8
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),Kprefix(c,coxnum))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:             print("FAILURE!",P.dimension())
....: 
1 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]
2 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2]
3 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1]
4 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0]
5 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]
6 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 0, 1]
7 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 0]
8 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2]
9 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 0]
10 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1]
11 [0, 1, 2, 3, 0, 1, 2, 3, 0]
12 [0, 1, 2, 3, 0, 1, 2, 3, 1, 2, 3]
13 [0, 1, 2, 3, 0, 1, 2, 3, 1, 2]
14 [0, 1, 2, 3, 0, 1, 2, 3, 1]
15 [0, 1, 2, 3, 0, 1, 2, 3]
16 [0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
17 [0, 1, 2, 3, 0, 1, 2, 0, 1]
18 [0, 1, 2, 3, 0, 1, 2, 0]
19 [0, 1, 2, 3, 0, 1, 2, 1]
20 [0, 1, 2, 3, 0, 1, 2]
21 [0, 1, 2, 3, 0, 1, 0]
22 [0, 1, 2, 3, 0, 1]
23 [0, 1, 2, 3, 0, 2, 3]
24 [0, 1, 2, 3, 0, 2]
25 [0, 1, 2, 3, 0]
26 [0, 1, 2, 3, 1, 2, 3, 1, 2, 3]
27 [0, 1, 2, 3, 1, 2, 3, 1, 2]
28 [0, 1, 2, 3, 1, 2, 3, 1]
29 [0, 1, 2, 3, 1, 2, 3]
30 [0, 1, 2, 3, 1, 2, 1]
31 [0, 1, 2, 3, 1, 2]
32 [0, 1, 2, 3, 1]
33 [0, 1, 2, 3, 2, 3]
34 [0, 1, 2, 3, 2]
35 [0, 1, 2, 3]
36 [0, 1, 2, 0, 1, 0]
37 [0, 1, 2, 0, 1]
38 [0, 1, 2, 0]
39 [0, 1, 2, 1]
40 [0, 1, 2]
41 [0, 1, 3, 0]
42 [0, 1, 3]
43 [0, 1, 0]
44 [0, 1]
45 [0, 2, 3, 2, 3]
46 [0, 2, 3, 2]
47 [0, 2, 3]
48 [0, 2]
49 [0, 3]
50 [0]
51 [1, 2, 3, 1, 2, 3, 1, 2, 3]
52 [1, 2, 3, 1, 2, 3, 1, 2]
53 [1, 2, 3, 1, 2, 3, 1]
54 [1, 2, 3, 1, 2, 3]
55 [1, 2, 3, 1, 2, 1]
56 [1, 2, 3, 1, 2]
57 [1, 2, 3, 1]
58 [1, 2, 3, 2, 3]
59 [1, 2, 3, 2]
60 [1, 2, 3]
61 [1, 2, 1]
62 [1, 2]
63 [1, 3]
64 [1]
65 [2, 3, 2, 3]
66 [2, 3, 2]
67 [2, 3]
68 [2]
69 [3]
70 []
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: coxnum=8
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),Kprefix(c,coxnum))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:             print("FAILURE!",P.dimension())
....: 
1 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
2 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3]
3 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2]
4 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1]
5 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0]
6 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
7 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
8 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
9 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
10 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3]
11 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
12 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0]
13 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2]
14 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 0]
15 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1]
16 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0]
17 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4]
18 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3]
19 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2]
20 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1]
21 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
22 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1]
23 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0]
24 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
25 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0]
26 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
27 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
28 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2]
29 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1]
30 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3]
31 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0]
32 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
33 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0]
34 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 1]
35 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2]
36 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 0]
37 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1]
38 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2, 3, 4]
39 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2, 3]
40 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2]
41 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0]
42 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
43 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
44 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
45 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1]
46 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4]
47 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 1, 2]
48 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 1]
49 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3]
50 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 1]
51 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2]
52 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1]
53 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2, 3, 4]
54 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2, 3]
55 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2]
56 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
57 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
58 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1]
59 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0]
60 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 1]
61 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
62 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0]
63 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
64 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 2]
65 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
66 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2, 1]
67 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2]
68 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1]
69 [0, 1, 2, 3, 4, 0, 1, 2, 3, 2]
70 [0, 1, 2, 3, 4, 0, 1, 2, 3]
71 [0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0]
72 [0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
73 [0, 1, 2, 3, 4, 0, 1, 2, 0]
74 [0, 1, 2, 3, 4, 0, 1, 2, 1]
75 [0, 1, 2, 3, 4, 0, 1, 2]
76 [0, 1, 2, 3, 4, 0, 1, 3, 4, 0]
77 [0, 1, 2, 3, 4, 0, 1, 3, 4]
78 [0, 1, 2, 3, 4, 0, 1, 3, 0]
79 [0, 1, 2, 3, 4, 0, 1, 3]
80 [0, 1, 2, 3, 4, 0, 1, 0]
81 [0, 1, 2, 3, 4, 0, 1]
82 [0, 1, 2, 3, 4, 0, 2, 3, 4, 2, 3, 4]
83 [0, 1, 2, 3, 4, 0, 2, 3, 4, 2, 3]
84 [0, 1, 2, 3, 4, 0, 2, 3, 4, 2]
85 [0, 1, 2, 3, 4, 0, 2, 3, 4]
86 [0, 1, 2, 3, 4, 0, 2, 3, 2]
87 [0, 1, 2, 3, 4, 0, 2, 3]
88 [0, 1, 2, 3, 4, 0, 2]
89 [0, 1, 2, 3, 4, 0, 3, 4]
90 [0, 1, 2, 3, 4, 0, 3]
91 [0, 1, 2, 3, 4, 0]
92 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
93 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
94 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
95 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1]
96 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
97 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2]
98 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1]
99 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
100 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1]
101 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
102 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1]
103 [0, 1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4]
104 [0, 1, 2, 3, 4, 1, 2, 3, 4, 2, 3]
105 [0, 1, 2, 3, 4, 1, 2, 3, 4, 2]
106 [0, 1, 2, 3, 4, 1, 2, 3, 4]
107 [0, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
108 [0, 1, 2, 3, 4, 1, 2, 3, 1, 2]
109 [0, 1, 2, 3, 4, 1, 2, 3, 1]
110 [0, 1, 2, 3, 4, 1, 2, 3, 2]
111 [0, 1, 2, 3, 4, 1, 2, 3]
112 [0, 1, 2, 3, 4, 1, 2, 1]
113 [0, 1, 2, 3, 4, 1, 2]
114 [0, 1, 2, 3, 4, 1, 3, 4]
115 [0, 1, 2, 3, 4, 1, 3]
116 [0, 1, 2, 3, 4, 1]
117 [0, 1, 2, 3, 4, 2, 3, 4, 2, 3, 4]
118 [0, 1, 2, 3, 4, 2, 3, 4, 2, 3]
119 [0, 1, 2, 3, 4, 2, 3, 4, 2]
120 [0, 1, 2, 3, 4, 2, 3, 4]
121 [0, 1, 2, 3, 4, 2, 3, 2]
122 [0, 1, 2, 3, 4, 2, 3]
123 [0, 1, 2, 3, 4, 2]
124 [0, 1, 2, 3, 4, 3, 4]
125 [0, 1, 2, 3, 4, 3]
126 [0, 1, 2, 3, 4]
127 [0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
128 [0, 1, 2, 3, 0, 1, 2, 0, 1]
129 [0, 1, 2, 3, 0, 1, 2, 0]
130 [0, 1, 2, 3, 0, 1, 2, 1]
131 [0, 1, 2, 3, 0, 1, 2]
132 [0, 1, 2, 3, 0, 1, 0]
133 [0, 1, 2, 3, 0, 1]
134 [0, 1, 2, 3, 0, 2]
135 [0, 1, 2, 3, 0]
136 [0, 1, 2, 3, 1, 2, 1]
137 [0, 1, 2, 3, 1, 2]
138 [0, 1, 2, 3, 1]
139 [0, 1, 2, 3, 2]
140 [0, 1, 2, 3]
141 [0, 1, 2, 4, 0, 1, 0]
142 [0, 1, 2, 4, 0, 1]
143 [0, 1, 2, 4, 0]
144 [0, 1, 2, 4, 1]
145 [0, 1, 2, 4]
146 [0, 1, 2, 0, 1, 0]
147 [0, 1, 2, 0, 1]
148 [0, 1, 2, 0]
149 [0, 1, 2, 1]
150 [0, 1, 2]
151 [0, 1, 3, 4, 0, 3, 4]
152 [0, 1, 3, 4, 0, 3]
153 [0, 1, 3, 4, 0]
154 [0, 1, 3, 4, 3, 4]
155 [0, 1, 3, 4, 3]
156 [0, 1, 3, 4]
157 [0, 1, 3, 0]
158 [0, 1, 3]
159 [0, 1, 4, 0]
160 [0, 1, 4]
161 [0, 1, 0]
162 [0, 1]
163 [0, 2, 3, 4, 2, 3, 4, 2, 3, 4]
164 [0, 2, 3, 4, 2, 3, 4, 2, 3]
165 [0, 2, 3, 4, 2, 3, 4, 2]
166 [0, 2, 3, 4, 2, 3, 4]
167 [0, 2, 3, 4, 2, 3, 2]
168 [0, 2, 3, 4, 2, 3]
169 [0, 2, 3, 4, 2]
170 [0, 2, 3, 4, 3, 4]
171 [0, 2, 3, 4, 3]
172 [0, 2, 3, 4]
173 [0, 2, 3, 2]
174 [0, 2, 3]
175 [0, 2, 4]
176 [0, 2]
177 [0, 3, 4, 3, 4]
178 [0, 3, 4, 3]
179 [0, 3, 4]
180 [0, 3]
181 [0, 4]
182 [0]
183 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
184 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
185 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
186 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1]
187 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
188 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2]
189 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1]
190 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
191 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1]
192 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
193 [1, 2, 3, 4, 1, 2, 3, 4, 1]
194 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4]
195 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3]
196 [1, 2, 3, 4, 1, 2, 3, 4, 2]
197 [1, 2, 3, 4, 1, 2, 3, 4]
198 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
199 [1, 2, 3, 4, 1, 2, 3, 1, 2]
200 [1, 2, 3, 4, 1, 2, 3, 1]
201 [1, 2, 3, 4, 1, 2, 3, 2]
202 [1, 2, 3, 4, 1, 2, 3]
203 [1, 2, 3, 4, 1, 2, 1]
204 [1, 2, 3, 4, 1, 2]
205 [1, 2, 3, 4, 1, 3, 4]
206 [1, 2, 3, 4, 1, 3]
207 [1, 2, 3, 4, 1]
208 [1, 2, 3, 4, 2, 3, 4, 2, 3, 4]
209 [1, 2, 3, 4, 2, 3, 4, 2, 3]
210 [1, 2, 3, 4, 2, 3, 4, 2]
211 [1, 2, 3, 4, 2, 3, 4]
212 [1, 2, 3, 4, 2, 3, 2]
213 [1, 2, 3, 4, 2, 3]
214 [1, 2, 3, 4, 2]
215 [1, 2, 3, 4, 3, 4]
216 [1, 2, 3, 4, 3]
217 [1, 2, 3, 4]
218 [1, 2, 3, 1, 2, 1]
219 [1, 2, 3, 1, 2]
220 [1, 2, 3, 1]
221 [1, 2, 3, 2]
222 [1, 2, 3]
223 [1, 2, 4, 1]
224 [1, 2, 4]
225 [1, 2, 1]
226 [1, 2]
227 [1, 3, 4, 3, 4]
228 [1, 3, 4, 3]
229 [1, 3, 4]
230 [1, 3]
231 [1, 4]
232 [1]
233 [2, 3, 4, 2, 3, 4, 2, 3, 4]
234 [2, 3, 4, 2, 3, 4, 2, 3]
235 [2, 3, 4, 2, 3, 4, 2]
236 [2, 3, 4, 2, 3, 4]
237 [2, 3, 4, 2, 3, 2]
238 [2, 3, 4, 2, 3]
239 [2, 3, 4, 2]
240 [2, 3, 4, 3, 4]
241 [2, 3, 4, 3]
242 [2, 3, 4]
243 [2, 3, 2]
244 [2, 3]
245 [2, 4]
246 [2]
247 [3, 4, 3, 4]
248 [3, 4, 3]
249 [3, 4]
250 [3]
251 [4]
252 []
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: coxnum=6
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()) for i
....: in range(coxnum+2)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:             print("FAILURE!",P.dimension())
....: 
1 [0, 1, 2, 0, 1, 2, 0, 1, 2]
FAILURE! 1
2 [0, 1, 2, 0, 1, 2, 0, 1]
FAILURE! 1
3 [0, 1, 2, 0, 1, 2, 0]
FAILURE! 1
4 [0, 1, 2, 0, 1, 2]
FAILURE! 1
5 [0, 1, 2, 0, 1, 0]
FAILURE! 1
6 [0, 1, 2, 0, 1]
FAILURE! 1
7 [0, 1, 2, 0]
FAILURE! 1
8 [0, 1, 2, 1, 2]
9 [0, 1, 2, 1]
10 [0, 1, 2]
FAILURE! 1
11 [0, 1, 0]
FAILURE! 1
12 [0, 1]
FAILURE! 1
13 [0, 2]
FAILURE! 1
14 [0]
FAILURE! 1
15 [1, 2, 1, 2]
FAILURE! 1
16 [1, 2, 1]
FAILURE! 1
17 [1, 2]
18 [1]
19 [2]
FAILURE! 1
20 []
FAILURE! 1
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: coxnum=6
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+1) for
....: i in range(coxnum+2)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:             print("FAILURE!",P.dimension())
....: 
1 [0, 1, 2, 0, 1, 2, 0, 1, 2]
2 [0, 1, 2, 0, 1, 2, 0, 1]
3 [0, 1, 2, 0, 1, 2, 0]
4 [0, 1, 2, 0, 1, 2]
5 [0, 1, 2, 0, 1, 0]
6 [0, 1, 2, 0, 1]
7 [0, 1, 2, 0]
8 [0, 1, 2, 1, 2]
9 [0, 1, 2, 1]
10 [0, 1, 2]
11 [0, 1, 0]
12 [0, 1]
13 [0, 2]
14 [0]
15 [1, 2, 1, 2]
16 [1, 2, 1]
17 [1, 2]
18 [1]
19 [2]
20 []
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: coxnum=8
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+1) for
....: i in range(coxnum+2)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:             print("FAILURE!",P.dimension())
....: 
1 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]
2 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2]
3 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1]
4 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0]
5 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]
6 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 0, 1]
7 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 0]
8 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2]
9 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 0]
10 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1]
11 [0, 1, 2, 3, 0, 1, 2, 3, 0]
12 [0, 1, 2, 3, 0, 1, 2, 3, 1, 2, 3]
13 [0, 1, 2, 3, 0, 1, 2, 3, 1, 2]
14 [0, 1, 2, 3, 0, 1, 2, 3, 1]
15 [0, 1, 2, 3, 0, 1, 2, 3]
16 [0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
17 [0, 1, 2, 3, 0, 1, 2, 0, 1]
18 [0, 1, 2, 3, 0, 1, 2, 0]
19 [0, 1, 2, 3, 0, 1, 2, 1]
20 [0, 1, 2, 3, 0, 1, 2]
21 [0, 1, 2, 3, 0, 1, 0]
22 [0, 1, 2, 3, 0, 1]
23 [0, 1, 2, 3, 0, 2, 3]
24 [0, 1, 2, 3, 0, 2]
25 [0, 1, 2, 3, 0]
26 [0, 1, 2, 3, 1, 2, 3, 1, 2, 3]
27 [0, 1, 2, 3, 1, 2, 3, 1, 2]
28 [0, 1, 2, 3, 1, 2, 3, 1]
29 [0, 1, 2, 3, 1, 2, 3]
30 [0, 1, 2, 3, 1, 2, 1]
31 [0, 1, 2, 3, 1, 2]
32 [0, 1, 2, 3, 1]
33 [0, 1, 2, 3, 2, 3]
34 [0, 1, 2, 3, 2]
35 [0, 1, 2, 3]
36 [0, 1, 2, 0, 1, 0]
37 [0, 1, 2, 0, 1]
38 [0, 1, 2, 0]
39 [0, 1, 2, 1]
40 [0, 1, 2]
41 [0, 1, 3, 0]
42 [0, 1, 3]
43 [0, 1, 0]
44 [0, 1]
45 [0, 2, 3, 2, 3]
46 [0, 2, 3, 2]
47 [0, 2, 3]
48 [0, 2]
49 [0, 3]
50 [0]
51 [1, 2, 3, 1, 2, 3, 1, 2, 3]
52 [1, 2, 3, 1, 2, 3, 1, 2]
53 [1, 2, 3, 1, 2, 3, 1]
54 [1, 2, 3, 1, 2, 3]
55 [1, 2, 3, 1, 2, 1]
56 [1, 2, 3, 1, 2]
57 [1, 2, 3, 1]
58 [1, 2, 3, 2, 3]
59 [1, 2, 3, 2]
60 [1, 2, 3]
61 [1, 2, 1]
62 [1, 2]
63 [1, 3]
64 [1]
65 [2, 3, 2, 3]
66 [2, 3, 2]
67 [2, 3]
68 [2]
69 [3]
70 []
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: coxnum=10
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+1) for
....: i in range(coxnum+2)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:             print("FAILURE!",P.dimension())
....: 
1 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
2 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3]
3 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2]
4 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1]
5 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0]
6 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
7 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
8 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
9 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
10 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3]
11 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
12 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0]
13 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2]
14 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 0]
15 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1]
16 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0]
17 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4]
18 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3]
19 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2]
20 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1]
21 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
22 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1]
23 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0]
24 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
25 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0]
26 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
27 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
28 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2]
29 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1]
30 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3]
31 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0]
32 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
33 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0]
34 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 1]
35 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2]
36 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 0]
37 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1]
38 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2, 3, 4]
39 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2, 3]
40 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2]
41 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0]
42 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
43 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
44 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
45 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1]
46 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4]
47 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 1, 2]
48 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 1]
49 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3]
50 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 1]
51 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2]
52 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1]
53 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2, 3, 4]
54 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2, 3]
55 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2]
56 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
57 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
58 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1]
59 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0]
60 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 1]
61 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
62 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0]
63 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
64 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 2]
65 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
66 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2, 1]
67 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2]
68 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1]
69 [0, 1, 2, 3, 4, 0, 1, 2, 3, 2]
70 [0, 1, 2, 3, 4, 0, 1, 2, 3]
71 [0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0]
72 [0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
73 [0, 1, 2, 3, 4, 0, 1, 2, 0]
74 [0, 1, 2, 3, 4, 0, 1, 2, 1]
75 [0, 1, 2, 3, 4, 0, 1, 2]
76 [0, 1, 2, 3, 4, 0, 1, 3, 4, 0]
77 [0, 1, 2, 3, 4, 0, 1, 3, 4]
78 [0, 1, 2, 3, 4, 0, 1, 3, 0]
79 [0, 1, 2, 3, 4, 0, 1, 3]
80 [0, 1, 2, 3, 4, 0, 1, 0]
81 [0, 1, 2, 3, 4, 0, 1]
82 [0, 1, 2, 3, 4, 0, 2, 3, 4, 2, 3, 4]
83 [0, 1, 2, 3, 4, 0, 2, 3, 4, 2, 3]
84 [0, 1, 2, 3, 4, 0, 2, 3, 4, 2]
85 [0, 1, 2, 3, 4, 0, 2, 3, 4]
86 [0, 1, 2, 3, 4, 0, 2, 3, 2]
87 [0, 1, 2, 3, 4, 0, 2, 3]
88 [0, 1, 2, 3, 4, 0, 2]
89 [0, 1, 2, 3, 4, 0, 3, 4]
90 [0, 1, 2, 3, 4, 0, 3]
91 [0, 1, 2, 3, 4, 0]
92 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
93 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
94 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
95 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1]
96 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
97 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2]
98 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1]
99 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
100 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1]
101 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
102 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1]
103 [0, 1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4]
104 [0, 1, 2, 3, 4, 1, 2, 3, 4, 2, 3]
105 [0, 1, 2, 3, 4, 1, 2, 3, 4, 2]
106 [0, 1, 2, 3, 4, 1, 2, 3, 4]
107 [0, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
108 [0, 1, 2, 3, 4, 1, 2, 3, 1, 2]
109 [0, 1, 2, 3, 4, 1, 2, 3, 1]
110 [0, 1, 2, 3, 4, 1, 2, 3, 2]
111 [0, 1, 2, 3, 4, 1, 2, 3]
112 [0, 1, 2, 3, 4, 1, 2, 1]
113 [0, 1, 2, 3, 4, 1, 2]
114 [0, 1, 2, 3, 4, 1, 3, 4]
115 [0, 1, 2, 3, 4, 1, 3]
116 [0, 1, 2, 3, 4, 1]
117 [0, 1, 2, 3, 4, 2, 3, 4, 2, 3, 4]
118 [0, 1, 2, 3, 4, 2, 3, 4, 2, 3]
119 [0, 1, 2, 3, 4, 2, 3, 4, 2]
120 [0, 1, 2, 3, 4, 2, 3, 4]
121 [0, 1, 2, 3, 4, 2, 3, 2]
122 [0, 1, 2, 3, 4, 2, 3]
123 [0, 1, 2, 3, 4, 2]
124 [0, 1, 2, 3, 4, 3, 4]
125 [0, 1, 2, 3, 4, 3]
126 [0, 1, 2, 3, 4]
127 [0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
128 [0, 1, 2, 3, 0, 1, 2, 0, 1]
129 [0, 1, 2, 3, 0, 1, 2, 0]
130 [0, 1, 2, 3, 0, 1, 2, 1]
131 [0, 1, 2, 3, 0, 1, 2]
132 [0, 1, 2, 3, 0, 1, 0]
133 [0, 1, 2, 3, 0, 1]
134 [0, 1, 2, 3, 0, 2]
135 [0, 1, 2, 3, 0]
136 [0, 1, 2, 3, 1, 2, 1]
137 [0, 1, 2, 3, 1, 2]
138 [0, 1, 2, 3, 1]
139 [0, 1, 2, 3, 2]
140 [0, 1, 2, 3]
141 [0, 1, 2, 4, 0, 1, 0]
142 [0, 1, 2, 4, 0, 1]
143 [0, 1, 2, 4, 0]
144 [0, 1, 2, 4, 1]
145 [0, 1, 2, 4]
146 [0, 1, 2, 0, 1, 0]
147 [0, 1, 2, 0, 1]
148 [0, 1, 2, 0]
149 [0, 1, 2, 1]
150 [0, 1, 2]
151 [0, 1, 3, 4, 0, 3, 4]
152 [0, 1, 3, 4, 0, 3]
153 [0, 1, 3, 4, 0]
154 [0, 1, 3, 4, 3, 4]
155 [0, 1, 3, 4, 3]
156 [0, 1, 3, 4]
157 [0, 1, 3, 0]
158 [0, 1, 3]
159 [0, 1, 4, 0]
160 [0, 1, 4]
161 [0, 1, 0]
162 [0, 1]
163 [0, 2, 3, 4, 2, 3, 4, 2, 3, 4]
164 [0, 2, 3, 4, 2, 3, 4, 2, 3]
165 [0, 2, 3, 4, 2, 3, 4, 2]
166 [0, 2, 3, 4, 2, 3, 4]
167 [0, 2, 3, 4, 2, 3, 2]
168 [0, 2, 3, 4, 2, 3]
169 [0, 2, 3, 4, 2]
170 [0, 2, 3, 4, 3, 4]
171 [0, 2, 3, 4, 3]
172 [0, 2, 3, 4]
173 [0, 2, 3, 2]
174 [0, 2, 3]
175 [0, 2, 4]
176 [0, 2]
177 [0, 3, 4, 3, 4]
178 [0, 3, 4, 3]
179 [0, 3, 4]
180 [0, 3]
181 [0, 4]
182 [0]
183 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
184 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
185 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
186 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1]
187 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
188 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2]
189 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1]
190 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
191 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1]
192 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
193 [1, 2, 3, 4, 1, 2, 3, 4, 1]
194 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4]
195 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3]
196 [1, 2, 3, 4, 1, 2, 3, 4, 2]
197 [1, 2, 3, 4, 1, 2, 3, 4]
198 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
199 [1, 2, 3, 4, 1, 2, 3, 1, 2]
200 [1, 2, 3, 4, 1, 2, 3, 1]
201 [1, 2, 3, 4, 1, 2, 3, 2]
202 [1, 2, 3, 4, 1, 2, 3]
203 [1, 2, 3, 4, 1, 2, 1]
204 [1, 2, 3, 4, 1, 2]
205 [1, 2, 3, 4, 1, 3, 4]
206 [1, 2, 3, 4, 1, 3]
207 [1, 2, 3, 4, 1]
208 [1, 2, 3, 4, 2, 3, 4, 2, 3, 4]
209 [1, 2, 3, 4, 2, 3, 4, 2, 3]
210 [1, 2, 3, 4, 2, 3, 4, 2]
211 [1, 2, 3, 4, 2, 3, 4]
212 [1, 2, 3, 4, 2, 3, 2]
213 [1, 2, 3, 4, 2, 3]
214 [1, 2, 3, 4, 2]
215 [1, 2, 3, 4, 3, 4]
216 [1, 2, 3, 4, 3]
217 [1, 2, 3, 4]
218 [1, 2, 3, 1, 2, 1]
219 [1, 2, 3, 1, 2]
220 [1, 2, 3, 1]
221 [1, 2, 3, 2]
222 [1, 2, 3]
223 [1, 2, 4, 1]
224 [1, 2, 4]
225 [1, 2, 1]
226 [1, 2]
227 [1, 3, 4, 3, 4]
228 [1, 3, 4, 3]
229 [1, 3, 4]
230 [1, 3]
231 [1, 4]
232 [1]
233 [2, 3, 4, 2, 3, 4, 2, 3, 4]
234 [2, 3, 4, 2, 3, 4, 2, 3]
235 [2, 3, 4, 2, 3, 4, 2]
236 [2, 3, 4, 2, 3, 4]
237 [2, 3, 4, 2, 3, 2]
238 [2, 3, 4, 2, 3]
239 [2, 3, 4, 2]
240 [2, 3, 4, 3, 4]
241 [2, 3, 4, 3]
242 [2, 3, 4]
243 [2, 3, 2]
244 [2, 3]
245 [2, 4]
246 [2]
247 [3, 4, 3, 4]
248 [3, 4, 3]
249 [3, 4]
250 [3]
251 [4]
252 []
sage: A=CartanMatrix(['C',6])
....: c=[0,1,2,3,4,5]
....: coxnum=12
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+1) for
....: i in range(coxnum+2)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:             print("FAILURE!",P.dimension())
....: 
1 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5]
2 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4]
3 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3]
4 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2]
5 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1]
6 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0]
7 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5]
8 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3]
9 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2]
10 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1]
11 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0]
12 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4]
13 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2]
14 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1]
15 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0]
16 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3]
17 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 0, 1]
18 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 0]
19 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2]
20 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 0]
21 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1]
22 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0]
23 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]
24 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4]
25 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3]
26 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2]
27 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1]
28 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5]
29 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
30 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
31 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
32 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3]
33 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
34 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 0]
35 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2]
36 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 0]
37 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1]
38 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0]
39 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3]
40 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2]
41 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1]
42 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4]
43 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 0, 1]
44 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 0]
45 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2]
46 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 0]
47 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1]
48 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0]
49 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 1, 2]
50 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 1]
51 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3]
52 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 0, 1, 0]
53 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 0, 1]
54 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 0]
55 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 1]
56 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2]
57 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 0]
58 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1]
59 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5]
60 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 2, 3, 4]
61 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 2, 3]
62 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 2]
63 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0]
64 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]
65 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4]
66 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3]
67 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2]
68 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1]
69 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]
70 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3]
71 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2]
72 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1]
73 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4]
74 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2]
75 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 1]
76 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3]
77 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 1]
78 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2]
79 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1]
80 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 2, 3, 4, 5]
81 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 2, 3, 4]
82 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 2, 3]
83 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 2]
84 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5]
85 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1]
86 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0]
87 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
88 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0]
89 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
90 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
91 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2]
92 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1]
93 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3]
94 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0]
95 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
96 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 0]
97 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 1]
98 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2]
99 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 0]
100 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1]
101 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 2, 3]
102 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 2]
103 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0]
104 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3, 1, 2]
105 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3, 1]
106 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3]
107 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 1]
108 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2]
109 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1]
110 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 2, 3]
111 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 2]
112 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4]
113 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
114 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 0, 1]
115 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 0]
116 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 1]
117 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2]
118 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 0]
119 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1]
120 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 2]
121 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0]
122 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 1, 2, 1]
123 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 1, 2]
124 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 1]
125 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 2]
126 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3]
127 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 0, 1, 0]
128 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 0, 1]
129 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 0]
130 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 1]
131 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2]
132 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 5, 0]
133 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 5]
134 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 0]
135 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 3, 4]
136 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 3, 0]
137 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 3]
138 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 0]
139 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1]
140 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 2, 3, 4, 5]
141 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 2, 3, 4]
142 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 2, 3]
143 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 2]
144 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5]
145 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 2, 3]
146 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 2]
147 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 2, 3, 4]
148 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 2, 3, 2]
149 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 2, 3]
150 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 2]
151 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 3, 4, 5]
152 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 3, 4]
153 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 3]
154 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0]
155 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]
156 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4]
157 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3]
158 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2]
159 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1]
160 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]
161 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3]
162 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2]
163 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1]
164 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4]
165 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2]
166 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1]
167 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3]
168 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 1]
169 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2]
170 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1]
171 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5]
172 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4]
173 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3]
174 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2]
175 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]
176 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2]
177 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1]
178 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3]
179 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1]
180 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2]
181 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1]
182 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3]
183 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2]
184 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4]
185 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1]
186 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2]
187 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 1]
188 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 2]
189 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3]
190 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 1]
191 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2]
192 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 3, 4, 5]
193 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 3, 4]
194 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 3]
195 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1]
196 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5]
197 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4]
198 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3]
199 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2]
200 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 2, 3, 4, 5]
201 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 2, 3, 4, 2, 3]
202 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 2, 3, 4, 2]
203 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 2, 3, 4]
204 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 2, 3, 2]
205 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 2, 3]
206 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 2]
207 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 3, 4, 5]
208 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 3, 4]
209 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 3]
210 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5]
211 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
212 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1]
213 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0]
214 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 1]
215 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
216 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0]
217 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
218 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 2]
219 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
220 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2, 1]
221 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2]
222 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1]
223 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 2]
224 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3]
225 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0]
226 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
227 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 0]
228 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 1]
229 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2]
230 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 3, 0]
231 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 3]
232 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 0]
233 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1]
234 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 2, 3, 2]
235 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 2, 3]
236 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 2]
237 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 3]
238 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0]
239 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
240 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3, 1, 2]
241 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3, 1]
242 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3, 2]
243 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3]
244 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 1]
245 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2]
246 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 3]
247 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1]
248 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 2, 3, 2]
249 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 2, 3]
250 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 2]
251 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 3]
252 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4]
253 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
254 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 0, 1]
255 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 0]
256 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 1]
257 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2]
258 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 0]
259 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1]
260 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 2]
261 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0]
262 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 1, 2, 1]
263 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 1, 2]
264 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 1]
265 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 2]
266 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3]
267 [0, 1, 2, 3, 4, 5, 0, 1, 2, 4, 5, 0, 1, 0]
268 [0, 1, 2, 3, 4, 5, 0, 1, 2, 4, 5, 0, 1]
269 [0, 1, 2, 3, 4, 5, 0, 1, 2, 4, 5, 0]
270 [0, 1, 2, 3, 4, 5, 0, 1, 2, 4, 5, 1]
271 [0, 1, 2, 3, 4, 5, 0, 1, 2, 4, 5]
272 [0, 1, 2, 3, 4, 5, 0, 1, 2, 4, 0, 1, 0]
273 [0, 1, 2, 3, 4, 5, 0, 1, 2, 4, 0, 1]
274 [0, 1, 2, 3, 4, 5, 0, 1, 2, 4, 0]
275 [0, 1, 2, 3, 4, 5, 0, 1, 2, 4, 1]
276 [0, 1, 2, 3, 4, 5, 0, 1, 2, 4]
277 [0, 1, 2, 3, 4, 5, 0, 1, 2, 0, 1, 0]
278 [0, 1, 2, 3, 4, 5, 0, 1, 2, 0, 1]
279 [0, 1, 2, 3, 4, 5, 0, 1, 2, 0]
280 [0, 1, 2, 3, 4, 5, 0, 1, 2, 1]
281 [0, 1, 2, 3, 4, 5, 0, 1, 2]
282 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 5, 0, 3, 4, 5]
283 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 5, 0, 3, 4]
284 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 5, 0, 3]
285 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 5, 0]
286 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 5, 3, 4, 5]
287 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 5, 3, 4]
288 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 5, 3]
289 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 5]
290 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 0, 3]
291 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 0]
292 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 3]
293 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4]
294 [0, 1, 2, 3, 4, 5, 0, 1, 3, 0]
295 [0, 1, 2, 3, 4, 5, 0, 1, 3]
296 [0, 1, 2, 3, 4, 5, 0, 1, 4, 5, 0]
297 [0, 1, 2, 3, 4, 5, 0, 1, 4, 5]
298 [0, 1, 2, 3, 4, 5, 0, 1, 4, 0]
299 [0, 1, 2, 3, 4, 5, 0, 1, 4]
300 [0, 1, 2, 3, 4, 5, 0, 1, 0]
301 [0, 1, 2, 3, 4, 5, 0, 1]
302 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5]
303 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4]
304 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3]
305 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 2, 3, 4, 5, 2]
306 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 2, 3, 4, 5]
307 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 2, 3, 4, 2, 3]
308 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 2, 3, 4, 2]
309 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 2, 3, 4]
310 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 2, 3, 2]
311 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 2, 3]
312 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 2]
313 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 3, 4, 5]
314 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 3, 4]
315 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 3]
316 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5]
317 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 2, 3, 2]
318 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 2, 3]
319 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 2]
320 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 3]
321 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4]
322 [0, 1, 2, 3, 4, 5, 0, 2, 3, 2]
323 [0, 1, 2, 3, 4, 5, 0, 2, 3]
324 [0, 1, 2, 3, 4, 5, 0, 2, 4, 5]
325 [0, 1, 2, 3, 4, 5, 0, 2, 4]
326 [0, 1, 2, 3, 4, 5, 0, 2]
327 [0, 1, 2, 3, 4, 5, 0, 3, 4, 5, 3, 4, 5]
328 [0, 1, 2, 3, 4, 5, 0, 3, 4, 5, 3, 4]
329 [0, 1, 2, 3, 4, 5, 0, 3, 4, 5, 3]
330 [0, 1, 2, 3, 4, 5, 0, 3, 4, 5]
331 [0, 1, 2, 3, 4, 5, 0, 3, 4, 3]
332 [0, 1, 2, 3, 4, 5, 0, 3, 4]
333 [0, 1, 2, 3, 4, 5, 0, 3]
334 [0, 1, 2, 3, 4, 5, 0, 4, 5]
335 [0, 1, 2, 3, 4, 5, 0, 4]
336 [0, 1, 2, 3, 4, 5, 0]
337 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]
338 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4]
339 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3]
340 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2]
341 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1]
342 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]
343 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3]
344 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2]
345 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1]
346 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4]
347 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2]
348 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1]
349 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3]
350 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 1]
351 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2]
352 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1]
353 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5]
354 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4]
355 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3]
356 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2]
357 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]
358 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2]
359 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1]
360 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3]
361 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1]
362 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2]
363 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1]
364 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3]
365 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2]
366 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4]
367 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1]
368 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2]
369 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1]
370 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 2]
371 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3]
372 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 1]
373 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2]
374 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 3, 4, 5]
375 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 3, 4]
376 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 3]
377 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1]
378 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5]
379 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4]
380 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3]
381 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2]
382 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5]
383 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 2, 3]
384 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 2]
385 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4]
386 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 2]
387 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3]
388 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2]
389 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 3, 4, 5]
390 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 3, 4]
391 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 3]
392 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]
393 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
394 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2]
395 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1]
396 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 2]
397 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3]
398 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1]
399 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2]
400 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 3]
401 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1]
402 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3, 2]
403 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3]
404 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2]
405 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 3]
406 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4]
407 [0, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1]
408 [0, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2]
409 [0, 1, 2, 3, 4, 5, 1, 2, 3, 1]
410 [0, 1, 2, 3, 4, 5, 1, 2, 3, 2]
411 [0, 1, 2, 3, 4, 5, 1, 2, 3]
412 [0, 1, 2, 3, 4, 5, 1, 2, 4, 5, 1]
413 [0, 1, 2, 3, 4, 5, 1, 2, 4, 5]
414 [0, 1, 2, 3, 4, 5, 1, 2, 4, 1]
415 [0, 1, 2, 3, 4, 5, 1, 2, 4]
416 [0, 1, 2, 3, 4, 5, 1, 2, 1]
417 [0, 1, 2, 3, 4, 5, 1, 2]
418 [0, 1, 2, 3, 4, 5, 1, 3, 4, 5, 3, 4, 5]
419 [0, 1, 2, 3, 4, 5, 1, 3, 4, 5, 3, 4]
420 [0, 1, 2, 3, 4, 5, 1, 3, 4, 5, 3]
421 [0, 1, 2, 3, 4, 5, 1, 3, 4, 5]
422 [0, 1, 2, 3, 4, 5, 1, 3, 4, 3]
423 [0, 1, 2, 3, 4, 5, 1, 3, 4]
424 [0, 1, 2, 3, 4, 5, 1, 3]
425 [0, 1, 2, 3, 4, 5, 1, 4, 5]
426 [0, 1, 2, 3, 4, 5, 1, 4]
427 [0, 1, 2, 3, 4, 5, 1]
428 [0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5]
429 [0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4]
430 [0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3]
431 [0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2]
432 [0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5]
433 [0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 2, 3]
434 [0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 2]
435 [0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4]
436 [0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 2]
437 [0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3]
438 [0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2]
439 [0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 3, 4, 5]
440 [0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 3, 4]
441 [0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 3]
442 [0, 1, 2, 3, 4, 5, 2, 3, 4, 5]
443 [0, 1, 2, 3, 4, 5, 2, 3, 4, 2, 3, 2]
444 [0, 1, 2, 3, 4, 5, 2, 3, 4, 2, 3]
445 [0, 1, 2, 3, 4, 5, 2, 3, 4, 2]
446 [0, 1, 2, 3, 4, 5, 2, 3, 4, 3]
447 [0, 1, 2, 3, 4, 5, 2, 3, 4]
448 [0, 1, 2, 3, 4, 5, 2, 3, 2]
449 [0, 1, 2, 3, 4, 5, 2, 3]
450 [0, 1, 2, 3, 4, 5, 2, 4, 5]
451 [0, 1, 2, 3, 4, 5, 2, 4]
452 [0, 1, 2, 3, 4, 5, 2]
453 [0, 1, 2, 3, 4, 5, 3, 4, 5, 3, 4, 5]
454 [0, 1, 2, 3, 4, 5, 3, 4, 5, 3, 4]
455 [0, 1, 2, 3, 4, 5, 3, 4, 5, 3]
456 [0, 1, 2, 3, 4, 5, 3, 4, 5]
457 [0, 1, 2, 3, 4, 5, 3, 4, 3]
458 [0, 1, 2, 3, 4, 5, 3, 4]
459 [0, 1, 2, 3, 4, 5, 3]
460 [0, 1, 2, 3, 4, 5, 4, 5]
461 [0, 1, 2, 3, 4, 5, 4]
462 [0, 1, 2, 3, 4, 5]
463 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
464 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1]
465 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0]
466 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 1]
467 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
468 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0]
469 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
470 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 2]
471 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
472 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2, 1]
473 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2]
474 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1]
475 [0, 1, 2, 3, 4, 0, 1, 2, 3, 2]
476 [0, 1, 2, 3, 4, 0, 1, 2, 3]
477 [0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0]
478 [0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
479 [0, 1, 2, 3, 4, 0, 1, 2, 0]
480 [0, 1, 2, 3, 4, 0, 1, 2, 1]
481 [0, 1, 2, 3, 4, 0, 1, 2]
482 [0, 1, 2, 3, 4, 0, 1, 3, 0]
483 [0, 1, 2, 3, 4, 0, 1, 3]
484 [0, 1, 2, 3, 4, 0, 1, 0]
485 [0, 1, 2, 3, 4, 0, 1]
486 [0, 1, 2, 3, 4, 0, 2, 3, 2]
487 [0, 1, 2, 3, 4, 0, 2, 3]
488 [0, 1, 2, 3, 4, 0, 2]
489 [0, 1, 2, 3, 4, 0, 3]
490 [0, 1, 2, 3, 4, 0]
491 [0, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
492 [0, 1, 2, 3, 4, 1, 2, 3, 1, 2]
493 [0, 1, 2, 3, 4, 1, 2, 3, 1]
494 [0, 1, 2, 3, 4, 1, 2, 3, 2]
495 [0, 1, 2, 3, 4, 1, 2, 3]
496 [0, 1, 2, 3, 4, 1, 2, 1]
497 [0, 1, 2, 3, 4, 1, 2]
498 [0, 1, 2, 3, 4, 1, 3]
499 [0, 1, 2, 3, 4, 1]
500 [0, 1, 2, 3, 4, 2, 3, 2]
501 [0, 1, 2, 3, 4, 2, 3]
502 [0, 1, 2, 3, 4, 2]
503 [0, 1, 2, 3, 4, 3]
504 [0, 1, 2, 3, 4]
505 [0, 1, 2, 3, 5, 0, 1, 2, 0, 1, 0]
506 [0, 1, 2, 3, 5, 0, 1, 2, 0, 1]
507 [0, 1, 2, 3, 5, 0, 1, 2, 0]
508 [0, 1, 2, 3, 5, 0, 1, 2, 1]
509 [0, 1, 2, 3, 5, 0, 1, 2]
510 [0, 1, 2, 3, 5, 0, 1, 0]
511 [0, 1, 2, 3, 5, 0, 1]
512 [0, 1, 2, 3, 5, 0, 2]
513 [0, 1, 2, 3, 5, 0]
514 [0, 1, 2, 3, 5, 1, 2, 1]
515 [0, 1, 2, 3, 5, 1, 2]
516 [0, 1, 2, 3, 5, 1]
517 [0, 1, 2, 3, 5, 2]
518 [0, 1, 2, 3, 5]
519 [0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
520 [0, 1, 2, 3, 0, 1, 2, 0, 1]
521 [0, 1, 2, 3, 0, 1, 2, 0]
522 [0, 1, 2, 3, 0, 1, 2, 1]
523 [0, 1, 2, 3, 0, 1, 2]
524 [0, 1, 2, 3, 0, 1, 0]
525 [0, 1, 2, 3, 0, 1]
526 [0, 1, 2, 3, 0, 2]
527 [0, 1, 2, 3, 0]
528 [0, 1, 2, 3, 1, 2, 1]
529 [0, 1, 2, 3, 1, 2]
530 [0, 1, 2, 3, 1]
531 [0, 1, 2, 3, 2]
532 [0, 1, 2, 3]
533 [0, 1, 2, 4, 5, 0, 1, 4, 5, 0]
534 [0, 1, 2, 4, 5, 0, 1, 4, 5]
535 [0, 1, 2, 4, 5, 0, 1, 4, 0]
536 [0, 1, 2, 4, 5, 0, 1, 4]
537 [0, 1, 2, 4, 5, 0, 1, 0]
538 [0, 1, 2, 4, 5, 0, 1]
539 [0, 1, 2, 4, 5, 0, 4, 5]
540 [0, 1, 2, 4, 5, 0, 4]
541 [0, 1, 2, 4, 5, 0]
542 [0, 1, 2, 4, 5, 1, 4, 5]
543 [0, 1, 2, 4, 5, 1, 4]
544 [0, 1, 2, 4, 5, 1]
545 [0, 1, 2, 4, 5, 4, 5]
546 [0, 1, 2, 4, 5, 4]
547 [0, 1, 2, 4, 5]
548 [0, 1, 2, 4, 0, 1, 0]
549 [0, 1, 2, 4, 0, 1]
550 [0, 1, 2, 4, 0]
551 [0, 1, 2, 4, 1]
552 [0, 1, 2, 4]
553 [0, 1, 2, 5, 0, 1, 0]
554 [0, 1, 2, 5, 0, 1]
555 [0, 1, 2, 5, 0]
556 [0, 1, 2, 5, 1]
557 [0, 1, 2, 5]
558 [0, 1, 2, 0, 1, 0]
559 [0, 1, 2, 0, 1]
560 [0, 1, 2, 0]
561 [0, 1, 2, 1]
562 [0, 1, 2]
563 [0, 1, 3, 4, 5, 0, 3, 4, 5, 3, 4, 5]
564 [0, 1, 3, 4, 5, 0, 3, 4, 5, 3, 4]
565 [0, 1, 3, 4, 5, 0, 3, 4, 5, 3]
566 [0, 1, 3, 4, 5, 0, 3, 4, 5]
567 [0, 1, 3, 4, 5, 0, 3, 4, 3]
568 [0, 1, 3, 4, 5, 0, 3, 4]
569 [0, 1, 3, 4, 5, 0, 3]
570 [0, 1, 3, 4, 5, 0, 4, 5]
571 [0, 1, 3, 4, 5, 0, 4]
572 [0, 1, 3, 4, 5, 0]
573 [0, 1, 3, 4, 5, 3, 4, 5, 3, 4, 5]
574 [0, 1, 3, 4, 5, 3, 4, 5, 3, 4]
575 [0, 1, 3, 4, 5, 3, 4, 5, 3]
576 [0, 1, 3, 4, 5, 3, 4, 5]
577 [0, 1, 3, 4, 5, 3, 4, 3]
578 [0, 1, 3, 4, 5, 3, 4]
579 [0, 1, 3, 4, 5, 3]
580 [0, 1, 3, 4, 5, 4, 5]
581 [0, 1, 3, 4, 5, 4]
582 [0, 1, 3, 4, 5]
583 [0, 1, 3, 4, 0, 3]
584 [0, 1, 3, 4, 0]
585 [0, 1, 3, 4, 3]
586 [0, 1, 3, 4]
587 [0, 1, 3, 5, 0]
588 [0, 1, 3, 5]
589 [0, 1, 3, 0]
590 [0, 1, 3]
591 [0, 1, 4, 5, 0, 4, 5]
592 [0, 1, 4, 5, 0, 4]
593 [0, 1, 4, 5, 0]
594 [0, 1, 4, 5, 4, 5]
595 [0, 1, 4, 5, 4]
596 [0, 1, 4, 5]
597 [0, 1, 4, 0]
598 [0, 1, 4]
599 [0, 1, 5, 0]
600 [0, 1, 5]
601 [0, 1, 0]
602 [0, 1]
603 [0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5]
604 [0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4]
605 [0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3]
606 [0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2]
607 [0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5]
608 [0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 2, 3]
609 [0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 2]
610 [0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4]
611 [0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 2]
612 [0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3]
613 [0, 2, 3, 4, 5, 2, 3, 4, 5, 2]
614 [0, 2, 3, 4, 5, 2, 3, 4, 5, 3, 4, 5]
615 [0, 2, 3, 4, 5, 2, 3, 4, 5, 3, 4]
616 [0, 2, 3, 4, 5, 2, 3, 4, 5, 3]
617 [0, 2, 3, 4, 5, 2, 3, 4, 5]
618 [0, 2, 3, 4, 5, 2, 3, 4, 2, 3, 2]
619 [0, 2, 3, 4, 5, 2, 3, 4, 2, 3]
620 [0, 2, 3, 4, 5, 2, 3, 4, 2]
621 [0, 2, 3, 4, 5, 2, 3, 4, 3]
622 [0, 2, 3, 4, 5, 2, 3, 4]
623 [0, 2, 3, 4, 5, 2, 3, 2]
624 [0, 2, 3, 4, 5, 2, 3]
625 [0, 2, 3, 4, 5, 2, 4, 5]
626 [0, 2, 3, 4, 5, 2, 4]
627 [0, 2, 3, 4, 5, 2]
628 [0, 2, 3, 4, 5, 3, 4, 5, 3, 4, 5]
629 [0, 2, 3, 4, 5, 3, 4, 5, 3, 4]
630 [0, 2, 3, 4, 5, 3, 4, 5, 3]
631 [0, 2, 3, 4, 5, 3, 4, 5]
632 [0, 2, 3, 4, 5, 3, 4, 3]
633 [0, 2, 3, 4, 5, 3, 4]
634 [0, 2, 3, 4, 5, 3]
635 [0, 2, 3, 4, 5, 4, 5]
636 [0, 2, 3, 4, 5, 4]
637 [0, 2, 3, 4, 5]
638 [0, 2, 3, 4, 2, 3, 2]
639 [0, 2, 3, 4, 2, 3]
640 [0, 2, 3, 4, 2]
641 [0, 2, 3, 4, 3]
642 [0, 2, 3, 4]
643 [0, 2, 3, 5, 2]
644 [0, 2, 3, 5]
645 [0, 2, 3, 2]
646 [0, 2, 3]
647 [0, 2, 4, 5, 4, 5]
648 [0, 2, 4, 5, 4]
649 [0, 2, 4, 5]
650 [0, 2, 4]
651 [0, 2, 5]
652 [0, 2]
653 [0, 3, 4, 5, 3, 4, 5, 3, 4, 5]
654 [0, 3, 4, 5, 3, 4, 5, 3, 4]
655 [0, 3, 4, 5, 3, 4, 5, 3]
656 [0, 3, 4, 5, 3, 4, 5]
657 [0, 3, 4, 5, 3, 4, 3]
658 [0, 3, 4, 5, 3, 4]
659 [0, 3, 4, 5, 3]
660 [0, 3, 4, 5, 4, 5]
661 [0, 3, 4, 5, 4]
662 [0, 3, 4, 5]
663 [0, 3, 4, 3]
664 [0, 3, 4]
665 [0, 3, 5]
666 [0, 3]
667 [0, 4, 5, 4, 5]
668 [0, 4, 5, 4]
669 [0, 4, 5]
670 [0, 4]
671 [0, 5]
672 [0]
673 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]
674 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4]
675 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3]
676 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2]
677 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1]
678 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]
679 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3]
680 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2]
681 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1]
682 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4]
683 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2]
684 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1]
685 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3]
686 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 1]
687 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2]
688 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1]
689 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5]
690 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4]
691 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3]
692 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2]
693 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]
694 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2]
695 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1]
696 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3]
697 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1]
698 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2]
699 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1]
700 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3]
701 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2]
702 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4]
703 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1]
704 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2]
705 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1]
706 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 2]
707 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3]
708 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 1]
709 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2]
710 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 3, 4, 5]
711 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 3, 4]
712 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 3]
713 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1]
714 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5]
715 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4]
716 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3]
717 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2]
718 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5]
719 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 2, 3]
720 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 2]
721 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4]
722 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 2]
723 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3]
724 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2]
725 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 3, 4, 5]
726 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 3, 4]
727 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 3]
728 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]
729 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
730 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2]
731 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1]
732 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 2]
733 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3]
734 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1]
735 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2]
736 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 3]
737 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]
738 [1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3, 2]
739 [1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3]
740 [1, 2, 3, 4, 5, 1, 2, 3, 4, 2]
741 [1, 2, 3, 4, 5, 1, 2, 3, 4, 3]
742 [1, 2, 3, 4, 5, 1, 2, 3, 4]
743 [1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1]
744 [1, 2, 3, 4, 5, 1, 2, 3, 1, 2]
745 [1, 2, 3, 4, 5, 1, 2, 3, 1]
746 [1, 2, 3, 4, 5, 1, 2, 3, 2]
747 [1, 2, 3, 4, 5, 1, 2, 3]
748 [1, 2, 3, 4, 5, 1, 2, 4, 5, 1]
749 [1, 2, 3, 4, 5, 1, 2, 4, 5]
750 [1, 2, 3, 4, 5, 1, 2, 4, 1]
751 [1, 2, 3, 4, 5, 1, 2, 4]
752 [1, 2, 3, 4, 5, 1, 2, 1]
753 [1, 2, 3, 4, 5, 1, 2]
754 [1, 2, 3, 4, 5, 1, 3, 4, 5, 3, 4, 5]
755 [1, 2, 3, 4, 5, 1, 3, 4, 5, 3, 4]
756 [1, 2, 3, 4, 5, 1, 3, 4, 5, 3]
757 [1, 2, 3, 4, 5, 1, 3, 4, 5]
758 [1, 2, 3, 4, 5, 1, 3, 4, 3]
759 [1, 2, 3, 4, 5, 1, 3, 4]
760 [1, 2, 3, 4, 5, 1, 3]
761 [1, 2, 3, 4, 5, 1, 4, 5]
762 [1, 2, 3, 4, 5, 1, 4]
763 [1, 2, 3, 4, 5, 1]
764 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5]
765 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4]
766 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3]
767 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2]
768 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5]
769 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 2, 3]
770 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 2]
771 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4]
772 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 2]
773 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3]
774 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2]
775 [1, 2, 3, 4, 5, 2, 3, 4, 5, 3, 4, 5]
776 [1, 2, 3, 4, 5, 2, 3, 4, 5, 3, 4]
777 [1, 2, 3, 4, 5, 2, 3, 4, 5, 3]
778 [1, 2, 3, 4, 5, 2, 3, 4, 5]
779 [1, 2, 3, 4, 5, 2, 3, 4, 2, 3, 2]
780 [1, 2, 3, 4, 5, 2, 3, 4, 2, 3]
781 [1, 2, 3, 4, 5, 2, 3, 4, 2]
782 [1, 2, 3, 4, 5, 2, 3, 4, 3]
783 [1, 2, 3, 4, 5, 2, 3, 4]
784 [1, 2, 3, 4, 5, 2, 3, 2]
785 [1, 2, 3, 4, 5, 2, 3]
786 [1, 2, 3, 4, 5, 2, 4, 5]
787 [1, 2, 3, 4, 5, 2, 4]
788 [1, 2, 3, 4, 5, 2]
789 [1, 2, 3, 4, 5, 3, 4, 5, 3, 4, 5]
790 [1, 2, 3, 4, 5, 3, 4, 5, 3, 4]
791 [1, 2, 3, 4, 5, 3, 4, 5, 3]
792 [1, 2, 3, 4, 5, 3, 4, 5]
793 [1, 2, 3, 4, 5, 3, 4, 3]
794 [1, 2, 3, 4, 5, 3, 4]
795 [1, 2, 3, 4, 5, 3]
796 [1, 2, 3, 4, 5, 4, 5]
797 [1, 2, 3, 4, 5, 4]
798 [1, 2, 3, 4, 5]
799 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
800 [1, 2, 3, 4, 1, 2, 3, 1, 2]
801 [1, 2, 3, 4, 1, 2, 3, 1]
802 [1, 2, 3, 4, 1, 2, 3, 2]
803 [1, 2, 3, 4, 1, 2, 3]
804 [1, 2, 3, 4, 1, 2, 1]
805 [1, 2, 3, 4, 1, 2]
806 [1, 2, 3, 4, 1, 3]
807 [1, 2, 3, 4, 1]
808 [1, 2, 3, 4, 2, 3, 2]
809 [1, 2, 3, 4, 2, 3]
810 [1, 2, 3, 4, 2]
811 [1, 2, 3, 4, 3]
812 [1, 2, 3, 4]
813 [1, 2, 3, 5, 1, 2, 1]
814 [1, 2, 3, 5, 1, 2]
815 [1, 2, 3, 5, 1]
816 [1, 2, 3, 5, 2]
817 [1, 2, 3, 5]
818 [1, 2, 3, 1, 2, 1]
819 [1, 2, 3, 1, 2]
820 [1, 2, 3, 1]
821 [1, 2, 3, 2]
822 [1, 2, 3]
823 [1, 2, 4, 5, 1, 4, 5]
824 [1, 2, 4, 5, 1, 4]
825 [1, 2, 4, 5, 1]
826 [1, 2, 4, 5, 4, 5]
827 [1, 2, 4, 5, 4]
828 [1, 2, 4, 5]
829 [1, 2, 4, 1]
830 [1, 2, 4]
831 [1, 2, 5, 1]
832 [1, 2, 5]
833 [1, 2, 1]
834 [1, 2]
835 [1, 3, 4, 5, 3, 4, 5, 3, 4, 5]
836 [1, 3, 4, 5, 3, 4, 5, 3, 4]
837 [1, 3, 4, 5, 3, 4, 5, 3]
838 [1, 3, 4, 5, 3, 4, 5]
839 [1, 3, 4, 5, 3, 4, 3]
840 [1, 3, 4, 5, 3, 4]
841 [1, 3, 4, 5, 3]
842 [1, 3, 4, 5, 4, 5]
843 [1, 3, 4, 5, 4]
844 [1, 3, 4, 5]
845 [1, 3, 4, 3]
846 [1, 3, 4]
847 [1, 3, 5]
848 [1, 3]
849 [1, 4, 5, 4, 5]
850 [1, 4, 5, 4]
851 [1, 4, 5]
852 [1, 4]
853 [1, 5]
854 [1]
855 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5]
856 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4]
857 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3]
858 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2]
859 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5]
860 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 2, 3]
861 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 2]
862 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4]
863 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 2]
864 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3]
865 [2, 3, 4, 5, 2, 3, 4, 5, 2]
866 [2, 3, 4, 5, 2, 3, 4, 5, 3, 4, 5]
867 [2, 3, 4, 5, 2, 3, 4, 5, 3, 4]
868 [2, 3, 4, 5, 2, 3, 4, 5, 3]
869 [2, 3, 4, 5, 2, 3, 4, 5]
870 [2, 3, 4, 5, 2, 3, 4, 2, 3, 2]
871 [2, 3, 4, 5, 2, 3, 4, 2, 3]
872 [2, 3, 4, 5, 2, 3, 4, 2]
873 [2, 3, 4, 5, 2, 3, 4, 3]
874 [2, 3, 4, 5, 2, 3, 4]
875 [2, 3, 4, 5, 2, 3, 2]
876 [2, 3, 4, 5, 2, 3]
877 [2, 3, 4, 5, 2, 4, 5]
878 [2, 3, 4, 5, 2, 4]
879 [2, 3, 4, 5, 2]
880 [2, 3, 4, 5, 3, 4, 5, 3, 4, 5]
881 [2, 3, 4, 5, 3, 4, 5, 3, 4]
882 [2, 3, 4, 5, 3, 4, 5, 3]
883 [2, 3, 4, 5, 3, 4, 5]
884 [2, 3, 4, 5, 3, 4, 3]
885 [2, 3, 4, 5, 3, 4]
886 [2, 3, 4, 5, 3]
887 [2, 3, 4, 5, 4, 5]
888 [2, 3, 4, 5, 4]
889 [2, 3, 4, 5]
890 [2, 3, 4, 2, 3, 2]
891 [2, 3, 4, 2, 3]
892 [2, 3, 4, 2]
893 [2, 3, 4, 3]
894 [2, 3, 4]
895 [2, 3, 5, 2]
896 [2, 3, 5]
897 [2, 3, 2]
898 [2, 3]
899 [2, 4, 5, 4, 5]
900 [2, 4, 5, 4]
901 [2, 4, 5]
902 [2, 4]
903 [2, 5]
904 [2]
905 [3, 4, 5, 3, 4, 5, 3, 4, 5]
906 [3, 4, 5, 3, 4, 5, 3, 4]
907 [3, 4, 5, 3, 4, 5, 3]
908 [3, 4, 5, 3, 4, 5]
909 [3, 4, 5, 3, 4, 3]
910 [3, 4, 5, 3, 4]
911 [3, 4, 5, 3]
912 [3, 4, 5, 4, 5]
913 [3, 4, 5, 4]
914 [3, 4, 5]
915 [3, 4, 3]
916 [3, 4]
917 [3, 5]
918 [3]
919 [4, 5, 4, 5]
920 [4, 5, 4]
921 [4, 5]
922 [4]
923 [5]
924 []
sage: list(c_inf_prefix(c,i*A.nrows()+1) for i in range(coxnum+2))
[[0],
 [0, 1, 2, 3, 4, 5, 0],
 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0],
 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0],
 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0],
 [0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0],
 [0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0],
 [0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0],
 [0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0],
 [0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0],
 [0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0],
 [0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0],
 [0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0],
 [0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0,
  1,
  2,
  3,
  4,
  5,
  0]]
sage: A=CartanMatrix(['C',6])
....: c=[0,1,2,3,4,5]
....: coxnum=12
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()) for i
....: in range(coxnum+2)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 

1 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5]
2 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4]
3 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3]
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [281], line 6
      4 n=Integer(1)
      5 for v in sortables(A,c):
----> 6     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()) for i in range(coxnum+Integer(2))))
      7     print(n,v)
      8     n+=Integer(1)

File ~/git/affine_dominance/domination4.py:127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_faster(B, la, seqs[0])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_faster(B, la, s))
    128     if P.dimension()==0:
    129         break

File ~/git/affine_dominance/domination4.py:159, in p_lambda_faster(B, la, seq)
    155         P=Ep*Pp
    156     else:
    157         #print("Pp:   ",Pp,Pp.vertices(),Pp.rays(),Pp.lines(),"\n")
    158         #print("Pm:   ",Pm,Pm.vertices(),Pm.rays(),Pm.lines(),"\n\n")
--> 159         P=(Ep*Pp).convex_hull(Em*Pm)
    160     B.mutate(k)
    161 return P

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4099, in sage.structure.element.Matrix.__mul__ (build/cythonized/sage/structure/element.c:35219)()
   4097 
   4098         if BOTH_ARE_ELEMENT(cl):
-> 4099             return coercion_model.bin_op(left, right, mul)
   4100 
   4101         cdef long value

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1222, in sage.structure.coerce.CoercionModel.bin_op (build/cythonized/sage/structure/coerce.c:15809)()
   1220 if action is not None:
   1221     if (<Action>action)._is_left:
-> 1222         return (<Action>action)._act_(x, y)
   1223     else:
   1224         return (<Action>action)._act_(y, x)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_actions.pyx:157, in sage.structure.coerce_actions.ActedUponAction._act_ (build/cythonized/sage/structure/coerce_actions.c:8579)()
    155     <... 'sage.structure.coerce_actions.ActedUponAction'>
    156 """
--> 157 return (<Element>x)._acted_upon_(g, not self._is_left)
    158 
    159 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:949, in sage.structure.element.Element._acted_upon_ (build/cythonized/sage/structure/element.c:16495)()
    947     return None
    948 
--> 949 cpdef _acted_upon_(self, x, bint self_on_left) noexcept:
    950     """
    951     Use this method to implement ``self`` acted on by x.

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1450, in Polyhedron_base5._acted_upon_(self, actor, self_on_left)
   1448         raise ValueError("matrices should act on the left")
   1449     else:
-> 1450         return self.linear_transformation(actor)
   1451 else:
   1452     return self.dilation(actor)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1879, in Polyhedron_base5.linear_transformation(self, linear_transf, new_base_ring)
   1873     pref_rep = 'Vrep' if self.n_vertices() <= self.n_inequalities() else 'Hrep'
   1875     return new_parent.element_class(new_parent, [new_vertices, new_rays, new_lines],
   1876                                     [new_inequalities, new_equations],
   1877                                     Vrep_minimal=True, Hrep_minimal=True, pref_rep=pref_rep)
-> 1879 return new_parent.element_class(new_parent, [tuple(new_vertices), tuple(new_rays), tuple(new_lines)], None)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:70, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
---> 70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:189, in Polyhedron_ppl.set_immutable(self)
    187 if not hasattr(self, '_Vrepresentation'):
    188     try:
--> 189         self._init_Vrepresentation_from_ppl(True)
    190     except TypeError as e:
    191         # Apparently the polyhedron is (no longer) integral.
    192         self._clear_cache()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:300, in Polyhedron_ppl._init_Vrepresentation_from_ppl(self, minimize)
    298     raise TypeError("Vrepresentation of mutable polyhedra cannot be recomputed")
    299 self._Vrepresentation = []
--> 300 gs = self._ppl_polyhedron.minimized_generators()
    301 parent = self.parent()
    302 for g in gs:

File ppl/polyhedron.pyx:340, in ppl.polyhedron.Polyhedron.minimized_generators()

KeyboardInterrupt: 
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: coxnum=6
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()) for i
....: in range(coxnum+2)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [0, 1, 2, 0, 1, 2, 0, 1, 2]
FAILURE! 1
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: coxnum=6
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+1) for
....: i in range(coxnum+2)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [0, 1, 2, 0, 1, 2, 0, 1, 2]
2 [0, 1, 2, 0, 1, 2, 0, 1]
3 [0, 1, 2, 0, 1, 2, 0]
4 [0, 1, 2, 0, 1, 2]
5 [0, 1, 2, 0, 1, 0]
6 [0, 1, 2, 0, 1]
7 [0, 1, 2, 0]
8 [0, 1, 2, 1, 2]
9 [0, 1, 2, 1]
10 [0, 1, 2]
11 [0, 1, 0]
12 [0, 1]
13 [0, 2]
14 [0]
15 [1, 2, 1, 2]
16 [1, 2, 1]
17 [1, 2]
18 [1]
19 [2]
20 []
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: coxnum=6
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+2) for
....: i in range(coxnum+2)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [0, 1, 2, 0, 1, 2, 0, 1, 2]
2 [0, 1, 2, 0, 1, 2, 0, 1]
3 [0, 1, 2, 0, 1, 2, 0]
4 [0, 1, 2, 0, 1, 2]
5 [0, 1, 2, 0, 1, 0]
6 [0, 1, 2, 0, 1]
7 [0, 1, 2, 0]
8 [0, 1, 2, 1, 2]
9 [0, 1, 2, 1]
10 [0, 1, 2]
11 [0, 1, 0]
12 [0, 1]
13 [0, 2]
14 [0]
15 [1, 2, 1, 2]
16 [1, 2, 1]
17 [1, 2]
18 [1]
19 [2]
20 []
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: coxnum=6
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+3) for
....: i in range(coxnum+2)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [0, 1, 2, 0, 1, 2, 0, 1, 2]
FAILURE! 1
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: coxnum=8
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()) for i
....: in range(coxnum+2)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]
2 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2]
3 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1]
4 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0]
5 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]
6 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 0, 1]
7 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 0]
8 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2]
9 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 0]
10 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1]
11 [0, 1, 2, 3, 0, 1, 2, 3, 0]
12 [0, 1, 2, 3, 0, 1, 2, 3, 1, 2, 3]
13 [0, 1, 2, 3, 0, 1, 2, 3, 1, 2]
14 [0, 1, 2, 3, 0, 1, 2, 3, 1]
15 [0, 1, 2, 3, 0, 1, 2, 3]
16 [0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
17 [0, 1, 2, 3, 0, 1, 2, 0, 1]
18 [0, 1, 2, 3, 0, 1, 2, 0]
19 [0, 1, 2, 3, 0, 1, 2, 1]
20 [0, 1, 2, 3, 0, 1, 2]
21 [0, 1, 2, 3, 0, 1, 0]
22 [0, 1, 2, 3, 0, 1]
23 [0, 1, 2, 3, 0, 2, 3]
24 [0, 1, 2, 3, 0, 2]
25 [0, 1, 2, 3, 0]
26 [0, 1, 2, 3, 1, 2, 3, 1, 2, 3]
27 [0, 1, 2, 3, 1, 2, 3, 1, 2]
28 [0, 1, 2, 3, 1, 2, 3, 1]
29 [0, 1, 2, 3, 1, 2, 3]
30 [0, 1, 2, 3, 1, 2, 1]
31 [0, 1, 2, 3, 1, 2]
32 [0, 1, 2, 3, 1]
33 [0, 1, 2, 3, 2, 3]
34 [0, 1, 2, 3, 2]
35 [0, 1, 2, 3]
36 [0, 1, 2, 0, 1, 0]
37 [0, 1, 2, 0, 1]
38 [0, 1, 2, 0]
39 [0, 1, 2, 1]
40 [0, 1, 2]
41 [0, 1, 3, 0]
42 [0, 1, 3]
43 [0, 1, 0]
44 [0, 1]
45 [0, 2, 3, 2, 3]
46 [0, 2, 3, 2]
47 [0, 2, 3]
48 [0, 2]
49 [0, 3]
50 [0]
51 [1, 2, 3, 1, 2, 3, 1, 2, 3]
52 [1, 2, 3, 1, 2, 3, 1, 2]
53 [1, 2, 3, 1, 2, 3, 1]
54 [1, 2, 3, 1, 2, 3]
55 [1, 2, 3, 1, 2, 1]
56 [1, 2, 3, 1, 2]
57 [1, 2, 3, 1]
58 [1, 2, 3, 2, 3]
59 [1, 2, 3, 2]
60 [1, 2, 3]
61 [1, 2, 1]
62 [1, 2]
63 [1, 3]
64 [1]
65 [2, 3, 2, 3]
66 [2, 3, 2]
67 [2, 3]
68 [2]
69 [3]
70 []
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: coxnum=8
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+1) for
....: i in range(coxnum+2)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]
2 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2]
3 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1]
4 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0]
5 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]
6 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 0, 1]
7 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 0]
8 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2]
9 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 0]
10 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1]
11 [0, 1, 2, 3, 0, 1, 2, 3, 0]
12 [0, 1, 2, 3, 0, 1, 2, 3, 1, 2, 3]
13 [0, 1, 2, 3, 0, 1, 2, 3, 1, 2]
14 [0, 1, 2, 3, 0, 1, 2, 3, 1]
15 [0, 1, 2, 3, 0, 1, 2, 3]
16 [0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
17 [0, 1, 2, 3, 0, 1, 2, 0, 1]
18 [0, 1, 2, 3, 0, 1, 2, 0]
19 [0, 1, 2, 3, 0, 1, 2, 1]
20 [0, 1, 2, 3, 0, 1, 2]
21 [0, 1, 2, 3, 0, 1, 0]
22 [0, 1, 2, 3, 0, 1]
23 [0, 1, 2, 3, 0, 2, 3]
24 [0, 1, 2, 3, 0, 2]
25 [0, 1, 2, 3, 0]
26 [0, 1, 2, 3, 1, 2, 3, 1, 2, 3]
27 [0, 1, 2, 3, 1, 2, 3, 1, 2]
28 [0, 1, 2, 3, 1, 2, 3, 1]
29 [0, 1, 2, 3, 1, 2, 3]
30 [0, 1, 2, 3, 1, 2, 1]
31 [0, 1, 2, 3, 1, 2]
32 [0, 1, 2, 3, 1]
33 [0, 1, 2, 3, 2, 3]
34 [0, 1, 2, 3, 2]
35 [0, 1, 2, 3]
36 [0, 1, 2, 0, 1, 0]
37 [0, 1, 2, 0, 1]
38 [0, 1, 2, 0]
39 [0, 1, 2, 1]
40 [0, 1, 2]
41 [0, 1, 3, 0]
42 [0, 1, 3]
43 [0, 1, 0]
44 [0, 1]
45 [0, 2, 3, 2, 3]
46 [0, 2, 3, 2]
47 [0, 2, 3]
48 [0, 2]
49 [0, 3]
50 [0]
51 [1, 2, 3, 1, 2, 3, 1, 2, 3]
52 [1, 2, 3, 1, 2, 3, 1, 2]
53 [1, 2, 3, 1, 2, 3, 1]
54 [1, 2, 3, 1, 2, 3]
55 [1, 2, 3, 1, 2, 1]
56 [1, 2, 3, 1, 2]
57 [1, 2, 3, 1]
58 [1, 2, 3, 2, 3]
59 [1, 2, 3, 2]
60 [1, 2, 3]
61 [1, 2, 1]
62 [1, 2]
63 [1, 3]
64 [1]
65 [2, 3, 2, 3]
66 [2, 3, 2]
67 [2, 3]
68 [2]
69 [3]
70 []
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: coxnum=8
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+2) for
....: i in range(coxnum+2)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]
2 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2]
3 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1]
4 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0]
5 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]
6 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 0, 1]
7 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 0]
8 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2]
9 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 0]
10 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1]
11 [0, 1, 2, 3, 0, 1, 2, 3, 0]
12 [0, 1, 2, 3, 0, 1, 2, 3, 1, 2, 3]
13 [0, 1, 2, 3, 0, 1, 2, 3, 1, 2]
14 [0, 1, 2, 3, 0, 1, 2, 3, 1]
15 [0, 1, 2, 3, 0, 1, 2, 3]
16 [0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
17 [0, 1, 2, 3, 0, 1, 2, 0, 1]
18 [0, 1, 2, 3, 0, 1, 2, 0]
19 [0, 1, 2, 3, 0, 1, 2, 1]
20 [0, 1, 2, 3, 0, 1, 2]
21 [0, 1, 2, 3, 0, 1, 0]
22 [0, 1, 2, 3, 0, 1]
23 [0, 1, 2, 3, 0, 2, 3]
24 [0, 1, 2, 3, 0, 2]
25 [0, 1, 2, 3, 0]
26 [0, 1, 2, 3, 1, 2, 3, 1, 2, 3]
27 [0, 1, 2, 3, 1, 2, 3, 1, 2]
28 [0, 1, 2, 3, 1, 2, 3, 1]
29 [0, 1, 2, 3, 1, 2, 3]
30 [0, 1, 2, 3, 1, 2, 1]
31 [0, 1, 2, 3, 1, 2]
32 [0, 1, 2, 3, 1]
33 [0, 1, 2, 3, 2, 3]
34 [0, 1, 2, 3, 2]
35 [0, 1, 2, 3]
36 [0, 1, 2, 0, 1, 0]
37 [0, 1, 2, 0, 1]
38 [0, 1, 2, 0]
39 [0, 1, 2, 1]
40 [0, 1, 2]
41 [0, 1, 3, 0]
42 [0, 1, 3]
43 [0, 1, 0]
44 [0, 1]
45 [0, 2, 3, 2, 3]
46 [0, 2, 3, 2]
47 [0, 2, 3]
48 [0, 2]
49 [0, 3]
50 [0]
51 [1, 2, 3, 1, 2, 3, 1, 2, 3]
52 [1, 2, 3, 1, 2, 3, 1, 2]
53 [1, 2, 3, 1, 2, 3, 1]
54 [1, 2, 3, 1, 2, 3]
55 [1, 2, 3, 1, 2, 1]
56 [1, 2, 3, 1, 2]
57 [1, 2, 3, 1]
58 [1, 2, 3, 2, 3]
59 [1, 2, 3, 2]
60 [1, 2, 3]
61 [1, 2, 1]
62 [1, 2]
63 [1, 3]
64 [1]
65 [2, 3, 2, 3]
66 [2, 3, 2]
67 [2, 3]
68 [2]
69 [3]
70 []
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: coxnum=8
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+3) for
....: i in range(coxnum+2)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]
2 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2]
3 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1]
4 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0]
5 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]
6 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 0, 1]
7 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 0]
8 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2]
9 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 0]
10 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1]
11 [0, 1, 2, 3, 0, 1, 2, 3, 0]
12 [0, 1, 2, 3, 0, 1, 2, 3, 1, 2, 3]
13 [0, 1, 2, 3, 0, 1, 2, 3, 1, 2]
14 [0, 1, 2, 3, 0, 1, 2, 3, 1]
15 [0, 1, 2, 3, 0, 1, 2, 3]
16 [0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
17 [0, 1, 2, 3, 0, 1, 2, 0, 1]
18 [0, 1, 2, 3, 0, 1, 2, 0]
19 [0, 1, 2, 3, 0, 1, 2, 1]
20 [0, 1, 2, 3, 0, 1, 2]
21 [0, 1, 2, 3, 0, 1, 0]
22 [0, 1, 2, 3, 0, 1]
23 [0, 1, 2, 3, 0, 2, 3]
24 [0, 1, 2, 3, 0, 2]
25 [0, 1, 2, 3, 0]
26 [0, 1, 2, 3, 1, 2, 3, 1, 2, 3]
27 [0, 1, 2, 3, 1, 2, 3, 1, 2]
28 [0, 1, 2, 3, 1, 2, 3, 1]
29 [0, 1, 2, 3, 1, 2, 3]
30 [0, 1, 2, 3, 1, 2, 1]
31 [0, 1, 2, 3, 1, 2]
32 [0, 1, 2, 3, 1]
33 [0, 1, 2, 3, 2, 3]
34 [0, 1, 2, 3, 2]
35 [0, 1, 2, 3]
36 [0, 1, 2, 0, 1, 0]
37 [0, 1, 2, 0, 1]
38 [0, 1, 2, 0]
39 [0, 1, 2, 1]
40 [0, 1, 2]
41 [0, 1, 3, 0]
42 [0, 1, 3]
43 [0, 1, 0]
44 [0, 1]
45 [0, 2, 3, 2, 3]
46 [0, 2, 3, 2]
47 [0, 2, 3]
48 [0, 2]
49 [0, 3]
50 [0]
51 [1, 2, 3, 1, 2, 3, 1, 2, 3]
52 [1, 2, 3, 1, 2, 3, 1, 2]
53 [1, 2, 3, 1, 2, 3, 1]
54 [1, 2, 3, 1, 2, 3]
55 [1, 2, 3, 1, 2, 1]
56 [1, 2, 3, 1, 2]
57 [1, 2, 3, 1]
58 [1, 2, 3, 2, 3]
59 [1, 2, 3, 2]
60 [1, 2, 3]
61 [1, 2, 1]
62 [1, 2]
63 [1, 3]
64 [1]
65 [2, 3, 2, 3]
66 [2, 3, 2]
67 [2, 3]
68 [2]
69 [3]
70 []
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: coxnum=10
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()) for i
....: in range(coxnum+2)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
FAILURE! 2
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: coxnum=10
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+1) for
....: i in range(coxnum+2)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
2 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3]
3 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2]
4 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1]
5 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0]
6 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
7 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
8 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
9 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
10 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3]
11 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
12 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0]
13 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2]
14 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 0]
15 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1]
16 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0]
17 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4]
18 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3]
19 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2]
20 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1]
21 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
22 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1]
23 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0]
24 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
25 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0]
26 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
27 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
28 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2]
29 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1]
30 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3]
31 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0]
32 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
33 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0]
34 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 1]
35 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2]
36 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 0]
37 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1]
38 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2, 3, 4]
39 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2, 3]
40 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2]
41 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0]
42 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
43 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
44 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
45 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1]
46 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4]
47 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 1, 2]
48 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 1]
49 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3]
50 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 1]
51 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2]
52 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1]
53 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2, 3, 4]
54 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2, 3]
55 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2]
56 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
57 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
58 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1]
59 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0]
60 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 1]
61 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
62 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0]
63 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
64 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 2]
65 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
66 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2, 1]
67 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2]
68 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1]
69 [0, 1, 2, 3, 4, 0, 1, 2, 3, 2]
70 [0, 1, 2, 3, 4, 0, 1, 2, 3]
71 [0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0]
72 [0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
73 [0, 1, 2, 3, 4, 0, 1, 2, 0]
74 [0, 1, 2, 3, 4, 0, 1, 2, 1]
75 [0, 1, 2, 3, 4, 0, 1, 2]
76 [0, 1, 2, 3, 4, 0, 1, 3, 4, 0]
77 [0, 1, 2, 3, 4, 0, 1, 3, 4]
78 [0, 1, 2, 3, 4, 0, 1, 3, 0]
79 [0, 1, 2, 3, 4, 0, 1, 3]
80 [0, 1, 2, 3, 4, 0, 1, 0]
81 [0, 1, 2, 3, 4, 0, 1]
82 [0, 1, 2, 3, 4, 0, 2, 3, 4, 2, 3, 4]
83 [0, 1, 2, 3, 4, 0, 2, 3, 4, 2, 3]
84 [0, 1, 2, 3, 4, 0, 2, 3, 4, 2]
85 [0, 1, 2, 3, 4, 0, 2, 3, 4]
86 [0, 1, 2, 3, 4, 0, 2, 3, 2]
87 [0, 1, 2, 3, 4, 0, 2, 3]
88 [0, 1, 2, 3, 4, 0, 2]
89 [0, 1, 2, 3, 4, 0, 3, 4]
90 [0, 1, 2, 3, 4, 0, 3]
91 [0, 1, 2, 3, 4, 0]
92 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
93 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
94 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
95 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1]
96 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
97 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2]
98 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1]
99 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
100 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1]
101 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
102 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1]
103 [0, 1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4]
104 [0, 1, 2, 3, 4, 1, 2, 3, 4, 2, 3]
105 [0, 1, 2, 3, 4, 1, 2, 3, 4, 2]
106 [0, 1, 2, 3, 4, 1, 2, 3, 4]
107 [0, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
108 [0, 1, 2, 3, 4, 1, 2, 3, 1, 2]
109 [0, 1, 2, 3, 4, 1, 2, 3, 1]
110 [0, 1, 2, 3, 4, 1, 2, 3, 2]
111 [0, 1, 2, 3, 4, 1, 2, 3]
112 [0, 1, 2, 3, 4, 1, 2, 1]
113 [0, 1, 2, 3, 4, 1, 2]
114 [0, 1, 2, 3, 4, 1, 3, 4]
115 [0, 1, 2, 3, 4, 1, 3]
116 [0, 1, 2, 3, 4, 1]
117 [0, 1, 2, 3, 4, 2, 3, 4, 2, 3, 4]
118 [0, 1, 2, 3, 4, 2, 3, 4, 2, 3]
119 [0, 1, 2, 3, 4, 2, 3, 4, 2]
120 [0, 1, 2, 3, 4, 2, 3, 4]
121 [0, 1, 2, 3, 4, 2, 3, 2]
122 [0, 1, 2, 3, 4, 2, 3]
123 [0, 1, 2, 3, 4, 2]
124 [0, 1, 2, 3, 4, 3, 4]
125 [0, 1, 2, 3, 4, 3]
126 [0, 1, 2, 3, 4]
127 [0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
128 [0, 1, 2, 3, 0, 1, 2, 0, 1]
129 [0, 1, 2, 3, 0, 1, 2, 0]
130 [0, 1, 2, 3, 0, 1, 2, 1]
131 [0, 1, 2, 3, 0, 1, 2]
132 [0, 1, 2, 3, 0, 1, 0]
133 [0, 1, 2, 3, 0, 1]
134 [0, 1, 2, 3, 0, 2]
135 [0, 1, 2, 3, 0]
136 [0, 1, 2, 3, 1, 2, 1]
137 [0, 1, 2, 3, 1, 2]
138 [0, 1, 2, 3, 1]
139 [0, 1, 2, 3, 2]
140 [0, 1, 2, 3]
141 [0, 1, 2, 4, 0, 1, 0]
142 [0, 1, 2, 4, 0, 1]
143 [0, 1, 2, 4, 0]
144 [0, 1, 2, 4, 1]
145 [0, 1, 2, 4]
146 [0, 1, 2, 0, 1, 0]
147 [0, 1, 2, 0, 1]
148 [0, 1, 2, 0]
149 [0, 1, 2, 1]
150 [0, 1, 2]
151 [0, 1, 3, 4, 0, 3, 4]
152 [0, 1, 3, 4, 0, 3]
153 [0, 1, 3, 4, 0]
154 [0, 1, 3, 4, 3, 4]
155 [0, 1, 3, 4, 3]
156 [0, 1, 3, 4]
157 [0, 1, 3, 0]
158 [0, 1, 3]
159 [0, 1, 4, 0]
160 [0, 1, 4]
161 [0, 1, 0]
162 [0, 1]
163 [0, 2, 3, 4, 2, 3, 4, 2, 3, 4]
164 [0, 2, 3, 4, 2, 3, 4, 2, 3]
165 [0, 2, 3, 4, 2, 3, 4, 2]
166 [0, 2, 3, 4, 2, 3, 4]
167 [0, 2, 3, 4, 2, 3, 2]
168 [0, 2, 3, 4, 2, 3]
169 [0, 2, 3, 4, 2]
170 [0, 2, 3, 4, 3, 4]
171 [0, 2, 3, 4, 3]
172 [0, 2, 3, 4]
173 [0, 2, 3, 2]
174 [0, 2, 3]
175 [0, 2, 4]
176 [0, 2]
177 [0, 3, 4, 3, 4]
178 [0, 3, 4, 3]
179 [0, 3, 4]
180 [0, 3]
181 [0, 4]
182 [0]
183 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
184 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
185 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
186 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1]
187 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
188 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2]
189 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1]
190 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
191 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1]
192 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
193 [1, 2, 3, 4, 1, 2, 3, 4, 1]
194 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4]
195 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3]
196 [1, 2, 3, 4, 1, 2, 3, 4, 2]
197 [1, 2, 3, 4, 1, 2, 3, 4]
198 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
199 [1, 2, 3, 4, 1, 2, 3, 1, 2]
200 [1, 2, 3, 4, 1, 2, 3, 1]
201 [1, 2, 3, 4, 1, 2, 3, 2]
202 [1, 2, 3, 4, 1, 2, 3]
203 [1, 2, 3, 4, 1, 2, 1]
204 [1, 2, 3, 4, 1, 2]
205 [1, 2, 3, 4, 1, 3, 4]
206 [1, 2, 3, 4, 1, 3]
207 [1, 2, 3, 4, 1]
208 [1, 2, 3, 4, 2, 3, 4, 2, 3, 4]
209 [1, 2, 3, 4, 2, 3, 4, 2, 3]
210 [1, 2, 3, 4, 2, 3, 4, 2]
211 [1, 2, 3, 4, 2, 3, 4]
212 [1, 2, 3, 4, 2, 3, 2]
213 [1, 2, 3, 4, 2, 3]
214 [1, 2, 3, 4, 2]
215 [1, 2, 3, 4, 3, 4]
216 [1, 2, 3, 4, 3]
217 [1, 2, 3, 4]
218 [1, 2, 3, 1, 2, 1]
219 [1, 2, 3, 1, 2]
220 [1, 2, 3, 1]
221 [1, 2, 3, 2]
222 [1, 2, 3]
223 [1, 2, 4, 1]
224 [1, 2, 4]
225 [1, 2, 1]
226 [1, 2]
227 [1, 3, 4, 3, 4]
228 [1, 3, 4, 3]
229 [1, 3, 4]
230 [1, 3]
231 [1, 4]
232 [1]
233 [2, 3, 4, 2, 3, 4, 2, 3, 4]
234 [2, 3, 4, 2, 3, 4, 2, 3]
235 [2, 3, 4, 2, 3, 4, 2]
236 [2, 3, 4, 2, 3, 4]
237 [2, 3, 4, 2, 3, 2]
238 [2, 3, 4, 2, 3]
239 [2, 3, 4, 2]
240 [2, 3, 4, 3, 4]
241 [2, 3, 4, 3]
242 [2, 3, 4]
243 [2, 3, 2]
244 [2, 3]
245 [2, 4]
246 [2]
247 [3, 4, 3, 4]
248 [3, 4, 3]
249 [3, 4]
250 [3]
251 [4]
252 []
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: coxnum=10
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+2) for
....: i in range(coxnum+2)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
2 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3]
3 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2]
4 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1]
5 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0]
6 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
7 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
8 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
9 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
10 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3]
11 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
12 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0]
13 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2]
14 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 0]
15 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1]
16 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0]
17 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4]
18 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3]
19 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2]
20 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1]
21 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
22 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1]
23 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0]
24 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
25 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0]
26 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
27 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
28 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2]
29 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1]
30 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3]
31 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0]
32 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
33 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0]
34 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 1]
35 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2]
36 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 0]
37 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1]
38 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2, 3, 4]
39 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2, 3]
40 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2]
41 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0]
42 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
43 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
44 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
45 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1]
46 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4]
47 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 1, 2]
48 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 1]
49 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3]
50 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 1]
51 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2]
52 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1]
53 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2, 3, 4]
54 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2, 3]
55 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2]
56 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
57 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
58 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1]
59 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0]
60 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 1]
61 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
62 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0]
63 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
64 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 2]
65 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
66 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2, 1]
67 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2]
68 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1]
69 [0, 1, 2, 3, 4, 0, 1, 2, 3, 2]
70 [0, 1, 2, 3, 4, 0, 1, 2, 3]
71 [0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0]
72 [0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
73 [0, 1, 2, 3, 4, 0, 1, 2, 0]
74 [0, 1, 2, 3, 4, 0, 1, 2, 1]
75 [0, 1, 2, 3, 4, 0, 1, 2]
76 [0, 1, 2, 3, 4, 0, 1, 3, 4, 0]
77 [0, 1, 2, 3, 4, 0, 1, 3, 4]
78 [0, 1, 2, 3, 4, 0, 1, 3, 0]
79 [0, 1, 2, 3, 4, 0, 1, 3]
80 [0, 1, 2, 3, 4, 0, 1, 0]
81 [0, 1, 2, 3, 4, 0, 1]
82 [0, 1, 2, 3, 4, 0, 2, 3, 4, 2, 3, 4]
83 [0, 1, 2, 3, 4, 0, 2, 3, 4, 2, 3]
84 [0, 1, 2, 3, 4, 0, 2, 3, 4, 2]
85 [0, 1, 2, 3, 4, 0, 2, 3, 4]
86 [0, 1, 2, 3, 4, 0, 2, 3, 2]
87 [0, 1, 2, 3, 4, 0, 2, 3]
88 [0, 1, 2, 3, 4, 0, 2]
89 [0, 1, 2, 3, 4, 0, 3, 4]
90 [0, 1, 2, 3, 4, 0, 3]
91 [0, 1, 2, 3, 4, 0]
92 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
93 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
94 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
95 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1]
96 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
97 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2]
98 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1]
99 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
100 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1]
101 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
102 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1]
103 [0, 1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4]
104 [0, 1, 2, 3, 4, 1, 2, 3, 4, 2, 3]
105 [0, 1, 2, 3, 4, 1, 2, 3, 4, 2]
106 [0, 1, 2, 3, 4, 1, 2, 3, 4]
107 [0, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
108 [0, 1, 2, 3, 4, 1, 2, 3, 1, 2]
109 [0, 1, 2, 3, 4, 1, 2, 3, 1]
110 [0, 1, 2, 3, 4, 1, 2, 3, 2]
111 [0, 1, 2, 3, 4, 1, 2, 3]
112 [0, 1, 2, 3, 4, 1, 2, 1]
113 [0, 1, 2, 3, 4, 1, 2]
114 [0, 1, 2, 3, 4, 1, 3, 4]
115 [0, 1, 2, 3, 4, 1, 3]
116 [0, 1, 2, 3, 4, 1]
117 [0, 1, 2, 3, 4, 2, 3, 4, 2, 3, 4]
118 [0, 1, 2, 3, 4, 2, 3, 4, 2, 3]
119 [0, 1, 2, 3, 4, 2, 3, 4, 2]
120 [0, 1, 2, 3, 4, 2, 3, 4]
121 [0, 1, 2, 3, 4, 2, 3, 2]
122 [0, 1, 2, 3, 4, 2, 3]
123 [0, 1, 2, 3, 4, 2]
124 [0, 1, 2, 3, 4, 3, 4]
125 [0, 1, 2, 3, 4, 3]
126 [0, 1, 2, 3, 4]
127 [0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
128 [0, 1, 2, 3, 0, 1, 2, 0, 1]
129 [0, 1, 2, 3, 0, 1, 2, 0]
130 [0, 1, 2, 3, 0, 1, 2, 1]
131 [0, 1, 2, 3, 0, 1, 2]
132 [0, 1, 2, 3, 0, 1, 0]
133 [0, 1, 2, 3, 0, 1]
134 [0, 1, 2, 3, 0, 2]
135 [0, 1, 2, 3, 0]
136 [0, 1, 2, 3, 1, 2, 1]
137 [0, 1, 2, 3, 1, 2]
138 [0, 1, 2, 3, 1]
139 [0, 1, 2, 3, 2]
140 [0, 1, 2, 3]
141 [0, 1, 2, 4, 0, 1, 0]
142 [0, 1, 2, 4, 0, 1]
143 [0, 1, 2, 4, 0]
144 [0, 1, 2, 4, 1]
145 [0, 1, 2, 4]
146 [0, 1, 2, 0, 1, 0]
147 [0, 1, 2, 0, 1]
148 [0, 1, 2, 0]
149 [0, 1, 2, 1]
150 [0, 1, 2]
151 [0, 1, 3, 4, 0, 3, 4]
152 [0, 1, 3, 4, 0, 3]
153 [0, 1, 3, 4, 0]
154 [0, 1, 3, 4, 3, 4]
155 [0, 1, 3, 4, 3]
156 [0, 1, 3, 4]
157 [0, 1, 3, 0]
158 [0, 1, 3]
159 [0, 1, 4, 0]
160 [0, 1, 4]
161 [0, 1, 0]
162 [0, 1]
163 [0, 2, 3, 4, 2, 3, 4, 2, 3, 4]
164 [0, 2, 3, 4, 2, 3, 4, 2, 3]
165 [0, 2, 3, 4, 2, 3, 4, 2]
166 [0, 2, 3, 4, 2, 3, 4]
167 [0, 2, 3, 4, 2, 3, 2]
168 [0, 2, 3, 4, 2, 3]
169 [0, 2, 3, 4, 2]
170 [0, 2, 3, 4, 3, 4]
171 [0, 2, 3, 4, 3]
172 [0, 2, 3, 4]
173 [0, 2, 3, 2]
174 [0, 2, 3]
175 [0, 2, 4]
176 [0, 2]
177 [0, 3, 4, 3, 4]
178 [0, 3, 4, 3]
179 [0, 3, 4]
180 [0, 3]
181 [0, 4]
182 [0]
183 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
184 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
185 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
186 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1]
187 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
188 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2]
189 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1]
190 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
191 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1]
192 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
193 [1, 2, 3, 4, 1, 2, 3, 4, 1]
194 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4]
195 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3]
196 [1, 2, 3, 4, 1, 2, 3, 4, 2]
197 [1, 2, 3, 4, 1, 2, 3, 4]
198 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
199 [1, 2, 3, 4, 1, 2, 3, 1, 2]
200 [1, 2, 3, 4, 1, 2, 3, 1]
201 [1, 2, 3, 4, 1, 2, 3, 2]
202 [1, 2, 3, 4, 1, 2, 3]
203 [1, 2, 3, 4, 1, 2, 1]
204 [1, 2, 3, 4, 1, 2]
205 [1, 2, 3, 4, 1, 3, 4]
206 [1, 2, 3, 4, 1, 3]
207 [1, 2, 3, 4, 1]
208 [1, 2, 3, 4, 2, 3, 4, 2, 3, 4]
209 [1, 2, 3, 4, 2, 3, 4, 2, 3]
210 [1, 2, 3, 4, 2, 3, 4, 2]
211 [1, 2, 3, 4, 2, 3, 4]
212 [1, 2, 3, 4, 2, 3, 2]
213 [1, 2, 3, 4, 2, 3]
214 [1, 2, 3, 4, 2]
215 [1, 2, 3, 4, 3, 4]
216 [1, 2, 3, 4, 3]
217 [1, 2, 3, 4]
218 [1, 2, 3, 1, 2, 1]
219 [1, 2, 3, 1, 2]
220 [1, 2, 3, 1]
221 [1, 2, 3, 2]
222 [1, 2, 3]
223 [1, 2, 4, 1]
224 [1, 2, 4]
225 [1, 2, 1]
226 [1, 2]
227 [1, 3, 4, 3, 4]
228 [1, 3, 4, 3]
229 [1, 3, 4]
230 [1, 3]
231 [1, 4]
232 [1]
233 [2, 3, 4, 2, 3, 4, 2, 3, 4]
234 [2, 3, 4, 2, 3, 4, 2, 3]
235 [2, 3, 4, 2, 3, 4, 2]
236 [2, 3, 4, 2, 3, 4]
237 [2, 3, 4, 2, 3, 2]
238 [2, 3, 4, 2, 3]
239 [2, 3, 4, 2]
240 [2, 3, 4, 3, 4]
241 [2, 3, 4, 3]
242 [2, 3, 4]
243 [2, 3, 2]
244 [2, 3]
245 [2, 4]
246 [2]
247 [3, 4, 3, 4]
248 [3, 4, 3]
249 [3, 4]
250 [3]
251 [4]
252 []
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: coxnum=10
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+3) for
....: i in range(coxnum+2)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
2 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3]
3 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2]
4 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1]
5 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0]
6 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
7 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
8 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
9 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
10 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3]
11 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
12 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0]
13 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2]
14 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 0]
15 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1]
16 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0]
17 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4]
18 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3]
19 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2]
20 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1]
21 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
22 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1]
23 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0]
24 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
25 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0]
26 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
27 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
28 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2]
29 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1]
30 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3]
31 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0]
32 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
33 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0]
34 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 1]
35 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2]
36 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 0]
37 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1]
38 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2, 3, 4]
39 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2, 3]
40 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2]
41 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0]
42 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
43 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
44 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
45 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1]
46 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4]
47 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 1, 2]
48 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 1]
49 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3]
50 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 1]
51 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2]
52 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1]
53 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2, 3, 4]
54 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2, 3]
55 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2]
56 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
57 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
58 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1]
59 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0]
60 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 1]
61 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
62 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0]
63 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
64 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 2]
65 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
66 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2, 1]
67 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2]
68 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1]
69 [0, 1, 2, 3, 4, 0, 1, 2, 3, 2]
70 [0, 1, 2, 3, 4, 0, 1, 2, 3]
71 [0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0]
72 [0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
73 [0, 1, 2, 3, 4, 0, 1, 2, 0]
74 [0, 1, 2, 3, 4, 0, 1, 2, 1]
75 [0, 1, 2, 3, 4, 0, 1, 2]
76 [0, 1, 2, 3, 4, 0, 1, 3, 4, 0]
77 [0, 1, 2, 3, 4, 0, 1, 3, 4]
78 [0, 1, 2, 3, 4, 0, 1, 3, 0]
79 [0, 1, 2, 3, 4, 0, 1, 3]
80 [0, 1, 2, 3, 4, 0, 1, 0]
81 [0, 1, 2, 3, 4, 0, 1]
82 [0, 1, 2, 3, 4, 0, 2, 3, 4, 2, 3, 4]
83 [0, 1, 2, 3, 4, 0, 2, 3, 4, 2, 3]
84 [0, 1, 2, 3, 4, 0, 2, 3, 4, 2]
85 [0, 1, 2, 3, 4, 0, 2, 3, 4]
86 [0, 1, 2, 3, 4, 0, 2, 3, 2]
87 [0, 1, 2, 3, 4, 0, 2, 3]
88 [0, 1, 2, 3, 4, 0, 2]
89 [0, 1, 2, 3, 4, 0, 3, 4]
90 [0, 1, 2, 3, 4, 0, 3]
91 [0, 1, 2, 3, 4, 0]
92 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
93 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
94 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
95 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1]
96 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
97 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2]
98 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1]
99 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
100 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1]
101 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
102 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1]
103 [0, 1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4]
104 [0, 1, 2, 3, 4, 1, 2, 3, 4, 2, 3]
105 [0, 1, 2, 3, 4, 1, 2, 3, 4, 2]
106 [0, 1, 2, 3, 4, 1, 2, 3, 4]
107 [0, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
108 [0, 1, 2, 3, 4, 1, 2, 3, 1, 2]
109 [0, 1, 2, 3, 4, 1, 2, 3, 1]
110 [0, 1, 2, 3, 4, 1, 2, 3, 2]
111 [0, 1, 2, 3, 4, 1, 2, 3]
112 [0, 1, 2, 3, 4, 1, 2, 1]
113 [0, 1, 2, 3, 4, 1, 2]
114 [0, 1, 2, 3, 4, 1, 3, 4]
115 [0, 1, 2, 3, 4, 1, 3]
116 [0, 1, 2, 3, 4, 1]
117 [0, 1, 2, 3, 4, 2, 3, 4, 2, 3, 4]
118 [0, 1, 2, 3, 4, 2, 3, 4, 2, 3]
119 [0, 1, 2, 3, 4, 2, 3, 4, 2]
120 [0, 1, 2, 3, 4, 2, 3, 4]
121 [0, 1, 2, 3, 4, 2, 3, 2]
122 [0, 1, 2, 3, 4, 2, 3]
123 [0, 1, 2, 3, 4, 2]
124 [0, 1, 2, 3, 4, 3, 4]
125 [0, 1, 2, 3, 4, 3]
126 [0, 1, 2, 3, 4]
127 [0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
128 [0, 1, 2, 3, 0, 1, 2, 0, 1]
129 [0, 1, 2, 3, 0, 1, 2, 0]
130 [0, 1, 2, 3, 0, 1, 2, 1]
131 [0, 1, 2, 3, 0, 1, 2]
132 [0, 1, 2, 3, 0, 1, 0]
133 [0, 1, 2, 3, 0, 1]
134 [0, 1, 2, 3, 0, 2]
135 [0, 1, 2, 3, 0]
136 [0, 1, 2, 3, 1, 2, 1]
137 [0, 1, 2, 3, 1, 2]
138 [0, 1, 2, 3, 1]
139 [0, 1, 2, 3, 2]
140 [0, 1, 2, 3]
141 [0, 1, 2, 4, 0, 1, 0]
142 [0, 1, 2, 4, 0, 1]
143 [0, 1, 2, 4, 0]
144 [0, 1, 2, 4, 1]
145 [0, 1, 2, 4]
146 [0, 1, 2, 0, 1, 0]
147 [0, 1, 2, 0, 1]
148 [0, 1, 2, 0]
149 [0, 1, 2, 1]
150 [0, 1, 2]
151 [0, 1, 3, 4, 0, 3, 4]
152 [0, 1, 3, 4, 0, 3]
153 [0, 1, 3, 4, 0]
154 [0, 1, 3, 4, 3, 4]
155 [0, 1, 3, 4, 3]
156 [0, 1, 3, 4]
157 [0, 1, 3, 0]
158 [0, 1, 3]
159 [0, 1, 4, 0]
160 [0, 1, 4]
161 [0, 1, 0]
162 [0, 1]
163 [0, 2, 3, 4, 2, 3, 4, 2, 3, 4]
164 [0, 2, 3, 4, 2, 3, 4, 2, 3]
165 [0, 2, 3, 4, 2, 3, 4, 2]
166 [0, 2, 3, 4, 2, 3, 4]
167 [0, 2, 3, 4, 2, 3, 2]
168 [0, 2, 3, 4, 2, 3]
169 [0, 2, 3, 4, 2]
170 [0, 2, 3, 4, 3, 4]
171 [0, 2, 3, 4, 3]
172 [0, 2, 3, 4]
173 [0, 2, 3, 2]
174 [0, 2, 3]
175 [0, 2, 4]
176 [0, 2]
177 [0, 3, 4, 3, 4]
178 [0, 3, 4, 3]
179 [0, 3, 4]
180 [0, 3]
181 [0, 4]
182 [0]
183 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
184 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
185 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
186 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1]
187 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
188 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2]
189 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1]
190 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
191 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1]
192 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
193 [1, 2, 3, 4, 1, 2, 3, 4, 1]
194 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4]
195 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3]
196 [1, 2, 3, 4, 1, 2, 3, 4, 2]
197 [1, 2, 3, 4, 1, 2, 3, 4]
198 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
199 [1, 2, 3, 4, 1, 2, 3, 1, 2]
200 [1, 2, 3, 4, 1, 2, 3, 1]
201 [1, 2, 3, 4, 1, 2, 3, 2]
202 [1, 2, 3, 4, 1, 2, 3]
203 [1, 2, 3, 4, 1, 2, 1]
204 [1, 2, 3, 4, 1, 2]
205 [1, 2, 3, 4, 1, 3, 4]
206 [1, 2, 3, 4, 1, 3]
207 [1, 2, 3, 4, 1]
208 [1, 2, 3, 4, 2, 3, 4, 2, 3, 4]
209 [1, 2, 3, 4, 2, 3, 4, 2, 3]
210 [1, 2, 3, 4, 2, 3, 4, 2]
211 [1, 2, 3, 4, 2, 3, 4]
212 [1, 2, 3, 4, 2, 3, 2]
213 [1, 2, 3, 4, 2, 3]
214 [1, 2, 3, 4, 2]
215 [1, 2, 3, 4, 3, 4]
216 [1, 2, 3, 4, 3]
217 [1, 2, 3, 4]
218 [1, 2, 3, 1, 2, 1]
219 [1, 2, 3, 1, 2]
220 [1, 2, 3, 1]
221 [1, 2, 3, 2]
222 [1, 2, 3]
223 [1, 2, 4, 1]
224 [1, 2, 4]
225 [1, 2, 1]
226 [1, 2]
227 [1, 3, 4, 3, 4]
228 [1, 3, 4, 3]
229 [1, 3, 4]
230 [1, 3]
231 [1, 4]
232 [1]
233 [2, 3, 4, 2, 3, 4, 2, 3, 4]
234 [2, 3, 4, 2, 3, 4, 2, 3]
235 [2, 3, 4, 2, 3, 4, 2]
236 [2, 3, 4, 2, 3, 4]
237 [2, 3, 4, 2, 3, 2]
238 [2, 3, 4, 2, 3]
239 [2, 3, 4, 2]
240 [2, 3, 4, 3, 4]
241 [2, 3, 4, 3]
242 [2, 3, 4]
243 [2, 3, 2]
244 [2, 3]
245 [2, 4]
246 [2]
247 [3, 4, 3, 4]
248 [3, 4, 3]
249 [3, 4]
250 [3]
251 [4]
252 []
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: coxnum=10
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+4) for
....: i in range(coxnum+2)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
2 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3]
3 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2]
4 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1]
5 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0]
6 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
7 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
8 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
9 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
10 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3]
11 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
12 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0]
13 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2]
14 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 0]
15 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1]
16 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0]
17 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4]
18 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3]
19 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2]
20 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1]
21 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
22 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1]
23 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0]
24 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
25 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0]
26 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
27 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
28 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2]
29 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1]
30 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3]
31 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0]
32 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
33 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0]
34 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 1]
35 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2]
36 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 0]
37 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1]
38 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2, 3, 4]
39 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2, 3]
40 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2]
41 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0]
42 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
43 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
44 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
45 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1]
46 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4]
47 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 1, 2]
48 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 1]
49 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3]
50 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 1]
51 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2]
52 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1]
53 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2, 3, 4]
54 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2, 3]
55 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2]
56 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
57 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
58 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1]
59 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0]
60 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 1]
61 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
62 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0]
63 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
64 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 2]
65 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
66 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2, 1]
67 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2]
68 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1]
69 [0, 1, 2, 3, 4, 0, 1, 2, 3, 2]
70 [0, 1, 2, 3, 4, 0, 1, 2, 3]
71 [0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0]
72 [0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
73 [0, 1, 2, 3, 4, 0, 1, 2, 0]
74 [0, 1, 2, 3, 4, 0, 1, 2, 1]
75 [0, 1, 2, 3, 4, 0, 1, 2]
76 [0, 1, 2, 3, 4, 0, 1, 3, 4, 0]
77 [0, 1, 2, 3, 4, 0, 1, 3, 4]
78 [0, 1, 2, 3, 4, 0, 1, 3, 0]
79 [0, 1, 2, 3, 4, 0, 1, 3]
80 [0, 1, 2, 3, 4, 0, 1, 0]
81 [0, 1, 2, 3, 4, 0, 1]
82 [0, 1, 2, 3, 4, 0, 2, 3, 4, 2, 3, 4]
83 [0, 1, 2, 3, 4, 0, 2, 3, 4, 2, 3]
84 [0, 1, 2, 3, 4, 0, 2, 3, 4, 2]
85 [0, 1, 2, 3, 4, 0, 2, 3, 4]
86 [0, 1, 2, 3, 4, 0, 2, 3, 2]
87 [0, 1, 2, 3, 4, 0, 2, 3]
88 [0, 1, 2, 3, 4, 0, 2]
89 [0, 1, 2, 3, 4, 0, 3, 4]
90 [0, 1, 2, 3, 4, 0, 3]
91 [0, 1, 2, 3, 4, 0]
92 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
93 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
94 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
95 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1]
96 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
97 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2]
98 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1]
99 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
100 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1]
101 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
102 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1]
103 [0, 1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4]
104 [0, 1, 2, 3, 4, 1, 2, 3, 4, 2, 3]
105 [0, 1, 2, 3, 4, 1, 2, 3, 4, 2]
106 [0, 1, 2, 3, 4, 1, 2, 3, 4]
107 [0, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
108 [0, 1, 2, 3, 4, 1, 2, 3, 1, 2]
109 [0, 1, 2, 3, 4, 1, 2, 3, 1]
110 [0, 1, 2, 3, 4, 1, 2, 3, 2]
111 [0, 1, 2, 3, 4, 1, 2, 3]
112 [0, 1, 2, 3, 4, 1, 2, 1]
113 [0, 1, 2, 3, 4, 1, 2]
114 [0, 1, 2, 3, 4, 1, 3, 4]
115 [0, 1, 2, 3, 4, 1, 3]
116 [0, 1, 2, 3, 4, 1]
117 [0, 1, 2, 3, 4, 2, 3, 4, 2, 3, 4]
118 [0, 1, 2, 3, 4, 2, 3, 4, 2, 3]
119 [0, 1, 2, 3, 4, 2, 3, 4, 2]
120 [0, 1, 2, 3, 4, 2, 3, 4]
121 [0, 1, 2, 3, 4, 2, 3, 2]
122 [0, 1, 2, 3, 4, 2, 3]
123 [0, 1, 2, 3, 4, 2]
124 [0, 1, 2, 3, 4, 3, 4]
125 [0, 1, 2, 3, 4, 3]
126 [0, 1, 2, 3, 4]
127 [0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
128 [0, 1, 2, 3, 0, 1, 2, 0, 1]
129 [0, 1, 2, 3, 0, 1, 2, 0]
130 [0, 1, 2, 3, 0, 1, 2, 1]
131 [0, 1, 2, 3, 0, 1, 2]
132 [0, 1, 2, 3, 0, 1, 0]
133 [0, 1, 2, 3, 0, 1]
134 [0, 1, 2, 3, 0, 2]
135 [0, 1, 2, 3, 0]
136 [0, 1, 2, 3, 1, 2, 1]
137 [0, 1, 2, 3, 1, 2]
138 [0, 1, 2, 3, 1]
139 [0, 1, 2, 3, 2]
140 [0, 1, 2, 3]
141 [0, 1, 2, 4, 0, 1, 0]
142 [0, 1, 2, 4, 0, 1]
143 [0, 1, 2, 4, 0]
144 [0, 1, 2, 4, 1]
145 [0, 1, 2, 4]
146 [0, 1, 2, 0, 1, 0]
147 [0, 1, 2, 0, 1]
148 [0, 1, 2, 0]
149 [0, 1, 2, 1]
150 [0, 1, 2]
151 [0, 1, 3, 4, 0, 3, 4]
152 [0, 1, 3, 4, 0, 3]
153 [0, 1, 3, 4, 0]
154 [0, 1, 3, 4, 3, 4]
155 [0, 1, 3, 4, 3]
156 [0, 1, 3, 4]
157 [0, 1, 3, 0]
158 [0, 1, 3]
159 [0, 1, 4, 0]
160 [0, 1, 4]
161 [0, 1, 0]
162 [0, 1]
163 [0, 2, 3, 4, 2, 3, 4, 2, 3, 4]
164 [0, 2, 3, 4, 2, 3, 4, 2, 3]
165 [0, 2, 3, 4, 2, 3, 4, 2]
166 [0, 2, 3, 4, 2, 3, 4]
167 [0, 2, 3, 4, 2, 3, 2]
168 [0, 2, 3, 4, 2, 3]
169 [0, 2, 3, 4, 2]
170 [0, 2, 3, 4, 3, 4]
171 [0, 2, 3, 4, 3]
172 [0, 2, 3, 4]
173 [0, 2, 3, 2]
174 [0, 2, 3]
175 [0, 2, 4]
176 [0, 2]
177 [0, 3, 4, 3, 4]
178 [0, 3, 4, 3]
179 [0, 3, 4]
180 [0, 3]
181 [0, 4]
182 [0]
183 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
184 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
185 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
186 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1]
187 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
188 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2]
189 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1]
190 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
191 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1]
192 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
193 [1, 2, 3, 4, 1, 2, 3, 4, 1]
194 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4]
195 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3]
196 [1, 2, 3, 4, 1, 2, 3, 4, 2]
197 [1, 2, 3, 4, 1, 2, 3, 4]
198 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
199 [1, 2, 3, 4, 1, 2, 3, 1, 2]
200 [1, 2, 3, 4, 1, 2, 3, 1]
201 [1, 2, 3, 4, 1, 2, 3, 2]
202 [1, 2, 3, 4, 1, 2, 3]
203 [1, 2, 3, 4, 1, 2, 1]
204 [1, 2, 3, 4, 1, 2]
205 [1, 2, 3, 4, 1, 3, 4]
206 [1, 2, 3, 4, 1, 3]
207 [1, 2, 3, 4, 1]
208 [1, 2, 3, 4, 2, 3, 4, 2, 3, 4]
209 [1, 2, 3, 4, 2, 3, 4, 2, 3]
210 [1, 2, 3, 4, 2, 3, 4, 2]
211 [1, 2, 3, 4, 2, 3, 4]
212 [1, 2, 3, 4, 2, 3, 2]
213 [1, 2, 3, 4, 2, 3]
214 [1, 2, 3, 4, 2]
215 [1, 2, 3, 4, 3, 4]
216 [1, 2, 3, 4, 3]
217 [1, 2, 3, 4]
218 [1, 2, 3, 1, 2, 1]
219 [1, 2, 3, 1, 2]
220 [1, 2, 3, 1]
221 [1, 2, 3, 2]
222 [1, 2, 3]
223 [1, 2, 4, 1]
224 [1, 2, 4]
225 [1, 2, 1]
226 [1, 2]
227 [1, 3, 4, 3, 4]
228 [1, 3, 4, 3]
229 [1, 3, 4]
230 [1, 3]
231 [1, 4]
232 [1]
233 [2, 3, 4, 2, 3, 4, 2, 3, 4]
234 [2, 3, 4, 2, 3, 4, 2, 3]
235 [2, 3, 4, 2, 3, 4, 2]
236 [2, 3, 4, 2, 3, 4]
237 [2, 3, 4, 2, 3, 2]
238 [2, 3, 4, 2, 3]
239 [2, 3, 4, 2]
240 [2, 3, 4, 3, 4]
241 [2, 3, 4, 3]
242 [2, 3, 4]
243 [2, 3, 2]
244 [2, 3]
245 [2, 4]
246 [2]
247 [3, 4, 3, 4]
248 [3, 4, 3]
249 [3, 4]
250 [3]
251 [4]
252 []
sage: A=CartanMatrix(['D',4])
....: c=[0,1,2,3]
....: coxnum=6
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+1) for
....: i in range(coxnum+2)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]
2 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2]
3 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 3]
4 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1]
5 [0, 1, 2, 3, 0, 1, 2, 3, 0]
6 [0, 1, 2, 3, 0, 1, 2, 3]
7 [0, 1, 2, 3, 0, 1, 2, 0, 1]
8 [0, 1, 2, 3, 0, 1, 2, 0]
9 [0, 1, 2, 3, 0, 1, 2]
10 [0, 1, 2, 3, 0, 1, 3, 0, 1]
11 [0, 1, 2, 3, 0, 1, 3, 0]
12 [0, 1, 2, 3, 0, 1, 3]
13 [0, 1, 2, 3, 0, 1, 0]
14 [0, 1, 2, 3, 0, 1]
15 [0, 1, 2, 3, 0]
16 [0, 1, 2, 3, 1, 2, 3]
17 [0, 1, 2, 3, 1, 2]
18 [0, 1, 2, 3, 1, 3]
19 [0, 1, 2, 3, 1]
20 [0, 1, 2, 3]
21 [0, 1, 2, 0, 1, 0]
22 [0, 1, 2, 0, 1]
23 [0, 1, 2, 0]
24 [0, 1, 2, 1]
25 [0, 1, 2]
26 [0, 1, 3, 0, 1, 0]
27 [0, 1, 3, 0, 1]
28 [0, 1, 3, 0]
29 [0, 1, 3, 1]
30 [0, 1, 3]
31 [0, 1, 0]
32 [0, 1]
33 [0, 2, 3]
34 [0, 2]
35 [0, 3]
36 [0]
37 [1, 2, 3, 1, 2, 3]
38 [1, 2, 3, 1, 2]
39 [1, 2, 3, 1, 3]
40 [1, 2, 3, 1]
41 [1, 2, 3]
42 [1, 2, 1]
43 [1, 2]
44 [1, 3, 1]
45 [1, 3]
46 [1]
47 [2, 3]
48 [2]
49 [3]
50 []
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: coxnum=6
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+1) for
....: i in range(coxnum+2)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
2 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3]
3 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2]
4 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1]
5 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0]
6 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
7 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
8 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
9 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
10 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3]
11 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
12 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0]
13 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2]
14 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 0]
15 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1]
16 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0]
17 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4]
18 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3]
19 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2]
20 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1]
21 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
22 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1]
23 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0]
24 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
25 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0]
26 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
27 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
28 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2]
29 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1]
30 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3]
31 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0]
32 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
33 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0]
34 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 1]
35 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2]
36 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 0]
37 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1]
38 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2, 3, 4]
39 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2, 3]
40 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2]
41 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0]
42 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
43 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
44 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
45 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1]
46 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4]
47 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 1, 2]
48 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 1]
49 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3]
50 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 1]
51 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2]
52 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1]
53 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2, 3, 4]
54 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2, 3]
55 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2]
56 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
57 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
58 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1]
59 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0]
60 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 1]
61 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
62 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0]
63 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
64 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 2]
65 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
66 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2, 1]
67 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2]
68 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1]
69 [0, 1, 2, 3, 4, 0, 1, 2, 3, 2]
70 [0, 1, 2, 3, 4, 0, 1, 2, 3]
71 [0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0]
72 [0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
73 [0, 1, 2, 3, 4, 0, 1, 2, 0]
74 [0, 1, 2, 3, 4, 0, 1, 2, 1]
75 [0, 1, 2, 3, 4, 0, 1, 2]
76 [0, 1, 2, 3, 4, 0, 1, 3, 4, 0]
77 [0, 1, 2, 3, 4, 0, 1, 3, 4]
78 [0, 1, 2, 3, 4, 0, 1, 3, 0]
79 [0, 1, 2, 3, 4, 0, 1, 3]
80 [0, 1, 2, 3, 4, 0, 1, 0]
81 [0, 1, 2, 3, 4, 0, 1]
82 [0, 1, 2, 3, 4, 0, 2, 3, 4, 2, 3, 4]
83 [0, 1, 2, 3, 4, 0, 2, 3, 4, 2, 3]
84 [0, 1, 2, 3, 4, 0, 2, 3, 4, 2]
85 [0, 1, 2, 3, 4, 0, 2, 3, 4]
86 [0, 1, 2, 3, 4, 0, 2, 3, 2]
87 [0, 1, 2, 3, 4, 0, 2, 3]
88 [0, 1, 2, 3, 4, 0, 2]
89 [0, 1, 2, 3, 4, 0, 3, 4]
90 [0, 1, 2, 3, 4, 0, 3]
91 [0, 1, 2, 3, 4, 0]
92 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
93 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
94 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
95 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1]
96 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
97 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2]
98 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1]
99 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
100 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1]
101 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
102 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1]
103 [0, 1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4]
104 [0, 1, 2, 3, 4, 1, 2, 3, 4, 2, 3]
105 [0, 1, 2, 3, 4, 1, 2, 3, 4, 2]
106 [0, 1, 2, 3, 4, 1, 2, 3, 4]
107 [0, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
108 [0, 1, 2, 3, 4, 1, 2, 3, 1, 2]
109 [0, 1, 2, 3, 4, 1, 2, 3, 1]
110 [0, 1, 2, 3, 4, 1, 2, 3, 2]
111 [0, 1, 2, 3, 4, 1, 2, 3]
112 [0, 1, 2, 3, 4, 1, 2, 1]
113 [0, 1, 2, 3, 4, 1, 2]
114 [0, 1, 2, 3, 4, 1, 3, 4]
115 [0, 1, 2, 3, 4, 1, 3]
116 [0, 1, 2, 3, 4, 1]
117 [0, 1, 2, 3, 4, 2, 3, 4, 2, 3, 4]
118 [0, 1, 2, 3, 4, 2, 3, 4, 2, 3]
119 [0, 1, 2, 3, 4, 2, 3, 4, 2]
120 [0, 1, 2, 3, 4, 2, 3, 4]
121 [0, 1, 2, 3, 4, 2, 3, 2]
122 [0, 1, 2, 3, 4, 2, 3]
123 [0, 1, 2, 3, 4, 2]
124 [0, 1, 2, 3, 4, 3, 4]
125 [0, 1, 2, 3, 4, 3]
126 [0, 1, 2, 3, 4]
127 [0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
128 [0, 1, 2, 3, 0, 1, 2, 0, 1]
129 [0, 1, 2, 3, 0, 1, 2, 0]
130 [0, 1, 2, 3, 0, 1, 2, 1]
131 [0, 1, 2, 3, 0, 1, 2]
132 [0, 1, 2, 3, 0, 1, 0]
133 [0, 1, 2, 3, 0, 1]
134 [0, 1, 2, 3, 0, 2]
135 [0, 1, 2, 3, 0]
136 [0, 1, 2, 3, 1, 2, 1]
137 [0, 1, 2, 3, 1, 2]
138 [0, 1, 2, 3, 1]
139 [0, 1, 2, 3, 2]
140 [0, 1, 2, 3]
141 [0, 1, 2, 4, 0, 1, 0]
142 [0, 1, 2, 4, 0, 1]
143 [0, 1, 2, 4, 0]
144 [0, 1, 2, 4, 1]
145 [0, 1, 2, 4]
146 [0, 1, 2, 0, 1, 0]
147 [0, 1, 2, 0, 1]
148 [0, 1, 2, 0]
149 [0, 1, 2, 1]
150 [0, 1, 2]
151 [0, 1, 3, 4, 0, 3, 4]
152 [0, 1, 3, 4, 0, 3]
153 [0, 1, 3, 4, 0]
154 [0, 1, 3, 4, 3, 4]
155 [0, 1, 3, 4, 3]
156 [0, 1, 3, 4]
157 [0, 1, 3, 0]
158 [0, 1, 3]
159 [0, 1, 4, 0]
160 [0, 1, 4]
161 [0, 1, 0]
162 [0, 1]
163 [0, 2, 3, 4, 2, 3, 4, 2, 3, 4]
164 [0, 2, 3, 4, 2, 3, 4, 2, 3]
165 [0, 2, 3, 4, 2, 3, 4, 2]
166 [0, 2, 3, 4, 2, 3, 4]
167 [0, 2, 3, 4, 2, 3, 2]
168 [0, 2, 3, 4, 2, 3]
169 [0, 2, 3, 4, 2]
170 [0, 2, 3, 4, 3, 4]
171 [0, 2, 3, 4, 3]
172 [0, 2, 3, 4]
173 [0, 2, 3, 2]
174 [0, 2, 3]
175 [0, 2, 4]
176 [0, 2]
177 [0, 3, 4, 3, 4]
178 [0, 3, 4, 3]
179 [0, 3, 4]
180 [0, 3]
181 [0, 4]
182 [0]
183 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
184 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
185 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
186 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1]
187 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
188 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2]
189 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1]
190 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
191 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1]
192 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
193 [1, 2, 3, 4, 1, 2, 3, 4, 1]
194 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4]
195 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3]
196 [1, 2, 3, 4, 1, 2, 3, 4, 2]
197 [1, 2, 3, 4, 1, 2, 3, 4]
198 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
199 [1, 2, 3, 4, 1, 2, 3, 1, 2]
200 [1, 2, 3, 4, 1, 2, 3, 1]
201 [1, 2, 3, 4, 1, 2, 3, 2]
202 [1, 2, 3, 4, 1, 2, 3]
203 [1, 2, 3, 4, 1, 2, 1]
204 [1, 2, 3, 4, 1, 2]
205 [1, 2, 3, 4, 1, 3, 4]
206 [1, 2, 3, 4, 1, 3]
207 [1, 2, 3, 4, 1]
208 [1, 2, 3, 4, 2, 3, 4, 2, 3, 4]
209 [1, 2, 3, 4, 2, 3, 4, 2, 3]
210 [1, 2, 3, 4, 2, 3, 4, 2]
211 [1, 2, 3, 4, 2, 3, 4]
212 [1, 2, 3, 4, 2, 3, 2]
213 [1, 2, 3, 4, 2, 3]
214 [1, 2, 3, 4, 2]
215 [1, 2, 3, 4, 3, 4]
216 [1, 2, 3, 4, 3]
217 [1, 2, 3, 4]
218 [1, 2, 3, 1, 2, 1]
219 [1, 2, 3, 1, 2]
220 [1, 2, 3, 1]
221 [1, 2, 3, 2]
222 [1, 2, 3]
223 [1, 2, 4, 1]
224 [1, 2, 4]
225 [1, 2, 1]
226 [1, 2]
227 [1, 3, 4, 3, 4]
228 [1, 3, 4, 3]
229 [1, 3, 4]
230 [1, 3]
231 [1, 4]
232 [1]
233 [2, 3, 4, 2, 3, 4, 2, 3, 4]
234 [2, 3, 4, 2, 3, 4, 2, 3]
235 [2, 3, 4, 2, 3, 4, 2]
236 [2, 3, 4, 2, 3, 4]
237 [2, 3, 4, 2, 3, 2]
238 [2, 3, 4, 2, 3]
239 [2, 3, 4, 2]
240 [2, 3, 4, 3, 4]
241 [2, 3, 4, 3]
242 [2, 3, 4]
243 [2, 3, 2]
244 [2, 3]
245 [2, 4]
246 [2]
247 [3, 4, 3, 4]
248 [3, 4, 3]
249 [3, 4]
250 [3]
251 [4]
252 []
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+1) for
....: i in range(2)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
FAILURE! 4
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+1) for
....: i in range(3)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
FAILURE! 4
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+1) for
....: i in range(4)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
FAILURE! 4
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+1) for
....: i in range(5)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
FAILURE! 4
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+1) for
....: i in range(6)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
2 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3]
3 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2]
4 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1]
5 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0]
6 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
7 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
8 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
9 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
10 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3]
11 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
12 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0]
13 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2]
14 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 0]
15 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1]
16 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0]
17 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4]
18 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3]
19 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2]
20 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1]
21 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
22 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1]
23 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0]
24 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
25 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0]
26 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
27 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
28 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2]
29 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1]
30 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3]
31 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0]
32 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
33 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0]
34 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 1]
35 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2]
36 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 0]
37 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1]
38 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2, 3, 4]
39 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2, 3]
40 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2]
41 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0]
42 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
43 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
44 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
45 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1]
46 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4]
47 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 1, 2]
48 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 1]
49 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3]
50 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 1]
51 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2]
52 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1]
53 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2, 3, 4]
54 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2, 3]
55 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2]
56 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
57 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
58 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1]
59 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0]
60 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 1]
61 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
62 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0]
63 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
64 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 2]
65 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
66 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2, 1]
67 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2]
68 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1]
69 [0, 1, 2, 3, 4, 0, 1, 2, 3, 2]
70 [0, 1, 2, 3, 4, 0, 1, 2, 3]
71 [0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0]
72 [0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
73 [0, 1, 2, 3, 4, 0, 1, 2, 0]
74 [0, 1, 2, 3, 4, 0, 1, 2, 1]
75 [0, 1, 2, 3, 4, 0, 1, 2]
76 [0, 1, 2, 3, 4, 0, 1, 3, 4, 0]
77 [0, 1, 2, 3, 4, 0, 1, 3, 4]
78 [0, 1, 2, 3, 4, 0, 1, 3, 0]
79 [0, 1, 2, 3, 4, 0, 1, 3]
80 [0, 1, 2, 3, 4, 0, 1, 0]
81 [0, 1, 2, 3, 4, 0, 1]
82 [0, 1, 2, 3, 4, 0, 2, 3, 4, 2, 3, 4]
83 [0, 1, 2, 3, 4, 0, 2, 3, 4, 2, 3]
84 [0, 1, 2, 3, 4, 0, 2, 3, 4, 2]
85 [0, 1, 2, 3, 4, 0, 2, 3, 4]
86 [0, 1, 2, 3, 4, 0, 2, 3, 2]
87 [0, 1, 2, 3, 4, 0, 2, 3]
88 [0, 1, 2, 3, 4, 0, 2]
89 [0, 1, 2, 3, 4, 0, 3, 4]
90 [0, 1, 2, 3, 4, 0, 3]
91 [0, 1, 2, 3, 4, 0]
92 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
93 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
94 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
95 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1]
96 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
97 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2]
98 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1]
99 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
100 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1]
101 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
102 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1]
103 [0, 1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4]
104 [0, 1, 2, 3, 4, 1, 2, 3, 4, 2, 3]
105 [0, 1, 2, 3, 4, 1, 2, 3, 4, 2]
106 [0, 1, 2, 3, 4, 1, 2, 3, 4]
107 [0, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
108 [0, 1, 2, 3, 4, 1, 2, 3, 1, 2]
109 [0, 1, 2, 3, 4, 1, 2, 3, 1]
110 [0, 1, 2, 3, 4, 1, 2, 3, 2]
111 [0, 1, 2, 3, 4, 1, 2, 3]
112 [0, 1, 2, 3, 4, 1, 2, 1]
113 [0, 1, 2, 3, 4, 1, 2]
114 [0, 1, 2, 3, 4, 1, 3, 4]
115 [0, 1, 2, 3, 4, 1, 3]
116 [0, 1, 2, 3, 4, 1]
117 [0, 1, 2, 3, 4, 2, 3, 4, 2, 3, 4]
118 [0, 1, 2, 3, 4, 2, 3, 4, 2, 3]
119 [0, 1, 2, 3, 4, 2, 3, 4, 2]
120 [0, 1, 2, 3, 4, 2, 3, 4]
121 [0, 1, 2, 3, 4, 2, 3, 2]
122 [0, 1, 2, 3, 4, 2, 3]
123 [0, 1, 2, 3, 4, 2]
124 [0, 1, 2, 3, 4, 3, 4]
125 [0, 1, 2, 3, 4, 3]
126 [0, 1, 2, 3, 4]
127 [0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
128 [0, 1, 2, 3, 0, 1, 2, 0, 1]
129 [0, 1, 2, 3, 0, 1, 2, 0]
130 [0, 1, 2, 3, 0, 1, 2, 1]
131 [0, 1, 2, 3, 0, 1, 2]
132 [0, 1, 2, 3, 0, 1, 0]
133 [0, 1, 2, 3, 0, 1]
134 [0, 1, 2, 3, 0, 2]
135 [0, 1, 2, 3, 0]
136 [0, 1, 2, 3, 1, 2, 1]
137 [0, 1, 2, 3, 1, 2]
138 [0, 1, 2, 3, 1]
139 [0, 1, 2, 3, 2]
140 [0, 1, 2, 3]
141 [0, 1, 2, 4, 0, 1, 0]
142 [0, 1, 2, 4, 0, 1]
143 [0, 1, 2, 4, 0]
144 [0, 1, 2, 4, 1]
145 [0, 1, 2, 4]
146 [0, 1, 2, 0, 1, 0]
147 [0, 1, 2, 0, 1]
148 [0, 1, 2, 0]
149 [0, 1, 2, 1]
150 [0, 1, 2]
151 [0, 1, 3, 4, 0, 3, 4]
152 [0, 1, 3, 4, 0, 3]
153 [0, 1, 3, 4, 0]
154 [0, 1, 3, 4, 3, 4]
155 [0, 1, 3, 4, 3]
156 [0, 1, 3, 4]
157 [0, 1, 3, 0]
158 [0, 1, 3]
159 [0, 1, 4, 0]
160 [0, 1, 4]
161 [0, 1, 0]
162 [0, 1]
163 [0, 2, 3, 4, 2, 3, 4, 2, 3, 4]
164 [0, 2, 3, 4, 2, 3, 4, 2, 3]
165 [0, 2, 3, 4, 2, 3, 4, 2]
166 [0, 2, 3, 4, 2, 3, 4]
167 [0, 2, 3, 4, 2, 3, 2]
168 [0, 2, 3, 4, 2, 3]
169 [0, 2, 3, 4, 2]
170 [0, 2, 3, 4, 3, 4]
171 [0, 2, 3, 4, 3]
172 [0, 2, 3, 4]
173 [0, 2, 3, 2]
174 [0, 2, 3]
175 [0, 2, 4]
176 [0, 2]
177 [0, 3, 4, 3, 4]
178 [0, 3, 4, 3]
179 [0, 3, 4]
180 [0, 3]
181 [0, 4]
182 [0]
183 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
184 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
185 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
186 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1]
187 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
188 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2]
189 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1]
190 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
191 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1]
192 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
193 [1, 2, 3, 4, 1, 2, 3, 4, 1]
194 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4]
195 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3]
196 [1, 2, 3, 4, 1, 2, 3, 4, 2]
197 [1, 2, 3, 4, 1, 2, 3, 4]
198 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
199 [1, 2, 3, 4, 1, 2, 3, 1, 2]
200 [1, 2, 3, 4, 1, 2, 3, 1]
201 [1, 2, 3, 4, 1, 2, 3, 2]
202 [1, 2, 3, 4, 1, 2, 3]
203 [1, 2, 3, 4, 1, 2, 1]
204 [1, 2, 3, 4, 1, 2]
205 [1, 2, 3, 4, 1, 3, 4]
206 [1, 2, 3, 4, 1, 3]
207 [1, 2, 3, 4, 1]
208 [1, 2, 3, 4, 2, 3, 4, 2, 3, 4]
209 [1, 2, 3, 4, 2, 3, 4, 2, 3]
210 [1, 2, 3, 4, 2, 3, 4, 2]
211 [1, 2, 3, 4, 2, 3, 4]
212 [1, 2, 3, 4, 2, 3, 2]
213 [1, 2, 3, 4, 2, 3]
214 [1, 2, 3, 4, 2]
215 [1, 2, 3, 4, 3, 4]
216 [1, 2, 3, 4, 3]
217 [1, 2, 3, 4]
218 [1, 2, 3, 1, 2, 1]
219 [1, 2, 3, 1, 2]
220 [1, 2, 3, 1]
221 [1, 2, 3, 2]
222 [1, 2, 3]
223 [1, 2, 4, 1]
224 [1, 2, 4]
225 [1, 2, 1]
226 [1, 2]
227 [1, 3, 4, 3, 4]
228 [1, 3, 4, 3]
229 [1, 3, 4]
230 [1, 3]
231 [1, 4]
232 [1]
233 [2, 3, 4, 2, 3, 4, 2, 3, 4]
234 [2, 3, 4, 2, 3, 4, 2, 3]
235 [2, 3, 4, 2, 3, 4, 2]
236 [2, 3, 4, 2, 3, 4]
237 [2, 3, 4, 2, 3, 2]
238 [2, 3, 4, 2, 3]
239 [2, 3, 4, 2]
240 [2, 3, 4, 3, 4]
241 [2, 3, 4, 3]
242 [2, 3, 4]
243 [2, 3, 2]
244 [2, 3]
245 [2, 4]
246 [2]
247 [3, 4, 3, 4]
248 [3, 4, 3]
249 [3, 4]
250 [3]
251 [4]
252 []
sage: A=CartanMatrix(['D',4])
....: c=[0,1,2,3]
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+1) for
....: i in range(4)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]
2 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2]
3 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 3]
4 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1]
5 [0, 1, 2, 3, 0, 1, 2, 3, 0]
6 [0, 1, 2, 3, 0, 1, 2, 3]
7 [0, 1, 2, 3, 0, 1, 2, 0, 1]
8 [0, 1, 2, 3, 0, 1, 2, 0]
9 [0, 1, 2, 3, 0, 1, 2]
10 [0, 1, 2, 3, 0, 1, 3, 0, 1]
11 [0, 1, 2, 3, 0, 1, 3, 0]
12 [0, 1, 2, 3, 0, 1, 3]
13 [0, 1, 2, 3, 0, 1, 0]
14 [0, 1, 2, 3, 0, 1]
15 [0, 1, 2, 3, 0]
16 [0, 1, 2, 3, 1, 2, 3]
17 [0, 1, 2, 3, 1, 2]
18 [0, 1, 2, 3, 1, 3]
19 [0, 1, 2, 3, 1]
20 [0, 1, 2, 3]
21 [0, 1, 2, 0, 1, 0]
22 [0, 1, 2, 0, 1]
23 [0, 1, 2, 0]
24 [0, 1, 2, 1]
25 [0, 1, 2]
26 [0, 1, 3, 0, 1, 0]
27 [0, 1, 3, 0, 1]
28 [0, 1, 3, 0]
29 [0, 1, 3, 1]
30 [0, 1, 3]
31 [0, 1, 0]
32 [0, 1]
33 [0, 2, 3]
34 [0, 2]
35 [0, 3]
36 [0]
37 [1, 2, 3, 1, 2, 3]
38 [1, 2, 3, 1, 2]
39 [1, 2, 3, 1, 3]
40 [1, 2, 3, 1]
41 [1, 2, 3]
42 [1, 2, 1]
43 [1, 2]
44 [1, 3, 1]
45 [1, 3]
46 [1]
47 [2, 3]
48 [2]
49 [3]
50 []
sage: A=CartanMatrix(['D',4])
....: c=[0,1,2,3]
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+1) for
....: i in range(3)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]
FAILURE! 2
sage: A=CartanMatrix(['D',5])
....: c=[0,1,2,3,4]
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+1) for
....: i in range(4)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
FAILURE! 4
sage: A=CartanMatrix(['D',5])
....: c=[0,1,2,3,4]
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+1) for
....: i in range(5)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
2 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3]
3 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 4]
4 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2]
5 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1]
6 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0]
7 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
8 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
9 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
10 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
11 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3]
12 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 4, 0, 1, 2]
13 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 4, 0, 1]
14 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 4, 0]
15 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 4]
16 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
17 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0]
18 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2]
19 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 0]
20 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1]
21 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0]
22 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4]
23 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3]
24 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 4]
25 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2]
26 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1]
27 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
28 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1]
29 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0]
30 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
31 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0]
32 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
33 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
34 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2]
35 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1]
36 [0, 1, 2, 3, 4, 0, 1, 2, 3]
37 [0, 1, 2, 3, 4, 0, 1, 2, 4, 0, 1, 2, 0, 1]
38 [0, 1, 2, 3, 4, 0, 1, 2, 4, 0, 1, 2, 0]
39 [0, 1, 2, 3, 4, 0, 1, 2, 4, 0, 1, 2]
40 [0, 1, 2, 3, 4, 0, 1, 2, 4, 0, 1, 0]
41 [0, 1, 2, 3, 4, 0, 1, 2, 4, 0, 1]
42 [0, 1, 2, 3, 4, 0, 1, 2, 4, 0]
43 [0, 1, 2, 3, 4, 0, 1, 2, 4, 1, 2]
44 [0, 1, 2, 3, 4, 0, 1, 2, 4, 1]
45 [0, 1, 2, 3, 4, 0, 1, 2, 4]
46 [0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0]
47 [0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
48 [0, 1, 2, 3, 4, 0, 1, 2, 0]
49 [0, 1, 2, 3, 4, 0, 1, 2, 1]
50 [0, 1, 2, 3, 4, 0, 1, 2]
51 [0, 1, 2, 3, 4, 0, 1, 0]
52 [0, 1, 2, 3, 4, 0, 1]
53 [0, 1, 2, 3, 4, 0, 2, 3, 4]
54 [0, 1, 2, 3, 4, 0, 2, 3]
55 [0, 1, 2, 3, 4, 0, 2, 4]
56 [0, 1, 2, 3, 4, 0, 2]
57 [0, 1, 2, 3, 4, 0]
58 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
59 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
60 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 4]
61 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
62 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1]
63 [0, 1, 2, 3, 4, 1, 2, 3, 4]
64 [0, 1, 2, 3, 4, 1, 2, 3, 1, 2]
65 [0, 1, 2, 3, 4, 1, 2, 3, 1]
66 [0, 1, 2, 3, 4, 1, 2, 3]
67 [0, 1, 2, 3, 4, 1, 2, 4, 1, 2]
68 [0, 1, 2, 3, 4, 1, 2, 4, 1]
69 [0, 1, 2, 3, 4, 1, 2, 4]
70 [0, 1, 2, 3, 4, 1, 2, 1]
71 [0, 1, 2, 3, 4, 1, 2]
72 [0, 1, 2, 3, 4, 1]
73 [0, 1, 2, 3, 4, 2, 3, 4]
74 [0, 1, 2, 3, 4, 2, 3]
75 [0, 1, 2, 3, 4, 2, 4]
76 [0, 1, 2, 3, 4, 2]
77 [0, 1, 2, 3, 4]
78 [0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
79 [0, 1, 2, 3, 0, 1, 2, 0, 1]
80 [0, 1, 2, 3, 0, 1, 2, 0]
81 [0, 1, 2, 3, 0, 1, 2, 1]
82 [0, 1, 2, 3, 0, 1, 2]
83 [0, 1, 2, 3, 0, 1, 0]
84 [0, 1, 2, 3, 0, 1]
85 [0, 1, 2, 3, 0, 2]
86 [0, 1, 2, 3, 0]
87 [0, 1, 2, 3, 1, 2, 1]
88 [0, 1, 2, 3, 1, 2]
89 [0, 1, 2, 3, 1]
90 [0, 1, 2, 3, 2]
91 [0, 1, 2, 3]
92 [0, 1, 2, 4, 0, 1, 2, 0, 1, 0]
93 [0, 1, 2, 4, 0, 1, 2, 0, 1]
94 [0, 1, 2, 4, 0, 1, 2, 0]
95 [0, 1, 2, 4, 0, 1, 2, 1]
96 [0, 1, 2, 4, 0, 1, 2]
97 [0, 1, 2, 4, 0, 1, 0]
98 [0, 1, 2, 4, 0, 1]
99 [0, 1, 2, 4, 0, 2]
100 [0, 1, 2, 4, 0]
101 [0, 1, 2, 4, 1, 2, 1]
102 [0, 1, 2, 4, 1, 2]
103 [0, 1, 2, 4, 1]
104 [0, 1, 2, 4, 2]
105 [0, 1, 2, 4]
106 [0, 1, 2, 0, 1, 0]
107 [0, 1, 2, 0, 1]
108 [0, 1, 2, 0]
109 [0, 1, 2, 1]
110 [0, 1, 2]
111 [0, 1, 3, 4, 0]
112 [0, 1, 3, 4]
113 [0, 1, 3, 0]
114 [0, 1, 3]
115 [0, 1, 4, 0]
116 [0, 1, 4]
117 [0, 1, 0]
118 [0, 1]
119 [0, 2, 3, 4, 2, 3, 4]
120 [0, 2, 3, 4, 2, 3]
121 [0, 2, 3, 4, 2, 4]
122 [0, 2, 3, 4, 2]
123 [0, 2, 3, 4]
124 [0, 2, 3, 2]
125 [0, 2, 3]
126 [0, 2, 4, 2]
127 [0, 2, 4]
128 [0, 2]
129 [0, 3, 4]
130 [0, 3]
131 [0, 4]
132 [0]
133 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
134 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
135 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 4]
136 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
137 [1, 2, 3, 4, 1, 2, 3, 4, 1]
138 [1, 2, 3, 4, 1, 2, 3, 4]
139 [1, 2, 3, 4, 1, 2, 3, 1, 2]
140 [1, 2, 3, 4, 1, 2, 3, 1]
141 [1, 2, 3, 4, 1, 2, 3]
142 [1, 2, 3, 4, 1, 2, 4, 1, 2]
143 [1, 2, 3, 4, 1, 2, 4, 1]
144 [1, 2, 3, 4, 1, 2, 4]
145 [1, 2, 3, 4, 1, 2, 1]
146 [1, 2, 3, 4, 1, 2]
147 [1, 2, 3, 4, 1]
148 [1, 2, 3, 4, 2, 3, 4]
149 [1, 2, 3, 4, 2, 3]
150 [1, 2, 3, 4, 2, 4]
151 [1, 2, 3, 4, 2]
152 [1, 2, 3, 4]
153 [1, 2, 3, 1, 2, 1]
154 [1, 2, 3, 1, 2]
155 [1, 2, 3, 1]
156 [1, 2, 3, 2]
157 [1, 2, 3]
158 [1, 2, 4, 1, 2, 1]
159 [1, 2, 4, 1, 2]
160 [1, 2, 4, 1]
161 [1, 2, 4, 2]
162 [1, 2, 4]
163 [1, 2, 1]
164 [1, 2]
165 [1, 3, 4]
166 [1, 3]
167 [1, 4]
168 [1]
169 [2, 3, 4, 2, 3, 4]
170 [2, 3, 4, 2, 3]
171 [2, 3, 4, 2, 4]
172 [2, 3, 4, 2]
173 [2, 3, 4]
174 [2, 3, 2]
175 [2, 3]
176 [2, 4, 2]
177 [2, 4]
178 [2]
179 [3, 4]
180 [3]
181 [4]
182 []
sage: A=CartanMatrix(['A',3])
....: c=[0,1,2]
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+1) for
....: i in range(2)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [0, 1, 2, 0, 1, 0]
FAILURE! 2
sage: A=CartanMatrix(['A',3])
....: c=[0,1,2]
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+1) for
....: i in range(3)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [0, 1, 2, 0, 1, 0]
2 [0, 1, 2, 0, 1]
3 [0, 1, 2, 0]
4 [0, 1, 2, 1]
5 [0, 1, 2]
6 [0, 1, 0]
7 [0, 1]
8 [0, 2]
9 [0]
10 [1, 2, 1]
11 [1, 2]
12 [1]
13 [2]
14 []
sage: A=CartanMatrix(['A',4])
....: c=[0,1,2,3]
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+1) for
....: i in range(3)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
FAILURE! 2
sage: A=CartanMatrix(['A',4])
....: c=[0,1,2,3]
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+1) for
....: i in range(4)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
2 [0, 1, 2, 3, 0, 1, 2, 0, 1]
3 [0, 1, 2, 3, 0, 1, 2, 0]
4 [0, 1, 2, 3, 0, 1, 2, 1]
5 [0, 1, 2, 3, 0, 1, 2]
6 [0, 1, 2, 3, 0, 1, 0]
7 [0, 1, 2, 3, 0, 1]
8 [0, 1, 2, 3, 0, 2]
9 [0, 1, 2, 3, 0]
10 [0, 1, 2, 3, 1, 2, 1]
11 [0, 1, 2, 3, 1, 2]
12 [0, 1, 2, 3, 1]
13 [0, 1, 2, 3, 2]
14 [0, 1, 2, 3]
15 [0, 1, 2, 0, 1, 0]
16 [0, 1, 2, 0, 1]
17 [0, 1, 2, 0]
18 [0, 1, 2, 1]
19 [0, 1, 2]
20 [0, 1, 3, 0]
21 [0, 1, 3]
22 [0, 1, 0]
23 [0, 1]
24 [0, 2, 3, 2]
25 [0, 2, 3]
26 [0, 2]
27 [0, 3]
28 [0]
29 [1, 2, 3, 1, 2, 1]
30 [1, 2, 3, 1, 2]
31 [1, 2, 3, 1]
32 [1, 2, 3, 2]
33 [1, 2, 3]
34 [1, 2, 1]
35 [1, 2]
36 [1, 3]
37 [1]
38 [2, 3, 2]
39 [2, 3]
40 [2]
41 [3]
42 []
sage: A=CartanMatrix(['A',5])
....: c=[0,1,2,3,4]
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+1) for
....: i in range(3)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
FAILURE! 3
sage: A=CartanMatrix(['A',5])
....: c=[0,1,2,3,4]
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+1) for
....: i in range(4)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
FAILURE! 3
sage: A=CartanMatrix(['A',5])
....: c=[0,1,2,3,4]
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+1) for
....: i in range(5)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
2 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1]
3 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0]
4 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 1]
5 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
6 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0]
7 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
8 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 2]
9 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
10 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2, 1]
11 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2]
12 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1]
13 [0, 1, 2, 3, 4, 0, 1, 2, 3, 2]
14 [0, 1, 2, 3, 4, 0, 1, 2, 3]
15 [0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0]
16 [0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
17 [0, 1, 2, 3, 4, 0, 1, 2, 0]
18 [0, 1, 2, 3, 4, 0, 1, 2, 1]
19 [0, 1, 2, 3, 4, 0, 1, 2]
20 [0, 1, 2, 3, 4, 0, 1, 3, 0]
21 [0, 1, 2, 3, 4, 0, 1, 3]
22 [0, 1, 2, 3, 4, 0, 1, 0]
23 [0, 1, 2, 3, 4, 0, 1]
24 [0, 1, 2, 3, 4, 0, 2, 3, 2]
25 [0, 1, 2, 3, 4, 0, 2, 3]
26 [0, 1, 2, 3, 4, 0, 2]
27 [0, 1, 2, 3, 4, 0, 3]
28 [0, 1, 2, 3, 4, 0]
29 [0, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
30 [0, 1, 2, 3, 4, 1, 2, 3, 1, 2]
31 [0, 1, 2, 3, 4, 1, 2, 3, 1]
32 [0, 1, 2, 3, 4, 1, 2, 3, 2]
33 [0, 1, 2, 3, 4, 1, 2, 3]
34 [0, 1, 2, 3, 4, 1, 2, 1]
35 [0, 1, 2, 3, 4, 1, 2]
36 [0, 1, 2, 3, 4, 1, 3]
37 [0, 1, 2, 3, 4, 1]
38 [0, 1, 2, 3, 4, 2, 3, 2]
39 [0, 1, 2, 3, 4, 2, 3]
40 [0, 1, 2, 3, 4, 2]
41 [0, 1, 2, 3, 4, 3]
42 [0, 1, 2, 3, 4]
43 [0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
44 [0, 1, 2, 3, 0, 1, 2, 0, 1]
45 [0, 1, 2, 3, 0, 1, 2, 0]
46 [0, 1, 2, 3, 0, 1, 2, 1]
47 [0, 1, 2, 3, 0, 1, 2]
48 [0, 1, 2, 3, 0, 1, 0]
49 [0, 1, 2, 3, 0, 1]
50 [0, 1, 2, 3, 0, 2]
51 [0, 1, 2, 3, 0]
52 [0, 1, 2, 3, 1, 2, 1]
53 [0, 1, 2, 3, 1, 2]
54 [0, 1, 2, 3, 1]
55 [0, 1, 2, 3, 2]
56 [0, 1, 2, 3]
57 [0, 1, 2, 4, 0, 1, 0]
58 [0, 1, 2, 4, 0, 1]
59 [0, 1, 2, 4, 0]
60 [0, 1, 2, 4, 1]
61 [0, 1, 2, 4]
62 [0, 1, 2, 0, 1, 0]
63 [0, 1, 2, 0, 1]
64 [0, 1, 2, 0]
65 [0, 1, 2, 1]
66 [0, 1, 2]
67 [0, 1, 3, 4, 0, 3]
68 [0, 1, 3, 4, 0]
69 [0, 1, 3, 4, 3]
70 [0, 1, 3, 4]
71 [0, 1, 3, 0]
72 [0, 1, 3]
73 [0, 1, 4, 0]
74 [0, 1, 4]
75 [0, 1, 0]
76 [0, 1]
77 [0, 2, 3, 4, 2, 3, 2]
78 [0, 2, 3, 4, 2, 3]
79 [0, 2, 3, 4, 2]
80 [0, 2, 3, 4, 3]
81 [0, 2, 3, 4]
82 [0, 2, 3, 2]
83 [0, 2, 3]
84 [0, 2, 4]
85 [0, 2]
86 [0, 3, 4, 3]
87 [0, 3, 4]
88 [0, 3]
89 [0, 4]
90 [0]
91 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
92 [1, 2, 3, 4, 1, 2, 3, 1, 2]
93 [1, 2, 3, 4, 1, 2, 3, 1]
94 [1, 2, 3, 4, 1, 2, 3, 2]
95 [1, 2, 3, 4, 1, 2, 3]
96 [1, 2, 3, 4, 1, 2, 1]
97 [1, 2, 3, 4, 1, 2]
98 [1, 2, 3, 4, 1, 3]
99 [1, 2, 3, 4, 1]
100 [1, 2, 3, 4, 2, 3, 2]
101 [1, 2, 3, 4, 2, 3]
102 [1, 2, 3, 4, 2]
103 [1, 2, 3, 4, 3]
104 [1, 2, 3, 4]
105 [1, 2, 3, 1, 2, 1]
106 [1, 2, 3, 1, 2]
107 [1, 2, 3, 1]
108 [1, 2, 3, 2]
109 [1, 2, 3]
110 [1, 2, 4, 1]
111 [1, 2, 4]
112 [1, 2, 1]
113 [1, 2]
114 [1, 3, 4, 3]
115 [1, 3, 4]
116 [1, 3]
117 [1, 4]
118 [1]
119 [2, 3, 4, 2, 3, 2]
120 [2, 3, 4, 2, 3]
121 [2, 3, 4, 2]
122 [2, 3, 4, 3]
123 [2, 3, 4]
124 [2, 3, 2]
125 [2, 3]
126 [2, 4]
127 [2]
128 [3, 4, 3]
129 [3, 4]
130 [3]
131 [4]
132 []
sage: A=CartanMatrix(['A',6])
....: c=[0,1,2,3,4,5]
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+1) for
....: i in range(5)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
FAILURE! 2
sage: A=CartanMatrix(['A',6])
....: c=[0,1,2,3,4,5]
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+1) for
....: i in range(6)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
2 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1]
3 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0]
4 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 1]
5 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
6 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0]
7 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
8 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 2]
9 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
10 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2, 1]
11 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2]
12 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1]
13 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 2]
14 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3]
15 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0]
16 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
17 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 0]
18 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 1]
19 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2]
20 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 3, 0]
21 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 3]
22 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 0]
23 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1]
24 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 2, 3, 2]
25 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 2, 3]
26 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 2]
27 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 3]
28 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0]
29 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
30 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3, 1, 2]
31 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3, 1]
32 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3, 2]
33 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3]
34 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 1]
35 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2]
36 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 3]
37 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1]
38 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 2, 3, 2]
39 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 2, 3]
40 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 2]
41 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 3]
42 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4]
43 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
44 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 0, 1]
45 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 0]
46 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 1]
47 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2]
48 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 0]
49 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1]
50 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 2]
51 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0]
52 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 1, 2, 1]
53 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 1, 2]
54 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 1]
55 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 2]
56 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3]
57 [0, 1, 2, 3, 4, 5, 0, 1, 2, 4, 0, 1, 0]
58 [0, 1, 2, 3, 4, 5, 0, 1, 2, 4, 0, 1]
59 [0, 1, 2, 3, 4, 5, 0, 1, 2, 4, 0]
60 [0, 1, 2, 3, 4, 5, 0, 1, 2, 4, 1]
61 [0, 1, 2, 3, 4, 5, 0, 1, 2, 4]
62 [0, 1, 2, 3, 4, 5, 0, 1, 2, 0, 1, 0]
63 [0, 1, 2, 3, 4, 5, 0, 1, 2, 0, 1]
64 [0, 1, 2, 3, 4, 5, 0, 1, 2, 0]
65 [0, 1, 2, 3, 4, 5, 0, 1, 2, 1]
66 [0, 1, 2, 3, 4, 5, 0, 1, 2]
67 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 0, 3]
68 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 0]
69 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 3]
70 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4]
71 [0, 1, 2, 3, 4, 5, 0, 1, 3, 0]
72 [0, 1, 2, 3, 4, 5, 0, 1, 3]
73 [0, 1, 2, 3, 4, 5, 0, 1, 4, 0]
74 [0, 1, 2, 3, 4, 5, 0, 1, 4]
75 [0, 1, 2, 3, 4, 5, 0, 1, 0]
76 [0, 1, 2, 3, 4, 5, 0, 1]
77 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 2, 3, 2]
78 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 2, 3]
79 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 2]
80 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 3]
81 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4]
82 [0, 1, 2, 3, 4, 5, 0, 2, 3, 2]
83 [0, 1, 2, 3, 4, 5, 0, 2, 3]
84 [0, 1, 2, 3, 4, 5, 0, 2, 4]
85 [0, 1, 2, 3, 4, 5, 0, 2]
86 [0, 1, 2, 3, 4, 5, 0, 3, 4, 3]
87 [0, 1, 2, 3, 4, 5, 0, 3, 4]
88 [0, 1, 2, 3, 4, 5, 0, 3]
89 [0, 1, 2, 3, 4, 5, 0, 4]
90 [0, 1, 2, 3, 4, 5, 0]
91 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
92 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2]
93 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1]
94 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 2]
95 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3]
96 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1]
97 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2]
98 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 3]
99 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1]
100 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3, 2]
101 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3]
102 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2]
103 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 3]
104 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4]
105 [0, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1]
106 [0, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2]
107 [0, 1, 2, 3, 4, 5, 1, 2, 3, 1]
108 [0, 1, 2, 3, 4, 5, 1, 2, 3, 2]
109 [0, 1, 2, 3, 4, 5, 1, 2, 3]
110 [0, 1, 2, 3, 4, 5, 1, 2, 4, 1]
111 [0, 1, 2, 3, 4, 5, 1, 2, 4]
112 [0, 1, 2, 3, 4, 5, 1, 2, 1]
113 [0, 1, 2, 3, 4, 5, 1, 2]
114 [0, 1, 2, 3, 4, 5, 1, 3, 4, 3]
115 [0, 1, 2, 3, 4, 5, 1, 3, 4]
116 [0, 1, 2, 3, 4, 5, 1, 3]
117 [0, 1, 2, 3, 4, 5, 1, 4]
118 [0, 1, 2, 3, 4, 5, 1]
119 [0, 1, 2, 3, 4, 5, 2, 3, 4, 2, 3, 2]
120 [0, 1, 2, 3, 4, 5, 2, 3, 4, 2, 3]
121 [0, 1, 2, 3, 4, 5, 2, 3, 4, 2]
122 [0, 1, 2, 3, 4, 5, 2, 3, 4, 3]
123 [0, 1, 2, 3, 4, 5, 2, 3, 4]
124 [0, 1, 2, 3, 4, 5, 2, 3, 2]
125 [0, 1, 2, 3, 4, 5, 2, 3]
126 [0, 1, 2, 3, 4, 5, 2, 4]
127 [0, 1, 2, 3, 4, 5, 2]
128 [0, 1, 2, 3, 4, 5, 3, 4, 3]
129 [0, 1, 2, 3, 4, 5, 3, 4]
130 [0, 1, 2, 3, 4, 5, 3]
131 [0, 1, 2, 3, 4, 5, 4]
132 [0, 1, 2, 3, 4, 5]
133 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
134 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1]
135 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0]
136 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 1]
137 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
138 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0]
139 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
140 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 2]
141 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
142 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2, 1]
143 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2]
144 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1]
145 [0, 1, 2, 3, 4, 0, 1, 2, 3, 2]
146 [0, 1, 2, 3, 4, 0, 1, 2, 3]
147 [0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0]
148 [0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
149 [0, 1, 2, 3, 4, 0, 1, 2, 0]
150 [0, 1, 2, 3, 4, 0, 1, 2, 1]
151 [0, 1, 2, 3, 4, 0, 1, 2]
152 [0, 1, 2, 3, 4, 0, 1, 3, 0]
153 [0, 1, 2, 3, 4, 0, 1, 3]
154 [0, 1, 2, 3, 4, 0, 1, 0]
155 [0, 1, 2, 3, 4, 0, 1]
156 [0, 1, 2, 3, 4, 0, 2, 3, 2]
157 [0, 1, 2, 3, 4, 0, 2, 3]
158 [0, 1, 2, 3, 4, 0, 2]
159 [0, 1, 2, 3, 4, 0, 3]
160 [0, 1, 2, 3, 4, 0]
161 [0, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
162 [0, 1, 2, 3, 4, 1, 2, 3, 1, 2]
163 [0, 1, 2, 3, 4, 1, 2, 3, 1]
164 [0, 1, 2, 3, 4, 1, 2, 3, 2]
165 [0, 1, 2, 3, 4, 1, 2, 3]
166 [0, 1, 2, 3, 4, 1, 2, 1]
167 [0, 1, 2, 3, 4, 1, 2]
168 [0, 1, 2, 3, 4, 1, 3]
169 [0, 1, 2, 3, 4, 1]
170 [0, 1, 2, 3, 4, 2, 3, 2]
171 [0, 1, 2, 3, 4, 2, 3]
172 [0, 1, 2, 3, 4, 2]
173 [0, 1, 2, 3, 4, 3]
174 [0, 1, 2, 3, 4]
175 [0, 1, 2, 3, 5, 0, 1, 2, 0, 1, 0]
176 [0, 1, 2, 3, 5, 0, 1, 2, 0, 1]
177 [0, 1, 2, 3, 5, 0, 1, 2, 0]
178 [0, 1, 2, 3, 5, 0, 1, 2, 1]
179 [0, 1, 2, 3, 5, 0, 1, 2]
180 [0, 1, 2, 3, 5, 0, 1, 0]
181 [0, 1, 2, 3, 5, 0, 1]
182 [0, 1, 2, 3, 5, 0, 2]
183 [0, 1, 2, 3, 5, 0]
184 [0, 1, 2, 3, 5, 1, 2, 1]
185 [0, 1, 2, 3, 5, 1, 2]
186 [0, 1, 2, 3, 5, 1]
187 [0, 1, 2, 3, 5, 2]
188 [0, 1, 2, 3, 5]
189 [0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
190 [0, 1, 2, 3, 0, 1, 2, 0, 1]
191 [0, 1, 2, 3, 0, 1, 2, 0]
192 [0, 1, 2, 3, 0, 1, 2, 1]
193 [0, 1, 2, 3, 0, 1, 2]
194 [0, 1, 2, 3, 0, 1, 0]
195 [0, 1, 2, 3, 0, 1]
196 [0, 1, 2, 3, 0, 2]
197 [0, 1, 2, 3, 0]
198 [0, 1, 2, 3, 1, 2, 1]
199 [0, 1, 2, 3, 1, 2]
200 [0, 1, 2, 3, 1]
201 [0, 1, 2, 3, 2]
202 [0, 1, 2, 3]
203 [0, 1, 2, 4, 5, 0, 1, 4, 0]
204 [0, 1, 2, 4, 5, 0, 1, 4]
205 [0, 1, 2, 4, 5, 0, 1, 0]
206 [0, 1, 2, 4, 5, 0, 1]
207 [0, 1, 2, 4, 5, 0, 4]
208 [0, 1, 2, 4, 5, 0]
209 [0, 1, 2, 4, 5, 1, 4]
210 [0, 1, 2, 4, 5, 1]
211 [0, 1, 2, 4, 5, 4]
212 [0, 1, 2, 4, 5]
213 [0, 1, 2, 4, 0, 1, 0]
214 [0, 1, 2, 4, 0, 1]
215 [0, 1, 2, 4, 0]
216 [0, 1, 2, 4, 1]
217 [0, 1, 2, 4]
218 [0, 1, 2, 5, 0, 1, 0]
219 [0, 1, 2, 5, 0, 1]
220 [0, 1, 2, 5, 0]
221 [0, 1, 2, 5, 1]
222 [0, 1, 2, 5]
223 [0, 1, 2, 0, 1, 0]
224 [0, 1, 2, 0, 1]
225 [0, 1, 2, 0]
226 [0, 1, 2, 1]
227 [0, 1, 2]
228 [0, 1, 3, 4, 5, 0, 3, 4, 3]
229 [0, 1, 3, 4, 5, 0, 3, 4]
230 [0, 1, 3, 4, 5, 0, 3]
231 [0, 1, 3, 4, 5, 0, 4]
232 [0, 1, 3, 4, 5, 0]
233 [0, 1, 3, 4, 5, 3, 4, 3]
234 [0, 1, 3, 4, 5, 3, 4]
235 [0, 1, 3, 4, 5, 3]
236 [0, 1, 3, 4, 5, 4]
237 [0, 1, 3, 4, 5]
238 [0, 1, 3, 4, 0, 3]
239 [0, 1, 3, 4, 0]
240 [0, 1, 3, 4, 3]
241 [0, 1, 3, 4]
242 [0, 1, 3, 5, 0]
243 [0, 1, 3, 5]
244 [0, 1, 3, 0]
245 [0, 1, 3]
246 [0, 1, 4, 5, 0, 4]
247 [0, 1, 4, 5, 0]
248 [0, 1, 4, 5, 4]
249 [0, 1, 4, 5]
250 [0, 1, 4, 0]
251 [0, 1, 4]
252 [0, 1, 5, 0]
253 [0, 1, 5]
254 [0, 1, 0]
255 [0, 1]
256 [0, 2, 3, 4, 5, 2, 3, 4, 2, 3, 2]
257 [0, 2, 3, 4, 5, 2, 3, 4, 2, 3]
258 [0, 2, 3, 4, 5, 2, 3, 4, 2]
259 [0, 2, 3, 4, 5, 2, 3, 4, 3]
260 [0, 2, 3, 4, 5, 2, 3, 4]
261 [0, 2, 3, 4, 5, 2, 3, 2]
262 [0, 2, 3, 4, 5, 2, 3]
263 [0, 2, 3, 4, 5, 2, 4]
264 [0, 2, 3, 4, 5, 2]
265 [0, 2, 3, 4, 5, 3, 4, 3]
266 [0, 2, 3, 4, 5, 3, 4]
267 [0, 2, 3, 4, 5, 3]
268 [0, 2, 3, 4, 5, 4]
269 [0, 2, 3, 4, 5]
270 [0, 2, 3, 4, 2, 3, 2]
271 [0, 2, 3, 4, 2, 3]
272 [0, 2, 3, 4, 2]
273 [0, 2, 3, 4, 3]
274 [0, 2, 3, 4]
275 [0, 2, 3, 5, 2]
276 [0, 2, 3, 5]
277 [0, 2, 3, 2]
278 [0, 2, 3]
279 [0, 2, 4, 5, 4]
280 [0, 2, 4, 5]
281 [0, 2, 4]
282 [0, 2, 5]
283 [0, 2]
284 [0, 3, 4, 5, 3, 4, 3]
285 [0, 3, 4, 5, 3, 4]
286 [0, 3, 4, 5, 3]
287 [0, 3, 4, 5, 4]
288 [0, 3, 4, 5]
289 [0, 3, 4, 3]
290 [0, 3, 4]
291 [0, 3, 5]
292 [0, 3]
293 [0, 4, 5, 4]
294 [0, 4, 5]
295 [0, 4]
296 [0, 5]
297 [0]
298 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
299 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2]
300 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1]
301 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 2]
302 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3]
303 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1]
304 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2]
305 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 3]
306 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]
307 [1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3, 2]
308 [1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3]
309 [1, 2, 3, 4, 5, 1, 2, 3, 4, 2]
310 [1, 2, 3, 4, 5, 1, 2, 3, 4, 3]
311 [1, 2, 3, 4, 5, 1, 2, 3, 4]
312 [1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1]
313 [1, 2, 3, 4, 5, 1, 2, 3, 1, 2]
314 [1, 2, 3, 4, 5, 1, 2, 3, 1]
315 [1, 2, 3, 4, 5, 1, 2, 3, 2]
316 [1, 2, 3, 4, 5, 1, 2, 3]
317 [1, 2, 3, 4, 5, 1, 2, 4, 1]
318 [1, 2, 3, 4, 5, 1, 2, 4]
319 [1, 2, 3, 4, 5, 1, 2, 1]
320 [1, 2, 3, 4, 5, 1, 2]
321 [1, 2, 3, 4, 5, 1, 3, 4, 3]
322 [1, 2, 3, 4, 5, 1, 3, 4]
323 [1, 2, 3, 4, 5, 1, 3]
324 [1, 2, 3, 4, 5, 1, 4]
325 [1, 2, 3, 4, 5, 1]
326 [1, 2, 3, 4, 5, 2, 3, 4, 2, 3, 2]
327 [1, 2, 3, 4, 5, 2, 3, 4, 2, 3]
328 [1, 2, 3, 4, 5, 2, 3, 4, 2]
329 [1, 2, 3, 4, 5, 2, 3, 4, 3]
330 [1, 2, 3, 4, 5, 2, 3, 4]
331 [1, 2, 3, 4, 5, 2, 3, 2]
332 [1, 2, 3, 4, 5, 2, 3]
333 [1, 2, 3, 4, 5, 2, 4]
334 [1, 2, 3, 4, 5, 2]
335 [1, 2, 3, 4, 5, 3, 4, 3]
336 [1, 2, 3, 4, 5, 3, 4]
337 [1, 2, 3, 4, 5, 3]
338 [1, 2, 3, 4, 5, 4]
339 [1, 2, 3, 4, 5]
340 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
341 [1, 2, 3, 4, 1, 2, 3, 1, 2]
342 [1, 2, 3, 4, 1, 2, 3, 1]
343 [1, 2, 3, 4, 1, 2, 3, 2]
344 [1, 2, 3, 4, 1, 2, 3]
345 [1, 2, 3, 4, 1, 2, 1]
346 [1, 2, 3, 4, 1, 2]
347 [1, 2, 3, 4, 1, 3]
348 [1, 2, 3, 4, 1]
349 [1, 2, 3, 4, 2, 3, 2]
350 [1, 2, 3, 4, 2, 3]
351 [1, 2, 3, 4, 2]
352 [1, 2, 3, 4, 3]
353 [1, 2, 3, 4]
354 [1, 2, 3, 5, 1, 2, 1]
355 [1, 2, 3, 5, 1, 2]
356 [1, 2, 3, 5, 1]
357 [1, 2, 3, 5, 2]
358 [1, 2, 3, 5]
359 [1, 2, 3, 1, 2, 1]
360 [1, 2, 3, 1, 2]
361 [1, 2, 3, 1]
362 [1, 2, 3, 2]
363 [1, 2, 3]
364 [1, 2, 4, 5, 1, 4]
365 [1, 2, 4, 5, 1]
366 [1, 2, 4, 5, 4]
367 [1, 2, 4, 5]
368 [1, 2, 4, 1]
369 [1, 2, 4]
370 [1, 2, 5, 1]
371 [1, 2, 5]
372 [1, 2, 1]
373 [1, 2]
374 [1, 3, 4, 5, 3, 4, 3]
375 [1, 3, 4, 5, 3, 4]
376 [1, 3, 4, 5, 3]
377 [1, 3, 4, 5, 4]
378 [1, 3, 4, 5]
379 [1, 3, 4, 3]
380 [1, 3, 4]
381 [1, 3, 5]
382 [1, 3]
383 [1, 4, 5, 4]
384 [1, 4, 5]
385 [1, 4]
386 [1, 5]
387 [1]
388 [2, 3, 4, 5, 2, 3, 4, 2, 3, 2]
389 [2, 3, 4, 5, 2, 3, 4, 2, 3]
390 [2, 3, 4, 5, 2, 3, 4, 2]
391 [2, 3, 4, 5, 2, 3, 4, 3]
392 [2, 3, 4, 5, 2, 3, 4]
393 [2, 3, 4, 5, 2, 3, 2]
394 [2, 3, 4, 5, 2, 3]
395 [2, 3, 4, 5, 2, 4]
396 [2, 3, 4, 5, 2]
397 [2, 3, 4, 5, 3, 4, 3]
398 [2, 3, 4, 5, 3, 4]
399 [2, 3, 4, 5, 3]
400 [2, 3, 4, 5, 4]
401 [2, 3, 4, 5]
402 [2, 3, 4, 2, 3, 2]
403 [2, 3, 4, 2, 3]
404 [2, 3, 4, 2]
405 [2, 3, 4, 3]
406 [2, 3, 4]
407 [2, 3, 5, 2]
408 [2, 3, 5]
409 [2, 3, 2]
410 [2, 3]
411 [2, 4, 5, 4]
412 [2, 4, 5]
413 [2, 4]
414 [2, 5]
415 [2]
416 [3, 4, 5, 3, 4, 3]
417 [3, 4, 5, 3, 4]
418 [3, 4, 5, 3]
419 [3, 4, 5, 4]
420 [3, 4, 5]
421 [3, 4, 3]
422 [3, 4]
423 [3, 5]
424 [3]
425 [4, 5, 4]
426 [4, 5]
427 [4]
428 [5]
429 []
sage: A=CartanMatrix(['A',6])
....: c=[0,1,2,3,4,5]
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+1) for
....: i in range(6)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
^[[A^[[A1 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
2 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1]
3 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0]
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [315], line 5
      3 n=Integer(1)
      4 for v in sortables(A,c):
----> 5     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+Integer(1)) for i in range(Integer(6))))
      6     print(n,v)
      7     n+=Integer(1)

File ~/git/affine_dominance/domination4.py:127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_faster(B, la, seqs[0])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_faster(B, la, s))
    128     if P.dimension()==0:
    129         break

File ~/git/affine_dominance/domination4.py:151, in p_lambda_faster(B, la, seq)
    148 #print("Hp:   ",Hp,Hp.vertices(),Hp.rays(),Hp.lines(),"\n")
    149 #print("Hm:   ",Hm,Hm.vertices(),Hm.rays(),Hm.lines(),"\n\n")
    150 Pp = P.intersection(Hp)
--> 151 Pm = P.intersection(Hm)
    152 if Pp.dimension() < rk:
    153     P=Em*Pm

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1371, in Polyhedron_base5.intersection(self, other)
   1369 parent = self.parent()
   1370 try:
-> 1371     intersection = parent.element_class(parent, None, [new_ieqs, new_eqns])
   1373     # Force calculation of the vertices.
   1374     _ = intersection.n_vertices()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:179, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    177 elif Hrep is not None:
    178     ieqs, eqns = Hrep
--> 179     self._init_from_Hrepresentation(ieqs, eqns, **kwds)
    180 else:
    181     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:129, in Polyhedron_ppl._init_from_Hrepresentation(self, ieqs, eqns, minimize, verbose)
    106 def _init_from_Hrepresentation(self, ieqs, eqns, minimize=True, verbose=False):
    107     """
    108     Construct polyhedron from H-representation data.
    109 
   (...)
    127         sage: Polyhedron_ppl._init_from_Hrepresentation(p, [], [])
    128     """
--> 129     cs = self._convert_constraints_to_ppl(ieqs, eqns)
    130     if cs.empty():
    131         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'universe')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:534, in Polyhedron_ppl._convert_constraints_to_ppl(ieqs, eqns)
    532     ieqs = []
    533 for ieq in ieqs:
--> 534     cs.insert(Polyhedron_ppl._convert_constraint_to_ppl(ieq, INEQUALITY))
    535 if eqns is None:
    536     eqns = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:509, in Polyhedron_ppl._convert_constraint_to_ppl(c, typ)
    507 A = dc[1:]
    508 if typ == INEQUALITY:
--> 509     return Linear_Expression(A, b) >= 0
    510 else:
    511     return Linear_Expression(A, b) == 0

File ppl/linear_algebra.pyx:654, in ppl.linear_algebra.Linear_Expression.__init__()

File ppl/linear_algebra.pyx:49, in ppl.linear_algebra.PPL_Coefficient_from_pyobject()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/rings/integer.pyx:914, in sage.rings.integer.Integer.__richcmp__ (build/cythonized/sage/rings/integer.c:16498)()
    912     c = mpz_cmp_d((<Integer>left).value, d)
    913 else:
--> 914     return coercion_model.richcmp(left, right, op)
    915 
    916 return rich_to_bool_sgn(op, c)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:2021, in sage.structure.coerce.CoercionModel.richcmp (build/cythonized/sage/structure/coerce.c:26173)()
   2019 # Coerce to a common parent
   2020 try:
-> 2021     x, y = self.canonical_coercion(x, y)
   2022 except (TypeError, NotImplementedError):
   2023     pass

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1422, in sage.structure.coerce.CoercionModel.canonical_coercion (build/cythonized/sage/structure/coerce.c:18956)()
   1420             self._record_exception()
   1421 
-> 1422     raise TypeError("no common canonical parent for objects with parents: '%s' and '%s'"%(xp, yp))
   1423 
   1424 cpdef coercion_maps(self, R, S) noexcept:

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['A',5])
....: c=[0,1,2,3,4]
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+1) for
....: i in range(6)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
2 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1]
3 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0]
4 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 1]
5 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
6 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0]
7 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
8 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 2]
9 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
10 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2, 1]
11 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2]
12 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1]
13 [0, 1, 2, 3, 4, 0, 1, 2, 3, 2]
14 [0, 1, 2, 3, 4, 0, 1, 2, 3]
15 [0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0]
16 [0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
17 [0, 1, 2, 3, 4, 0, 1, 2, 0]
18 [0, 1, 2, 3, 4, 0, 1, 2, 1]
19 [0, 1, 2, 3, 4, 0, 1, 2]
20 [0, 1, 2, 3, 4, 0, 1, 3, 0]
21 [0, 1, 2, 3, 4, 0, 1, 3]
22 [0, 1, 2, 3, 4, 0, 1, 0]
23 [0, 1, 2, 3, 4, 0, 1]
24 [0, 1, 2, 3, 4, 0, 2, 3, 2]
25 [0, 1, 2, 3, 4, 0, 2, 3]
26 [0, 1, 2, 3, 4, 0, 2]
27 [0, 1, 2, 3, 4, 0, 3]
28 [0, 1, 2, 3, 4, 0]
29 [0, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
30 [0, 1, 2, 3, 4, 1, 2, 3, 1, 2]
31 [0, 1, 2, 3, 4, 1, 2, 3, 1]
32 [0, 1, 2, 3, 4, 1, 2, 3, 2]
33 [0, 1, 2, 3, 4, 1, 2, 3]
34 [0, 1, 2, 3, 4, 1, 2, 1]
35 [0, 1, 2, 3, 4, 1, 2]
36 [0, 1, 2, 3, 4, 1, 3]
37 [0, 1, 2, 3, 4, 1]
38 [0, 1, 2, 3, 4, 2, 3, 2]
39 [0, 1, 2, 3, 4, 2, 3]
40 [0, 1, 2, 3, 4, 2]
41 [0, 1, 2, 3, 4, 3]
42 [0, 1, 2, 3, 4]
43 [0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
44 [0, 1, 2, 3, 0, 1, 2, 0, 1]
45 [0, 1, 2, 3, 0, 1, 2, 0]
46 [0, 1, 2, 3, 0, 1, 2, 1]
47 [0, 1, 2, 3, 0, 1, 2]
48 [0, 1, 2, 3, 0, 1, 0]
49 [0, 1, 2, 3, 0, 1]
50 [0, 1, 2, 3, 0, 2]
51 [0, 1, 2, 3, 0]
52 [0, 1, 2, 3, 1, 2, 1]
53 [0, 1, 2, 3, 1, 2]
54 [0, 1, 2, 3, 1]
55 [0, 1, 2, 3, 2]
56 [0, 1, 2, 3]
57 [0, 1, 2, 4, 0, 1, 0]
58 [0, 1, 2, 4, 0, 1]
59 [0, 1, 2, 4, 0]
60 [0, 1, 2, 4, 1]
61 [0, 1, 2, 4]
62 [0, 1, 2, 0, 1, 0]
63 [0, 1, 2, 0, 1]
64 [0, 1, 2, 0]
65 [0, 1, 2, 1]
66 [0, 1, 2]
67 [0, 1, 3, 4, 0, 3]
68 [0, 1, 3, 4, 0]
69 [0, 1, 3, 4, 3]
70 [0, 1, 3, 4]
71 [0, 1, 3, 0]
72 [0, 1, 3]
73 [0, 1, 4, 0]
74 [0, 1, 4]
75 [0, 1, 0]
76 [0, 1]
77 [0, 2, 3, 4, 2, 3, 2]
78 [0, 2, 3, 4, 2, 3]
79 [0, 2, 3, 4, 2]
80 [0, 2, 3, 4, 3]
81 [0, 2, 3, 4]
82 [0, 2, 3, 2]
83 [0, 2, 3]
84 [0, 2, 4]
85 [0, 2]
86 [0, 3, 4, 3]
87 [0, 3, 4]
88 [0, 3]
89 [0, 4]
90 [0]
91 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
92 [1, 2, 3, 4, 1, 2, 3, 1, 2]
93 [1, 2, 3, 4, 1, 2, 3, 1]
94 [1, 2, 3, 4, 1, 2, 3, 2]
95 [1, 2, 3, 4, 1, 2, 3]
96 [1, 2, 3, 4, 1, 2, 1]
97 [1, 2, 3, 4, 1, 2]
98 [1, 2, 3, 4, 1, 3]
99 [1, 2, 3, 4, 1]
100 [1, 2, 3, 4, 2, 3, 2]
101 [1, 2, 3, 4, 2, 3]
102 [1, 2, 3, 4, 2]
103 [1, 2, 3, 4, 3]
104 [1, 2, 3, 4]
105 [1, 2, 3, 1, 2, 1]
106 [1, 2, 3, 1, 2]
107 [1, 2, 3, 1]
108 [1, 2, 3, 2]
109 [1, 2, 3]
110 [1, 2, 4, 1]
111 [1, 2, 4]
112 [1, 2, 1]
113 [1, 2]
114 [1, 3, 4, 3]
115 [1, 3, 4]
116 [1, 3]
117 [1, 4]
118 [1]
119 [2, 3, 4, 2, 3, 2]
120 [2, 3, 4, 2, 3]
121 [2, 3, 4, 2]
122 [2, 3, 4, 3]
123 [2, 3, 4]
124 [2, 3, 2]
125 [2, 3]
126 [2, 4]
127 [2]
128 [3, 4, 3]
129 [3, 4]
130 [3]
131 [4]
132 []
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+1) for
....: i in range(6)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
2 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3]
3 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2]
4 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1]
5 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0]
6 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
7 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
8 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
9 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
10 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3]
11 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
12 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0]
13 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2]
14 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 0]
15 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1]
16 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0]
17 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4]
18 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3]
19 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2]
20 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1]
21 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
22 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1]
23 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0]
24 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
25 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0]
26 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
27 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
28 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2]
29 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1]
30 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3]
31 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0]
32 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
33 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0]
34 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 1]
35 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2]
36 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 0]
37 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1]
38 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2, 3, 4]
39 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2, 3]
40 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2]
41 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0]
42 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
43 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
44 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
45 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1]
46 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4]
47 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 1, 2]
48 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 1]
49 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3]
50 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 1]
51 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2]
52 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1]
53 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2, 3, 4]
54 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2, 3]
55 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2]
56 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
57 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
58 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1]
59 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0]
60 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 1]
61 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
62 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0]
63 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
64 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 2]
65 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
66 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2, 1]
67 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2]
68 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1]
69 [0, 1, 2, 3, 4, 0, 1, 2, 3, 2]
70 [0, 1, 2, 3, 4, 0, 1, 2, 3]
71 [0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0]
72 [0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
73 [0, 1, 2, 3, 4, 0, 1, 2, 0]
74 [0, 1, 2, 3, 4, 0, 1, 2, 1]
75 [0, 1, 2, 3, 4, 0, 1, 2]
76 [0, 1, 2, 3, 4, 0, 1, 3, 4, 0]
77 [0, 1, 2, 3, 4, 0, 1, 3, 4]
78 [0, 1, 2, 3, 4, 0, 1, 3, 0]
79 [0, 1, 2, 3, 4, 0, 1, 3]
80 [0, 1, 2, 3, 4, 0, 1, 0]
81 [0, 1, 2, 3, 4, 0, 1]
82 [0, 1, 2, 3, 4, 0, 2, 3, 4, 2, 3, 4]
83 [0, 1, 2, 3, 4, 0, 2, 3, 4, 2, 3]
84 [0, 1, 2, 3, 4, 0, 2, 3, 4, 2]
85 [0, 1, 2, 3, 4, 0, 2, 3, 4]
86 [0, 1, 2, 3, 4, 0, 2, 3, 2]
87 [0, 1, 2, 3, 4, 0, 2, 3]
88 [0, 1, 2, 3, 4, 0, 2]
89 [0, 1, 2, 3, 4, 0, 3, 4]
90 [0, 1, 2, 3, 4, 0, 3]
91 [0, 1, 2, 3, 4, 0]
92 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
93 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
94 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
95 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1]
96 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
97 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2]
98 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1]
99 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
100 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1]
101 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
102 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1]
103 [0, 1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4]
104 [0, 1, 2, 3, 4, 1, 2, 3, 4, 2, 3]
105 [0, 1, 2, 3, 4, 1, 2, 3, 4, 2]
106 [0, 1, 2, 3, 4, 1, 2, 3, 4]
107 [0, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
108 [0, 1, 2, 3, 4, 1, 2, 3, 1, 2]
109 [0, 1, 2, 3, 4, 1, 2, 3, 1]
110 [0, 1, 2, 3, 4, 1, 2, 3, 2]
111 [0, 1, 2, 3, 4, 1, 2, 3]
112 [0, 1, 2, 3, 4, 1, 2, 1]
113 [0, 1, 2, 3, 4, 1, 2]
114 [0, 1, 2, 3, 4, 1, 3, 4]
115 [0, 1, 2, 3, 4, 1, 3]
116 [0, 1, 2, 3, 4, 1]
117 [0, 1, 2, 3, 4, 2, 3, 4, 2, 3, 4]
118 [0, 1, 2, 3, 4, 2, 3, 4, 2, 3]
119 [0, 1, 2, 3, 4, 2, 3, 4, 2]
120 [0, 1, 2, 3, 4, 2, 3, 4]
121 [0, 1, 2, 3, 4, 2, 3, 2]
122 [0, 1, 2, 3, 4, 2, 3]
123 [0, 1, 2, 3, 4, 2]
124 [0, 1, 2, 3, 4, 3, 4]
125 [0, 1, 2, 3, 4, 3]
126 [0, 1, 2, 3, 4]
127 [0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
128 [0, 1, 2, 3, 0, 1, 2, 0, 1]
129 [0, 1, 2, 3, 0, 1, 2, 0]
130 [0, 1, 2, 3, 0, 1, 2, 1]
131 [0, 1, 2, 3, 0, 1, 2]
132 [0, 1, 2, 3, 0, 1, 0]
133 [0, 1, 2, 3, 0, 1]
134 [0, 1, 2, 3, 0, 2]
135 [0, 1, 2, 3, 0]
136 [0, 1, 2, 3, 1, 2, 1]
137 [0, 1, 2, 3, 1, 2]
138 [0, 1, 2, 3, 1]
139 [0, 1, 2, 3, 2]
140 [0, 1, 2, 3]
141 [0, 1, 2, 4, 0, 1, 0]
142 [0, 1, 2, 4, 0, 1]
143 [0, 1, 2, 4, 0]
144 [0, 1, 2, 4, 1]
145 [0, 1, 2, 4]
146 [0, 1, 2, 0, 1, 0]
147 [0, 1, 2, 0, 1]
148 [0, 1, 2, 0]
149 [0, 1, 2, 1]
150 [0, 1, 2]
151 [0, 1, 3, 4, 0, 3, 4]
152 [0, 1, 3, 4, 0, 3]
153 [0, 1, 3, 4, 0]
154 [0, 1, 3, 4, 3, 4]
155 [0, 1, 3, 4, 3]
156 [0, 1, 3, 4]
157 [0, 1, 3, 0]
158 [0, 1, 3]
159 [0, 1, 4, 0]
160 [0, 1, 4]
161 [0, 1, 0]
162 [0, 1]
163 [0, 2, 3, 4, 2, 3, 4, 2, 3, 4]
164 [0, 2, 3, 4, 2, 3, 4, 2, 3]
165 [0, 2, 3, 4, 2, 3, 4, 2]
166 [0, 2, 3, 4, 2, 3, 4]
167 [0, 2, 3, 4, 2, 3, 2]
168 [0, 2, 3, 4, 2, 3]
169 [0, 2, 3, 4, 2]
170 [0, 2, 3, 4, 3, 4]
171 [0, 2, 3, 4, 3]
172 [0, 2, 3, 4]
173 [0, 2, 3, 2]
174 [0, 2, 3]
175 [0, 2, 4]
176 [0, 2]
177 [0, 3, 4, 3, 4]
178 [0, 3, 4, 3]
179 [0, 3, 4]
180 [0, 3]
181 [0, 4]
182 [0]
183 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
184 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
185 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
186 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1]
187 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
188 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2]
189 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1]
190 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
191 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1]
192 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
193 [1, 2, 3, 4, 1, 2, 3, 4, 1]
194 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4]
195 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3]
196 [1, 2, 3, 4, 1, 2, 3, 4, 2]
197 [1, 2, 3, 4, 1, 2, 3, 4]
198 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
199 [1, 2, 3, 4, 1, 2, 3, 1, 2]
200 [1, 2, 3, 4, 1, 2, 3, 1]
201 [1, 2, 3, 4, 1, 2, 3, 2]
202 [1, 2, 3, 4, 1, 2, 3]
203 [1, 2, 3, 4, 1, 2, 1]
204 [1, 2, 3, 4, 1, 2]
205 [1, 2, 3, 4, 1, 3, 4]
206 [1, 2, 3, 4, 1, 3]
207 [1, 2, 3, 4, 1]
208 [1, 2, 3, 4, 2, 3, 4, 2, 3, 4]
209 [1, 2, 3, 4, 2, 3, 4, 2, 3]
210 [1, 2, 3, 4, 2, 3, 4, 2]
211 [1, 2, 3, 4, 2, 3, 4]
212 [1, 2, 3, 4, 2, 3, 2]
213 [1, 2, 3, 4, 2, 3]
214 [1, 2, 3, 4, 2]
215 [1, 2, 3, 4, 3, 4]
216 [1, 2, 3, 4, 3]
217 [1, 2, 3, 4]
218 [1, 2, 3, 1, 2, 1]
219 [1, 2, 3, 1, 2]
220 [1, 2, 3, 1]
221 [1, 2, 3, 2]
222 [1, 2, 3]
223 [1, 2, 4, 1]
224 [1, 2, 4]
225 [1, 2, 1]
226 [1, 2]
227 [1, 3, 4, 3, 4]
228 [1, 3, 4, 3]
229 [1, 3, 4]
230 [1, 3]
231 [1, 4]
232 [1]
233 [2, 3, 4, 2, 3, 4, 2, 3, 4]
234 [2, 3, 4, 2, 3, 4, 2, 3]
235 [2, 3, 4, 2, 3, 4, 2]
236 [2, 3, 4, 2, 3, 4]
237 [2, 3, 4, 2, 3, 2]
238 [2, 3, 4, 2, 3]
239 [2, 3, 4, 2]
240 [2, 3, 4, 3, 4]
241 [2, 3, 4, 3]
242 [2, 3, 4]
243 [2, 3, 2]
244 [2, 3]
245 [2, 4]
246 [2]
247 [3, 4, 3, 4]
248 [3, 4, 3]
249 [3, 4]
250 [3]
251 [4]
252 []
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+0) for
....: i in range(20)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
FAILURE! 2
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+2) for
....: i in range(20)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
2 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3]
3 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2]
4 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1]
5 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0]
6 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
7 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
8 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
9 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
10 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3]
11 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
12 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0]
13 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2]
14 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 0]
15 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1]
16 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0]
17 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4]
18 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3]
19 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2]
20 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1]
21 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [319], line 5
      3 n=Integer(1)
      4 for v in sortables(A,c):
----> 5     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+Integer(2)) for i in range(Integer(20))))
      6     print(n,v)
      7     n+=Integer(1)

File ~/git/affine_dominance/domination4.py:127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_faster(B, la, seqs[0])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_faster(B, la, s))
    128     if P.dimension()==0:
    129         break

File ~/git/affine_dominance/domination4.py:151, in p_lambda_faster(B, la, seq)
    148 #print("Hp:   ",Hp,Hp.vertices(),Hp.rays(),Hp.lines(),"\n")
    149 #print("Hm:   ",Hm,Hm.vertices(),Hm.rays(),Hm.lines(),"\n\n")
    150 Pp = P.intersection(Hp)
--> 151 Pm = P.intersection(Hm)
    152 if Pp.dimension() < rk:
    153     P=Em*Pm

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1371, in Polyhedron_base5.intersection(self, other)
   1369 parent = self.parent()
   1370 try:
-> 1371     intersection = parent.element_class(parent, None, [new_ieqs, new_eqns])
   1373     # Force calculation of the vertices.
   1374     _ = intersection.n_vertices()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:179, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    177 elif Hrep is not None:
    178     ieqs, eqns = Hrep
--> 179     self._init_from_Hrepresentation(ieqs, eqns, **kwds)
    180 else:
    181     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:129, in Polyhedron_ppl._init_from_Hrepresentation(self, ieqs, eqns, minimize, verbose)
    106 def _init_from_Hrepresentation(self, ieqs, eqns, minimize=True, verbose=False):
    107     """
    108     Construct polyhedron from H-representation data.
    109 
   (...)
    127         sage: Polyhedron_ppl._init_from_Hrepresentation(p, [], [])
    128     """
--> 129     cs = self._convert_constraints_to_ppl(ieqs, eqns)
    130     if cs.empty():
    131         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'universe')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:534, in Polyhedron_ppl._convert_constraints_to_ppl(ieqs, eqns)
    532     ieqs = []
    533 for ieq in ieqs:
--> 534     cs.insert(Polyhedron_ppl._convert_constraint_to_ppl(ieq, INEQUALITY))
    535 if eqns is None:
    536     eqns = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:509, in Polyhedron_ppl._convert_constraint_to_ppl(c, typ)
    507 A = dc[1:]
    508 if typ == INEQUALITY:
--> 509     return Linear_Expression(A, b) >= 0
    510 else:
    511     return Linear_Expression(A, b) == 0

File ppl/linear_algebra.pyx:654, in ppl.linear_algebra.Linear_Expression.__init__()

File ppl/linear_algebra.pyx:49, in ppl.linear_algebra.PPL_Coefficient_from_pyobject()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/rings/integer.pyx:914, in sage.rings.integer.Integer.__richcmp__ (build/cythonized/sage/rings/integer.c:16498)()
    912     c = mpz_cmp_d((<Integer>left).value, d)
    913 else:
--> 914     return coercion_model.richcmp(left, right, op)
    915 
    916 return rich_to_bool_sgn(op, c)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:2021, in sage.structure.coerce.CoercionModel.richcmp (build/cythonized/sage/structure/coerce.c:26173)()
   2019 # Coerce to a common parent
   2020 try:
-> 2021     x, y = self.canonical_coercion(x, y)
   2022 except (TypeError, NotImplementedError):
   2023     pass

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1422, in sage.structure.coerce.CoercionModel.canonical_coercion (build/cythonized/sage/structure/coerce.c:18956)()
   1420             self._record_exception()
   1421 
-> 1422     raise TypeError("no common canonical parent for objects with parents: '%s' and '%s'"%(xp, yp))
   1423 
   1424 cpdef coercion_maps(self, R, S) noexcept:

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['C',5])
....: c=[1,2,3,4,0]
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+0) for
....: i in range(20)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0]
2 [1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
3 [1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
4 [1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3]
5 [1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0]
6 [1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2]
7 [1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 0]
8 [1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1]
9 [1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0]
10 [1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1]
11 [1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
12 [1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0]
13 [1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
14 [1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0]
15 [1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
16 [1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
17 [1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1]
18 [1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3]
19 [1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0]
20 [1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
21 [1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0]
22 [1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 1]
23 [1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2]
24 [1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 0]
25 [1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1]
26 [1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2]
27 [1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0]
28 [1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1]
29 [1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4]
30 [1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 1]
31 [1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3]
32 [1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 1]
33 [1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2]
34 [1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1]
35 [1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2]
36 [1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
37 [1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
38 [1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1]
39 [1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0]
40 [1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 1]
41 [1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
42 [1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0]
43 [1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
44 [1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 2]
45 [1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
46 [1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2, 1]
47 [1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2]
48 [1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1]
49 [1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 2]
50 [1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3]
51 [1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0]
52 [1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
53 [1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0]
54 [1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 1]
55 [1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2]
56 [1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 3, 0]
57 [1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 3]
58 [1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 0]
59 [1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1]
60 [1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2, 3, 4, 2]
61 [1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2, 3, 4]
62 [1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2, 3, 2]
63 [1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2, 3]
64 [1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2]
65 [1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 3]
66 [1, 2, 3, 4, 0, 1, 2, 3, 4, 0]
67 [1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1]
68 [1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
69 [1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1]
70 [1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
71 [1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1]
72 [1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
73 [1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1]
74 [1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 2]
75 [1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4]
76 [1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
77 [1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 1, 2]
78 [1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 1]
79 [1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 2]
80 [1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3]
81 [1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 1]
82 [1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2]
83 [1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 3]
84 [1, 2, 3, 4, 0, 1, 2, 3, 4, 1]
85 [1, 2, 3, 4, 0, 1, 2, 3, 4, 2, 3, 4, 2]
86 [1, 2, 3, 4, 0, 1, 2, 3, 4, 2, 3, 4]
87 [1, 2, 3, 4, 0, 1, 2, 3, 4, 2, 3, 2]
88 [1, 2, 3, 4, 0, 1, 2, 3, 4, 2, 3]
89 [1, 2, 3, 4, 0, 1, 2, 3, 4, 2]
90 [1, 2, 3, 4, 0, 1, 2, 3, 4, 3]
91 [1, 2, 3, 4, 0, 1, 2, 3, 4]
92 [1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
93 [1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1]
94 [1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0]
95 [1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 1]
96 [1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
97 [1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0]
98 [1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
99 [1, 2, 3, 4, 0, 1, 2, 3, 0, 2]
100 [1, 2, 3, 4, 0, 1, 2, 3, 0]
101 [1, 2, 3, 4, 0, 1, 2, 3, 1, 2, 1]
102 [1, 2, 3, 4, 0, 1, 2, 3, 1, 2]
103 [1, 2, 3, 4, 0, 1, 2, 3, 1]
104 [1, 2, 3, 4, 0, 1, 2, 3, 2]
105 [1, 2, 3, 4, 0, 1, 2, 3]
106 [1, 2, 3, 4, 0, 1, 2, 0, 1, 0]
107 [1, 2, 3, 4, 0, 1, 2, 0, 1]
108 [1, 2, 3, 4, 0, 1, 2, 0]
109 [1, 2, 3, 4, 0, 1, 2, 1]
110 [1, 2, 3, 4, 0, 1, 2]
111 [1, 2, 3, 4, 0, 1, 3, 4, 0]
112 [1, 2, 3, 4, 0, 1, 3, 4]
113 [1, 2, 3, 4, 0, 1, 3, 0]
114 [1, 2, 3, 4, 0, 1, 3]
115 [1, 2, 3, 4, 0, 1, 0]
116 [1, 2, 3, 4, 0, 1]
117 [1, 2, 3, 4, 0, 2, 3, 4, 2, 3, 4]
118 [1, 2, 3, 4, 0, 2, 3, 4, 2, 3]
119 [1, 2, 3, 4, 0, 2, 3, 4, 2]
120 [1, 2, 3, 4, 0, 2, 3, 4]
121 [1, 2, 3, 4, 0, 2, 3, 2]
122 [1, 2, 3, 4, 0, 2, 3]
123 [1, 2, 3, 4, 0, 2]
124 [1, 2, 3, 4, 0, 3, 4]
125 [1, 2, 3, 4, 0, 3]
126 [1, 2, 3, 4, 0]
127 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
128 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
129 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
130 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1]
131 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
132 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2]
133 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1]
134 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
135 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1]
136 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
137 [1, 2, 3, 4, 1, 2, 3, 4, 1]
138 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4]
139 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3]
140 [1, 2, 3, 4, 1, 2, 3, 4, 2]
141 [1, 2, 3, 4, 1, 2, 3, 4]
142 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
143 [1, 2, 3, 4, 1, 2, 3, 1, 2]
144 [1, 2, 3, 4, 1, 2, 3, 1]
145 [1, 2, 3, 4, 1, 2, 3, 2]
146 [1, 2, 3, 4, 1, 2, 3]
147 [1, 2, 3, 4, 1, 2, 1]
148 [1, 2, 3, 4, 1, 2]
149 [1, 2, 3, 4, 1, 3, 4]
150 [1, 2, 3, 4, 1, 3]
151 [1, 2, 3, 4, 1]
152 [1, 2, 3, 4, 2, 3, 4, 2, 3, 4]
153 [1, 2, 3, 4, 2, 3, 4, 2, 3]
154 [1, 2, 3, 4, 2, 3, 4, 2]
155 [1, 2, 3, 4, 2, 3, 4]
156 [1, 2, 3, 4, 2, 3, 2]
157 [1, 2, 3, 4, 2, 3]
158 [1, 2, 3, 4, 2]
159 [1, 2, 3, 4, 3, 4]
160 [1, 2, 3, 4, 3]
161 [1, 2, 3, 4]
162 [1, 2, 3, 0, 1, 2, 3, 0, 1, 0]
163 [1, 2, 3, 0, 1, 2, 3, 0, 1]
164 [1, 2, 3, 0, 1, 2, 3, 0]
165 [1, 2, 3, 0, 1, 2, 3, 1]
166 [1, 2, 3, 0, 1, 2, 3]
167 [1, 2, 3, 0, 1, 2, 0, 1, 0]
168 [1, 2, 3, 0, 1, 2, 0, 1]
169 [1, 2, 3, 0, 1, 2, 0]
170 [1, 2, 3, 0, 1, 2, 1]
171 [1, 2, 3, 0, 1, 2]
172 [1, 2, 3, 0, 1, 0]
173 [1, 2, 3, 0, 1]
174 [1, 2, 3, 0, 2]
175 [1, 2, 3, 0]
176 [1, 2, 3, 1, 2, 1]
177 [1, 2, 3, 1, 2]
178 [1, 2, 3, 1]
179 [1, 2, 3, 2]
180 [1, 2, 3]
181 [1, 2, 4, 0, 1, 2, 0]
182 [1, 2, 4, 0, 1, 2]
183 [1, 2, 4, 0, 1, 0]
184 [1, 2, 4, 0, 1]
185 [1, 2, 4, 0]
186 [1, 2, 4, 1]
187 [1, 2, 4]
188 [1, 2, 0, 1, 2, 0]
189 [1, 2, 0, 1, 2]
190 [1, 2, 0, 1, 0]
191 [1, 2, 0, 1]
192 [1, 2, 0]
193 [1, 2, 1]
194 [1, 2]
195 [1, 3, 4, 0, 1, 3, 4]
196 [1, 3, 4, 0, 1, 3]
197 [1, 3, 4, 0, 1]
198 [1, 3, 4, 0, 3, 4]
199 [1, 3, 4, 0, 3]
200 [1, 3, 4, 0]
201 [1, 3, 4, 3, 4]
202 [1, 3, 4, 3]
203 [1, 3, 4]
204 [1, 3, 0, 1]
205 [1, 3, 0]
206 [1, 3]
207 [1, 4, 0, 1]
208 [1, 4, 0]
209 [1, 4]
210 [1, 0, 1]
211 [1, 0]
212 [1]
213 [2, 3, 4, 0, 2, 3, 4, 2, 3, 4]
214 [2, 3, 4, 0, 2, 3, 4, 2, 3]
215 [2, 3, 4, 0, 2, 3, 4, 2]
216 [2, 3, 4, 0, 2, 3, 4]
217 [2, 3, 4, 0, 2, 3, 2]
218 [2, 3, 4, 0, 2, 3]
219 [2, 3, 4, 0, 2]
220 [2, 3, 4, 0, 3, 4]
221 [2, 3, 4, 0, 3]
222 [2, 3, 4, 0]
223 [2, 3, 4, 2, 3, 4, 2, 3, 4]
224 [2, 3, 4, 2, 3, 4, 2, 3]
225 [2, 3, 4, 2, 3, 4, 2]
226 [2, 3, 4, 2, 3, 4]
227 [2, 3, 4, 2, 3, 2]
228 [2, 3, 4, 2, 3]
229 [2, 3, 4, 2]
230 [2, 3, 4, 3, 4]
231 [2, 3, 4, 3]
232 [2, 3, 4]
233 [2, 3, 0, 2]
234 [2, 3, 0]
235 [2, 3, 2]
236 [2, 3]
237 [2, 4, 0]
238 [2, 4]
239 [2, 0]
240 [2]
241 [3, 4, 0, 3, 4]
242 [3, 4, 0, 3]
243 [3, 4, 0]
244 [3, 4, 3, 4]
245 [3, 4, 3]
246 [3, 4]
247 [3, 0]
248 [3]
249 [4, 0]
250 [4]
251 [0]
252 []
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+1) for
....: i in range(20)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [0, 1, 2, 0, 1, 2, 0, 1, 2]
2 [0, 1, 2, 0, 1, 2, 0, 1]
3 [0, 1, 2, 0, 1, 2, 0]
4 [0, 1, 2, 0, 1, 2]
5 [0, 1, 2, 0, 1, 0]
6 [0, 1, 2, 0, 1]
7 [0, 1, 2, 0]
8 [0, 1, 2, 1, 2]
9 [0, 1, 2, 1]
10 [0, 1, 2]
11 [0, 1, 0]
12 [0, 1]
13 [0, 2]
14 [0]
15 [1, 2, 1, 2]
16 [1, 2, 1]
17 [1, 2]
18 [1]
19 [2]
20 []
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+2) for
....: i in range(20)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [0, 1, 2, 0, 1, 2, 0, 1, 2]
2 [0, 1, 2, 0, 1, 2, 0, 1]
3 [0, 1, 2, 0, 1, 2, 0]
4 [0, 1, 2, 0, 1, 2]
5 [0, 1, 2, 0, 1, 0]
6 [0, 1, 2, 0, 1]
7 [0, 1, 2, 0]
8 [0, 1, 2, 1, 2]
9 [0, 1, 2, 1]
10 [0, 1, 2]
11 [0, 1, 0]
12 [0, 1]
13 [0, 2]
14 [0]
15 [1, 2, 1, 2]
16 [1, 2, 1]
17 [1, 2]
18 [1]
19 [2]
20 []
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+0) for
....: i in range(20)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [0, 1, 2, 0, 1, 2, 0, 1, 2]
FAILURE! 1
sage: A=CartanMatrix(['C',3])
....: c=[1,2,0]
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+0) for
....: i in range(20)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [1, 2, 0, 1, 2, 0, 1, 2, 0]
2 [1, 2, 0, 1, 2, 0, 1, 2]
3 [1, 2, 0, 1, 2, 0, 1, 0]
4 [1, 2, 0, 1, 2, 0, 1]
5 [1, 2, 0, 1, 2, 0]
6 [1, 2, 0, 1, 2, 1]
7 [1, 2, 0, 1, 2]
8 [1, 2, 0, 1, 0]
9 [1, 2, 0, 1]
10 [1, 2, 0]
11 [1, 2, 1, 2]
12 [1, 2, 1]
13 [1, 2]
14 [1, 0, 1]
15 [1, 0]
16 [1]
17 [2, 0]
18 [2]
19 [0]
20 []
sage: A=CartanMatrix(['C',3])
....: c=[0,2,1]
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+0) for
....: i in range(20)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [0, 2, 1, 0, 2, 1, 0, 2, 1]
2 [0, 2, 1, 0, 2, 1, 0, 2]
3 [0, 2, 1, 0, 2, 1, 0]
4 [0, 2, 1, 0, 2, 1, 2]
5 [0, 2, 1, 0, 2, 1]
6 [0, 2, 1, 0, 2]
7 [0, 2, 1, 0]
8 [0, 2, 1, 2, 1]
9 [0, 2, 1, 2]
10 [0, 2, 1]
11 [0, 2]
12 [0, 1, 0]
13 [0, 1]
14 [0]
15 [2, 1, 2, 1]
16 [2, 1, 2]
17 [2, 1]
18 [2]
19 [1]
20 []
sage: A=CartanMatrix(['C',5])
....: c=[0,2,4,1,3]
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+0) for
....: i in range(20)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
2 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1]
3 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 3]
4 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
5 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 1]
6 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2]
7 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 4]
8 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0]
9 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 3]
10 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4]
11 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2]
12 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 4]
13 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
14 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 0]
15 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1]
16 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 3, 4]
17 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 3]
18 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
19 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 1, 0]
20 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 1]
21 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2]
22 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 4]
23 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0]
24 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4]
25 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 1, 3, 2]
26 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 1, 3, 4]
27 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 1, 3]
28 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 1]
29 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 3, 4]
30 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 3]
31 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4]
32 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 1]
33 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2]
34 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 4]
35 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
36 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 0]
37 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1]
38 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 3, 2, 4, 3]
39 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 3, 2, 4]
40 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 3, 2]
41 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 3, 4]
42 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 3]
43 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4]
44 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 1, 0]
45 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 1]
46 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2]
47 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 4, 3]
48 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 4]
49 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0]
50 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2]
51 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3]
52 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1]
53 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 3]
54 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4]
55 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 1]
56 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 1, 3, 2]
57 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 1, 3, 4]
58 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 1, 3]
59 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 1]
60 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 3, 2, 4, 3]
61 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 3, 2, 4]
62 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 3, 2]
63 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 3, 4]
64 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4, 3]
65 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 4]
66 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2, 1]
67 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 2]
68 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 4, 3]
69 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 4]
70 [0, 2, 4, 1, 3, 0, 2, 4, 1, 3]
71 [0, 2, 4, 1, 3, 0, 2, 4, 1, 0]
72 [0, 2, 4, 1, 3, 0, 2, 4, 1]
73 [0, 2, 4, 1, 3, 0, 2, 4, 3, 2, 4, 3, 2]
74 [0, 2, 4, 1, 3, 0, 2, 4, 3, 2, 4, 3]
75 [0, 2, 4, 1, 3, 0, 2, 4, 3, 2, 4]
76 [0, 2, 4, 1, 3, 0, 2, 4, 3, 2]
77 [0, 2, 4, 1, 3, 0, 2, 4, 3, 4, 3]
78 [0, 2, 4, 1, 3, 0, 2, 4, 3, 4]
79 [0, 2, 4, 1, 3, 0, 2, 4, 3]
80 [0, 2, 4, 1, 3, 0, 2, 4]
81 [0, 2, 4, 1, 3, 0, 2, 1, 3, 0, 2]
82 [0, 2, 4, 1, 3, 0, 2, 1, 3, 0]
83 [0, 2, 4, 1, 3, 0, 2, 1, 3, 2]
84 [0, 2, 4, 1, 3, 0, 2, 1, 3]
85 [0, 2, 4, 1, 3, 0, 2, 1, 0]
86 [0, 2, 4, 1, 3, 0, 2, 1]
87 [0, 2, 4, 1, 3, 0, 2, 3]
88 [0, 2, 4, 1, 3, 0, 2]
89 [0, 2, 4, 1, 3, 0, 4, 3]
90 [0, 2, 4, 1, 3, 0, 4]
91 [0, 2, 4, 1, 3, 0]
92 [0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3]
93 [0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1]
94 [0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 3]
95 [0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4]
96 [0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 1]
97 [0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2]
98 [0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 4]
99 [0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3]
100 [0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1]
101 [0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 3, 2, 4]
102 [0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 3, 2]
103 [0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 3, 4]
104 [0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 3]
105 [0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4]
106 [0, 2, 4, 1, 3, 2, 4, 1, 3, 2, 1]
107 [0, 2, 4, 1, 3, 2, 4, 1, 3, 2]
108 [0, 2, 4, 1, 3, 2, 4, 1, 3, 4, 3]
109 [0, 2, 4, 1, 3, 2, 4, 1, 3, 4]
110 [0, 2, 4, 1, 3, 2, 4, 1, 3]
111 [0, 2, 4, 1, 3, 2, 4, 1]
112 [0, 2, 4, 1, 3, 2, 4, 3, 2, 4, 3, 2]
113 [0, 2, 4, 1, 3, 2, 4, 3, 2, 4, 3]
114 [0, 2, 4, 1, 3, 2, 4, 3, 2, 4]
115 [0, 2, 4, 1, 3, 2, 4, 3, 2]
116 [0, 2, 4, 1, 3, 2, 4, 3, 4, 3]
117 [0, 2, 4, 1, 3, 2, 4, 3, 4]
118 [0, 2, 4, 1, 3, 2, 4, 3]
119 [0, 2, 4, 1, 3, 2, 4]
120 [0, 2, 4, 1, 3, 2, 1, 3]
121 [0, 2, 4, 1, 3, 2, 1]
122 [0, 2, 4, 1, 3, 2, 3]
123 [0, 2, 4, 1, 3, 2]
124 [0, 2, 4, 1, 3, 4, 3]
125 [0, 2, 4, 1, 3, 4]
126 [0, 2, 4, 1, 3]
127 [0, 2, 4, 1, 0, 2, 1]
128 [0, 2, 4, 1, 0, 2]
129 [0, 2, 4, 1, 0]
130 [0, 2, 4, 1, 2]
131 [0, 2, 4, 1]
132 [0, 2, 4, 3, 2, 4, 3, 2, 4, 3]
133 [0, 2, 4, 3, 2, 4, 3, 2, 4]
134 [0, 2, 4, 3, 2, 4, 3, 2]
135 [0, 2, 4, 3, 2, 4, 3, 4]
136 [0, 2, 4, 3, 2, 4, 3]
137 [0, 2, 4, 3, 2, 4]
138 [0, 2, 4, 3, 2]
139 [0, 2, 4, 3, 4, 3]
140 [0, 2, 4, 3, 4]
141 [0, 2, 4, 3]
142 [0, 2, 4]
143 [0, 2, 1, 3, 0, 2, 1, 3, 0, 2]
144 [0, 2, 1, 3, 0, 2, 1, 3, 0]
145 [0, 2, 1, 3, 0, 2, 1, 3, 2]
146 [0, 2, 1, 3, 0, 2, 1, 3]
147 [0, 2, 1, 3, 0, 2, 1, 0]
148 [0, 2, 1, 3, 0, 2, 1]
149 [0, 2, 1, 3, 0, 2, 3]
150 [0, 2, 1, 3, 0, 2]
151 [0, 2, 1, 3, 0]
152 [0, 2, 1, 3, 2, 1, 3]
153 [0, 2, 1, 3, 2, 1]
154 [0, 2, 1, 3, 2, 3]
155 [0, 2, 1, 3, 2]
156 [0, 2, 1, 3]
157 [0, 2, 1, 0, 2, 1]
158 [0, 2, 1, 0, 2]
159 [0, 2, 1, 0]
160 [0, 2, 1, 2]
161 [0, 2, 1]
162 [0, 2, 3, 2]
163 [0, 2, 3]
164 [0, 2]
165 [0, 4, 1, 3, 0, 4, 3]
166 [0, 4, 1, 3, 0, 4]
167 [0, 4, 1, 3, 0]
168 [0, 4, 1, 3, 4, 3]
169 [0, 4, 1, 3, 4]
170 [0, 4, 1, 3]
171 [0, 4, 1, 0]
172 [0, 4, 1]
173 [0, 4, 3, 4, 3]
174 [0, 4, 3, 4]
175 [0, 4, 3]
176 [0, 4]
177 [0, 1, 3, 0]
178 [0, 1, 3]
179 [0, 1, 0]
180 [0, 1]
181 [0, 3]
182 [0]
183 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3]
184 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1]
185 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 3]
186 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4]
187 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 1]
188 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2]
189 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 4]
190 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3]
191 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1]
192 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 3, 2, 4]
193 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 3, 2]
194 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 3, 4]
195 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 3]
196 [2, 4, 1, 3, 2, 4, 1, 3, 2, 4]
197 [2, 4, 1, 3, 2, 4, 1, 3, 2, 1]
198 [2, 4, 1, 3, 2, 4, 1, 3, 2]
199 [2, 4, 1, 3, 2, 4, 1, 3, 4, 3]
200 [2, 4, 1, 3, 2, 4, 1, 3, 4]
201 [2, 4, 1, 3, 2, 4, 1, 3]
202 [2, 4, 1, 3, 2, 4, 1]
203 [2, 4, 1, 3, 2, 4, 3, 2, 4, 3, 2]
204 [2, 4, 1, 3, 2, 4, 3, 2, 4, 3]
205 [2, 4, 1, 3, 2, 4, 3, 2, 4]
206 [2, 4, 1, 3, 2, 4, 3, 2]
207 [2, 4, 1, 3, 2, 4, 3, 4, 3]
208 [2, 4, 1, 3, 2, 4, 3, 4]
209 [2, 4, 1, 3, 2, 4, 3]
210 [2, 4, 1, 3, 2, 4]
211 [2, 4, 1, 3, 2, 1, 3]
212 [2, 4, 1, 3, 2, 1]
213 [2, 4, 1, 3, 2, 3]
214 [2, 4, 1, 3, 2]
215 [2, 4, 1, 3, 4, 3]
216 [2, 4, 1, 3, 4]
217 [2, 4, 1, 3]
218 [2, 4, 1, 2]
219 [2, 4, 1]
220 [2, 4, 3, 2, 4, 3, 2, 4, 3]
221 [2, 4, 3, 2, 4, 3, 2, 4]
222 [2, 4, 3, 2, 4, 3, 2]
223 [2, 4, 3, 2, 4, 3, 4]
224 [2, 4, 3, 2, 4, 3]
225 [2, 4, 3, 2, 4]
226 [2, 4, 3, 2]
227 [2, 4, 3, 4, 3]
228 [2, 4, 3, 4]
229 [2, 4, 3]
230 [2, 4]
231 [2, 1, 3, 2, 1, 3]
232 [2, 1, 3, 2, 1]
233 [2, 1, 3, 2, 3]
234 [2, 1, 3, 2]
235 [2, 1, 3]
236 [2, 1, 2]
237 [2, 1]
238 [2, 3, 2]
239 [2, 3]
240 [2]
241 [4, 1, 3, 4, 3]
242 [4, 1, 3, 4]
243 [4, 1, 3]
244 [4, 1]
245 [4, 3, 4, 3]
246 [4, 3, 4]
247 [4, 3]
248 [4]
249 [1, 3]
250 [1]
251 [3]
252 []
sage: B(A,c)
[ 0  1  0  0  0]
[-1  0 -1  0  0]
[ 0  1  0  1  0]
[ 0  0 -1  0 -2]
[ 0  0  0  1  0]
sage: c=[0,1,2,3,4]
sage: B(A,c)
[ 0  1  0  0  0]
[-1  0  1  0  0]
[ 0 -1  0  1  0]
[ 0  0 -1  0  2]
[ 0  0  0 -1  0]
sage: A=CartanMatrix(['C',3])
sage: c=[0,1,2]
sage: for v in sortables(A,c):
....:     if (v==[] or v[0]!=c[0]):
....:         print(v,inv_sortable(A,c,v),inv_sortable(A,c[1:],v))
....: 
[1, 2, 1, 2] [0] []
[1, 2, 1] [2, 0] [2]
[1, 2] [2, 1, 0, 1] [2, 1]
[1] [2, 1, 0, 2, 1, 2, 1] [2, 1, 2]
[2] [1, 0, 1] [1]
[] [2, 1, 0, 2, 1, 0, 2, 1, 0] [2, 1, 2, 1]
sage: for v in sortables(A,c):
....:     if (v==[] or v[0]!=c[0]):
....:         p_lambda_int(B(A,c),lam(A,v),[v,inv_sortable(A,c,v)])
....: 
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 lines
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 lines
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray
sage: for v in sortables(A,c):
....:     if (v==[] or v[0]!=c[0]):
....:         p_lambda_int(B(A,c),lam(A,v),[v,[c[0]]+inv_sortable(A,c,v)])
....: 
A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray
A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray
sage: A=CartanMatrix(['C',2])
sage: c=[0,1]
sage: for v in sortables(A,c):
....:         p_lambda_int(B(A,c),lam(A,v),[v,inv_sortable(A,c,v)])
....: 
A 0-dimensional polyhedron in QQ^2 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^2 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^2 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^2 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^2 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^2 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['C',4])
sage: c=[0,1,2,3]
sage: for v in sortables(A,c):
....:         p_lambda_int(B(A,c),lam(A,v),[v,inv_sortable(A,c,v)])
....: 
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['C',3])
sage: c=[0,1,2]
sage: c=[1,2,0]
sage: B(A,c)
[ 0 -1  0]
[ 1  0  2]
[ 0 -1  0]
sage: for v in sortables(A,c):
....:     if (v==[] or v[0]!=c[0]):
....:         p_lambda_int(B(A,c),lam(A,v),[inv_sortable(A,c,v),inv_sortable(A,c
....: [1:],v)])
....: 
A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray
A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray
A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray
A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices
sage: for v in sortables(A,c):
....:         print(v,inv_sortable(A,c,v))
....: 
[1, 2, 0, 1, 2, 0, 1, 2, 0] []
[1, 2, 0, 1, 2, 0, 1, 2] [0]
[1, 2, 0, 1, 2, 0, 1, 0] [2]
[1, 2, 0, 1, 2, 0, 1] [0, 2]
[1, 2, 0, 1, 2, 0] [0, 2, 1]
[1, 2, 0, 1, 2, 1] [2, 1]
[1, 2, 0, 1, 2] [0, 2, 1, 0]
[1, 2, 0, 1, 0] [0, 2, 1, 2]
[1, 2, 0, 1] [0, 2, 1, 0, 2]
[1, 2, 0] [0, 2, 1, 0, 2, 1]
[1, 2, 1, 2] [0, 1]
[1, 2, 1] [0, 2, 1, 2, 1]
[1, 2] [0, 2, 1, 0, 2, 1, 0]
[1, 0, 1] [2, 1, 2]
[1, 0] [0, 2, 1, 0, 2, 1, 2]
[1] [0, 2, 1, 0, 2, 1, 0, 2]
[2, 0] [1]
[2] [0, 1, 0]
[0] [2, 1, 2, 1]
[] [0, 2, 1, 0, 2, 1, 0, 2, 1]
sage: for v in sortables(A,c):
....:     if (v==[] or v[0]!=c[0]):
....:         print(v,inv_sortable(A,c,v))
....: 
[2, 0] [1]
[2] [0, 1, 0]
[0] [2, 1, 2, 1]
[] [0, 2, 1, 0, 2, 1, 0, 2, 1]
sage: c
[1, 2, 0]
sage: for v in sortables(A,c):
....:     if (v==[] or v[0]!=c[0]):
....:         print(v,inv_sortable(A,c,v),inv_sortable(A,c[1:],v))
....: 
[2, 0] [1] []
[2] [0, 1, 0] [0]
[0] [2, 1, 2, 1] [2]
[] [0, 2, 1, 0, 2, 1, 0, 2, 1] [0, 2]
sage: for v in sortables(A,c):
....:     if (v==[] or v[0]!=c[0]):
....:         p_lambda_int(B(A,c),lam(A,v),[v,inv_sortable(A,c,v)])
....: 
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray
A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: for v in sortables(A,c):
....:     if (v==[] or v[0]!=c[0]):
....:         p_lambda_int(B(A,c),lam(A,v),[v,inv_sortable(A,c,v),inv_sortable(A
....: ,c[1:],v)])
....: 
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray
A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: p_lambda_int(B(A,c),lam(A,[2,0]),[[],[1,2,0]])
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: p_lambda_int(B(A,c),lam(A,[2]),[[1,2],[0,1,0]])
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
sage: p_lambda_int(B(A,c),lam(A,[2]),[[1,2],[1]])
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
sage: p_lambda_int(B(A,c),lam(A,[2]),[[1,2],[0,1]])
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
sage: p_lambda_int(B(A,c),lam(A,[2]),[[1,2],[1,0]])
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
sage: A=CartanMatrix(['C',5])
sage: c=[1,2,3,4,0]
sage: B(A,c)
[ 0 -1  0  0  0]
[ 1  0  1  0  0]
[ 0 -1  0  1  0]
[ 0  0 -1  0  2]
[ 0  0  0 -1  0]
sage: Bext=block_matrix(B,B).
  Cell In [360], line 1
    Bext=block_matrix(B,B).
                           ^
SyntaxError: invalid syntax

sage: Bext=block_matrix([B,B]).
  Cell In [361], line 1
    Bext=block_matrix([B,B]).
                             ^
SyntaxError: invalid syntax

sage: Bext=block_matrix([B,B])
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
Cell In [362], line 1
----> 1 Bext=block_matrix([B,B])

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/special.py:2029, in block_matrix(*args, **kwds)
   2027 if nrows is None:
   2028     if ncols is None:
-> 2029         raise ValueError("must specify either nrows or ncols")
   2030     else:
   2031         nrows = n // ncols

ValueError: must specify either nrows or ncols
sage: Bext=block_matrix([[B,B]])
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In [363], line 1
----> 1 Bext=block_matrix([[B,B]])

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/special.py:2049, in block_matrix(*args, **kwds)
   2047             R = M.base_ring() if is_Matrix(M) else parent(M)
   2048             if R is not ZZ:
-> 2049                 ring = sage.categories.pushout.pushout(ring, R)
   2051 if sparse is None:
   2052     sparse = True

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/categories/pushout.py:4469, in pushout(R, S)
   4466     R = type_to_parent(R)
   4468 if isinstance(S, type):
-> 4469     S = type_to_parent(S)
   4471 R_tower = construction_tower(R)
   4472 S_tower = construction_tower(S)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/categories/pushout.py:4897, in type_to_parent(P)
   4895 parent = py_scalar_parent(P)
   4896 if parent is None:
-> 4897     raise TypeError("not a scalar type")
   4898 return parent

TypeError: not a scalar type
sage: Bext=block_matrix([[B(A,c),B(A,c)]])
sage: Bext
[ 0 -1  0  0  0| 0 -1  0  0  0]
[ 1  0  1  0  0| 1  0  1  0  0]
[ 0 -1  0  1  0| 0 -1  0  1  0]
[ 0  0 -1  0  2| 0  0 -1  0  2]
[ 0  0  0 -1  0| 0  0  0 -1  0]
sage: Bext.mutate(0)
sage: Bext.mutate(0);Bext
[ 0 -1  0  0  0| 0 -1  0  0  0]
[ 1  0  1  0  0| 1  0  1  0  0]
[ 0 -1  0  1  0| 0 -1  0  1  0]
[ 0  0 -1  0  2| 0  0 -1  0  2]
[ 0  0  0 -1  0| 0  0  0 -1  0]
sage: Bext.mutate(1);Bext
[ 0  1  0  0  0| 0 -1  0  0  0]
[-1  0 -1  0  0|-1  0 -1  0  0]
[ 0  1  0  1  0| 0 -1  0  1  0]
[ 0  0 -1  0  2| 0  0 -1  0  2]
[ 0  0  0 -1  0| 0  0  0 -1  0]
sage: Bext=block_matrix([[B(A,c),B(A,c)]])
sage: Bext.mutate(0);Bext
[ 0  1  0  0  0| 0  1  0  0  0]
[-1  0  1  0  0| 1  0  1  0  0]
[ 0 -1  0  1  0| 0 -1  0  1  0]
[ 0  0 -1  0  2| 0  0 -1  0  2]
[ 0  0  0 -1  0| 0  0  0 -1  0]
sage: Bext.mutate(3);Bext
[ 0  1  0  0  0| 0  1  0  0  0]
[-1  0  1  0  0| 1  0  1  0  0]
[ 0 -1  0 -1  2| 0 -1  0  1  2]
[ 0  0  1  0 -2| 0  0  1  0 -2]
[ 0  0 -1  1  0| 0  0 -1 -1  0]
sage: Bext.mutate(2);Bext
[ 0  1  0  0  0| 0  1  0  0  0]
[-1  0 -1  0  2| 1  0  1  1  2]
[ 0  1  0  1 -2| 0  1  0 -1 -2]
[ 0  0 -1  0  0| 0  0  1  1  0]
[ 0 -1  1  0  0| 0 -1 -1 -1  0]
sage: Bext.mutate(1);Bext
[ 0 -1  0  0  2| 1  1  1  1  2]
[ 1  0  1  0 -2|-1  0 -1 -1 -2]
[ 0 -1  0  1  0| 1  1  1  0  0]
[ 0  0 -1  0  0| 0  0  1  1  0]
[-1  1  0  0  0| 0 -1 -1 -1  0]
sage: Bext.mutate(0);Bext
[ 0  1  0  0 -2|-1 -1 -1 -1 -2]
[-1  0  1  0  0| 0  1  0  0  0]
[ 0 -1  0  1  0| 1  1  1  0  0]
[ 0  0 -1  0  0| 0  0  1  1  0]
[ 1  0  0  0  0| 0 -1 -1 -1  0]
sage: Bext.mutate(3);Bext
[ 0  1  0  0 -2|-1 -1 -1 -1 -2]
[-1  0  1  0  0| 0  1  0  0  0]
[ 0 -1  0 -1  0| 1  1  2  1  0]
[ 0  0  1  0  0| 0  0 -1 -1  0]
[ 1  0  0  0  0| 0 -1 -1 -1  0]
sage: Bext.mutate(2);Bext
[ 0  1  0  0 -2|-1 -1 -1 -1 -2]
[-1  0 -1  0  0| 1  2  2  1  0]
[ 0  1  0  1  0|-1 -1 -2 -1  0]
[ 0  0 -1  0  0| 1  1  1  0  0]
[ 1  0  0  0  0| 0 -1 -1 -1  0]
sage: Bext.mutate(1);Bext
[ 0 -1  0  0 -2| 0  1  1  0 -2]
[ 1  0  1  0  0|-1 -2 -2 -1  0]
[ 0 -1  0  1  0| 0  1  0  0  0]
[ 0  0 -1  0  0| 1  1  1  0  0]
[ 1  0  0  0  0| 0 -1 -1 -1  0]
sage: Bext.mutate(0);Bext
[ 0  1  0  0  2| 0 -1 -1  0  2]
[-1  0  1  0  0|-1 -1 -1 -1  0]
[ 0 -1  0  1  0| 0  1  0  0  0]
[ 0  0 -1  0  0| 1  1  1  0  0]
[-1  0  0  0  0| 0  0  0 -1  0]
sage: Bext.mutate(3);Bext
[ 0  1  0  0  2| 0 -1 -1  0  2]
[-1  0  1  0  0|-1 -1 -1 -1  0]
[ 0 -1  0 -1  0| 1  2  1  0  0]
[ 0  0  1  0  0|-1 -1 -1  0  0]
[-1  0  0  0  0| 0  0  0 -1  0]
sage: Bext.mutate(2);Bext
[ 0  1  0  0  2| 0 -1 -1  0  2]
[-1  0 -1  0  0| 0  1  0 -1  0]
[ 0  1  0  1  0|-1 -2 -1  0  0]
[ 0  0 -1  0  0| 0  1  0  0  0]
[-1  0  0  0  0| 0  0  0 -1  0]
sage: Bext.mutate(1);Bext
[ 0 -1  0  0  2| 0  0 -1  0  2]
[ 1  0  1  0  0| 0 -1  0  1  0]
[ 0 -1  0  1  0|-1 -1 -1  0  0]
[ 0  0 -1  0  0| 0  1  0  0  0]
[-1  0  0  0  0| 0  0  0 -1  0]
sage: Bext.mutate(0);Bext
[ 0  1  0  0 -2| 0  0  1  0 -2]
[-1  0  1  0  2| 0 -1  0  1  2]
[ 0 -1  0  1  0|-1 -1 -1  0  0]
[ 0  0 -1  0  0| 0  1  0  0  0]
[ 1 -1  0  0  0| 0  0 -1 -1  0]
sage: Bext.mutate(3);Bext
[ 0  1  0  0 -2| 0  0  1  0 -2]
[-1  0  1  0  2| 0 -1  0  1  2]
[ 0 -1  0 -1  0|-1  0 -1  0  0]
[ 0  0  1  0  0| 0 -1  0  0  0]
[ 1 -1  0  0  0| 0  0 -1 -1  0]
sage: Bext.mutate(2);Bext
[ 0  1  0  0 -2| 0  0  1  0 -2]
[-1  0 -1  0  2| 0 -1  0  1  2]
[ 0  1  0  1  0| 1  0  1  0  0]
[ 0  0 -1  0  0| 0 -1  0  0  0]
[ 1 -1  0  0  0| 0  0 -1 -1  0]
sage: Bext.mutate(1);Bext
[ 0 -1  0  0  0| 0  0  1  1  0]
[ 1  0  1  0 -2| 0  1  0 -1 -2]
[ 0 -1  0  1  2| 1  0  1  1  2]
[ 0  0 -1  0  0| 0 -1  0  0  0]
[ 0  1 -1  0  0| 0 -1 -1 -1  0]
sage: Bext=block_matrix([[B(A,c),B(A,c)]])
sage: Bext.mutate(0);Bext
[ 0  1  0  0  0| 0  1  0  0  0]
[-1  0  1  0  0| 1  0  1  0  0]
[ 0 -1  0  1  0| 0 -1  0  1  0]
[ 0  0 -1  0  2| 0  0 -1  0  2]
[ 0  0  0 -1  0| 0  0  0 -1  0]
sage: Bext.mutate(4);Bext
[ 0  1  0  0  0| 0  1  0  0  0]
[-1  0  1  0  0| 1  0  1  0  0]
[ 0 -1  0  1  0| 0 -1  0  1  0]
[ 0  0 -1  0 -2| 0  0 -1  0  2]
[ 0  0  0  1  0| 0  0  0  1  0]
sage: Bext.mutate(3);Bext
[ 0  1  0  0  0| 0  1  0  0  0]
[-1  0  1  0  0| 1  0  1  0  0]
[ 0 -1  0 -1  0| 0 -1  0  1  2]
[ 0  0  1  0  2| 0  0  1  0 -2]
[ 0  0  0 -1  0| 0  0  0  1  2]
sage: Bext.mutate(2);Bext
[ 0  1  0  0  0| 0  1  0  0  0]
[-1  0 -1  0  0| 1  0  1  1  2]
[ 0  1  0  1  0| 0  1  0 -1 -2]
[ 0  0 -1  0  2| 0  0  1  1  0]
[ 0  0  0 -1  0| 0  0  0  1  2]
sage: Bext.mutate(1);Bext
[ 0 -1  0  0  0| 1  1  1  1  2]
[ 1  0  1  0  0|-1  0 -1 -1 -2]
[ 0 -1  0  1  0| 1  1  1  0  0]
[ 0  0 -1  0  2| 0  0  1  1  0]
[ 0  0  0 -1  0| 0  0  0  1  2]
sage: Bext.mutate(0);Bext
[ 0  1  0  0  0|-1 -1 -1 -1 -2]
[-1  0  1  0  0| 0  1  0  0  0]
[ 0 -1  0  1  0| 1  1  1  0  0]
[ 0  0 -1  0  2| 0  0  1  1  0]
[ 0  0  0 -1  0| 0  0  0  1  2]
sage: Bext.mutate(4);Bext
[ 0  1  0  0  0|-1 -1 -1 -1 -2]
[-1  0  1  0  0| 0  1  0  0  0]
[ 0 -1  0  1  0| 1  1  1  0  0]
[ 0  0 -1  0 -2| 0  0  1  3  4]
[ 0  0  0  1  0| 0  0  0 -1 -2]
sage: Bext.mutate(3);Bext
[ 0  1  0  0  0|-1 -1 -1 -1 -2]
[-1  0  1  0  0| 0  1  0  0  0]
[ 0 -1  0 -1  0| 1  1  2  3  4]
[ 0  0  1  0  2| 0  0 -1 -3 -4]
[ 0  0  0 -1  0| 0  0  1  2  2]
sage: Bext.mutate(2);Bext
[ 0  1  0  0  0|-1 -1 -1 -1 -2]
[-1  0 -1  0  0| 1  2  2  3  4]
[ 0  1  0  1  0|-1 -1 -2 -3 -4]
[ 0  0 -1  0  2| 1  1  1  0  0]
[ 0  0  0 -1  0| 0  0  1  2  2]
sage: Bext.mutate(1);Bext
[ 0 -1  0  0  0| 0  1  1  2  2]
[ 1  0  1  0  0|-1 -2 -2 -3 -4]
[ 0 -1  0  1  0| 0  1  0  0  0]
[ 0  0 -1  0  2| 1  1  1  0  0]
[ 0  0  0 -1  0| 0  0  1  2  2]
sage: Bext.mutate(0);Bext
[ 0  1  0  0  0| 0 -1 -1 -2 -2]
[-1  0  1  0  0|-1 -1 -1 -1 -2]
[ 0 -1  0  1  0| 0  1  0  0  0]
[ 0  0 -1  0  2| 1  1  1  0  0]
[ 0  0  0 -1  0| 0  0  1  2  2]
sage: Bext.mutate(4);Bext
[ 0  1  0  0  0| 0 -1 -1 -2 -2]
[-1  0  1  0  0|-1 -1 -1 -1 -2]
[ 0 -1  0  1  0| 0  1  0  0  0]
[ 0  0 -1  0 -2| 1  1  3  4  4]
[ 0  0  0  1  0| 0  0 -1 -2 -2]
sage: Bext.mutate(3);Bext
[ 0  1  0  0  0| 0 -1 -1 -2 -2]
[-1  0  1  0  0|-1 -1 -1 -1 -2]
[ 0 -1  0 -1  0| 1  2  3  4  4]
[ 0  0  1  0  2|-1 -1 -3 -4 -4]
[ 0  0  0 -1  0| 1  1  2  2  2]
sage: Bext.mutate(2);Bext
[ 0  1  0  0  0| 0 -1 -1 -2 -2]
[-1  0 -1  0  0| 0  1  2  3  2]
[ 0  1  0  1  0|-1 -2 -3 -4 -4]
[ 0  0 -1  0  2| 0  1  0  0  0]
[ 0  0  0 -1  0| 1  1  2  2  2]
sage: Bext.mutate(1);Bext
[ 0 -1  0  0  0| 0  0  1  1  0]
[ 1  0  1  0  0| 0 -1 -2 -3 -2]
[ 0 -1  0  1  0|-1 -1 -1 -1 -2]
[ 0  0 -1  0  2| 0  1  0  0  0]
[ 0  0  0 -1  0| 1  1  2  2  2]
sage: Bext.mutate(0);Bext
[ 0  1  0  0  0| 0  0 -1 -1  0]
[-1  0  1  0  0| 0 -1 -1 -2 -2]
[ 0 -1  0  1  0|-1 -1 -1 -1 -2]
[ 0  0 -1  0  2| 0  1  0  0  0]
[ 0  0  0 -1  0| 1  1  2  2  2]
sage: attach('/Users/reading/git/affine_dominance/software/domination4.py')
sage: A=CartanMatrix(['D',4])
....: c=[0,1,2,3]
....: coxnum=6
....: n=0
....: for v in sortables(A,c):
....:     n+=1
....:     if p_lambda_int(B(A,c),lam(A,v),Kc_even(c,coxnum)).dimension()==0:
....:         print(n,v,'yes')
....:     else:
....:         print(v,"FAILURE!")
....:         break
....: 
[0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3] FAILURE!
sage: A=CartanMatrix(['D',4])
....: c=[0,1,2,3]
....: coxnum=8  # artificially large, because I don't want to change Kc_even rig
....: ht now 
....: n=0
....: for v in sortables(A,c):
....:     n+=1
....:     if p_lambda_int(B(A,c),lam(A,v),Kc_even(c,coxnum)).dimension()==0:
....:         print(n,v,'yes')
....:     else:
....:         print(v,"FAILURE!")
....:         break
....: 
[0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3] FAILURE!
sage: A=CartanMatrix(['D',4])
....: c=[0,1,2,3]
....: coxnum=12  # artificially large, because I don't want to change Kc_even ri
....: ght now 
....: n=0
....: for v in sortables(A,c):
....:     n+=1
....:     if p_lambda_int(B(A,c),lam(A,v),Kc_even(c,coxnum)).dimension()==0:
....:         print(n,v,'yes')
....:     else:
....:         print(v,"FAILURE!")
....:         break
....: 
[0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3] FAILURE!
sage: A=CartanMatrix(['D',4])
....: c=[0,1,3,2]
....: coxnum=12  # artificially large, because I don't want to change Kc_even ri
....: ght now 
....: n=0
....: for v in sortables(A,c):
....:     n+=1
....:     if p_lambda_int(B(A,c),lam(A,v),Kc_even(c,coxnum)).dimension()==0:
....:         print(n,v,'yes')
....:     else:
....:         print(v,"FAILURE!")
....:         break
....: 
[0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2] FAILURE!
sage: A
[ 2 -1  0  0]
[-1  2 -1 -1]
[ 0 -1  2  0]
[ 0 -1  0  2]
sage: A=CartanMatrix(['D',4])
....: c=[1,0,2,3]
....: coxnum=12  # artificially large, because I don't want to change Kc_even ri
....: ght now 
....: n=0
....: for v in sortables(A,c):
....:     n+=1
....:     if p_lambda_int(B(A,c),lam(A,v),Kc_even(c,coxnum)).dimension()==0:
....:         print(n,v,'yes')
....:     else:
....:         print(v,"FAILURE!")
....:         break
....: 
[1, 0, 2, 3, 1, 0, 2, 3, 1, 0, 2, 3] FAILURE!
sage: A
[ 2 -1  0  0]
[-1  2 -1 -1]
[ 0 -1  2  0]
[ 0 -1  0  2]
sage: A=CartanMatrix(['A',2])
sage: A
[ 2 -1]
[-1  2]
sage: c=[0,1]
sage: B(A,c)
[ 0  1]
[-1  0]
sage: p_lambda_int(B(A,c),lam(A,[]),[[],[1]])
A 2-dimensional polyhedron in QQ^2 defined as the convex hull of 2 vertices and 1 ray
sage: p_lambda_int(B(A,c),lam(A,[]),[[],[0]])
A 1-dimensional polyhedron in QQ^2 defined as the convex hull of 1 vertex and 1 ray
sage: p_lambda_int(B(A,c),lam(A,[]),[[],[0],[1]])
A 0-dimensional polyhedron in QQ^2 defined as the convex hull of 1 vertex
sage: p_lambda_int(B(A,c),lam(A,[]),[[],[0],[1,0]])
A 0-dimensional polyhedron in QQ^2 defined as the convex hull of 1 vertex
sage: p_lambda_int(B(A,c),lam(A,[]),[[],[0],[0,1,0]])
A 0-dimensional polyhedron in QQ^2 defined as the convex hull of 1 vertex
sage: A
[ 2 -1]
[-1  2]
sage: c
[0, 1]
sage: for v in sortables(A,c[1:]):
....:     print(v)
....: 
....: 
[1]
[]
sage: A=CartanMatrix(['A',3])
sage: c=[0,1,2]
sage: for v in sortables(A,c[1:]):
....:     print(v)
....: 
[1, 2, 1]
[1, 2]
[1]
[2]
[]
sage: for v in sortables(A,c[1:]):
....:     print(v,p_lambda_int(B(A,c)[1:],lam(A,v),Kprefix(c[1:],3)))
....: 
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/special.py:2066, in block_matrix(*args, **kwds)
   2065 try:
-> 2066     (row_heights, col_widths) = _determine_block_matrix_grid(sub_matrices)
   2067 except ValueError as e:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/special.py:1622, in _determine_block_matrix_grid(sub_matrices)
   1621                 elif row_heights[i] != sub_height:
-> 1622                     raise ValueError("incompatible submatrix heights")
   1624 if None in row_heights or None in col_widths:

ValueError: incompatible submatrix heights

During handling of the above exception, another exception occurred:

ValueError                                Traceback (most recent call last)
Cell In [426], line 2
      1 for v in sortables(A,c[Integer(1):]):
----> 2     print(v,p_lambda_int(B(A,c)[Integer(1):],lam(A,v),Kprefix(c[Integer(1):],Integer(3))))

File ~/git/affine_dominance/software/domination4.py:125, in p_lambda_int(B, la, seqs)
    124 def p_lambda_int(B, la, seqs):
--> 125     P = p_lambda_faster(B, la, seqs[0])
    126     for s in seqs:
    127         P = P.intersection(p_lambda_faster(B, la, s))

File ~/git/affine_dominance/software/domination4.py:137, in p_lambda_faster(B, la, seq)
    135 rk = B.rank()
    136 n = B.ncols()
--> 137 B = block_matrix([[B,matrix(la).transpose()]])
    138 for k in seq:
    139     B.mutate(k)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/special.py:2069, in block_matrix(*args, **kwds)
   2067     except ValueError as e:
   2068         if subdivide:
-> 2069             raise ValueError(e)
   2071 if col_widths is None:
   2072     # Try placing the matrices in rows instead
   2073     # (Only if subdivide is False)
   2074     (row_heights, zero_widths, total_width) = _determine_block_matrix_rows(sub_matrices)

ValueError: incompatible submatrix heights
### reloading attached file domination4.py modified at 21:14:53 ###
### reloading attached file domination4.py modified at 21:15:21 ###
sage: for v in sortables(A,c[1:]):
....:     print(v,p_lambda_int(B(A,c)[1:],lam(A,v),Kprefix(c[1:],3)))
....: 
[-1  0  1]
[ 0 -1  0] (3, -1, -1)
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/special.py:2066, in block_matrix(*args, **kwds)
   2065 try:
-> 2066     (row_heights, col_widths) = _determine_block_matrix_grid(sub_matrices)
   2067 except ValueError as e:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/special.py:1622, in _determine_block_matrix_grid(sub_matrices)
   1621                 elif row_heights[i] != sub_height:
-> 1622                     raise ValueError("incompatible submatrix heights")
   1624 if None in row_heights or None in col_widths:

ValueError: incompatible submatrix heights

During handling of the above exception, another exception occurred:

ValueError                                Traceback (most recent call last)
Cell In [427], line 2
      1 for v in sortables(A,c[Integer(1):]):
----> 2     print(v,p_lambda_int(B(A,c)[Integer(1):],lam(A,v),Kprefix(c[Integer(1):],Integer(3))))

File ~/git/affine_dominance/software/domination4.py:125, in p_lambda_int(B, la, seqs)
    124 def p_lambda_int(B, la, seqs):
--> 125     P = p_lambda_faster(B, la, seqs[0])
    126     for s in seqs:
    127         P = P.intersection(p_lambda_faster(B, la, s))

File ~/git/affine_dominance/software/domination4.py:138, in p_lambda_faster(B, la, seq)
    136 n = B.ncols()
    137 print(B,la)
--> 138 B = block_matrix([[B,matrix(la).transpose()]])
    139 for k in seq:
    140     B.mutate(k)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/special.py:2069, in block_matrix(*args, **kwds)
   2067     except ValueError as e:
   2068         if subdivide:
-> 2069             raise ValueError(e)
   2071 if col_widths is None:
   2072     # Try placing the matrices in rows instead
   2073     # (Only if subdivide is False)
   2074     (row_heights, zero_widths, total_width) = _determine_block_matrix_rows(sub_matrices)

ValueError: incompatible submatrix heights
sage: Q=matrix([[1,2,3],[4,5,6],[7,8,9]])
sage: Q
[1 2 3]
[4 5 6]
[7 8 9]
sage: Q[1:]
[4 5 6]
[7 8 9]
sage: for v in sortables(A,c[1:]):
....:     print(v,p_lambda_int(B(A,c)[:,1:],lam(A,v),Kprefix(c[1:],3)))
....: 
[ 1  0]
[ 0  1]
[-1  0] (3, -1, -1)
[ 1  0]
[ 0  1]
[-1  0] (3, -1, -1)
[ 1  0]
[ 0  1]
[-1  0] (3, -1, -1)
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
Cell In [431], line 2
      1 for v in sortables(A,c[Integer(1):]):
----> 2     print(v,p_lambda_int(B(A,c)[:,Integer(1):],lam(A,v),Kprefix(c[Integer(1):],Integer(3))))

File ~/git/affine_dominance/software/domination4.py:127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_faster(B, la, seqs[0])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_faster(B, la, s))
    128     if P.dimension()==0:
    129         break

File ~/git/affine_dominance/software/domination4.py:142, in p_lambda_faster(B, la, seq)
    140     B.mutate(k)
    141 B, la  = B[:,:-1], B[:,-1] 
--> 142 P = Polyhedron(rays=B.columns(),base_ring=QQ).translation(la)
    143 #print("P:   ",P,P.vertices(),P.rays(),P.lines(),"\n")
    144 for k in reversed(seq):

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/constructor.py:768, in Polyhedron(vertices, rays, lines, ieqs, eqns, ambient_dim, base_ring, minimize, verbose, backend, mutable)
    766 if got_Vrep:
    767     Vrep = [vertices, rays, lines]
--> 768 return parent(Vrep, Hrep, convert=convert, verbose=verbose, mutable=mutable)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/parent.pyx:903, in sage.structure.parent.Parent.__call__ (build/cythonized/sage/structure/parent.c:12685)()
    901         return mor._call_(x)
    902     else:
--> 903         return mor._call_with_args(x, args, kwds)
    904 
    905 raise TypeError(_LazyString("No conversion defined from %s to %s", (R, self), {}))

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:182, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_with_args (build/cythonized/sage/structure/coerce_maps.c:7540)()
    180     print(type(C), C)
    181     print(type(C._element_constructor), C._element_constructor)
--> 182 raise
    183 
    184 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:177, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_with_args (build/cythonized/sage/structure/coerce_maps.c:7430)()
    175             return C._element_constructor(x, *args)
    176         else:
--> 177             return C._element_constructor(x, *args, **kwds)
    178 except Exception:
    179     if print_warnings:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:695, in Polyhedra_base._element_constructor_(self, *args, **kwds)
    693     if convert and Vrep:
    694         Vrep = [convert_base_ring(_) for _ in Vrep]
--> 695     return self.element_class(self, Vrep, Hrep, **kwds)
    696 if nargs == 1 and is_Polyhedron(args[0]):
    697     copy = kwds.pop('copy', args[0].parent() is not self)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:174, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    171     lines = tuple(lines)
    173 if vertices or rays or lines:
--> 174     self._init_from_Vrepresentation(vertices, rays, lines, **kwds)
    175 else:
    176     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:99, in Polyhedron_ppl._init_from_Vrepresentation(self, vertices, rays, lines, minimize, verbose)
     72 def _init_from_Vrepresentation(self, vertices, rays, lines, minimize=True, verbose=False):
     73     """
     74     Construct polyhedron from V-representation data.
     75 
   (...)
     97         sage: Polyhedron_ppl._init_from_Vrepresentation(p, [], [], [])
     98     """
---> 99     gs = self._convert_generators_to_ppl(vertices, rays, lines)
    100     if gs.empty():
    101         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'empty')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:477, in Polyhedron_ppl._convert_generators_to_ppl(vertices, rays, lines)
    475     rays = []
    476 for r in rays:
--> 477     gs.insert(Polyhedron_ppl._convert_generator_to_ppl(r, RAY))
    478 if lines is None:
    479     lines = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:442, in Polyhedron_ppl._convert_generator_to_ppl(v, typ)
    440 d = LCM_list([denominator(v_i) for v_i in v])
    441 if d.is_one():
--> 442     return ob(Linear_Expression(v, 0))
    443 else:
    444     dv = [ d*v_i for v_i in v ]

File ppl/generator.pyx:205, in ppl.generator.Generator.ray()

File ppl/generator.pyx:201, in ppl.generator.Generator.ray()

ValueError: PPL::ray(e):
e == 0, but the origin cannot be a ray.
sage: B(A,c)
[ 0  1  0]
[-1  0  1]
[ 0 -1  0]
sage: B(A,c)[:,1:]
[ 1  0]
[ 0  1]
[-1  0]
sage: for v in sortables(A,c[1:]):
....:     print(v,B(A,c)[:,1:],lam(A,v),Kprefix(c[1:],3))
....: 
[1, 2, 1] [ 1  0]
[ 0  1]
[-1  0] (3, -1, -1) [[], [1], [1, 2], [1, 2, 1], [1, 2, 1, 2], [1, 2, 1, 2, 1], [1, 2, 1, 2, 1, 2], [1, 2, 1, 2, 1, 2, 1], [1, 2, 1, 2, 1, 2, 1, 2], [1, 2, 1, 2, 1, 2, 1, 2, 1]]
[1, 2] [ 1  0]
[ 0  1]
[-1  0] (3, -2, 1) [[], [1], [1, 2], [1, 2, 1], [1, 2, 1, 2], [1, 2, 1, 2, 1], [1, 2, 1, 2, 1, 2], [1, 2, 1, 2, 1, 2, 1], [1, 2, 1, 2, 1, 2, 1, 2], [1, 2, 1, 2, 1, 2, 1, 2, 1]]
[1] [ 1  0]
[ 0  1]
[-1  0] (2, -1, 2) [[], [1], [1, 2], [1, 2, 1], [1, 2, 1, 2], [1, 2, 1, 2, 1], [1, 2, 1, 2, 1, 2], [1, 2, 1, 2, 1, 2, 1], [1, 2, 1, 2, 1, 2, 1, 2], [1, 2, 1, 2, 1, 2, 1, 2, 1]]
[2] [ 1  0]
[ 0  1]
[-1  0] (1, 2, -1) [[], [1], [1, 2], [1, 2, 1], [1, 2, 1, 2], [1, 2, 1, 2, 1], [1, 2, 1, 2, 1, 2], [1, 2, 1, 2, 1, 2, 1], [1, 2, 1, 2, 1, 2, 1, 2], [1, 2, 1, 2, 1, 2, 1, 2, 1]]
[] [ 1  0]
[ 0  1]
[-1  0] (1, 1, 1) [[], [1], [1, 2], [1, 2, 1], [1, 2, 1, 2], [1, 2, 1, 2, 1], [1, 2, 1, 2, 1, 2], [1, 2, 1, 2, 1, 2, 1], [1, 2, 1, 2, 1, 2, 1, 2], [1, 2, 1, 2, 1, 2, 1, 2, 1]]
sage: for v in sortables(A,c[1:]):
....:     print(B(A,c)[:,1:],lam(A,v))
....: 
[ 1  0]
[ 0  1]
[-1  0] (3, -1, -1)
[ 1  0]
[ 0  1]
[-1  0] (3, -2, 1)
[ 1  0]
[ 0  1]
[-1  0] (2, -1, 2)
[ 1  0]
[ 0  1]
[-1  0] (1, 2, -1)
[ 1  0]
[ 0  1]
[-1  0] (1, 1, 1)
sage: for v in sortables(A,c[1:]):
....:     print(v,p_lambda_int(B(A,c)[:,1:],lam(A,v),Kprefix(c[1:],3)))
....: 
[ 1  0]
[ 0  1]
[-1  0] (3, -1, -1)
[ 1  0]
[ 0  1]
[-1  0] (3, -1, -1)
[ 1  0]
[ 0  1]
[-1  0] (3, -1, -1)
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
Cell In [436], line 2
      1 for v in sortables(A,c[Integer(1):]):
----> 2     print(v,p_lambda_int(B(A,c)[:,Integer(1):],lam(A,v),Kprefix(c[Integer(1):],Integer(3))))

File ~/git/affine_dominance/software/domination4.py:127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_faster(B, la, seqs[0])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_faster(B, la, s))
    128     if P.dimension()==0:
    129         break

File ~/git/affine_dominance/software/domination4.py:142, in p_lambda_faster(B, la, seq)
    140     B.mutate(k)
    141 B, la  = B[:,:-1], B[:,-1] 
--> 142 P = Polyhedron(rays=B.columns(),base_ring=QQ).translation(la)
    143 #print("P:   ",P,P.vertices(),P.rays(),P.lines(),"\n")
    144 for k in reversed(seq):

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/constructor.py:768, in Polyhedron(vertices, rays, lines, ieqs, eqns, ambient_dim, base_ring, minimize, verbose, backend, mutable)
    766 if got_Vrep:
    767     Vrep = [vertices, rays, lines]
--> 768 return parent(Vrep, Hrep, convert=convert, verbose=verbose, mutable=mutable)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/parent.pyx:903, in sage.structure.parent.Parent.__call__ (build/cythonized/sage/structure/parent.c:12685)()
    901         return mor._call_(x)
    902     else:
--> 903         return mor._call_with_args(x, args, kwds)
    904 
    905 raise TypeError(_LazyString("No conversion defined from %s to %s", (R, self), {}))

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:182, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_with_args (build/cythonized/sage/structure/coerce_maps.c:7540)()
    180     print(type(C), C)
    181     print(type(C._element_constructor), C._element_constructor)
--> 182 raise
    183 
    184 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:177, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_with_args (build/cythonized/sage/structure/coerce_maps.c:7430)()
    175             return C._element_constructor(x, *args)
    176         else:
--> 177             return C._element_constructor(x, *args, **kwds)
    178 except Exception:
    179     if print_warnings:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:695, in Polyhedra_base._element_constructor_(self, *args, **kwds)
    693     if convert and Vrep:
    694         Vrep = [convert_base_ring(_) for _ in Vrep]
--> 695     return self.element_class(self, Vrep, Hrep, **kwds)
    696 if nargs == 1 and is_Polyhedron(args[0]):
    697     copy = kwds.pop('copy', args[0].parent() is not self)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:174, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    171     lines = tuple(lines)
    173 if vertices or rays or lines:
--> 174     self._init_from_Vrepresentation(vertices, rays, lines, **kwds)
    175 else:
    176     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:99, in Polyhedron_ppl._init_from_Vrepresentation(self, vertices, rays, lines, minimize, verbose)
     72 def _init_from_Vrepresentation(self, vertices, rays, lines, minimize=True, verbose=False):
     73     """
     74     Construct polyhedron from V-representation data.
     75 
   (...)
     97         sage: Polyhedron_ppl._init_from_Vrepresentation(p, [], [], [])
     98     """
---> 99     gs = self._convert_generators_to_ppl(vertices, rays, lines)
    100     if gs.empty():
    101         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'empty')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:477, in Polyhedron_ppl._convert_generators_to_ppl(vertices, rays, lines)
    475     rays = []
    476 for r in rays:
--> 477     gs.insert(Polyhedron_ppl._convert_generator_to_ppl(r, RAY))
    478 if lines is None:
    479     lines = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:442, in Polyhedron_ppl._convert_generator_to_ppl(v, typ)
    440 d = LCM_list([denominator(v_i) for v_i in v])
    441 if d.is_one():
--> 442     return ob(Linear_Expression(v, 0))
    443 else:
    444     dv = [ d*v_i for v_i in v ]

File ppl/generator.pyx:205, in ppl.generator.Generator.ray()

File ppl/generator.pyx:201, in ppl.generator.Generator.ray()

ValueError: PPL::ray(e):
e == 0, but the origin cannot be a ray.
sage: B(A,c)[:,1:].columns()
[(1, 0, -1), (0, 1, 0)]
sage: for v in sortables(A,c[1:]):
....:     print(v,p_lambda_int(B(A,c)[:,1:],lam(A,v),Kprefix(c[1:],3)))
....: 
[ 1  0]
[ 0  1]
[-1  0] (3, -1, -1)
[ 1  0]
[ 0  1]
[-1  0] (3, -1, -1)
[ 1  0]
[ 0  1]
[-1  0] (3, -1, -1)
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
Cell In [438], line 2
      1 for v in sortables(A,c[Integer(1):]):
----> 2     print(v,p_lambda_int(B(A,c)[:,Integer(1):],lam(A,v),Kprefix(c[Integer(1):],Integer(3))))

File ~/git/affine_dominance/software/domination4.py:127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_faster(B, la, seqs[0])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_faster(B, la, s))
    128     if P.dimension()==0:
    129         break

File ~/git/affine_dominance/software/domination4.py:142, in p_lambda_faster(B, la, seq)
    140     B.mutate(k)
    141 B, la  = B[:,:-1], B[:,-1] 
--> 142 P = Polyhedron(rays=B.columns(),base_ring=QQ).translation(la)
    143 #print("P:   ",P,P.vertices(),P.rays(),P.lines(),"\n")
    144 for k in reversed(seq):

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/constructor.py:768, in Polyhedron(vertices, rays, lines, ieqs, eqns, ambient_dim, base_ring, minimize, verbose, backend, mutable)
    766 if got_Vrep:
    767     Vrep = [vertices, rays, lines]
--> 768 return parent(Vrep, Hrep, convert=convert, verbose=verbose, mutable=mutable)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/parent.pyx:903, in sage.structure.parent.Parent.__call__ (build/cythonized/sage/structure/parent.c:12685)()
    901         return mor._call_(x)
    902     else:
--> 903         return mor._call_with_args(x, args, kwds)
    904 
    905 raise TypeError(_LazyString("No conversion defined from %s to %s", (R, self), {}))

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:182, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_with_args (build/cythonized/sage/structure/coerce_maps.c:7540)()
    180     print(type(C), C)
    181     print(type(C._element_constructor), C._element_constructor)
--> 182 raise
    183 
    184 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:177, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_with_args (build/cythonized/sage/structure/coerce_maps.c:7430)()
    175             return C._element_constructor(x, *args)
    176         else:
--> 177             return C._element_constructor(x, *args, **kwds)
    178 except Exception:
    179     if print_warnings:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:695, in Polyhedra_base._element_constructor_(self, *args, **kwds)
    693     if convert and Vrep:
    694         Vrep = [convert_base_ring(_) for _ in Vrep]
--> 695     return self.element_class(self, Vrep, Hrep, **kwds)
    696 if nargs == 1 and is_Polyhedron(args[0]):
    697     copy = kwds.pop('copy', args[0].parent() is not self)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:174, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    171     lines = tuple(lines)
    173 if vertices or rays or lines:
--> 174     self._init_from_Vrepresentation(vertices, rays, lines, **kwds)
    175 else:
    176     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:99, in Polyhedron_ppl._init_from_Vrepresentation(self, vertices, rays, lines, minimize, verbose)
     72 def _init_from_Vrepresentation(self, vertices, rays, lines, minimize=True, verbose=False):
     73     """
     74     Construct polyhedron from V-representation data.
     75 
   (...)
     97         sage: Polyhedron_ppl._init_from_Vrepresentation(p, [], [], [])
     98     """
---> 99     gs = self._convert_generators_to_ppl(vertices, rays, lines)
    100     if gs.empty():
    101         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'empty')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:477, in Polyhedron_ppl._convert_generators_to_ppl(vertices, rays, lines)
    475     rays = []
    476 for r in rays:
--> 477     gs.insert(Polyhedron_ppl._convert_generator_to_ppl(r, RAY))
    478 if lines is None:
    479     lines = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:442, in Polyhedron_ppl._convert_generator_to_ppl(v, typ)
    440 d = LCM_list([denominator(v_i) for v_i in v])
    441 if d.is_one():
--> 442     return ob(Linear_Expression(v, 0))
    443 else:
    444     dv = [ d*v_i for v_i in v ]

File ppl/generator.pyx:205, in ppl.generator.Generator.ray()

File ppl/generator.pyx:201, in ppl.generator.Generator.ray()

ValueError: PPL::ray(e):
e == 0, but the origin cannot be a ray.
sage: p_lambda_int(B(A,c)[:,1:],lam(A,[]),Kprefix(c[1:],3))
[ 1  0]
[ 0  1]
[-1  0] (1, 1, 1)
[ 1  0]
[ 0  1]
[-1  0] (1, 1, 1)
[ 1  0]
[ 0  1]
[-1  0] (1, 1, 1)
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
Cell In [439], line 1
----> 1 p_lambda_int(B(A,c)[:,Integer(1):],lam(A,[]),Kprefix(c[Integer(1):],Integer(3)))

File ~/git/affine_dominance/software/domination4.py:127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_faster(B, la, seqs[0])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_faster(B, la, s))
    128     if P.dimension()==0:
    129         break

File ~/git/affine_dominance/software/domination4.py:142, in p_lambda_faster(B, la, seq)
    140     B.mutate(k)
    141 B, la  = B[:,:-1], B[:,-1] 
--> 142 P = Polyhedron(rays=B.columns(),base_ring=QQ).translation(la)
    143 #print("P:   ",P,P.vertices(),P.rays(),P.lines(),"\n")
    144 for k in reversed(seq):

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/constructor.py:768, in Polyhedron(vertices, rays, lines, ieqs, eqns, ambient_dim, base_ring, minimize, verbose, backend, mutable)
    766 if got_Vrep:
    767     Vrep = [vertices, rays, lines]
--> 768 return parent(Vrep, Hrep, convert=convert, verbose=verbose, mutable=mutable)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/parent.pyx:903, in sage.structure.parent.Parent.__call__ (build/cythonized/sage/structure/parent.c:12685)()
    901         return mor._call_(x)
    902     else:
--> 903         return mor._call_with_args(x, args, kwds)
    904 
    905 raise TypeError(_LazyString("No conversion defined from %s to %s", (R, self), {}))

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:182, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_with_args (build/cythonized/sage/structure/coerce_maps.c:7540)()
    180     print(type(C), C)
    181     print(type(C._element_constructor), C._element_constructor)
--> 182 raise
    183 
    184 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:177, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_with_args (build/cythonized/sage/structure/coerce_maps.c:7430)()
    175             return C._element_constructor(x, *args)
    176         else:
--> 177             return C._element_constructor(x, *args, **kwds)
    178 except Exception:
    179     if print_warnings:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:695, in Polyhedra_base._element_constructor_(self, *args, **kwds)
    693     if convert and Vrep:
    694         Vrep = [convert_base_ring(_) for _ in Vrep]
--> 695     return self.element_class(self, Vrep, Hrep, **kwds)
    696 if nargs == 1 and is_Polyhedron(args[0]):
    697     copy = kwds.pop('copy', args[0].parent() is not self)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:174, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    171     lines = tuple(lines)
    173 if vertices or rays or lines:
--> 174     self._init_from_Vrepresentation(vertices, rays, lines, **kwds)
    175 else:
    176     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:99, in Polyhedron_ppl._init_from_Vrepresentation(self, vertices, rays, lines, minimize, verbose)
     72 def _init_from_Vrepresentation(self, vertices, rays, lines, minimize=True, verbose=False):
     73     """
     74     Construct polyhedron from V-representation data.
     75 
   (...)
     97         sage: Polyhedron_ppl._init_from_Vrepresentation(p, [], [], [])
     98     """
---> 99     gs = self._convert_generators_to_ppl(vertices, rays, lines)
    100     if gs.empty():
    101         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'empty')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:477, in Polyhedron_ppl._convert_generators_to_ppl(vertices, rays, lines)
    475     rays = []
    476 for r in rays:
--> 477     gs.insert(Polyhedron_ppl._convert_generator_to_ppl(r, RAY))
    478 if lines is None:
    479     lines = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:442, in Polyhedron_ppl._convert_generator_to_ppl(v, typ)
    440 d = LCM_list([denominator(v_i) for v_i in v])
    441 if d.is_one():
--> 442     return ob(Linear_Expression(v, 0))
    443 else:
    444     dv = [ d*v_i for v_i in v ]

File ppl/generator.pyx:205, in ppl.generator.Generator.ray()

File ppl/generator.pyx:201, in ppl.generator.Generator.ray()

ValueError: PPL::ray(e):
e == 0, but the origin cannot be a ray.
sage: p_lambda_int(B(A,c)[:,1:],lam(A,[]),[[]])
[ 1  0]
[ 0  1]
[-1  0] (1, 1, 1)
[ 1  0]
[ 0  1]
[-1  0] (1, 1, 1)
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
sage: for v in sortables(A,c[1:]):
....:     print(v,p_lambda_int(B(A,c)[:,1:],lam(A,v),Kprefix(c[1:],3)))
....: 
[ 1  0]
[ 0  1]
[-1  0] (3, -1, -1)
[ 1  0]
[ 0  1]
[-1  0] (3, -1, -1)
[ 1  0]
[ 0  1]
[-1  0] (3, -1, -1)
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
Cell In [441], line 2
      1 for v in sortables(A,c[Integer(1):]):
----> 2     print(v,p_lambda_int(B(A,c)[:,Integer(1):],lam(A,v),Kprefix(c[Integer(1):],Integer(3))))

File ~/git/affine_dominance/software/domination4.py:127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_faster(B, la, seqs[0])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_faster(B, la, s))
    128     if P.dimension()==0:
    129         break

File ~/git/affine_dominance/software/domination4.py:142, in p_lambda_faster(B, la, seq)
    140     B.mutate(k)
    141 B, la  = B[:,:-1], B[:,-1] 
--> 142 P = Polyhedron(rays=B.columns(),base_ring=QQ).translation(la)
    143 #print("P:   ",P,P.vertices(),P.rays(),P.lines(),"\n")
    144 for k in reversed(seq):

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/constructor.py:768, in Polyhedron(vertices, rays, lines, ieqs, eqns, ambient_dim, base_ring, minimize, verbose, backend, mutable)
    766 if got_Vrep:
    767     Vrep = [vertices, rays, lines]
--> 768 return parent(Vrep, Hrep, convert=convert, verbose=verbose, mutable=mutable)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/parent.pyx:903, in sage.structure.parent.Parent.__call__ (build/cythonized/sage/structure/parent.c:12685)()
    901         return mor._call_(x)
    902     else:
--> 903         return mor._call_with_args(x, args, kwds)
    904 
    905 raise TypeError(_LazyString("No conversion defined from %s to %s", (R, self), {}))

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:182, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_with_args (build/cythonized/sage/structure/coerce_maps.c:7540)()
    180     print(type(C), C)
    181     print(type(C._element_constructor), C._element_constructor)
--> 182 raise
    183 
    184 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:177, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_with_args (build/cythonized/sage/structure/coerce_maps.c:7430)()
    175             return C._element_constructor(x, *args)
    176         else:
--> 177             return C._element_constructor(x, *args, **kwds)
    178 except Exception:
    179     if print_warnings:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:695, in Polyhedra_base._element_constructor_(self, *args, **kwds)
    693     if convert and Vrep:
    694         Vrep = [convert_base_ring(_) for _ in Vrep]
--> 695     return self.element_class(self, Vrep, Hrep, **kwds)
    696 if nargs == 1 and is_Polyhedron(args[0]):
    697     copy = kwds.pop('copy', args[0].parent() is not self)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:174, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    171     lines = tuple(lines)
    173 if vertices or rays or lines:
--> 174     self._init_from_Vrepresentation(vertices, rays, lines, **kwds)
    175 else:
    176     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:99, in Polyhedron_ppl._init_from_Vrepresentation(self, vertices, rays, lines, minimize, verbose)
     72 def _init_from_Vrepresentation(self, vertices, rays, lines, minimize=True, verbose=False):
     73     """
     74     Construct polyhedron from V-representation data.
     75 
   (...)
     97         sage: Polyhedron_ppl._init_from_Vrepresentation(p, [], [], [])
     98     """
---> 99     gs = self._convert_generators_to_ppl(vertices, rays, lines)
    100     if gs.empty():
    101         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'empty')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:477, in Polyhedron_ppl._convert_generators_to_ppl(vertices, rays, lines)
    475     rays = []
    476 for r in rays:
--> 477     gs.insert(Polyhedron_ppl._convert_generator_to_ppl(r, RAY))
    478 if lines is None:
    479     lines = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:442, in Polyhedron_ppl._convert_generator_to_ppl(v, typ)
    440 d = LCM_list([denominator(v_i) for v_i in v])
    441 if d.is_one():
--> 442     return ob(Linear_Expression(v, 0))
    443 else:
    444     dv = [ d*v_i for v_i in v ]

File ppl/generator.pyx:205, in ppl.generator.Generator.ray()

File ppl/generator.pyx:201, in ppl.generator.Generator.ray()

ValueError: PPL::ray(e):
e == 0, but the origin cannot be a ray.
sage: for v in sortables(A,c[1:]):
....:     c_shift=list(c[i]-1 for i in range(1,len(c)))
....:     print(v,p_lambda_int(B(A,c)[:,1:],lam(A,v),Kprefix(c_shift,3)))
....: 
[ 1  0]
[ 0  1]
[-1  0] (3, -1, -1)
[ 1  0]
[ 0  1]
[-1  0] (3, -1, -1)
[ 1  0]
[ 0  1]
[-1  0] (3, -1, -1)
[ 1  0]
[ 0  1]
[-1  0] (3, -1, -1)
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
Cell In [442], line 3
      1 for v in sortables(A,c[Integer(1):]):
      2     c_shift=list(c[i]-Integer(1) for i in range(Integer(1),len(c)))
----> 3     print(v,p_lambda_int(B(A,c)[:,Integer(1):],lam(A,v),Kprefix(c_shift,Integer(3))))

File ~/git/affine_dominance/software/domination4.py:127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_faster(B, la, seqs[0])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_faster(B, la, s))
    128     if P.dimension()==0:
    129         break

File ~/git/affine_dominance/software/domination4.py:142, in p_lambda_faster(B, la, seq)
    140     B.mutate(k)
    141 B, la  = B[:,:-1], B[:,-1] 
--> 142 P = Polyhedron(rays=B.columns(),base_ring=QQ).translation(la)
    143 #print("P:   ",P,P.vertices(),P.rays(),P.lines(),"\n")
    144 for k in reversed(seq):

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/constructor.py:768, in Polyhedron(vertices, rays, lines, ieqs, eqns, ambient_dim, base_ring, minimize, verbose, backend, mutable)
    766 if got_Vrep:
    767     Vrep = [vertices, rays, lines]
--> 768 return parent(Vrep, Hrep, convert=convert, verbose=verbose, mutable=mutable)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/parent.pyx:903, in sage.structure.parent.Parent.__call__ (build/cythonized/sage/structure/parent.c:12685)()
    901         return mor._call_(x)
    902     else:
--> 903         return mor._call_with_args(x, args, kwds)
    904 
    905 raise TypeError(_LazyString("No conversion defined from %s to %s", (R, self), {}))

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:182, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_with_args (build/cythonized/sage/structure/coerce_maps.c:7540)()
    180     print(type(C), C)
    181     print(type(C._element_constructor), C._element_constructor)
--> 182 raise
    183 
    184 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:177, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_with_args (build/cythonized/sage/structure/coerce_maps.c:7430)()
    175             return C._element_constructor(x, *args)
    176         else:
--> 177             return C._element_constructor(x, *args, **kwds)
    178 except Exception:
    179     if print_warnings:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:695, in Polyhedra_base._element_constructor_(self, *args, **kwds)
    693     if convert and Vrep:
    694         Vrep = [convert_base_ring(_) for _ in Vrep]
--> 695     return self.element_class(self, Vrep, Hrep, **kwds)
    696 if nargs == 1 and is_Polyhedron(args[0]):
    697     copy = kwds.pop('copy', args[0].parent() is not self)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:174, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    171     lines = tuple(lines)
    173 if vertices or rays or lines:
--> 174     self._init_from_Vrepresentation(vertices, rays, lines, **kwds)
    175 else:
    176     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:99, in Polyhedron_ppl._init_from_Vrepresentation(self, vertices, rays, lines, minimize, verbose)
     72 def _init_from_Vrepresentation(self, vertices, rays, lines, minimize=True, verbose=False):
     73     """
     74     Construct polyhedron from V-representation data.
     75 
   (...)
     97         sage: Polyhedron_ppl._init_from_Vrepresentation(p, [], [], [])
     98     """
---> 99     gs = self._convert_generators_to_ppl(vertices, rays, lines)
    100     if gs.empty():
    101         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'empty')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:477, in Polyhedron_ppl._convert_generators_to_ppl(vertices, rays, lines)
    475     rays = []
    476 for r in rays:
--> 477     gs.insert(Polyhedron_ppl._convert_generator_to_ppl(r, RAY))
    478 if lines is None:
    479     lines = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:442, in Polyhedron_ppl._convert_generator_to_ppl(v, typ)
    440 d = LCM_list([denominator(v_i) for v_i in v])
    441 if d.is_one():
--> 442     return ob(Linear_Expression(v, 0))
    443 else:
    444     dv = [ d*v_i for v_i in v ]

File ppl/generator.pyx:205, in ppl.generator.Generator.ray()

File ppl/generator.pyx:201, in ppl.generator.Generator.ray()

ValueError: PPL::ray(e):
e == 0, but the origin cannot be a ray.
sage: c
[0, 1, 2]
sage: for v in sortables(A,c[1:]):
....:     print(v,p_lambda_int(B(A,c)[:,1:],lam(A,v),Kprefix(c_shift,3)))
....: 
[ 1  0]
[ 0  1]
[-1  0] (3, -1, -1)
[ 1  0]
[ 0  1]
[-1  0] (3, -1, -1)
[ 1  0]
[ 0  1]
[-1  0] (3, -1, -1)
[ 1  0]
[ 0  1]
[-1  0] (3, -1, -1)
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
Cell In [444], line 2
      1 for v in sortables(A,c[Integer(1):]):
----> 2     print(v,p_lambda_int(B(A,c)[:,Integer(1):],lam(A,v),Kprefix(c_shift,Integer(3))))

File ~/git/affine_dominance/software/domination4.py:127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_faster(B, la, seqs[0])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_faster(B, la, s))
    128     if P.dimension()==0:
    129         break

File ~/git/affine_dominance/software/domination4.py:142, in p_lambda_faster(B, la, seq)
    140     B.mutate(k)
    141 B, la  = B[:,:-1], B[:,-1] 
--> 142 P = Polyhedron(rays=B.columns(),base_ring=QQ).translation(la)
    143 #print("P:   ",P,P.vertices(),P.rays(),P.lines(),"\n")
    144 for k in reversed(seq):

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/constructor.py:768, in Polyhedron(vertices, rays, lines, ieqs, eqns, ambient_dim, base_ring, minimize, verbose, backend, mutable)
    766 if got_Vrep:
    767     Vrep = [vertices, rays, lines]
--> 768 return parent(Vrep, Hrep, convert=convert, verbose=verbose, mutable=mutable)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/parent.pyx:903, in sage.structure.parent.Parent.__call__ (build/cythonized/sage/structure/parent.c:12685)()
    901         return mor._call_(x)
    902     else:
--> 903         return mor._call_with_args(x, args, kwds)
    904 
    905 raise TypeError(_LazyString("No conversion defined from %s to %s", (R, self), {}))

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:182, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_with_args (build/cythonized/sage/structure/coerce_maps.c:7540)()
    180     print(type(C), C)
    181     print(type(C._element_constructor), C._element_constructor)
--> 182 raise
    183 
    184 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:177, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_with_args (build/cythonized/sage/structure/coerce_maps.c:7430)()
    175             return C._element_constructor(x, *args)
    176         else:
--> 177             return C._element_constructor(x, *args, **kwds)
    178 except Exception:
    179     if print_warnings:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:695, in Polyhedra_base._element_constructor_(self, *args, **kwds)
    693     if convert and Vrep:
    694         Vrep = [convert_base_ring(_) for _ in Vrep]
--> 695     return self.element_class(self, Vrep, Hrep, **kwds)
    696 if nargs == 1 and is_Polyhedron(args[0]):
    697     copy = kwds.pop('copy', args[0].parent() is not self)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:174, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    171     lines = tuple(lines)
    173 if vertices or rays or lines:
--> 174     self._init_from_Vrepresentation(vertices, rays, lines, **kwds)
    175 else:
    176     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:99, in Polyhedron_ppl._init_from_Vrepresentation(self, vertices, rays, lines, minimize, verbose)
     72 def _init_from_Vrepresentation(self, vertices, rays, lines, minimize=True, verbose=False):
     73     """
     74     Construct polyhedron from V-representation data.
     75 
   (...)
     97         sage: Polyhedron_ppl._init_from_Vrepresentation(p, [], [], [])
     98     """
---> 99     gs = self._convert_generators_to_ppl(vertices, rays, lines)
    100     if gs.empty():
    101         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'empty')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:477, in Polyhedron_ppl._convert_generators_to_ppl(vertices, rays, lines)
    475     rays = []
    476 for r in rays:
--> 477     gs.insert(Polyhedron_ppl._convert_generator_to_ppl(r, RAY))
    478 if lines is None:
    479     lines = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:442, in Polyhedron_ppl._convert_generator_to_ppl(v, typ)
    440 d = LCM_list([denominator(v_i) for v_i in v])
    441 if d.is_one():
--> 442     return ob(Linear_Expression(v, 0))
    443 else:
    444     dv = [ d*v_i for v_i in v ]

File ppl/generator.pyx:205, in ppl.generator.Generator.ray()

File ppl/generator.pyx:201, in ppl.generator.Generator.ray()

ValueError: PPL::ray(e):
e == 0, but the origin cannot be a ray.
sage: c_shift
[0, 1]
sage: for v in sortables(A,c[1:]):
....:     print(v,p_lambda_int(B(A,c)[:,1:],lam(A,v),Kprefix(c_shift,3)))
....: 
[ 1  0]
[ 0  1]
[-1  0] (3, -1, -1)
[ 1  0]
[ 0  1]
[-1  0] (3, -1, -1)
[ 1  0]
[ 0  1]
[-1  0] (3, -1, -1)
[ 1  0]
[ 0  1]
[-1  0] (3, -1, -1)
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
Cell In [446], line 2
      1 for v in sortables(A,c[Integer(1):]):
----> 2     print(v,p_lambda_int(B(A,c)[:,Integer(1):],lam(A,v),Kprefix(c_shift,Integer(3))))

File ~/git/affine_dominance/software/domination4.py:127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_faster(B, la, seqs[0])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_faster(B, la, s))
    128     if P.dimension()==0:
    129         break

File ~/git/affine_dominance/software/domination4.py:142, in p_lambda_faster(B, la, seq)
    140     B.mutate(k)
    141 B, la  = B[:,:-1], B[:,-1] 
--> 142 P = Polyhedron(rays=B.columns(),base_ring=QQ).translation(la)
    143 #print("P:   ",P,P.vertices(),P.rays(),P.lines(),"\n")
    144 for k in reversed(seq):

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/constructor.py:768, in Polyhedron(vertices, rays, lines, ieqs, eqns, ambient_dim, base_ring, minimize, verbose, backend, mutable)
    766 if got_Vrep:
    767     Vrep = [vertices, rays, lines]
--> 768 return parent(Vrep, Hrep, convert=convert, verbose=verbose, mutable=mutable)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/parent.pyx:903, in sage.structure.parent.Parent.__call__ (build/cythonized/sage/structure/parent.c:12685)()
    901         return mor._call_(x)
    902     else:
--> 903         return mor._call_with_args(x, args, kwds)
    904 
    905 raise TypeError(_LazyString("No conversion defined from %s to %s", (R, self), {}))

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:182, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_with_args (build/cythonized/sage/structure/coerce_maps.c:7540)()
    180     print(type(C), C)
    181     print(type(C._element_constructor), C._element_constructor)
--> 182 raise
    183 
    184 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:177, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_with_args (build/cythonized/sage/structure/coerce_maps.c:7430)()
    175             return C._element_constructor(x, *args)
    176         else:
--> 177             return C._element_constructor(x, *args, **kwds)
    178 except Exception:
    179     if print_warnings:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:695, in Polyhedra_base._element_constructor_(self, *args, **kwds)
    693     if convert and Vrep:
    694         Vrep = [convert_base_ring(_) for _ in Vrep]
--> 695     return self.element_class(self, Vrep, Hrep, **kwds)
    696 if nargs == 1 and is_Polyhedron(args[0]):
    697     copy = kwds.pop('copy', args[0].parent() is not self)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:174, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    171     lines = tuple(lines)
    173 if vertices or rays or lines:
--> 174     self._init_from_Vrepresentation(vertices, rays, lines, **kwds)
    175 else:
    176     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:99, in Polyhedron_ppl._init_from_Vrepresentation(self, vertices, rays, lines, minimize, verbose)
     72 def _init_from_Vrepresentation(self, vertices, rays, lines, minimize=True, verbose=False):
     73     """
     74     Construct polyhedron from V-representation data.
     75 
   (...)
     97         sage: Polyhedron_ppl._init_from_Vrepresentation(p, [], [], [])
     98     """
---> 99     gs = self._convert_generators_to_ppl(vertices, rays, lines)
    100     if gs.empty():
    101         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'empty')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:477, in Polyhedron_ppl._convert_generators_to_ppl(vertices, rays, lines)
    475     rays = []
    476 for r in rays:
--> 477     gs.insert(Polyhedron_ppl._convert_generator_to_ppl(r, RAY))
    478 if lines is None:
    479     lines = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:442, in Polyhedron_ppl._convert_generator_to_ppl(v, typ)
    440 d = LCM_list([denominator(v_i) for v_i in v])
    441 if d.is_one():
--> 442     return ob(Linear_Expression(v, 0))
    443 else:
    444     dv = [ d*v_i for v_i in v ]

File ppl/generator.pyx:205, in ppl.generator.Generator.ray()

File ppl/generator.pyx:201, in ppl.generator.Generator.ray()

ValueError: PPL::ray(e):
e == 0, but the origin cannot be a ray.
sage: for v in sortables(A,c[1:]):
....:     print(v,p_lambda_int(B(A,c)[:,1:],lam(A,v),Kprefix(c,3)))
....: 
[ 1  0]
[ 0  1]
[-1  0] (3, -1, -1)
[ 1  0]
[ 0  1]
[-1  0] (3, -1, -1)
[ 1  0]
[ 0  1]
[-1  0] (3, -1, -1)
[ 1  0]
[ 0  1]
[-1  0] (3, -1, -1)
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
Cell In [447], line 2
      1 for v in sortables(A,c[Integer(1):]):
----> 2     print(v,p_lambda_int(B(A,c)[:,Integer(1):],lam(A,v),Kprefix(c,Integer(3))))

File ~/git/affine_dominance/software/domination4.py:127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_faster(B, la, seqs[0])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_faster(B, la, s))
    128     if P.dimension()==0:
    129         break

File ~/git/affine_dominance/software/domination4.py:142, in p_lambda_faster(B, la, seq)
    140     B.mutate(k)
    141 B, la  = B[:,:-1], B[:,-1] 
--> 142 P = Polyhedron(rays=B.columns(),base_ring=QQ).translation(la)
    143 #print("P:   ",P,P.vertices(),P.rays(),P.lines(),"\n")
    144 for k in reversed(seq):

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/constructor.py:768, in Polyhedron(vertices, rays, lines, ieqs, eqns, ambient_dim, base_ring, minimize, verbose, backend, mutable)
    766 if got_Vrep:
    767     Vrep = [vertices, rays, lines]
--> 768 return parent(Vrep, Hrep, convert=convert, verbose=verbose, mutable=mutable)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/parent.pyx:903, in sage.structure.parent.Parent.__call__ (build/cythonized/sage/structure/parent.c:12685)()
    901         return mor._call_(x)
    902     else:
--> 903         return mor._call_with_args(x, args, kwds)
    904 
    905 raise TypeError(_LazyString("No conversion defined from %s to %s", (R, self), {}))

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:182, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_with_args (build/cythonized/sage/structure/coerce_maps.c:7540)()
    180     print(type(C), C)
    181     print(type(C._element_constructor), C._element_constructor)
--> 182 raise
    183 
    184 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:177, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_with_args (build/cythonized/sage/structure/coerce_maps.c:7430)()
    175             return C._element_constructor(x, *args)
    176         else:
--> 177             return C._element_constructor(x, *args, **kwds)
    178 except Exception:
    179     if print_warnings:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:695, in Polyhedra_base._element_constructor_(self, *args, **kwds)
    693     if convert and Vrep:
    694         Vrep = [convert_base_ring(_) for _ in Vrep]
--> 695     return self.element_class(self, Vrep, Hrep, **kwds)
    696 if nargs == 1 and is_Polyhedron(args[0]):
    697     copy = kwds.pop('copy', args[0].parent() is not self)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:174, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    171     lines = tuple(lines)
    173 if vertices or rays or lines:
--> 174     self._init_from_Vrepresentation(vertices, rays, lines, **kwds)
    175 else:
    176     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:99, in Polyhedron_ppl._init_from_Vrepresentation(self, vertices, rays, lines, minimize, verbose)
     72 def _init_from_Vrepresentation(self, vertices, rays, lines, minimize=True, verbose=False):
     73     """
     74     Construct polyhedron from V-representation data.
     75 
   (...)
     97         sage: Polyhedron_ppl._init_from_Vrepresentation(p, [], [], [])
     98     """
---> 99     gs = self._convert_generators_to_ppl(vertices, rays, lines)
    100     if gs.empty():
    101         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'empty')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:477, in Polyhedron_ppl._convert_generators_to_ppl(vertices, rays, lines)
    475     rays = []
    476 for r in rays:
--> 477     gs.insert(Polyhedron_ppl._convert_generator_to_ppl(r, RAY))
    478 if lines is None:
    479     lines = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:442, in Polyhedron_ppl._convert_generator_to_ppl(v, typ)
    440 d = LCM_list([denominator(v_i) for v_i in v])
    441 if d.is_one():
--> 442     return ob(Linear_Expression(v, 0))
    443 else:
    444     dv = [ d*v_i for v_i in v ]

File ppl/generator.pyx:205, in ppl.generator.Generator.ray()

File ppl/generator.pyx:201, in ppl.generator.Generator.ray()

ValueError: PPL::ray(e):
e == 0, but the origin cannot be a ray.
sage: for v in sortables(A,c[1:]):
....:     print(v,p_lambda_int(B(A,c)[:,1:],lam(A,v),[[]]))
....: 
[ 1  0]
[ 0  1]
[-1  0] (3, -1, -1)
[ 1  0]
[ 0  1]
[-1  0] (3, -1, -1)
[1, 2, 1] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
[ 1  0]
[ 0  1]
[-1  0] (3, -2, 1)
[ 1  0]
[ 0  1]
[-1  0] (3, -2, 1)
[1, 2] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
[ 1  0]
[ 0  1]
[-1  0] (2, -1, 2)
[ 1  0]
[ 0  1]
[-1  0] (2, -1, 2)
[1] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
[ 1  0]
[ 0  1]
[-1  0] (1, 2, -1)
[ 1  0]
[ 0  1]
[-1  0] (1, 2, -1)
[2] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
[ 1  0]
[ 0  1]
[-1  0] (1, 1, 1)
[ 1  0]
[ 0  1]
[-1  0] (1, 1, 1)
[] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
sage: for v in sortables(A,c[1:]):
....:     print(v,p_lambda_int(B(A,c)[:,1:],lam(A,v),[[],[1]]))
....: 
[ 1  0]
[ 0  1]
[-1  0] (3, -1, -1)
[ 1  0]
[ 0  1]
[-1  0] (3, -1, -1)
[ 1  0]
[ 0  1]
[-1  0] (3, -1, -1)
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
Cell In [449], line 2
      1 for v in sortables(A,c[Integer(1):]):
----> 2     print(v,p_lambda_int(B(A,c)[:,Integer(1):],lam(A,v),[[],[Integer(1)]]))

File ~/git/affine_dominance/software/domination4.py:127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_faster(B, la, seqs[0])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_faster(B, la, s))
    128     if P.dimension()==0:
    129         break

File ~/git/affine_dominance/software/domination4.py:142, in p_lambda_faster(B, la, seq)
    140     B.mutate(k)
    141 B, la  = B[:,:-1], B[:,-1] 
--> 142 P = Polyhedron(rays=B.columns(),base_ring=QQ).translation(la)
    143 #print("P:   ",P,P.vertices(),P.rays(),P.lines(),"\n")
    144 for k in reversed(seq):

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/constructor.py:768, in Polyhedron(vertices, rays, lines, ieqs, eqns, ambient_dim, base_ring, minimize, verbose, backend, mutable)
    766 if got_Vrep:
    767     Vrep = [vertices, rays, lines]
--> 768 return parent(Vrep, Hrep, convert=convert, verbose=verbose, mutable=mutable)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/parent.pyx:903, in sage.structure.parent.Parent.__call__ (build/cythonized/sage/structure/parent.c:12685)()
    901         return mor._call_(x)
    902     else:
--> 903         return mor._call_with_args(x, args, kwds)
    904 
    905 raise TypeError(_LazyString("No conversion defined from %s to %s", (R, self), {}))

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:182, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_with_args (build/cythonized/sage/structure/coerce_maps.c:7540)()
    180     print(type(C), C)
    181     print(type(C._element_constructor), C._element_constructor)
--> 182 raise
    183 
    184 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:177, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_with_args (build/cythonized/sage/structure/coerce_maps.c:7430)()
    175             return C._element_constructor(x, *args)
    176         else:
--> 177             return C._element_constructor(x, *args, **kwds)
    178 except Exception:
    179     if print_warnings:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:695, in Polyhedra_base._element_constructor_(self, *args, **kwds)
    693     if convert and Vrep:
    694         Vrep = [convert_base_ring(_) for _ in Vrep]
--> 695     return self.element_class(self, Vrep, Hrep, **kwds)
    696 if nargs == 1 and is_Polyhedron(args[0]):
    697     copy = kwds.pop('copy', args[0].parent() is not self)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:174, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    171     lines = tuple(lines)
    173 if vertices or rays or lines:
--> 174     self._init_from_Vrepresentation(vertices, rays, lines, **kwds)
    175 else:
    176     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:99, in Polyhedron_ppl._init_from_Vrepresentation(self, vertices, rays, lines, minimize, verbose)
     72 def _init_from_Vrepresentation(self, vertices, rays, lines, minimize=True, verbose=False):
     73     """
     74     Construct polyhedron from V-representation data.
     75 
   (...)
     97         sage: Polyhedron_ppl._init_from_Vrepresentation(p, [], [], [])
     98     """
---> 99     gs = self._convert_generators_to_ppl(vertices, rays, lines)
    100     if gs.empty():
    101         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'empty')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:477, in Polyhedron_ppl._convert_generators_to_ppl(vertices, rays, lines)
    475     rays = []
    476 for r in rays:
--> 477     gs.insert(Polyhedron_ppl._convert_generator_to_ppl(r, RAY))
    478 if lines is None:
    479     lines = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:442, in Polyhedron_ppl._convert_generator_to_ppl(v, typ)
    440 d = LCM_list([denominator(v_i) for v_i in v])
    441 if d.is_one():
--> 442     return ob(Linear_Expression(v, 0))
    443 else:
    444     dv = [ d*v_i for v_i in v ]

File ppl/generator.pyx:205, in ppl.generator.Generator.ray()

File ppl/generator.pyx:201, in ppl.generator.Generator.ray()

ValueError: PPL::ray(e):
e == 0, but the origin cannot be a ray.
sage: for v in sortables(A,c[1:]):
....:     print(v,p_lambda_int(B(A,c)[:,1:],lam(A,v),[[],[1]]))
....: 
[ 1  0]
[ 0  1]
[-1  0] (3, -1, -1)
[ 1  0]
[ 0  1]
[-1  0] (3, -1, -1)
[ 1  0]
[ 0  1]
[-1  0] (3, -1, -1)
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
Cell In [450], line 2
      1 for v in sortables(A,c[Integer(1):]):
----> 2     print(v,p_lambda_int(B(A,c)[:,Integer(1):],lam(A,v),[[],[Integer(1)]]))

File ~/git/affine_dominance/software/domination4.py:127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_faster(B, la, seqs[0])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_faster(B, la, s))
    128     if P.dimension()==0:
    129         break

File ~/git/affine_dominance/software/domination4.py:142, in p_lambda_faster(B, la, seq)
    140     B.mutate(k)
    141 B, la  = B[:,:-1], B[:,-1] 
--> 142 P = Polyhedron(rays=B.columns(),base_ring=QQ).translation(la)
    143 #print("P:   ",P,P.vertices(),P.rays(),P.lines(),"\n")
    144 for k in reversed(seq):

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/constructor.py:768, in Polyhedron(vertices, rays, lines, ieqs, eqns, ambient_dim, base_ring, minimize, verbose, backend, mutable)
    766 if got_Vrep:
    767     Vrep = [vertices, rays, lines]
--> 768 return parent(Vrep, Hrep, convert=convert, verbose=verbose, mutable=mutable)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/parent.pyx:903, in sage.structure.parent.Parent.__call__ (build/cythonized/sage/structure/parent.c:12685)()
    901         return mor._call_(x)
    902     else:
--> 903         return mor._call_with_args(x, args, kwds)
    904 
    905 raise TypeError(_LazyString("No conversion defined from %s to %s", (R, self), {}))

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:182, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_with_args (build/cythonized/sage/structure/coerce_maps.c:7540)()
    180     print(type(C), C)
    181     print(type(C._element_constructor), C._element_constructor)
--> 182 raise
    183 
    184 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:177, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_with_args (build/cythonized/sage/structure/coerce_maps.c:7430)()
    175             return C._element_constructor(x, *args)
    176         else:
--> 177             return C._element_constructor(x, *args, **kwds)
    178 except Exception:
    179     if print_warnings:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:695, in Polyhedra_base._element_constructor_(self, *args, **kwds)
    693     if convert and Vrep:
    694         Vrep = [convert_base_ring(_) for _ in Vrep]
--> 695     return self.element_class(self, Vrep, Hrep, **kwds)
    696 if nargs == 1 and is_Polyhedron(args[0]):
    697     copy = kwds.pop('copy', args[0].parent() is not self)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:174, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    171     lines = tuple(lines)
    173 if vertices or rays or lines:
--> 174     self._init_from_Vrepresentation(vertices, rays, lines, **kwds)
    175 else:
    176     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:99, in Polyhedron_ppl._init_from_Vrepresentation(self, vertices, rays, lines, minimize, verbose)
     72 def _init_from_Vrepresentation(self, vertices, rays, lines, minimize=True, verbose=False):
     73     """
     74     Construct polyhedron from V-representation data.
     75 
   (...)
     97         sage: Polyhedron_ppl._init_from_Vrepresentation(p, [], [], [])
     98     """
---> 99     gs = self._convert_generators_to_ppl(vertices, rays, lines)
    100     if gs.empty():
    101         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'empty')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:477, in Polyhedron_ppl._convert_generators_to_ppl(vertices, rays, lines)
    475     rays = []
    476 for r in rays:
--> 477     gs.insert(Polyhedron_ppl._convert_generator_to_ppl(r, RAY))
    478 if lines is None:
    479     lines = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:442, in Polyhedron_ppl._convert_generator_to_ppl(v, typ)
    440 d = LCM_list([denominator(v_i) for v_i in v])
    441 if d.is_one():
--> 442     return ob(Linear_Expression(v, 0))
    443 else:
    444     dv = [ d*v_i for v_i in v ]

File ppl/generator.pyx:205, in ppl.generator.Generator.ray()

File ppl/generator.pyx:201, in ppl.generator.Generator.ray()

ValueError: PPL::ray(e):
e == 0, but the origin cannot be a ray.
sage: B(A,c)[:,1:].columns()
[(1, 0, -1), (0, 1, 0)]
sage: Polyhedron(rays=B(A,c)[:,1:].columns())
A 2-dimensional polyhedron in ZZ^3 defined as the convex hull of 1 vertex and 2 rays
sage: for v in sortables(A,c[1:]):
....:     c_shift=list(c[i]-1 for i in range(1,len(c)))
....:     B_shift=block_matrix([[B(A,c)[1:,1:]],[B(A,c)[0,1:]])
....:     print(v,B_shift,lam(A,v),Kprefix(c_shift,3)))
  Cell In [453], line 3
    B_shift=block_matrix([[B(A,c)[Integer(1):,Integer(1):]],[B(A,c)[Integer(0),Integer(1):]])
                                                                                            ^
SyntaxError: closing parenthesis ')' does not match opening parenthesis '['

sage: for v in sortables(A,c[1:]):
....:     c_shift=list(c[i]-1 for i in range(1,len(c)))
....:     B_shift=block_matrix([[B(A,c)[1:,1:]],[B(A,c)[0,1:]])
....:     print(v,B_shift,lam(A,v),Kprefix(c_shift,3)))
  Cell In [454], line 3
    B_shift=block_matrix([[B(A,c)[Integer(1):,Integer(1):]],[B(A,c)[Integer(0),Integer(1):]])
                                                                                            ^
SyntaxError: closing parenthesis ')' does not match opening parenthesis '['

sage: for v in sortables(A,c[1:]):
....:     c_shift=list(c[i]-1 for i in range(1,len(c)))
....:     B_shift=block_matrix([[B(A,c)[1:,1:]],[B(A,c)[0,1:]]])
....:     print(v,B_shift,lam(A,v),Kprefix(c_shift,3))
....: 
....: 
....: 
....: 
....: 
....: 
[1, 2, 1] [ 0  1]
[-1  0]
[-----]
[ 1  0] (3, -1, -1) [[], [0], [0, 1], [0, 1, 0], [0, 1, 0, 1], [0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0]]
[1, 2] [ 0  1]
[-1  0]
[-----]
[ 1  0] (3, -2, 1) [[], [0], [0, 1], [0, 1, 0], [0, 1, 0, 1], [0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0]]
[1] [ 0  1]
[-1  0]
[-----]
[ 1  0] (2, -1, 2) [[], [0], [0, 1], [0, 1, 0], [0, 1, 0, 1], [0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0]]
[2] [ 0  1]
[-1  0]
[-----]
[ 1  0] (1, 2, -1) [[], [0], [0, 1], [0, 1, 0], [0, 1, 0, 1], [0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0]]
[] [ 0  1]
[-1  0]
[-----]
[ 1  0] (1, 1, 1) [[], [0], [0, 1], [0, 1, 0], [0, 1, 0, 1], [0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0]]
sage: for v in sortables(A,c[1:]):
....:     c_shift=list(c[i]-1 for i in range(1,len(c)))
....:     B_shift=block_matrix([[B(A,c)[1:,1:]],[B(A,c)[0,1:]]])
....:     print(v,p_lambda_int(B_shift,lam(A,v),Kprefix(c_shift,3)))
....: 
[ 0  1]
[-1  0]
[-----]
[ 1  0] (3, -1, -1)
[ 0  1]
[-1  0]
[-----]
[ 1  0] (3, -1, -1)
[ 0  1]
[-1  0]
[-----]
[ 1  0] (3, -1, -1)
[ 0  1]
[-1  0]
[-----]
[ 1  0] (3, -1, -1)
[1, 2, 1] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[ 0  1]
[-1  0]
[-----]
[ 1  0] (3, -2, 1)
[ 0  1]
[-1  0]
[-----]
[ 1  0] (3, -2, 1)
[ 0  1]
[-1  0]
[-----]
[ 1  0] (3, -2, 1)
[ 0  1]
[-1  0]
[-----]
[ 1  0] (3, -2, 1)
[1, 2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[ 0  1]
[-1  0]
[-----]
[ 1  0] (2, -1, 2)
[ 0  1]
[-1  0]
[-----]
[ 1  0] (2, -1, 2)
[ 0  1]
[-1  0]
[-----]
[ 1  0] (2, -1, 2)
[ 0  1]
[-1  0]
[-----]
[ 1  0] (2, -1, 2)
[1] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[ 0  1]
[-1  0]
[-----]
[ 1  0] (1, 2, -1)
[ 0  1]
[-1  0]
[-----]
[ 1  0] (1, 2, -1)
[ 0  1]
[-1  0]
[-----]
[ 1  0] (1, 2, -1)
[ 0  1]
[-1  0]
[-----]
[ 1  0] (1, 2, -1)
[2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[ 0  1]
[-1  0]
[-----]
[ 1  0] (1, 1, 1)
[ 0  1]
[-1  0]
[-----]
[ 1  0] (1, 1, 1)
[ 0  1]
[-1  0]
[-----]
[ 1  0] (1, 1, 1)
[ 0  1]
[-1  0]
[-----]
[ 1  0] (1, 1, 1)
[] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: c_shift
[0, 1]
sage: Kprefix(c_shift,3)
[[],
 [0],
 [0, 1],
 [0, 1, 0],
 [0, 1, 0, 1],
 [0, 1, 0, 1, 0],
 [0, 1, 0, 1, 0, 1],
 [0, 1, 0, 1, 0, 1, 0],
 [0, 1, 0, 1, 0, 1, 0, 1],
 [0, 1, 0, 1, 0, 1, 0, 1, 0]]
sage: for v in sortables(A,c[1:]):
....:     print(v,p_lambda_int(B(A,c),lam(A,v),Kprefix(c[1:],3)))
....: 
[ 0  1  0]
[-1  0  1]
[ 0 -1  0] (3, -1, -1)
[ 0  1  0]
[-1  0  1]
[ 0 -1  0] (3, -1, -1)
[ 0  1  0]
[-1  0  1]
[ 0 -1  0] (3, -1, -1)
[ 0  1  0]
[-1  0  1]
[ 0 -1  0] (3, -1, -1)
[ 0  1  0]
[-1  0  1]
[ 0 -1  0] (3, -1, -1)
[ 0  1  0]
[-1  0  1]
[ 0 -1  0] (3, -1, -1)
[ 0  1  0]
[-1  0  1]
[ 0 -1  0] (3, -1, -1)
[ 0  1  0]
[-1  0  1]
[ 0 -1  0] (3, -1, -1)
[ 0  1  0]
[-1  0  1]
[ 0 -1  0] (3, -1, -1)
[ 0  1  0]
[-1  0  1]
[ 0 -1  0] (3, -1, -1)
[ 0  1  0]
[-1  0  1]
[ 0 -1  0] (3, -1, -1)
[1, 2, 1] A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray
[ 0  1  0]
[-1  0  1]
[ 0 -1  0] (3, -2, 1)
[ 0  1  0]
[-1  0  1]
[ 0 -1  0] (3, -2, 1)
[ 0  1  0]
[-1  0  1]
[ 0 -1  0] (3, -2, 1)
[ 0  1  0]
[-1  0  1]
[ 0 -1  0] (3, -2, 1)
[ 0  1  0]
[-1  0  1]
[ 0 -1  0] (3, -2, 1)
[ 0  1  0]
[-1  0  1]
[ 0 -1  0] (3, -2, 1)
[ 0  1  0]
[-1  0  1]
[ 0 -1  0] (3, -2, 1)
[ 0  1  0]
[-1  0  1]
[ 0 -1  0] (3, -2, 1)
[ 0  1  0]
[-1  0  1]
[ 0 -1  0] (3, -2, 1)
[ 0  1  0]
[-1  0  1]
[ 0 -1  0] (3, -2, 1)
[ 0  1  0]
[-1  0  1]
[ 0 -1  0] (3, -2, 1)
[1, 2] A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray
[ 0  1  0]
[-1  0  1]
[ 0 -1  0] (2, -1, 2)
[ 0  1  0]
[-1  0  1]
[ 0 -1  0] (2, -1, 2)
[ 0  1  0]
[-1  0  1]
[ 0 -1  0] (2, -1, 2)
[ 0  1  0]
[-1  0  1]
[ 0 -1  0] (2, -1, 2)
[ 0  1  0]
[-1  0  1]
[ 0 -1  0] (2, -1, 2)
[ 0  1  0]
[-1  0  1]
[ 0 -1  0] (2, -1, 2)
[ 0  1  0]
[-1  0  1]
[ 0 -1  0] (2, -1, 2)
[ 0  1  0]
[-1  0  1]
[ 0 -1  0] (2, -1, 2)
[ 0  1  0]
[-1  0  1]
[ 0 -1  0] (2, -1, 2)
[ 0  1  0]
[-1  0  1]
[ 0 -1  0] (2, -1, 2)
[ 0  1  0]
[-1  0  1]
[ 0 -1  0] (2, -1, 2)
[1] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray
[ 0  1  0]
[-1  0  1]
[ 0 -1  0] (1, 2, -1)
[ 0  1  0]
[-1  0  1]
[ 0 -1  0] (1, 2, -1)
[ 0  1  0]
[-1  0  1]
[ 0 -1  0] (1, 2, -1)
[ 0  1  0]
[-1  0  1]
[ 0 -1  0] (1, 2, -1)
[ 0  1  0]
[-1  0  1]
[ 0 -1  0] (1, 2, -1)
[ 0  1  0]
[-1  0  1]
[ 0 -1  0] (1, 2, -1)
[ 0  1  0]
[-1  0  1]
[ 0 -1  0] (1, 2, -1)
[ 0  1  0]
[-1  0  1]
[ 0 -1  0] (1, 2, -1)
[ 0  1  0]
[-1  0  1]
[ 0 -1  0] (1, 2, -1)
[ 0  1  0]
[-1  0  1]
[ 0 -1  0] (1, 2, -1)
[ 0  1  0]
[-1  0  1]
[ 0 -1  0] (1, 2, -1)
[2] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray
[ 0  1  0]
[-1  0  1]
[ 0 -1  0] (1, 1, 1)
[ 0  1  0]
[-1  0  1]
[ 0 -1  0] (1, 1, 1)
[ 0  1  0]
[-1  0  1]
[ 0 -1  0] (1, 1, 1)
[ 0  1  0]
[-1  0  1]
[ 0 -1  0] (1, 1, 1)
[ 0  1  0]
[-1  0  1]
[ 0 -1  0] (1, 1, 1)
[ 0  1  0]
[-1  0  1]
[ 0 -1  0] (1, 1, 1)
[ 0  1  0]
[-1  0  1]
[ 0 -1  0] (1, 1, 1)
[ 0  1  0]
[-1  0  1]
[ 0 -1  0] (1, 1, 1)
[ 0  1  0]
[-1  0  1]
[ 0 -1  0] (1, 1, 1)
[ 0  1  0]
[-1  0  1]
[ 0 -1  0] (1, 1, 1)
[ 0  1  0]
[-1  0  1]
[ 0 -1  0] (1, 1, 1)
[] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 1 ray
### reloading attached file domination4.py modified at 00:21:26 ###
sage: for v in sortables(A,c[1:]):
....:     print(v,p_lambda_int(B(A,c),lam(A,v),Kprefix(c[1:],3)))
....: 
[1, 2, 1] A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray
[1, 2] A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray
[1] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray
[2] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray
[] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 1 ray
sage: A=CartanMatrix(['A',3])
sage: c=[1,2,0]
sage: 
sage: for v in sortables(A,c[1:]):
....:     print(v,p_lambda_int(B(A,c),lam(A,v),Kprefix(c[1:],3)))
....: 
[2, 0] A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray
[2] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray
[0] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray
[] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray
sage: for v in sortables(A,c[1:]):
....:     print(v,p_lambda_int(B(A,c),lam(A,v),Kprefix(c[1:],3)+[[0]]))
....: 
[2, 0] A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray
[2] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray
[0] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray
[] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray
sage: B(A,c)
[ 0 -1  0]
[ 1  0  1]
[ 0 -1  0]
sage: Kprefix(c[1:],3)
[[],
 [2],
 [2, 0],
 [2, 0, 2],
 [2, 0, 2, 0],
 [2, 0, 2, 0, 2],
 [2, 0, 2, 0, 2, 0],
 [2, 0, 2, 0, 2, 0, 2],
 [2, 0, 2, 0, 2, 0, 2, 0],
 [2, 0, 2, 0, 2, 0, 2, 0, 2]]
sage: for v in sortables(A,c[1:]):
....:     print(v,p_lambda_int(B(A,c),lam(A,v),Kprefix(c[1:],3)+[[c[0]]]))
....: 
[2, 0] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[0] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['A',3])
sage: c=[0,1,2]
sage: for v in sortables(A,c[1:]):
....:     print(v,p_lambda_int(B(A,c),lam(A,v),Kprefix(c[1:],3)+[[c[0]]]))
....: 
[1, 2, 1] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[1, 2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[1] A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices
[2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[] A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices
sage: c=[1,2,0]
sage: for v in sortables(A,c[1:]):
....:     print(v,p_lambda_int(B(A,c),lam(A,v),Kprefix(c[1:],3)+[[c[0]]]))
....: 
[2, 0] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[0] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: for v in sortables(A,c[1:]):
....:     print(v,p_lambda_int(B(A,c),lam(A,v),Kprefix(c,3)+[[c[0]]]))
....: 
[2, 0] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[0] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: for v in sortables(A,c[1:]):
....:     print(v,p_lambda_int(B(A,c),lam(A,v),Kprefix(c,2)+[[c[0]]]))
....: 
[2, 0] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[0] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: for v in sortables(A,c[1:]):
....:     print(v,p_lambda_int(B(A,c),lam(A,v),Kprefix(c,1)+[[c[0]]]))
....: 
[2, 0] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[0] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: for v in sortables(A,c[1:]):
....:     print(v,p_lambda_int(B(A,c),lam(A,v),Kprefix(c,0)+[[c[0]]]))
....: 
[2, 0] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[0] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: Kprefix(c,0)
[[], [1], [1, 2], [1, 2, 0], [1, 2, 0, 1], [1, 2, 0, 1, 2]]
sage: Kprefix(c,1)
[[],
 [1],
 [1, 2],
 [1, 2, 0],
 [1, 2, 0, 1],
 [1, 2, 0, 1, 2],
 [1, 2, 0, 1, 2, 0],
 [1, 2, 0, 1, 2, 0, 1],
 [1, 2, 0, 1, 2, 0, 1, 2]]
### reloading attached file domination4.py modified at 01:04:45 ###
sage: Kprefix(c,1)
[[], [1], [1, 2]]
sage: Kprefix(c,0)
[]
sage: for v in sortables(A,c[1:]):
....:     print(v,p_lambda_int(B(A,c),lam(A,v),Kprefix(c,2)+[[c[0]]]))
....: 
[2, 0] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[0] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: for v in sortables(A,c[1:]):
....:     print(v,p_lambda_int(B(A,c),lam(A,v),Kprefix(c,1)+[[c[0]]]))
....: 
[2, 0] A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray
[2] A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray
[0] A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray
[] A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray
sage: for v in sortables(A,c[1:]):
....:     print(v,p_lambda_int(B(A,c),lam(A,v),Kprefix(c,2)+[[c[0]]]))
....: 
[2, 0] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[0] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: for v in sortables(A,c[1:]):
....:     print(v,p_lambda_int(B(A,c),lam(A,v),Kprefix(c,2)+[[c[0]]]))
....: 
[2, 0] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[0] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: for v in sortables(A,c[1:]):
....:     print(v,p_lambda_int(B(A,c),lam(A,v),Kprefix(c,2)))
....: 
[2, 0] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[0] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: for v in sortables(A,c[1:]):
....:     print(v,p_lambda_int(B(A,c),lam(A,v),Kprefix(c[1;],2)))
  Cell In [486], line 2
    print(v,p_lambda_int(B(A,c),lam(A,v),Kprefix(c[Integer(1);],Integer(2))))
                                                             ^
SyntaxError: invalid syntax

sage: for v in sortables(A,c[1:]):
....:     print(v,p_lambda_int(B(A,c),lam(A,v),Kprefix(c[1:],2)))
....: 
[2, 0] A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray
[2] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray
[0] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray
[] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray
sage: for v in sortables(A,c[1:]):
....:     print(v,p_lambda_int(B(A,c),lam(A,v),Kprefix(c[1:],3)))
....: 
[2, 0] A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray
[2] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray
[0] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray
[] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray
sage: c
[1, 2, 0]
sage: for v in sortables(A,c[1:]):
....:     print(v,p_lambda_int(B(A,c),lam(A,v),Kprefix(c[1:],3)+[[c[0]]]))
....: 
[2, 0] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[0] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: A
[ 2 -1  0]
[-1  2 -1]
[ 0 -1  2]
sage: c
[1, 2, 0]
sage: A=CartanMatrix(['A',4])
sage: c=[1,3,0,2]
sage: for v in sortables(A,c[1:]):
....:     print(v,p_lambda_int(B(A,c),lam(A,v),Kprefix(c[1:],3)+[[c[0]]]))
....: 
[3, 0, 2, 3] A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[3, 0, 2] A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[3, 0] A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[3, 2, 3] A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[3, 2] A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[3] A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[0, 2] A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[0] A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[2] A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[] A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
sage: for v in sortables(A,c[1:]):
....:     print(v,p_lambda_int(B(A,c),lam(A,v),Kprefix(c[1:],A.nrows())+[[c[0]]]
....: ))
....: 
[3, 0, 2, 3] A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[3, 0, 2] A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[3, 0] A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[3, 2, 3] A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[3, 2] A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[3] A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[0, 2] A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[0] A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[2] A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
[] A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['A',5])
sage: c=[1,3,0,2,4]
sage: for v in sortables(A,c[1:]):
....:     print(v,p_lambda_int(B(A,c),lam(A,v),Kprefix(c[1:],A.nrows())+[[c[0]]]
....: ))
....: 
[3, 0, 2, 4, 3, 2, 4] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[3, 0, 2, 4, 3, 2] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[3, 0, 2, 4, 3, 4] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[3, 0, 2, 4, 3] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[3, 0, 2, 4] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[3, 0, 2, 3] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[3, 0, 2] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[3, 0, 4, 3] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[3, 0, 4] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[3, 0] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[3, 2, 4, 3, 2, 4] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[3, 2, 4, 3, 2] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[3, 2, 4, 3, 4] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[3, 2, 4, 3] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[3, 2, 4] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[3, 2, 3] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[3, 2] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[3, 4, 3] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[3, 4] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[3] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[0, 2, 4] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[0, 2] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[0, 4] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[0] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[2, 4] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[2] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[4] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
sage: c=[1,2,3,4,0]
sage: for v in sortables(A,c[1:]):
....:     print(v,p_lambda_int(B(A,c),lam(A,v),Kprefix(c[1:],A.nrows())+[[c[0]]]
....: ))
....: 
[2, 3, 4, 0, 2, 3, 2] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[2, 3, 4, 0, 2, 3] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[2, 3, 4, 0, 2] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[2, 3, 4, 0, 3] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[2, 3, 4, 0] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[2, 3, 4, 2, 3, 2] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[2, 3, 4, 2, 3] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[2, 3, 4, 2] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[2, 3, 4, 3] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[2, 3, 4] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[2, 3, 0, 2] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[2, 3, 0] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[2, 3, 2] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[2, 3] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[2, 4, 0] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[2, 4] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[2, 0] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[2] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[3, 4, 0, 3] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[3, 4, 0] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[3, 4, 3] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[3, 4] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[3, 0] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[3] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[4, 0] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[4] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[0] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['A',5])
sage: c=[1,2,3,4,0]
sage: for v in sortables(A,c[1:]):
....:     print(v,p_lambda_int(B(A,c),lam(A,v),Kprefix(c,A.nrows())+[[c[0]]]))
....: 

[2, 3, 4, 0, 2, 3, 2] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[2, 3, 4, 0, 2, 3] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[2, 3, 4, 0, 2] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[2, 3, 4, 0, 3] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[2, 3, 4, 0] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[2, 3, 4, 2, 3, 2] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[2, 3, 4, 2, 3] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[2, 3, 4, 2] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[2, 3, 4, 3] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[2, 3, 4] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[2, 3, 0, 2] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[2, 3, 0] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[2, 3, 2] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[2, 3] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[2, 4, 0] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[2, 4] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[2, 0] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[2] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [504], line 2
      1 for v in sortables(A,c[Integer(1):]):
----> 2     print(v,p_lambda_int(B(A,c),lam(A,v),Kprefix(c,A.nrows())+[[c[Integer(0)]]]))

File ~/git/affine_dominance/software/domination4.py:127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_faster(B, la, seqs[0])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_faster(B, la, s))
    128     if P.dimension()==0:
    129         break

File ~/git/affine_dominance/software/domination4.py:159, in p_lambda_faster(B, la, seq)
    155         P=Ep*Pp
    156     else:
    157         #print("Pp:   ",Pp,Pp.vertices(),Pp.rays(),Pp.lines(),"\n")
    158         #print("Pm:   ",Pm,Pm.vertices(),Pm.rays(),Pm.lines(),"\n\n")
--> 159         P=(Ep*Pp).convex_hull(Em*Pm)
    160     B.mutate(k)
    161 return P

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1312, in Polyhedron_base5.convex_hull(self, other)
   1310 hull_rays = self.rays() + other.rays()
   1311 hull_lines = self.lines() + other.lines()
-> 1312 return self.parent().element_class(self.parent(), [hull_vertices, hull_rays, hull_lines], None)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:174, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    171     lines = tuple(lines)
    173 if vertices or rays or lines:
--> 174     self._init_from_Vrepresentation(vertices, rays, lines, **kwds)
    175 else:
    176     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:99, in Polyhedron_ppl._init_from_Vrepresentation(self, vertices, rays, lines, minimize, verbose)
     72 def _init_from_Vrepresentation(self, vertices, rays, lines, minimize=True, verbose=False):
     73     """
     74     Construct polyhedron from V-representation data.
     75 
   (...)
     97         sage: Polyhedron_ppl._init_from_Vrepresentation(p, [], [], [])
     98     """
---> 99     gs = self._convert_generators_to_ppl(vertices, rays, lines)
    100     if gs.empty():
    101         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'empty')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:473, in Polyhedron_ppl._convert_generators_to_ppl(vertices, rays, lines)
    471     vertices = []
    472 for v in vertices:
--> 473     gs.insert(Polyhedron_ppl._convert_generator_to_ppl(v, VERTEX))
    474 if rays is None:
    475     rays = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:442, in Polyhedron_ppl._convert_generator_to_ppl(v, typ)
    440 d = LCM_list([denominator(v_i) for v_i in v])
    441 if d.is_one():
--> 442     return ob(Linear_Expression(v, 0))
    443 else:
    444     dv = [ d*v_i for v_i in v ]

File ppl/linear_algebra.pyx:654, in ppl.linear_algebra.Linear_Expression.__init__()

File ppl/linear_algebra.pyx:49, in ppl.linear_algebra.PPL_Coefficient_from_pyobject()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:1107, in sage.structure.element.Element.__richcmp__ (build/cythonized/sage/structure/element.c:18121)()
   1105         return (<Element>self)._richcmp_(other, op)
   1106     else:
-> 1107         return coercion_model.richcmp(self, other, op)
   1108 
   1109 cpdef _richcmp_(left, right, int op) noexcept:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:2021, in sage.structure.coerce.CoercionModel.richcmp (build/cythonized/sage/structure/coerce.c:26173)()
   2019 # Coerce to a common parent
   2020 try:
-> 2021     x, y = self.canonical_coercion(x, y)
   2022 except (TypeError, NotImplementedError):
   2023     pass

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1422, in sage.structure.coerce.CoercionModel.canonical_coercion (build/cythonized/sage/structure/coerce.c:18956)()
   1420             self._record_exception()
   1421 
-> 1422     raise TypeError("no common canonical parent for objects with parents: '%s' and '%s'"%(xp, yp))
   1423 
   1424 cpdef coercion_maps(self, R, S) noexcept:

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: for v in sortables(A,c[1:]):
....:     print(v,p_lambda_int(B(A,c),lam(A,v),Kprefix(c[1:],A.nrows())+[[c[0]]]
....: ))
....: 
[2, 3, 4, 0, 2, 3, 2] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[2, 3, 4, 0, 2, 3] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[2, 3, 4, 0, 2] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[2, 3, 4, 0, 3] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[2, 3, 4, 0] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[2, 3, 4, 2, 3, 2] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[2, 3, 4, 2, 3] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[2, 3, 4, 2] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[2, 3, 4, 3] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[2, 3, 4] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[2, 3, 0, 2] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[2, 3, 0] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[2, 3, 2] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[2, 3] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[2, 4, 0] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[2, 4] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[2, 0] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[2] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[3, 4, 0, 3] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[3, 4, 0] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[3, 4, 3] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[3, 4] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[3, 0] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[3] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[4, 0] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[4] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[0] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
[] A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
### reloading attached file domination4.py modified at 17:32:05 ###
### reloading attached file domination4.py modified at 17:37:36 ###
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: seqs=[]
....: for u in sortables(A,c[1:]):
....:     seqs=seqs+[u,u+[0]]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     print(num,v,p_lambda_int(B(A,c),lam(A,v),seqs).dimension())
....: 
1 [1, 2, 1, 2] 0
2 [1, 2, 1] 0
3 [1, 2] 0
4 [1] 0
5 [2] 0
6 [] 0
sage: A=CartanMatrix(['D',6])
....: c=[0,1,2,3,4,5]
....: seqs=[]
....: for u in sortables(A,c[1:]):
....:     seqs=seqs+[u,u+[0]]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     print(num,v,p_lambda_int(B(A,c),lam(A,v),seqs).dimension())
1 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5] 0
2 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4] 0
3 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 5] 0
4 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3] 0
5 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2] 0
6 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1] 0
7 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5] 0
8 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] 0
9 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] 0
10 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1] 0
11 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4] 0
12 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 5, 1, 2, 3] 0
13 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 5, 1, 2] 0
14 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 5, 1] 0
15 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 5] 0
16 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2] 0
17 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1] 0
18 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3] 0
19 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 1] 0
20 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2] 0
21 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1] 0
22 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5] 0
23 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4] 0
24 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 5] 0
25 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3] 0
26 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2] 0
27 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5] 0
28 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
29 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1] 0
30 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] 0
31 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1] 0
32 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] 0
33 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1] 0
34 [1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3] 0
35 [1, 2, 3, 4, 5, 1, 2, 3, 4, 2] 0
36 [1, 2, 3, 4, 5, 1, 2, 3, 4] 0
37 [1, 2, 3, 4, 5, 1, 2, 3, 5, 1, 2, 3, 1, 2] 0
38 [1, 2, 3, 4, 5, 1, 2, 3, 5, 1, 2, 3, 1] 0
39 [1, 2, 3, 4, 5, 1, 2, 3, 5, 1, 2, 3] 0
40 [1, 2, 3, 4, 5, 1, 2, 3, 5, 1, 2, 1] 0
41 [1, 2, 3, 4, 5, 1, 2, 3, 5, 1, 2] 0
42 [1, 2, 3, 4, 5, 1, 2, 3, 5, 1] 0
43 [1, 2, 3, 4, 5, 1, 2, 3, 5, 2, 3] 0
44 [1, 2, 3, 4, 5, 1, 2, 3, 5, 2] 0
45 [1, 2, 3, 4, 5, 1, 2, 3, 5] 0
46 [1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1] 0
47 [1, 2, 3, 4, 5, 1, 2, 3, 1, 2] 0
48 [1, 2, 3, 4, 5, 1, 2, 3, 1] 0
49 [1, 2, 3, 4, 5, 1, 2, 3, 2] 0
50 [1, 2, 3, 4, 5, 1, 2, 3] 0
51 [1, 2, 3, 4, 5, 1, 2, 1] 0
52 [1, 2, 3, 4, 5, 1, 2] 0
53 [1, 2, 3, 4, 5, 1, 3, 4, 5] 0
54 [1, 2, 3, 4, 5, 1, 3, 4] 0
55 [1, 2, 3, 4, 5, 1, 3, 5] 0
56 [1, 2, 3, 4, 5, 1, 3] 0
57 [1, 2, 3, 4, 5, 1] 0
58 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5] 0
59 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4] 0
60 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 5] 0
61 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3] 0
62 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2] 0
63 [1, 2, 3, 4, 5, 2, 3, 4, 5] 0
64 [1, 2, 3, 4, 5, 2, 3, 4, 2, 3] 0
65 [1, 2, 3, 4, 5, 2, 3, 4, 2] 0
66 [1, 2, 3, 4, 5, 2, 3, 4] 0
67 [1, 2, 3, 4, 5, 2, 3, 5, 2, 3] 0
68 [1, 2, 3, 4, 5, 2, 3, 5, 2] 0
69 [1, 2, 3, 4, 5, 2, 3, 5] 0
70 [1, 2, 3, 4, 5, 2, 3, 2] 0
71 [1, 2, 3, 4, 5, 2, 3] 0
72 [1, 2, 3, 4, 5, 2] 0
73 [1, 2, 3, 4, 5, 3, 4, 5] 0
74 [1, 2, 3, 4, 5, 3, 4] 0
75 [1, 2, 3, 4, 5, 3, 5] 0
76 [1, 2, 3, 4, 5, 3] 0
77 [1, 2, 3, 4, 5] 0
78 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
79 [1, 2, 3, 4, 1, 2, 3, 1, 2] 0
80 [1, 2, 3, 4, 1, 2, 3, 1] 0
81 [1, 2, 3, 4, 1, 2, 3, 2] 0
82 [1, 2, 3, 4, 1, 2, 3] 0
83 [1, 2, 3, 4, 1, 2, 1] 0
84 [1, 2, 3, 4, 1, 2] 0
85 [1, 2, 3, 4, 1, 3] 0
86 [1, 2, 3, 4, 1] 0
87 [1, 2, 3, 4, 2, 3, 2] 0
88 [1, 2, 3, 4, 2, 3] 0
89 [1, 2, 3, 4, 2] 0
90 [1, 2, 3, 4, 3] 0
91 [1, 2, 3, 4] 0
92 [1, 2, 3, 5, 1, 2, 3, 1, 2, 1] 0
93 [1, 2, 3, 5, 1, 2, 3, 1, 2] 0
94 [1, 2, 3, 5, 1, 2, 3, 1] 0
95 [1, 2, 3, 5, 1, 2, 3, 2] 0
96 [1, 2, 3, 5, 1, 2, 3] 0
97 [1, 2, 3, 5, 1, 2, 1] 0
98 [1, 2, 3, 5, 1, 2] 0
99 [1, 2, 3, 5, 1, 3] 0
100 [1, 2, 3, 5, 1] 0
101 [1, 2, 3, 5, 2, 3, 2] 0
102 [1, 2, 3, 5, 2, 3] 0
103 [1, 2, 3, 5, 2] 0
104 [1, 2, 3, 5, 3] 0
105 [1, 2, 3, 5] 0
106 [1, 2, 3, 1, 2, 1] 0
107 [1, 2, 3, 1, 2] 0
108 [1, 2, 3, 1] 0
109 [1, 2, 3, 2] 0
110 [1, 2, 3] 0
111 [1, 2, 4, 5, 1] 0
112 [1, 2, 4, 5] 0
113 [1, 2, 4, 1] 0
114 [1, 2, 4] 0
115 [1, 2, 5, 1] 0
116 [1, 2, 5] 0
117 [1, 2, 1] 0
118 [1, 2] 0
119 [1, 3, 4, 5, 3, 4, 5] 0
120 [1, 3, 4, 5, 3, 4] 0
121 [1, 3, 4, 5, 3, 5] 0
122 [1, 3, 4, 5, 3] 0
123 [1, 3, 4, 5] 0
124 [1, 3, 4, 3] 0
125 [1, 3, 4] 0
126 [1, 3, 5, 3] 0
127 [1, 3, 5] 0
128 [1, 3] 0
129 [1, 4, 5] 0
130 [1, 4] 0
131 [1, 5] 0
132 [1] 0
133 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5] 0
134 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4] 0
135 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 5] 0
136 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3] 0
137 [2, 3, 4, 5, 2, 3, 4, 5, 2] 0
138 [2, 3, 4, 5, 2, 3, 4, 5] 0
139 [2, 3, 4, 5, 2, 3, 4, 2, 3] 0
140 [2, 3, 4, 5, 2, 3, 4, 2] 0
141 [2, 3, 4, 5, 2, 3, 4] 0
142 [2, 3, 4, 5, 2, 3, 5, 2, 3] 0
143 [2, 3, 4, 5, 2, 3, 5, 2] 0
144 [2, 3, 4, 5, 2, 3, 5] 0
145 [2, 3, 4, 5, 2, 3, 2] 0
146 [2, 3, 4, 5, 2, 3] 0
147 [2, 3, 4, 5, 2] 0
148 [2, 3, 4, 5, 3, 4, 5] 0
149 [2, 3, 4, 5, 3, 4] 0
150 [2, 3, 4, 5, 3, 5] 0
151 [2, 3, 4, 5, 3] 0
152 [2, 3, 4, 5] 0
153 [2, 3, 4, 2, 3, 2] 0
154 [2, 3, 4, 2, 3] 0
155 [2, 3, 4, 2] 0
156 [2, 3, 4, 3] 0
157 [2, 3, 4] 0
158 [2, 3, 5, 2, 3, 2] 0
159 [2, 3, 5, 2, 3] 0
160 [2, 3, 5, 2] 0
161 [2, 3, 5, 3] 0
162 [2, 3, 5] 0
163 [2, 3, 2] 0
164 [2, 3] 0
165 [2, 4, 5] 0
166 [2, 4] 0
167 [2, 5] 0
168 [2] 0
169 [3, 4, 5, 3, 4, 5] 0
170 [3, 4, 5, 3, 4] 0
171 [3, 4, 5, 3, 5] 0
172 [3, 4, 5, 3] 0
173 [3, 4, 5] 0
174 [3, 4, 3] 0
175 [3, 4] 0
176 [3, 5, 3] 0
177 [3, 5] 0
178 [3] 0
179 [4, 5] 0
180 [4] 0
181 [5] 0
182 [] 0
### reloading attached file domination4.py modified at 00:55:38 ###
sage: A=CartanMatrix(['D',7])
....: c=[0,1,2,3,4,5,6]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),K(c,v)).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
....: 
1 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6] 0
2 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5] 0
3 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 6] 0
4 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4] 0
5 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3] 0
6 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2] 0
7 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1] 0
8 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6] 0
9 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4] 0
10 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3] 0
11 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2] 0
12 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1] 0
13 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5] 0
14 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4] 0
15 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 6, 1, 2, 3] 0
16 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 6, 1, 2] 0
17 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 6, 1] 0
18 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 6] 0
19 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3] 0
20 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2] 0
21 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1] 0
22 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4] 0
23 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 1, 2] 0
24 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 1] 0
25 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3] 0
26 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 1] 0
27 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2] 0
28 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1] 0
29 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6] 0
30 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5] 0
31 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 6] 0
32 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4] 0
33 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3] 0
34 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2] 0
35 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6] 0
36 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] 0
37 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] 0
38 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1] 0
39 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4] 0
40 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2] 0
41 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1] 0
42 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3] 0
43 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 1] 0
44 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2] 0
45 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1] 0
46 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 4] 0
47 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3] 0
48 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2] 0
49 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5] 0
50 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 1, 2, 3] 0
51 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 1, 2] 0
52 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 1] 0
53 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4] 0
54 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 6, 1, 2, 3, 1, 2] 0
55 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 6, 1, 2, 3, 1] 0
56 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 6, 1, 2, 3] 0
57 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 6, 1, 2, 1] 0
58 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 6, 1, 2] 0
59 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 6, 1] 0
60 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 6, 2, 3, 4] 0
61 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 6, 2, 3] 0
62 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 6, 2] 0
63 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 6] 0
64 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
65 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 1] 0
66 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3] 0
67 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 1] 0
68 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2] 0
69 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1] 0
70 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 2, 3] 0
71 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 2] 0
72 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4] 0
73 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 1, 2, 1] 0
74 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 1, 2] 0
75 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 1] 0
76 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 2] 0
77 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3] 0
78 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 1] 0
79 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2] 0
80 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6] 0
81 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5] 0
82 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3, 4, 6] 0
83 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3, 4] 0
84 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3] 0
85 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1] 0
86 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6] 0
87 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5] 0
88 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 6] 0
89 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4] 0
90 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3] 0
91 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2] 0
92 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6] 0
93 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4] 0
94 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3] 0
95 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2] 0
96 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5] 0
97 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 6, 2, 3, 4] 0
98 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 6, 2, 3] 0
99 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 6, 2] 0
100 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 6] 0
101 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3] 0
102 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 2] 0
103 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4] 0
104 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 2] 0
105 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3] 0
106 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2] 0
107 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3, 4, 5, 6] 0
108 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3, 4, 5] 0
109 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3, 4, 6] 0
110 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3, 4] 0
111 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3] 0
112 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6] 0
113 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
114 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1] 0
115 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] 0
116 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1] 0
117 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] 0
118 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1] 0
119 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3] 0
120 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2] 0
121 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4] 0
122 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1] 0
123 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2] 0
124 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1] 0
125 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 2] 0
126 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3] 0
127 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 1] 0
128 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2] 0
129 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 3, 4] 0
130 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 3] 0
131 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1] 0
132 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 4, 2, 3] 0
133 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 4, 2] 0
134 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 4] 0
135 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 2] 0
136 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3] 0
137 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2] 0
138 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 3, 4] 0
139 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 3] 0
140 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5] 0
141 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
142 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 1, 2, 3, 1] 0
143 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 1, 2, 3] 0
144 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 1, 2, 1] 0
145 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 1, 2] 0
146 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 1] 0
147 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 2, 3] 0
148 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 2] 0
149 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4] 0
150 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 6, 1, 2, 3, 1, 2, 1] 0
151 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 6, 1, 2, 3, 1, 2] 0
152 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 6, 1, 2, 3, 1] 0
153 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 6, 1, 2, 3, 2] 0
154 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 6, 1, 2, 3] 0
155 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 6, 1, 2, 1] 0
156 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 6, 1, 2] 0
157 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 6, 1, 3, 4] 0
158 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 6, 1, 3] 0
159 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 6, 1] 0
160 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 6, 2, 3, 4, 2, 3] 0
161 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 6, 2, 3, 4, 2] 0
162 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 6, 2, 3, 4] 0
163 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 6, 2, 3, 2] 0
164 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 6, 2, 3] 0
165 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 6, 2] 0
166 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 6, 3, 4] 0
167 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 6, 3] 0
168 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 6] 0
169 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
170 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
171 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 1] 0
172 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 2] 0
173 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3] 0
174 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 1] 0
175 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2] 0
176 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 3] 0
177 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1] 0
178 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 2, 3, 2] 0
179 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 2, 3] 0
180 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 2] 0
181 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 3] 0
182 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4] 0
183 [1, 2, 3, 4, 5, 6, 1, 2, 3, 1, 2, 1] 0
184 [1, 2, 3, 4, 5, 6, 1, 2, 3, 1, 2] 0
185 [1, 2, 3, 4, 5, 6, 1, 2, 3, 1] 0
186 [1, 2, 3, 4, 5, 6, 1, 2, 3, 2] 0
187 [1, 2, 3, 4, 5, 6, 1, 2, 3] 0
188 [1, 2, 3, 4, 5, 6, 1, 2, 4, 5, 6, 1] 0
189 [1, 2, 3, 4, 5, 6, 1, 2, 4, 5, 6] 0
190 [1, 2, 3, 4, 5, 6, 1, 2, 4, 5, 1] 0
191 [1, 2, 3, 4, 5, 6, 1, 2, 4, 5] 0
192 [1, 2, 3, 4, 5, 6, 1, 2, 4, 6, 1] 0
193 [1, 2, 3, 4, 5, 6, 1, 2, 4, 6] 0
194 [1, 2, 3, 4, 5, 6, 1, 2, 4, 1] 0
195 [1, 2, 3, 4, 5, 6, 1, 2, 4] 0
196 [1, 2, 3, 4, 5, 6, 1, 2, 1] 0
197 [1, 2, 3, 4, 5, 6, 1, 2] 0
198 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 3, 4, 5, 6] 0
199 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 3, 4, 5] 0
200 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 3, 4, 6] 0
201 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 3, 4] 0
202 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 3] 0
203 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6] 0
204 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 3, 4] 0
205 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 3] 0
206 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5] 0
207 [1, 2, 3, 4, 5, 6, 1, 3, 4, 6, 3, 4] 0
208 [1, 2, 3, 4, 5, 6, 1, 3, 4, 6, 3] 0
209 [1, 2, 3, 4, 5, 6, 1, 3, 4, 6] 0
210 [1, 2, 3, 4, 5, 6, 1, 3, 4, 3] 0
211 [1, 2, 3, 4, 5, 6, 1, 3, 4] 0
212 [1, 2, 3, 4, 5, 6, 1, 3] 0
213 [1, 2, 3, 4, 5, 6, 1, 4, 5, 6] 0
214 [1, 2, 3, 4, 5, 6, 1, 4, 5] 0
215 [1, 2, 3, 4, 5, 6, 1, 4, 6] 0
216 [1, 2, 3, 4, 5, 6, 1, 4] 0
217 [1, 2, 3, 4, 5, 6, 1] 0
218 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6] 0
219 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5] 0
220 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 6] 0
221 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4] 0
222 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3] 0
223 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2] 0
224 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6] 0
225 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4] 0
226 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3] 0
227 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2] 0
228 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5] 0
229 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 6, 2, 3, 4] 0
230 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 6, 2, 3] 0
231 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 6, 2] 0
232 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 6] 0
233 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3] 0
234 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 2] 0
235 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4] 0
236 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 2] 0
237 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3] 0
238 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2] 0
239 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5, 6] 0
240 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5] 0
241 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 6] 0
242 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4] 0
243 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3] 0
244 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6] 0
245 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2, 3] 0
246 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2] 0
247 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4] 0
248 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 2] 0
249 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3] 0
250 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2] 0
251 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 3, 4] 0
252 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 3] 0
253 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5] 0
254 [1, 2, 3, 4, 5, 6, 2, 3, 4, 6, 2, 3, 4, 2, 3] 0
255 [1, 2, 3, 4, 5, 6, 2, 3, 4, 6, 2, 3, 4, 2] 0
256 [1, 2, 3, 4, 5, 6, 2, 3, 4, 6, 2, 3, 4] 0
257 [1, 2, 3, 4, 5, 6, 2, 3, 4, 6, 2, 3, 2] 0
258 [1, 2, 3, 4, 5, 6, 2, 3, 4, 6, 2, 3] 0
259 [1, 2, 3, 4, 5, 6, 2, 3, 4, 6, 2] 0
260 [1, 2, 3, 4, 5, 6, 2, 3, 4, 6, 3, 4] 0
261 [1, 2, 3, 4, 5, 6, 2, 3, 4, 6, 3] 0
262 [1, 2, 3, 4, 5, 6, 2, 3, 4, 6] 0
263 [1, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3, 2] 0
264 [1, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3] 0
265 [1, 2, 3, 4, 5, 6, 2, 3, 4, 2] 0
266 [1, 2, 3, 4, 5, 6, 2, 3, 4, 3] 0
267 [1, 2, 3, 4, 5, 6, 2, 3, 4] 0
268 [1, 2, 3, 4, 5, 6, 2, 3, 2] 0
269 [1, 2, 3, 4, 5, 6, 2, 3] 0
270 [1, 2, 3, 4, 5, 6, 2, 4, 5, 6] 0
271 [1, 2, 3, 4, 5, 6, 2, 4, 5] 0
272 [1, 2, 3, 4, 5, 6, 2, 4, 6] 0
273 [1, 2, 3, 4, 5, 6, 2, 4] 0
274 [1, 2, 3, 4, 5, 6, 2] 0
275 [1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6] 0
276 [1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5] 0
277 [1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 6] 0
278 [1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4] 0
279 [1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3] 0
280 [1, 2, 3, 4, 5, 6, 3, 4, 5, 6] 0
281 [1, 2, 3, 4, 5, 6, 3, 4, 5, 3, 4] 0
282 [1, 2, 3, 4, 5, 6, 3, 4, 5, 3] 0
283 [1, 2, 3, 4, 5, 6, 3, 4, 5] 0
284 [1, 2, 3, 4, 5, 6, 3, 4, 6, 3, 4] 0
285 [1, 2, 3, 4, 5, 6, 3, 4, 6, 3] 0
286 [1, 2, 3, 4, 5, 6, 3, 4, 6] 0
287 [1, 2, 3, 4, 5, 6, 3, 4, 3] 0
288 [1, 2, 3, 4, 5, 6, 3, 4] 0
289 [1, 2, 3, 4, 5, 6, 3] 0
290 [1, 2, 3, 4, 5, 6, 4, 5, 6] 0
291 [1, 2, 3, 4, 5, 6, 4, 5] 0
292 [1, 2, 3, 4, 5, 6, 4, 6] 0
293 [1, 2, 3, 4, 5, 6, 4] 0
294 [1, 2, 3, 4, 5, 6] 0
295 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
296 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
297 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1] 0
298 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 2] 0
299 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] 0
300 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1] 0
301 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] 0
302 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 3] 0
303 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1] 0
304 [1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3, 2] 0
305 [1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3] 0
306 [1, 2, 3, 4, 5, 1, 2, 3, 4, 2] 0
307 [1, 2, 3, 4, 5, 1, 2, 3, 4, 3] 0
308 [1, 2, 3, 4, 5, 1, 2, 3, 4] 0
309 [1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1] 0
310 [1, 2, 3, 4, 5, 1, 2, 3, 1, 2] 0
311 [1, 2, 3, 4, 5, 1, 2, 3, 1] 0
312 [1, 2, 3, 4, 5, 1, 2, 3, 2] 0
313 [1, 2, 3, 4, 5, 1, 2, 3] 0
314 [1, 2, 3, 4, 5, 1, 2, 4, 1] 0
315 [1, 2, 3, 4, 5, 1, 2, 4] 0
316 [1, 2, 3, 4, 5, 1, 2, 1] 0
317 [1, 2, 3, 4, 5, 1, 2] 0
318 [1, 2, 3, 4, 5, 1, 3, 4, 3] 0
319 [1, 2, 3, 4, 5, 1, 3, 4] 0
320 [1, 2, 3, 4, 5, 1, 3] 0
321 [1, 2, 3, 4, 5, 1, 4] 0
322 [1, 2, 3, 4, 5, 1] 0
323 [1, 2, 3, 4, 5, 2, 3, 4, 2, 3, 2] 0
324 [1, 2, 3, 4, 5, 2, 3, 4, 2, 3] 0
325 [1, 2, 3, 4, 5, 2, 3, 4, 2] 0
326 [1, 2, 3, 4, 5, 2, 3, 4, 3] 0
327 [1, 2, 3, 4, 5, 2, 3, 4] 0
328 [1, 2, 3, 4, 5, 2, 3, 2] 0
329 [1, 2, 3, 4, 5, 2, 3] 0
330 [1, 2, 3, 4, 5, 2, 4] 0
331 [1, 2, 3, 4, 5, 2] 0
332 [1, 2, 3, 4, 5, 3, 4, 3] 0
333 [1, 2, 3, 4, 5, 3, 4] 0
334 [1, 2, 3, 4, 5, 3] 0
335 [1, 2, 3, 4, 5, 4] 0
336 [1, 2, 3, 4, 5] 0
337 [1, 2, 3, 4, 6, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
338 [1, 2, 3, 4, 6, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
339 [1, 2, 3, 4, 6, 1, 2, 3, 4, 1, 2, 3, 1] 0
340 [1, 2, 3, 4, 6, 1, 2, 3, 4, 1, 2, 3, 2] 0
341 [1, 2, 3, 4, 6, 1, 2, 3, 4, 1, 2, 3] 0
342 [1, 2, 3, 4, 6, 1, 2, 3, 4, 1, 2, 1] 0
343 [1, 2, 3, 4, 6, 1, 2, 3, 4, 1, 2] 0
344 [1, 2, 3, 4, 6, 1, 2, 3, 4, 1, 3] 0
345 [1, 2, 3, 4, 6, 1, 2, 3, 4, 1] 0
346 [1, 2, 3, 4, 6, 1, 2, 3, 4, 2, 3, 2] 0
347 [1, 2, 3, 4, 6, 1, 2, 3, 4, 2, 3] 0
348 [1, 2, 3, 4, 6, 1, 2, 3, 4, 2] 0
349 [1, 2, 3, 4, 6, 1, 2, 3, 4, 3] 0
350 [1, 2, 3, 4, 6, 1, 2, 3, 4] 0
351 [1, 2, 3, 4, 6, 1, 2, 3, 1, 2, 1] 0
352 [1, 2, 3, 4, 6, 1, 2, 3, 1, 2] 0
353 [1, 2, 3, 4, 6, 1, 2, 3, 1] 0
354 [1, 2, 3, 4, 6, 1, 2, 3, 2] 0
355 [1, 2, 3, 4, 6, 1, 2, 3] 0
356 [1, 2, 3, 4, 6, 1, 2, 4, 1] 0
357 [1, 2, 3, 4, 6, 1, 2, 4] 0
358 [1, 2, 3, 4, 6, 1, 2, 1] 0
359 [1, 2, 3, 4, 6, 1, 2] 0
360 [1, 2, 3, 4, 6, 1, 3, 4, 3] 0
361 [1, 2, 3, 4, 6, 1, 3, 4] 0
362 [1, 2, 3, 4, 6, 1, 3] 0
363 [1, 2, 3, 4, 6, 1, 4] 0
364 [1, 2, 3, 4, 6, 1] 0
365 [1, 2, 3, 4, 6, 2, 3, 4, 2, 3, 2] 0
366 [1, 2, 3, 4, 6, 2, 3, 4, 2, 3] 0
367 [1, 2, 3, 4, 6, 2, 3, 4, 2] 0
368 [1, 2, 3, 4, 6, 2, 3, 4, 3] 0
369 [1, 2, 3, 4, 6, 2, 3, 4] 0
370 [1, 2, 3, 4, 6, 2, 3, 2] 0
371 [1, 2, 3, 4, 6, 2, 3] 0
372 [1, 2, 3, 4, 6, 2, 4] 0
373 [1, 2, 3, 4, 6, 2] 0
374 [1, 2, 3, 4, 6, 3, 4, 3] 0
375 [1, 2, 3, 4, 6, 3, 4] 0
376 [1, 2, 3, 4, 6, 3] 0
377 [1, 2, 3, 4, 6, 4] 0
378 [1, 2, 3, 4, 6] 0
379 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
380 [1, 2, 3, 4, 1, 2, 3, 1, 2] 0
381 [1, 2, 3, 4, 1, 2, 3, 1] 0
382 [1, 2, 3, 4, 1, 2, 3, 2] 0
383 [1, 2, 3, 4, 1, 2, 3] 0
384 [1, 2, 3, 4, 1, 2, 1] 0
385 [1, 2, 3, 4, 1, 2] 0
386 [1, 2, 3, 4, 1, 3] 0
387 [1, 2, 3, 4, 1] 0
388 [1, 2, 3, 4, 2, 3, 2] 0
389 [1, 2, 3, 4, 2, 3] 0
390 [1, 2, 3, 4, 2] 0
391 [1, 2, 3, 4, 3] 0
392 [1, 2, 3, 4] 0
393 [1, 2, 3, 5, 6, 1, 2, 1] 0
394 [1, 2, 3, 5, 6, 1, 2] 0
395 [1, 2, 3, 5, 6, 1] 0
396 [1, 2, 3, 5, 6, 2] 0
397 [1, 2, 3, 5, 6] 0
398 [1, 2, 3, 5, 1, 2, 1] 0
399 [1, 2, 3, 5, 1, 2] 0
400 [1, 2, 3, 5, 1] 0
401 [1, 2, 3, 5, 2] 0
402 [1, 2, 3, 5] 0
403 [1, 2, 3, 6, 1, 2, 1] 0
404 [1, 2, 3, 6, 1, 2] 0
405 [1, 2, 3, 6, 1] 0
406 [1, 2, 3, 6, 2] 0
407 [1, 2, 3, 6] 0
408 [1, 2, 3, 1, 2, 1] 0
409 [1, 2, 3, 1, 2] 0
410 [1, 2, 3, 1] 0
411 [1, 2, 3, 2] 0
412 [1, 2, 3] 0
413 [1, 2, 4, 5, 6, 1, 4, 5, 6] 0
414 [1, 2, 4, 5, 6, 1, 4, 5] 0
415 [1, 2, 4, 5, 6, 1, 4, 6] 0
416 [1, 2, 4, 5, 6, 1, 4] 0
417 [1, 2, 4, 5, 6, 1] 0
418 [1, 2, 4, 5, 6, 4, 5, 6] 0
419 [1, 2, 4, 5, 6, 4, 5] 0
420 [1, 2, 4, 5, 6, 4, 6] 0
421 [1, 2, 4, 5, 6, 4] 0
422 [1, 2, 4, 5, 6] 0
423 [1, 2, 4, 5, 1, 4] 0
424 [1, 2, 4, 5, 1] 0
425 [1, 2, 4, 5, 4] 0
426 [1, 2, 4, 5] 0
427 [1, 2, 4, 6, 1, 4] 0
428 [1, 2, 4, 6, 1] 0
429 [1, 2, 4, 6, 4] 0
430 [1, 2, 4, 6] 0
431 [1, 2, 4, 1] 0
432 [1, 2, 4] 0
433 [1, 2, 5, 6, 1] 0
434 [1, 2, 5, 6] 0
435 [1, 2, 5, 1] 0
436 [1, 2, 5] 0
437 [1, 2, 6, 1] 0
438 [1, 2, 6] 0
439 [1, 2, 1] 0
440 [1, 2] 0
441 [1, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6] 0
442 [1, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5] 0
443 [1, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 6] 0
444 [1, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4] 0
445 [1, 3, 4, 5, 6, 3, 4, 5, 6, 3] 0
446 [1, 3, 4, 5, 6, 3, 4, 5, 6] 0
447 [1, 3, 4, 5, 6, 3, 4, 5, 3, 4] 0
448 [1, 3, 4, 5, 6, 3, 4, 5, 3] 0
449 [1, 3, 4, 5, 6, 3, 4, 5] 0
450 [1, 3, 4, 5, 6, 3, 4, 6, 3, 4] 0
451 [1, 3, 4, 5, 6, 3, 4, 6, 3] 0
452 [1, 3, 4, 5, 6, 3, 4, 6] 0
453 [1, 3, 4, 5, 6, 3, 4, 3] 0
454 [1, 3, 4, 5, 6, 3, 4] 0
455 [1, 3, 4, 5, 6, 3] 0
456 [1, 3, 4, 5, 6, 4, 5, 6] 0
457 [1, 3, 4, 5, 6, 4, 5] 0
458 [1, 3, 4, 5, 6, 4, 6] 0
459 [1, 3, 4, 5, 6, 4] 0
460 [1, 3, 4, 5, 6] 0
461 [1, 3, 4, 5, 3, 4, 3] 0
462 [1, 3, 4, 5, 3, 4] 0
463 [1, 3, 4, 5, 3] 0
464 [1, 3, 4, 5, 4] 0
465 [1, 3, 4, 5] 0
466 [1, 3, 4, 6, 3, 4, 3] 0
467 [1, 3, 4, 6, 3, 4] 0
468 [1, 3, 4, 6, 3] 0
469 [1, 3, 4, 6, 4] 0
470 [1, 3, 4, 6] 0
471 [1, 3, 4, 3] 0
472 [1, 3, 4] 0
473 [1, 3, 5, 6] 0
474 [1, 3, 5] 0
475 [1, 3, 6] 0
476 [1, 3] 0
477 [1, 4, 5, 6, 4, 5, 6] 0
478 [1, 4, 5, 6, 4, 5] 0
479 [1, 4, 5, 6, 4, 6] 0
480 [1, 4, 5, 6, 4] 0
481 [1, 4, 5, 6] 0
482 [1, 4, 5, 4] 0
483 [1, 4, 5] 0
484 [1, 4, 6, 4] 0
485 [1, 4, 6] 0
486 [1, 4] 0
487 [1, 5, 6] 0
488 [1, 5] 0
489 [1, 6] 0
490 [1] 0
491 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6] 0
492 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5] 0
493 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 6] 0
494 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4] 0
495 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3] 0
496 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2] 0
497 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6] 0
498 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4] 0
499 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3] 0
500 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2] 0
501 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5] 0
502 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 6, 2, 3, 4] 0
503 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 6, 2, 3] 0
504 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 6, 2] 0
505 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 6] 0
506 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3] 0
507 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 2] 0
508 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4] 0
509 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 2] 0
510 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3] 0
511 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2] 0
512 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5, 6] 0
513 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5] 0
514 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 6] 0
515 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4] 0
516 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3] 0
517 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6] 0
518 [2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2, 3] 0
519 [2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2] 0
520 [2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4] 0
521 [2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 2] 0
522 [2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3] 0
523 [2, 3, 4, 5, 6, 2, 3, 4, 5, 2] 0
524 [2, 3, 4, 5, 6, 2, 3, 4, 5, 3, 4] 0
525 [2, 3, 4, 5, 6, 2, 3, 4, 5, 3] 0
526 [2, 3, 4, 5, 6, 2, 3, 4, 5] 0
527 [2, 3, 4, 5, 6, 2, 3, 4, 6, 2, 3, 4, 2, 3] 0
528 [2, 3, 4, 5, 6, 2, 3, 4, 6, 2, 3, 4, 2] 0
529 [2, 3, 4, 5, 6, 2, 3, 4, 6, 2, 3, 4] 0
530 [2, 3, 4, 5, 6, 2, 3, 4, 6, 2, 3, 2] 0
531 [2, 3, 4, 5, 6, 2, 3, 4, 6, 2, 3] 0
532 [2, 3, 4, 5, 6, 2, 3, 4, 6, 2] 0
533 [2, 3, 4, 5, 6, 2, 3, 4, 6, 3, 4] 0
534 [2, 3, 4, 5, 6, 2, 3, 4, 6, 3] 0
535 [2, 3, 4, 5, 6, 2, 3, 4, 6] 0
536 [2, 3, 4, 5, 6, 2, 3, 4, 2, 3, 2] 0
537 [2, 3, 4, 5, 6, 2, 3, 4, 2, 3] 0
538 [2, 3, 4, 5, 6, 2, 3, 4, 2] 0
539 [2, 3, 4, 5, 6, 2, 3, 4, 3] 0
540 [2, 3, 4, 5, 6, 2, 3, 4] 0
541 [2, 3, 4, 5, 6, 2, 3, 2] 0
542 [2, 3, 4, 5, 6, 2, 3] 0
543 [2, 3, 4, 5, 6, 2, 4, 5, 6] 0
544 [2, 3, 4, 5, 6, 2, 4, 5] 0
545 [2, 3, 4, 5, 6, 2, 4, 6] 0
546 [2, 3, 4, 5, 6, 2, 4] 0
547 [2, 3, 4, 5, 6, 2] 0
548 [2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6] 0
549 [2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5] 0
550 [2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 6] 0
551 [2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4] 0
552 [2, 3, 4, 5, 6, 3, 4, 5, 6, 3] 0
553 [2, 3, 4, 5, 6, 3, 4, 5, 6] 0
554 [2, 3, 4, 5, 6, 3, 4, 5, 3, 4] 0
555 [2, 3, 4, 5, 6, 3, 4, 5, 3] 0
556 [2, 3, 4, 5, 6, 3, 4, 5] 0
557 [2, 3, 4, 5, 6, 3, 4, 6, 3, 4] 0
558 [2, 3, 4, 5, 6, 3, 4, 6, 3] 0
559 [2, 3, 4, 5, 6, 3, 4, 6] 0
560 [2, 3, 4, 5, 6, 3, 4, 3] 0
561 [2, 3, 4, 5, 6, 3, 4] 0
562 [2, 3, 4, 5, 6, 3] 0
563 [2, 3, 4, 5, 6, 4, 5, 6] 0
564 [2, 3, 4, 5, 6, 4, 5] 0
565 [2, 3, 4, 5, 6, 4, 6] 0
566 [2, 3, 4, 5, 6, 4] 0
567 [2, 3, 4, 5, 6] 0
568 [2, 3, 4, 5, 2, 3, 4, 2, 3, 2] 0
569 [2, 3, 4, 5, 2, 3, 4, 2, 3] 0
570 [2, 3, 4, 5, 2, 3, 4, 2] 0
571 [2, 3, 4, 5, 2, 3, 4, 3] 0
572 [2, 3, 4, 5, 2, 3, 4] 0
573 [2, 3, 4, 5, 2, 3, 2] 0
574 [2, 3, 4, 5, 2, 3] 0
575 [2, 3, 4, 5, 2, 4] 0
576 [2, 3, 4, 5, 2] 0
577 [2, 3, 4, 5, 3, 4, 3] 0
578 [2, 3, 4, 5, 3, 4] 0
579 [2, 3, 4, 5, 3] 0
580 [2, 3, 4, 5, 4] 0
581 [2, 3, 4, 5] 0
582 [2, 3, 4, 6, 2, 3, 4, 2, 3, 2] 0
583 [2, 3, 4, 6, 2, 3, 4, 2, 3] 0
584 [2, 3, 4, 6, 2, 3, 4, 2] 0
585 [2, 3, 4, 6, 2, 3, 4, 3] 0
586 [2, 3, 4, 6, 2, 3, 4] 0
587 [2, 3, 4, 6, 2, 3, 2] 0
588 [2, 3, 4, 6, 2, 3] 0
589 [2, 3, 4, 6, 2, 4] 0
590 [2, 3, 4, 6, 2] 0
591 [2, 3, 4, 6, 3, 4, 3] 0
592 [2, 3, 4, 6, 3, 4] 0
593 [2, 3, 4, 6, 3] 0
594 [2, 3, 4, 6, 4] 0
595 [2, 3, 4, 6] 0
596 [2, 3, 4, 2, 3, 2] 0
597 [2, 3, 4, 2, 3] 0
598 [2, 3, 4, 2] 0
599 [2, 3, 4, 3] 0
600 [2, 3, 4] 0
601 [2, 3, 5, 6, 2] 0
602 [2, 3, 5, 6] 0
603 [2, 3, 5, 2] 0
604 [2, 3, 5] 0
605 [2, 3, 6, 2] 0
606 [2, 3, 6] 0
607 [2, 3, 2] 0
608 [2, 3] 0
609 [2, 4, 5, 6, 4, 5, 6] 0
610 [2, 4, 5, 6, 4, 5] 0
611 [2, 4, 5, 6, 4, 6] 0
612 [2, 4, 5, 6, 4] 0
613 [2, 4, 5, 6] 0
614 [2, 4, 5, 4] 0
615 [2, 4, 5] 0
616 [2, 4, 6, 4] 0
617 [2, 4, 6] 0
618 [2, 4] 0
619 [2, 5, 6] 0
620 [2, 5] 0
621 [2, 6] 0
622 [2] 0
623 [3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6] 0
624 [3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5] 0
625 [3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 6] 0
626 [3, 4, 5, 6, 3, 4, 5, 6, 3, 4] 0
627 [3, 4, 5, 6, 3, 4, 5, 6, 3] 0
628 [3, 4, 5, 6, 3, 4, 5, 6] 0
629 [3, 4, 5, 6, 3, 4, 5, 3, 4] 0
630 [3, 4, 5, 6, 3, 4, 5, 3] 0
631 [3, 4, 5, 6, 3, 4, 5] 0
632 [3, 4, 5, 6, 3, 4, 6, 3, 4] 0
633 [3, 4, 5, 6, 3, 4, 6, 3] 0
634 [3, 4, 5, 6, 3, 4, 6] 0
635 [3, 4, 5, 6, 3, 4, 3] 0
636 [3, 4, 5, 6, 3, 4] 0
637 [3, 4, 5, 6, 3] 0
638 [3, 4, 5, 6, 4, 5, 6] 0
639 [3, 4, 5, 6, 4, 5] 0
640 [3, 4, 5, 6, 4, 6] 0
641 [3, 4, 5, 6, 4] 0
642 [3, 4, 5, 6] 0
643 [3, 4, 5, 3, 4, 3] 0
644 [3, 4, 5, 3, 4] 0
645 [3, 4, 5, 3] 0
646 [3, 4, 5, 4] 0
647 [3, 4, 5] 0
648 [3, 4, 6, 3, 4, 3] 0
649 [3, 4, 6, 3, 4] 0
650 [3, 4, 6, 3] 0
651 [3, 4, 6, 4] 0
652 [3, 4, 6] 0
653 [3, 4, 3] 0
654 [3, 4] 0
655 [3, 5, 6] 0
656 [3, 5] 0
657 [3, 6] 0
658 [3] 0
659 [4, 5, 6, 4, 5, 6] 0
660 [4, 5, 6, 4, 5] 0
661 [4, 5, 6, 4, 6] 0
662 [4, 5, 6, 4] 0
663 [4, 5, 6] 0
664 [4, 5, 4] 0
665 [4, 5] 0
666 [4, 6, 4] 0
667 [4, 6] 0
668 [4] 0
669 [5, 6] 0
670 [5] 0
671 [6] 0
672 [] 0
### reloading attached file domination4.py modified at 17:03:06 ###
Traceback (most recent call last):

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/IPython/core/interactiveshell.py:3433 in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)

  Cell In [509], line 1
    sage.repl.load.load(sage.repl.load.base64.b64decode("L1VzZXJzL3JlYWRpbmcvZ2l0L2FmZmluZV9kb21pbmFuY2Uvc29mdHdhcmUvZG9taW5hdGlvbjQucHk="),globals(),True)

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/repl/load.py:252 in load
    code = compile(f.read(), fpath, 'exec')

  File ~/git/affine_dominance/software/domination4.py:184
    ) )           out=out+[k+[c[0]]]
    ^
SyntaxError: unmatched ')'

### reloading attached file domination4.py modified at 17:03:37 ###
### reloading attached file domination4.py modified at 20:23:09 ###
### reloading attached file domination4.py modified at 20:26:16 ###
Traceback (most recent call last):

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/IPython/core/interactiveshell.py:3433 in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)

  Cell In [509], line 1
    sage.repl.load.load(sage.repl.load.base64.b64decode("L1VzZXJzL3JlYWRpbmcvZ2l0L2FmZmluZV9kb21pbmFuY2Uvc29mdHdhcmUvZG9taW5hdGlvbjQucHk="),globals(),True)

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/repl/load.py:252 in load
    code = compile(f.read(), fpath, 'exec')

  File ~/git/affine_dominance/software/domination4.py:206
    elif
         ^
SyntaxError: invalid syntax

### reloading attached file domination4.py modified at 20:28:18 ###
Traceback (most recent call last):

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/IPython/core/interactiveshell.py:3433 in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)

  Cell In [509], line 1
    sage.repl.load.load(sage.repl.load.base64.b64decode("L1VzZXJzL3JlYWRpbmcvZ2l0L2FmZmluZV9kb21pbmFuY2Uvc29mdHdhcmUvZG9taW5hdGlvbjQucHk="),globals(),True)

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/repl/load.py:252 in load
    code = compile(f.read(), fpath, 'exec')

  File ~/git/affine_dominance/software/domination4.py:212
    out=out+[k+[c[0]]]
    ^
IndentationError: unexpected indent

### reloading attached file domination4.py modified at 23:35:46 ###
### reloading attached file domination4.py modified at 23:38:40 ###
Traceback (most recent call last):

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/IPython/core/interactiveshell.py:3433 in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)

  Cell In [509], line 1
    sage.repl.load.load(sage.repl.load.base64.b64decode("L1VzZXJzL3JlYWRpbmcvZ2l0L2FmZmluZV9kb21pbmFuY2Uvc29mdHdhcmUvZG9taW5hdGlvbjQucHk="),globals(),True)

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/repl/load.py:252 in load
    code = compile(f.read(), fpath, 'exec')

  File ~/git/affine_dominance/software/domination4.py:226
    def Kc(c,coxnum):  # powers of c
    ^
IndentationError: expected an indented block after function definition on line 220

### reloading attached file domination4.py modified at 23:43:19 ###
Traceback (most recent call last):

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/IPython/core/interactiveshell.py:3433 in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)

  Cell In [509], line 1
    sage.repl.load.load(sage.repl.load.base64.b64decode("L1VzZXJzL3JlYWRpbmcvZ2l0L2FmZmluZV9kb21pbmFuY2Uvc29mdHdhcmUvZG9taW5hdGlvbjQucHk="),globals(),True)

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/repl/load.py:252 in load
    code = compile(f.read(), fpath, 'exec')

  File ~/git/affine_dominance/software/domination4.py:218
    if k=[]:
       ^
SyntaxError: invalid syntax. Maybe you meant '==' or ':=' instead of '='?

### reloading attached file domination4.py modified at 23:44:11 ###
Traceback (most recent call last):

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/IPython/core/interactiveshell.py:3433 in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)

  Cell In [509], line 1
    sage.repl.load.load(sage.repl.load.base64.b64decode("L1VzZXJzL3JlYWRpbmcvZ2l0L2FmZmluZV9kb21pbmFuY2Uvc29mdHdhcmUvZG9taW5hdGlvbjQucHk="),globals(),True)

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/repl/load.py:252 in load
    code = compile(f.read(), fpath, 'exec')

  File ~/git/affine_dominance/software/domination4.py:218
    if k=[]:
       ^
SyntaxError: invalid syntax. Maybe you meant '==' or ':=' instead of '='?

### reloading attached file domination4.py modified at 23:44:27 ###
### reloading attached file domination4.py modified at 23:46:06 ###
### reloading attached file domination4.py modified at 23:53:36 ###
### reloading attached file domination4.py modified at 23:54:08 ###
### reloading attached file domination4.py modified at 23:54:13 ###
### reloading attached file domination4.py modified at 00:16:25 ###
### reloading attached file domination4.py modified at 00:16:37 ###
### reloading attached file domination4.py modified at 13:26:39 ###
### reloading attached file domination4.py modified at 13:28:01 ###
### reloading attached file domination4.py modified at 13:32:33 ###
Traceback (most recent call last):

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/IPython/core/interactiveshell.py:3433 in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)

  Cell In [509], line 1
    sage.repl.load.load(sage.repl.load.base64.b64decode("L1VzZXJzL3JlYWRpbmcvZ2l0L2FmZmluZV9kb21pbmFuY2Uvc29mdHdhcmUvZG9taW5hdGlvbjQucHk="),globals(),True)

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/repl/load.py:252 in load
    code = compile(f.read(), fpath, 'exec')

  File ~/git/affine_dominance/software/domination4.py:176
    def B(A,c):  # Cartan matrix (assumes nonpositive off-diagonal entries) and Coxeter element (a list)
    ^
IndentationError: expected an indented block after function definition on line 171

### reloading attached file domination4.py modified at 13:32:52 ###
### reloading attached file domination4.py modified at 14:06:57 ###
Traceback (most recent call last):

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/IPython/core/interactiveshell.py:3433 in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)

  Cell In [509], line 1
    sage.repl.load.load(sage.repl.load.base64.b64decode("L1VzZXJzL3JlYWRpbmcvZ2l0L2FmZmluZV9kb21pbmFuY2Uvc29mdHdhcmUvZG9taW5hdGlvbjQucHk="),globals(),True)

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/repl/load.py:252 in load
    code = compile(f.read(), fpath, 'exec')

  File ~/git/affine_dominance/software/domination4.py:172
    rays=list(r.vector() for r in P.rays();
                                          ^
SyntaxError: invalid syntax

### reloading attached file domination4.py modified at 14:07:04 ###
### reloading attached file domination4.py modified at 14:14:27 ###
Traceback (most recent call last):

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/IPython/core/interactiveshell.py:3433 in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)

  Cell In [509], line 1
    sage.repl.load.load(sage.repl.load.base64.b64decode("L1VzZXJzL3JlYWRpbmcvZ2l0L2FmZmluZV9kb21pbmFuY2Uvc29mdHdhcmUvZG9taW5hdGlvbjQucHk="),globals(),True)

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/repl/load.py:252 in load
    code = compile(f.read(), fpath, 'exec')

  File ~/git/affine_dominance/software/domination4.py:177
    rays=rays+[vertvec-
              ^
SyntaxError: '[' was never closed

### reloading attached file domination4.py modified at 14:16:43 ###
### reloading attached file domination4.py modified at 14:22:47 ###
### reloading attached file domination4.py modified at 14:33:09 ###
### reloading attached file domination4.py modified at 15:29:51 ###
### reloading attached file domination4.py modified at 15:31:02 ###
### reloading attached file domination4.py modified at 16:14:48 ###
### reloading attached file domination4.py modified at 16:15:23 ###
### reloading attached file domination4.py modified at 19:00:21 ###
### reloading attached file domination4.py modified at 19:02:11 ###
### reloading attached file domination4.py modified at 14:24:50 ###
### reloading attached file domination4.py modified at 14:25:52 ###
### reloading attached file domination4.py modified at 14:27:40 ###
### reloading attached file domination4.py modified at 13:55:22 ###
### reloading attached file domination4.py modified at 13:22:15 ###
### reloading attached file domination4.py modified at 13:29:07 ###
### reloading attached file domination4.py modified at 17:59:28 ###
sage: A=CartanMatrix(['D',7])
....: c=[0,1,2,3,4,5,6]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),K(c,v)).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
....: 
1 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6] 0
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [509], line 6
      4 for v in sortables(A,c[Integer(1):]):
      5     num+=Integer(1)
----> 6     d=p_lambda_int(B(A,c),lam(A,v),K(c,v)).dimension()
      7     print(num,v,d)
      8     if d!=Integer(0):

File ~/git/affine_dominance/software/domination4.py:127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_faster(B, la, seqs[0])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_faster(B, la, s))
    128     if P.dimension()==0:
    129         break

File ~/git/affine_dominance/software/domination4.py:161, in p_lambda_faster(B, la, seq)
    157         P=Ep*Pp
    158     else:
    159         #print("Pp:   ",Pp,Pp.vertices(),Pp.rays(),Pp.lines(),"\n")
    160         #print("Pm:   ",Pm,Pm.vertices(),Pm.rays(),Pm.lines(),"\n\n")
--> 161         P=(Ep*Pp).convex_hull(Em*Pm)
    162     B.mutate(k)
    163 return P

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4099, in sage.structure.element.Matrix.__mul__ (build/cythonized/sage/structure/element.c:35219)()
   4097 
   4098         if BOTH_ARE_ELEMENT(cl):
-> 4099             return coercion_model.bin_op(left, right, mul)
   4100 
   4101         cdef long value

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1222, in sage.structure.coerce.CoercionModel.bin_op (build/cythonized/sage/structure/coerce.c:15809)()
   1220 if action is not None:
   1221     if (<Action>action)._is_left:
-> 1222         return (<Action>action)._act_(x, y)
   1223     else:
   1224         return (<Action>action)._act_(y, x)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_actions.pyx:157, in sage.structure.coerce_actions.ActedUponAction._act_ (build/cythonized/sage/structure/coerce_actions.c:8579)()
    155     <... 'sage.structure.coerce_actions.ActedUponAction'>
    156 """
--> 157 return (<Element>x)._acted_upon_(g, not self._is_left)
    158 
    159 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:949, in sage.structure.element.Element._acted_upon_ (build/cythonized/sage/structure/element.c:16495)()
    947     return None
    948 
--> 949 cpdef _acted_upon_(self, x, bint self_on_left) noexcept:
    950     """
    951     Use this method to implement ``self`` acted on by x.

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1450, in Polyhedron_base5._acted_upon_(self, actor, self_on_left)
   1448         raise ValueError("matrices should act on the left")
   1449     else:
-> 1450         return self.linear_transformation(actor)
   1451 else:
   1452     return self.dilation(actor)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1879, in Polyhedron_base5.linear_transformation(self, linear_transf, new_base_ring)
   1873     pref_rep = 'Vrep' if self.n_vertices() <= self.n_inequalities() else 'Hrep'
   1875     return new_parent.element_class(new_parent, [new_vertices, new_rays, new_lines],
   1876                                     [new_inequalities, new_equations],
   1877                                     Vrep_minimal=True, Hrep_minimal=True, pref_rep=pref_rep)
-> 1879 return new_parent.element_class(new_parent, [tuple(new_vertices), tuple(new_rays), tuple(new_lines)], None)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:174, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    171     lines = tuple(lines)
    173 if vertices or rays or lines:
--> 174     self._init_from_Vrepresentation(vertices, rays, lines, **kwds)
    175 else:
    176     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:99, in Polyhedron_ppl._init_from_Vrepresentation(self, vertices, rays, lines, minimize, verbose)
     72 def _init_from_Vrepresentation(self, vertices, rays, lines, minimize=True, verbose=False):
     73     """
     74     Construct polyhedron from V-representation data.
     75 
   (...)
     97         sage: Polyhedron_ppl._init_from_Vrepresentation(p, [], [], [])
     98     """
---> 99     gs = self._convert_generators_to_ppl(vertices, rays, lines)
    100     if gs.empty():
    101         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'empty')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:477, in Polyhedron_ppl._convert_generators_to_ppl(vertices, rays, lines)
    475     rays = []
    476 for r in rays:
--> 477     gs.insert(Polyhedron_ppl._convert_generator_to_ppl(r, RAY))
    478 if lines is None:
    479     lines = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:442, in Polyhedron_ppl._convert_generator_to_ppl(v, typ)
    440 d = LCM_list([denominator(v_i) for v_i in v])
    441 if d.is_one():
--> 442     return ob(Linear_Expression(v, 0))
    443 else:
    444     dv = [ d*v_i for v_i in v ]

File ppl/linear_algebra.pyx:654, in ppl.linear_algebra.Linear_Expression.__init__()

File ppl/linear_algebra.pyx:49, in ppl.linear_algebra.PPL_Coefficient_from_pyobject()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:1107, in sage.structure.element.Element.__richcmp__ (build/cythonized/sage/structure/element.c:18121)()
   1105         return (<Element>self)._richcmp_(other, op)
   1106     else:
-> 1107         return coercion_model.richcmp(self, other, op)
   1108 
   1109 cpdef _richcmp_(left, right, int op) noexcept:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:2021, in sage.structure.coerce.CoercionModel.richcmp (build/cythonized/sage/structure/coerce.c:26173)()
   2019 # Coerce to a common parent
   2020 try:
-> 2021     x, y = self.canonical_coercion(x, y)
   2022 except (TypeError, NotImplementedError):
   2023     pass

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1422, in sage.structure.coerce.CoercionModel.canonical_coercion (build/cythonized/sage/structure/coerce.c:18956)()
   1420             self._record_exception()
   1421 
-> 1422     raise TypeError("no common canonical parent for objects with parents: '%s' and '%s'"%(xp, yp))
   1423 
   1424 cpdef coercion_maps(self, R, S) noexcept:

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),[c_inf_prefix(c,0),c_inf_prefix(c,3)])
....:     print(num,v,d)
....: 
....: 
1 [1, 2, 1, 2] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray
2 [1, 2, 1] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray
3 [1, 2] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray
4 [1] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray
5 [2] A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray
6 [] A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),[c_inf_prefix(reversed(c),3),c_inf_pref
....: ix(c,0),c_inf_prefix(c,3)])
....:     print(num,v,d)
....: 
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In [511], line 6
      4 for v in sortables(A,c[Integer(1):]):
      5     num+=Integer(1)
----> 6     d=p_lambda_int(B(A,c),lam(A,v),[c_inf_prefix(reversed(c),Integer(3)),c_inf_prefix(c,Integer(0)),c_inf_prefix(c,Integer(3))])
      7     print(num,v,d)

File ~/git/affine_dominance/software/domination4.py:283, in c_inf_prefix(c, i)
    282 def c_inf_prefix(c,i):
--> 283     return list(c[j%len(c)] for j in range(i))

File ~/git/affine_dominance/software/domination4.py:283, in <genexpr>(.0)
    282 def c_inf_prefix(c,i):
--> 283     return list(c[j%len(c)] for j in range(i))

TypeError: object of type 'list_reverseiterator' has no len()
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),[c_inf_prefix(list(reversed(c)),3),c_in
....: f_prefix(c,0),c_inf_prefix(c,3)])
....:     print(num,v,d)
....: 
1 [1, 2, 1, 2] A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices
2 [1, 2, 1] A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices
3 [1, 2] A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices
4 [1] A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices
5 [2] A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices
6 [] A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),[c_inf_prefix(list(reversed(c)),3),c_in
....: f_prefix(c,0),c_inf_prefix(c,3)])
....:     print(num,v,d)
1 [1, 2, 3, 1, 2, 3, 1, 2, 3] A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
2 [1, 2, 3, 1, 2, 3, 1, 2] A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
3 [1, 2, 3, 1, 2, 3, 1] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices
4 [1, 2, 3, 1, 2, 3] A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 5 vertices
5 [1, 2, 3, 1, 2, 1] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 4 vertices
6 [1, 2, 3, 1, 2] A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 8 vertices
7 [1, 2, 3, 1] A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 9 vertices
8 [1, 2, 3, 2, 3] A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
9 [1, 2, 3, 2] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices
10 [1, 2, 3] A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 7 vertices
11 [1, 2, 1] A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 6 vertices
12 [1, 2] A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 4 vertices
13 [1, 3] A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
14 [1] A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
15 [2, 3, 2, 3] A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
16 [2, 3, 2] A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
17 [2, 3] A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
18 [2] A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
19 [3] A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
20 [] A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),[c_inf_prefix(list(reversed(c)),3)]+lis
....: t(c_inf_prefix(c,i) for i in [0,3]))
....:     print(num,v,d)
1 [1, 2, 3, 1, 2, 3, 1, 2, 3] A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
2 [1, 2, 3, 1, 2, 3, 1, 2] A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
3 [1, 2, 3, 1, 2, 3, 1] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices
4 [1, 2, 3, 1, 2, 3] A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 5 vertices
5 [1, 2, 3, 1, 2, 1] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 4 vertices
6 [1, 2, 3, 1, 2] A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 8 vertices
7 [1, 2, 3, 1] A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 9 vertices
8 [1, 2, 3, 2, 3] A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
9 [1, 2, 3, 2] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices
10 [1, 2, 3] A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 7 vertices
11 [1, 2, 1] A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 6 vertices
12 [1, 2] A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 4 vertices
13 [1, 3] A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
14 [1] A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
15 [2, 3, 2, 3] A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
16 [2, 3, 2] A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
17 [2, 3] A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
18 [2] A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
19 [3] A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
20 [] A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),[c_inf_prefix(list(reversed(c)),3)]+lis
....: t(c_inf_prefix(c,i) for i in [0,3,6]))
....:     print(num,v,d)
1 [1, 2, 3, 1, 2, 3, 1, 2, 3] A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
2 [1, 2, 3, 1, 2, 3, 1, 2] A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
3 [1, 2, 3, 1, 2, 3, 1] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices
4 [1, 2, 3, 1, 2, 3] A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 4 vertices
5 [1, 2, 3, 1, 2, 1] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 4 vertices
6 [1, 2, 3, 1, 2] A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 7 vertices
7 [1, 2, 3, 1] A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 7 vertices
8 [1, 2, 3, 2, 3] A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
9 [1, 2, 3, 2] A 2-dimensional polyhedron in QQ^4 defined as the convex hull of 3 vertices
10 [1, 2, 3] A 3-dimensional polyhedron in QQ^4 defined as the convex hull of 4 vertices
11 [1, 2, 1] A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
12 [1, 2] A 1-dimensional polyhedron in QQ^4 defined as the convex hull of 2 vertices
13 [1, 3] A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
14 [1] A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
15 [2, 3, 2, 3] A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
16 [2, 3, 2] A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
17 [2, 3] A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
18 [2] A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
19 [3] A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
20 [] A 0-dimensional polyhedron in QQ^4 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),[c_inf_prefix(list(reversed(c)),3)]+lis
....: t(c_inf_prefix(c,i) for i in [0,3,6])).dimension()
....:     print(num,v,d)
....: 
1 [1, 2, 3, 1, 2, 3, 1, 2, 3] 0
2 [1, 2, 3, 1, 2, 3, 1, 2] 0
3 [1, 2, 3, 1, 2, 3, 1] 2
4 [1, 2, 3, 1, 2, 3] 3
5 [1, 2, 3, 1, 2, 1] 2
6 [1, 2, 3, 1, 2] 3
7 [1, 2, 3, 1] 3
8 [1, 2, 3, 2, 3] 0
9 [1, 2, 3, 2] 2
10 [1, 2, 3] 3
11 [1, 2, 1] 1
12 [1, 2] 1
13 [1, 3] 0
14 [1] 0
15 [2, 3, 2, 3] 0
16 [2, 3, 2] 0
17 [2, 3] 0
18 [2] 0
19 [3] 0
20 [] 0
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),[c_inf_prefix(list(reversed(c)),3)]+lis
....: t(c_inf_prefix(c,i) for i in [0,4])).dimension()
....:     print(num,v,d)
1 [1, 2, 3, 1, 2, 3, 1, 2, 3] 0
2 [1, 2, 3, 1, 2, 3, 1, 2] 0
3 [1, 2, 3, 1, 2, 3, 1] 2
4 [1, 2, 3, 1, 2, 3] 3
5 [1, 2, 3, 1, 2, 1] 2
6 [1, 2, 3, 1, 2] 3
7 [1, 2, 3, 1] 3
8 [1, 2, 3, 2, 3] 0
9 [1, 2, 3, 2] 2
10 [1, 2, 3] 3
11 [1, 2, 1] 1
12 [1, 2] 1
13 [1, 3] 0
14 [1] 0
15 [2, 3, 2, 3] 0
16 [2, 3, 2] 0
17 [2, 3] 0
18 [2] 0
19 [3] 0
20 [] 0
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),[c_inf_prefix(list(reversed(c)),3)]+lis
....: t(c_inf_prefix(c,i) for i in [0,4,8])).dimension()
....:     print(num,v,d)
1 [1, 2, 3, 1, 2, 3, 1, 2, 3] 0
2 [1, 2, 3, 1, 2, 3, 1, 2] 0
3 [1, 2, 3, 1, 2, 3, 1] 2
4 [1, 2, 3, 1, 2, 3] 3
5 [1, 2, 3, 1, 2, 1] 2
6 [1, 2, 3, 1, 2] 3
7 [1, 2, 3, 1] 3
8 [1, 2, 3, 2, 3] 0
9 [1, 2, 3, 2] 2
10 [1, 2, 3] 3
11 [1, 2, 1] 1
12 [1, 2] 1
13 [1, 3] 0
14 [1] 0
15 [2, 3, 2, 3] 0
16 [2, 3, 2] 0
17 [2, 3] 0
18 [2] 0
19 [3] 0
20 [] 0
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),[c_inf_prefix(list(reversed(c)),3)]+lis
....: t(c_inf_prefix(c,i) for i in [0,4,8,12])).dimension()
....:     print(num,v,d)
1 [1, 2, 3, 1, 2, 3, 1, 2, 3] 0
2 [1, 2, 3, 1, 2, 3, 1, 2] 0
3 [1, 2, 3, 1, 2, 3, 1] 0
4 [1, 2, 3, 1, 2, 3] 0
5 [1, 2, 3, 1, 2, 1] 0
6 [1, 2, 3, 1, 2] 0
7 [1, 2, 3, 1] 0
8 [1, 2, 3, 2, 3] 0
9 [1, 2, 3, 2] 0
10 [1, 2, 3] 0
11 [1, 2, 1] 0
12 [1, 2] 0
13 [1, 3] 0
14 [1] 0
15 [2, 3, 2, 3] 0
16 [2, 3, 2] 0
17 [2, 3] 0
18 [2] 0
19 [3] 0
20 [] 0
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i) for i in [0,4,8,
....: 12])).dimension()
....:     print(num,v,d)
1 [1, 2, 3, 1, 2, 3, 1, 2, 3] 3
2 [1, 2, 3, 1, 2, 3, 1, 2] 3
3 [1, 2, 3, 1, 2, 3, 1] 3
4 [1, 2, 3, 1, 2, 3] 3
5 [1, 2, 3, 1, 2, 1] 1
6 [1, 2, 3, 1, 2] 1
7 [1, 2, 3, 1] 0
8 [1, 2, 3, 2, 3] 0
9 [1, 2, 3, 2] 0
10 [1, 2, 3] 0
11 [1, 2, 1] 0
12 [1, 2] 0
13 [1, 3] 0
14 [1] 0
15 [2, 3, 2, 3] 2
16 [2, 3, 2] 2
17 [2, 3] 2
18 [2] 0
19 [3] 0
20 [] 0
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),[c_inf_prefix(list(reversed(c)),3)]+lis
....: t(c_inf_prefix(c,i) for i in [0,4,8,12])).dimension()
....:     print(num,v,d)
....: 
1 [1, 2, 3, 1, 2, 3, 1, 2, 3] 0
2 [1, 2, 3, 1, 2, 3, 1, 2] 0
3 [1, 2, 3, 1, 2, 3, 1] 0
4 [1, 2, 3, 1, 2, 3] 0
5 [1, 2, 3, 1, 2, 1] 0
6 [1, 2, 3, 1, 2] 0
7 [1, 2, 3, 1] 0
8 [1, 2, 3, 2, 3] 0
9 [1, 2, 3, 2] 0
10 [1, 2, 3] 0
11 [1, 2, 1] 0
12 [1, 2] 0
13 [1, 3] 0
14 [1] 0
15 [2, 3, 2, 3] 0
16 [2, 3, 2] 0
17 [2, 3] 0
18 [2] 0
19 [3] 0
20 [] 0
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),[c_inf_prefix(list(reversed(c)),3)]+lis
....: t(c_inf_prefix(c,i*A.nrows()) for i in [0,1,2,13])).dimension()
....:     print(num,v,d)
1 [1, 2, 3, 1, 2, 3, 1, 2, 3] 0
2 [1, 2, 3, 1, 2, 3, 1, 2] 0
3 [1, 2, 3, 1, 2, 3, 1] 0
4 [1, 2, 3, 1, 2, 3] 0
5 [1, 2, 3, 1, 2, 1] 0
6 [1, 2, 3, 1, 2] 0
7 [1, 2, 3, 1] 0
8 [1, 2, 3, 2, 3] 0
9 [1, 2, 3, 2] 0
10 [1, 2, 3] 0
11 [1, 2, 1] 0
12 [1, 2] 0
13 [1, 3] 0
14 [1] 0
15 [2, 3, 2, 3] 0
16 [2, 3, 2] 0
17 [2, 3] 0
18 [2] 0
19 [3] 0
20 [] 0
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),[c_inf_prefix(list(reversed(c)),3)]+lis
....: t(c_inf_prefix(c,i*A.nrows()) for i in [0,1,2,3])).dimension()
....:     print(num,v,d)
1 [1, 2, 3, 1, 2, 3, 1, 2, 3] 0
2 [1, 2, 3, 1, 2, 3, 1, 2] 0
3 [1, 2, 3, 1, 2, 3, 1] 0
4 [1, 2, 3, 1, 2, 3] 0
5 [1, 2, 3, 1, 2, 1] 0
6 [1, 2, 3, 1, 2] 0
7 [1, 2, 3, 1] 0
8 [1, 2, 3, 2, 3] 0
9 [1, 2, 3, 2] 0
10 [1, 2, 3] 0
11 [1, 2, 1] 0
12 [1, 2] 0
13 [1, 3] 0
14 [1] 0
15 [2, 3, 2, 3] 0
16 [2, 3, 2] 0
17 [2, 3] 0
18 [2] 0
19 [3] 0
20 [] 0
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),[c_inf_prefix(list(reversed(c)),3)]+lis
....: t(c_inf_prefix(c,i*A.nrows()) for i in [0,1,2,3,4])).dimension()
....:     print(num,v,d)
1 [1, 2, 3, 1, 2, 3, 1, 2, 3] 0
2 [1, 2, 3, 1, 2, 3, 1, 2] 0
3 [1, 2, 3, 1, 2, 3, 1] 0
4 [1, 2, 3, 1, 2, 3] 0
5 [1, 2, 3, 1, 2, 1] 0
6 [1, 2, 3, 1, 2] 0
7 [1, 2, 3, 1] 0
8 [1, 2, 3, 2, 3] 0
9 [1, 2, 3, 2] 0
10 [1, 2, 3] 0
11 [1, 2, 1] 0
12 [1, 2] 0
13 [1, 3] 0
14 [1] 0
15 [2, 3, 2, 3] 0
16 [2, 3, 2] 0
17 [2, 3] 0
18 [2] 0
19 [3] 0
20 [] 0
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()) for i
....: in [0,1,2,3,4])).dimension()
....:     print(num,v,d)
1 [1, 2, 3, 1, 2, 3, 1, 2, 3] 0
2 [1, 2, 3, 1, 2, 3, 1, 2] 0
3 [1, 2, 3, 1, 2, 3, 1] 0
4 [1, 2, 3, 1, 2, 3] 0
5 [1, 2, 3, 1, 2, 1] 0
6 [1, 2, 3, 1, 2] 0
7 [1, 2, 3, 1] 0
8 [1, 2, 3, 2, 3] 0
9 [1, 2, 3, 2] 0
10 [1, 2, 3] 0
11 [1, 2, 1] 0
12 [1, 2] 0
13 [1, 3] 0
14 [1] 0
15 [2, 3, 2, 3] 0
16 [2, 3, 2] 0
17 [2, 3] 0
18 [2] 0
19 [3] 0
20 [] 0
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()) for i
....: in [0,1,2,3])).dimension()
....:     print(num,v,d)
....: 
1 [1, 2, 3, 1, 2, 3, 1, 2, 3] 3
2 [1, 2, 3, 1, 2, 3, 1, 2] 3
3 [1, 2, 3, 1, 2, 3, 1] 3
4 [1, 2, 3, 1, 2, 3] 3
5 [1, 2, 3, 1, 2, 1] 1
6 [1, 2, 3, 1, 2] 1
7 [1, 2, 3, 1] 0
8 [1, 2, 3, 2, 3] 0
9 [1, 2, 3, 2] 0
10 [1, 2, 3] 0
11 [1, 2, 1] 0
12 [1, 2] 0
13 [1, 3] 0
14 [1] 0
15 [2, 3, 2, 3] 2
16 [2, 3, 2] 2
17 [2, 3] 2
18 [2] 0
19 [3] 0
20 [] 0
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()) for i
....: in [0,1,2,3,4])).dimension()
....:     print(num,v,d)
....: 
1 [1, 2, 3, 1, 2, 3, 1, 2, 3] 0
2 [1, 2, 3, 1, 2, 3, 1, 2] 0
3 [1, 2, 3, 1, 2, 3, 1] 0
4 [1, 2, 3, 1, 2, 3] 0
5 [1, 2, 3, 1, 2, 1] 0
6 [1, 2, 3, 1, 2] 0
7 [1, 2, 3, 1] 0
8 [1, 2, 3, 2, 3] 0
9 [1, 2, 3, 2] 0
10 [1, 2, 3] 0
11 [1, 2, 1] 0
12 [1, 2] 0
13 [1, 3] 0
14 [1] 0
15 [2, 3, 2, 3] 0
16 [2, 3, 2] 0
17 [2, 3] 0
18 [2] 0
19 [3] 0
20 [] 0
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()) for i
....: in range(A.nrows()+1))).dimension()
....:     print(num,v,d)
....: 
1 [1, 2, 3, 1, 2, 3, 1, 2, 3] 0
2 [1, 2, 3, 1, 2, 3, 1, 2] 0
3 [1, 2, 3, 1, 2, 3, 1] 0
4 [1, 2, 3, 1, 2, 3] 0
5 [1, 2, 3, 1, 2, 1] 0
6 [1, 2, 3, 1, 2] 0
7 [1, 2, 3, 1] 0
8 [1, 2, 3, 2, 3] 0
9 [1, 2, 3, 2] 0
10 [1, 2, 3] 0
11 [1, 2, 1] 0
12 [1, 2] 0
13 [1, 3] 0
14 [1] 0
15 [2, 3, 2, 3] 0
16 [2, 3, 2] 0
17 [2, 3] 0
18 [2] 0
19 [3] 0
20 [] 0
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()) for i
....: in range(A.nrows()))).dimension()
....:     print(num,v,d)
1 [1, 2, 3, 1, 2, 3, 1, 2, 3] 3
2 [1, 2, 3, 1, 2, 3, 1, 2] 3
3 [1, 2, 3, 1, 2, 3, 1] 3
4 [1, 2, 3, 1, 2, 3] 3
5 [1, 2, 3, 1, 2, 1] 1
6 [1, 2, 3, 1, 2] 1
7 [1, 2, 3, 1] 0
8 [1, 2, 3, 2, 3] 0
9 [1, 2, 3, 2] 0
10 [1, 2, 3] 0
11 [1, 2, 1] 0
12 [1, 2] 0
13 [1, 3] 0
14 [1] 0
15 [2, 3, 2, 3] 2
16 [2, 3, 2] 2
17 [2, 3] 2
18 [2] 0
19 [3] 0
20 [] 0
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: num=0
....: for v in sortables(A,c):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()) for i
....: in range(A.nrows()+1))).dimension()
....:     print(num,v,d)
1 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3] 0
2 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2] 0
3 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1] 0
4 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0] 0
5 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3] 0
6 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 0, 1] 0
7 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 0] 0
8 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2] 0
9 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 0] 0
10 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1] 0
11 [0, 1, 2, 3, 0, 1, 2, 3, 0] 0
12 [0, 1, 2, 3, 0, 1, 2, 3, 1, 2, 3] 0
13 [0, 1, 2, 3, 0, 1, 2, 3, 1, 2] 0
14 [0, 1, 2, 3, 0, 1, 2, 3, 1] 0
15 [0, 1, 2, 3, 0, 1, 2, 3] 0
16 [0, 1, 2, 3, 0, 1, 2, 0, 1, 0] 0
17 [0, 1, 2, 3, 0, 1, 2, 0, 1] 0
18 [0, 1, 2, 3, 0, 1, 2, 0] 0
19 [0, 1, 2, 3, 0, 1, 2, 1] 0
20 [0, 1, 2, 3, 0, 1, 2] 0
21 [0, 1, 2, 3, 0, 1, 0] 0
22 [0, 1, 2, 3, 0, 1] 0
23 [0, 1, 2, 3, 0, 2, 3] 0
24 [0, 1, 2, 3, 0, 2] 0
25 [0, 1, 2, 3, 0] 0
26 [0, 1, 2, 3, 1, 2, 3, 1, 2, 3] 0
27 [0, 1, 2, 3, 1, 2, 3, 1, 2] 0
28 [0, 1, 2, 3, 1, 2, 3, 1] 0
29 [0, 1, 2, 3, 1, 2, 3] 0
30 [0, 1, 2, 3, 1, 2, 1] 0
31 [0, 1, 2, 3, 1, 2] 0
32 [0, 1, 2, 3, 1] 0
33 [0, 1, 2, 3, 2, 3] 0
34 [0, 1, 2, 3, 2] 0
35 [0, 1, 2, 3] 0
36 [0, 1, 2, 0, 1, 0] 0
37 [0, 1, 2, 0, 1] 0
38 [0, 1, 2, 0] 0
39 [0, 1, 2, 1] 0
40 [0, 1, 2] 0
41 [0, 1, 3, 0] 0
42 [0, 1, 3] 0
43 [0, 1, 0] 0
44 [0, 1] 0
45 [0, 2, 3, 2, 3] 0
46 [0, 2, 3, 2] 0
47 [0, 2, 3] 0
48 [0, 2] 0
49 [0, 3] 0
50 [0] 0
51 [1, 2, 3, 1, 2, 3, 1, 2, 3] 0
52 [1, 2, 3, 1, 2, 3, 1, 2] 0
53 [1, 2, 3, 1, 2, 3, 1] 0
54 [1, 2, 3, 1, 2, 3] 0
55 [1, 2, 3, 1, 2, 1] 0
56 [1, 2, 3, 1, 2] 0
57 [1, 2, 3, 1] 0
58 [1, 2, 3, 2, 3] 0
59 [1, 2, 3, 2] 0
60 [1, 2, 3] 0
61 [1, 2, 1] 0
62 [1, 2] 0
63 [1, 3] 0
64 [1] 0
65 [2, 3, 2, 3] 0
66 [2, 3, 2] 0
67 [2, 3] 0
68 [2] 0
69 [3] 0
70 [] 0
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: num=0
....: for v in sortables(A,c):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()) for i
....: in range(A.nrows()+1))).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
....: 
1 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3] 0
2 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2] 0
3 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1] 0
4 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0] 0
5 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3] 0
6 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 0, 1] 0
7 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 0] 0
8 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2] 0
9 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 0] 0
10 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1] 0
11 [0, 1, 2, 3, 0, 1, 2, 3, 0] 0
12 [0, 1, 2, 3, 0, 1, 2, 3, 1, 2, 3] 0
13 [0, 1, 2, 3, 0, 1, 2, 3, 1, 2] 0
14 [0, 1, 2, 3, 0, 1, 2, 3, 1] 0
15 [0, 1, 2, 3, 0, 1, 2, 3] 0
16 [0, 1, 2, 3, 0, 1, 2, 0, 1, 0] 0
17 [0, 1, 2, 3, 0, 1, 2, 0, 1] 0
18 [0, 1, 2, 3, 0, 1, 2, 0] 0
19 [0, 1, 2, 3, 0, 1, 2, 1] 0
20 [0, 1, 2, 3, 0, 1, 2] 0
21 [0, 1, 2, 3, 0, 1, 0] 0
22 [0, 1, 2, 3, 0, 1] 0
23 [0, 1, 2, 3, 0, 2, 3] 0
24 [0, 1, 2, 3, 0, 2] 0
25 [0, 1, 2, 3, 0] 0
26 [0, 1, 2, 3, 1, 2, 3, 1, 2, 3] 0
27 [0, 1, 2, 3, 1, 2, 3, 1, 2] 0
28 [0, 1, 2, 3, 1, 2, 3, 1] 0
29 [0, 1, 2, 3, 1, 2, 3] 0
30 [0, 1, 2, 3, 1, 2, 1] 0
31 [0, 1, 2, 3, 1, 2] 0
32 [0, 1, 2, 3, 1] 0
33 [0, 1, 2, 3, 2, 3] 0
34 [0, 1, 2, 3, 2] 0
35 [0, 1, 2, 3] 0
36 [0, 1, 2, 0, 1, 0] 0
37 [0, 1, 2, 0, 1] 0
38 [0, 1, 2, 0] 0
39 [0, 1, 2, 1] 0
40 [0, 1, 2] 0
41 [0, 1, 3, 0] 0
42 [0, 1, 3] 0
43 [0, 1, 0] 0
44 [0, 1] 0
45 [0, 2, 3, 2, 3] 0
46 [0, 2, 3, 2] 0
47 [0, 2, 3] 0
48 [0, 2] 0
49 [0, 3] 0
50 [0] 0
51 [1, 2, 3, 1, 2, 3, 1, 2, 3] 0
52 [1, 2, 3, 1, 2, 3, 1, 2] 0
53 [1, 2, 3, 1, 2, 3, 1] 0
54 [1, 2, 3, 1, 2, 3] 0
55 [1, 2, 3, 1, 2, 1] 0
56 [1, 2, 3, 1, 2] 0
57 [1, 2, 3, 1] 0
58 [1, 2, 3, 2, 3] 0
59 [1, 2, 3, 2] 0
60 [1, 2, 3] 0
61 [1, 2, 1] 0
62 [1, 2] 0
63 [1, 3] 0
64 [1] 0
65 [2, 3, 2, 3] 0
66 [2, 3, 2] 0
67 [2, 3] 0
68 [2] 0
69 [3] 0
70 [] 0
### reloading attached file domination4.py modified at 12:49:13 ###
sage: attach('/Users/reading/git/affine_dominance/software/domination5.py')
### reloading attached file domination5.py modified at 13:28:05 ###
### reloading attached file domination5.py modified at 13:28:39 ###
### reloading attached file domination5.py modified at 13:29:35 ###
### reloading attached file domination5.py modified at 13:34:46 ###
### reloading attached file domination5.py modified at 13:35:55 ###
Traceback (most recent call last):

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/IPython/core/interactiveshell.py:3433 in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)

  Cell In [533], line 1
    sage.repl.load.load(sage.repl.load.base64.b64decode("L1VzZXJzL3JlYWRpbmcvZ2l0L2FmZmluZV9kb21pbmFuY2Uvc29mdHdhcmUvZG9taW5hdGlvbjUucHk="),globals(),True)

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/repl/load.py:252 in load
    code = compile(f.read(), fpath, 'exec')

  File ~/git/affine_dominance/software/domination5.py:241
    def lam(A,v):
    ^
IndentationError: expected an indented block after function definition on line 235

### reloading attached file domination5.py modified at 13:36:59 ###
Traceback (most recent call last):

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/IPython/core/interactiveshell.py:3433 in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)

  Cell In [533], line 1
    sage.repl.load.load(sage.repl.load.base64.b64decode("L1VzZXJzL3JlYWRpbmcvZ2l0L2FmZmluZV9kb21pbmFuY2Uvc29mdHdhcmUvZG9taW5hdGlvbjUucHk="),globals(),True)

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/repl/load.py:252 in load
    code = compile(f.read(), fpath, 'exec')

  File ~/git/affine_dominance/software/domination5.py:241
    def lam(A,v):
    ^
IndentationError: expected an indented block after function definition on line 235

### reloading attached file domination5.py modified at 13:42:29 ###
### reloading attached file domination5.py modified at 13:44:24 ###
### reloading attached file domination5.py modified at 15:24:51 ###
### reloading attached file domination5.py modified at 18:31:13 ###
sage: A=CartanMatrix(['C',3])
....: c=[1,0,2]
....: cinv=list(reversed(c))
....: coxnum=coxeter_number(A)
....: num=1
....: AA=ClusterAlgebra(B(A,c))
....: n=A.nrows()
....: colors=rainbow(10)
....: for v in sortables(A,c[1:]):
....:     plots=[AA.cluster_fan().plot()]
....:     #print(num,v,lam(A,v))
....:     num+=1
....:     for k in K(c,v):
....:         plots=plots+[p_lambda(B(A,c),lam(A,v),k)]
....:     sum(plots)
....: 
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
Cell In [533], line 15
     13 for k in K(c,v):
     14     plots=plots+[p_lambda(B(A,c),lam(A,v),k)]
---> 15 sum(plots)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/misc/functional.py:594, in symbolic_sum(expression, *args, **kwds)
    592     return expression.sum(*args, **kwds)
    593 elif max(len(args),len(kwds)) <= 1:
--> 594     return sum(expression, *args, **kwds)
    595 else:
    596     from sage.symbolic.ring import SR

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/plot/plot3d/base.pyx:2319, in sage.plot.plot3d.base.Graphics3dGroup.__add__ (build/cythonized/sage/plot/plot3d/base.c:36026)()
   2317         return Graphics3dGroup(s_all)
   2318     else:
-> 2319         return Graphics3d.__add__(self, other)
   2320 
   2321 def bounding_box(self):

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/plot/plot3d/base.pyx:637, in sage.plot.plot3d.base.Graphics3d.__add__ (build/cythonized/sage/plot/plot3d/base.c:17024)()
    635     left = left.plot3d()
    636 elif not isinstance(right, Graphics3d):
--> 637     right = right.plot3d()
    638 return Graphics3dGroup([left, right])
    639 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:489, in sage.structure.element.Element.__getattr__ (build/cythonized/sage/structure/element.c:11576)()
    487         AttributeError: 'LeftZeroSemigroup_with_category.element_class' object has no attribute 'blah_blah'...
    488     """
--> 489     return self.getattr_from_category(name)
    490 
    491 cdef getattr_from_category(self, name) noexcept:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:502, in sage.structure.element.Element.getattr_from_category (build/cythonized/sage/structure/element.c:11686)()
    500     else:
    501         cls = P._abstract_element_class
--> 502     return getattr_from_other_class(self, cls, name)
    503 
    504 def __dir__(self):

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/cpython/getattr.pyx:357, in sage.cpython.getattr.getattr_from_other_class (build/cythonized/sage/cpython/getattr.c:4357)()
    355     dummy_error_message.cls = type(self)
    356     dummy_error_message.name = name
--> 357     raise AttributeError(dummy_error_message)
    358 cdef PyObject* attr = instance_getattr(cls, name)
    359 if attr is NULL:

AttributeError: 'Polyhedra_QQ_ppl_with_category.element_class' object has no attribute 'plot3d'
sage: A=CartanMatrix(['C',3])
....: c=[1,0,2]
....: cinv=list(reversed(c))
....: coxnum=coxeter_number(A)
....: num=0
....: AA=ClusterAlgebra(B(A,c))
....: n=A.nrows()
....: colors=rainbow(10)
....: for v in sortables(A,c[1:]):
....:     plots=[AA.cluster_fan().plot()]
....:     #print(num,v,lam(A,v))
....:     for k in K(c,v):
....:         plots=plots+[p_lambda(B(A,c),lam(A,v),k).plot(fill=colors[num])]
....:     sum(plots)
....:     num+=1
....: 
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
sage: toric_plotter.options(wall_label=None,ray_label=None,wall_alpha=1)
sage: A=CartanMatrix(['C',3])
....: c=[1,0,2]
....: cinv=list(reversed(c))
....: coxnum=coxeter_number(A)
....: num=0
....: AA=ClusterAlgebra(B(A,c))
....: n=A.nrows()
....: colors=rainbow(10)
....: for v in sortables(A,c[1:]):
....:     plots=[AA.cluster_fan().plot()]
....:     #print(num,v,lam(A,v))
....:     for k in K(c,v):
....:         plots=plots+[p_lambda(B(A,c),lam(A,v),k).plot(fill=colors[num])]
....:     sum(plots)
....:     num+=1
....: 
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[1,0,2]
....: cinv=list(reversed(c))
....: coxnum=coxeter_number(A)
....: num=0
....: AA=ClusterAlgebra(B(A,c))
....: n=A.nrows()
....: colors=rainbow(10)
....: for v in sortables(A,c[1:]):
....:     plots=[]
....:     #print(num,v,lam(A,v))
....:     for k in K(c,v):
....:         plots=plots+[p_lambda(B(A,c),lam(A,v),k).plot(fill=colors[num])]
....:     sum(plots)
....:     num+=1
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[1,0,2]
....: cinv=list(reversed(c))
....: coxnum=coxeter_number(A)
....: num=0
....: AA=ClusterAlgebra(B(A,c))
....: n=A.nrows()
....: colors=rainbow(10)
....: for v in sortables(A,c[1:]):
....:     plots=[]
....:     #print(num,v,lam(A,v))
....:     for k in K(c,v):
....:         plots=plots+[p_lambda(B(A,c),lam(A,v),k).translation(vector(num,0,
....: num)).plot(fill=colors[num])]
....:     sum(plots)
....:     num+=1
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In [538], line 13
     11 #print(num,v,lam(A,v))
     12 for k in K(c,v):
---> 13     plots=plots+[p_lambda(B(A,c),lam(A,v),k).translation(vector(num,Integer(0),num)).plot(fill=colors[num])]
     14 sum(plots)
     15 num+=Integer(1)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/modules/free_module_element.pyx:534, in sage.modules.free_module_element.vector (build/cythonized/sage/modules/free_module_element.c:10098)()
    532         raise TypeError(msg.format(arg0))
    533 else:
--> 534     if not isinstance(arg2, dict) and len(arg2) != degree:
    535         raise ValueError("incompatible degrees in vector constructor")
    536     arg1 = arg2

TypeError: object of type 'sage.rings.integer.Integer' has no len()
sage: A=CartanMatrix(['C',3])
....: c=[1,0,2]
....: cinv=list(reversed(c))
....: coxnum=coxeter_number(A)
....: num=0
....: AA=ClusterAlgebra(B(A,c))
....: n=A.nrows()
....: colors=rainbow(10)
....: for v in sortables(A,c[1:]):
....:     plots=[]
....:     #print(num,v,lam(A,v))
....:     for k in K(c,v):
....:         plots=plots+[p_lambda(B(A,c),lam(A,v),k).translation(vector((num,0
....: ,num))).plot(fill=colors[num])]
....:     sum(plots)
....:     num+=1
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
sage: B(A,c)
[ 0 -1  0]
[ 1  0  2]
[ 0 -1  0]
sage: A=CartanMatrix(['C',3])
....: c=[1,0,2]
....: cinv=list(reversed(c))
....: coxnum=coxeter_number(A)
....: num=0
....: AA=ClusterAlgebra(B(A,c))
....: n=A.nrows()
....: colors=rainbow(10)
....: for v in sortables(A,c[1:]):
....:     plots=[]
....:     #print(num,v,lam(A,v))
....:     for k in K(c,v):
....:         plots=plots+[p_lambda(B(A,c),lam(A,v),k).translation(vector((-num,
....: 0,num))).plot(fill=colors[num])]
....:     sum(plots)
....:     num+=1
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[1,0,2]
....: cinv=list(reversed(c))
....: coxnum=coxeter_number(A)
....: num=0
....: AA=ClusterAlgebra(B(A,c))
....: n=A.nrows()
....: colors=rainbow(10)
....: for v in sortables(A,c[1:]):
....:     plots=[]
....:     #print(num,v,lam(A,v))
....:     for k in K(c,v):
....:         plots=plots+[p_lambda(B(A,c),lam(A,v),k).translation(vector((-num,
....: 0,num))).plot(fill=colors[num])]
....:         num+=1
....:     sum(plots)
Launched html viewer for Graphics3d Object
---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
Cell In [542], line 13
     11 #print(num,v,lam(A,v))
     12 for k in K(c,v):
---> 13     plots=plots+[p_lambda(B(A,c),lam(A,v),k).translation(vector((-num,Integer(0),num))).plot(fill=colors[num])]
     14     num+=Integer(1) 
     15 sum(plots)

IndexError: list index out of range
sage: A=CartanMatrix(['C',3])
....: c=[1,0,2]
....: cinv=list(reversed(c))
....: coxnum=coxeter_number(A)
....: num=0
....: AA=ClusterAlgebra(B(A,c))
....: n=A.nrows()
....: colors=rainbow(20)
....: for v in sortables(A,c[1:]):
....:     plots=[]
....:     #print(num,v,lam(A,v))
....:     for k in K(c,v):
....:         plots=plots+[p_lambda(B(A,c),lam(A,v),k).translation(vector((-num,
....: 0,num))).plot(fill=colors[num])]
....:         num+=1
....:     sum(plots)
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
Cell In [543], line 13
     11 #print(num,v,lam(A,v))
     12 for k in K(c,v):
---> 13     plots=plots+[p_lambda(B(A,c),lam(A,v),k).translation(vector((-num,Integer(0),num))).plot(fill=colors[num])]
     14     num+=Integer(1) 
     15 sum(plots)

IndexError: list index out of range
sage: A=CartanMatrix(['C',3])
....: c=[1,0,2]
....: cinv=list(reversed(c))
....: colors=rainbow(20)
....: for v in sortables(A,c[1:]):
....:     plots=[]
....:     #print(num,v,lam(A,v))
....:     num=0
....:     for k in K(c,v):
....:         plots=plots+[p_lambda(B(A,c),lam(A,v),k).translation(vector((-num,
....: 0,num))).plot(fill=colors[num])]
....:         num+=1
....:     sum(plots)
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[1,0,2]
....: cinv=list(reversed(c))
....: colors=rainbow(20)
....: for v in sortables(A,c[1:]):
....:     plots=[]
....:     #print(num,v,lam(A,v))
....:     num=0
....:     for k in K(c[1:],v):
....:         plots=plots+[p_lambda(B(A,c),lam(A,v),k).translation(vector((-num,
....: 0,num))).plot(fill=colors[num])]
....:         num+=1
....:     sum(plots)
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[1,0,2]
....: cinv=list(reversed(c))
....: colors=rainbow(20)
....: sc=1/100
....: for v in sortables(A,c[1:]):
....:     plots=[]
....:     #print(num,v,lam(A,v))
....:     num=0
....:     for k in K(c[1:],v):
....:         plots=plots+[p_lambda(B(A,c),lam(A,v),k).translation(vector((-num*
....: sc,0,num*sc))).plot(fill=colors[num])]
....:         num+=1
....:     sum(plots)
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[1,0,2]
....: cinv=list(reversed(c))
....: colors=rainbow(20)
....: sc=1/50
....: for v in sortables(A,c[1:]):
....:     plots=[]
....:     #print(num,v,lam(A,v))
....:     num=0
....:     for k in K(c[1:],v):
....:         plots=plots+[p_lambda(B(A,c),lam(A,v),k).translation(vector((-num*
....: sc,0,num*sc))).plot(fill=colors[num])]
....:         num+=1
....:     sum(plots)
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[1,0,2]
....: cinv=list(reversed(c))
....: colors=rainbow(20)
....: sc=1/50
....: for v in sortables(A,c[1:]):
....:     plots=[]
....:     #print(num,v,lam(A,v))
....:     num=0
....:     for k in K(c[1:],v):
....:         plots=plots+[p_lambda(B(A,c),lam(A,v),k).translation(vector((-num*
....: sc,0,num*sc))).plot(fill=colors[num])]
....:         plots=plots+[p_lambda(B(A,c),lam(A,v),[c[0]]+k).translation(vector
....: ((-num*sc,0,num*sc))).plot(fill=colors[num+10])]
....:         num+=1
....:     sum(plots)
....: 
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[1,0,2]
....: cinv=list(reversed(c))
....: colors=rainbow(20)
....: sc=1/50
....: for v in sortables(A,c[1:]):
....:     plots=[]
....:     #print(num,v,lam(A,v))
....:     num=0
....:     for k in K(c[1:],v):
....:         plots=plots+[p_lambda(B(A,c),lam(A,v),k).translation(vector((-num*
....: sc,0,num*sc))).plot(fill=colors[num])]
....:         plots=plots+[p_lambda(B(A,c),lam(A,v),[c[0]]+k).translation(vector
....: (((num+1)*sc,0,-(num+1)*sc))).plot(fill=colors[num+10])]
....:         num+=1
....:     sum(plots)
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[1,0,2]
....: cinv=list(reversed(c))
....: colors=rainbow(20)
....: sc=1/50
....: for v in sortables(A,c[1:]):
....:     plots=[]
....:     #print(num,v,lam(A,v))
....:     num=0
....:     for k in K(c[1:],v):
....:         plots=plots+[p_lambda(B(A,c),lam(A,v),k).translation(vector((-num*
....: sc,0,num*sc))).plot(fill=colors[num],alpha=0.5)]
....:         plots=plots+[p_lambda(B(A,c),lam(A,v),[c[0]]+k).translation(vector
....: (((num+1)*sc,0,-(num+1)*sc))).plot(fill=colors[num+10],alpha=0.5)]
....:         num+=1
....:     sum(plots)
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[1,0,2]
....: cinv=list(reversed(c))
....: colors=rainbow(30)
....: sc=1/50
....: for v in sortables(A,c[1:]):
....:     plots=[]
....:     #print(num,v,lam(A,v))
....:     num=0
....:     for k in K(c[1:],v):
....:         plots=plots+[p_lambda(B(A,c),lam(A,v),k).translation(vector((-num*
....: sc,0,num*sc))).plot(fill=colors[num],alpha=0.5)]
....:         plots=plots+[p_lambda(B(A,c),lam(A,v),[c[0]]+k).translation(vector
....: (((num+1)*sc,0,-(num+1)*sc))).plot(fill=colors[num+15],alpha=0.5)]
....:         num+=1
....:     sum(plots)
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
sage: K(c[1:],[0,2])
[[0, 2], [0], [0, 2, 0], [0, 2, 0, 2]]
sage: 
sage: A=CartanMatrix(['C',3])
....: c=[1,0,2]
....: cinv=list(reversed(c))
....: colors=rainbow(30)
....: sc=1/50
....: for v in sortables(A,c[1:]):
....:     plots=[]
....:     #print(num,v,lam(A,v))
....:     num=0
....:     for k in K(c[1:],v):
....:         plots=plots+[p_lambda(B(A,c),lam(A,v),k).translation(vector((-num*
....: sc,0,num*sc))).plot(fill=colors[num],alpha=0.5)]
....:         plots=plots+[p_lambda(B(A,c),lam(A,v),[c[0]]+k).translation(vector
....: (((num+1)*sc,0,-(num+1)*sc))).plot(fill=colors[num+15],alpha=0.5)]
....:         num+=1
....:     print(K(c[1:],v))
....:     sum(plots)
[[0, 2], [0], [0, 2, 0], [0, 2, 0, 2]]
Launched html viewer for Graphics3d Object
[[0], [], [0, 2], [0, 2, 0]]
Launched html viewer for Graphics3d Object
[[2], [], [0, 2], [0]]
Launched html viewer for Graphics3d Object
[[], [2], [0], [0, 2]]
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[1,0,2]
....: cinv=list(reversed(c))
....: colors=rainbow(30)
....: sc=1/20
....: for v in sortables(A,c[1:]):
....:     plots=[]
....:     #print(num,v,lam(A,v))
....:     num=0
....:     for k in K(c[1:],v):
....:         plots=plots+[p_lambda(B(A,c),lam(A,v),k).translation(vector((-num*
....: sc,0,num*sc))).plot(fill=colors[num],alpha=0.5)]
....:         plots=plots+[p_lambda(B(A,c),lam(A,v),[c[0]]+k).translation(vector
....: (((num+1)*sc,0,-(num+1)*sc))).plot(fill=colors[num+15],alpha=0.5)]
....:         num+=1
....:     print(K(c[1:],v))
....:     sum(plots)
[[0, 2], [0], [0, 2, 0], [0, 2, 0, 2]]
Launched html viewer for Graphics3d Object
[[0], [], [0, 2], [0, 2, 0]]
Launched html viewer for Graphics3d Object
[[2], [], [0, 2], [0]]
Launched html viewer for Graphics3d Object
[[], [2], [0], [0, 2]]
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[1,0,2]
....: cinv=list(reversed(c))
....: colors=rainbow(30)
....: sc=1/20
....: for v in sortables(A,c[1:]):
....:     plots=[]
....:     #print(num,v,lam(A,v))
....:     num=0
....:     for k in K(c[1:],v):
....:         plots=plots+[p_lambda(B(A,c),lam(A,v),k).translation(vector((-num*
....: sc,0,num*sc))).plot(fill=colors[num],alpha=0.5)]
....:         plots=plots+[p_lambda(B(A,c),lam(A,v),[c[0]]+k).translation(vector
....: (((num+1)*sc,0,-(num+1)*sc))).plot(fill=colors[num+15],alpha=0.5)]
....:         num+=1
....:     print(K(c[1:],v))
....:     sum(plots)
....: 
[[0, 2], [0], [0, 2, 0], [0, 2, 0, 2]]
Launched html viewer for Graphics3d Object
[[0], [], [0, 2], [0, 2, 0]]
Launched html viewer for Graphics3d Object
[[2], [], [0, 2], [0]]
Launched html viewer for Graphics3d Object
[[], [2], [0], [0, 2]]
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[1,0,2]
....: cinv=list(reversed(c))
....: colors=rainbow(30)
....: sc=1/20
....: for v in sortables(A,c[1:]):
....:     plots=[]
....:     #print(num,v,lam(A,v))
....:     num=0
....:     for k in K(c[1:],v):
....:         #plots=plots+[p_lambda(B(A,c),lam(A,v),k).translation(vector((-num
....: *sc,0,num*sc))).plot(fill=colors[num],alpha=0.5)]
....:         plots=plots+[p_lambda(B(A,c),lam(A,v),[c[0]]+k).translation(vector
....: (((num+1)*sc,0,-(num+1)*sc))).plot(fill=colors[num+15],alpha=0.5)]
....:         num+=1
....:     print(K(c[1:],v))
....:     sum(plots)
[[0, 2], [0], [0, 2, 0], [0, 2, 0, 2]]
Launched html viewer for Graphics3d Object
[[0], [], [0, 2], [0, 2, 0]]
Launched html viewer for Graphics3d Object
[[2], [], [0, 2], [0]]
Launched html viewer for Graphics3d Object
[[], [2], [0], [0, 2]]
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[1,0,2]
....: cinv=list(reversed(c))
....: colors=rainbow(30)
....: sc=1/20
....: for v in sortables(A,c[1:]):
....:     plots=[]
....:     #print(num,v,lam(A,v))
....:     num=0
....:     for k in K(c[1:],v):
....:         plots=plots+[p_lambda(B(A,c),lam(A,v),k).translation(vector((-num*
....: sc,0,num*sc))).plot(fill=colors[num],alpha=0.5)]
....:         #plots=plots+[p_lambda(B(A,c),lam(A,v),[c[0]]+k).translation(vecto
....: r(((num+1)*sc,0,-(num+1)*sc))).plot(fill=colors[num+15],alpha=0.5)]
....:         num+=1
....:     print(K(c[1:],v))
....:     sum(plots)
[[0, 2], [0], [0, 2, 0], [0, 2, 0, 2]]
Launched html viewer for Graphics3d Object
[[0], [], [0, 2], [0, 2, 0]]
Launched html viewer for Graphics3d Object
[[2], [], [0, 2], [0]]
Launched html viewer for Graphics3d Object
[[], [2], [0], [0, 2]]
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[1,0,2]
....: cinv=list(reversed(c))
....: colors=rainbow(50)
....: sc=1/20
....: for v in sortables(A,c[1:]):
....:     plots=[]
....:     #print(num,v,lam(A,v))
....:     num=0
....:     for k in sortables(A,c[1:]):
....:         plots=plots+[p_lambda(B(A,c),lam(A,v),k).translation(vector((-num*
....: sc,0,num*sc))).plot(fill=colors[num],alpha=0.5)]
....:         plots=plots+[p_lambda(B(A,c),lam(A,v),[c[0]]+k).translation(vector
....: (((num+1)*sc,0,-(num+1)*sc))).plot(fill=colors[num+25],alpha=0.5)]
....:         num+=1
....:     sum(plots)
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[1,0,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     print(n,v)
....:     Ps=[]
....:     for k in sortables(A,c[1:]):
....:         Ps=Ps+[p_lambda(B(A,c),lam(A,v),k)]
....:     fails=true
....:     for i in range(len(Ps)):
....:         for j in range(i+1,len(Ps)):
....:             if Ps[i].intersection(Ps[j]).dimension()==0:
....:                 fails=false
....:                 break
....:     if fails:
....:         print('FAILS!')
....:         break
....: 
3 [0, 2]
FAILS!
sage: A=CartanMatrix(['C',3])
....: c=[1,0,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     print(n,v)
....:     Ps=[]
....:     for k in sortables(A,c[1:]):
....:         Ps=Ps+[p_lambda(B(A,c),lam(A,v),k)]
....:     fails=true
....:     for i in range(len(Ps)):
....:         for j in range(i+1,len(Ps)):
....:             if Ps[i].intersection(Ps[j]).dimension()==0:
....:                 fails=false
....:                 break
....:     if fails:
....:         print('FAILS!')
....:         break
....: 
3 [0, 2]
FAILS!
sage: A=CartanMatrix(['C',3])
....: c=[1,0,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     print(num,v)
....:     Ps=[]
....:     for k in sortables(A,c[1:]):
....:         Ps=Ps+[p_lambda(B(A,c),lam(A,v),k)]
....:     fails=true
....:     for i in range(len(Ps)):
....:         for j in range(i+1,len(Ps)):
....:             if Ps[i].intersection(Ps[j]).dimension()==0:
....:                 fails=false
....:                 break
....:     if fails:
....:         print('FAILS!')
....:         break
....: 
1 [0, 2]
FAILS!
sage: A=CartanMatrix(['C',3])
....: c=[1,0,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     print(num,v)
....:     Ps=[]
....:     for k in sortables(A,c):
....:         Ps=Ps+[p_lambda(B(A,c),lam(A,v),k)]
....:     fails=true
....:     for i in range(len(Ps)):
....:         for j in range(i+1,len(Ps)):
....:             if Ps[i].intersection(Ps[j]).dimension()==0:
....:                 fails=false
....:                 break
....:     if fails:
....:         print('FAILS!')
....:         break
1 [0, 2]
2 [0]
3 [2]
4 []
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     print(num,v)
....:     Ps=[]
....:     for k in sortables(A,c):
....:         Ps=Ps+[p_lambda(B(A,c),lam(A,v),k)]
....:     fails=true
....:     for i in range(len(Ps)):
....:         for j in range(i+1,len(Ps)):
....:             if Ps[i].intersection(Ps[j]).dimension()==0:
....:                 fails=false
....:                 break
....:     if fails:
....:         print('FAILS!')
....:         break
1 [1, 2, 1, 2]
2 [1, 2, 1]
3 [1, 2]
4 [1]
FAILS!
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2,3]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     print(num,v)
....:     Ps=[]
....:     for k in sortables(A,c):
....:         Ps=Ps+[p_lambda(B(A,c),lam(A,v),k)]
....:     fails=true
....:     for i in range(len(Ps)):
....:         for j in range(i+1,len(Ps)):
....:             if Ps[i].intersection(Ps[j]).dimension()==0:
....:                 fails=false
....:                 break
....:     if fails:
....:         print('FAILS!')
....:         break
---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
Cell In [564], line 4
      2 c=[Integer(0),Integer(1),Integer(2),Integer(3)]
      3 num=Integer(0)
----> 4 for v in sortables(A,c[Integer(1):]):
      5     num+=Integer(1)
      6     print(num,v)

File ~/git/affine_dominance/software/domination5.py:261, in sortables(A, c)
    260 def sortables(A,c):
--> 261     yield from sortables_remaining(A,c,[],vector([1]*A.nrows()))

File ~/git/affine_dominance/software/domination5.py:268, in sortables_remaining(A, c, sort, vec)
    266 else:
    267     if vec[c[0]]>0:
--> 268         yield from sortables_remaining(A,c[1:]+[c[0]],sort+[c[0]],reflect_once(A,vec,c[0]))
    269     yield from sortables_remaining(A,c[1:],sort,vec)

File ~/git/affine_dominance/software/domination5.py:268, in sortables_remaining(A, c, sort, vec)
    266 else:
    267     if vec[c[0]]>0:
--> 268         yield from sortables_remaining(A,c[1:]+[c[0]],sort+[c[0]],reflect_once(A,vec,c[0]))
    269     yield from sortables_remaining(A,c[1:],sort,vec)

File ~/git/affine_dominance/software/domination5.py:267, in sortables_remaining(A, c, sort, vec)
    265     yield sort
    266 else:
--> 267     if vec[c[0]]>0:
    268         yield from sortables_remaining(A,c[1:]+[c[0]],sort+[c[0]],reflect_once(A,vec,c[0]))
    269     yield from sortables_remaining(A,c[1:],sort,vec)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/modules/free_module_element.pyx:1842, in sage.modules.free_module_element.FreeModuleElement.__getitem__ (build/cythonized/sage/modules/free_module_element.c:19571)()
   1840     n += d
   1841 if n < 0 or n >= d:
-> 1842     raise IndexError("vector index out of range")
   1843 return self.get_unsafe(n)
   1844 

IndexError: vector index out of range
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     print(num,v)
....:     Ps=[]
....:     for k in sortables(A,c):
....:         Ps=Ps+[p_lambda(B(A,c),lam(A,v),k)]
....:     fails=true
....:     for i in range(len(Ps)):
....:         for j in range(i+1,len(Ps)):
....:             if Ps[i].intersection(Ps[j]).dimension()==0:
....:                 fails=false
....:                 break
....:     if fails:
....:         print('FAILS!')
....:         break
1 [1, 2, 3, 1, 2, 3, 1, 2, 3]
2 [1, 2, 3, 1, 2, 3, 1, 2]
3 [1, 2, 3, 1, 2, 3, 1]
4 [1, 2, 3, 1, 2, 3]
5 [1, 2, 3, 1, 2, 1]
6 [1, 2, 3, 1, 2]
7 [1, 2, 3, 1]
8 [1, 2, 3, 2, 3]
9 [1, 2, 3, 2]
10 [1, 2, 3]
11 [1, 2, 1]
12 [1, 2]
13 [1, 3]
14 [1]
15 [2, 3, 2, 3]
16 [2, 3, 2]
17 [2, 3]
18 [2]
19 [3]
20 []
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     print(num,v)
....:     Ps=[]
....:     for k in sortables(A,c):
....:         Ps=Ps+[p_lambda(B(A,c),lam(A,v),k)]
....:     fails=true
....:     for i in range(len(Ps)):
....:         for j in range(i+1,len(Ps)):
....:             if Ps[i].intersection(Ps[j]).dimension()==0:
....:                 fails=false
....:                 break
....:     if fails:
....:         print('FAILS!')
....:         break
1 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
2 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
3 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
4 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1]
5 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
6 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2]
7 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1]
8 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
9 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1]
10 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
11 [1, 2, 3, 4, 1, 2, 3, 4, 1]
12 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4]
13 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3]
14 [1, 2, 3, 4, 1, 2, 3, 4, 2]
15 [1, 2, 3, 4, 1, 2, 3, 4]
16 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
17 [1, 2, 3, 4, 1, 2, 3, 1, 2]
18 [1, 2, 3, 4, 1, 2, 3, 1]
19 [1, 2, 3, 4, 1, 2, 3, 2]
20 [1, 2, 3, 4, 1, 2, 3]
21 [1, 2, 3, 4, 1, 2, 1]
22 [1, 2, 3, 4, 1, 2]
23 [1, 2, 3, 4, 1, 3, 4]
24 [1, 2, 3, 4, 1, 3]
25 [1, 2, 3, 4, 1]
26 [1, 2, 3, 4, 2, 3, 4, 2, 3, 4]
27 [1, 2, 3, 4, 2, 3, 4, 2, 3]
28 [1, 2, 3, 4, 2, 3, 4, 2]
29 [1, 2, 3, 4, 2, 3, 4]
30 [1, 2, 3, 4, 2, 3, 2]
31 [1, 2, 3, 4, 2, 3]
32 [1, 2, 3, 4, 2]
33 [1, 2, 3, 4, 3, 4]
34 [1, 2, 3, 4, 3]
35 [1, 2, 3, 4]
36 [1, 2, 3, 1, 2, 1]
37 [1, 2, 3, 1, 2]
38 [1, 2, 3, 1]
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [566], line 13
     11 for i in range(len(Ps)):
     12     for j in range(i+Integer(1),len(Ps)):
---> 13         if Ps[i].intersection(Ps[j]).dimension()==Integer(0):
     14             fails=false
     15             break

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1371, in Polyhedron_base5.intersection(self, other)
   1369 parent = self.parent()
   1370 try:
-> 1371     intersection = parent.element_class(parent, None, [new_ieqs, new_eqns])
   1373     # Force calculation of the vertices.
   1374     _ = intersection.n_vertices()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:179, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    177 elif Hrep is not None:
    178     ieqs, eqns = Hrep
--> 179     self._init_from_Hrepresentation(ieqs, eqns, **kwds)
    180 else:
    181     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:129, in Polyhedron_ppl._init_from_Hrepresentation(self, ieqs, eqns, minimize, verbose)
    106 def _init_from_Hrepresentation(self, ieqs, eqns, minimize=True, verbose=False):
    107     """
    108     Construct polyhedron from H-representation data.
    109 
   (...)
    127         sage: Polyhedron_ppl._init_from_Hrepresentation(p, [], [])
    128     """
--> 129     cs = self._convert_constraints_to_ppl(ieqs, eqns)
    130     if cs.empty():
    131         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'universe')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:538, in Polyhedron_ppl._convert_constraints_to_ppl(ieqs, eqns)
    536     eqns = []
    537 for eqn in eqns:
--> 538     cs.insert(Polyhedron_ppl._convert_constraint_to_ppl(eqn, EQUATION))
    539 return cs

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:511, in Polyhedron_ppl._convert_constraint_to_ppl(c, typ)
    509     return Linear_Expression(A, b) >= 0
    510 else:
--> 511     return Linear_Expression(A, b) == 0

File ppl/linear_algebra.pyx:654, in ppl.linear_algebra.Linear_Expression.__init__()

File ppl/linear_algebra.pyx:49, in ppl.linear_algebra.PPL_Coefficient_from_pyobject()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/rings/integer.pyx:914, in sage.rings.integer.Integer.__richcmp__ (build/cythonized/sage/rings/integer.c:16498)()
    912     c = mpz_cmp_d((<Integer>left).value, d)
    913 else:
--> 914     return coercion_model.richcmp(left, right, op)
    915 
    916 return rich_to_bool_sgn(op, c)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:2021, in sage.structure.coerce.CoercionModel.richcmp (build/cythonized/sage/structure/coerce.c:26173)()
   2019 # Coerce to a common parent
   2020 try:
-> 2021     x, y = self.canonical_coercion(x, y)
   2022 except (TypeError, NotImplementedError):
   2023     pass

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1422, in sage.structure.coerce.CoercionModel.canonical_coercion (build/cythonized/sage/structure/coerce.c:18956)()
   1420             self._record_exception()
   1421 
-> 1422     raise TypeError("no common canonical parent for objects with parents: '%s' and '%s'"%(xp, yp))
   1423 
   1424 cpdef coercion_maps(self, R, S) noexcept:

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['C',5])
....: c=[4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,kinv,k+[c[0]],kinv+[c[0]]]).dimensio
....: n()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
....: 
1 [3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
2 [3, 2, 1, 0, 3, 2, 1, 3, 2] 0
3 [3, 2, 1, 0, 3, 2, 1, 3] 0
4 [3, 2, 1, 0, 3, 2, 1, 2] 0
5 [3, 2, 1, 0, 3, 2, 1] 0
6 [3, 2, 1, 0, 3, 2, 3] 0
7 [3, 2, 1, 0, 3, 2] 0
8 [3, 2, 1, 0, 3, 1] 0
9 [3, 2, 1, 0, 3] 0
10 [3, 2, 1, 0, 2, 1, 2] 0
11 [3, 2, 1, 0, 2, 1] 0
12 [3, 2, 1, 0, 2] 0
13 [3, 2, 1, 0, 1] 0
14 [3, 2, 1, 0] 0
15 [3, 2, 1, 3, 2, 3] 0
16 [3, 2, 1, 3, 2] 0
17 [3, 2, 1, 3] 0
18 [3, 2, 1, 2] 0
19 [3, 2, 1] 0
20 [3, 2, 0, 3] 0
21 [3, 2, 0] 0
22 [3, 2, 3] 0
23 [3, 2] 0
24 [3, 1, 0, 1] 0
25 [3, 1, 0] 0
26 [3, 1] 0
27 [3, 0] 0
28 [3] 0
29 [2, 1, 0, 2, 1, 2] 0
30 [2, 1, 0, 2, 1] 0
31 [2, 1, 0, 2] 0
32 [2, 1, 0, 1] 0
33 [2, 1, 0] 0
34 [2, 1, 2] 0
35 [2, 1] 0
36 [2, 0] 0
37 [2] 0
38 [1, 0, 1] 0
39 [1, 0] 0
40 [1] 0
41 [0] 0
42 [] 0
sage: A=CartanMatrix(['C',3])
....: c=[2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,kinv,k+[c[0]],kinv+[c[0]]]).dimensio
....: n()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [1, 0, 1] 0
2 [1, 0] 0
3 [1] 0
4 [0] 0
5 [] 0
sage: A=CartanMatrix(['C',9])
....: c=[8,7,6,5,4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     d=p_lambda_int(B(A,c),lam(A,v),[k,kinv,k+[c[0]],kinv+[c[0]]]).dimensio
....: n()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7, 6, 7] 0
2 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7, 6] 0
3 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7] 0
4 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 6] 0
5 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5] 0
6 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 7] 0
7 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6] 0
8 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 5] 0
9 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7] 0
10 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6, 5, 6] 0
11 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6, 5] 0
12 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6] 0
13 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 5] 0
14 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4] 0
15 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 7, 6, 7] 0
16 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 7, 6] 0
17 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 7] 0
18 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 6] 0
19 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5] 0
20 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 4, 7] 0
21 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 4] 0
22 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 7] 0
23 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6] 0
24 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 5, 4, 5] 0
25 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 5, 4] 0
26 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 5] 0
27 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 4] 0
28 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7] 0
29 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
30 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
31 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 4, 6] 0
32 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 4, 5] 0
33 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 4] 0
34 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 6] 0
35 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5] 0
36 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 4] 0
37 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6] 0
38 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 5, 4, 5] 0
39 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 5, 4] 0
40 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 5] 0
41 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 4] 0
42 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3] 0
43 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 5, 7, 6, 7] 0
44 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 5, 7, 6] 0
45 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 5, 7] 0
46 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 5, 6] 0
47 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 5] 0
48 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 7] 0
49 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6] 0
50 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 5] 0
51 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7] 0
52 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 6, 5, 6] 0
53 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 6, 5] 0
54 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 6] 0
55 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 5] 0
56 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4] 0
57 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 3, 7, 6, 7] 0
58 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 3, 7, 6] 0
59 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 3, 7] 0
60 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 3, 6] 0
61 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 3] 0
62 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 7, 6, 7] 0
63 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 7, 6] 0
64 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 7] 0
65 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 6] 0
66 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5] 0
67 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 4, 3, 7, 4] 0
68 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 4, 3, 7] 0
69 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 4, 3, 4] 0
70 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 4, 3] 0
71 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 4, 7] 0
72 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 4] 0
73 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 3, 7] 0
74 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 3] 0
75 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 7] 0
76 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6] 0
77 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 5, 4, 3, 5, 4, 5] 0
78 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 5, 4, 3, 5, 4] 0
79 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 5, 4, 3, 5] 0
80 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 5, 4, 3, 4] 0
81 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 5, 4, 3] 0
82 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 5, 4, 5] 0
83 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 5, 4] 0
84 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 5, 3] 0
85 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 5] 0
86 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 4, 3, 4] 0
87 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 4, 3] 0
88 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 4] 0
89 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 3] 0
90 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7] 0
91 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
92 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
93 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6] 0
94 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 5] 0
95 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4] 0
96 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 6] 0
97 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5] 0
98 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 4] 0
99 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6] 0
100 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4, 5] 0
101 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4] 0
102 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5] 0
103 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 4] 0
104 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3] 0
105 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5, 6] 0
106 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5] 0
107 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 6] 0
108 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 5] 0
109 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4] 0
110 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 3, 6] 0
111 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 3] 0
112 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 6] 0
113 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5] 0
114 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 4, 3, 4] 0
115 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 4, 3] 0
116 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 4] 0
117 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 3] 0
118 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6] 0
119 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
120 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
121 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 5, 4, 3, 5] 0
122 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 5, 4, 3, 4] 0
123 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 5, 4, 3] 0
124 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 5, 4, 5] 0
125 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 5, 4] 0
126 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 5, 3] 0
127 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 5] 0
128 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 4, 3, 4] 0
129 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 4, 3] 0
130 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 4] 0
131 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 3] 0
132 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2] 0
133 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7, 6, 7] 0
134 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7, 6] 0
135 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7] 0
136 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 6] 0
137 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5] 0
138 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 7] 0
139 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6] 0
140 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 5] 0
141 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7] 0
142 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6, 5, 6] 0
143 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6, 5] 0
144 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6] 0
145 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 5] 0
146 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4] 0
147 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 7, 6, 7] 0
148 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 7, 6] 0
149 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 7] 0
150 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 6] 0
151 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5] 0
152 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 4, 7] 0
153 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 4] 0
154 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 7] 0
155 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6] 0
156 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 5, 4, 5] 0
157 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 5, 4] 0
158 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 5] 0
159 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 4] 0
160 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7] 0
161 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
162 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
163 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 6, 5, 4, 6] 0
164 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 6, 5, 4, 5] 0
165 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 6, 5, 4] 0
166 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 6, 5, 6] 0
167 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 6, 5] 0
168 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 6, 4] 0
169 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 6] 0
170 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 5, 4, 5] 0
171 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 5, 4] 0
172 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 5] 0
173 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 4] 0
174 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3] 0
175 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 7, 6, 5, 7, 6, 7] 0
176 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 7, 6, 5, 7, 6] 0
177 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 7, 6, 5, 7] 0
178 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 7, 6, 5, 6] 0
179 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 7, 6, 5] 0
180 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 7, 6, 7] 0
181 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 7, 6] 0
182 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 7, 5] 0
183 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 7] 0
184 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 6, 5, 6] 0
185 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 6, 5] 0
186 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 6] 0
187 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 5] 0
188 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2] 0
189 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 7, 6, 5, 7, 6, 7] 0
190 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 7, 6, 5, 7, 6] 0
191 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 7, 6, 5, 7] 0
192 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 7, 6, 5, 6] 0
193 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 7, 6, 5] 0
194 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 7, 6, 7] 0
195 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 7, 6] 0
196 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 7, 5] 0
197 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 7] 0
198 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 6, 5, 6] 0
199 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 6, 5] 0
200 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 6] 0
201 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 5] 0
202 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4] 0
203 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 2, 7, 6, 3, 7] 0
204 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 2, 7, 6, 3] 0
205 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 2, 7, 6, 7] 0
206 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 2, 7, 6] 0
207 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 2, 7, 3] 0
208 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 2, 7] 0
209 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 2, 6, 3] 0
210 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 2, 6] 0
211 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 2, 3] 0
212 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 2] 0
213 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 7, 6, 7] 0
214 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 7, 6] 0
215 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 7] 0
216 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 6] 0
217 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3] 0
218 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 2, 7, 6, 7] 0
219 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 2, 7, 6] 0
220 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 2, 7] 0
221 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 2, 6] 0
222 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 2] 0
223 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 7, 6, 7] 0
224 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 7, 6] 0
225 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 7] 0
226 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 6] 0
227 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 5] 0
228 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 2, 7, 4, 3, 4] 0
229 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 2, 7, 4, 3] 0
230 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 2, 7, 4] 0
231 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 2, 7, 3] 0
232 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 2, 7] 0
233 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 2, 4, 3, 4] 0
234 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 2, 4, 3] 0
235 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 2, 4] 0
236 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 2, 3] 0
237 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 2] 0
238 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 7, 4] 0
239 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 7] 0
240 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 4] 0
241 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3] 0
242 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 2, 7] 0
243 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 2] 0
244 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 7] 0
245 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 4] 0
246 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 3, 2, 7, 3] 0
247 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 3, 2, 7] 0
248 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 3, 2, 3] 0
249 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 3, 2] 0
250 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 3, 7] 0
251 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 3] 0
252 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 2, 7] 0
253 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 2] 0
254 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6, 7] 0
255 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 6] 0
256 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
257 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
258 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 5, 4, 3, 5] 0
259 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 5, 4, 3, 4] 0
260 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 5, 4, 3] 0
261 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 5, 4, 5] 0
262 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 5, 4] 0
263 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 5, 3] 0
264 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 5] 0
265 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 4, 3, 4] 0
266 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 4, 3] 0
267 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 4] 0
268 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 3] 0
269 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2] 0
270 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 5, 4, 5] 0
271 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 5, 4] 0
272 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 5] 0
273 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 4] 0
274 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3] 0
275 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 2, 5] 0
276 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 2] 0
277 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 5] 0
278 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 4] 0
279 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 3, 2, 3] 0
280 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 3, 2] 0
281 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 3] 0
282 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5, 2] 0
283 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 5] 0
284 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 4, 3, 2, 4, 3, 4] 0
285 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 4, 3, 2, 4, 3] 0
286 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 4, 3, 2, 4] 0
287 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 4, 3, 2, 3] 0
288 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 4, 3, 2] 0
289 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 4, 3, 4] 0
290 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 4, 3] 0
291 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 4, 2] 0
292 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 4] 0
293 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 3, 2, 3] 0
294 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 3, 2] 0
295 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 3] 0
296 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7, 2] 0
297 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 7] 0
298 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
299 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
300 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6] 0
301 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 5] 0
302 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4] 0
303 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 6] 0
304 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5] 0
305 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 4] 0
306 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6] 0
307 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4, 5] 0
308 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4] 0
309 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5] 0
310 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 4] 0
311 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3] 0
312 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5, 6] 0
313 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5] 0
314 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 6] 0
315 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 5] 0
316 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4] 0
317 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 3, 6] 0
318 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 3] 0
319 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 6] 0
320 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5] 0
321 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 4, 3, 4] 0
322 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 4, 3] 0
323 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 4] 0
324 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 3] 0
325 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6] 0
326 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
327 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
328 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3, 5] 0
329 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3, 4] 0
330 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3] 0
331 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 5] 0
332 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4] 0
333 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 3] 0
334 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5] 0
335 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 4, 3, 4] 0
336 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 4, 3] 0
337 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 4] 0
338 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 3] 0
339 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2] 0
340 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
341 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
342 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4, 6] 0
343 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4, 5] 0
344 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4] 0
345 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 6] 0
346 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5] 0
347 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 4] 0
348 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6] 0
349 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 5, 4, 5] 0
350 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 5, 4] 0
351 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 5] 0
352 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 4] 0
353 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3] 0
354 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 2, 6, 5, 6] 0
355 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 2, 6, 5] 0
356 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 2, 6] 0
357 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 2, 5] 0
358 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 2] 0
359 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 6, 5, 6] 0
360 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 6, 5] 0
361 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 6] 0
362 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 5] 0
363 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 4] 0
364 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 3, 2, 6, 3] 0
365 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 3, 2, 6] 0
366 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 3, 2, 3] 0
367 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 3, 2] 0
368 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 3, 6] 0
369 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 3] 0
370 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 2, 6] 0
371 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 2] 0
372 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5, 6] 0
373 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 5] 0
374 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 4, 3, 2, 4, 3, 4] 0
375 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 4, 3, 2, 4, 3] 0
376 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 4, 3, 2, 4] 0
377 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 4, 3, 2, 3] 0
378 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 4, 3, 2] 0
379 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 4, 3, 4] 0
380 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 4, 3] 0
381 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 4, 2] 0
382 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 4] 0
383 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 3, 2, 3] 0
384 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 3, 2] 0
385 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 3] 0
386 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6, 2] 0
387 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 6] 0
388 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
389 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
390 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] 0
391 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] 0
392 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] 0
393 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] 0
394 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] 0
395 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] 0
396 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5] 0
397 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] 0
398 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] 0
399 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4] 0
400 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 3] 0
401 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2] 0
402 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] 0
403 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4] 0
404 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 5] 0
405 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 4] 0
406 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4, 3] 0
407 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4, 2, 5] 0
408 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4, 2] 0
409 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4, 5] 0
410 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 4] 0
411 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 3, 2, 3] 0
412 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 3, 2] 0
413 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 3] 0
414 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5, 2] 0
415 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 5] 0
416 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
417 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
418 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 4, 3, 2, 4] 0
419 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 4, 3, 2, 3] 0
420 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 4, 3, 2] 0
421 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 4, 3, 4] 0
422 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 4, 3] 0
423 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 4, 2] 0
424 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 4] 0
425 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 3, 2, 3] 0
426 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 3, 2] 0
427 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 3] 0
428 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 2] 0
429 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1] 0
430 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7, 6, 7] 0
431 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7, 6] 0
432 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7] 0
433 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 6] 0
434 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5] 0
435 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 7] 0
436 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6] 0
437 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 5] 0
438 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7] 0
439 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6, 5, 6] 0
440 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6, 5] 0
441 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6] 0
442 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 5] 0
443 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4] 0
444 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 7, 6, 7] 0
445 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 7, 6] 0
446 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 7] 0
447 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 6] 0
448 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5] 0
449 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 4, 7] 0
450 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 4] 0
451 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 7] 0
452 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6] 0
453 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 5, 4, 5] 0
454 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 5, 4] 0
455 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 5] 0
456 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 4] 0
457 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7] 0
458 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
459 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
460 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 4, 6] 0
461 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 4, 5] 0
462 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 4] 0
463 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 6] 0
464 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5] 0
465 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 4] 0
466 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6] 0
467 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 5, 4, 5] 0
468 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 5, 4] 0
469 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 5] 0
470 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 4] 0
471 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3] 0
472 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 5, 7, 6, 7] 0
473 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 5, 7, 6] 0
474 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 5, 7] 0
475 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 5, 6] 0
476 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 5] 0
477 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 7] 0
478 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6] 0
479 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 5] 0
480 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7] 0
481 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 6, 5, 6] 0
482 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 6, 5] 0
483 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 6] 0
484 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 5] 0
485 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4] 0
486 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 3, 7, 6, 7] 0
487 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 3, 7, 6] 0
488 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 3, 7] 0
489 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 3, 6] 0
490 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 3] 0
491 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 7, 6, 7] 0
492 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 7, 6] 0
493 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 7] 0
494 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5, 6] 0
495 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 5] 0
496 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 4, 3, 7, 4] 0
497 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 4, 3, 7] 0
498 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 4, 3, 4] 0
499 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 4, 3] 0
500 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 4, 7] 0
501 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 4] 0
502 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 3, 7] 0
503 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 3] 0
504 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6, 7] 0
505 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 6] 0
506 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 5, 4, 3, 5, 4, 5] 0
507 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 5, 4, 3, 5, 4] 0
508 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 5, 4, 3, 5] 0
509 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 5, 4, 3, 4] 0
510 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 5, 4, 3] 0
511 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 5, 4, 5] 0
512 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 5, 4] 0
513 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 5, 3] 0
514 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 5] 0
515 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 4, 3, 4] 0
516 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 4, 3] 0
517 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 4] 0
518 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7, 3] 0
519 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 7] 0
520 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
521 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
522 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6] 0
523 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 5] 0
524 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4] 0
525 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 6] 0
526 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5] 0
527 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 4] 0
528 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6] 0
529 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4, 5] 0
530 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4] 0
531 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5] 0
532 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 4] 0
533 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3] 0
534 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5, 6] 0
535 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5] 0
536 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5, 4, 6] 0
537 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5, 4, 5] 0
538 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5, 4] 0
539 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5, 3, 6] 0
540 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5, 3] 0
541 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5, 6] 0
542 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 5] 0
543 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 4, 3, 4] 0
544 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 4, 3] 0
545 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 4] 0
546 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6, 3] 0
547 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 6] 0
548 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
549 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
550 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 5, 4, 3, 5] 0
551 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 5, 4, 3, 4] 0
552 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 5, 4, 3] 0
553 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 5, 4, 5] 0
554 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 5, 4] 0
555 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 5, 3] 0
556 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 5] 0
557 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 4, 3, 4] 0
558 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 4, 3] 0
559 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 4] 0
560 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 3] 0
561 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2] 0
562 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 7, 6, 5, 7, 6, 7] 0
563 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 7, 6, 5, 7, 6] 0
564 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 7, 6, 5, 7] 0
565 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 7, 6, 5, 6] 0
566 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 7, 6, 5] 0
567 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 7, 6, 7] 0
568 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 7, 6] 0
569 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 7, 5] 0
570 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 7] 0
571 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 6, 5, 6] 0
572 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 6, 5] 0
573 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 6] 0
574 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 5] 0
575 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6, 5, 4] 0
576 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6, 5, 7, 6, 7] 0
577 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6, 5, 7, 6] 0
578 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6, 5, 7] 0
579 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6, 5, 6] 0
580 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6, 5] 0
581 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6, 4, 7] 0
582 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6, 4] 0
583 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6, 7] 0
584 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 6] 0
585 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 5, 4, 5] 0
586 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 5, 4] 0
587 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 5] 0
588 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7, 4] 0
589 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 7] 0
590 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 6, 5, 4, 6, 5, 6] 0
591 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 6, 5, 4, 6, 5] 0
592 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 6, 5, 4, 6] 0
593 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 6, 5, 4, 5] 0
594 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 6, 5, 4] 0
595 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 6, 5, 6] 0
596 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 6, 5] 0
597 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 6, 4] 0
598 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 6] 0
599 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 5, 4, 5] 0
600 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 5, 4] 0
601 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 5] 0
602 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1, 4] 0
603 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 1] 0
604 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7, 6, 7] 0
605 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7, 6] 0
606 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7] 0
607 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 6] 0
608 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5] 0
609 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 7] 0
610 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6] 0
611 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 5] 0
612 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7] 0
613 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6, 5, 6] 0
614 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6, 5] 0
615 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6] 0
616 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 5] 0
617 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4] 0
618 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6, 5, 7, 6, 7] 0
619 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6, 5, 7, 6] 0
620 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6, 5, 7] 0
621 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6, 5, 6] 0
622 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6, 5] 0
623 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6, 4, 7] 0
624 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6, 4] 0
625 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6, 7] 0
626 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 6] 0
627 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 5, 4, 5] 0
628 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 5, 4] 0
629 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 5] 0
630 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7, 4] 0
631 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 7] 0
632 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
633 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
634 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 6, 5, 4, 6] 0
635 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 6, 5, 4, 5] 0
636 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 6, 5, 4] 0
637 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 6, 5, 6] 0
638 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 6, 5] 0
639 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 6, 4] 0
640 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 6] 0
641 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 5, 4, 5] 0
642 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 5, 4] 0
643 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 5] 0
644 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 4] 0
645 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3] 0
646 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 7, 6, 5, 2, 7, 6, 7] 0
647 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 7, 6, 5, 2, 7, 6] 0
648 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 7, 6, 5, 2, 7] 0
649 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 7, 6, 5, 2, 6] 0
650 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 7, 6, 5, 2] 0
651 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 7, 6, 5, 7, 6, 7] 0
652 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 7, 6, 5, 7, 6] 0
653 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 7, 6, 5, 7] 0
654 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 7, 6, 5, 6] 0
655 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 7, 6, 5] 0
656 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 7, 6, 2, 7] 0
657 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 7, 6, 2] 0
658 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 7, 6, 7] 0
659 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 7, 6] 0
660 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 7, 5, 2] 0
661 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 7, 5] 0
662 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 7, 2] 0
663 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 7] 0
664 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 6, 5, 2, 6] 0
665 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 6, 5, 2] 0
666 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 6, 5, 6] 0
667 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 6, 5] 0
668 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 6, 2] 0
669 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 6] 0
670 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 5, 2] 0
671 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 5] 0
672 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1, 2] 0
673 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 1] 0
674 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 7, 6, 5, 7, 6, 7] 0
675 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 7, 6, 5, 7, 6] 0
676 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 7, 6, 5, 7] 0
677 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 7, 6, 5, 6] 0
678 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 7, 6, 5] 0
679 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 7, 6, 7] 0
680 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 7, 6] 0
681 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 7, 5] 0
682 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 7] 0
683 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 6, 5, 6] 0
684 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 6, 5] 0
685 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 6] 0
686 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2, 5] 0
687 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 2] 0
688 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 1, 7, 6, 5, 7, 6, 7] 0
689 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 1, 7, 6, 5, 7, 6] 0
690 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 1, 7, 6, 5, 7] 0
691 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 1, 7, 6, 5, 6] 0
692 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 1, 7, 6, 5] 0
693 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 1, 7, 6, 7] 0
694 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 1, 7, 6] 0
695 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 1, 7, 5] 0
696 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 1, 7] 0
697 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 1, 6, 5, 6] 0
698 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 1, 6, 5] 0
699 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 1, 6] 0
700 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 1, 5] 0
701 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 1] 0
702 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 7, 6, 5, 7, 6, 7] 0
703 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 7, 6, 5, 7, 6] 0
704 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 7, 6, 5, 7] 0
705 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 7, 6, 5, 6] 0
706 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 7, 6, 5] 0
707 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 7, 6, 7] 0
708 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 7, 6] 0
709 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 7, 5] 0
710 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 7] 0
711 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 6, 5, 6] 0
712 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 6, 5] 0
713 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 6] 0
714 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 5] 0
715 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4] 0
716 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 7, 6, 3, 2, 7, 3] 0
717 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 7, 6, 3, 2, 7] 0
718 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 7, 6, 3, 2, 3] 0
719 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 7, 6, 3, 2] 0
720 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 7, 6, 3, 7] 0
721 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 7, 6, 3] 0
722 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 7, 6, 2, 7] 0
723 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 7, 6, 2] 0
724 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 7, 6, 7] 0
725 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 7, 6] 0
726 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 7, 3, 2, 3] 0
727 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 7, 3, 2] 0
728 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 7, 3] 0
729 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 7, 2] 0
730 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 7] 0
731 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 6, 3, 2, 3] 0
732 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 6, 3, 2] 0
733 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 6, 3] 0
734 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 6, 2] 0
735 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 6] 0
736 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 3, 2, 3] 0
737 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 3, 2] 0
738 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 3] 0
739 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1, 2] 0
740 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 1] 0
741 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 7, 6, 3, 7] 0
742 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 7, 6, 3] 0
743 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 7, 6, 7] 0
744 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 7, 6] 0
745 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 7, 3] 0
746 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 7] 0
747 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 6, 3] 0
748 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 6] 0
749 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2, 3] 0
750 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 2] 0
751 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 1, 7, 6, 7] 0
752 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 1, 7, 6] 0
753 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 1, 7] 0
754 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 1, 6] 0
755 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 1] 0
756 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 7, 6, 7] 0
757 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 7, 6] 0
758 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 7] 0
759 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3, 6] 0
760 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 3] 0
761 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 2, 1, 7, 6, 2, 7] 0
762 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 2, 1, 7, 6, 2] 0
763 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 2, 1, 7, 6, 7] 0
764 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 2, 1, 7, 6] 0
765 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 2, 1, 7, 2] 0
766 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 2, 1, 7] 0
767 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 2, 1, 6, 2] 0
768 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 2, 1, 6] 0
769 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 2, 1, 2] 0
770 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 2, 1] 0
771 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 2, 7, 6, 7] 0
772 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 2, 7, 6] 0
773 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 2, 7] 0
774 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 2, 6] 0
775 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 2] 0
776 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 1, 7, 6, 7] 0
777 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 1, 7, 6] 0
778 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 1, 7] 0
779 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 1, 6] 0
780 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 1] 0
781 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 7, 6, 7] 0
782 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 7, 6] 0
783 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 7] 0
784 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 6] 0
785 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5] 0
786 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 7, 4, 3, 2, 4, 3, 4] 0
787 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 7, 4, 3, 2, 4, 3] 0
788 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 7, 4, 3, 2, 4] 0
789 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 7, 4, 3, 2, 3] 0
790 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 7, 4, 3, 2] 0
791 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 7, 4, 3, 4] 0
792 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 7, 4, 3] 0
793 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 7, 4, 2] 0
794 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 7, 4] 0
795 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 7, 3, 2, 3] 0
796 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 7, 3, 2] 0
797 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 7, 3] 0
798 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 7, 2] 0
799 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 7] 0
800 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
801 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
802 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 4, 3, 2, 4] 0
803 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 4, 3, 2, 3] 0
804 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 4, 3, 2] 0
805 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 4, 3, 4] 0
806 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 4, 3] 0
807 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 4, 2] 0
808 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 4] 0
809 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 3, 2, 3] 0
810 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 3, 2] 0
811 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 3] 0
812 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1, 2] 0
813 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 1] 0
814 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 7, 4, 3, 4] 0
815 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 7, 4, 3] 0
816 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 7, 4] 0
817 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 7, 3] 0
818 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 7] 0
819 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 4, 3, 4] 0
820 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 4, 3] 0
821 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 4] 0
822 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2, 3] 0
823 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 2] 0
824 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 1, 7, 4] 0
825 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 1, 7] 0
826 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 1, 4] 0
827 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 1] 0
828 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 7, 4] 0
829 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 7] 0
830 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3, 4] 0
831 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 3] 0
832 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 2, 1, 7, 2] 0
833 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 2, 1, 7] 0
834 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 2, 1, 2] 0
835 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 2, 1] 0
836 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 2, 7] 0
837 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 2] 0
838 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 1, 7] 0
839 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 1] 0
840 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4, 7] 0
841 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 4] 0
842 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 3, 2, 1, 7, 3, 2, 3] 0
843 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 3, 2, 1, 7, 3, 2] 0
844 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 3, 2, 1, 7, 3] 0
845 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 3, 2, 1, 7, 2] 0
846 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 3, 2, 1, 7] 0
847 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 3, 2, 1, 3, 2, 3] 0
848 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 3, 2, 1, 3, 2] 0
849 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 3, 2, 1, 3] 0
850 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 3, 2, 1, 2] 0
851 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 3, 2, 1] 0
852 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 3, 2, 7, 3] 0
853 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 3, 2, 7] 0
854 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 3, 2, 3] 0
855 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 3, 2] 0
856 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 3, 1, 7] 0
857 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 3, 1] 0
858 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 3, 7] 0
859 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 3] 0
860 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 2, 1, 7, 2] 0
861 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 2, 1, 7] 0
862 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 2, 1, 2] 0
863 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 2, 1] 0
864 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 2, 7] 0
865 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 2] 0
866 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 1, 7] 0
867 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 1] 0
868 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 7] 0
869 [7, 6, 5, 4, 3, 2, 1, 0, 7, 6] 0
870 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
871 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
872 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] 0
873 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] 0
874 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] 0
875 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] 0
876 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] 0
877 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] 0
878 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5] 0
879 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] 0
880 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] 0
881 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4] 0
882 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 3] 0
883 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4, 3, 2] 0
884 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] 0
885 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4] 0
886 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4, 3, 5] 0
887 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4, 3, 4] 0
888 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4, 3] 0
889 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4, 2, 5] 0
890 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4, 2] 0
891 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4, 5] 0
892 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 4] 0
893 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 3, 2, 3] 0
894 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 3, 2] 0
895 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 3] 0
896 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5, 2] 0
897 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 5] 0
898 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
899 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
900 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 4, 3, 2, 4] 0
901 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 4, 3, 2, 3] 0
902 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 4, 3, 2] 0
903 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 4, 3, 4] 0
904 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 4, 3] 0
905 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 4, 2] 0
906 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 4] 0
907 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 3, 2, 3] 0
908 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 3, 2] 0
909 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 3] 0
910 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1, 2] 0
911 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 1] 0
912 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
913 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
914 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 5, 4, 3, 5] 0
915 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 5, 4, 3, 4] 0
916 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 5, 4, 3] 0
917 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 5, 4, 5] 0
918 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 5, 4] 0
919 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 5, 3] 0
920 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 5] 0
921 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 4, 3, 4] 0
922 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 4, 3] 0
923 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 4] 0
924 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2, 3] 0
925 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 2] 0
926 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 1, 5, 4, 5] 0
927 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 1, 5, 4] 0
928 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 1, 5] 0
929 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 1, 4] 0
930 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 1] 0
931 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 5, 4, 5] 0
932 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 5, 4] 0
933 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 5] 0
934 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3, 4] 0
935 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 3] 0
936 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 2, 1, 5, 2] 0
937 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 2, 1, 5] 0
938 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 2, 1, 2] 0
939 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 2, 1] 0
940 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 2, 5] 0
941 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 2] 0
942 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 1, 5] 0
943 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 1] 0
944 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4, 5] 0
945 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 4] 0
946 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 3, 2, 1, 3, 2, 3] 0
947 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 3, 2, 1, 3, 2] 0
948 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 3, 2, 1, 3] 0
949 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 3, 2, 1, 2] 0
950 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 3, 2, 1] 0
951 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 3, 2, 3] 0
952 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 3, 2] 0
953 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 3, 1] 0
954 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 3] 0
955 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 2, 1, 2] 0
956 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 2, 1] 0
957 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 2] 0
958 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5, 1] 0
959 [7, 6, 5, 4, 3, 2, 1, 0, 7, 5] 0
960 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
961 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
962 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 4, 3, 2, 4] 0
963 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 4, 3, 2, 3] 0
964 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 4, 3, 2] 0
965 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 4, 3, 4] 0
966 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 4, 3] 0
967 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 4, 2] 0
968 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 4] 0
969 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 3, 2, 3] 0
970 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 3, 2] 0
971 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 3] 0
972 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 2] 0
973 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1] 0
974 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3, 2, 4, 3, 4] 0
975 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3, 2, 4, 3] 0
976 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3, 2, 4] 0
977 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3, 2, 3] 0
978 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3, 2] 0
979 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3, 1, 4] 0
980 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3, 1] 0
981 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3, 4] 0
982 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 3] 0
983 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 2, 1, 2] 0
984 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 2, 1] 0
985 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 2] 0
986 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4, 1] 0
987 [7, 6, 5, 4, 3, 2, 1, 0, 7, 4] 0
988 [7, 6, 5, 4, 3, 2, 1, 0, 7, 3, 2, 1, 3, 2, 3] 0
989 [7, 6, 5, 4, 3, 2, 1, 0, 7, 3, 2, 1, 3, 2] 0
990 [7, 6, 5, 4, 3, 2, 1, 0, 7, 3, 2, 1, 3] 0
991 [7, 6, 5, 4, 3, 2, 1, 0, 7, 3, 2, 1, 2] 0
992 [7, 6, 5, 4, 3, 2, 1, 0, 7, 3, 2, 1] 0
993 [7, 6, 5, 4, 3, 2, 1, 0, 7, 3, 2, 3] 0
994 [7, 6, 5, 4, 3, 2, 1, 0, 7, 3, 2] 0
995 [7, 6, 5, 4, 3, 2, 1, 0, 7, 3, 1] 0
996 [7, 6, 5, 4, 3, 2, 1, 0, 7, 3] 0
997 [7, 6, 5, 4, 3, 2, 1, 0, 7, 2, 1, 2] 0
998 [7, 6, 5, 4, 3, 2, 1, 0, 7, 2, 1] 0
999 [7, 6, 5, 4, 3, 2, 1, 0, 7, 2] 0
1000 [7, 6, 5, 4, 3, 2, 1, 0, 7, 1] 0
1001 [7, 6, 5, 4, 3, 2, 1, 0, 7] 0
1002 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
1003 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
1004 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6] 0
1005 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 5] 0
1006 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4] 0
1007 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 6] 0
1008 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5] 0
1009 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 4] 0
1010 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6] 0
1011 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4, 5] 0
1012 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4] 0
1013 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5] 0
1014 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 4] 0
1015 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3] 0
1016 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5, 6] 0
1017 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5] 0
1018 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 6] 0
1019 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 5] 0
1020 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4] 0
1021 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 3, 6] 0
1022 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 3] 0
1023 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 6] 0
1024 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5] 0
1025 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 4, 3, 4] 0
1026 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 4, 3] 0
1027 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 4] 0
1028 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 3] 0
1029 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6] 0
1030 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
1031 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
1032 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3, 5] 0
1033 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3, 4] 0
1034 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3] 0
1035 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 5] 0
1036 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4] 0
1037 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 3] 0
1038 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5] 0
1039 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 4, 3, 4] 0
1040 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 4, 3] 0
1041 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 4] 0
1042 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 3] 0
1043 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2] 0
1044 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
1045 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
1046 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4, 6] 0
1047 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4, 5] 0
1048 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4] 0
1049 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 6] 0
1050 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5] 0
1051 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 4] 0
1052 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6] 0
1053 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 5, 4, 5] 0
1054 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 5, 4] 0
1055 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 5] 0
1056 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 4] 0
1057 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3] 0
1058 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 2, 6, 5, 6] 0
1059 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 2, 6, 5] 0
1060 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 2, 6] 0
1061 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 2, 5] 0
1062 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 2] 0
1063 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 6, 5, 6] 0
1064 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 6, 5] 0
1065 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 6] 0
1066 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 5] 0
1067 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4] 0
1068 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 3, 2, 6, 3] 0
1069 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 3, 2, 6] 0
1070 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 3, 2, 3] 0
1071 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 3, 2] 0
1072 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 3, 6] 0
1073 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 3] 0
1074 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 2, 6] 0
1075 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 2] 0
1076 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 6] 0
1077 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5] 0
1078 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 4, 3, 2, 4, 3, 4] 0
1079 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 4, 3, 2, 4, 3] 0
1080 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 4, 3, 2, 4] 0
1081 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 4, 3, 2, 3] 0
1082 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 4, 3, 2] 0
1083 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 4, 3, 4] 0
1084 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 4, 3] 0
1085 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 4, 2] 0
1086 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 4] 0
1087 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 3, 2, 3] 0
1088 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 3, 2] 0
1089 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 3] 0
1090 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 2] 0
1091 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6] 0
1092 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
1093 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
1094 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] 0
1095 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] 0
1096 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] 0
1097 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] 0
1098 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] 0
1099 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] 0
1100 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5] 0
1101 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] 0
1102 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] 0
1103 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4] 0
1104 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 3] 0
1105 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2] 0
1106 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] 0
1107 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4] 0
1108 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 5] 0
1109 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 4] 0
1110 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3] 0
1111 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 2, 5] 0
1112 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 2] 0
1113 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 5] 0
1114 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4] 0
1115 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 3, 2, 3] 0
1116 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 3, 2] 0
1117 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 3] 0
1118 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 2] 0
1119 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5] 0
1120 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
1121 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
1122 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 4, 3, 2, 4] 0
1123 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 4, 3, 2, 3] 0
1124 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 4, 3, 2] 0
1125 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 4, 3, 4] 0
1126 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 4, 3] 0
1127 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 4, 2] 0
1128 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 4] 0
1129 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 3, 2, 3] 0
1130 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 3, 2] 0
1131 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 3] 0
1132 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 2] 0
1133 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1] 0
1134 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
1135 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
1136 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6] 0
1137 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 5] 0
1138 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4] 0
1139 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 6] 0
1140 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5] 0
1141 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 4] 0
1142 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6] 0
1143 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4, 5] 0
1144 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4] 0
1145 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5] 0
1146 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 4] 0
1147 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3] 0
1148 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5, 6] 0
1149 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5] 0
1150 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 6] 0
1151 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 5] 0
1152 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4] 0
1153 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 3, 6] 0
1154 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 3] 0
1155 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 6] 0
1156 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5] 0
1157 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 4, 3, 4] 0
1158 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 4, 3] 0
1159 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 4] 0
1160 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 3] 0
1161 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6] 0
1162 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
1163 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
1164 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 5, 4, 3, 5] 0
1165 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 5, 4, 3, 4] 0
1166 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 5, 4, 3] 0
1167 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 5, 4, 5] 0
1168 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 5, 4] 0
1169 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 5, 3] 0
1170 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 5] 0
1171 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 4, 3, 4] 0
1172 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 4, 3] 0
1173 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 4] 0
1174 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 3] 0
1175 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2] 0
1176 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 6, 5, 4, 6, 5, 6] 0
1177 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 6, 5, 4, 6, 5] 0
1178 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 6, 5, 4, 6] 0
1179 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 6, 5, 4, 5] 0
1180 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 6, 5, 4] 0
1181 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 6, 5, 6] 0
1182 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 6, 5] 0
1183 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 6, 4] 0
1184 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 6] 0
1185 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 5, 4, 5] 0
1186 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 5, 4] 0
1187 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 5] 0
1188 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 4] 0
1189 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1] 0
1190 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
1191 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
1192 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 6, 5, 4, 6] 0
1193 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 6, 5, 4, 5] 0
1194 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 6, 5, 4] 0
1195 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 6, 5, 6] 0
1196 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 6, 5] 0
1197 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 6, 4] 0
1198 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 6] 0
1199 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 5, 4, 5] 0
1200 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 5, 4] 0
1201 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 5] 0
1202 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 4] 0
1203 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3] 0
1204 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 1, 6, 5, 2, 6] 0
1205 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 1, 6, 5, 2] 0
1206 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 1, 6, 5, 6] 0
1207 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 1, 6, 5] 0
1208 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 1, 6, 2] 0
1209 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 1, 6] 0
1210 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 1, 5, 2] 0
1211 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 1, 5] 0
1212 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 1, 2] 0
1213 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 1] 0
1214 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 6, 5, 6] 0
1215 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 6, 5] 0
1216 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 6] 0
1217 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 5] 0
1218 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2] 0
1219 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 1, 6, 5, 6] 0
1220 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 1, 6, 5] 0
1221 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 1, 6] 0
1222 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 1, 5] 0
1223 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 1] 0
1224 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 6, 5, 6] 0
1225 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 6, 5] 0
1226 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 6] 0
1227 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 5] 0
1228 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4] 0
1229 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 1, 6, 3, 2, 3] 0
1230 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 1, 6, 3, 2] 0
1231 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 1, 6, 3] 0
1232 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 1, 6, 2] 0
1233 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 1, 6] 0
1234 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 1, 3, 2, 3] 0
1235 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 1, 3, 2] 0
1236 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 1, 3] 0
1237 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 1, 2] 0
1238 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 1] 0
1239 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 6, 3] 0
1240 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 6] 0
1241 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 3] 0
1242 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2] 0
1243 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 1, 6] 0
1244 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 1] 0
1245 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 6] 0
1246 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 3] 0
1247 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 2, 1, 6, 2] 0
1248 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 2, 1, 6] 0
1249 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 2, 1, 2] 0
1250 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 2, 1] 0
1251 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 2, 6] 0
1252 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 2] 0
1253 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 1, 6] 0
1254 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 1] 0
1255 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 6] 0
1256 [7, 6, 5, 4, 3, 2, 1, 0, 6, 5] 0
1257 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
1258 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
1259 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 4, 3, 2, 4] 0
1260 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 4, 3, 2, 3] 0
1261 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 4, 3, 2] 0
1262 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 4, 3, 4] 0
1263 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 4, 3] 0
1264 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 4, 2] 0
1265 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 4] 0
1266 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 3, 2, 3] 0
1267 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 3, 2] 0
1268 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 3] 0
1269 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 2] 0
1270 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1] 0
1271 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 4, 3, 4] 0
1272 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 4, 3] 0
1273 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 4] 0
1274 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 3] 0
1275 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2] 0
1276 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 1, 4] 0
1277 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 1] 0
1278 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 4] 0
1279 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 3] 0
1280 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 2, 1, 2] 0
1281 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 2, 1] 0
1282 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 2] 0
1283 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4, 1] 0
1284 [7, 6, 5, 4, 3, 2, 1, 0, 6, 4] 0
1285 [7, 6, 5, 4, 3, 2, 1, 0, 6, 3, 2, 1, 3, 2, 3] 0
1286 [7, 6, 5, 4, 3, 2, 1, 0, 6, 3, 2, 1, 3, 2] 0
1287 [7, 6, 5, 4, 3, 2, 1, 0, 6, 3, 2, 1, 3] 0
1288 [7, 6, 5, 4, 3, 2, 1, 0, 6, 3, 2, 1, 2] 0
1289 [7, 6, 5, 4, 3, 2, 1, 0, 6, 3, 2, 1] 0
1290 [7, 6, 5, 4, 3, 2, 1, 0, 6, 3, 2, 3] 0
1291 [7, 6, 5, 4, 3, 2, 1, 0, 6, 3, 2] 0
1292 [7, 6, 5, 4, 3, 2, 1, 0, 6, 3, 1] 0
1293 [7, 6, 5, 4, 3, 2, 1, 0, 6, 3] 0
1294 [7, 6, 5, 4, 3, 2, 1, 0, 6, 2, 1, 2] 0
1295 [7, 6, 5, 4, 3, 2, 1, 0, 6, 2, 1] 0
1296 [7, 6, 5, 4, 3, 2, 1, 0, 6, 2] 0
1297 [7, 6, 5, 4, 3, 2, 1, 0, 6, 1] 0
1298 [7, 6, 5, 4, 3, 2, 1, 0, 6] 0
1299 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
1300 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
1301 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] 0
1302 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] 0
1303 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] 0
1304 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] 0
1305 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] 0
1306 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] 0
1307 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5] 0
1308 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] 0
1309 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] 0
1310 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4] 0
1311 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 3] 0
1312 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2] 0
1313 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] 0
1314 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4] 0
1315 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5] 0
1316 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 4] 0
1317 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3] 0
1318 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2, 5] 0
1319 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2] 0
1320 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 5] 0
1321 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4] 0
1322 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2, 3] 0
1323 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2] 0
1324 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3] 0
1325 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 2] 0
1326 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5] 0
1327 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
1328 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
1329 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4] 0
1330 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 3] 0
1331 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2] 0
1332 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 4] 0
1333 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3] 0
1334 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 2] 0
1335 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4] 0
1336 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2, 3] 0
1337 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2] 0
1338 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3] 0
1339 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 2] 0
1340 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1] 0
1341 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
1342 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
1343 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5] 0
1344 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 4] 0
1345 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3] 0
1346 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 5] 0
1347 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4] 0
1348 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 3] 0
1349 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5] 0
1350 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4, 3, 4] 0
1351 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4, 3] 0
1352 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4] 0
1353 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 3] 0
1354 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2] 0
1355 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5, 4, 5] 0
1356 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5, 4] 0
1357 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5] 0
1358 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 4] 0
1359 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 1] 0
1360 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 5, 4, 5] 0
1361 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 5, 4] 0
1362 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 5] 0
1363 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 4] 0
1364 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3] 0
1365 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 5, 2] 0
1366 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 5] 0
1367 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 2] 0
1368 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 2, 1] 0
1369 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 2, 5] 0
1370 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 2] 0
1371 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 1, 5] 0
1372 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 1] 0
1373 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4, 5] 0
1374 [7, 6, 5, 4, 3, 2, 1, 0, 5, 4] 0
1375 [7, 6, 5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3, 2, 3] 0
1376 [7, 6, 5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3, 2] 0
1377 [7, 6, 5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3] 0
1378 [7, 6, 5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 2] 0
1379 [7, 6, 5, 4, 3, 2, 1, 0, 5, 3, 2, 1] 0
1380 [7, 6, 5, 4, 3, 2, 1, 0, 5, 3, 2, 3] 0
1381 [7, 6, 5, 4, 3, 2, 1, 0, 5, 3, 2] 0
1382 [7, 6, 5, 4, 3, 2, 1, 0, 5, 3, 1] 0
1383 [7, 6, 5, 4, 3, 2, 1, 0, 5, 3] 0
1384 [7, 6, 5, 4, 3, 2, 1, 0, 5, 2, 1, 2] 0
1385 [7, 6, 5, 4, 3, 2, 1, 0, 5, 2, 1] 0
1386 [7, 6, 5, 4, 3, 2, 1, 0, 5, 2] 0
1387 [7, 6, 5, 4, 3, 2, 1, 0, 5, 1] 0
1388 [7, 6, 5, 4, 3, 2, 1, 0, 5] 0
1389 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
1390 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
1391 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4] 0
1392 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 3] 0
1393 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2] 0
1394 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 4] 0
1395 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3] 0
1396 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 2] 0
1397 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4] 0
1398 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2, 3] 0
1399 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2] 0
1400 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3] 0
1401 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 2] 0
1402 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1] 0
1403 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3, 4] 0
1404 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3] 0
1405 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 4] 0
1406 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 3] 0
1407 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3, 2] 0
1408 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3, 1, 4] 0
1409 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3, 1] 0
1410 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3, 4] 0
1411 [7, 6, 5, 4, 3, 2, 1, 0, 4, 3] 0
1412 [7, 6, 5, 4, 3, 2, 1, 0, 4, 2, 1, 2] 0
1413 [7, 6, 5, 4, 3, 2, 1, 0, 4, 2, 1] 0
1414 [7, 6, 5, 4, 3, 2, 1, 0, 4, 2] 0
1415 [7, 6, 5, 4, 3, 2, 1, 0, 4, 1] 0
1416 [7, 6, 5, 4, 3, 2, 1, 0, 4] 0
1417 [7, 6, 5, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
1418 [7, 6, 5, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
1419 [7, 6, 5, 4, 3, 2, 1, 0, 3, 2, 1, 3] 0
1420 [7, 6, 5, 4, 3, 2, 1, 0, 3, 2, 1, 2] 0
1421 [7, 6, 5, 4, 3, 2, 1, 0, 3, 2, 1] 0
1422 [7, 6, 5, 4, 3, 2, 1, 0, 3, 2, 3] 0
1423 [7, 6, 5, 4, 3, 2, 1, 0, 3, 2] 0
1424 [7, 6, 5, 4, 3, 2, 1, 0, 3, 1] 0
1425 [7, 6, 5, 4, 3, 2, 1, 0, 3] 0
1426 [7, 6, 5, 4, 3, 2, 1, 0, 2, 1, 2] 0
1427 [7, 6, 5, 4, 3, 2, 1, 0, 2, 1] 0
1428 [7, 6, 5, 4, 3, 2, 1, 0, 2] 0
1429 [7, 6, 5, 4, 3, 2, 1, 0, 1] 0
1430 [7, 6, 5, 4, 3, 2, 1, 0] 0
1431 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7, 6, 7] 0
1432 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7, 6] 0
1433 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7] 0
1434 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 6] 0
1435 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5] 0
1436 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 7] 0
1437 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6] 0
1438 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 5] 0
1439 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7] 0
1440 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6, 5, 6] 0
1441 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6, 5] 0
1442 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6] 0
1443 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 5] 0
1444 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4] 0
1445 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 7, 6, 7] 0
1446 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 7, 6] 0
1447 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 7] 0
1448 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 6] 0
1449 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5] 0
1450 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 4, 7] 0
1451 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 4] 0
1452 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 7] 0
1453 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6] 0
1454 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 5, 4, 5] 0
1455 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 5, 4] 0
1456 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 5] 0
1457 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 4] 0
1458 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7] 0
1459 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
1460 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
1461 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 4, 6] 0
1462 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 4, 5] 0
1463 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 4] 0
1464 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 6] 0
1465 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5] 0
1466 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 4] 0
1467 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6] 0
1468 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 5, 4, 5] 0
1469 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 5, 4] 0
1470 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 5] 0
1471 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 4] 0
1472 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3] 0
1473 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 5, 7, 6, 7] 0
1474 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 5, 7, 6] 0
1475 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 5, 7] 0
1476 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 5, 6] 0
1477 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 5] 0
1478 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 7] 0
1479 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6] 0
1480 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 5] 0
1481 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7] 0
1482 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 6, 5, 6] 0
1483 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 6, 5] 0
1484 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 6] 0
1485 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 5] 0
1486 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4] 0
1487 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 3, 7, 6, 7] 0
1488 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 3, 7, 6] 0
1489 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 3, 7] 0
1490 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 3, 6] 0
1491 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 3] 0
1492 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 7, 6, 7] 0
1493 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 7, 6] 0
1494 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 7] 0
1495 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5, 6] 0
1496 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 5] 0
1497 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 4, 3, 7, 4] 0
1498 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 4, 3, 7] 0
1499 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 4, 3, 4] 0
1500 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 4, 3] 0
1501 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 4, 7] 0
1502 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 4] 0
1503 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 3, 7] 0
1504 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 3] 0
1505 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6, 7] 0
1506 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 6] 0
1507 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 5, 4, 3, 5, 4, 5] 0
1508 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 5, 4, 3, 5, 4] 0
1509 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 5, 4, 3, 5] 0
1510 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 5, 4, 3, 4] 0
1511 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 5, 4, 3] 0
1512 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 5, 4, 5] 0
1513 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 5, 4] 0
1514 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 5, 3] 0
1515 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 5] 0
1516 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 4, 3, 4] 0
1517 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 4, 3] 0
1518 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 4] 0
1519 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7, 3] 0
1520 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 7] 0
1521 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
1522 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
1523 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6] 0
1524 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 5] 0
1525 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4] 0
1526 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 6] 0
1527 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5] 0
1528 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 4] 0
1529 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6] 0
1530 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4, 5] 0
1531 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4] 0
1532 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5] 0
1533 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 4] 0
1534 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 3] 0
1535 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5, 6] 0
1536 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5] 0
1537 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 6] 0
1538 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4, 5] 0
1539 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 4] 0
1540 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 3, 6] 0
1541 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 3] 0
1542 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5, 6] 0
1543 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 5] 0
1544 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 4, 3, 4] 0
1545 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 4, 3] 0
1546 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 4] 0
1547 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6, 3] 0
1548 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 6] 0
1549 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
1550 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
1551 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 5, 4, 3, 5] 0
1552 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 5, 4, 3, 4] 0
1553 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 5, 4, 3] 0
1554 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 5, 4, 5] 0
1555 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 5, 4] 0
1556 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 5, 3] 0
1557 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 5] 0
1558 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 4, 3, 4] 0
1559 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 4, 3] 0
1560 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 4] 0
1561 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 3] 0
1562 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2] 0
1563 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7, 6, 7] 0
1564 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7, 6] 0
1565 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7] 0
1566 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 6] 0
1567 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5] 0
1568 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 7] 0
1569 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6] 0
1570 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 5] 0
1571 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7] 0
1572 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6, 5, 6] 0
1573 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6, 5] 0
1574 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6] 0
1575 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4, 5] 0
1576 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 4] 0
1577 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 7, 6, 7] 0
1578 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 7, 6] 0
1579 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 7] 0
1580 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5, 6] 0
1581 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 5] 0
1582 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 4, 7] 0
1583 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 4] 0
1584 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6, 7] 0
1585 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 6] 0
1586 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 5, 4, 5] 0
1587 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 5, 4] 0
1588 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 5] 0
1589 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7, 4] 0
1590 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 7] 0
1591 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
1592 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
1593 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 6, 5, 4, 6] 0
1594 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 6, 5, 4, 5] 0
1595 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 6, 5, 4] 0
1596 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 6, 5, 6] 0
1597 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 6, 5] 0
1598 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 6, 4] 0
1599 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 6] 0
1600 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 5, 4, 5] 0
1601 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 5, 4] 0
1602 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 5] 0
1603 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 4] 0
1604 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3] 0
1605 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 7, 6, 5, 7, 6, 7] 0
1606 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 7, 6, 5, 7, 6] 0
1607 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 7, 6, 5, 7] 0
1608 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 7, 6, 5, 6] 0
1609 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 7, 6, 5] 0
1610 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 7, 6, 7] 0
1611 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 7, 6] 0
1612 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 7, 5] 0
1613 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 7] 0
1614 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 6, 5, 6] 0
1615 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 6, 5] 0
1616 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 6] 0
1617 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2, 5] 0
1618 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 2] 0
1619 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 7, 6, 5, 7, 6, 7] 0
1620 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 7, 6, 5, 7, 6] 0
1621 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 7, 6, 5, 7] 0
1622 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 7, 6, 5, 6] 0
1623 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 7, 6, 5] 0
1624 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 7, 6, 7] 0
1625 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 7, 6] 0
1626 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 7, 5] 0
1627 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 7] 0
1628 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 6, 5, 6] 0
1629 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 6, 5] 0
1630 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 6] 0
1631 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 5] 0
1632 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4] 0
1633 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 2, 7, 6, 3, 7] 0
1634 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 2, 7, 6, 3] 0
1635 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 2, 7, 6, 7] 0
1636 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 2, 7, 6] 0
1637 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 2, 7, 3] 0
1638 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 2, 7] 0
1639 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 2, 6, 3] 0
1640 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 2, 6] 0
1641 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 2, 3] 0
1642 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 2] 0
1643 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 7, 6, 7] 0
1644 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 7, 6] 0
1645 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 7] 0
1646 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3, 6] 0
1647 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 3] 0
1648 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 2, 7, 6, 7] 0
1649 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 2, 7, 6] 0
1650 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 2, 7] 0
1651 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 2, 6] 0
1652 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 2] 0
1653 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 7, 6, 7] 0
1654 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 7, 6] 0
1655 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 7] 0
1656 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 6] 0
1657 [7, 6, 5, 4, 3, 2, 1, 7, 6, 5] 0
1658 [7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 2, 7, 4, 3, 4] 0
1659 [7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 2, 7, 4, 3] 0
1660 [7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 2, 7, 4] 0
1661 [7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 2, 7, 3] 0
1662 [7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 2, 7] 0
1663 [7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 2, 4, 3, 4] 0
1664 [7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 2, 4, 3] 0
1665 [7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 2, 4] 0
1666 [7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 2, 3] 0
1667 [7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 2] 0
1668 [7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 7, 4] 0
1669 [7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 7] 0
1670 [7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3, 4] 0
1671 [7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 3] 0
1672 [7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 2, 7] 0
1673 [7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 2] 0
1674 [7, 6, 5, 4, 3, 2, 1, 7, 6, 4, 7] 0
1675 [7, 6, 5, 4, 3, 2, 1, 7, 6, 4] 0
1676 [7, 6, 5, 4, 3, 2, 1, 7, 6, 3, 2, 7, 3] 0
1677 [7, 6, 5, 4, 3, 2, 1, 7, 6, 3, 2, 7] 0
1678 [7, 6, 5, 4, 3, 2, 1, 7, 6, 3, 2, 3] 0
1679 [7, 6, 5, 4, 3, 2, 1, 7, 6, 3, 2] 0
1680 [7, 6, 5, 4, 3, 2, 1, 7, 6, 3, 7] 0
1681 [7, 6, 5, 4, 3, 2, 1, 7, 6, 3] 0
1682 [7, 6, 5, 4, 3, 2, 1, 7, 6, 2, 7] 0
1683 [7, 6, 5, 4, 3, 2, 1, 7, 6, 2] 0
1684 [7, 6, 5, 4, 3, 2, 1, 7, 6, 7] 0
1685 [7, 6, 5, 4, 3, 2, 1, 7, 6] 0
1686 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
1687 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
1688 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 5, 4, 3, 5] 0
1689 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 5, 4, 3, 4] 0
1690 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 5, 4, 3] 0
1691 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 5, 4, 5] 0
1692 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 5, 4] 0
1693 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 5, 3] 0
1694 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 5] 0
1695 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 4, 3, 4] 0
1696 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 4, 3] 0
1697 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 4] 0
1698 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2, 3] 0
1699 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 2] 0
1700 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 5, 4, 5] 0
1701 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 5, 4] 0
1702 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 5] 0
1703 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3, 4] 0
1704 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 3] 0
1705 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 2, 5] 0
1706 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 2] 0
1707 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4, 5] 0
1708 [7, 6, 5, 4, 3, 2, 1, 7, 5, 4] 0
1709 [7, 6, 5, 4, 3, 2, 1, 7, 5, 3, 2, 3] 0
1710 [7, 6, 5, 4, 3, 2, 1, 7, 5, 3, 2] 0
1711 [7, 6, 5, 4, 3, 2, 1, 7, 5, 3] 0
1712 [7, 6, 5, 4, 3, 2, 1, 7, 5, 2] 0
1713 [7, 6, 5, 4, 3, 2, 1, 7, 5] 0
1714 [7, 6, 5, 4, 3, 2, 1, 7, 4, 3, 2, 4, 3, 4] 0
1715 [7, 6, 5, 4, 3, 2, 1, 7, 4, 3, 2, 4, 3] 0
1716 [7, 6, 5, 4, 3, 2, 1, 7, 4, 3, 2, 4] 0
1717 [7, 6, 5, 4, 3, 2, 1, 7, 4, 3, 2, 3] 0
1718 [7, 6, 5, 4, 3, 2, 1, 7, 4, 3, 2] 0
1719 [7, 6, 5, 4, 3, 2, 1, 7, 4, 3, 4] 0
1720 [7, 6, 5, 4, 3, 2, 1, 7, 4, 3] 0
1721 [7, 6, 5, 4, 3, 2, 1, 7, 4, 2] 0
1722 [7, 6, 5, 4, 3, 2, 1, 7, 4] 0
1723 [7, 6, 5, 4, 3, 2, 1, 7, 3, 2, 3] 0
1724 [7, 6, 5, 4, 3, 2, 1, 7, 3, 2] 0
1725 [7, 6, 5, 4, 3, 2, 1, 7, 3] 0
1726 [7, 6, 5, 4, 3, 2, 1, 7, 2] 0
1727 [7, 6, 5, 4, 3, 2, 1, 7] 0
1728 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
1729 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
1730 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6] 0
1731 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 5] 0
1732 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4] 0
1733 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 6] 0
1734 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5] 0
1735 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 4] 0
1736 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6] 0
1737 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4, 5] 0
1738 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4] 0
1739 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5] 0
1740 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 4] 0
1741 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3] 0
1742 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5, 6] 0
1743 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5] 0
1744 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 6] 0
1745 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 5] 0
1746 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4] 0
1747 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 3, 6] 0
1748 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 3] 0
1749 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 6] 0
1750 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5] 0
1751 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 4, 3, 4] 0
1752 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 4, 3] 0
1753 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 4] 0
1754 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 3] 0
1755 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6] 0
1756 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
1757 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
1758 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3, 5] 0
1759 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3, 4] 0
1760 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3] 0
1761 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 5] 0
1762 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4] 0
1763 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 3] 0
1764 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5] 0
1765 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 4, 3, 4] 0
1766 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 4, 3] 0
1767 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 4] 0
1768 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 3] 0
1769 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2] 0
1770 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
1771 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
1772 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4, 6] 0
1773 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4, 5] 0
1774 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4] 0
1775 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 6] 0
1776 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5] 0
1777 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 4] 0
1778 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6] 0
1779 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 5, 4, 5] 0
1780 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 5, 4] 0
1781 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 5] 0
1782 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 4] 0
1783 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3] 0
1784 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 2, 6, 5, 6] 0
1785 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 2, 6, 5] 0
1786 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 2, 6] 0
1787 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 2, 5] 0
1788 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 2] 0
1789 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 6, 5, 6] 0
1790 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 6, 5] 0
1791 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 6] 0
1792 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4, 5] 0
1793 [7, 6, 5, 4, 3, 2, 1, 6, 5, 4] 0
1794 [7, 6, 5, 4, 3, 2, 1, 6, 5, 3, 2, 6, 3] 0
1795 [7, 6, 5, 4, 3, 2, 1, 6, 5, 3, 2, 6] 0
1796 [7, 6, 5, 4, 3, 2, 1, 6, 5, 3, 2, 3] 0
1797 [7, 6, 5, 4, 3, 2, 1, 6, 5, 3, 2] 0
1798 [7, 6, 5, 4, 3, 2, 1, 6, 5, 3, 6] 0
1799 [7, 6, 5, 4, 3, 2, 1, 6, 5, 3] 0
1800 [7, 6, 5, 4, 3, 2, 1, 6, 5, 2, 6] 0
1801 [7, 6, 5, 4, 3, 2, 1, 6, 5, 2] 0
1802 [7, 6, 5, 4, 3, 2, 1, 6, 5, 6] 0
1803 [7, 6, 5, 4, 3, 2, 1, 6, 5] 0
1804 [7, 6, 5, 4, 3, 2, 1, 6, 4, 3, 2, 4, 3, 4] 0
1805 [7, 6, 5, 4, 3, 2, 1, 6, 4, 3, 2, 4, 3] 0
1806 [7, 6, 5, 4, 3, 2, 1, 6, 4, 3, 2, 4] 0
1807 [7, 6, 5, 4, 3, 2, 1, 6, 4, 3, 2, 3] 0
1808 [7, 6, 5, 4, 3, 2, 1, 6, 4, 3, 2] 0
1809 [7, 6, 5, 4, 3, 2, 1, 6, 4, 3, 4] 0
1810 [7, 6, 5, 4, 3, 2, 1, 6, 4, 3] 0
1811 [7, 6, 5, 4, 3, 2, 1, 6, 4, 2] 0
1812 [7, 6, 5, 4, 3, 2, 1, 6, 4] 0
1813 [7, 6, 5, 4, 3, 2, 1, 6, 3, 2, 3] 0
1814 [7, 6, 5, 4, 3, 2, 1, 6, 3, 2] 0
1815 [7, 6, 5, 4, 3, 2, 1, 6, 3] 0
1816 [7, 6, 5, 4, 3, 2, 1, 6, 2] 0
1817 [7, 6, 5, 4, 3, 2, 1, 6] 0
1818 [7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
1819 [7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
1820 [7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] 0
1821 [7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] 0
1822 [7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] 0
1823 [7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] 0
1824 [7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] 0
1825 [7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] 0
1826 [7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5] 0
1827 [7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] 0
1828 [7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] 0
1829 [7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4] 0
1830 [7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 3] 0
1831 [7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2] 0
1832 [7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] 0
1833 [7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4] 0
1834 [7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 5] 0
1835 [7, 6, 5, 4, 3, 2, 1, 5, 4, 3, 4] 0
1836 [7, 6, 5, 4, 3, 2, 1, 5, 4, 3] 0
1837 [7, 6, 5, 4, 3, 2, 1, 5, 4, 2, 5] 0
1838 [7, 6, 5, 4, 3, 2, 1, 5, 4, 2] 0
1839 [7, 6, 5, 4, 3, 2, 1, 5, 4, 5] 0
1840 [7, 6, 5, 4, 3, 2, 1, 5, 4] 0
1841 [7, 6, 5, 4, 3, 2, 1, 5, 3, 2, 3] 0
1842 [7, 6, 5, 4, 3, 2, 1, 5, 3, 2] 0
1843 [7, 6, 5, 4, 3, 2, 1, 5, 3] 0
1844 [7, 6, 5, 4, 3, 2, 1, 5, 2] 0
1845 [7, 6, 5, 4, 3, 2, 1, 5] 0
1846 [7, 6, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
1847 [7, 6, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
1848 [7, 6, 5, 4, 3, 2, 1, 4, 3, 2, 4] 0
1849 [7, 6, 5, 4, 3, 2, 1, 4, 3, 2, 3] 0
1850 [7, 6, 5, 4, 3, 2, 1, 4, 3, 2] 0
1851 [7, 6, 5, 4, 3, 2, 1, 4, 3, 4] 0
1852 [7, 6, 5, 4, 3, 2, 1, 4, 3] 0
1853 [7, 6, 5, 4, 3, 2, 1, 4, 2] 0
1854 [7, 6, 5, 4, 3, 2, 1, 4] 0
1855 [7, 6, 5, 4, 3, 2, 1, 3, 2, 3] 0
1856 [7, 6, 5, 4, 3, 2, 1, 3, 2] 0
1857 [7, 6, 5, 4, 3, 2, 1, 3] 0
1858 [7, 6, 5, 4, 3, 2, 1, 2] 0
1859 [7, 6, 5, 4, 3, 2, 1] 0
1860 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7, 6, 7] 0
1861 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7, 6] 0
1862 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7] 0
1863 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 6] 0
1864 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5] 0
1865 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 7] 0
1866 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6] 0
1867 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 5] 0
1868 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7] 0
1869 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6, 5, 6] 0
1870 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6, 5] 0
1871 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6] 0
1872 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4, 5] 0
1873 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6, 5, 4] 0
1874 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6, 5, 7, 6, 7] 0
1875 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6, 5, 7, 6] 0
1876 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6, 5, 7] 0
1877 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6, 5, 6] 0
1878 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6, 5] 0
1879 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6, 4, 7] 0
1880 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6, 4] 0
1881 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6, 7] 0
1882 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 6] 0
1883 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 5, 4, 5] 0
1884 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 5, 4] 0
1885 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 5] 0
1886 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7, 4] 0
1887 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 7] 0
1888 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
1889 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
1890 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 6, 5, 4, 6] 0
1891 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 6, 5, 4, 5] 0
1892 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 6, 5, 4] 0
1893 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 6, 5, 6] 0
1894 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 6, 5] 0
1895 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 6, 4] 0
1896 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 6] 0
1897 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 5, 4, 5] 0
1898 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 5, 4] 0
1899 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 5] 0
1900 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3, 4] 0
1901 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 3] 0
1902 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 7, 6, 5, 7, 6, 7] 0
1903 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 7, 6, 5, 7, 6] 0
1904 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 7, 6, 5, 7] 0
1905 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 7, 6, 5, 6] 0
1906 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 7, 6, 5] 0
1907 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 7, 6, 7] 0
1908 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 7, 6] 0
1909 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 7, 5] 0
1910 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 7] 0
1911 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 6, 5, 6] 0
1912 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 6, 5] 0
1913 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 6] 0
1914 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4, 5] 0
1915 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 4] 0
1916 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 3, 7, 6, 7] 0
1917 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 3, 7, 6] 0
1918 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 3, 7] 0
1919 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 3, 6] 0
1920 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 3] 0
1921 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 7, 6, 7] 0
1922 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 7, 6] 0
1923 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 7] 0
1924 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5, 6] 0
1925 [7, 6, 5, 4, 3, 2, 0, 7, 6, 5] 0
1926 [7, 6, 5, 4, 3, 2, 0, 7, 6, 4, 3, 7, 4] 0
1927 [7, 6, 5, 4, 3, 2, 0, 7, 6, 4, 3, 7] 0
1928 [7, 6, 5, 4, 3, 2, 0, 7, 6, 4, 3, 4] 0
1929 [7, 6, 5, 4, 3, 2, 0, 7, 6, 4, 3] 0
1930 [7, 6, 5, 4, 3, 2, 0, 7, 6, 4, 7] 0
1931 [7, 6, 5, 4, 3, 2, 0, 7, 6, 4] 0
1932 [7, 6, 5, 4, 3, 2, 0, 7, 6, 3, 7] 0
1933 [7, 6, 5, 4, 3, 2, 0, 7, 6, 3] 0
1934 [7, 6, 5, 4, 3, 2, 0, 7, 6, 7] 0
1935 [7, 6, 5, 4, 3, 2, 0, 7, 6] 0
1936 [7, 6, 5, 4, 3, 2, 0, 7, 5, 4, 3, 5, 4, 5] 0
1937 [7, 6, 5, 4, 3, 2, 0, 7, 5, 4, 3, 5, 4] 0
1938 [7, 6, 5, 4, 3, 2, 0, 7, 5, 4, 3, 5] 0
1939 [7, 6, 5, 4, 3, 2, 0, 7, 5, 4, 3, 4] 0
1940 [7, 6, 5, 4, 3, 2, 0, 7, 5, 4, 3] 0
1941 [7, 6, 5, 4, 3, 2, 0, 7, 5, 4, 5] 0
1942 [7, 6, 5, 4, 3, 2, 0, 7, 5, 4] 0
1943 [7, 6, 5, 4, 3, 2, 0, 7, 5, 3] 0
1944 [7, 6, 5, 4, 3, 2, 0, 7, 5] 0
1945 [7, 6, 5, 4, 3, 2, 0, 7, 4, 3, 4] 0
1946 [7, 6, 5, 4, 3, 2, 0, 7, 4, 3] 0
1947 [7, 6, 5, 4, 3, 2, 0, 7, 4] 0
1948 [7, 6, 5, 4, 3, 2, 0, 7, 3] 0
1949 [7, 6, 5, 4, 3, 2, 0, 7] 0
1950 [7, 6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
1951 [7, 6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
1952 [7, 6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 6, 5, 4, 6] 0
1953 [7, 6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 6, 5, 4, 5] 0
1954 [7, 6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 6, 5, 4] 0
1955 [7, 6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 6, 5, 6] 0
1956 [7, 6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 6, 5] 0
1957 [7, 6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 6, 4] 0
1958 [7, 6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 6] 0
1959 [7, 6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 5, 4, 5] 0
1960 [7, 6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 5, 4] 0
1961 [7, 6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 5] 0
1962 [7, 6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 4] 0
1963 [7, 6, 5, 4, 3, 2, 0, 6, 5, 4, 3] 0
1964 [7, 6, 5, 4, 3, 2, 0, 6, 5, 4, 6, 5, 6] 0
1965 [7, 6, 5, 4, 3, 2, 0, 6, 5, 4, 6, 5] 0
1966 [7, 6, 5, 4, 3, 2, 0, 6, 5, 4, 6] 0
1967 [7, 6, 5, 4, 3, 2, 0, 6, 5, 4, 5] 0
1968 [7, 6, 5, 4, 3, 2, 0, 6, 5, 4] 0
1969 [7, 6, 5, 4, 3, 2, 0, 6, 5, 3, 6] 0
1970 [7, 6, 5, 4, 3, 2, 0, 6, 5, 3] 0
1971 [7, 6, 5, 4, 3, 2, 0, 6, 5, 6] 0
1972 [7, 6, 5, 4, 3, 2, 0, 6, 5] 0
1973 [7, 6, 5, 4, 3, 2, 0, 6, 4, 3, 4] 0
1974 [7, 6, 5, 4, 3, 2, 0, 6, 4, 3] 0
1975 [7, 6, 5, 4, 3, 2, 0, 6, 4] 0
1976 [7, 6, 5, 4, 3, 2, 0, 6, 3] 0
1977 [7, 6, 5, 4, 3, 2, 0, 6] 0
1978 [7, 6, 5, 4, 3, 2, 0, 5, 4, 3, 5, 4, 5] 0
1979 [7, 6, 5, 4, 3, 2, 0, 5, 4, 3, 5, 4] 0
1980 [7, 6, 5, 4, 3, 2, 0, 5, 4, 3, 5] 0
1981 [7, 6, 5, 4, 3, 2, 0, 5, 4, 3, 4] 0
1982 [7, 6, 5, 4, 3, 2, 0, 5, 4, 3] 0
1983 [7, 6, 5, 4, 3, 2, 0, 5, 4, 5] 0
1984 [7, 6, 5, 4, 3, 2, 0, 5, 4] 0
1985 [7, 6, 5, 4, 3, 2, 0, 5, 3] 0
1986 [7, 6, 5, 4, 3, 2, 0, 5] 0
1987 [7, 6, 5, 4, 3, 2, 0, 4, 3, 4] 0
1988 [7, 6, 5, 4, 3, 2, 0, 4, 3] 0
1989 [7, 6, 5, 4, 3, 2, 0, 4] 0
1990 [7, 6, 5, 4, 3, 2, 0, 3] 0
1991 [7, 6, 5, 4, 3, 2, 0] 0
1992 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7, 6, 7] 0
1993 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7, 6] 0
1994 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7] 0
1995 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 6] 0
1996 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5] 0
1997 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 7] 0
1998 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6] 0
1999 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 5] 0
2000 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 7] 0
2001 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6, 5, 6] 0
2002 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6, 5] 0
2003 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 6] 0
2004 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4, 5] 0
2005 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 4] 0
2006 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 7, 6, 7] 0
2007 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 7, 6] 0
2008 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 7] 0
2009 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5, 6] 0
2010 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 5] 0
2011 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 4, 7] 0
2012 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 4] 0
2013 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6, 7] 0
2014 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 6] 0
2015 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 5, 4, 5] 0
2016 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 5, 4] 0
2017 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 5] 0
2018 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7, 4] 0
2019 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 7] 0
2020 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
2021 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
2022 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 4, 6] 0
2023 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 4, 5] 0
2024 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 4] 0
2025 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5, 6] 0
2026 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 5] 0
2027 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6, 4] 0
2028 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 6] 0
2029 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 5, 4, 5] 0
2030 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 5, 4] 0
2031 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 5] 0
2032 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 4] 0
2033 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3] 0
2034 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 5, 7, 6, 7] 0
2035 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 5, 7, 6] 0
2036 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 5, 7] 0
2037 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 5, 6] 0
2038 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 5] 0
2039 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6, 7] 0
2040 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 6] 0
2041 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7, 5] 0
2042 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 7] 0
2043 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 6, 5, 6] 0
2044 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 6, 5] 0
2045 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 6] 0
2046 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 5] 0
2047 [7, 6, 5, 4, 3, 2, 7, 6, 5, 4] 0
2048 [7, 6, 5, 4, 3, 2, 7, 6, 5, 3, 7, 6, 7] 0
2049 [7, 6, 5, 4, 3, 2, 7, 6, 5, 3, 7, 6] 0
2050 [7, 6, 5, 4, 3, 2, 7, 6, 5, 3, 7] 0
2051 [7, 6, 5, 4, 3, 2, 7, 6, 5, 3, 6] 0
2052 [7, 6, 5, 4, 3, 2, 7, 6, 5, 3] 0
2053 [7, 6, 5, 4, 3, 2, 7, 6, 5, 7, 6, 7] 0
2054 [7, 6, 5, 4, 3, 2, 7, 6, 5, 7, 6] 0
2055 [7, 6, 5, 4, 3, 2, 7, 6, 5, 7] 0
2056 [7, 6, 5, 4, 3, 2, 7, 6, 5, 6] 0
2057 [7, 6, 5, 4, 3, 2, 7, 6, 5] 0
2058 [7, 6, 5, 4, 3, 2, 7, 6, 4, 3, 7, 4] 0
2059 [7, 6, 5, 4, 3, 2, 7, 6, 4, 3, 7] 0
2060 [7, 6, 5, 4, 3, 2, 7, 6, 4, 3, 4] 0
2061 [7, 6, 5, 4, 3, 2, 7, 6, 4, 3] 0
2062 [7, 6, 5, 4, 3, 2, 7, 6, 4, 7] 0
2063 [7, 6, 5, 4, 3, 2, 7, 6, 4] 0
2064 [7, 6, 5, 4, 3, 2, 7, 6, 3, 7] 0
2065 [7, 6, 5, 4, 3, 2, 7, 6, 3] 0
2066 [7, 6, 5, 4, 3, 2, 7, 6, 7] 0
2067 [7, 6, 5, 4, 3, 2, 7, 6] 0
2068 [7, 6, 5, 4, 3, 2, 7, 5, 4, 3, 5, 4, 5] 0
2069 [7, 6, 5, 4, 3, 2, 7, 5, 4, 3, 5, 4] 0
2070 [7, 6, 5, 4, 3, 2, 7, 5, 4, 3, 5] 0
2071 [7, 6, 5, 4, 3, 2, 7, 5, 4, 3, 4] 0
2072 [7, 6, 5, 4, 3, 2, 7, 5, 4, 3] 0
2073 [7, 6, 5, 4, 3, 2, 7, 5, 4, 5] 0
2074 [7, 6, 5, 4, 3, 2, 7, 5, 4] 0
2075 [7, 6, 5, 4, 3, 2, 7, 5, 3] 0
2076 [7, 6, 5, 4, 3, 2, 7, 5] 0
2077 [7, 6, 5, 4, 3, 2, 7, 4, 3, 4] 0
2078 [7, 6, 5, 4, 3, 2, 7, 4, 3] 0
2079 [7, 6, 5, 4, 3, 2, 7, 4] 0
2080 [7, 6, 5, 4, 3, 2, 7, 3] 0
2081 [7, 6, 5, 4, 3, 2, 7] 0
2082 [7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
2083 [7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
2084 [7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6] 0
2085 [7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 5] 0
2086 [7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4] 0
2087 [7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 6] 0
2088 [7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5] 0
2089 [7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 4] 0
2090 [7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6] 0
2091 [7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4, 5] 0
2092 [7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4] 0
2093 [7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5] 0
2094 [7, 6, 5, 4, 3, 2, 6, 5, 4, 3, 4] 0
2095 [7, 6, 5, 4, 3, 2, 6, 5, 4, 3] 0
2096 [7, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5, 6] 0
2097 [7, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5] 0
2098 [7, 6, 5, 4, 3, 2, 6, 5, 4, 6] 0
2099 [7, 6, 5, 4, 3, 2, 6, 5, 4, 5] 0
2100 [7, 6, 5, 4, 3, 2, 6, 5, 4] 0
2101 [7, 6, 5, 4, 3, 2, 6, 5, 3, 6] 0
2102 [7, 6, 5, 4, 3, 2, 6, 5, 3] 0
2103 [7, 6, 5, 4, 3, 2, 6, 5, 6] 0
2104 [7, 6, 5, 4, 3, 2, 6, 5] 0
2105 [7, 6, 5, 4, 3, 2, 6, 4, 3, 4] 0
2106 [7, 6, 5, 4, 3, 2, 6, 4, 3] 0
2107 [7, 6, 5, 4, 3, 2, 6, 4] 0
2108 [7, 6, 5, 4, 3, 2, 6, 3] 0
2109 [7, 6, 5, 4, 3, 2, 6] 0
2110 [7, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
2111 [7, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
2112 [7, 6, 5, 4, 3, 2, 5, 4, 3, 5] 0
2113 [7, 6, 5, 4, 3, 2, 5, 4, 3, 4] 0
2114 [7, 6, 5, 4, 3, 2, 5, 4, 3] 0
2115 [7, 6, 5, 4, 3, 2, 5, 4, 5] 0
2116 [7, 6, 5, 4, 3, 2, 5, 4] 0
2117 [7, 6, 5, 4, 3, 2, 5, 3] 0
2118 [7, 6, 5, 4, 3, 2, 5] 0
2119 [7, 6, 5, 4, 3, 2, 4, 3, 4] 0
2120 [7, 6, 5, 4, 3, 2, 4, 3] 0
2121 [7, 6, 5, 4, 3, 2, 4] 0
2122 [7, 6, 5, 4, 3, 2, 3] 0
2123 [7, 6, 5, 4, 3, 2] 0
2124 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 1, 7, 6, 5, 7, 6, 7] 0
2125 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 1, 7, 6, 5, 7, 6] 0
2126 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 1, 7, 6, 5, 7] 0
2127 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 1, 7, 6, 5, 6] 0
2128 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 1, 7, 6, 5] 0
2129 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 1, 7, 6, 7] 0
2130 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 1, 7, 6] 0
2131 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 1, 7, 5] 0
2132 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 1, 7] 0
2133 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 1, 6, 5, 6] 0
2134 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 1, 6, 5] 0
2135 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 1, 6] 0
2136 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 1, 5] 0
2137 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 1] 0
2138 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 7, 6, 5, 7, 6, 7] 0
2139 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 7, 6, 5, 7, 6] 0
2140 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 7, 6, 5, 7] 0
2141 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 7, 6, 5, 6] 0
2142 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 7, 6, 5] 0
2143 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 7, 6, 7] 0
2144 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 7, 6] 0
2145 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 7, 5] 0
2146 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 7] 0
2147 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 6, 5, 6] 0
2148 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 6, 5] 0
2149 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 6] 0
2150 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4, 5] 0
2151 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 4] 0
2152 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 1, 7, 6, 7] 0
2153 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 1, 7, 6] 0
2154 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 1, 7] 0
2155 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 1, 6] 0
2156 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 1] 0
2157 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 7, 6, 7] 0
2158 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 7, 6] 0
2159 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 7] 0
2160 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5, 6] 0
2161 [7, 6, 5, 4, 3, 1, 0, 7, 6, 5] 0
2162 [7, 6, 5, 4, 3, 1, 0, 7, 6, 4, 1, 7] 0
2163 [7, 6, 5, 4, 3, 1, 0, 7, 6, 4, 1] 0
2164 [7, 6, 5, 4, 3, 1, 0, 7, 6, 4, 7] 0
2165 [7, 6, 5, 4, 3, 1, 0, 7, 6, 4] 0
2166 [7, 6, 5, 4, 3, 1, 0, 7, 6, 1, 7] 0
2167 [7, 6, 5, 4, 3, 1, 0, 7, 6, 1] 0
2168 [7, 6, 5, 4, 3, 1, 0, 7, 6, 7] 0
2169 [7, 6, 5, 4, 3, 1, 0, 7, 6] 0
2170 [7, 6, 5, 4, 3, 1, 0, 7, 5, 4, 1, 5] 0
2171 [7, 6, 5, 4, 3, 1, 0, 7, 5, 4, 1] 0
2172 [7, 6, 5, 4, 3, 1, 0, 7, 5, 4, 5] 0
2173 [7, 6, 5, 4, 3, 1, 0, 7, 5, 4] 0
2174 [7, 6, 5, 4, 3, 1, 0, 7, 5, 1] 0
2175 [7, 6, 5, 4, 3, 1, 0, 7, 5] 0
2176 [7, 6, 5, 4, 3, 1, 0, 7, 4, 1] 0
2177 [7, 6, 5, 4, 3, 1, 0, 7, 4] 0
2178 [7, 6, 5, 4, 3, 1, 0, 7, 1] 0
2179 [7, 6, 5, 4, 3, 1, 0, 7] 0
2180 [7, 6, 5, 4, 3, 1, 0, 6, 5, 4, 1, 6, 5, 6] 0
2181 [7, 6, 5, 4, 3, 1, 0, 6, 5, 4, 1, 6, 5] 0
2182 [7, 6, 5, 4, 3, 1, 0, 6, 5, 4, 1, 6] 0
2183 [7, 6, 5, 4, 3, 1, 0, 6, 5, 4, 1, 5] 0
2184 [7, 6, 5, 4, 3, 1, 0, 6, 5, 4, 1] 0
2185 [7, 6, 5, 4, 3, 1, 0, 6, 5, 4, 6, 5, 6] 0
2186 [7, 6, 5, 4, 3, 1, 0, 6, 5, 4, 6, 5] 0
2187 [7, 6, 5, 4, 3, 1, 0, 6, 5, 4, 6] 0
2188 [7, 6, 5, 4, 3, 1, 0, 6, 5, 4, 5] 0
2189 [7, 6, 5, 4, 3, 1, 0, 6, 5, 4] 0
2190 [7, 6, 5, 4, 3, 1, 0, 6, 5, 1, 6] 0
2191 [7, 6, 5, 4, 3, 1, 0, 6, 5, 1] 0
2192 [7, 6, 5, 4, 3, 1, 0, 6, 5, 6] 0
2193 [7, 6, 5, 4, 3, 1, 0, 6, 5] 0
2194 [7, 6, 5, 4, 3, 1, 0, 6, 4, 1] 0
2195 [7, 6, 5, 4, 3, 1, 0, 6, 4] 0
2196 [7, 6, 5, 4, 3, 1, 0, 6, 1] 0
2197 [7, 6, 5, 4, 3, 1, 0, 6] 0
2198 [7, 6, 5, 4, 3, 1, 0, 5, 4, 1, 5] 0
2199 [7, 6, 5, 4, 3, 1, 0, 5, 4, 1] 0
2200 [7, 6, 5, 4, 3, 1, 0, 5, 4, 5] 0
2201 [7, 6, 5, 4, 3, 1, 0, 5, 4] 0
2202 [7, 6, 5, 4, 3, 1, 0, 5, 1] 0
2203 [7, 6, 5, 4, 3, 1, 0, 5] 0
2204 [7, 6, 5, 4, 3, 1, 0, 4, 1] 0
2205 [7, 6, 5, 4, 3, 1, 0, 4] 0
2206 [7, 6, 5, 4, 3, 1, 0, 1] 0
2207 [7, 6, 5, 4, 3, 1, 0] 0
2208 [7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 7, 6, 5, 7, 6, 7] 0
2209 [7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 7, 6, 5, 7, 6] 0
2210 [7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 7, 6, 5, 7] 0
2211 [7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 7, 6, 5, 6] 0
2212 [7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 7, 6, 5] 0
2213 [7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 7, 6, 7] 0
2214 [7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 7, 6] 0
2215 [7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 7, 5] 0
2216 [7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 7] 0
2217 [7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 6, 5, 6] 0
2218 [7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 6, 5] 0
2219 [7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 6] 0
2220 [7, 6, 5, 4, 3, 1, 7, 6, 5, 4, 5] 0
2221 [7, 6, 5, 4, 3, 1, 7, 6, 5, 4] 0
2222 [7, 6, 5, 4, 3, 1, 7, 6, 5, 7, 6, 7] 0
2223 [7, 6, 5, 4, 3, 1, 7, 6, 5, 7, 6] 0
2224 [7, 6, 5, 4, 3, 1, 7, 6, 5, 7] 0
2225 [7, 6, 5, 4, 3, 1, 7, 6, 5, 6] 0
2226 [7, 6, 5, 4, 3, 1, 7, 6, 5] 0
2227 [7, 6, 5, 4, 3, 1, 7, 6, 4, 7] 0
2228 [7, 6, 5, 4, 3, 1, 7, 6, 4] 0
2229 [7, 6, 5, 4, 3, 1, 7, 6, 7] 0
2230 [7, 6, 5, 4, 3, 1, 7, 6] 0
2231 [7, 6, 5, 4, 3, 1, 7, 5, 4, 5] 0
2232 [7, 6, 5, 4, 3, 1, 7, 5, 4] 0
2233 [7, 6, 5, 4, 3, 1, 7, 5] 0
2234 [7, 6, 5, 4, 3, 1, 7, 4] 0
2235 [7, 6, 5, 4, 3, 1, 7] 0
2236 [7, 6, 5, 4, 3, 1, 6, 5, 4, 6, 5, 6] 0
2237 [7, 6, 5, 4, 3, 1, 6, 5, 4, 6, 5] 0
2238 [7, 6, 5, 4, 3, 1, 6, 5, 4, 6] 0
2239 [7, 6, 5, 4, 3, 1, 6, 5, 4, 5] 0
2240 [7, 6, 5, 4, 3, 1, 6, 5, 4] 0
2241 [7, 6, 5, 4, 3, 1, 6, 5, 6] 0
2242 [7, 6, 5, 4, 3, 1, 6, 5] 0
2243 [7, 6, 5, 4, 3, 1, 6, 4] 0
2244 [7, 6, 5, 4, 3, 1, 6] 0
2245 [7, 6, 5, 4, 3, 1, 5, 4, 5] 0
2246 [7, 6, 5, 4, 3, 1, 5, 4] 0
2247 [7, 6, 5, 4, 3, 1, 5] 0
2248 [7, 6, 5, 4, 3, 1, 4] 0
2249 [7, 6, 5, 4, 3, 1] 0
2250 [7, 6, 5, 4, 3, 0, 7, 6, 5, 4, 7, 6, 5, 7, 6, 7] 0
2251 [7, 6, 5, 4, 3, 0, 7, 6, 5, 4, 7, 6, 5, 7, 6] 0
2252 [7, 6, 5, 4, 3, 0, 7, 6, 5, 4, 7, 6, 5, 7] 0
2253 [7, 6, 5, 4, 3, 0, 7, 6, 5, 4, 7, 6, 5, 6] 0
2254 [7, 6, 5, 4, 3, 0, 7, 6, 5, 4, 7, 6, 5] 0
2255 [7, 6, 5, 4, 3, 0, 7, 6, 5, 4, 7, 6, 7] 0
2256 [7, 6, 5, 4, 3, 0, 7, 6, 5, 4, 7, 6] 0
2257 [7, 6, 5, 4, 3, 0, 7, 6, 5, 4, 7, 5] 0
2258 [7, 6, 5, 4, 3, 0, 7, 6, 5, 4, 7] 0
2259 [7, 6, 5, 4, 3, 0, 7, 6, 5, 4, 6, 5, 6] 0
2260 [7, 6, 5, 4, 3, 0, 7, 6, 5, 4, 6, 5] 0
2261 [7, 6, 5, 4, 3, 0, 7, 6, 5, 4, 6] 0
2262 [7, 6, 5, 4, 3, 0, 7, 6, 5, 4, 5] 0
2263 [7, 6, 5, 4, 3, 0, 7, 6, 5, 4] 0
2264 [7, 6, 5, 4, 3, 0, 7, 6, 5, 7, 6, 7] 0
2265 [7, 6, 5, 4, 3, 0, 7, 6, 5, 7, 6] 0
2266 [7, 6, 5, 4, 3, 0, 7, 6, 5, 7] 0
2267 [7, 6, 5, 4, 3, 0, 7, 6, 5, 6] 0
2268 [7, 6, 5, 4, 3, 0, 7, 6, 5] 0
2269 [7, 6, 5, 4, 3, 0, 7, 6, 4, 7] 0
2270 [7, 6, 5, 4, 3, 0, 7, 6, 4] 0
2271 [7, 6, 5, 4, 3, 0, 7, 6, 7] 0
2272 [7, 6, 5, 4, 3, 0, 7, 6] 0
2273 [7, 6, 5, 4, 3, 0, 7, 5, 4, 5] 0
2274 [7, 6, 5, 4, 3, 0, 7, 5, 4] 0
2275 [7, 6, 5, 4, 3, 0, 7, 5] 0
2276 [7, 6, 5, 4, 3, 0, 7, 4] 0
2277 [7, 6, 5, 4, 3, 0, 7] 0
2278 [7, 6, 5, 4, 3, 0, 6, 5, 4, 6, 5, 6] 0
2279 [7, 6, 5, 4, 3, 0, 6, 5, 4, 6, 5] 0
2280 [7, 6, 5, 4, 3, 0, 6, 5, 4, 6] 0
2281 [7, 6, 5, 4, 3, 0, 6, 5, 4, 5] 0
2282 [7, 6, 5, 4, 3, 0, 6, 5, 4] 0
2283 [7, 6, 5, 4, 3, 0, 6, 5, 6] 0
2284 [7, 6, 5, 4, 3, 0, 6, 5] 0
2285 [7, 6, 5, 4, 3, 0, 6, 4] 0
2286 [7, 6, 5, 4, 3, 0, 6] 0
2287 [7, 6, 5, 4, 3, 0, 5, 4, 5] 0
2288 [7, 6, 5, 4, 3, 0, 5, 4] 0
2289 [7, 6, 5, 4, 3, 0, 5] 0
2290 [7, 6, 5, 4, 3, 0, 4] 0
2291 [7, 6, 5, 4, 3, 0] 0
2292 [7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7, 6, 7] 0
2293 [7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7, 6] 0
2294 [7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 7] 0
2295 [7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5, 6] 0
2296 [7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 5] 0
2297 [7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6, 7] 0
2298 [7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 6] 0
2299 [7, 6, 5, 4, 3, 7, 6, 5, 4, 7, 5] 0
2300 [7, 6, 5, 4, 3, 7, 6, 5, 4, 7] 0
2301 [7, 6, 5, 4, 3, 7, 6, 5, 4, 6, 5, 6] 0
2302 [7, 6, 5, 4, 3, 7, 6, 5, 4, 6, 5] 0
2303 [7, 6, 5, 4, 3, 7, 6, 5, 4, 6] 0
2304 [7, 6, 5, 4, 3, 7, 6, 5, 4, 5] 0
2305 [7, 6, 5, 4, 3, 7, 6, 5, 4] 0
2306 [7, 6, 5, 4, 3, 7, 6, 5, 7, 6, 7] 0
2307 [7, 6, 5, 4, 3, 7, 6, 5, 7, 6] 0
2308 [7, 6, 5, 4, 3, 7, 6, 5, 7] 0
2309 [7, 6, 5, 4, 3, 7, 6, 5, 6] 0
2310 [7, 6, 5, 4, 3, 7, 6, 5] 0
2311 [7, 6, 5, 4, 3, 7, 6, 4, 7] 0
2312 [7, 6, 5, 4, 3, 7, 6, 4] 0
2313 [7, 6, 5, 4, 3, 7, 6, 7] 0
2314 [7, 6, 5, 4, 3, 7, 6] 0
2315 [7, 6, 5, 4, 3, 7, 5, 4, 5] 0
2316 [7, 6, 5, 4, 3, 7, 5, 4] 0
2317 [7, 6, 5, 4, 3, 7, 5] 0
2318 [7, 6, 5, 4, 3, 7, 4] 0
2319 [7, 6, 5, 4, 3, 7] 0
2320 [7, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
2321 [7, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
2322 [7, 6, 5, 4, 3, 6, 5, 4, 6] 0
2323 [7, 6, 5, 4, 3, 6, 5, 4, 5] 0
2324 [7, 6, 5, 4, 3, 6, 5, 4] 0
2325 [7, 6, 5, 4, 3, 6, 5, 6] 0
2326 [7, 6, 5, 4, 3, 6, 5] 0
2327 [7, 6, 5, 4, 3, 6, 4] 0
2328 [7, 6, 5, 4, 3, 6] 0
2329 [7, 6, 5, 4, 3, 5, 4, 5] 0
2330 [7, 6, 5, 4, 3, 5, 4] 0
2331 [7, 6, 5, 4, 3, 5] 0
2332 [7, 6, 5, 4, 3, 4] 0
2333 [7, 6, 5, 4, 3] 0
2334 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 2, 1, 7, 6, 2, 7] 0
2335 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 2, 1, 7, 6, 2] 0
2336 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 2, 1, 7, 6, 7] 0
2337 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 2, 1, 7, 6] 0
2338 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 2, 1, 7, 2] 0
2339 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 2, 1, 7] 0
2340 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 2, 1, 6, 2] 0
2341 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 2, 1, 6] 0
2342 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 2, 1, 2] 0
2343 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 2, 1] 0
2344 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 2, 7, 6, 7] 0
2345 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 2, 7, 6] 0
2346 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 2, 7] 0
2347 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 2, 6] 0
2348 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 2] 0
2349 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 1, 7, 6, 7] 0
2350 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 1, 7, 6] 0
2351 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 1, 7] 0
2352 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 1, 6] 0
2353 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 1] 0
2354 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 7, 6, 7] 0
2355 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 7, 6] 0
2356 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 7] 0
2357 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5, 6] 0
2358 [7, 6, 5, 4, 2, 1, 0, 7, 6, 5] 0
2359 [7, 6, 5, 4, 2, 1, 0, 7, 6, 2, 1, 7, 2] 0
2360 [7, 6, 5, 4, 2, 1, 0, 7, 6, 2, 1, 7] 0
2361 [7, 6, 5, 4, 2, 1, 0, 7, 6, 2, 1, 2] 0
2362 [7, 6, 5, 4, 2, 1, 0, 7, 6, 2, 1] 0
2363 [7, 6, 5, 4, 2, 1, 0, 7, 6, 2, 7] 0
2364 [7, 6, 5, 4, 2, 1, 0, 7, 6, 2] 0
2365 [7, 6, 5, 4, 2, 1, 0, 7, 6, 1, 7] 0
2366 [7, 6, 5, 4, 2, 1, 0, 7, 6, 1] 0
2367 [7, 6, 5, 4, 2, 1, 0, 7, 6, 7] 0
2368 [7, 6, 5, 4, 2, 1, 0, 7, 6] 0
2369 [7, 6, 5, 4, 2, 1, 0, 7, 5, 2, 1, 2] 0
2370 [7, 6, 5, 4, 2, 1, 0, 7, 5, 2, 1] 0
2371 [7, 6, 5, 4, 2, 1, 0, 7, 5, 2] 0
2372 [7, 6, 5, 4, 2, 1, 0, 7, 5, 1] 0
2373 [7, 6, 5, 4, 2, 1, 0, 7, 5] 0
2374 [7, 6, 5, 4, 2, 1, 0, 7, 2, 1, 2] 0
2375 [7, 6, 5, 4, 2, 1, 0, 7, 2, 1] 0
2376 [7, 6, 5, 4, 2, 1, 0, 7, 2] 0
2377 [7, 6, 5, 4, 2, 1, 0, 7, 1] 0
2378 [7, 6, 5, 4, 2, 1, 0, 7] 0
2379 [7, 6, 5, 4, 2, 1, 0, 6, 5, 2, 1, 6, 2] 0
2380 [7, 6, 5, 4, 2, 1, 0, 6, 5, 2, 1, 6] 0
2381 [7, 6, 5, 4, 2, 1, 0, 6, 5, 2, 1, 2] 0
2382 [7, 6, 5, 4, 2, 1, 0, 6, 5, 2, 1] 0
2383 [7, 6, 5, 4, 2, 1, 0, 6, 5, 2, 6] 0
2384 [7, 6, 5, 4, 2, 1, 0, 6, 5, 2] 0
2385 [7, 6, 5, 4, 2, 1, 0, 6, 5, 1, 6] 0
2386 [7, 6, 5, 4, 2, 1, 0, 6, 5, 1] 0
2387 [7, 6, 5, 4, 2, 1, 0, 6, 5, 6] 0
2388 [7, 6, 5, 4, 2, 1, 0, 6, 5] 0
2389 [7, 6, 5, 4, 2, 1, 0, 6, 2, 1, 2] 0
2390 [7, 6, 5, 4, 2, 1, 0, 6, 2, 1] 0
2391 [7, 6, 5, 4, 2, 1, 0, 6, 2] 0
2392 [7, 6, 5, 4, 2, 1, 0, 6, 1] 0
2393 [7, 6, 5, 4, 2, 1, 0, 6] 0
2394 [7, 6, 5, 4, 2, 1, 0, 5, 2, 1, 2] 0
2395 [7, 6, 5, 4, 2, 1, 0, 5, 2, 1] 0
2396 [7, 6, 5, 4, 2, 1, 0, 5, 2] 0
2397 [7, 6, 5, 4, 2, 1, 0, 5, 1] 0
2398 [7, 6, 5, 4, 2, 1, 0, 5] 0
2399 [7, 6, 5, 4, 2, 1, 0, 2, 1, 2] 0
2400 [7, 6, 5, 4, 2, 1, 0, 2, 1] 0
2401 [7, 6, 5, 4, 2, 1, 0, 2] 0
2402 [7, 6, 5, 4, 2, 1, 0, 1] 0
2403 [7, 6, 5, 4, 2, 1, 0] 0
2404 [7, 6, 5, 4, 2, 1, 7, 6, 5, 2, 7, 6, 7] 0
2405 [7, 6, 5, 4, 2, 1, 7, 6, 5, 2, 7, 6] 0
2406 [7, 6, 5, 4, 2, 1, 7, 6, 5, 2, 7] 0
2407 [7, 6, 5, 4, 2, 1, 7, 6, 5, 2, 6] 0
2408 [7, 6, 5, 4, 2, 1, 7, 6, 5, 2] 0
2409 [7, 6, 5, 4, 2, 1, 7, 6, 5, 7, 6, 7] 0
2410 [7, 6, 5, 4, 2, 1, 7, 6, 5, 7, 6] 0
2411 [7, 6, 5, 4, 2, 1, 7, 6, 5, 7] 0
2412 [7, 6, 5, 4, 2, 1, 7, 6, 5, 6] 0
2413 [7, 6, 5, 4, 2, 1, 7, 6, 5] 0
2414 [7, 6, 5, 4, 2, 1, 7, 6, 2, 7] 0
2415 [7, 6, 5, 4, 2, 1, 7, 6, 2] 0
2416 [7, 6, 5, 4, 2, 1, 7, 6, 7] 0
2417 [7, 6, 5, 4, 2, 1, 7, 6] 0
2418 [7, 6, 5, 4, 2, 1, 7, 5, 2] 0
2419 [7, 6, 5, 4, 2, 1, 7, 5] 0
2420 [7, 6, 5, 4, 2, 1, 7, 2] 0
2421 [7, 6, 5, 4, 2, 1, 7] 0
2422 [7, 6, 5, 4, 2, 1, 6, 5, 2, 6] 0
2423 [7, 6, 5, 4, 2, 1, 6, 5, 2] 0
2424 [7, 6, 5, 4, 2, 1, 6, 5, 6] 0
2425 [7, 6, 5, 4, 2, 1, 6, 5] 0
2426 [7, 6, 5, 4, 2, 1, 6, 2] 0
2427 [7, 6, 5, 4, 2, 1, 6] 0
2428 [7, 6, 5, 4, 2, 1, 5, 2] 0
2429 [7, 6, 5, 4, 2, 1, 5] 0
2430 [7, 6, 5, 4, 2, 1, 2] 0
2431 [7, 6, 5, 4, 2, 1] 0
2432 [7, 6, 5, 4, 2, 0, 7, 6, 5, 7, 6, 7] 0
2433 [7, 6, 5, 4, 2, 0, 7, 6, 5, 7, 6] 0
2434 [7, 6, 5, 4, 2, 0, 7, 6, 5, 7] 0
2435 [7, 6, 5, 4, 2, 0, 7, 6, 5, 6] 0
2436 [7, 6, 5, 4, 2, 0, 7, 6, 5] 0
2437 [7, 6, 5, 4, 2, 0, 7, 6, 7] 0
2438 [7, 6, 5, 4, 2, 0, 7, 6] 0
2439 [7, 6, 5, 4, 2, 0, 7, 5] 0
2440 [7, 6, 5, 4, 2, 0, 7] 0
2441 [7, 6, 5, 4, 2, 0, 6, 5, 6] 0
2442 [7, 6, 5, 4, 2, 0, 6, 5] 0
2443 [7, 6, 5, 4, 2, 0, 6] 0
2444 [7, 6, 5, 4, 2, 0, 5] 0
2445 [7, 6, 5, 4, 2, 0] 0
2446 [7, 6, 5, 4, 2, 7, 6, 5, 7, 6, 7] 0
2447 [7, 6, 5, 4, 2, 7, 6, 5, 7, 6] 0
2448 [7, 6, 5, 4, 2, 7, 6, 5, 7] 0
2449 [7, 6, 5, 4, 2, 7, 6, 5, 6] 0
2450 [7, 6, 5, 4, 2, 7, 6, 5] 0
2451 [7, 6, 5, 4, 2, 7, 6, 7] 0
2452 [7, 6, 5, 4, 2, 7, 6] 0
2453 [7, 6, 5, 4, 2, 7, 5] 0
2454 [7, 6, 5, 4, 2, 7] 0
2455 [7, 6, 5, 4, 2, 6, 5, 6] 0
2456 [7, 6, 5, 4, 2, 6, 5] 0
2457 [7, 6, 5, 4, 2, 6] 0
2458 [7, 6, 5, 4, 2, 5] 0
2459 [7, 6, 5, 4, 2] 0
2460 [7, 6, 5, 4, 1, 0, 7, 6, 5, 1, 7, 6, 7] 0
2461 [7, 6, 5, 4, 1, 0, 7, 6, 5, 1, 7, 6] 0
2462 [7, 6, 5, 4, 1, 0, 7, 6, 5, 1, 7] 0
2463 [7, 6, 5, 4, 1, 0, 7, 6, 5, 1, 6] 0
2464 [7, 6, 5, 4, 1, 0, 7, 6, 5, 1] 0
2465 [7, 6, 5, 4, 1, 0, 7, 6, 5, 7, 6, 7] 0
2466 [7, 6, 5, 4, 1, 0, 7, 6, 5, 7, 6] 0
2467 [7, 6, 5, 4, 1, 0, 7, 6, 5, 7] 0
2468 [7, 6, 5, 4, 1, 0, 7, 6, 5, 6] 0
2469 [7, 6, 5, 4, 1, 0, 7, 6, 5] 0
2470 [7, 6, 5, 4, 1, 0, 7, 6, 1, 7] 0
2471 [7, 6, 5, 4, 1, 0, 7, 6, 1] 0
2472 [7, 6, 5, 4, 1, 0, 7, 6, 7] 0
2473 [7, 6, 5, 4, 1, 0, 7, 6] 0
2474 [7, 6, 5, 4, 1, 0, 7, 5, 1] 0
2475 [7, 6, 5, 4, 1, 0, 7, 5] 0
2476 [7, 6, 5, 4, 1, 0, 7, 1] 0
2477 [7, 6, 5, 4, 1, 0, 7] 0
2478 [7, 6, 5, 4, 1, 0, 6, 5, 1, 6] 0
2479 [7, 6, 5, 4, 1, 0, 6, 5, 1] 0
2480 [7, 6, 5, 4, 1, 0, 6, 5, 6] 0
2481 [7, 6, 5, 4, 1, 0, 6, 5] 0
2482 [7, 6, 5, 4, 1, 0, 6, 1] 0
2483 [7, 6, 5, 4, 1, 0, 6] 0
2484 [7, 6, 5, 4, 1, 0, 5, 1] 0
2485 [7, 6, 5, 4, 1, 0, 5] 0
2486 [7, 6, 5, 4, 1, 0, 1] 0
2487 [7, 6, 5, 4, 1, 0] 0
2488 [7, 6, 5, 4, 1, 7, 6, 5, 7, 6, 7] 0
2489 [7, 6, 5, 4, 1, 7, 6, 5, 7, 6] 0
2490 [7, 6, 5, 4, 1, 7, 6, 5, 7] 0
2491 [7, 6, 5, 4, 1, 7, 6, 5, 6] 0
2492 [7, 6, 5, 4, 1, 7, 6, 5] 0
2493 [7, 6, 5, 4, 1, 7, 6, 7] 0
2494 [7, 6, 5, 4, 1, 7, 6] 0
2495 [7, 6, 5, 4, 1, 7, 5] 0
2496 [7, 6, 5, 4, 1, 7] 0
2497 [7, 6, 5, 4, 1, 6, 5, 6] 0
2498 [7, 6, 5, 4, 1, 6, 5] 0
2499 [7, 6, 5, 4, 1, 6] 0
2500 [7, 6, 5, 4, 1, 5] 0
2501 [7, 6, 5, 4, 1] 0
2502 [7, 6, 5, 4, 0, 7, 6, 5, 7, 6, 7] 0
2503 [7, 6, 5, 4, 0, 7, 6, 5, 7, 6] 0
2504 [7, 6, 5, 4, 0, 7, 6, 5, 7] 0
2505 [7, 6, 5, 4, 0, 7, 6, 5, 6] 0
2506 [7, 6, 5, 4, 0, 7, 6, 5] 0
2507 [7, 6, 5, 4, 0, 7, 6, 7] 0
2508 [7, 6, 5, 4, 0, 7, 6] 0
2509 [7, 6, 5, 4, 0, 7, 5] 0
2510 [7, 6, 5, 4, 0, 7] 0
2511 [7, 6, 5, 4, 0, 6, 5, 6] 0
2512 [7, 6, 5, 4, 0, 6, 5] 0
2513 [7, 6, 5, 4, 0, 6] 0
2514 [7, 6, 5, 4, 0, 5] 0
2515 [7, 6, 5, 4, 0] 0
2516 [7, 6, 5, 4, 7, 6, 5, 7, 6, 7] 0
2517 [7, 6, 5, 4, 7, 6, 5, 7, 6] 0
2518 [7, 6, 5, 4, 7, 6, 5, 7] 0
2519 [7, 6, 5, 4, 7, 6, 5, 6] 0
2520 [7, 6, 5, 4, 7, 6, 5] 0
2521 [7, 6, 5, 4, 7, 6, 7] 0
2522 [7, 6, 5, 4, 7, 6] 0
2523 [7, 6, 5, 4, 7, 5] 0
2524 [7, 6, 5, 4, 7] 0
2525 [7, 6, 5, 4, 6, 5, 6] 0
2526 [7, 6, 5, 4, 6, 5] 0
2527 [7, 6, 5, 4, 6] 0
2528 [7, 6, 5, 4, 5] 0
2529 [7, 6, 5, 4] 0
2530 [7, 6, 5, 3, 2, 1, 0, 7, 6, 3, 2, 1, 7, 3, 2, 3] 0
2531 [7, 6, 5, 3, 2, 1, 0, 7, 6, 3, 2, 1, 7, 3, 2] 0
2532 [7, 6, 5, 3, 2, 1, 0, 7, 6, 3, 2, 1, 7, 3] 0
2533 [7, 6, 5, 3, 2, 1, 0, 7, 6, 3, 2, 1, 7, 2] 0
2534 [7, 6, 5, 3, 2, 1, 0, 7, 6, 3, 2, 1, 7] 0
2535 [7, 6, 5, 3, 2, 1, 0, 7, 6, 3, 2, 1, 3, 2, 3] 0
2536 [7, 6, 5, 3, 2, 1, 0, 7, 6, 3, 2, 1, 3, 2] 0
2537 [7, 6, 5, 3, 2, 1, 0, 7, 6, 3, 2, 1, 3] 0
2538 [7, 6, 5, 3, 2, 1, 0, 7, 6, 3, 2, 1, 2] 0
2539 [7, 6, 5, 3, 2, 1, 0, 7, 6, 3, 2, 1] 0
2540 [7, 6, 5, 3, 2, 1, 0, 7, 6, 3, 2, 7, 3] 0
2541 [7, 6, 5, 3, 2, 1, 0, 7, 6, 3, 2, 7] 0
2542 [7, 6, 5, 3, 2, 1, 0, 7, 6, 3, 2, 3] 0
2543 [7, 6, 5, 3, 2, 1, 0, 7, 6, 3, 2] 0
2544 [7, 6, 5, 3, 2, 1, 0, 7, 6, 3, 1, 7] 0
2545 [7, 6, 5, 3, 2, 1, 0, 7, 6, 3, 1] 0
2546 [7, 6, 5, 3, 2, 1, 0, 7, 6, 3, 7] 0
2547 [7, 6, 5, 3, 2, 1, 0, 7, 6, 3] 0
2548 [7, 6, 5, 3, 2, 1, 0, 7, 6, 2, 1, 7, 2] 0
2549 [7, 6, 5, 3, 2, 1, 0, 7, 6, 2, 1, 7] 0
2550 [7, 6, 5, 3, 2, 1, 0, 7, 6, 2, 1, 2] 0
2551 [7, 6, 5, 3, 2, 1, 0, 7, 6, 2, 1] 0
2552 [7, 6, 5, 3, 2, 1, 0, 7, 6, 2, 7] 0
2553 [7, 6, 5, 3, 2, 1, 0, 7, 6, 2] 0
2554 [7, 6, 5, 3, 2, 1, 0, 7, 6, 1, 7] 0
2555 [7, 6, 5, 3, 2, 1, 0, 7, 6, 1] 0
2556 [7, 6, 5, 3, 2, 1, 0, 7, 6, 7] 0
2557 [7, 6, 5, 3, 2, 1, 0, 7, 6] 0
2558 [7, 6, 5, 3, 2, 1, 0, 7, 3, 2, 1, 3, 2, 3] 0
2559 [7, 6, 5, 3, 2, 1, 0, 7, 3, 2, 1, 3, 2] 0
2560 [7, 6, 5, 3, 2, 1, 0, 7, 3, 2, 1, 3] 0
2561 [7, 6, 5, 3, 2, 1, 0, 7, 3, 2, 1, 2] 0
2562 [7, 6, 5, 3, 2, 1, 0, 7, 3, 2, 1] 0
2563 [7, 6, 5, 3, 2, 1, 0, 7, 3, 2, 3] 0
2564 [7, 6, 5, 3, 2, 1, 0, 7, 3, 2] 0
2565 [7, 6, 5, 3, 2, 1, 0, 7, 3, 1] 0
2566 [7, 6, 5, 3, 2, 1, 0, 7, 3] 0
2567 [7, 6, 5, 3, 2, 1, 0, 7, 2, 1, 2] 0
2568 [7, 6, 5, 3, 2, 1, 0, 7, 2, 1] 0
2569 [7, 6, 5, 3, 2, 1, 0, 7, 2] 0
2570 [7, 6, 5, 3, 2, 1, 0, 7, 1] 0
2571 [7, 6, 5, 3, 2, 1, 0, 7] 0
2572 [7, 6, 5, 3, 2, 1, 0, 6, 3, 2, 1, 3, 2, 3] 0
2573 [7, 6, 5, 3, 2, 1, 0, 6, 3, 2, 1, 3, 2] 0
2574 [7, 6, 5, 3, 2, 1, 0, 6, 3, 2, 1, 3] 0
2575 [7, 6, 5, 3, 2, 1, 0, 6, 3, 2, 1, 2] 0
2576 [7, 6, 5, 3, 2, 1, 0, 6, 3, 2, 1] 0
2577 [7, 6, 5, 3, 2, 1, 0, 6, 3, 2, 3] 0
2578 [7, 6, 5, 3, 2, 1, 0, 6, 3, 2] 0
2579 [7, 6, 5, 3, 2, 1, 0, 6, 3, 1] 0
2580 [7, 6, 5, 3, 2, 1, 0, 6, 3] 0
2581 [7, 6, 5, 3, 2, 1, 0, 6, 2, 1, 2] 0
2582 [7, 6, 5, 3, 2, 1, 0, 6, 2, 1] 0
2583 [7, 6, 5, 3, 2, 1, 0, 6, 2] 0
2584 [7, 6, 5, 3, 2, 1, 0, 6, 1] 0
2585 [7, 6, 5, 3, 2, 1, 0, 6] 0
2586 [7, 6, 5, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
2587 [7, 6, 5, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
2588 [7, 6, 5, 3, 2, 1, 0, 3, 2, 1, 3] 0
2589 [7, 6, 5, 3, 2, 1, 0, 3, 2, 1, 2] 0
2590 [7, 6, 5, 3, 2, 1, 0, 3, 2, 1] 0
2591 [7, 6, 5, 3, 2, 1, 0, 3, 2, 3] 0
2592 [7, 6, 5, 3, 2, 1, 0, 3, 2] 0
2593 [7, 6, 5, 3, 2, 1, 0, 3, 1] 0
2594 [7, 6, 5, 3, 2, 1, 0, 3] 0
2595 [7, 6, 5, 3, 2, 1, 0, 2, 1, 2] 0
2596 [7, 6, 5, 3, 2, 1, 0, 2, 1] 0
2597 [7, 6, 5, 3, 2, 1, 0, 2] 0
2598 [7, 6, 5, 3, 2, 1, 0, 1] 0
2599 [7, 6, 5, 3, 2, 1, 0] 0
2600 [7, 6, 5, 3, 2, 1, 7, 6, 3, 2, 7, 3] 0
2601 [7, 6, 5, 3, 2, 1, 7, 6, 3, 2, 7] 0
2602 [7, 6, 5, 3, 2, 1, 7, 6, 3, 2, 3] 0
2603 [7, 6, 5, 3, 2, 1, 7, 6, 3, 2] 0
2604 [7, 6, 5, 3, 2, 1, 7, 6, 3, 7] 0
2605 [7, 6, 5, 3, 2, 1, 7, 6, 3] 0
2606 [7, 6, 5, 3, 2, 1, 7, 6, 2, 7] 0
2607 [7, 6, 5, 3, 2, 1, 7, 6, 2] 0
2608 [7, 6, 5, 3, 2, 1, 7, 6, 7] 0
2609 [7, 6, 5, 3, 2, 1, 7, 6] 0
2610 [7, 6, 5, 3, 2, 1, 7, 3, 2, 3] 0
2611 [7, 6, 5, 3, 2, 1, 7, 3, 2] 0
2612 [7, 6, 5, 3, 2, 1, 7, 3] 0
2613 [7, 6, 5, 3, 2, 1, 7, 2] 0
2614 [7, 6, 5, 3, 2, 1, 7] 0
2615 [7, 6, 5, 3, 2, 1, 6, 3, 2, 3] 0
2616 [7, 6, 5, 3, 2, 1, 6, 3, 2] 0
2617 [7, 6, 5, 3, 2, 1, 6, 3] 0
2618 [7, 6, 5, 3, 2, 1, 6, 2] 0
2619 [7, 6, 5, 3, 2, 1, 6] 0
2620 [7, 6, 5, 3, 2, 1, 3, 2, 3] 0
2621 [7, 6, 5, 3, 2, 1, 3, 2] 0
2622 [7, 6, 5, 3, 2, 1, 3] 0
2623 [7, 6, 5, 3, 2, 1, 2] 0
2624 [7, 6, 5, 3, 2, 1] 0
2625 [7, 6, 5, 3, 2, 0, 7, 6, 3, 7] 0
2626 [7, 6, 5, 3, 2, 0, 7, 6, 3] 0
2627 [7, 6, 5, 3, 2, 0, 7, 6, 7] 0
2628 [7, 6, 5, 3, 2, 0, 7, 6] 0
2629 [7, 6, 5, 3, 2, 0, 7, 3] 0
2630 [7, 6, 5, 3, 2, 0, 7] 0
2631 [7, 6, 5, 3, 2, 0, 6, 3] 0
2632 [7, 6, 5, 3, 2, 0, 6] 0
2633 [7, 6, 5, 3, 2, 0, 3] 0
2634 [7, 6, 5, 3, 2, 0] 0
2635 [7, 6, 5, 3, 2, 7, 6, 3, 7] 0
2636 [7, 6, 5, 3, 2, 7, 6, 3] 0
2637 [7, 6, 5, 3, 2, 7, 6, 7] 0
2638 [7, 6, 5, 3, 2, 7, 6] 0
2639 [7, 6, 5, 3, 2, 7, 3] 0
2640 [7, 6, 5, 3, 2, 7] 0
2641 [7, 6, 5, 3, 2, 6, 3] 0
2642 [7, 6, 5, 3, 2, 6] 0
2643 [7, 6, 5, 3, 2, 3] 0
2644 [7, 6, 5, 3, 2] 0
2645 [7, 6, 5, 3, 1, 0, 7, 6, 1, 7] 0
2646 [7, 6, 5, 3, 1, 0, 7, 6, 1] 0
2647 [7, 6, 5, 3, 1, 0, 7, 6, 7] 0
2648 [7, 6, 5, 3, 1, 0, 7, 6] 0
2649 [7, 6, 5, 3, 1, 0, 7, 1] 0
2650 [7, 6, 5, 3, 1, 0, 7] 0
2651 [7, 6, 5, 3, 1, 0, 6, 1] 0
2652 [7, 6, 5, 3, 1, 0, 6] 0
2653 [7, 6, 5, 3, 1, 0, 1] 0
2654 [7, 6, 5, 3, 1, 0] 0
2655 [7, 6, 5, 3, 1, 7, 6, 7] 0
2656 [7, 6, 5, 3, 1, 7, 6] 0
2657 [7, 6, 5, 3, 1, 7] 0
2658 [7, 6, 5, 3, 1, 6] 0
2659 [7, 6, 5, 3, 1] 0
2660 [7, 6, 5, 3, 0, 7, 6, 7] 0
2661 [7, 6, 5, 3, 0, 7, 6] 0
2662 [7, 6, 5, 3, 0, 7] 0
2663 [7, 6, 5, 3, 0, 6] 0
2664 [7, 6, 5, 3, 0] 0
2665 [7, 6, 5, 3, 7, 6, 7] 0
2666 [7, 6, 5, 3, 7, 6] 0
2667 [7, 6, 5, 3, 7] 0
2668 [7, 6, 5, 3, 6] 0
2669 [7, 6, 5, 3] 0
2670 [7, 6, 5, 2, 1, 0, 7, 6, 2, 1, 7, 2] 0
2671 [7, 6, 5, 2, 1, 0, 7, 6, 2, 1, 7] 0
2672 [7, 6, 5, 2, 1, 0, 7, 6, 2, 1, 2] 0
2673 [7, 6, 5, 2, 1, 0, 7, 6, 2, 1] 0
2674 [7, 6, 5, 2, 1, 0, 7, 6, 2, 7] 0
2675 [7, 6, 5, 2, 1, 0, 7, 6, 2] 0
2676 [7, 6, 5, 2, 1, 0, 7, 6, 1, 7] 0
2677 [7, 6, 5, 2, 1, 0, 7, 6, 1] 0
2678 [7, 6, 5, 2, 1, 0, 7, 6, 7] 0
2679 [7, 6, 5, 2, 1, 0, 7, 6] 0
2680 [7, 6, 5, 2, 1, 0, 7, 2, 1, 2] 0
2681 [7, 6, 5, 2, 1, 0, 7, 2, 1] 0
2682 [7, 6, 5, 2, 1, 0, 7, 2] 0
2683 [7, 6, 5, 2, 1, 0, 7, 1] 0
2684 [7, 6, 5, 2, 1, 0, 7] 0
2685 [7, 6, 5, 2, 1, 0, 6, 2, 1, 2] 0
2686 [7, 6, 5, 2, 1, 0, 6, 2, 1] 0
2687 [7, 6, 5, 2, 1, 0, 6, 2] 0
2688 [7, 6, 5, 2, 1, 0, 6, 1] 0
2689 [7, 6, 5, 2, 1, 0, 6] 0
2690 [7, 6, 5, 2, 1, 0, 2, 1, 2] 0
2691 [7, 6, 5, 2, 1, 0, 2, 1] 0
2692 [7, 6, 5, 2, 1, 0, 2] 0
2693 [7, 6, 5, 2, 1, 0, 1] 0
2694 [7, 6, 5, 2, 1, 0] 0
2695 [7, 6, 5, 2, 1, 7, 6, 2, 7] 0
2696 [7, 6, 5, 2, 1, 7, 6, 2] 0
2697 [7, 6, 5, 2, 1, 7, 6, 7] 0
2698 [7, 6, 5, 2, 1, 7, 6] 0
2699 [7, 6, 5, 2, 1, 7, 2] 0
2700 [7, 6, 5, 2, 1, 7] 0
2701 [7, 6, 5, 2, 1, 6, 2] 0
2702 [7, 6, 5, 2, 1, 6] 0
2703 [7, 6, 5, 2, 1, 2] 0
2704 [7, 6, 5, 2, 1] 0
2705 [7, 6, 5, 2, 0, 7, 6, 7] 0
2706 [7, 6, 5, 2, 0, 7, 6] 0
2707 [7, 6, 5, 2, 0, 7] 0
2708 [7, 6, 5, 2, 0, 6] 0
2709 [7, 6, 5, 2, 0] 0
2710 [7, 6, 5, 2, 7, 6, 7] 0
2711 [7, 6, 5, 2, 7, 6] 0
2712 [7, 6, 5, 2, 7] 0
2713 [7, 6, 5, 2, 6] 0
2714 [7, 6, 5, 2] 0
2715 [7, 6, 5, 1, 0, 7, 6, 1, 7] 0
2716 [7, 6, 5, 1, 0, 7, 6, 1] 0
2717 [7, 6, 5, 1, 0, 7, 6, 7] 0
2718 [7, 6, 5, 1, 0, 7, 6] 0
2719 [7, 6, 5, 1, 0, 7, 1] 0
2720 [7, 6, 5, 1, 0, 7] 0
2721 [7, 6, 5, 1, 0, 6, 1] 0
2722 [7, 6, 5, 1, 0, 6] 0
2723 [7, 6, 5, 1, 0, 1] 0
2724 [7, 6, 5, 1, 0] 0
2725 [7, 6, 5, 1, 7, 6, 7] 0
2726 [7, 6, 5, 1, 7, 6] 0
2727 [7, 6, 5, 1, 7] 0
2728 [7, 6, 5, 1, 6] 0
2729 [7, 6, 5, 1] 0
2730 [7, 6, 5, 0, 7, 6, 7] 0
2731 [7, 6, 5, 0, 7, 6] 0
2732 [7, 6, 5, 0, 7] 0
2733 [7, 6, 5, 0, 6] 0
2734 [7, 6, 5, 0] 0
2735 [7, 6, 5, 7, 6, 7] 0
2736 [7, 6, 5, 7, 6] 0
2737 [7, 6, 5, 7] 0
2738 [7, 6, 5, 6] 0
2739 [7, 6, 5] 0
2740 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
2741 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
2742 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 4, 3, 2, 4] 0
2743 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 4, 3, 2, 3] 0
2744 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 4, 3, 2] 0
2745 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 4, 3, 4] 0
2746 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 4, 3] 0
2747 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 4, 2] 0
2748 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 4] 0
2749 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 3, 2, 3] 0
2750 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 3, 2] 0
2751 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 3] 0
2752 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1, 2] 0
2753 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3, 2, 1] 0
2754 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3, 2, 4, 3, 4] 0
2755 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3, 2, 4, 3] 0
2756 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3, 2, 4] 0
2757 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3, 2, 3] 0
2758 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3, 2] 0
2759 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3, 1, 4] 0
2760 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3, 1] 0
2761 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3, 4] 0
2762 [7, 6, 4, 3, 2, 1, 0, 7, 4, 3] 0
2763 [7, 6, 4, 3, 2, 1, 0, 7, 4, 2, 1, 2] 0
2764 [7, 6, 4, 3, 2, 1, 0, 7, 4, 2, 1] 0
2765 [7, 6, 4, 3, 2, 1, 0, 7, 4, 2] 0
2766 [7, 6, 4, 3, 2, 1, 0, 7, 4, 1] 0
2767 [7, 6, 4, 3, 2, 1, 0, 7, 4] 0
2768 [7, 6, 4, 3, 2, 1, 0, 7, 3, 2, 1, 3, 2, 3] 0
2769 [7, 6, 4, 3, 2, 1, 0, 7, 3, 2, 1, 3, 2] 0
2770 [7, 6, 4, 3, 2, 1, 0, 7, 3, 2, 1, 3] 0
2771 [7, 6, 4, 3, 2, 1, 0, 7, 3, 2, 1, 2] 0
2772 [7, 6, 4, 3, 2, 1, 0, 7, 3, 2, 1] 0
2773 [7, 6, 4, 3, 2, 1, 0, 7, 3, 2, 3] 0
2774 [7, 6, 4, 3, 2, 1, 0, 7, 3, 2] 0
2775 [7, 6, 4, 3, 2, 1, 0, 7, 3, 1] 0
2776 [7, 6, 4, 3, 2, 1, 0, 7, 3] 0
2777 [7, 6, 4, 3, 2, 1, 0, 7, 2, 1, 2] 0
2778 [7, 6, 4, 3, 2, 1, 0, 7, 2, 1] 0
2779 [7, 6, 4, 3, 2, 1, 0, 7, 2] 0
2780 [7, 6, 4, 3, 2, 1, 0, 7, 1] 0
2781 [7, 6, 4, 3, 2, 1, 0, 7] 0
2782 [7, 6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
2783 [7, 6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
2784 [7, 6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4] 0
2785 [7, 6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 3] 0
2786 [7, 6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2] 0
2787 [7, 6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 4] 0
2788 [7, 6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3] 0
2789 [7, 6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 2] 0
2790 [7, 6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4] 0
2791 [7, 6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2, 3] 0
2792 [7, 6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2] 0
2793 [7, 6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3] 0
2794 [7, 6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 2] 0
2795 [7, 6, 4, 3, 2, 1, 0, 4, 3, 2, 1] 0
2796 [7, 6, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3, 4] 0
2797 [7, 6, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3] 0
2798 [7, 6, 4, 3, 2, 1, 0, 4, 3, 2, 4] 0
2799 [7, 6, 4, 3, 2, 1, 0, 4, 3, 2, 3] 0
2800 [7, 6, 4, 3, 2, 1, 0, 4, 3, 2] 0
2801 [7, 6, 4, 3, 2, 1, 0, 4, 3, 1, 4] 0
2802 [7, 6, 4, 3, 2, 1, 0, 4, 3, 1] 0
2803 [7, 6, 4, 3, 2, 1, 0, 4, 3, 4] 0
2804 [7, 6, 4, 3, 2, 1, 0, 4, 3] 0
2805 [7, 6, 4, 3, 2, 1, 0, 4, 2, 1, 2] 0
2806 [7, 6, 4, 3, 2, 1, 0, 4, 2, 1] 0
2807 [7, 6, 4, 3, 2, 1, 0, 4, 2] 0
2808 [7, 6, 4, 3, 2, 1, 0, 4, 1] 0
2809 [7, 6, 4, 3, 2, 1, 0, 4] 0
2810 [7, 6, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
2811 [7, 6, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
2812 [7, 6, 4, 3, 2, 1, 0, 3, 2, 1, 3] 0
2813 [7, 6, 4, 3, 2, 1, 0, 3, 2, 1, 2] 0
2814 [7, 6, 4, 3, 2, 1, 0, 3, 2, 1] 0
2815 [7, 6, 4, 3, 2, 1, 0, 3, 2, 3] 0
2816 [7, 6, 4, 3, 2, 1, 0, 3, 2] 0
2817 [7, 6, 4, 3, 2, 1, 0, 3, 1] 0
2818 [7, 6, 4, 3, 2, 1, 0, 3] 0
2819 [7, 6, 4, 3, 2, 1, 0, 2, 1, 2] 0
2820 [7, 6, 4, 3, 2, 1, 0, 2, 1] 0
2821 [7, 6, 4, 3, 2, 1, 0, 2] 0
2822 [7, 6, 4, 3, 2, 1, 0, 1] 0
2823 [7, 6, 4, 3, 2, 1, 0] 0
2824 [7, 6, 4, 3, 2, 1, 7, 4, 3, 2, 4, 3, 4] 0
2825 [7, 6, 4, 3, 2, 1, 7, 4, 3, 2, 4, 3] 0
2826 [7, 6, 4, 3, 2, 1, 7, 4, 3, 2, 4] 0
2827 [7, 6, 4, 3, 2, 1, 7, 4, 3, 2, 3] 0
2828 [7, 6, 4, 3, 2, 1, 7, 4, 3, 2] 0
2829 [7, 6, 4, 3, 2, 1, 7, 4, 3, 4] 0
2830 [7, 6, 4, 3, 2, 1, 7, 4, 3] 0
2831 [7, 6, 4, 3, 2, 1, 7, 4, 2] 0
2832 [7, 6, 4, 3, 2, 1, 7, 4] 0
2833 [7, 6, 4, 3, 2, 1, 7, 3, 2, 3] 0
2834 [7, 6, 4, 3, 2, 1, 7, 3, 2] 0
2835 [7, 6, 4, 3, 2, 1, 7, 3] 0
2836 [7, 6, 4, 3, 2, 1, 7, 2] 0
2837 [7, 6, 4, 3, 2, 1, 7] 0
2838 [7, 6, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
2839 [7, 6, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
2840 [7, 6, 4, 3, 2, 1, 4, 3, 2, 4] 0
2841 [7, 6, 4, 3, 2, 1, 4, 3, 2, 3] 0
2842 [7, 6, 4, 3, 2, 1, 4, 3, 2] 0
2843 [7, 6, 4, 3, 2, 1, 4, 3, 4] 0
2844 [7, 6, 4, 3, 2, 1, 4, 3] 0
2845 [7, 6, 4, 3, 2, 1, 4, 2] 0
2846 [7, 6, 4, 3, 2, 1, 4] 0
2847 [7, 6, 4, 3, 2, 1, 3, 2, 3] 0
2848 [7, 6, 4, 3, 2, 1, 3, 2] 0
2849 [7, 6, 4, 3, 2, 1, 3] 0
2850 [7, 6, 4, 3, 2, 1, 2] 0
2851 [7, 6, 4, 3, 2, 1] 0
2852 [7, 6, 4, 3, 2, 0, 7, 4, 3, 4] 0
2853 [7, 6, 4, 3, 2, 0, 7, 4, 3] 0
2854 [7, 6, 4, 3, 2, 0, 7, 4] 0
2855 [7, 6, 4, 3, 2, 0, 7, 3] 0
2856 [7, 6, 4, 3, 2, 0, 7] 0
2857 [7, 6, 4, 3, 2, 0, 4, 3, 4] 0
2858 [7, 6, 4, 3, 2, 0, 4, 3] 0
2859 [7, 6, 4, 3, 2, 0, 4] 0
2860 [7, 6, 4, 3, 2, 0, 3] 0
2861 [7, 6, 4, 3, 2, 0] 0
2862 [7, 6, 4, 3, 2, 7, 4, 3, 4] 0
2863 [7, 6, 4, 3, 2, 7, 4, 3] 0
2864 [7, 6, 4, 3, 2, 7, 4] 0
2865 [7, 6, 4, 3, 2, 7, 3] 0
2866 [7, 6, 4, 3, 2, 7] 0
2867 [7, 6, 4, 3, 2, 4, 3, 4] 0
2868 [7, 6, 4, 3, 2, 4, 3] 0
2869 [7, 6, 4, 3, 2, 4] 0
2870 [7, 6, 4, 3, 2, 3] 0
2871 [7, 6, 4, 3, 2] 0
2872 [7, 6, 4, 3, 1, 0, 7, 4, 1] 0
2873 [7, 6, 4, 3, 1, 0, 7, 4] 0
2874 [7, 6, 4, 3, 1, 0, 7, 1] 0
2875 [7, 6, 4, 3, 1, 0, 7] 0
2876 [7, 6, 4, 3, 1, 0, 4, 1] 0
2877 [7, 6, 4, 3, 1, 0, 4] 0
2878 [7, 6, 4, 3, 1, 0, 1] 0
2879 [7, 6, 4, 3, 1, 0] 0
2880 [7, 6, 4, 3, 1, 7, 4] 0
2881 [7, 6, 4, 3, 1, 7] 0
2882 [7, 6, 4, 3, 1, 4] 0
2883 [7, 6, 4, 3, 1] 0
2884 [7, 6, 4, 3, 0, 7, 4] 0
2885 [7, 6, 4, 3, 0, 7] 0
2886 [7, 6, 4, 3, 0, 4] 0
2887 [7, 6, 4, 3, 0] 0
2888 [7, 6, 4, 3, 7, 4] 0
2889 [7, 6, 4, 3, 7] 0
2890 [7, 6, 4, 3, 4] 0
2891 [7, 6, 4, 3] 0
2892 [7, 6, 4, 2, 1, 0, 7, 2, 1, 2] 0
2893 [7, 6, 4, 2, 1, 0, 7, 2, 1] 0
2894 [7, 6, 4, 2, 1, 0, 7, 2] 0
2895 [7, 6, 4, 2, 1, 0, 7, 1] 0
2896 [7, 6, 4, 2, 1, 0, 7] 0
2897 [7, 6, 4, 2, 1, 0, 2, 1, 2] 0
2898 [7, 6, 4, 2, 1, 0, 2, 1] 0
2899 [7, 6, 4, 2, 1, 0, 2] 0
2900 [7, 6, 4, 2, 1, 0, 1] 0
2901 [7, 6, 4, 2, 1, 0] 0
2902 [7, 6, 4, 2, 1, 7, 2] 0
2903 [7, 6, 4, 2, 1, 7] 0
2904 [7, 6, 4, 2, 1, 2] 0
2905 [7, 6, 4, 2, 1] 0
2906 [7, 6, 4, 2, 0, 7] 0
2907 [7, 6, 4, 2, 0] 0
2908 [7, 6, 4, 2, 7] 0
2909 [7, 6, 4, 2] 0
2910 [7, 6, 4, 1, 0, 7, 1] 0
2911 [7, 6, 4, 1, 0, 7] 0
2912 [7, 6, 4, 1, 0, 1] 0
2913 [7, 6, 4, 1, 0] 0
2914 [7, 6, 4, 1, 7] 0
2915 [7, 6, 4, 1] 0
2916 [7, 6, 4, 0, 7] 0
2917 [7, 6, 4, 0] 0
2918 [7, 6, 4, 7] 0
2919 [7, 6, 4] 0
2920 [7, 6, 3, 2, 1, 0, 7, 3, 2, 1, 3, 2, 3] 0
2921 [7, 6, 3, 2, 1, 0, 7, 3, 2, 1, 3, 2] 0
2922 [7, 6, 3, 2, 1, 0, 7, 3, 2, 1, 3] 0
2923 [7, 6, 3, 2, 1, 0, 7, 3, 2, 1, 2] 0
2924 [7, 6, 3, 2, 1, 0, 7, 3, 2, 1] 0
2925 [7, 6, 3, 2, 1, 0, 7, 3, 2, 3] 0
2926 [7, 6, 3, 2, 1, 0, 7, 3, 2] 0
2927 [7, 6, 3, 2, 1, 0, 7, 3, 1] 0
2928 [7, 6, 3, 2, 1, 0, 7, 3] 0
2929 [7, 6, 3, 2, 1, 0, 7, 2, 1, 2] 0
2930 [7, 6, 3, 2, 1, 0, 7, 2, 1] 0
2931 [7, 6, 3, 2, 1, 0, 7, 2] 0
2932 [7, 6, 3, 2, 1, 0, 7, 1] 0
2933 [7, 6, 3, 2, 1, 0, 7] 0
2934 [7, 6, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
2935 [7, 6, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
2936 [7, 6, 3, 2, 1, 0, 3, 2, 1, 3] 0
2937 [7, 6, 3, 2, 1, 0, 3, 2, 1, 2] 0
2938 [7, 6, 3, 2, 1, 0, 3, 2, 1] 0
2939 [7, 6, 3, 2, 1, 0, 3, 2, 3] 0
2940 [7, 6, 3, 2, 1, 0, 3, 2] 0
2941 [7, 6, 3, 2, 1, 0, 3, 1] 0
2942 [7, 6, 3, 2, 1, 0, 3] 0
2943 [7, 6, 3, 2, 1, 0, 2, 1, 2] 0
2944 [7, 6, 3, 2, 1, 0, 2, 1] 0
2945 [7, 6, 3, 2, 1, 0, 2] 0
2946 [7, 6, 3, 2, 1, 0, 1] 0
2947 [7, 6, 3, 2, 1, 0] 0
2948 [7, 6, 3, 2, 1, 7, 3, 2, 3] 0
2949 [7, 6, 3, 2, 1, 7, 3, 2] 0
2950 [7, 6, 3, 2, 1, 7, 3] 0
2951 [7, 6, 3, 2, 1, 7, 2] 0
2952 [7, 6, 3, 2, 1, 7] 0
2953 [7, 6, 3, 2, 1, 3, 2, 3] 0
2954 [7, 6, 3, 2, 1, 3, 2] 0
2955 [7, 6, 3, 2, 1, 3] 0
2956 [7, 6, 3, 2, 1, 2] 0
2957 [7, 6, 3, 2, 1] 0
2958 [7, 6, 3, 2, 0, 7, 3] 0
2959 [7, 6, 3, 2, 0, 7] 0
2960 [7, 6, 3, 2, 0, 3] 0
2961 [7, 6, 3, 2, 0] 0
2962 [7, 6, 3, 2, 7, 3] 0
2963 [7, 6, 3, 2, 7] 0
2964 [7, 6, 3, 2, 3] 0
2965 [7, 6, 3, 2] 0
2966 [7, 6, 3, 1, 0, 7, 1] 0
2967 [7, 6, 3, 1, 0, 7] 0
2968 [7, 6, 3, 1, 0, 1] 0
2969 [7, 6, 3, 1, 0] 0
2970 [7, 6, 3, 1, 7] 0
2971 [7, 6, 3, 1] 0
2972 [7, 6, 3, 0, 7] 0
2973 [7, 6, 3, 0] 0
2974 [7, 6, 3, 7] 0
2975 [7, 6, 3] 0
2976 [7, 6, 2, 1, 0, 7, 2, 1, 2] 0
2977 [7, 6, 2, 1, 0, 7, 2, 1] 0
2978 [7, 6, 2, 1, 0, 7, 2] 0
2979 [7, 6, 2, 1, 0, 7, 1] 0
2980 [7, 6, 2, 1, 0, 7] 0
2981 [7, 6, 2, 1, 0, 2, 1, 2] 0
2982 [7, 6, 2, 1, 0, 2, 1] 0
2983 [7, 6, 2, 1, 0, 2] 0
2984 [7, 6, 2, 1, 0, 1] 0
2985 [7, 6, 2, 1, 0] 0
2986 [7, 6, 2, 1, 7, 2] 0
2987 [7, 6, 2, 1, 7] 0
2988 [7, 6, 2, 1, 2] 0
2989 [7, 6, 2, 1] 0
2990 [7, 6, 2, 0, 7] 0
2991 [7, 6, 2, 0] 0
2992 [7, 6, 2, 7] 0
2993 [7, 6, 2] 0
2994 [7, 6, 1, 0, 7, 1] 0
2995 [7, 6, 1, 0, 7] 0
2996 [7, 6, 1, 0, 1] 0
2997 [7, 6, 1, 0] 0
2998 [7, 6, 1, 7] 0
2999 [7, 6, 1] 0
3000 [7, 6, 0, 7] 0
3001 [7, 6, 0] 0
3002 [7, 6, 7] 0
3003 [7, 6] 0
3004 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
3005 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
3006 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] 0
3007 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] 0
3008 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] 0
3009 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] 0
3010 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] 0
3011 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] 0
3012 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5] 0
3013 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] 0
3014 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] 0
3015 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4] 0
3016 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 3] 0
3017 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2] 0
3018 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] 0
3019 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4] 0
3020 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5] 0
3021 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 4] 0
3022 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3] 0
3023 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2, 5] 0
3024 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2] 0
3025 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 5] 0
3026 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4] 0
3027 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2, 3] 0
3028 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2] 0
3029 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3] 0
3030 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 2] 0
3031 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5] 0
3032 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
3033 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
3034 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4] 0
3035 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 3] 0
3036 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2] 0
3037 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 4] 0
3038 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3] 0
3039 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 2] 0
3040 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4] 0
3041 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2, 3] 0
3042 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2] 0
3043 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3] 0
3044 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 2] 0
3045 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1] 0
3046 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
3047 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
3048 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5] 0
3049 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 4] 0
3050 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3] 0
3051 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 5] 0
3052 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4] 0
3053 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 3] 0
3054 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5] 0
3055 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4, 3, 4] 0
3056 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4, 3] 0
3057 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4] 0
3058 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 3] 0
3059 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2] 0
3060 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5, 4, 5] 0
3061 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5, 4] 0
3062 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5] 0
3063 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 4] 0
3064 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 1] 0
3065 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 5, 4, 5] 0
3066 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 5, 4] 0
3067 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 5] 0
3068 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3, 4] 0
3069 [7, 5, 4, 3, 2, 1, 0, 5, 4, 3] 0
3070 [7, 5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 5, 2] 0
3071 [7, 5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 5] 0
3072 [7, 5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 2] 0
3073 [7, 5, 4, 3, 2, 1, 0, 5, 4, 2, 1] 0
3074 [7, 5, 4, 3, 2, 1, 0, 5, 4, 2, 5] 0
3075 [7, 5, 4, 3, 2, 1, 0, 5, 4, 2] 0
3076 [7, 5, 4, 3, 2, 1, 0, 5, 4, 1, 5] 0
3077 [7, 5, 4, 3, 2, 1, 0, 5, 4, 1] 0
3078 [7, 5, 4, 3, 2, 1, 0, 5, 4, 5] 0
3079 [7, 5, 4, 3, 2, 1, 0, 5, 4] 0
3080 [7, 5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3, 2, 3] 0
3081 [7, 5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3, 2] 0
3082 [7, 5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3] 0
3083 [7, 5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 2] 0
3084 [7, 5, 4, 3, 2, 1, 0, 5, 3, 2, 1] 0
3085 [7, 5, 4, 3, 2, 1, 0, 5, 3, 2, 3] 0
3086 [7, 5, 4, 3, 2, 1, 0, 5, 3, 2] 0
3087 [7, 5, 4, 3, 2, 1, 0, 5, 3, 1] 0
3088 [7, 5, 4, 3, 2, 1, 0, 5, 3] 0
3089 [7, 5, 4, 3, 2, 1, 0, 5, 2, 1, 2] 0
3090 [7, 5, 4, 3, 2, 1, 0, 5, 2, 1] 0
3091 [7, 5, 4, 3, 2, 1, 0, 5, 2] 0
3092 [7, 5, 4, 3, 2, 1, 0, 5, 1] 0
3093 [7, 5, 4, 3, 2, 1, 0, 5] 0
3094 [7, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
3095 [7, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
3096 [7, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4] 0
3097 [7, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 3] 0
3098 [7, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2] 0
3099 [7, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 4] 0
3100 [7, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3] 0
3101 [7, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 2] 0
3102 [7, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4] 0
3103 [7, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2, 3] 0
3104 [7, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2] 0
3105 [7, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3] 0
3106 [7, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 2] 0
3107 [7, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1] 0
3108 [7, 5, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3, 4] 0
3109 [7, 5, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3] 0
3110 [7, 5, 4, 3, 2, 1, 0, 4, 3, 2, 4] 0
3111 [7, 5, 4, 3, 2, 1, 0, 4, 3, 2, 3] 0
3112 [7, 5, 4, 3, 2, 1, 0, 4, 3, 2] 0
3113 [7, 5, 4, 3, 2, 1, 0, 4, 3, 1, 4] 0
3114 [7, 5, 4, 3, 2, 1, 0, 4, 3, 1] 0
3115 [7, 5, 4, 3, 2, 1, 0, 4, 3, 4] 0
3116 [7, 5, 4, 3, 2, 1, 0, 4, 3] 0
3117 [7, 5, 4, 3, 2, 1, 0, 4, 2, 1, 2] 0
3118 [7, 5, 4, 3, 2, 1, 0, 4, 2, 1] 0
3119 [7, 5, 4, 3, 2, 1, 0, 4, 2] 0
3120 [7, 5, 4, 3, 2, 1, 0, 4, 1] 0
3121 [7, 5, 4, 3, 2, 1, 0, 4] 0
3122 [7, 5, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
3123 [7, 5, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
3124 [7, 5, 4, 3, 2, 1, 0, 3, 2, 1, 3] 0
3125 [7, 5, 4, 3, 2, 1, 0, 3, 2, 1, 2] 0
3126 [7, 5, 4, 3, 2, 1, 0, 3, 2, 1] 0
3127 [7, 5, 4, 3, 2, 1, 0, 3, 2, 3] 0
3128 [7, 5, 4, 3, 2, 1, 0, 3, 2] 0
3129 [7, 5, 4, 3, 2, 1, 0, 3, 1] 0
3130 [7, 5, 4, 3, 2, 1, 0, 3] 0
3131 [7, 5, 4, 3, 2, 1, 0, 2, 1, 2] 0
3132 [7, 5, 4, 3, 2, 1, 0, 2, 1] 0
3133 [7, 5, 4, 3, 2, 1, 0, 2] 0
3134 [7, 5, 4, 3, 2, 1, 0, 1] 0
3135 [7, 5, 4, 3, 2, 1, 0] 0
3136 [7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
3137 [7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
3138 [7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] 0
3139 [7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] 0
3140 [7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] 0
3141 [7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] 0
3142 [7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] 0
3143 [7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] 0
3144 [7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5] 0
3145 [7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] 0
3146 [7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] 0
3147 [7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4] 0
3148 [7, 5, 4, 3, 2, 1, 5, 4, 3, 2, 3] 0
3149 [7, 5, 4, 3, 2, 1, 5, 4, 3, 2] 0
3150 [7, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] 0
3151 [7, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4] 0
3152 [7, 5, 4, 3, 2, 1, 5, 4, 3, 5] 0
3153 [7, 5, 4, 3, 2, 1, 5, 4, 3, 4] 0
3154 [7, 5, 4, 3, 2, 1, 5, 4, 3] 0
3155 [7, 5, 4, 3, 2, 1, 5, 4, 2, 5] 0
3156 [7, 5, 4, 3, 2, 1, 5, 4, 2] 0
3157 [7, 5, 4, 3, 2, 1, 5, 4, 5] 0
3158 [7, 5, 4, 3, 2, 1, 5, 4] 0
3159 [7, 5, 4, 3, 2, 1, 5, 3, 2, 3] 0
3160 [7, 5, 4, 3, 2, 1, 5, 3, 2] 0
3161 [7, 5, 4, 3, 2, 1, 5, 3] 0
3162 [7, 5, 4, 3, 2, 1, 5, 2] 0
3163 [7, 5, 4, 3, 2, 1, 5] 0
3164 [7, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
3165 [7, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
3166 [7, 5, 4, 3, 2, 1, 4, 3, 2, 4] 0
3167 [7, 5, 4, 3, 2, 1, 4, 3, 2, 3] 0
3168 [7, 5, 4, 3, 2, 1, 4, 3, 2] 0
3169 [7, 5, 4, 3, 2, 1, 4, 3, 4] 0
3170 [7, 5, 4, 3, 2, 1, 4, 3] 0
3171 [7, 5, 4, 3, 2, 1, 4, 2] 0
3172 [7, 5, 4, 3, 2, 1, 4] 0
3173 [7, 5, 4, 3, 2, 1, 3, 2, 3] 0
3174 [7, 5, 4, 3, 2, 1, 3, 2] 0
3175 [7, 5, 4, 3, 2, 1, 3] 0
3176 [7, 5, 4, 3, 2, 1, 2] 0
3177 [7, 5, 4, 3, 2, 1] 0
3178 [7, 5, 4, 3, 2, 0, 5, 4, 3, 5, 4, 5] 0
3179 [7, 5, 4, 3, 2, 0, 5, 4, 3, 5, 4] 0
3180 [7, 5, 4, 3, 2, 0, 5, 4, 3, 5] 0
3181 [7, 5, 4, 3, 2, 0, 5, 4, 3, 4] 0
3182 [7, 5, 4, 3, 2, 0, 5, 4, 3] 0
3183 [7, 5, 4, 3, 2, 0, 5, 4, 5] 0
3184 [7, 5, 4, 3, 2, 0, 5, 4] 0
3185 [7, 5, 4, 3, 2, 0, 5, 3] 0
3186 [7, 5, 4, 3, 2, 0, 5] 0
3187 [7, 5, 4, 3, 2, 0, 4, 3, 4] 0
3188 [7, 5, 4, 3, 2, 0, 4, 3] 0
3189 [7, 5, 4, 3, 2, 0, 4] 0
3190 [7, 5, 4, 3, 2, 0, 3] 0
3191 [7, 5, 4, 3, 2, 0] 0
3192 [7, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
3193 [7, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
3194 [7, 5, 4, 3, 2, 5, 4, 3, 5] 0
3195 [7, 5, 4, 3, 2, 5, 4, 3, 4] 0
3196 [7, 5, 4, 3, 2, 5, 4, 3] 0
3197 [7, 5, 4, 3, 2, 5, 4, 5] 0
3198 [7, 5, 4, 3, 2, 5, 4] 0
3199 [7, 5, 4, 3, 2, 5, 3] 0
3200 [7, 5, 4, 3, 2, 5] 0
3201 [7, 5, 4, 3, 2, 4, 3, 4] 0
3202 [7, 5, 4, 3, 2, 4, 3] 0
3203 [7, 5, 4, 3, 2, 4] 0
3204 [7, 5, 4, 3, 2, 3] 0
3205 [7, 5, 4, 3, 2] 0
3206 [7, 5, 4, 3, 1, 0, 5, 4, 1, 5] 0
3207 [7, 5, 4, 3, 1, 0, 5, 4, 1] 0
3208 [7, 5, 4, 3, 1, 0, 5, 4, 5] 0
3209 [7, 5, 4, 3, 1, 0, 5, 4] 0
3210 [7, 5, 4, 3, 1, 0, 5, 1] 0
3211 [7, 5, 4, 3, 1, 0, 5] 0
3212 [7, 5, 4, 3, 1, 0, 4, 1] 0
3213 [7, 5, 4, 3, 1, 0, 4] 0
3214 [7, 5, 4, 3, 1, 0, 1] 0
3215 [7, 5, 4, 3, 1, 0] 0
3216 [7, 5, 4, 3, 1, 5, 4, 5] 0
3217 [7, 5, 4, 3, 1, 5, 4] 0
3218 [7, 5, 4, 3, 1, 5] 0
3219 [7, 5, 4, 3, 1, 4] 0
3220 [7, 5, 4, 3, 1] 0
3221 [7, 5, 4, 3, 0, 5, 4, 5] 0
3222 [7, 5, 4, 3, 0, 5, 4] 0
3223 [7, 5, 4, 3, 0, 5] 0
3224 [7, 5, 4, 3, 0, 4] 0
3225 [7, 5, 4, 3, 0] 0
3226 [7, 5, 4, 3, 5, 4, 5] 0
3227 [7, 5, 4, 3, 5, 4] 0
3228 [7, 5, 4, 3, 5] 0
3229 [7, 5, 4, 3, 4] 0
3230 [7, 5, 4, 3] 0
3231 [7, 5, 4, 2, 1, 0, 5, 2, 1, 2] 0
3232 [7, 5, 4, 2, 1, 0, 5, 2, 1] 0
3233 [7, 5, 4, 2, 1, 0, 5, 2] 0
3234 [7, 5, 4, 2, 1, 0, 5, 1] 0
3235 [7, 5, 4, 2, 1, 0, 5] 0
3236 [7, 5, 4, 2, 1, 0, 2, 1, 2] 0
3237 [7, 5, 4, 2, 1, 0, 2, 1] 0
3238 [7, 5, 4, 2, 1, 0, 2] 0
3239 [7, 5, 4, 2, 1, 0, 1] 0
3240 [7, 5, 4, 2, 1, 0] 0
3241 [7, 5, 4, 2, 1, 5, 2] 0
3242 [7, 5, 4, 2, 1, 5] 0
3243 [7, 5, 4, 2, 1, 2] 0
3244 [7, 5, 4, 2, 1] 0
3245 [7, 5, 4, 2, 0, 5] 0
3246 [7, 5, 4, 2, 0] 0
3247 [7, 5, 4, 2, 5] 0
3248 [7, 5, 4, 2] 0
3249 [7, 5, 4, 1, 0, 5, 1] 0
3250 [7, 5, 4, 1, 0, 5] 0
3251 [7, 5, 4, 1, 0, 1] 0
3252 [7, 5, 4, 1, 0] 0
3253 [7, 5, 4, 1, 5] 0
3254 [7, 5, 4, 1] 0
3255 [7, 5, 4, 0, 5] 0
3256 [7, 5, 4, 0] 0
3257 [7, 5, 4, 5] 0
3258 [7, 5, 4] 0
3259 [7, 5, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
3260 [7, 5, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
3261 [7, 5, 3, 2, 1, 0, 3, 2, 1, 3] 0
3262 [7, 5, 3, 2, 1, 0, 3, 2, 1, 2] 0
3263 [7, 5, 3, 2, 1, 0, 3, 2, 1] 0
3264 [7, 5, 3, 2, 1, 0, 3, 2, 3] 0
3265 [7, 5, 3, 2, 1, 0, 3, 2] 0
3266 [7, 5, 3, 2, 1, 0, 3, 1] 0
3267 [7, 5, 3, 2, 1, 0, 3] 0
3268 [7, 5, 3, 2, 1, 0, 2, 1, 2] 0
3269 [7, 5, 3, 2, 1, 0, 2, 1] 0
3270 [7, 5, 3, 2, 1, 0, 2] 0
3271 [7, 5, 3, 2, 1, 0, 1] 0
3272 [7, 5, 3, 2, 1, 0] 0
3273 [7, 5, 3, 2, 1, 3, 2, 3] 0
3274 [7, 5, 3, 2, 1, 3, 2] 0
3275 [7, 5, 3, 2, 1, 3] 0
3276 [7, 5, 3, 2, 1, 2] 0
3277 [7, 5, 3, 2, 1] 0
3278 [7, 5, 3, 2, 0, 3] 0
3279 [7, 5, 3, 2, 0] 0
3280 [7, 5, 3, 2, 3] 0
3281 [7, 5, 3, 2] 0
3282 [7, 5, 3, 1, 0, 1] 0
3283 [7, 5, 3, 1, 0] 0
3284 [7, 5, 3, 1] 0
3285 [7, 5, 3, 0] 0
3286 [7, 5, 3] 0
3287 [7, 5, 2, 1, 0, 2, 1, 2] 0
3288 [7, 5, 2, 1, 0, 2, 1] 0
3289 [7, 5, 2, 1, 0, 2] 0
3290 [7, 5, 2, 1, 0, 1] 0
3291 [7, 5, 2, 1, 0] 0
3292 [7, 5, 2, 1, 2] 0
3293 [7, 5, 2, 1] 0
3294 [7, 5, 2, 0] 0
3295 [7, 5, 2] 0
3296 [7, 5, 1, 0, 1] 0
3297 [7, 5, 1, 0] 0
3298 [7, 5, 1] 0
3299 [7, 5, 0] 0
3300 [7, 5] 0
3301 [7, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
3302 [7, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
3303 [7, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4] 0
3304 [7, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 3] 0
3305 [7, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2] 0
3306 [7, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 4] 0
3307 [7, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3] 0
3308 [7, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 2] 0
3309 [7, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4] 0
3310 [7, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2, 3] 0
3311 [7, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2] 0
3312 [7, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3] 0
3313 [7, 4, 3, 2, 1, 0, 4, 3, 2, 1, 2] 0
3314 [7, 4, 3, 2, 1, 0, 4, 3, 2, 1] 0
3315 [7, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3, 4] 0
3316 [7, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3] 0
3317 [7, 4, 3, 2, 1, 0, 4, 3, 2, 4] 0
3318 [7, 4, 3, 2, 1, 0, 4, 3, 2, 3] 0
3319 [7, 4, 3, 2, 1, 0, 4, 3, 2] 0
3320 [7, 4, 3, 2, 1, 0, 4, 3, 1, 4] 0
3321 [7, 4, 3, 2, 1, 0, 4, 3, 1] 0
3322 [7, 4, 3, 2, 1, 0, 4, 3, 4] 0
3323 [7, 4, 3, 2, 1, 0, 4, 3] 0
3324 [7, 4, 3, 2, 1, 0, 4, 2, 1, 2] 0
3325 [7, 4, 3, 2, 1, 0, 4, 2, 1] 0
3326 [7, 4, 3, 2, 1, 0, 4, 2] 0
3327 [7, 4, 3, 2, 1, 0, 4, 1] 0
3328 [7, 4, 3, 2, 1, 0, 4] 0
3329 [7, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
3330 [7, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
3331 [7, 4, 3, 2, 1, 0, 3, 2, 1, 3] 0
3332 [7, 4, 3, 2, 1, 0, 3, 2, 1, 2] 0
3333 [7, 4, 3, 2, 1, 0, 3, 2, 1] 0
3334 [7, 4, 3, 2, 1, 0, 3, 2, 3] 0
3335 [7, 4, 3, 2, 1, 0, 3, 2] 0
3336 [7, 4, 3, 2, 1, 0, 3, 1] 0
3337 [7, 4, 3, 2, 1, 0, 3] 0
3338 [7, 4, 3, 2, 1, 0, 2, 1, 2] 0
3339 [7, 4, 3, 2, 1, 0, 2, 1] 0
3340 [7, 4, 3, 2, 1, 0, 2] 0
3341 [7, 4, 3, 2, 1, 0, 1] 0
3342 [7, 4, 3, 2, 1, 0] 0
3343 [7, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
3344 [7, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
3345 [7, 4, 3, 2, 1, 4, 3, 2, 4] 0
3346 [7, 4, 3, 2, 1, 4, 3, 2, 3] 0
3347 [7, 4, 3, 2, 1, 4, 3, 2] 0
3348 [7, 4, 3, 2, 1, 4, 3, 4] 0
3349 [7, 4, 3, 2, 1, 4, 3] 0
3350 [7, 4, 3, 2, 1, 4, 2] 0
3351 [7, 4, 3, 2, 1, 4] 0
3352 [7, 4, 3, 2, 1, 3, 2, 3] 0
3353 [7, 4, 3, 2, 1, 3, 2] 0
3354 [7, 4, 3, 2, 1, 3] 0
3355 [7, 4, 3, 2, 1, 2] 0
3356 [7, 4, 3, 2, 1] 0
3357 [7, 4, 3, 2, 0, 4, 3, 4] 0
3358 [7, 4, 3, 2, 0, 4, 3] 0
3359 [7, 4, 3, 2, 0, 4] 0
3360 [7, 4, 3, 2, 0, 3] 0
3361 [7, 4, 3, 2, 0] 0
3362 [7, 4, 3, 2, 4, 3, 4] 0
3363 [7, 4, 3, 2, 4, 3] 0
3364 [7, 4, 3, 2, 4] 0
3365 [7, 4, 3, 2, 3] 0
3366 [7, 4, 3, 2] 0
3367 [7, 4, 3, 1, 0, 4, 1] 0
3368 [7, 4, 3, 1, 0, 4] 0
3369 [7, 4, 3, 1, 0, 1] 0
3370 [7, 4, 3, 1, 0] 0
3371 [7, 4, 3, 1, 4] 0
3372 [7, 4, 3, 1] 0
3373 [7, 4, 3, 0, 4] 0
3374 [7, 4, 3, 0] 0
3375 [7, 4, 3, 4] 0
3376 [7, 4, 3] 0
3377 [7, 4, 2, 1, 0, 2, 1, 2] 0
3378 [7, 4, 2, 1, 0, 2, 1] 0
3379 [7, 4, 2, 1, 0, 2] 0
3380 [7, 4, 2, 1, 0, 1] 0
3381 [7, 4, 2, 1, 0] 0
3382 [7, 4, 2, 1, 2] 0
3383 [7, 4, 2, 1] 0
3384 [7, 4, 2, 0] 0
3385 [7, 4, 2] 0
3386 [7, 4, 1, 0, 1] 0
3387 [7, 4, 1, 0] 0
3388 [7, 4, 1] 0
3389 [7, 4, 0] 0
3390 [7, 4] 0
3391 [7, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
3392 [7, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
3393 [7, 3, 2, 1, 0, 3, 2, 1, 3] 0
3394 [7, 3, 2, 1, 0, 3, 2, 1, 2] 0
3395 [7, 3, 2, 1, 0, 3, 2, 1] 0
3396 [7, 3, 2, 1, 0, 3, 2, 3] 0
3397 [7, 3, 2, 1, 0, 3, 2] 0
3398 [7, 3, 2, 1, 0, 3, 1] 0
3399 [7, 3, 2, 1, 0, 3] 0
3400 [7, 3, 2, 1, 0, 2, 1, 2] 0
3401 [7, 3, 2, 1, 0, 2, 1] 0
3402 [7, 3, 2, 1, 0, 2] 0
3403 [7, 3, 2, 1, 0, 1] 0
3404 [7, 3, 2, 1, 0] 0
3405 [7, 3, 2, 1, 3, 2, 3] 0
3406 [7, 3, 2, 1, 3, 2] 0
3407 [7, 3, 2, 1, 3] 0
3408 [7, 3, 2, 1, 2] 0
3409 [7, 3, 2, 1] 0
3410 [7, 3, 2, 0, 3] 0
3411 [7, 3, 2, 0] 0
3412 [7, 3, 2, 3] 0
3413 [7, 3, 2] 0
3414 [7, 3, 1, 0, 1] 0
3415 [7, 3, 1, 0] 0
3416 [7, 3, 1] 0
3417 [7, 3, 0] 0
3418 [7, 3] 0
3419 [7, 2, 1, 0, 2, 1, 2] 0
3420 [7, 2, 1, 0, 2, 1] 0
3421 [7, 2, 1, 0, 2] 0
3422 [7, 2, 1, 0, 1] 0
3423 [7, 2, 1, 0] 0
3424 [7, 2, 1, 2] 0
3425 [7, 2, 1] 0
3426 [7, 2, 0] 0
3427 [7, 2] 0
3428 [7, 1, 0, 1] 0
3429 [7, 1, 0] 0
3430 [7, 1] 0
3431 [7, 0] 0
3432 [7] 0
3433 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
3434 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
3435 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6] 0
3436 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 5] 0
3437 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4] 0
3438 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 6] 0
3439 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5] 0
3440 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 4] 0
3441 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6] 0
3442 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4, 5] 0
3443 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4] 0
3444 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5] 0
3445 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 4] 0
3446 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3] 0
3447 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5, 6] 0
3448 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5] 0
3449 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 6] 0
3450 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 5] 0
3451 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4] 0
3452 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 3, 6] 0
3453 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 3] 0
3454 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 6] 0
3455 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5] 0
3456 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 4, 3, 4] 0
3457 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 4, 3] 0
3458 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 4] 0
3459 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 3] 0
3460 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6] 0
3461 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
3462 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
3463 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3, 5] 0
3464 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3, 4] 0
3465 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3] 0
3466 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 5] 0
3467 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4] 0
3468 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 3] 0
3469 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5] 0
3470 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 4, 3, 4] 0
3471 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 4, 3] 0
3472 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 4] 0
3473 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 3] 0
3474 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2] 0
3475 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
3476 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
3477 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4, 6] 0
3478 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4, 5] 0
3479 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4] 0
3480 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 6] 0
3481 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5] 0
3482 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 4] 0
3483 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6] 0
3484 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 5, 4, 5] 0
3485 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 5, 4] 0
3486 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 5] 0
3487 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 4] 0
3488 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 3] 0
3489 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 2, 6, 5, 6] 0
3490 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 2, 6, 5] 0
3491 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 2, 6] 0
3492 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 2, 5] 0
3493 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 2] 0
3494 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 6, 5, 6] 0
3495 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 6, 5] 0
3496 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 6] 0
3497 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4, 5] 0
3498 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 4] 0
3499 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 3, 2, 6, 3] 0
3500 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 3, 2, 6] 0
3501 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 3, 2, 3] 0
3502 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 3, 2] 0
3503 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 3, 6] 0
3504 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 3] 0
3505 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 2, 6] 0
3506 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 2] 0
3507 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5, 6] 0
3508 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 5] 0
3509 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 4, 3, 2, 4, 3, 4] 0
3510 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 4, 3, 2, 4, 3] 0
3511 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 4, 3, 2, 4] 0
3512 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 4, 3, 2, 3] 0
3513 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 4, 3, 2] 0
3514 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 4, 3, 4] 0
3515 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 4, 3] 0
3516 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 4, 2] 0
3517 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 4] 0
3518 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 3, 2, 3] 0
3519 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 3, 2] 0
3520 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 3] 0
3521 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6, 2] 0
3522 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 6] 0
3523 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
3524 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
3525 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] 0
3526 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] 0
3527 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] 0
3528 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] 0
3529 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] 0
3530 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] 0
3531 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5] 0
3532 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] 0
3533 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] 0
3534 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4] 0
3535 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 3] 0
3536 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 2] 0
3537 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] 0
3538 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4] 0
3539 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 5] 0
3540 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3, 4] 0
3541 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 3] 0
3542 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 2, 5] 0
3543 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 2] 0
3544 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4, 5] 0
3545 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 4] 0
3546 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 3, 2, 3] 0
3547 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 3, 2] 0
3548 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 3] 0
3549 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5, 2] 0
3550 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 5] 0
3551 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
3552 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
3553 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 4, 3, 2, 4] 0
3554 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 4, 3, 2, 3] 0
3555 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 4, 3, 2] 0
3556 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 4, 3, 4] 0
3557 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 4, 3] 0
3558 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 4, 2] 0
3559 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 4] 0
3560 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 3, 2, 3] 0
3561 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 3, 2] 0
3562 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 3] 0
3563 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1, 2] 0
3564 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1] 0
3565 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
3566 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
3567 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6] 0
3568 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 5] 0
3569 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4] 0
3570 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 6] 0
3571 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5] 0
3572 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 4] 0
3573 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6] 0
3574 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4, 5] 0
3575 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4] 0
3576 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5] 0
3577 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3, 4] 0
3578 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 3] 0
3579 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5, 6] 0
3580 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5] 0
3581 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 6] 0
3582 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4, 5] 0
3583 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 4] 0
3584 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 3, 6] 0
3585 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 3] 0
3586 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5, 6] 0
3587 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 5] 0
3588 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 4, 3, 4] 0
3589 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 4, 3] 0
3590 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 4] 0
3591 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6, 3] 0
3592 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 6] 0
3593 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
3594 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
3595 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 5, 4, 3, 5] 0
3596 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 5, 4, 3, 4] 0
3597 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 5, 4, 3] 0
3598 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 5, 4, 5] 0
3599 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 5, 4] 0
3600 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 5, 3] 0
3601 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 5] 0
3602 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 4, 3, 4] 0
3603 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 4, 3] 0
3604 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 4] 0
3605 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 3] 0
3606 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2] 0
3607 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 6, 5, 4, 6, 5, 6] 0
3608 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 6, 5, 4, 6, 5] 0
3609 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 6, 5, 4, 6] 0
3610 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 6, 5, 4, 5] 0
3611 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 6, 5, 4] 0
3612 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 6, 5, 6] 0
3613 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 6, 5] 0
3614 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 6, 4] 0
3615 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 6] 0
3616 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 5, 4, 5] 0
3617 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 5, 4] 0
3618 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 5] 0
3619 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1, 4] 0
3620 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 1] 0
3621 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
3622 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
3623 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 6, 5, 4, 6] 0
3624 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 6, 5, 4, 5] 0
3625 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 6, 5, 4] 0
3626 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 6, 5, 6] 0
3627 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 6, 5] 0
3628 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 6, 4] 0
3629 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 6] 0
3630 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 5, 4, 5] 0
3631 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 5, 4] 0
3632 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 5] 0
3633 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 4] 0
3634 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3] 0
3635 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 1, 6, 5, 2, 6] 0
3636 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 1, 6, 5, 2] 0
3637 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 1, 6, 5, 6] 0
3638 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 1, 6, 5] 0
3639 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 1, 6, 2] 0
3640 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 1, 6] 0
3641 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 1, 5, 2] 0
3642 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 1, 5] 0
3643 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 1, 2] 0
3644 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 1] 0
3645 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 6, 5, 6] 0
3646 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 6, 5] 0
3647 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 6] 0
3648 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2, 5] 0
3649 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 2] 0
3650 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 1, 6, 5, 6] 0
3651 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 1, 6, 5] 0
3652 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 1, 6] 0
3653 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 1, 5] 0
3654 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 1] 0
3655 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 6, 5, 6] 0
3656 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 6, 5] 0
3657 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 6] 0
3658 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 5] 0
3659 [6, 5, 4, 3, 2, 1, 0, 6, 5, 4] 0
3660 [6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 1, 6, 3, 2, 3] 0
3661 [6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 1, 6, 3, 2] 0
3662 [6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 1, 6, 3] 0
3663 [6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 1, 6, 2] 0
3664 [6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 1, 6] 0
3665 [6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 1, 3, 2, 3] 0
3666 [6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 1, 3, 2] 0
3667 [6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 1, 3] 0
3668 [6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 1, 2] 0
3669 [6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 1] 0
3670 [6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 6, 3] 0
3671 [6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 6] 0
3672 [6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2, 3] 0
3673 [6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 2] 0
3674 [6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 1, 6] 0
3675 [6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 1] 0
3676 [6, 5, 4, 3, 2, 1, 0, 6, 5, 3, 6] 0
3677 [6, 5, 4, 3, 2, 1, 0, 6, 5, 3] 0
3678 [6, 5, 4, 3, 2, 1, 0, 6, 5, 2, 1, 6, 2] 0
3679 [6, 5, 4, 3, 2, 1, 0, 6, 5, 2, 1, 6] 0
3680 [6, 5, 4, 3, 2, 1, 0, 6, 5, 2, 1, 2] 0
3681 [6, 5, 4, 3, 2, 1, 0, 6, 5, 2, 1] 0
3682 [6, 5, 4, 3, 2, 1, 0, 6, 5, 2, 6] 0
3683 [6, 5, 4, 3, 2, 1, 0, 6, 5, 2] 0
3684 [6, 5, 4, 3, 2, 1, 0, 6, 5, 1, 6] 0
3685 [6, 5, 4, 3, 2, 1, 0, 6, 5, 1] 0
3686 [6, 5, 4, 3, 2, 1, 0, 6, 5, 6] 0
3687 [6, 5, 4, 3, 2, 1, 0, 6, 5] 0
3688 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
3689 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
3690 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 4, 3, 2, 4] 0
3691 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 4, 3, 2, 3] 0
3692 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 4, 3, 2] 0
3693 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 4, 3, 4] 0
3694 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 4, 3] 0
3695 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 4, 2] 0
3696 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 4] 0
3697 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 3, 2, 3] 0
3698 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 3, 2] 0
3699 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 3] 0
3700 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1, 2] 0
3701 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 1] 0
3702 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 4, 3, 4] 0
3703 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 4, 3] 0
3704 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 4] 0
3705 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2, 3] 0
3706 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 2] 0
3707 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 1, 4] 0
3708 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 1] 0
3709 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3, 4] 0
3710 [6, 5, 4, 3, 2, 1, 0, 6, 4, 3] 0
3711 [6, 5, 4, 3, 2, 1, 0, 6, 4, 2, 1, 2] 0
3712 [6, 5, 4, 3, 2, 1, 0, 6, 4, 2, 1] 0
3713 [6, 5, 4, 3, 2, 1, 0, 6, 4, 2] 0
3714 [6, 5, 4, 3, 2, 1, 0, 6, 4, 1] 0
3715 [6, 5, 4, 3, 2, 1, 0, 6, 4] 0
3716 [6, 5, 4, 3, 2, 1, 0, 6, 3, 2, 1, 3, 2, 3] 0
3717 [6, 5, 4, 3, 2, 1, 0, 6, 3, 2, 1, 3, 2] 0
3718 [6, 5, 4, 3, 2, 1, 0, 6, 3, 2, 1, 3] 0
3719 [6, 5, 4, 3, 2, 1, 0, 6, 3, 2, 1, 2] 0
3720 [6, 5, 4, 3, 2, 1, 0, 6, 3, 2, 1] 0
3721 [6, 5, 4, 3, 2, 1, 0, 6, 3, 2, 3] 0
3722 [6, 5, 4, 3, 2, 1, 0, 6, 3, 2] 0
3723 [6, 5, 4, 3, 2, 1, 0, 6, 3, 1] 0
3724 [6, 5, 4, 3, 2, 1, 0, 6, 3] 0
3725 [6, 5, 4, 3, 2, 1, 0, 6, 2, 1, 2] 0
3726 [6, 5, 4, 3, 2, 1, 0, 6, 2, 1] 0
3727 [6, 5, 4, 3, 2, 1, 0, 6, 2] 0
3728 [6, 5, 4, 3, 2, 1, 0, 6, 1] 0
3729 [6, 5, 4, 3, 2, 1, 0, 6] 0
3730 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
3731 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
3732 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] 0
3733 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] 0
3734 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] 0
3735 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] 0
3736 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] 0
3737 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] 0
3738 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5] 0
3739 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] 0
3740 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] 0
3741 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4] 0
3742 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 3] 0
3743 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2] 0
3744 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] 0
3745 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4] 0
3746 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5] 0
3747 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 4] 0
3748 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3] 0
3749 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2, 5] 0
3750 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2] 0
3751 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 5] 0
3752 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4] 0
3753 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2, 3] 0
3754 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2] 0
3755 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3] 0
3756 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 2] 0
3757 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5] 0
3758 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
3759 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
3760 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4] 0
3761 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 3] 0
3762 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2] 0
3763 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 4] 0
3764 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3] 0
3765 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 2] 0
3766 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4] 0
3767 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2, 3] 0
3768 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2] 0
3769 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3] 0
3770 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 2] 0
3771 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1] 0
3772 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
3773 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
3774 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5] 0
3775 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 4] 0
3776 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3] 0
3777 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 5] 0
3778 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4] 0
3779 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 3] 0
3780 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5] 0
3781 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4, 3, 4] 0
3782 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4, 3] 0
3783 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4] 0
3784 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 3] 0
3785 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2] 0
3786 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5, 4, 5] 0
3787 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5, 4] 0
3788 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5] 0
3789 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 4] 0
3790 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 1] 0
3791 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 5, 4, 5] 0
3792 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 5, 4] 0
3793 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 5] 0
3794 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 4] 0
3795 [6, 5, 4, 3, 2, 1, 0, 5, 4, 3] 0
3796 [6, 5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 5, 2] 0
3797 [6, 5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 5] 0
3798 [6, 5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 2] 0
3799 [6, 5, 4, 3, 2, 1, 0, 5, 4, 2, 1] 0
3800 [6, 5, 4, 3, 2, 1, 0, 5, 4, 2, 5] 0
3801 [6, 5, 4, 3, 2, 1, 0, 5, 4, 2] 0
3802 [6, 5, 4, 3, 2, 1, 0, 5, 4, 1, 5] 0
3803 [6, 5, 4, 3, 2, 1, 0, 5, 4, 1] 0
3804 [6, 5, 4, 3, 2, 1, 0, 5, 4, 5] 0
3805 [6, 5, 4, 3, 2, 1, 0, 5, 4] 0
3806 [6, 5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3, 2, 3] 0
3807 [6, 5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3, 2] 0
3808 [6, 5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3] 0
3809 [6, 5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 2] 0
3810 [6, 5, 4, 3, 2, 1, 0, 5, 3, 2, 1] 0
3811 [6, 5, 4, 3, 2, 1, 0, 5, 3, 2, 3] 0
3812 [6, 5, 4, 3, 2, 1, 0, 5, 3, 2] 0
3813 [6, 5, 4, 3, 2, 1, 0, 5, 3, 1] 0
3814 [6, 5, 4, 3, 2, 1, 0, 5, 3] 0
3815 [6, 5, 4, 3, 2, 1, 0, 5, 2, 1, 2] 0
3816 [6, 5, 4, 3, 2, 1, 0, 5, 2, 1] 0
3817 [6, 5, 4, 3, 2, 1, 0, 5, 2] 0
3818 [6, 5, 4, 3, 2, 1, 0, 5, 1] 0
3819 [6, 5, 4, 3, 2, 1, 0, 5] 0
3820 [6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
3821 [6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
3822 [6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4] 0
3823 [6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 3] 0
3824 [6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2] 0
3825 [6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 4] 0
3826 [6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3] 0
3827 [6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 2] 0
3828 [6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4] 0
3829 [6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2, 3] 0
3830 [6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2] 0
3831 [6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3] 0
3832 [6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 2] 0
3833 [6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1] 0
3834 [6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3, 4] 0
3835 [6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3] 0
3836 [6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 4] 0
3837 [6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 3] 0
3838 [6, 5, 4, 3, 2, 1, 0, 4, 3, 2] 0
3839 [6, 5, 4, 3, 2, 1, 0, 4, 3, 1, 4] 0
3840 [6, 5, 4, 3, 2, 1, 0, 4, 3, 1] 0
3841 [6, 5, 4, 3, 2, 1, 0, 4, 3, 4] 0
3842 [6, 5, 4, 3, 2, 1, 0, 4, 3] 0
3843 [6, 5, 4, 3, 2, 1, 0, 4, 2, 1, 2] 0
3844 [6, 5, 4, 3, 2, 1, 0, 4, 2, 1] 0
3845 [6, 5, 4, 3, 2, 1, 0, 4, 2] 0
3846 [6, 5, 4, 3, 2, 1, 0, 4, 1] 0
3847 [6, 5, 4, 3, 2, 1, 0, 4] 0
3848 [6, 5, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
3849 [6, 5, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
3850 [6, 5, 4, 3, 2, 1, 0, 3, 2, 1, 3] 0
3851 [6, 5, 4, 3, 2, 1, 0, 3, 2, 1, 2] 0
3852 [6, 5, 4, 3, 2, 1, 0, 3, 2, 1] 0
3853 [6, 5, 4, 3, 2, 1, 0, 3, 2, 3] 0
3854 [6, 5, 4, 3, 2, 1, 0, 3, 2] 0
3855 [6, 5, 4, 3, 2, 1, 0, 3, 1] 0
3856 [6, 5, 4, 3, 2, 1, 0, 3] 0
3857 [6, 5, 4, 3, 2, 1, 0, 2, 1, 2] 0
3858 [6, 5, 4, 3, 2, 1, 0, 2, 1] 0
3859 [6, 5, 4, 3, 2, 1, 0, 2] 0
3860 [6, 5, 4, 3, 2, 1, 0, 1] 0
3861 [6, 5, 4, 3, 2, 1, 0] 0
3862 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
3863 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
3864 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6] 0
3865 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 5] 0
3866 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4] 0
3867 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 6] 0
3868 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5] 0
3869 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 4] 0
3870 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 6] 0
3871 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4, 5] 0
3872 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4] 0
3873 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 5] 0
3874 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3, 4] 0
3875 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 3] 0
3876 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5, 6] 0
3877 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 6, 5] 0
3878 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 6] 0
3879 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4, 5] 0
3880 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 4] 0
3881 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 3, 6] 0
3882 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 3] 0
3883 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5, 6] 0
3884 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 5] 0
3885 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 4, 3, 4] 0
3886 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 4, 3] 0
3887 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 4] 0
3888 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6, 3] 0
3889 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 6] 0
3890 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
3891 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
3892 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3, 5] 0
3893 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3, 4] 0
3894 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 3] 0
3895 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4, 5] 0
3896 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 4] 0
3897 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5, 3] 0
3898 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 5] 0
3899 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 4, 3, 4] 0
3900 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 4, 3] 0
3901 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 4] 0
3902 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 3] 0
3903 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2] 0
3904 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
3905 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
3906 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4, 6] 0
3907 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4, 5] 0
3908 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 4] 0
3909 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5, 6] 0
3910 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 5] 0
3911 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6, 4] 0
3912 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 6] 0
3913 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 5, 4, 5] 0
3914 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 5, 4] 0
3915 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 5] 0
3916 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3, 4] 0
3917 [6, 5, 4, 3, 2, 1, 6, 5, 4, 3] 0
3918 [6, 5, 4, 3, 2, 1, 6, 5, 4, 2, 6, 5, 6] 0
3919 [6, 5, 4, 3, 2, 1, 6, 5, 4, 2, 6, 5] 0
3920 [6, 5, 4, 3, 2, 1, 6, 5, 4, 2, 6] 0
3921 [6, 5, 4, 3, 2, 1, 6, 5, 4, 2, 5] 0
3922 [6, 5, 4, 3, 2, 1, 6, 5, 4, 2] 0
3923 [6, 5, 4, 3, 2, 1, 6, 5, 4, 6, 5, 6] 0
3924 [6, 5, 4, 3, 2, 1, 6, 5, 4, 6, 5] 0
3925 [6, 5, 4, 3, 2, 1, 6, 5, 4, 6] 0
3926 [6, 5, 4, 3, 2, 1, 6, 5, 4, 5] 0
3927 [6, 5, 4, 3, 2, 1, 6, 5, 4] 0
3928 [6, 5, 4, 3, 2, 1, 6, 5, 3, 2, 6, 3] 0
3929 [6, 5, 4, 3, 2, 1, 6, 5, 3, 2, 6] 0
3930 [6, 5, 4, 3, 2, 1, 6, 5, 3, 2, 3] 0
3931 [6, 5, 4, 3, 2, 1, 6, 5, 3, 2] 0
3932 [6, 5, 4, 3, 2, 1, 6, 5, 3, 6] 0
3933 [6, 5, 4, 3, 2, 1, 6, 5, 3] 0
3934 [6, 5, 4, 3, 2, 1, 6, 5, 2, 6] 0
3935 [6, 5, 4, 3, 2, 1, 6, 5, 2] 0
3936 [6, 5, 4, 3, 2, 1, 6, 5, 6] 0
3937 [6, 5, 4, 3, 2, 1, 6, 5] 0
3938 [6, 5, 4, 3, 2, 1, 6, 4, 3, 2, 4, 3, 4] 0
3939 [6, 5, 4, 3, 2, 1, 6, 4, 3, 2, 4, 3] 0
3940 [6, 5, 4, 3, 2, 1, 6, 4, 3, 2, 4] 0
3941 [6, 5, 4, 3, 2, 1, 6, 4, 3, 2, 3] 0
3942 [6, 5, 4, 3, 2, 1, 6, 4, 3, 2] 0
3943 [6, 5, 4, 3, 2, 1, 6, 4, 3, 4] 0
3944 [6, 5, 4, 3, 2, 1, 6, 4, 3] 0
3945 [6, 5, 4, 3, 2, 1, 6, 4, 2] 0
3946 [6, 5, 4, 3, 2, 1, 6, 4] 0
3947 [6, 5, 4, 3, 2, 1, 6, 3, 2, 3] 0
3948 [6, 5, 4, 3, 2, 1, 6, 3, 2] 0
3949 [6, 5, 4, 3, 2, 1, 6, 3] 0
3950 [6, 5, 4, 3, 2, 1, 6, 2] 0
3951 [6, 5, 4, 3, 2, 1, 6] 0
3952 [6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
3953 [6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
3954 [6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] 0
3955 [6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] 0
3956 [6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] 0
3957 [6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] 0
3958 [6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] 0
3959 [6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] 0
3960 [6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5] 0
3961 [6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] 0
3962 [6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] 0
3963 [6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4] 0
3964 [6, 5, 4, 3, 2, 1, 5, 4, 3, 2, 3] 0
3965 [6, 5, 4, 3, 2, 1, 5, 4, 3, 2] 0
3966 [6, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] 0
3967 [6, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4] 0
3968 [6, 5, 4, 3, 2, 1, 5, 4, 3, 5] 0
3969 [6, 5, 4, 3, 2, 1, 5, 4, 3, 4] 0
3970 [6, 5, 4, 3, 2, 1, 5, 4, 3] 0
3971 [6, 5, 4, 3, 2, 1, 5, 4, 2, 5] 0
3972 [6, 5, 4, 3, 2, 1, 5, 4, 2] 0
3973 [6, 5, 4, 3, 2, 1, 5, 4, 5] 0
3974 [6, 5, 4, 3, 2, 1, 5, 4] 0
3975 [6, 5, 4, 3, 2, 1, 5, 3, 2, 3] 0
3976 [6, 5, 4, 3, 2, 1, 5, 3, 2] 0
3977 [6, 5, 4, 3, 2, 1, 5, 3] 0
3978 [6, 5, 4, 3, 2, 1, 5, 2] 0
3979 [6, 5, 4, 3, 2, 1, 5] 0
3980 [6, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
3981 [6, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
3982 [6, 5, 4, 3, 2, 1, 4, 3, 2, 4] 0
3983 [6, 5, 4, 3, 2, 1, 4, 3, 2, 3] 0
3984 [6, 5, 4, 3, 2, 1, 4, 3, 2] 0
3985 [6, 5, 4, 3, 2, 1, 4, 3, 4] 0
3986 [6, 5, 4, 3, 2, 1, 4, 3] 0
3987 [6, 5, 4, 3, 2, 1, 4, 2] 0
3988 [6, 5, 4, 3, 2, 1, 4] 0
3989 [6, 5, 4, 3, 2, 1, 3, 2, 3] 0
3990 [6, 5, 4, 3, 2, 1, 3, 2] 0
3991 [6, 5, 4, 3, 2, 1, 3] 0
3992 [6, 5, 4, 3, 2, 1, 2] 0
3993 [6, 5, 4, 3, 2, 1] 0
3994 [6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
3995 [6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
3996 [6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 6, 5, 4, 6] 0
3997 [6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 6, 5, 4, 5] 0
3998 [6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 6, 5, 4] 0
3999 [6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 6, 5, 6] 0
4000 [6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 6, 5] 0
4001 [6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 6, 4] 0
4002 [6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 6] 0
4003 [6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 5, 4, 5] 0
4004 [6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 5, 4] 0
4005 [6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 5] 0
4006 [6, 5, 4, 3, 2, 0, 6, 5, 4, 3, 4] 0
4007 [6, 5, 4, 3, 2, 0, 6, 5, 4, 3] 0
4008 [6, 5, 4, 3, 2, 0, 6, 5, 4, 6, 5, 6] 0
4009 [6, 5, 4, 3, 2, 0, 6, 5, 4, 6, 5] 0
4010 [6, 5, 4, 3, 2, 0, 6, 5, 4, 6] 0
4011 [6, 5, 4, 3, 2, 0, 6, 5, 4, 5] 0
4012 [6, 5, 4, 3, 2, 0, 6, 5, 4] 0
4013 [6, 5, 4, 3, 2, 0, 6, 5, 3, 6] 0
4014 [6, 5, 4, 3, 2, 0, 6, 5, 3] 0
4015 [6, 5, 4, 3, 2, 0, 6, 5, 6] 0
4016 [6, 5, 4, 3, 2, 0, 6, 5] 0
4017 [6, 5, 4, 3, 2, 0, 6, 4, 3, 4] 0
4018 [6, 5, 4, 3, 2, 0, 6, 4, 3] 0
4019 [6, 5, 4, 3, 2, 0, 6, 4] 0
4020 [6, 5, 4, 3, 2, 0, 6, 3] 0
4021 [6, 5, 4, 3, 2, 0, 6] 0
4022 [6, 5, 4, 3, 2, 0, 5, 4, 3, 5, 4, 5] 0
4023 [6, 5, 4, 3, 2, 0, 5, 4, 3, 5, 4] 0
4024 [6, 5, 4, 3, 2, 0, 5, 4, 3, 5] 0
4025 [6, 5, 4, 3, 2, 0, 5, 4, 3, 4] 0
4026 [6, 5, 4, 3, 2, 0, 5, 4, 3] 0
4027 [6, 5, 4, 3, 2, 0, 5, 4, 5] 0
4028 [6, 5, 4, 3, 2, 0, 5, 4] 0
4029 [6, 5, 4, 3, 2, 0, 5, 3] 0
4030 [6, 5, 4, 3, 2, 0, 5] 0
4031 [6, 5, 4, 3, 2, 0, 4, 3, 4] 0
4032 [6, 5, 4, 3, 2, 0, 4, 3] 0
4033 [6, 5, 4, 3, 2, 0, 4] 0
4034 [6, 5, 4, 3, 2, 0, 3] 0
4035 [6, 5, 4, 3, 2, 0] 0
4036 [6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
4037 [6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6, 5] 0
4038 [6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 6] 0
4039 [6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4, 5] 0
4040 [6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 4] 0
4041 [6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5, 6] 0
4042 [6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 5] 0
4043 [6, 5, 4, 3, 2, 6, 5, 4, 3, 6, 4] 0
4044 [6, 5, 4, 3, 2, 6, 5, 4, 3, 6] 0
4045 [6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4, 5] 0
4046 [6, 5, 4, 3, 2, 6, 5, 4, 3, 5, 4] 0
4047 [6, 5, 4, 3, 2, 6, 5, 4, 3, 5] 0
4048 [6, 5, 4, 3, 2, 6, 5, 4, 3, 4] 0
4049 [6, 5, 4, 3, 2, 6, 5, 4, 3] 0
4050 [6, 5, 4, 3, 2, 6, 5, 4, 6, 5, 6] 0
4051 [6, 5, 4, 3, 2, 6, 5, 4, 6, 5] 0
4052 [6, 5, 4, 3, 2, 6, 5, 4, 6] 0
4053 [6, 5, 4, 3, 2, 6, 5, 4, 5] 0
4054 [6, 5, 4, 3, 2, 6, 5, 4] 0
4055 [6, 5, 4, 3, 2, 6, 5, 3, 6] 0
4056 [6, 5, 4, 3, 2, 6, 5, 3] 0
4057 [6, 5, 4, 3, 2, 6, 5, 6] 0
4058 [6, 5, 4, 3, 2, 6, 5] 0
4059 [6, 5, 4, 3, 2, 6, 4, 3, 4] 0
4060 [6, 5, 4, 3, 2, 6, 4, 3] 0
4061 [6, 5, 4, 3, 2, 6, 4] 0
4062 [6, 5, 4, 3, 2, 6, 3] 0
4063 [6, 5, 4, 3, 2, 6] 0
4064 [6, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
4065 [6, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
4066 [6, 5, 4, 3, 2, 5, 4, 3, 5] 0
4067 [6, 5, 4, 3, 2, 5, 4, 3, 4] 0
4068 [6, 5, 4, 3, 2, 5, 4, 3] 0
4069 [6, 5, 4, 3, 2, 5, 4, 5] 0
4070 [6, 5, 4, 3, 2, 5, 4] 0
4071 [6, 5, 4, 3, 2, 5, 3] 0
4072 [6, 5, 4, 3, 2, 5] 0
4073 [6, 5, 4, 3, 2, 4, 3, 4] 0
4074 [6, 5, 4, 3, 2, 4, 3] 0
4075 [6, 5, 4, 3, 2, 4] 0
4076 [6, 5, 4, 3, 2, 3] 0
4077 [6, 5, 4, 3, 2] 0
4078 [6, 5, 4, 3, 1, 0, 6, 5, 4, 1, 6, 5, 6] 0
4079 [6, 5, 4, 3, 1, 0, 6, 5, 4, 1, 6, 5] 0
4080 [6, 5, 4, 3, 1, 0, 6, 5, 4, 1, 6] 0
4081 [6, 5, 4, 3, 1, 0, 6, 5, 4, 1, 5] 0
4082 [6, 5, 4, 3, 1, 0, 6, 5, 4, 1] 0
4083 [6, 5, 4, 3, 1, 0, 6, 5, 4, 6, 5, 6] 0
4084 [6, 5, 4, 3, 1, 0, 6, 5, 4, 6, 5] 0
4085 [6, 5, 4, 3, 1, 0, 6, 5, 4, 6] 0
4086 [6, 5, 4, 3, 1, 0, 6, 5, 4, 5] 0
4087 [6, 5, 4, 3, 1, 0, 6, 5, 4] 0
4088 [6, 5, 4, 3, 1, 0, 6, 5, 1, 6] 0
4089 [6, 5, 4, 3, 1, 0, 6, 5, 1] 0
4090 [6, 5, 4, 3, 1, 0, 6, 5, 6] 0
4091 [6, 5, 4, 3, 1, 0, 6, 5] 0
4092 [6, 5, 4, 3, 1, 0, 6, 4, 1] 0
4093 [6, 5, 4, 3, 1, 0, 6, 4] 0
4094 [6, 5, 4, 3, 1, 0, 6, 1] 0
4095 [6, 5, 4, 3, 1, 0, 6] 0
4096 [6, 5, 4, 3, 1, 0, 5, 4, 1, 5] 0
4097 [6, 5, 4, 3, 1, 0, 5, 4, 1] 0
4098 [6, 5, 4, 3, 1, 0, 5, 4, 5] 0
4099 [6, 5, 4, 3, 1, 0, 5, 4] 0
4100 [6, 5, 4, 3, 1, 0, 5, 1] 0
4101 [6, 5, 4, 3, 1, 0, 5] 0
4102 [6, 5, 4, 3, 1, 0, 4, 1] 0
4103 [6, 5, 4, 3, 1, 0, 4] 0
4104 [6, 5, 4, 3, 1, 0, 1] 0
4105 [6, 5, 4, 3, 1, 0] 0
4106 [6, 5, 4, 3, 1, 6, 5, 4, 6, 5, 6] 0
4107 [6, 5, 4, 3, 1, 6, 5, 4, 6, 5] 0
4108 [6, 5, 4, 3, 1, 6, 5, 4, 6] 0
4109 [6, 5, 4, 3, 1, 6, 5, 4, 5] 0
4110 [6, 5, 4, 3, 1, 6, 5, 4] 0
4111 [6, 5, 4, 3, 1, 6, 5, 6] 0
4112 [6, 5, 4, 3, 1, 6, 5] 0
4113 [6, 5, 4, 3, 1, 6, 4] 0
4114 [6, 5, 4, 3, 1, 6] 0
4115 [6, 5, 4, 3, 1, 5, 4, 5] 0
4116 [6, 5, 4, 3, 1, 5, 4] 0
4117 [6, 5, 4, 3, 1, 5] 0
4118 [6, 5, 4, 3, 1, 4] 0
4119 [6, 5, 4, 3, 1] 0
4120 [6, 5, 4, 3, 0, 6, 5, 4, 6, 5, 6] 0
4121 [6, 5, 4, 3, 0, 6, 5, 4, 6, 5] 0
4122 [6, 5, 4, 3, 0, 6, 5, 4, 6] 0
4123 [6, 5, 4, 3, 0, 6, 5, 4, 5] 0
4124 [6, 5, 4, 3, 0, 6, 5, 4] 0
4125 [6, 5, 4, 3, 0, 6, 5, 6] 0
4126 [6, 5, 4, 3, 0, 6, 5] 0
4127 [6, 5, 4, 3, 0, 6, 4] 0
4128 [6, 5, 4, 3, 0, 6] 0
4129 [6, 5, 4, 3, 0, 5, 4, 5] 0
4130 [6, 5, 4, 3, 0, 5, 4] 0
4131 [6, 5, 4, 3, 0, 5] 0
4132 [6, 5, 4, 3, 0, 4] 0
4133 [6, 5, 4, 3, 0] 0
4134 [6, 5, 4, 3, 6, 5, 4, 6, 5, 6] 0
4135 [6, 5, 4, 3, 6, 5, 4, 6, 5] 0
4136 [6, 5, 4, 3, 6, 5, 4, 6] 0
4137 [6, 5, 4, 3, 6, 5, 4, 5] 0
4138 [6, 5, 4, 3, 6, 5, 4] 0
4139 [6, 5, 4, 3, 6, 5, 6] 0
4140 [6, 5, 4, 3, 6, 5] 0
4141 [6, 5, 4, 3, 6, 4] 0
4142 [6, 5, 4, 3, 6] 0
4143 [6, 5, 4, 3, 5, 4, 5] 0
4144 [6, 5, 4, 3, 5, 4] 0
4145 [6, 5, 4, 3, 5] 0
4146 [6, 5, 4, 3, 4] 0
4147 [6, 5, 4, 3] 0
4148 [6, 5, 4, 2, 1, 0, 6, 5, 2, 1, 6, 2] 0
4149 [6, 5, 4, 2, 1, 0, 6, 5, 2, 1, 6] 0
4150 [6, 5, 4, 2, 1, 0, 6, 5, 2, 1, 2] 0
4151 [6, 5, 4, 2, 1, 0, 6, 5, 2, 1] 0
4152 [6, 5, 4, 2, 1, 0, 6, 5, 2, 6] 0
4153 [6, 5, 4, 2, 1, 0, 6, 5, 2] 0
4154 [6, 5, 4, 2, 1, 0, 6, 5, 1, 6] 0
4155 [6, 5, 4, 2, 1, 0, 6, 5, 1] 0
4156 [6, 5, 4, 2, 1, 0, 6, 5, 6] 0
4157 [6, 5, 4, 2, 1, 0, 6, 5] 0
4158 [6, 5, 4, 2, 1, 0, 6, 2, 1, 2] 0
4159 [6, 5, 4, 2, 1, 0, 6, 2, 1] 0
4160 [6, 5, 4, 2, 1, 0, 6, 2] 0
4161 [6, 5, 4, 2, 1, 0, 6, 1] 0
4162 [6, 5, 4, 2, 1, 0, 6] 0
4163 [6, 5, 4, 2, 1, 0, 5, 2, 1, 2] 0
4164 [6, 5, 4, 2, 1, 0, 5, 2, 1] 0
4165 [6, 5, 4, 2, 1, 0, 5, 2] 0
4166 [6, 5, 4, 2, 1, 0, 5, 1] 0
4167 [6, 5, 4, 2, 1, 0, 5] 0
4168 [6, 5, 4, 2, 1, 0, 2, 1, 2] 0
4169 [6, 5, 4, 2, 1, 0, 2, 1] 0
4170 [6, 5, 4, 2, 1, 0, 2] 0
4171 [6, 5, 4, 2, 1, 0, 1] 0
4172 [6, 5, 4, 2, 1, 0] 0
4173 [6, 5, 4, 2, 1, 6, 5, 2, 6] 0
4174 [6, 5, 4, 2, 1, 6, 5, 2] 0
4175 [6, 5, 4, 2, 1, 6, 5, 6] 0
4176 [6, 5, 4, 2, 1, 6, 5] 0
4177 [6, 5, 4, 2, 1, 6, 2] 0
4178 [6, 5, 4, 2, 1, 6] 0
4179 [6, 5, 4, 2, 1, 5, 2] 0
4180 [6, 5, 4, 2, 1, 5] 0
4181 [6, 5, 4, 2, 1, 2] 0
4182 [6, 5, 4, 2, 1] 0
4183 [6, 5, 4, 2, 0, 6, 5, 6] 0
4184 [6, 5, 4, 2, 0, 6, 5] 0
4185 [6, 5, 4, 2, 0, 6] 0
4186 [6, 5, 4, 2, 0, 5] 0
4187 [6, 5, 4, 2, 0] 0
4188 [6, 5, 4, 2, 6, 5, 6] 0
4189 [6, 5, 4, 2, 6, 5] 0
4190 [6, 5, 4, 2, 6] 0
4191 [6, 5, 4, 2, 5] 0
4192 [6, 5, 4, 2] 0
4193 [6, 5, 4, 1, 0, 6, 5, 1, 6] 0
4194 [6, 5, 4, 1, 0, 6, 5, 1] 0
4195 [6, 5, 4, 1, 0, 6, 5, 6] 0
4196 [6, 5, 4, 1, 0, 6, 5] 0
4197 [6, 5, 4, 1, 0, 6, 1] 0
4198 [6, 5, 4, 1, 0, 6] 0
4199 [6, 5, 4, 1, 0, 5, 1] 0
4200 [6, 5, 4, 1, 0, 5] 0
4201 [6, 5, 4, 1, 0, 1] 0
4202 [6, 5, 4, 1, 0] 0
4203 [6, 5, 4, 1, 6, 5, 6] 0
4204 [6, 5, 4, 1, 6, 5] 0
4205 [6, 5, 4, 1, 6] 0
4206 [6, 5, 4, 1, 5] 0
4207 [6, 5, 4, 1] 0
4208 [6, 5, 4, 0, 6, 5, 6] 0
4209 [6, 5, 4, 0, 6, 5] 0
4210 [6, 5, 4, 0, 6] 0
4211 [6, 5, 4, 0, 5] 0
4212 [6, 5, 4, 0] 0
4213 [6, 5, 4, 6, 5, 6] 0
4214 [6, 5, 4, 6, 5] 0
4215 [6, 5, 4, 6] 0
4216 [6, 5, 4, 5] 0
4217 [6, 5, 4] 0
4218 [6, 5, 3, 2, 1, 0, 6, 3, 2, 1, 3, 2, 3] 0
4219 [6, 5, 3, 2, 1, 0, 6, 3, 2, 1, 3, 2] 0
4220 [6, 5, 3, 2, 1, 0, 6, 3, 2, 1, 3] 0
4221 [6, 5, 3, 2, 1, 0, 6, 3, 2, 1, 2] 0
4222 [6, 5, 3, 2, 1, 0, 6, 3, 2, 1] 0
4223 [6, 5, 3, 2, 1, 0, 6, 3, 2, 3] 0
4224 [6, 5, 3, 2, 1, 0, 6, 3, 2] 0
4225 [6, 5, 3, 2, 1, 0, 6, 3, 1] 0
4226 [6, 5, 3, 2, 1, 0, 6, 3] 0
4227 [6, 5, 3, 2, 1, 0, 6, 2, 1, 2] 0
4228 [6, 5, 3, 2, 1, 0, 6, 2, 1] 0
4229 [6, 5, 3, 2, 1, 0, 6, 2] 0
4230 [6, 5, 3, 2, 1, 0, 6, 1] 0
4231 [6, 5, 3, 2, 1, 0, 6] 0
4232 [6, 5, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
4233 [6, 5, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
4234 [6, 5, 3, 2, 1, 0, 3, 2, 1, 3] 0
4235 [6, 5, 3, 2, 1, 0, 3, 2, 1, 2] 0
4236 [6, 5, 3, 2, 1, 0, 3, 2, 1] 0
4237 [6, 5, 3, 2, 1, 0, 3, 2, 3] 0
4238 [6, 5, 3, 2, 1, 0, 3, 2] 0
4239 [6, 5, 3, 2, 1, 0, 3, 1] 0
4240 [6, 5, 3, 2, 1, 0, 3] 0
4241 [6, 5, 3, 2, 1, 0, 2, 1, 2] 0
4242 [6, 5, 3, 2, 1, 0, 2, 1] 0
4243 [6, 5, 3, 2, 1, 0, 2] 0
4244 [6, 5, 3, 2, 1, 0, 1] 0
4245 [6, 5, 3, 2, 1, 0] 0
4246 [6, 5, 3, 2, 1, 6, 3, 2, 3] 0
4247 [6, 5, 3, 2, 1, 6, 3, 2] 0
4248 [6, 5, 3, 2, 1, 6, 3] 0
4249 [6, 5, 3, 2, 1, 6, 2] 0
4250 [6, 5, 3, 2, 1, 6] 0
4251 [6, 5, 3, 2, 1, 3, 2, 3] 0
4252 [6, 5, 3, 2, 1, 3, 2] 0
4253 [6, 5, 3, 2, 1, 3] 0
4254 [6, 5, 3, 2, 1, 2] 0
4255 [6, 5, 3, 2, 1] 0
4256 [6, 5, 3, 2, 0, 6, 3] 0
4257 [6, 5, 3, 2, 0, 6] 0
4258 [6, 5, 3, 2, 0, 3] 0
4259 [6, 5, 3, 2, 0] 0
4260 [6, 5, 3, 2, 6, 3] 0
4261 [6, 5, 3, 2, 6] 0
4262 [6, 5, 3, 2, 3] 0
4263 [6, 5, 3, 2] 0
4264 [6, 5, 3, 1, 0, 6, 1] 0
4265 [6, 5, 3, 1, 0, 6] 0
4266 [6, 5, 3, 1, 0, 1] 0
4267 [6, 5, 3, 1, 0] 0
4268 [6, 5, 3, 1, 6] 0
4269 [6, 5, 3, 1] 0
4270 [6, 5, 3, 0, 6] 0
4271 [6, 5, 3, 0] 0
4272 [6, 5, 3, 6] 0
4273 [6, 5, 3] 0
4274 [6, 5, 2, 1, 0, 6, 2, 1, 2] 0
4275 [6, 5, 2, 1, 0, 6, 2, 1] 0
4276 [6, 5, 2, 1, 0, 6, 2] 0
4277 [6, 5, 2, 1, 0, 6, 1] 0
4278 [6, 5, 2, 1, 0, 6] 0
4279 [6, 5, 2, 1, 0, 2, 1, 2] 0
4280 [6, 5, 2, 1, 0, 2, 1] 0
4281 [6, 5, 2, 1, 0, 2] 0
4282 [6, 5, 2, 1, 0, 1] 0
4283 [6, 5, 2, 1, 0] 0
4284 [6, 5, 2, 1, 6, 2] 0
4285 [6, 5, 2, 1, 6] 0
4286 [6, 5, 2, 1, 2] 0
4287 [6, 5, 2, 1] 0
4288 [6, 5, 2, 0, 6] 0
4289 [6, 5, 2, 0] 0
4290 [6, 5, 2, 6] 0
4291 [6, 5, 2] 0
4292 [6, 5, 1, 0, 6, 1] 0
4293 [6, 5, 1, 0, 6] 0
4294 [6, 5, 1, 0, 1] 0
4295 [6, 5, 1, 0] 0
4296 [6, 5, 1, 6] 0
4297 [6, 5, 1] 0
4298 [6, 5, 0, 6] 0
4299 [6, 5, 0] 0
4300 [6, 5, 6] 0
4301 [6, 5] 0
4302 [6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
4303 [6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
4304 [6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4] 0
4305 [6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 3] 0
4306 [6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2] 0
4307 [6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 4] 0
4308 [6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3] 0
4309 [6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 2] 0
4310 [6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4] 0
4311 [6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2, 3] 0
4312 [6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2] 0
4313 [6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3] 0
4314 [6, 4, 3, 2, 1, 0, 4, 3, 2, 1, 2] 0
4315 [6, 4, 3, 2, 1, 0, 4, 3, 2, 1] 0
4316 [6, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3, 4] 0
4317 [6, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3] 0
4318 [6, 4, 3, 2, 1, 0, 4, 3, 2, 4] 0
4319 [6, 4, 3, 2, 1, 0, 4, 3, 2, 3] 0
4320 [6, 4, 3, 2, 1, 0, 4, 3, 2] 0
4321 [6, 4, 3, 2, 1, 0, 4, 3, 1, 4] 0
4322 [6, 4, 3, 2, 1, 0, 4, 3, 1] 0
4323 [6, 4, 3, 2, 1, 0, 4, 3, 4] 0
4324 [6, 4, 3, 2, 1, 0, 4, 3] 0
4325 [6, 4, 3, 2, 1, 0, 4, 2, 1, 2] 0
4326 [6, 4, 3, 2, 1, 0, 4, 2, 1] 0
4327 [6, 4, 3, 2, 1, 0, 4, 2] 0
4328 [6, 4, 3, 2, 1, 0, 4, 1] 0
4329 [6, 4, 3, 2, 1, 0, 4] 0
4330 [6, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
4331 [6, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
4332 [6, 4, 3, 2, 1, 0, 3, 2, 1, 3] 0
4333 [6, 4, 3, 2, 1, 0, 3, 2, 1, 2] 0
4334 [6, 4, 3, 2, 1, 0, 3, 2, 1] 0
4335 [6, 4, 3, 2, 1, 0, 3, 2, 3] 0
4336 [6, 4, 3, 2, 1, 0, 3, 2] 0
4337 [6, 4, 3, 2, 1, 0, 3, 1] 0
4338 [6, 4, 3, 2, 1, 0, 3] 0
4339 [6, 4, 3, 2, 1, 0, 2, 1, 2] 0
4340 [6, 4, 3, 2, 1, 0, 2, 1] 0
4341 [6, 4, 3, 2, 1, 0, 2] 0
4342 [6, 4, 3, 2, 1, 0, 1] 0
4343 [6, 4, 3, 2, 1, 0] 0
4344 [6, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
4345 [6, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
4346 [6, 4, 3, 2, 1, 4, 3, 2, 4] 0
4347 [6, 4, 3, 2, 1, 4, 3, 2, 3] 0
4348 [6, 4, 3, 2, 1, 4, 3, 2] 0
4349 [6, 4, 3, 2, 1, 4, 3, 4] 0
4350 [6, 4, 3, 2, 1, 4, 3] 0
4351 [6, 4, 3, 2, 1, 4, 2] 0
4352 [6, 4, 3, 2, 1, 4] 0
4353 [6, 4, 3, 2, 1, 3, 2, 3] 0
4354 [6, 4, 3, 2, 1, 3, 2] 0
4355 [6, 4, 3, 2, 1, 3] 0
4356 [6, 4, 3, 2, 1, 2] 0
4357 [6, 4, 3, 2, 1] 0
4358 [6, 4, 3, 2, 0, 4, 3, 4] 0
4359 [6, 4, 3, 2, 0, 4, 3] 0
4360 [6, 4, 3, 2, 0, 4] 0
4361 [6, 4, 3, 2, 0, 3] 0
4362 [6, 4, 3, 2, 0] 0
4363 [6, 4, 3, 2, 4, 3, 4] 0
4364 [6, 4, 3, 2, 4, 3] 0
4365 [6, 4, 3, 2, 4] 0
4366 [6, 4, 3, 2, 3] 0
4367 [6, 4, 3, 2] 0
4368 [6, 4, 3, 1, 0, 4, 1] 0
4369 [6, 4, 3, 1, 0, 4] 0
4370 [6, 4, 3, 1, 0, 1] 0
4371 [6, 4, 3, 1, 0] 0
4372 [6, 4, 3, 1, 4] 0
4373 [6, 4, 3, 1] 0
4374 [6, 4, 3, 0, 4] 0
4375 [6, 4, 3, 0] 0
4376 [6, 4, 3, 4] 0
4377 [6, 4, 3] 0
4378 [6, 4, 2, 1, 0, 2, 1, 2] 0
4379 [6, 4, 2, 1, 0, 2, 1] 0
4380 [6, 4, 2, 1, 0, 2] 0
4381 [6, 4, 2, 1, 0, 1] 0
4382 [6, 4, 2, 1, 0] 0
4383 [6, 4, 2, 1, 2] 0
4384 [6, 4, 2, 1] 0
4385 [6, 4, 2, 0] 0
4386 [6, 4, 2] 0
4387 [6, 4, 1, 0, 1] 0
4388 [6, 4, 1, 0] 0
4389 [6, 4, 1] 0
4390 [6, 4, 0] 0
4391 [6, 4] 0
4392 [6, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
4393 [6, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
4394 [6, 3, 2, 1, 0, 3, 2, 1, 3] 0
4395 [6, 3, 2, 1, 0, 3, 2, 1, 2] 0
4396 [6, 3, 2, 1, 0, 3, 2, 1] 0
4397 [6, 3, 2, 1, 0, 3, 2, 3] 0
4398 [6, 3, 2, 1, 0, 3, 2] 0
4399 [6, 3, 2, 1, 0, 3, 1] 0
4400 [6, 3, 2, 1, 0, 3] 0
4401 [6, 3, 2, 1, 0, 2, 1, 2] 0
4402 [6, 3, 2, 1, 0, 2, 1] 0
4403 [6, 3, 2, 1, 0, 2] 0
4404 [6, 3, 2, 1, 0, 1] 0
4405 [6, 3, 2, 1, 0] 0
4406 [6, 3, 2, 1, 3, 2, 3] 0
4407 [6, 3, 2, 1, 3, 2] 0
4408 [6, 3, 2, 1, 3] 0
4409 [6, 3, 2, 1, 2] 0
4410 [6, 3, 2, 1] 0
4411 [6, 3, 2, 0, 3] 0
4412 [6, 3, 2, 0] 0
4413 [6, 3, 2, 3] 0
4414 [6, 3, 2] 0
4415 [6, 3, 1, 0, 1] 0
4416 [6, 3, 1, 0] 0
4417 [6, 3, 1] 0
4418 [6, 3, 0] 0
4419 [6, 3] 0
4420 [6, 2, 1, 0, 2, 1, 2] 0
4421 [6, 2, 1, 0, 2, 1] 0
4422 [6, 2, 1, 0, 2] 0
4423 [6, 2, 1, 0, 1] 0
4424 [6, 2, 1, 0] 0
4425 [6, 2, 1, 2] 0
4426 [6, 2, 1] 0
4427 [6, 2, 0] 0
4428 [6, 2] 0
4429 [6, 1, 0, 1] 0
4430 [6, 1, 0] 0
4431 [6, 1] 0
4432 [6, 0] 0
4433 [6] 0
4434 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
4435 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
4436 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] 0
4437 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] 0
4438 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] 0
4439 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] 0
4440 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] 0
4441 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] 0
4442 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5] 0
4443 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] 0
4444 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] 0
4445 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4] 0
4446 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 3] 0
4447 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2] 0
4448 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] 0
4449 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4] 0
4450 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5] 0
4451 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 4] 0
4452 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3] 0
4453 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2, 5] 0
4454 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2] 0
4455 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 5] 0
4456 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4] 0
4457 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2, 3] 0
4458 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2] 0
4459 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3] 0
4460 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 2] 0
4461 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5] 0
4462 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
4463 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
4464 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4] 0
4465 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 3] 0
4466 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2] 0
4467 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 4] 0
4468 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3] 0
4469 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 2] 0
4470 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4] 0
4471 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2, 3] 0
4472 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2] 0
4473 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3] 0
4474 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 2] 0
4475 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1] 0
4476 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
4477 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
4478 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5] 0
4479 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 4] 0
4480 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3] 0
4481 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 5] 0
4482 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4] 0
4483 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 3] 0
4484 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5] 0
4485 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4, 3, 4] 0
4486 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4, 3] 0
4487 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4] 0
4488 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 3] 0
4489 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2] 0
4490 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5, 4, 5] 0
4491 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5, 4] 0
4492 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5] 0
4493 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 4] 0
4494 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1] 0
4495 [5, 4, 3, 2, 1, 0, 5, 4, 3, 5, 4, 5] 0
4496 [5, 4, 3, 2, 1, 0, 5, 4, 3, 5, 4] 0
4497 [5, 4, 3, 2, 1, 0, 5, 4, 3, 5] 0
4498 [5, 4, 3, 2, 1, 0, 5, 4, 3, 4] 0
4499 [5, 4, 3, 2, 1, 0, 5, 4, 3] 0
4500 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 5, 2] 0
4501 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 5] 0
4502 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 2] 0
4503 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1] 0
4504 [5, 4, 3, 2, 1, 0, 5, 4, 2, 5] 0
4505 [5, 4, 3, 2, 1, 0, 5, 4, 2] 0
4506 [5, 4, 3, 2, 1, 0, 5, 4, 1, 5] 0
4507 [5, 4, 3, 2, 1, 0, 5, 4, 1] 0
4508 [5, 4, 3, 2, 1, 0, 5, 4, 5] 0
4509 [5, 4, 3, 2, 1, 0, 5, 4] 0
4510 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3, 2, 3] 0
4511 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3, 2] 0
4512 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3] 0
4513 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 2] 0
4514 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1] 0
4515 [5, 4, 3, 2, 1, 0, 5, 3, 2, 3] 0
4516 [5, 4, 3, 2, 1, 0, 5, 3, 2] 0
4517 [5, 4, 3, 2, 1, 0, 5, 3, 1] 0
4518 [5, 4, 3, 2, 1, 0, 5, 3] 0
4519 [5, 4, 3, 2, 1, 0, 5, 2, 1, 2] 0
4520 [5, 4, 3, 2, 1, 0, 5, 2, 1] 0
4521 [5, 4, 3, 2, 1, 0, 5, 2] 0
4522 [5, 4, 3, 2, 1, 0, 5, 1] 0
4523 [5, 4, 3, 2, 1, 0, 5] 0
4524 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
4525 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
4526 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4] 0
4527 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 3] 0
4528 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2] 0
4529 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 4] 0
4530 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3] 0
4531 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 2] 0
4532 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4] 0
4533 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2, 3] 0
4534 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2] 0
4535 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3] 0
4536 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 2] 0
4537 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1] 0
4538 [5, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3, 4] 0
4539 [5, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3] 0
4540 [5, 4, 3, 2, 1, 0, 4, 3, 2, 4] 0
4541 [5, 4, 3, 2, 1, 0, 4, 3, 2, 3] 0
4542 [5, 4, 3, 2, 1, 0, 4, 3, 2] 0
4543 [5, 4, 3, 2, 1, 0, 4, 3, 1, 4] 0
4544 [5, 4, 3, 2, 1, 0, 4, 3, 1] 0
4545 [5, 4, 3, 2, 1, 0, 4, 3, 4] 0
4546 [5, 4, 3, 2, 1, 0, 4, 3] 0
4547 [5, 4, 3, 2, 1, 0, 4, 2, 1, 2] 0
4548 [5, 4, 3, 2, 1, 0, 4, 2, 1] 0
4549 [5, 4, 3, 2, 1, 0, 4, 2] 0
4550 [5, 4, 3, 2, 1, 0, 4, 1] 0
4551 [5, 4, 3, 2, 1, 0, 4] 0
4552 [5, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
4553 [5, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
4554 [5, 4, 3, 2, 1, 0, 3, 2, 1, 3] 0
4555 [5, 4, 3, 2, 1, 0, 3, 2, 1, 2] 0
4556 [5, 4, 3, 2, 1, 0, 3, 2, 1] 0
4557 [5, 4, 3, 2, 1, 0, 3, 2, 3] 0
4558 [5, 4, 3, 2, 1, 0, 3, 2] 0
4559 [5, 4, 3, 2, 1, 0, 3, 1] 0
4560 [5, 4, 3, 2, 1, 0, 3] 0
4561 [5, 4, 3, 2, 1, 0, 2, 1, 2] 0
4562 [5, 4, 3, 2, 1, 0, 2, 1] 0
4563 [5, 4, 3, 2, 1, 0, 2] 0
4564 [5, 4, 3, 2, 1, 0, 1] 0
4565 [5, 4, 3, 2, 1, 0] 0
4566 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
4567 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
4568 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] 0
4569 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] 0
4570 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] 0
4571 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] 0
4572 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] 0
4573 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] 0
4574 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5] 0
4575 [5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] 0
4576 [5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] 0
4577 [5, 4, 3, 2, 1, 5, 4, 3, 2, 4] 0
4578 [5, 4, 3, 2, 1, 5, 4, 3, 2, 3] 0
4579 [5, 4, 3, 2, 1, 5, 4, 3, 2] 0
4580 [5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] 0
4581 [5, 4, 3, 2, 1, 5, 4, 3, 5, 4] 0
4582 [5, 4, 3, 2, 1, 5, 4, 3, 5] 0
4583 [5, 4, 3, 2, 1, 5, 4, 3, 4] 0
4584 [5, 4, 3, 2, 1, 5, 4, 3] 0
4585 [5, 4, 3, 2, 1, 5, 4, 2, 5] 0
4586 [5, 4, 3, 2, 1, 5, 4, 2] 0
4587 [5, 4, 3, 2, 1, 5, 4, 5] 0
4588 [5, 4, 3, 2, 1, 5, 4] 0
4589 [5, 4, 3, 2, 1, 5, 3, 2, 3] 0
4590 [5, 4, 3, 2, 1, 5, 3, 2] 0
4591 [5, 4, 3, 2, 1, 5, 3] 0
4592 [5, 4, 3, 2, 1, 5, 2] 0
4593 [5, 4, 3, 2, 1, 5] 0
4594 [5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
4595 [5, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
4596 [5, 4, 3, 2, 1, 4, 3, 2, 4] 0
4597 [5, 4, 3, 2, 1, 4, 3, 2, 3] 0
4598 [5, 4, 3, 2, 1, 4, 3, 2] 0
4599 [5, 4, 3, 2, 1, 4, 3, 4] 0
4600 [5, 4, 3, 2, 1, 4, 3] 0
4601 [5, 4, 3, 2, 1, 4, 2] 0
4602 [5, 4, 3, 2, 1, 4] 0
4603 [5, 4, 3, 2, 1, 3, 2, 3] 0
4604 [5, 4, 3, 2, 1, 3, 2] 0
4605 [5, 4, 3, 2, 1, 3] 0
4606 [5, 4, 3, 2, 1, 2] 0
4607 [5, 4, 3, 2, 1] 0
4608 [5, 4, 3, 2, 0, 5, 4, 3, 5, 4, 5] 0
4609 [5, 4, 3, 2, 0, 5, 4, 3, 5, 4] 0
4610 [5, 4, 3, 2, 0, 5, 4, 3, 5] 0
4611 [5, 4, 3, 2, 0, 5, 4, 3, 4] 0
4612 [5, 4, 3, 2, 0, 5, 4, 3] 0
4613 [5, 4, 3, 2, 0, 5, 4, 5] 0
4614 [5, 4, 3, 2, 0, 5, 4] 0
4615 [5, 4, 3, 2, 0, 5, 3] 0
4616 [5, 4, 3, 2, 0, 5] 0
4617 [5, 4, 3, 2, 0, 4, 3, 4] 0
4618 [5, 4, 3, 2, 0, 4, 3] 0
4619 [5, 4, 3, 2, 0, 4] 0
4620 [5, 4, 3, 2, 0, 3] 0
4621 [5, 4, 3, 2, 0] 0
4622 [5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
4623 [5, 4, 3, 2, 5, 4, 3, 5, 4] 0
4624 [5, 4, 3, 2, 5, 4, 3, 5] 0
4625 [5, 4, 3, 2, 5, 4, 3, 4] 0
4626 [5, 4, 3, 2, 5, 4, 3] 0
4627 [5, 4, 3, 2, 5, 4, 5] 0
4628 [5, 4, 3, 2, 5, 4] 0
4629 [5, 4, 3, 2, 5, 3] 0
4630 [5, 4, 3, 2, 5] 0
4631 [5, 4, 3, 2, 4, 3, 4] 0
4632 [5, 4, 3, 2, 4, 3] 0
4633 [5, 4, 3, 2, 4] 0
4634 [5, 4, 3, 2, 3] 0
4635 [5, 4, 3, 2] 0
4636 [5, 4, 3, 1, 0, 5, 4, 1, 5] 0
4637 [5, 4, 3, 1, 0, 5, 4, 1] 0
4638 [5, 4, 3, 1, 0, 5, 4, 5] 0
4639 [5, 4, 3, 1, 0, 5, 4] 0
4640 [5, 4, 3, 1, 0, 5, 1] 0
4641 [5, 4, 3, 1, 0, 5] 0
4642 [5, 4, 3, 1, 0, 4, 1] 0
4643 [5, 4, 3, 1, 0, 4] 0
4644 [5, 4, 3, 1, 0, 1] 0
4645 [5, 4, 3, 1, 0] 0
4646 [5, 4, 3, 1, 5, 4, 5] 0
4647 [5, 4, 3, 1, 5, 4] 0
4648 [5, 4, 3, 1, 5] 0
4649 [5, 4, 3, 1, 4] 0
4650 [5, 4, 3, 1] 0
4651 [5, 4, 3, 0, 5, 4, 5] 0
4652 [5, 4, 3, 0, 5, 4] 0
4653 [5, 4, 3, 0, 5] 0
4654 [5, 4, 3, 0, 4] 0
4655 [5, 4, 3, 0] 0
4656 [5, 4, 3, 5, 4, 5] 0
4657 [5, 4, 3, 5, 4] 0
4658 [5, 4, 3, 5] 0
4659 [5, 4, 3, 4] 0
4660 [5, 4, 3] 0
4661 [5, 4, 2, 1, 0, 5, 2, 1, 2] 0
4662 [5, 4, 2, 1, 0, 5, 2, 1] 0
4663 [5, 4, 2, 1, 0, 5, 2] 0
4664 [5, 4, 2, 1, 0, 5, 1] 0
4665 [5, 4, 2, 1, 0, 5] 0
4666 [5, 4, 2, 1, 0, 2, 1, 2] 0
4667 [5, 4, 2, 1, 0, 2, 1] 0
4668 [5, 4, 2, 1, 0, 2] 0
4669 [5, 4, 2, 1, 0, 1] 0
4670 [5, 4, 2, 1, 0] 0
4671 [5, 4, 2, 1, 5, 2] 0
4672 [5, 4, 2, 1, 5] 0
4673 [5, 4, 2, 1, 2] 0
4674 [5, 4, 2, 1] 0
4675 [5, 4, 2, 0, 5] 0
4676 [5, 4, 2, 0] 0
4677 [5, 4, 2, 5] 0
4678 [5, 4, 2] 0
4679 [5, 4, 1, 0, 5, 1] 0
4680 [5, 4, 1, 0, 5] 0
4681 [5, 4, 1, 0, 1] 0
4682 [5, 4, 1, 0] 0
4683 [5, 4, 1, 5] 0
4684 [5, 4, 1] 0
4685 [5, 4, 0, 5] 0
4686 [5, 4, 0] 0
4687 [5, 4, 5] 0
4688 [5, 4] 0
4689 [5, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
4690 [5, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
4691 [5, 3, 2, 1, 0, 3, 2, 1, 3] 0
4692 [5, 3, 2, 1, 0, 3, 2, 1, 2] 0
4693 [5, 3, 2, 1, 0, 3, 2, 1] 0
4694 [5, 3, 2, 1, 0, 3, 2, 3] 0
4695 [5, 3, 2, 1, 0, 3, 2] 0
4696 [5, 3, 2, 1, 0, 3, 1] 0
4697 [5, 3, 2, 1, 0, 3] 0
4698 [5, 3, 2, 1, 0, 2, 1, 2] 0
4699 [5, 3, 2, 1, 0, 2, 1] 0
4700 [5, 3, 2, 1, 0, 2] 0
4701 [5, 3, 2, 1, 0, 1] 0
4702 [5, 3, 2, 1, 0] 0
4703 [5, 3, 2, 1, 3, 2, 3] 0
4704 [5, 3, 2, 1, 3, 2] 0
4705 [5, 3, 2, 1, 3] 0
4706 [5, 3, 2, 1, 2] 0
4707 [5, 3, 2, 1] 0
4708 [5, 3, 2, 0, 3] 0
4709 [5, 3, 2, 0] 0
4710 [5, 3, 2, 3] 0
4711 [5, 3, 2] 0
4712 [5, 3, 1, 0, 1] 0
4713 [5, 3, 1, 0] 0
4714 [5, 3, 1] 0
4715 [5, 3, 0] 0
4716 [5, 3] 0
4717 [5, 2, 1, 0, 2, 1, 2] 0
4718 [5, 2, 1, 0, 2, 1] 0
4719 [5, 2, 1, 0, 2] 0
4720 [5, 2, 1, 0, 1] 0
4721 [5, 2, 1, 0] 0
4722 [5, 2, 1, 2] 0
4723 [5, 2, 1] 0
4724 [5, 2, 0] 0
4725 [5, 2] 0
4726 [5, 1, 0, 1] 0
4727 [5, 1, 0] 0
4728 [5, 1] 0
4729 [5, 0] 0
4730 [5] 0
4731 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
4732 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
4733 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4] 0
4734 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 3] 0
4735 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2] 0
4736 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 4] 0
4737 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3] 0
4738 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 2] 0
4739 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4] 0
4740 [4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2, 3] 0
4741 [4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2] 0
4742 [4, 3, 2, 1, 0, 4, 3, 2, 1, 3] 0
4743 [4, 3, 2, 1, 0, 4, 3, 2, 1, 2] 0
4744 [4, 3, 2, 1, 0, 4, 3, 2, 1] 0
4745 [4, 3, 2, 1, 0, 4, 3, 2, 4, 3, 4] 0
4746 [4, 3, 2, 1, 0, 4, 3, 2, 4, 3] 0
4747 [4, 3, 2, 1, 0, 4, 3, 2, 4] 0
4748 [4, 3, 2, 1, 0, 4, 3, 2, 3] 0
4749 [4, 3, 2, 1, 0, 4, 3, 2] 0
4750 [4, 3, 2, 1, 0, 4, 3, 1, 4] 0
4751 [4, 3, 2, 1, 0, 4, 3, 1] 0
4752 [4, 3, 2, 1, 0, 4, 3, 4] 0
4753 [4, 3, 2, 1, 0, 4, 3] 0
4754 [4, 3, 2, 1, 0, 4, 2, 1, 2] 0
4755 [4, 3, 2, 1, 0, 4, 2, 1] 0
4756 [4, 3, 2, 1, 0, 4, 2] 0
4757 [4, 3, 2, 1, 0, 4, 1] 0
4758 [4, 3, 2, 1, 0, 4] 0
4759 [4, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
4760 [4, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
4761 [4, 3, 2, 1, 0, 3, 2, 1, 3] 0
4762 [4, 3, 2, 1, 0, 3, 2, 1, 2] 0
4763 [4, 3, 2, 1, 0, 3, 2, 1] 0
4764 [4, 3, 2, 1, 0, 3, 2, 3] 0
4765 [4, 3, 2, 1, 0, 3, 2] 0
4766 [4, 3, 2, 1, 0, 3, 1] 0
4767 [4, 3, 2, 1, 0, 3] 0
4768 [4, 3, 2, 1, 0, 2, 1, 2] 0
4769 [4, 3, 2, 1, 0, 2, 1] 0
4770 [4, 3, 2, 1, 0, 2] 0
4771 [4, 3, 2, 1, 0, 1] 0
4772 [4, 3, 2, 1, 0] 0
4773 [4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
4774 [4, 3, 2, 1, 4, 3, 2, 4, 3] 0
4775 [4, 3, 2, 1, 4, 3, 2, 4] 0
4776 [4, 3, 2, 1, 4, 3, 2, 3] 0
4777 [4, 3, 2, 1, 4, 3, 2] 0
4778 [4, 3, 2, 1, 4, 3, 4] 0
4779 [4, 3, 2, 1, 4, 3] 0
4780 [4, 3, 2, 1, 4, 2] 0
4781 [4, 3, 2, 1, 4] 0
4782 [4, 3, 2, 1, 3, 2, 3] 0
4783 [4, 3, 2, 1, 3, 2] 0
4784 [4, 3, 2, 1, 3] 0
4785 [4, 3, 2, 1, 2] 0
4786 [4, 3, 2, 1] 0
4787 [4, 3, 2, 0, 4, 3, 4] 0
4788 [4, 3, 2, 0, 4, 3] 0
4789 [4, 3, 2, 0, 4] 0
4790 [4, 3, 2, 0, 3] 0
4791 [4, 3, 2, 0] 0
4792 [4, 3, 2, 4, 3, 4] 0
4793 [4, 3, 2, 4, 3] 0
4794 [4, 3, 2, 4] 0
4795 [4, 3, 2, 3] 0
4796 [4, 3, 2] 0
4797 [4, 3, 1, 0, 4, 1] 0
4798 [4, 3, 1, 0, 4] 0
4799 [4, 3, 1, 0, 1] 0
4800 [4, 3, 1, 0] 0
4801 [4, 3, 1, 4] 0
4802 [4, 3, 1] 0
4803 [4, 3, 0, 4] 0
4804 [4, 3, 0] 0
4805 [4, 3, 4] 0
4806 [4, 3] 0
4807 [4, 2, 1, 0, 2, 1, 2] 0
4808 [4, 2, 1, 0, 2, 1] 0
4809 [4, 2, 1, 0, 2] 0
4810 [4, 2, 1, 0, 1] 0
4811 [4, 2, 1, 0] 0
4812 [4, 2, 1, 2] 0
4813 [4, 2, 1] 0
4814 [4, 2, 0] 0
4815 [4, 2] 0
4816 [4, 1, 0, 1] 0
4817 [4, 1, 0] 0
4818 [4, 1] 0
4819 [4, 0] 0
4820 [4] 0
4821 [3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
4822 [3, 2, 1, 0, 3, 2, 1, 3, 2] 0
4823 [3, 2, 1, 0, 3, 2, 1, 3] 0
4824 [3, 2, 1, 0, 3, 2, 1, 2] 0
4825 [3, 2, 1, 0, 3, 2, 1] 0
4826 [3, 2, 1, 0, 3, 2, 3] 0
4827 [3, 2, 1, 0, 3, 2] 0
4828 [3, 2, 1, 0, 3, 1] 0
4829 [3, 2, 1, 0, 3] 0
4830 [3, 2, 1, 0, 2, 1, 2] 0
4831 [3, 2, 1, 0, 2, 1] 0
4832 [3, 2, 1, 0, 2] 0
4833 [3, 2, 1, 0, 1] 0
4834 [3, 2, 1, 0] 0
4835 [3, 2, 1, 3, 2, 3] 0
4836 [3, 2, 1, 3, 2] 0
4837 [3, 2, 1, 3] 0
4838 [3, 2, 1, 2] 0
4839 [3, 2, 1] 0
4840 [3, 2, 0, 3] 0
4841 [3, 2, 0] 0
4842 [3, 2, 3] 0
4843 [3, 2] 0
4844 [3, 1, 0, 1] 0
4845 [3, 1, 0] 0
4846 [3, 1] 0
4847 [3, 0] 0
4848 [3] 0
4849 [2, 1, 0, 2, 1, 2] 0
4850 [2, 1, 0, 2, 1] 0
4851 [2, 1, 0, 2] 0
4852 [2, 1, 0, 1] 0
4853 [2, 1, 0] 0
4854 [2, 1, 2] 0
4855 [2, 1] 0
4856 [2, 0] 0
4857 [2] 0
4858 [1, 0, 1] 0
4859 [1, 0] 0
4860 [1] 0
4861 [0] 0
4862 [] 0
### reloading attached file domination5.py modified at 13:18:45 ###
### reloading attached file domination5.py modified at 13:19:09 ###
sage: A=CartanMatrix(['C',9])
....: c=[8,7,6,5,4,3,2,1,0]
....: B(A,c).corank()
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
Cell In [570], line 3
      1 A=CartanMatrix(['C',Integer(9)])
      2 c=[Integer(8),Integer(7),Integer(6),Integer(5),Integer(4),Integer(3),Integer(2),Integer(1),Integer(0)]
----> 3 B(A,c).corank()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:489, in sage.structure.element.Element.__getattr__ (build/cythonized/sage/structure/element.c:11576)()
    487         AttributeError: 'LeftZeroSemigroup_with_category.element_class' object has no attribute 'blah_blah'...
    488     """
--> 489     return self.getattr_from_category(name)
    490 
    491 cdef getattr_from_category(self, name) noexcept:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:502, in sage.structure.element.Element.getattr_from_category (build/cythonized/sage/structure/element.c:11686)()
    500     else:
    501         cls = P._abstract_element_class
--> 502     return getattr_from_other_class(self, cls, name)
    503 
    504 def __dir__(self):

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/cpython/getattr.pyx:362, in sage.cpython.getattr.getattr_from_other_class (build/cythonized/sage/cpython/getattr.c:4424)()
    360     dummy_error_message.cls = type(self)
    361     dummy_error_message.name = name
--> 362     raise AttributeError(dummy_error_message)
    363 attribute = <object>attr
    364 # Check for a descriptor (__get__ in Python)

AttributeError: 'sage.matrix.matrix_integer_dense.Matrix_integer_dense' object has no attribute 'corank'
sage: A=CartanMatrix(['C',9])
....: c=[8,7,6,5,4,3,2,1,0]
....: B(A,c).rank()
8
sage: A=CartanMatrix(['D',9])
....: c=[8,7,6,5,4,3,2,1,0]
....: B(A,c).rank()
8
sage: A=CartanMatrix(['D',8])
....: c=[7,6,5,4,3,2,1,0]
....: B(A,c).rank()
6
sage: A=CartanMatrix(['D',8])
....: c=[7,6,5,4,3,2,1,0]
....: B(A,c)
[ 0 -1  0  0  0  0  0  0]
[ 1  0 -1  0  0  0  0  0]
[ 0  1  0 -1  0  0  0  0]
[ 0  0  1  0 -1  0  0  0]
[ 0  0  0  1  0 -1  0  0]
[ 0  0  0  0  1  0 -1 -1]
[ 0  0  0  0  0  1  0  0]
[ 0  0  0  0  0  1  0  0]
sage: A=CartanMatrix(['D',7])
....: c=[6,5,4,3,2,1,0]
....: B(A,c)
[ 0 -1  0  0  0  0  0]
[ 1  0 -1  0  0  0  0]
[ 0  1  0 -1  0  0  0]
[ 0  0  1  0 -1  0  0]
[ 0  0  0  1  0 -1 -1]
[ 0  0  0  0  1  0  0]
[ 0  0  0  0  1  0  0]
sage: 

 
