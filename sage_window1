Last login: Fri Oct  4 15:38:36 on ttys003

The default interactive shell is now zsh.
To update your account to use zsh, please run `chsh -s /bin/zsh`.
For more details, please visit https://support.apple.com/kb/HT208050.
clear ; /Applications/SageMath-10-2.app/Contents/Frameworks/Sage.framework/Versions/Current/venv/bin/sage ; exit
MA-C02K804RDR53:~ reading$ clear ; /Applications/SageMath-10-2.app/Contents/Frameworks/Sage.framework/Versions/Current/venv/bin/sage ; exit















attach┌────────────────────────────────────────────────────────────────────┐
│ SageMath version 10.2, Release Date: 2023-12-03                    │
│ Using Python 3.11.1. Type "help()" for help.                       │
└────────────────────────────────────────────────────────────────────┘
sage: attachh '/Users/reading/git/affine_dominance/software/domination4.py'
  Cell In [1], line 1
    attachh '/Users/reading/git/affine_dominance/software/domination4.py'
            ^
SyntaxError: invalid syntax

sage: attach '/Users/reading/git/affine_dominance/software/domination4.py'
  Cell In [2], line 1
    attach '/Users/reading/git/affine_dominance/software/domination4.py'
           ^
SyntaxError: invalid syntax

sage: attach "/Users/reading/git/affine_dominance/software/domination4.py"
  Cell In [3], line 1
    attach "/Users/reading/git/affine_dominance/software/domination4.py"
           ^
SyntaxError: invalid syntax

sage: attach('/Users/reading/git/affine_dominance/software/domination4.py')
sage: A=CartanMatrix(['E',7])
....: c=[0,1,2,3,4,5,6]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),K(c,v)).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
....: 
1 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6] 0
2 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5] 0
3 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4] 0
4 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3] 0
5 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2] 0
6 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1] 0
7 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2] 0
8 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6] 0
9 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5] 0
10 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4] 0
11 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3] 0
12 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2] 0
13 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1] 0
14 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2] 0
15 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5] 0
16 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 4] 0
17 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3] 0
18 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2] 0
19 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1] 0
20 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 2] 0
21 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4] 0
22 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 1, 2, 3] 0
23 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 1, 2] 0
24 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 1] 0
25 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 2] 0
26 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3] 0
27 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2] 0
28 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3, 1] 0
29 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3] 0
30 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1] 0
31 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 2] 0
32 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3] 0
33 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2] 0
34 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3] 0
35 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6] 0
36 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5] 0
37 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4] 0
38 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3] 0
39 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2] 0
40 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1] 0
41 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2] 0
42 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5] 0
43 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 4] 0
44 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] 0
45 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] 0
46 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1] 0
47 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2] 0
48 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4] 0
49 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 3] 0
50 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2] 0
51 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1] 0
52 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 2] 0
53 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3] 0
54 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2] 0
55 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 3, 1] 0
56 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 3] 0
57 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1] 0
58 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 2] 0
59 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3] 0
60 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2] 0
61 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 3] 0
62 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5] 0
63 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
64 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
65 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
66 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 4, 1] 0
67 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 4, 2] 0
68 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 4] 0
69 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 1, 2, 3] 0
70 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
71 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 1] 0
72 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 2] 0
73 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3] 0
74 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2] 0
75 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 3, 1] 0
76 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 3] 0
77 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1] 0
78 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 2, 3, 2] 0
79 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 2, 3] 0
80 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 2] 0
81 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 3] 0
82 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4] 0
83 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 1, 2, 3] 0
84 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 1, 2] 0
85 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 1] 0
86 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 2] 0
87 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3] 0
88 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 4] 0
89 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2] 0
90 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3, 4, 1, 3, 1] 0
91 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3, 4, 1, 3] 0
92 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3, 4, 1] 0
93 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3, 4, 3] 0
94 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3, 4] 0
95 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3, 1] 0
96 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3] 0
97 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 4] 0
98 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1] 0
99 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3, 2] 0
100 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3] 0
101 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 2] 0
102 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 3] 0
103 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4] 0
104 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 2] 0
105 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3] 0
106 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 4] 0
107 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2] 0
108 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3, 4, 3] 0
109 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3, 4] 0
110 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3] 0
111 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 4] 0
112 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6] 0
113 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5] 0
114 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4] 0
115 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3] 0
116 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2] 0
117 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1] 0
118 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2] 0
119 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5] 0
120 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 4] 0
121 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] 0
122 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] 0
123 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1] 0
124 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2] 0
125 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4] 0
126 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 3] 0
127 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2] 0
128 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1] 0
129 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 2] 0
130 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3] 0
131 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2] 0
132 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 3, 1] 0
133 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 3] 0
134 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1] 0
135 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 2] 0
136 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3] 0
137 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2] 0
138 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 3] 0
139 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5] 0
140 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
141 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
142 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
143 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 4, 1] 0
144 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 4, 2] 0
145 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 4] 0
146 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2, 3] 0
147 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
148 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1] 0
149 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 2] 0
150 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] 0
151 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] 0
152 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 3, 1] 0
153 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 3] 0
154 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1] 0
155 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3, 2] 0
156 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3] 0
157 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2] 0
158 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 3] 0
159 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4] 0
160 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 3] 0
161 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2] 0
162 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1] 0
163 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 2] 0
164 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3] 0
165 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 4] 0
166 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2] 0
167 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 3, 4, 1, 3, 1] 0
168 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 3, 4, 1, 3] 0
169 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 3, 4, 1] 0
170 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 3, 4, 3] 0
171 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 3, 4] 0
172 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 3, 1] 0
173 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 3] 0
174 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 4] 0
175 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1] 0
176 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 4, 2, 3, 2] 0
177 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 4, 2, 3] 0
178 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 4, 2] 0
179 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 4, 3] 0
180 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 4] 0
181 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 2] 0
182 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3] 0
183 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 4] 0
184 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2] 0
185 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 3, 4, 3] 0
186 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 3, 4] 0
187 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 3] 0
188 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 4] 0
189 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5] 0
190 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
191 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
192 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
193 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 4, 1] 0
194 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 4, 2] 0
195 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 4] 0
196 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 1, 2, 3] 0
197 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
198 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 1] 0
199 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 2] 0
200 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3] 0
201 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2] 0
202 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 3, 1] 0
203 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 3] 0
204 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1] 0
205 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 2, 3, 2] 0
206 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 2, 3] 0
207 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 2] 0
208 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 3] 0
209 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4] 0
210 [1, 2, 3, 4, 5, 6, 1, 2, 3, 5, 1, 2, 3] 0
211 [1, 2, 3, 4, 5, 6, 1, 2, 3, 5, 1, 2] 0
212 [1, 2, 3, 4, 5, 6, 1, 2, 3, 5, 1] 0
213 [1, 2, 3, 4, 5, 6, 1, 2, 3, 5, 2] 0
214 [1, 2, 3, 4, 5, 6, 1, 2, 3, 5] 0
215 [1, 2, 3, 4, 5, 6, 1, 2, 3, 1, 2, 3] 0
216 [1, 2, 3, 4, 5, 6, 1, 2, 3, 1, 2] 0
217 [1, 2, 3, 4, 5, 6, 1, 2, 3, 1] 0
218 [1, 2, 3, 4, 5, 6, 1, 2, 3, 2] 0
219 [1, 2, 3, 4, 5, 6, 1, 2, 3] 0
220 [1, 2, 3, 4, 5, 6, 1, 2, 4, 5, 4] 0
221 [1, 2, 3, 4, 5, 6, 1, 2, 4, 5] 0
222 [1, 2, 3, 4, 5, 6, 1, 2, 4] 0
223 [1, 2, 3, 4, 5, 6, 1, 2, 5] 0
224 [1, 2, 3, 4, 5, 6, 1, 2] 0
225 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 1, 3, 4, 1, 3, 1] 0
226 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 1, 3, 4, 1, 3] 0
227 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 1, 3, 4, 1] 0
228 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 1, 3, 4, 3] 0
229 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 1, 3, 4] 0
230 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 1, 3, 1] 0
231 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 1, 3] 0
232 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 1, 4] 0
233 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 1] 0
234 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 3, 4, 3] 0
235 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 3, 4] 0
236 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 3] 0
237 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 4] 0
238 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5] 0
239 [1, 2, 3, 4, 5, 6, 1, 3, 4, 1, 3, 1] 0
240 [1, 2, 3, 4, 5, 6, 1, 3, 4, 1, 3] 0
241 [1, 2, 3, 4, 5, 6, 1, 3, 4, 1] 0
242 [1, 2, 3, 4, 5, 6, 1, 3, 4, 3] 0
243 [1, 2, 3, 4, 5, 6, 1, 3, 4] 0
244 [1, 2, 3, 4, 5, 6, 1, 3, 5, 1] 0
245 [1, 2, 3, 4, 5, 6, 1, 3, 5] 0
246 [1, 2, 3, 4, 5, 6, 1, 3, 1] 0
247 [1, 2, 3, 4, 5, 6, 1, 3] 0
248 [1, 2, 3, 4, 5, 6, 1, 4, 5, 4] 0
249 [1, 2, 3, 4, 5, 6, 1, 4, 5] 0
250 [1, 2, 3, 4, 5, 6, 1, 4] 0
251 [1, 2, 3, 4, 5, 6, 1, 5] 0
252 [1, 2, 3, 4, 5, 6, 1] 0
253 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2, 3, 2] 0
254 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2, 3] 0
255 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2] 0
256 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 3] 0
257 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4] 0
258 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 2] 0
259 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3] 0
260 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 4] 0
261 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2] 0
262 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 3, 4, 3] 0
263 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 3, 4] 0
264 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 3] 0
265 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 4] 0
266 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5] 0
267 [1, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3, 2] 0
268 [1, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3] 0
269 [1, 2, 3, 4, 5, 6, 2, 3, 4, 2] 0
270 [1, 2, 3, 4, 5, 6, 2, 3, 4, 3] 0
271 [1, 2, 3, 4, 5, 6, 2, 3, 4] 0
272 [1, 2, 3, 4, 5, 6, 2, 3, 5, 2] 0
273 [1, 2, 3, 4, 5, 6, 2, 3, 5] 0
274 [1, 2, 3, 4, 5, 6, 2, 3, 2] 0
275 [1, 2, 3, 4, 5, 6, 2, 3] 0
276 [1, 2, 3, 4, 5, 6, 2, 4, 5, 4] 0
277 [1, 2, 3, 4, 5, 6, 2, 4, 5] 0
278 [1, 2, 3, 4, 5, 6, 2, 4] 0
279 [1, 2, 3, 4, 5, 6, 2, 5] 0
280 [1, 2, 3, 4, 5, 6, 2] 0
281 [1, 2, 3, 4, 5, 6, 3, 4, 5, 3, 4, 3] 0
282 [1, 2, 3, 4, 5, 6, 3, 4, 5, 3, 4] 0
283 [1, 2, 3, 4, 5, 6, 3, 4, 5, 3] 0
284 [1, 2, 3, 4, 5, 6, 3, 4, 5, 4] 0
285 [1, 2, 3, 4, 5, 6, 3, 4, 5] 0
286 [1, 2, 3, 4, 5, 6, 3, 4, 3] 0
287 [1, 2, 3, 4, 5, 6, 3, 4] 0
288 [1, 2, 3, 4, 5, 6, 3, 5] 0
289 [1, 2, 3, 4, 5, 6, 3] 0
290 [1, 2, 3, 4, 5, 6, 4, 5, 4] 0
291 [1, 2, 3, 4, 5, 6, 4, 5] 0
292 [1, 2, 3, 4, 5, 6, 4] 0
293 [1, 2, 3, 4, 5, 6, 5] 0
294 [1, 2, 3, 4, 5, 6] 0
295 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5] 0
296 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4] 0
297 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3] 0
298 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2] 0
299 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1] 0
300 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2] 0
301 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5] 0
302 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 4] 0
303 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] 0
304 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] 0
305 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1] 0
306 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2] 0
307 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4] 0
308 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 3] 0
309 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2] 0
310 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1] 0
311 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 2] 0
312 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3] 0
313 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2] 0
314 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 3, 1] 0
315 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 3] 0
316 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1] 0
317 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 2] 0
318 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3] 0
319 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2] 0
320 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 3] 0
321 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5] 0
322 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
323 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
324 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
325 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 4, 1] 0
326 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 4, 2] 0
327 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 4] 0
328 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2, 3] 0
329 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
330 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1] 0
331 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 2] 0
332 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] 0
333 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] 0
334 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 3, 1] 0
335 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 3] 0
336 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1] 0
337 [1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3, 2] 0
338 [1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3] 0
339 [1, 2, 3, 4, 5, 1, 2, 3, 4, 2] 0
340 [1, 2, 3, 4, 5, 1, 2, 3, 4, 3] 0
341 [1, 2, 3, 4, 5, 1, 2, 3, 4] 0
342 [1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 3] 0
343 [1, 2, 3, 4, 5, 1, 2, 3, 1, 2] 0
344 [1, 2, 3, 4, 5, 1, 2, 3, 1] 0
345 [1, 2, 3, 4, 5, 1, 2, 3, 2] 0
346 [1, 2, 3, 4, 5, 1, 2, 3] 0
347 [1, 2, 3, 4, 5, 1, 2, 4] 0
348 [1, 2, 3, 4, 5, 1, 2] 0
349 [1, 2, 3, 4, 5, 1, 3, 4, 1, 3, 1] 0
350 [1, 2, 3, 4, 5, 1, 3, 4, 1, 3] 0
351 [1, 2, 3, 4, 5, 1, 3, 4, 1] 0
352 [1, 2, 3, 4, 5, 1, 3, 4, 3] 0
353 [1, 2, 3, 4, 5, 1, 3, 4] 0
354 [1, 2, 3, 4, 5, 1, 3, 1] 0
355 [1, 2, 3, 4, 5, 1, 3] 0
356 [1, 2, 3, 4, 5, 1, 4] 0
357 [1, 2, 3, 4, 5, 1] 0
358 [1, 2, 3, 4, 5, 2, 3, 4, 2, 3, 2] 0
359 [1, 2, 3, 4, 5, 2, 3, 4, 2, 3] 0
360 [1, 2, 3, 4, 5, 2, 3, 4, 2] 0
361 [1, 2, 3, 4, 5, 2, 3, 4, 3] 0
362 [1, 2, 3, 4, 5, 2, 3, 4] 0
363 [1, 2, 3, 4, 5, 2, 3, 2] 0
364 [1, 2, 3, 4, 5, 2, 3] 0
365 [1, 2, 3, 4, 5, 2, 4] 0
366 [1, 2, 3, 4, 5, 2] 0
367 [1, 2, 3, 4, 5, 3, 4, 3] 0
368 [1, 2, 3, 4, 5, 3, 4] 0
369 [1, 2, 3, 4, 5, 3] 0
370 [1, 2, 3, 4, 5, 4] 0
371 [1, 2, 3, 4, 5] 0
372 [1, 2, 3, 4, 6, 1, 2, 3, 4, 1, 2, 3, 4] 0
373 [1, 2, 3, 4, 6, 1, 2, 3, 4, 1, 2, 3] 0
374 [1, 2, 3, 4, 6, 1, 2, 3, 4, 1, 2] 0
375 [1, 2, 3, 4, 6, 1, 2, 3, 4, 1] 0
376 [1, 2, 3, 4, 6, 1, 2, 3, 4, 2] 0
377 [1, 2, 3, 4, 6, 1, 2, 3, 4] 0
378 [1, 2, 3, 4, 6, 1, 2, 3, 1, 2, 3] 0
379 [1, 2, 3, 4, 6, 1, 2, 3, 1, 2] 0
380 [1, 2, 3, 4, 6, 1, 2, 3, 1] 0
381 [1, 2, 3, 4, 6, 1, 2, 3, 2] 0
382 [1, 2, 3, 4, 6, 1, 2, 3] 0
383 [1, 2, 3, 4, 6, 1, 2] 0
384 [1, 2, 3, 4, 6, 1, 3, 1] 0
385 [1, 2, 3, 4, 6, 1, 3] 0
386 [1, 2, 3, 4, 6, 1] 0
387 [1, 2, 3, 4, 6, 2, 3, 2] 0
388 [1, 2, 3, 4, 6, 2, 3] 0
389 [1, 2, 3, 4, 6, 2] 0
390 [1, 2, 3, 4, 6, 3] 0
391 [1, 2, 3, 4, 6] 0
392 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
393 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
394 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
395 [1, 2, 3, 4, 1, 2, 3, 4, 1] 0
396 [1, 2, 3, 4, 1, 2, 3, 4, 2] 0
397 [1, 2, 3, 4, 1, 2, 3, 4] 0
398 [1, 2, 3, 4, 1, 2, 3, 1, 2, 3] 0
399 [1, 2, 3, 4, 1, 2, 3, 1, 2] 0
400 [1, 2, 3, 4, 1, 2, 3, 1] 0
401 [1, 2, 3, 4, 1, 2, 3, 2] 0
402 [1, 2, 3, 4, 1, 2, 3] 0
403 [1, 2, 3, 4, 1, 2] 0
404 [1, 2, 3, 4, 1, 3, 1] 0
405 [1, 2, 3, 4, 1, 3] 0
406 [1, 2, 3, 4, 1] 0
407 [1, 2, 3, 4, 2, 3, 2] 0
408 [1, 2, 3, 4, 2, 3] 0
409 [1, 2, 3, 4, 2] 0
410 [1, 2, 3, 4, 3] 0
411 [1, 2, 3, 4] 0
412 [1, 2, 3, 5, 6, 1, 2, 3, 5] 0
413 [1, 2, 3, 5, 6, 1, 2, 3] 0
414 [1, 2, 3, 5, 6, 1, 2, 5] 0
415 [1, 2, 3, 5, 6, 1, 2] 0
416 [1, 2, 3, 5, 6, 1, 5] 0
417 [1, 2, 3, 5, 6, 1] 0
418 [1, 2, 3, 5, 6, 2, 5] 0
419 [1, 2, 3, 5, 6, 2] 0
420 [1, 2, 3, 5, 6, 5] 0
421 [1, 2, 3, 5, 6] 0
422 [1, 2, 3, 5, 1, 2, 3] 0
423 [1, 2, 3, 5, 1, 2] 0
424 [1, 2, 3, 5, 1] 0
425 [1, 2, 3, 5, 2] 0
426 [1, 2, 3, 5] 0
427 [1, 2, 3, 6, 1, 2, 3] 0
428 [1, 2, 3, 6, 1, 2] 0
429 [1, 2, 3, 6, 1] 0
430 [1, 2, 3, 6, 2] 0
431 [1, 2, 3, 6] 0
432 [1, 2, 3, 1, 2, 3] 0
433 [1, 2, 3, 1, 2] 0
434 [1, 2, 3, 1] 0
435 [1, 2, 3, 2] 0
436 [1, 2, 3] 0
437 [1, 2, 4, 5, 6, 4, 5, 4] 0
438 [1, 2, 4, 5, 6, 4, 5] 0
439 [1, 2, 4, 5, 6, 4] 0
440 [1, 2, 4, 5, 6, 5] 0
441 [1, 2, 4, 5, 6] 0
442 [1, 2, 4, 5, 4] 0
443 [1, 2, 4, 5] 0
444 [1, 2, 4, 6] 0
445 [1, 2, 4] 0
446 [1, 2, 5, 6, 5] 0
447 [1, 2, 5, 6] 0
448 [1, 2, 5] 0
449 [1, 2, 6] 0
450 [1, 2] 0
451 [1, 3, 4, 5, 6, 1, 3, 4, 5, 1, 3, 4, 1, 3, 1] 0
452 [1, 3, 4, 5, 6, 1, 3, 4, 5, 1, 3, 4, 1, 3] 0
453 [1, 3, 4, 5, 6, 1, 3, 4, 5, 1, 3, 4, 1] 0
454 [1, 3, 4, 5, 6, 1, 3, 4, 5, 1, 3, 4, 3] 0
455 [1, 3, 4, 5, 6, 1, 3, 4, 5, 1, 3, 4] 0
456 [1, 3, 4, 5, 6, 1, 3, 4, 5, 1, 3, 1] 0
457 [1, 3, 4, 5, 6, 1, 3, 4, 5, 1, 3] 0
458 [1, 3, 4, 5, 6, 1, 3, 4, 5, 1, 4] 0
459 [1, 3, 4, 5, 6, 1, 3, 4, 5, 1] 0
460 [1, 3, 4, 5, 6, 1, 3, 4, 5, 3, 4, 3] 0
461 [1, 3, 4, 5, 6, 1, 3, 4, 5, 3, 4] 0
462 [1, 3, 4, 5, 6, 1, 3, 4, 5, 3] 0
463 [1, 3, 4, 5, 6, 1, 3, 4, 5, 4] 0
464 [1, 3, 4, 5, 6, 1, 3, 4, 5] 0
465 [1, 3, 4, 5, 6, 1, 3, 4, 1, 3, 1] 0
466 [1, 3, 4, 5, 6, 1, 3, 4, 1, 3] 0
467 [1, 3, 4, 5, 6, 1, 3, 4, 1] 0
468 [1, 3, 4, 5, 6, 1, 3, 4, 3] 0
469 [1, 3, 4, 5, 6, 1, 3, 4] 0
470 [1, 3, 4, 5, 6, 1, 3, 5, 1] 0
471 [1, 3, 4, 5, 6, 1, 3, 5] 0
472 [1, 3, 4, 5, 6, 1, 3, 1] 0
473 [1, 3, 4, 5, 6, 1, 3] 0
474 [1, 3, 4, 5, 6, 1, 4, 5, 4] 0
475 [1, 3, 4, 5, 6, 1, 4, 5] 0
476 [1, 3, 4, 5, 6, 1, 4] 0
477 [1, 3, 4, 5, 6, 1, 5] 0
478 [1, 3, 4, 5, 6, 1] 0
479 [1, 3, 4, 5, 6, 3, 4, 5, 3, 4, 3] 0
480 [1, 3, 4, 5, 6, 3, 4, 5, 3, 4] 0
481 [1, 3, 4, 5, 6, 3, 4, 5, 3] 0
482 [1, 3, 4, 5, 6, 3, 4, 5, 4] 0
483 [1, 3, 4, 5, 6, 3, 4, 5] 0
484 [1, 3, 4, 5, 6, 3, 4, 3] 0
485 [1, 3, 4, 5, 6, 3, 4] 0
486 [1, 3, 4, 5, 6, 3, 5] 0
487 [1, 3, 4, 5, 6, 3] 0
488 [1, 3, 4, 5, 6, 4, 5, 4] 0
489 [1, 3, 4, 5, 6, 4, 5] 0
490 [1, 3, 4, 5, 6, 4] 0
491 [1, 3, 4, 5, 6, 5] 0
492 [1, 3, 4, 5, 6] 0
493 [1, 3, 4, 5, 1, 3, 4, 1, 3, 1] 0
494 [1, 3, 4, 5, 1, 3, 4, 1, 3] 0
495 [1, 3, 4, 5, 1, 3, 4, 1] 0
496 [1, 3, 4, 5, 1, 3, 4, 3] 0
497 [1, 3, 4, 5, 1, 3, 4] 0
498 [1, 3, 4, 5, 1, 3, 1] 0
499 [1, 3, 4, 5, 1, 3] 0
500 [1, 3, 4, 5, 1, 4] 0
501 [1, 3, 4, 5, 1] 0
502 [1, 3, 4, 5, 3, 4, 3] 0
503 [1, 3, 4, 5, 3, 4] 0
504 [1, 3, 4, 5, 3] 0
505 [1, 3, 4, 5, 4] 0
506 [1, 3, 4, 5] 0
507 [1, 3, 4, 6, 1, 3, 1] 0
508 [1, 3, 4, 6, 1, 3] 0
509 [1, 3, 4, 6, 1] 0
510 [1, 3, 4, 6, 3] 0
511 [1, 3, 4, 6] 0
512 [1, 3, 4, 1, 3, 1] 0
513 [1, 3, 4, 1, 3] 0
514 [1, 3, 4, 1] 0
515 [1, 3, 4, 3] 0
516 [1, 3, 4] 0
517 [1, 3, 5, 6, 1, 5] 0
518 [1, 3, 5, 6, 1] 0
519 [1, 3, 5, 6, 5] 0
520 [1, 3, 5, 6] 0
521 [1, 3, 5, 1] 0
522 [1, 3, 5] 0
523 [1, 3, 6, 1] 0
524 [1, 3, 6] 0
525 [1, 3, 1] 0
526 [1, 3] 0
527 [1, 4, 5, 6, 4, 5, 4] 0
528 [1, 4, 5, 6, 4, 5] 0
529 [1, 4, 5, 6, 4] 0
530 [1, 4, 5, 6, 5] 0
531 [1, 4, 5, 6] 0
532 [1, 4, 5, 4] 0
533 [1, 4, 5] 0
534 [1, 4, 6] 0
535 [1, 4] 0
536 [1, 5, 6, 5] 0
537 [1, 5, 6] 0
538 [1, 5] 0
539 [1, 6] 0
540 [1] 0
541 [2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2, 3, 2] 0
542 [2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2, 3] 0
543 [2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2] 0
544 [2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 3] 0
545 [2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4] 0
546 [2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 2] 0
547 [2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3] 0
548 [2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 4] 0
549 [2, 3, 4, 5, 6, 2, 3, 4, 5, 2] 0
550 [2, 3, 4, 5, 6, 2, 3, 4, 5, 3, 4, 3] 0
551 [2, 3, 4, 5, 6, 2, 3, 4, 5, 3, 4] 0
552 [2, 3, 4, 5, 6, 2, 3, 4, 5, 3] 0
553 [2, 3, 4, 5, 6, 2, 3, 4, 5, 4] 0
554 [2, 3, 4, 5, 6, 2, 3, 4, 5] 0
555 [2, 3, 4, 5, 6, 2, 3, 4, 2, 3, 2] 0
556 [2, 3, 4, 5, 6, 2, 3, 4, 2, 3] 0
557 [2, 3, 4, 5, 6, 2, 3, 4, 2] 0
558 [2, 3, 4, 5, 6, 2, 3, 4, 3] 0
559 [2, 3, 4, 5, 6, 2, 3, 4] 0
560 [2, 3, 4, 5, 6, 2, 3, 5, 2] 0
561 [2, 3, 4, 5, 6, 2, 3, 5] 0
562 [2, 3, 4, 5, 6, 2, 3, 2] 0
563 [2, 3, 4, 5, 6, 2, 3] 0
564 [2, 3, 4, 5, 6, 2, 4, 5, 4] 0
565 [2, 3, 4, 5, 6, 2, 4, 5] 0
566 [2, 3, 4, 5, 6, 2, 4] 0
567 [2, 3, 4, 5, 6, 2, 5] 0
568 [2, 3, 4, 5, 6, 2] 0
569 [2, 3, 4, 5, 6, 3, 4, 5, 3, 4, 3] 0
570 [2, 3, 4, 5, 6, 3, 4, 5, 3, 4] 0
571 [2, 3, 4, 5, 6, 3, 4, 5, 3] 0
572 [2, 3, 4, 5, 6, 3, 4, 5, 4] 0
573 [2, 3, 4, 5, 6, 3, 4, 5] 0
574 [2, 3, 4, 5, 6, 3, 4, 3] 0
575 [2, 3, 4, 5, 6, 3, 4] 0
576 [2, 3, 4, 5, 6, 3, 5] 0
577 [2, 3, 4, 5, 6, 3] 0
578 [2, 3, 4, 5, 6, 4, 5, 4] 0
579 [2, 3, 4, 5, 6, 4, 5] 0
580 [2, 3, 4, 5, 6, 4] 0
581 [2, 3, 4, 5, 6, 5] 0
582 [2, 3, 4, 5, 6] 0
583 [2, 3, 4, 5, 2, 3, 4, 2, 3, 2] 0
584 [2, 3, 4, 5, 2, 3, 4, 2, 3] 0
585 [2, 3, 4, 5, 2, 3, 4, 2] 0
586 [2, 3, 4, 5, 2, 3, 4, 3] 0
587 [2, 3, 4, 5, 2, 3, 4] 0
588 [2, 3, 4, 5, 2, 3, 2] 0
589 [2, 3, 4, 5, 2, 3] 0
590 [2, 3, 4, 5, 2, 4] 0
591 [2, 3, 4, 5, 2] 0
592 [2, 3, 4, 5, 3, 4, 3] 0
593 [2, 3, 4, 5, 3, 4] 0
594 [2, 3, 4, 5, 3] 0
595 [2, 3, 4, 5, 4] 0
596 [2, 3, 4, 5] 0
597 [2, 3, 4, 6, 2, 3, 2] 0
598 [2, 3, 4, 6, 2, 3] 0
599 [2, 3, 4, 6, 2] 0
600 [2, 3, 4, 6, 3] 0
601 [2, 3, 4, 6] 0
602 [2, 3, 4, 2, 3, 2] 0
603 [2, 3, 4, 2, 3] 0
604 [2, 3, 4, 2] 0
605 [2, 3, 4, 3] 0
606 [2, 3, 4] 0
607 [2, 3, 5, 6, 2, 5] 0
608 [2, 3, 5, 6, 2] 0
609 [2, 3, 5, 6, 5] 0
610 [2, 3, 5, 6] 0
611 [2, 3, 5, 2] 0
612 [2, 3, 5] 0
613 [2, 3, 6, 2] 0
614 [2, 3, 6] 0
615 [2, 3, 2] 0
616 [2, 3] 0
617 [2, 4, 5, 6, 4, 5, 4] 0
618 [2, 4, 5, 6, 4, 5] 0
619 [2, 4, 5, 6, 4] 0
620 [2, 4, 5, 6, 5] 0
621 [2, 4, 5, 6] 0
622 [2, 4, 5, 4] 0
623 [2, 4, 5] 0
624 [2, 4, 6] 0
625 [2, 4] 0
626 [2, 5, 6, 5] 0
627 [2, 5, 6] 0
628 [2, 5] 0
629 [2, 6] 0
630 [2] 0
631 [3, 4, 5, 6, 3, 4, 5, 3, 4, 3] 0
632 [3, 4, 5, 6, 3, 4, 5, 3, 4] 0
633 [3, 4, 5, 6, 3, 4, 5, 3] 0
634 [3, 4, 5, 6, 3, 4, 5, 4] 0
635 [3, 4, 5, 6, 3, 4, 5] 0
636 [3, 4, 5, 6, 3, 4, 3] 0
637 [3, 4, 5, 6, 3, 4] 0
638 [3, 4, 5, 6, 3, 5] 0
639 [3, 4, 5, 6, 3] 0
640 [3, 4, 5, 6, 4, 5, 4] 0
641 [3, 4, 5, 6, 4, 5] 0
642 [3, 4, 5, 6, 4] 0
643 [3, 4, 5, 6, 5] 0
644 [3, 4, 5, 6] 0
645 [3, 4, 5, 3, 4, 3] 0
646 [3, 4, 5, 3, 4] 0
647 [3, 4, 5, 3] 0
648 [3, 4, 5, 4] 0
649 [3, 4, 5] 0
650 [3, 4, 6, 3] 0
651 [3, 4, 6] 0
652 [3, 4, 3] 0
653 [3, 4] 0
654 [3, 5, 6, 5] 0
655 [3, 5, 6] 0
656 [3, 5] 0
657 [3, 6] 0
658 [3] 0
659 [4, 5, 6, 4, 5, 4] 0
660 [4, 5, 6, 4, 5] 0
661 [4, 5, 6, 4] 0
662 [4, 5, 6, 5] 0
663 [4, 5, 6] 0
664 [4, 5, 4] 0
665 [4, 5] 0
666 [4, 6] 0
667 [4] 0
668 [5, 6, 5] 0
669 [5, 6] 0
670 [5] 0
671 [6] 0
672 [] 0
### reloading attached file domination4.py modified at 17:03:06 ###
Traceback (most recent call last):

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/IPython/core/interactiveshell.py:3433 in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)

  Cell In [6], line 1
    sage.repl.load.load(sage.repl.load.base64.b64decode("L1VzZXJzL3JlYWRpbmcvZ2l0L2FmZmluZV9kb21pbmFuY2Uvc29mdHdhcmUvZG9taW5hdGlvbjQucHk="),globals(),True)

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/repl/load.py:252 in load
    code = compile(f.read(), fpath, 'exec')

  File ~/git/affine_dominance/software/domination4.py:184
    ) )           out=out+[k+[c[0]]]
    ^
SyntaxError: unmatched ')'

### reloading attached file domination4.py modified at 17:03:37 ###
### reloading attached file domination4.py modified at 20:23:09 ###
### reloading attached file domination4.py modified at 20:26:16 ###
Traceback (most recent call last):

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/IPython/core/interactiveshell.py:3433 in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)

  Cell In [6], line 1
    sage.repl.load.load(sage.repl.load.base64.b64decode("L1VzZXJzL3JlYWRpbmcvZ2l0L2FmZmluZV9kb21pbmFuY2Uvc29mdHdhcmUvZG9taW5hdGlvbjQucHk="),globals(),True)

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/repl/load.py:252 in load
    code = compile(f.read(), fpath, 'exec')

  File ~/git/affine_dominance/software/domination4.py:206
    elif
         ^
SyntaxError: invalid syntax

### reloading attached file domination4.py modified at 20:28:18 ###
Traceback (most recent call last):

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/IPython/core/interactiveshell.py:3433 in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)

  Cell In [6], line 1
    sage.repl.load.load(sage.repl.load.base64.b64decode("L1VzZXJzL3JlYWRpbmcvZ2l0L2FmZmluZV9kb21pbmFuY2Uvc29mdHdhcmUvZG9taW5hdGlvbjQucHk="),globals(),True)

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/repl/load.py:252 in load
    code = compile(f.read(), fpath, 'exec')

  File ~/git/affine_dominance/software/domination4.py:212
    out=out+[k+[c[0]]]
    ^
IndentationError: unexpected indent

### reloading attached file domination4.py modified at 23:35:46 ###
### reloading attached file domination4.py modified at 23:38:40 ###
Traceback (most recent call last):

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/IPython/core/interactiveshell.py:3433 in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)

  Cell In [6], line 1
    sage.repl.load.load(sage.repl.load.base64.b64decode("L1VzZXJzL3JlYWRpbmcvZ2l0L2FmZmluZV9kb21pbmFuY2Uvc29mdHdhcmUvZG9taW5hdGlvbjQucHk="),globals(),True)

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/repl/load.py:252 in load
    code = compile(f.read(), fpath, 'exec')

  File ~/git/affine_dominance/software/domination4.py:226
    def Kc(c,coxnum):  # powers of c
    ^
IndentationError: expected an indented block after function definition on line 220

### reloading attached file domination4.py modified at 23:43:19 ###
Traceback (most recent call last):

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/IPython/core/interactiveshell.py:3433 in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)

  Cell In [6], line 1
    sage.repl.load.load(sage.repl.load.base64.b64decode("L1VzZXJzL3JlYWRpbmcvZ2l0L2FmZmluZV9kb21pbmFuY2Uvc29mdHdhcmUvZG9taW5hdGlvbjQucHk="),globals(),True)

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/repl/load.py:252 in load
    code = compile(f.read(), fpath, 'exec')

  File ~/git/affine_dominance/software/domination4.py:218
    if k=[]:
       ^
SyntaxError: invalid syntax. Maybe you meant '==' or ':=' instead of '='?

### reloading attached file domination4.py modified at 23:44:11 ###
Traceback (most recent call last):

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/IPython/core/interactiveshell.py:3433 in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)

  Cell In [6], line 1
    sage.repl.load.load(sage.repl.load.base64.b64decode("L1VzZXJzL3JlYWRpbmcvZ2l0L2FmZmluZV9kb21pbmFuY2Uvc29mdHdhcmUvZG9taW5hdGlvbjQucHk="),globals(),True)

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/repl/load.py:252 in load
    code = compile(f.read(), fpath, 'exec')

  File ~/git/affine_dominance/software/domination4.py:218
    if k=[]:
       ^
SyntaxError: invalid syntax. Maybe you meant '==' or ':=' instead of '='?

### reloading attached file domination4.py modified at 23:44:27 ###
### reloading attached file domination4.py modified at 23:46:06 ###
### reloading attached file domination4.py modified at 23:53:36 ###
### reloading attached file domination4.py modified at 23:54:08 ###
### reloading attached file domination4.py modified at 23:54:13 ###
### reloading attached file domination4.py modified at 00:16:25 ###
### reloading attached file domination4.py modified at 00:16:37 ###
### reloading attached file domination4.py modified at 13:26:39 ###
### reloading attached file domination4.py modified at 13:28:01 ###
### reloading attached file domination4.py modified at 13:32:33 ###
Traceback (most recent call last):

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/IPython/core/interactiveshell.py:3433 in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)

  Cell In [6], line 1
    sage.repl.load.load(sage.repl.load.base64.b64decode("L1VzZXJzL3JlYWRpbmcvZ2l0L2FmZmluZV9kb21pbmFuY2Uvc29mdHdhcmUvZG9taW5hdGlvbjQucHk="),globals(),True)

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/repl/load.py:252 in load
    code = compile(f.read(), fpath, 'exec')

  File ~/git/affine_dominance/software/domination4.py:176
    def B(A,c):  # Cartan matrix (assumes nonpositive off-diagonal entries) and Coxeter element (a list)
    ^
IndentationError: expected an indented block after function definition on line 171

### reloading attached file domination4.py modified at 13:32:52 ###
### reloading attached file domination4.py modified at 14:06:57 ###
Traceback (most recent call last):

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/IPython/core/interactiveshell.py:3433 in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)

  Cell In [6], line 1
    sage.repl.load.load(sage.repl.load.base64.b64decode("L1VzZXJzL3JlYWRpbmcvZ2l0L2FmZmluZV9kb21pbmFuY2Uvc29mdHdhcmUvZG9taW5hdGlvbjQucHk="),globals(),True)

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/repl/load.py:252 in load
    code = compile(f.read(), fpath, 'exec')

  File ~/git/affine_dominance/software/domination4.py:172
    rays=list(r.vector() for r in P.rays();
                                          ^
SyntaxError: invalid syntax

### reloading attached file domination4.py modified at 14:07:04 ###
### reloading attached file domination4.py modified at 14:14:27 ###
Traceback (most recent call last):

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/IPython/core/interactiveshell.py:3433 in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)

  Cell In [6], line 1
    sage.repl.load.load(sage.repl.load.base64.b64decode("L1VzZXJzL3JlYWRpbmcvZ2l0L2FmZmluZV9kb21pbmFuY2Uvc29mdHdhcmUvZG9taW5hdGlvbjQucHk="),globals(),True)

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/repl/load.py:252 in load
    code = compile(f.read(), fpath, 'exec')

  File ~/git/affine_dominance/software/domination4.py:177
    rays=rays+[vertvec-
              ^
SyntaxError: '[' was never closed

### reloading attached file domination4.py modified at 14:16:43 ###
### reloading attached file domination4.py modified at 14:22:47 ###
### reloading attached file domination4.py modified at 14:33:09 ###
### reloading attached file domination4.py modified at 15:29:51 ###
### reloading attached file domination4.py modified at 15:31:02 ###
### reloading attached file domination4.py modified at 16:14:48 ###
### reloading attached file domination4.py modified at 16:15:23 ###
### reloading attached file domination4.py modified at 19:00:21 ###
### reloading attached file domination4.py modified at 19:02:11 ###
### reloading attached file domination4.py modified at 14:24:50 ###
### reloading attached file domination4.py modified at 14:25:52 ###
### reloading attached file domination4.py modified at 14:27:40 ###
sage: B(A,c)
[ 0  0  1  0  0  0  0]
[ 0  0  0  1  0  0  0]
[-1  0  0  1  0  0  0]
[ 0 -1 -1  0  1  0  0]
[ 0  0  0 -1  0  1  0]
[ 0  0  0  0 -1  0  1]
[ 0  0  0  0  0 -1  0]
sage: B(A,c)[:,:2]
[ 0  0]
[ 0  0]
[-1  0]
[ 0 -1]
[ 0  0]
[ 0  0]
[ 0  0]
sage: B(A,c)[:,2:]
[ 1  0  0  0  0]
[ 0  1  0  0  0]
[ 0  1  0  0  0]
[-1  0  1  0  0]
[ 0 -1  0  1  0]
[ 0  0 -1  0  1]
[ 0  0  0 -1  0]
### reloading attached file domination4.py modified at 13:55:22 ###
### reloading attached file domination4.py modified at 13:22:15 ###
### reloading attached file domination4.py modified at 13:29:07 ###
### reloading attached file domination4.py modified at 17:59:28 ###
### reloading attached file domination4.py modified at 12:49:13 ###
sage: attach('/Users/reading/git/affine_dominance/software/domination5.py')
### reloading attached file domination5.py modified at 13:28:05 ###
### reloading attached file domination5.py modified at 13:28:39 ###
### reloading attached file domination5.py modified at 13:29:35 ###
### reloading attached file domination5.py modified at 13:34:46 ###
### reloading attached file domination5.py modified at 13:35:55 ###
Traceback (most recent call last):

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/IPython/core/interactiveshell.py:3433 in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)

  Cell In [10], line 1
    sage.repl.load.load(sage.repl.load.base64.b64decode("L1VzZXJzL3JlYWRpbmcvZ2l0L2FmZmluZV9kb21pbmFuY2Uvc29mdHdhcmUvZG9taW5hdGlvbjUucHk="),globals(),True)

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/repl/load.py:252 in load
    code = compile(f.read(), fpath, 'exec')

  File ~/git/affine_dominance/software/domination5.py:241
    def lam(A,v):
    ^
IndentationError: expected an indented block after function definition on line 235

### reloading attached file domination5.py modified at 13:36:59 ###
Traceback (most recent call last):

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/IPython/core/interactiveshell.py:3433 in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)

  Cell In [10], line 1
    sage.repl.load.load(sage.repl.load.base64.b64decode("L1VzZXJzL3JlYWRpbmcvZ2l0L2FmZmluZV9kb21pbmFuY2Uvc29mdHdhcmUvZG9taW5hdGlvbjUucHk="),globals(),True)

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/repl/load.py:252 in load
    code = compile(f.read(), fpath, 'exec')

  File ~/git/affine_dominance/software/domination5.py:241
    def lam(A,v):
    ^
IndentationError: expected an indented block after function definition on line 235

### reloading attached file domination5.py modified at 13:42:29 ###
### reloading attached file domination5.py modified at 13:44:24 ###
### reloading attached file domination5.py modified at 15:24:51 ###
### reloading attached file domination5.py modified at 18:31:13 ###
### reloading attached file domination5.py modified at 13:18:45 ###
### reloading attached file domination5.py modified at 13:19:09 ###
sage: A=CartanMatrix(['C',3])
....: c=[2,1,0]
....: colors=rainbow(4)
....: for v in sortables(A,c[1:]):
....:     plots=[point(lam(A,v)).plot(size=5)]
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     num=0
....:     for seq in [k,kinv,k+[c[0]],kinv+[c[0]]]:
....:         plots=plots+[p_lambda(B(A,c),lam(A,v),seq).plot(fill=colors[num],a
....: lpha=0.5)]
....:         num+=1
....:     sum(plots)
....: 
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In [10], line 5
      3 colors=rainbow(Integer(4))
      4 for v in sortables(A,c[Integer(1):]):
----> 5     plots=[point(lam(A,v)).plot(size=Integer(5))]
      6     k=list(reversed(v))
      7     kinv=list(reversed(inv_sortable(A,c[Integer(1):],v)))

TypeError: plot() got an unexpected keyword argument 'size'
sage: A=CartanMatrix(['C',3])
....: c=[2,1,0]
....: colors=rainbow(4)
....: for v in sortables(A,c[1:]):
....:     plots=[point(lam(A,v),size=5).plot()]
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     num=0
....:     for seq in [k,kinv,k+[c[0]],kinv+[c[0]]]:
....:         plots=plots+[p_lambda(B(A,c),lam(A,v),seq).plot(fill=colors[num],a
....: lpha=0.5)]
....:         num+=1
....:     sum(plots)
....: 
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[2,1,0]
....: colors=rainbow(4)
....: for v in sortables(A,c[1:]):
....:     plots=[point(lam(A,v),size=5).plot()]
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     num=0
....:     for seq in [k,kinv,k+[c[0]],kinv+[c[0]]]:
....:         plots=plots+[p_lambda(B(A,c),lam(A,v),seq).translation((num,0,num)
....: ).plot(fill=colors[num],alpha=0.5)]
....:         num+=1
....:     sum(plots)
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[2,1,0]
....: sc=1/50
....: colors=rainbow(4)
....: for v in sortables(A,c[1:]):
....:     plots=[point(lam(A,v),size=5).plot()]
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     num=0
....:     for seq in [k,kinv,k+[c[0]],kinv+[c[0]]]:
....:         plots=plots+[p_lambda(B(A,c),lam(A,v),seq).translation((num*sc,0,n
....: um*sc)).plot(fill=colors[num],alpha=0.5)]
....:         num+=1
....:     sum(plots)
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',3])
....: c=[2,1,0]
....: sc=1/50
....: colors=rainbow(4)
....: for v in sortables(A,c[1:]):
....:     plots=[point(lam(A,v),size=5).plot()]
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     num=0
....:     for seq in [k,kinv,k+[c[0]],kinv+[c[0]]]:
....:         plots=plots+[p_lambda(B(A,c),lam(A,v),seq).translation((num*sc,0,n
....: um*sc)).plot(fill=colors[num],alpha=0.5)]
....:         num+=1
....:     sum(plots)
....: 
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['C',5])
....: c=[4,3,2,1,0]
....: for v in sortables(A,c[1:]):
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_cone(B(A,c),lam(A,v),[k,kinv])
....:     Q=p_lambda_cone(B(A,c),lam(A,v),[k+[c[0]],kinv+[c[0]]])
....:     print("\n",v)
....:     print("sort and inv:     ",list(map(vector,P.rays())),list(map(vector,
....: P.lines())))
....:     print("sort and inv + c0",list(map(vector,Q.rays())),list(map(vector,Q
....: .lines())))
....:     print(P.intersection(Q).dimension())
....: 

 [3, 2, 1, 0, 3, 2, 1, 3, 2, 3]
sort and inv:      [(0, -1, 0, 0, 0), (0, 1, 0, -1, 0)] []
sort and inv + c0 [(0, 1, 0, 0, 0), (0, -1, 0, 1, 0), (0, 0, -1, 0, 1)] []
0

 [3, 2, 1, 0, 3, 2, 1, 3, 2]
sort and inv:      [(0, 0, 0, -1, 0)] []
sort and inv + c0 [(0, 0, 0, 1, 0), (0, 0, -1, 1, 1)] []
0

 [3, 2, 1, 0, 3, 2, 1, 3]
sort and inv:      [(0, 0, 0, -1, 0)] []
sort and inv + c0 [(0, 0, 0, 1, 0), (0, 0, -1, 1, 1)] []
0

 [3, 2, 1, 0, 3, 2, 1, 2]
sort and inv:      [(1, 1, -1, -1, 0), (0, -1, 0, 0, 0), (-1, 0, 1, 0, 0)] []
sort and inv + c0 [(1, 0, -1, 0, 0), (0, 1, 0, 0, 0), (-1, -1, 1, 1, 0), (0, 0, -1, 0, 1)] []
0

 [3, 2, 1, 0, 3, 2, 1]
sort and inv:      [(-1, 0, 1, 0, 0), (1, 0, -1, -1, 0)] []
sort and inv + c0 [(1, 0, -1, 0, 0), (-1, 0, 1, 1, 0), (0, 0, -1, 0, 1)] []
0

 [3, 2, 1, 0, 3, 2, 3]
sort and inv:      [(1, 0, -1, -1, 0), (-1, 0, 1, 0, 0)] []
sort and inv + c0 [(-1, 0, 1, 1, 0), (1, 0, -1, 0, 0), (0, 0, -1, 1, 1)] []
0

 [3, 2, 1, 0, 3, 2]
sort and inv:      [(0, 0, 0, -1, 0)] []
sort and inv + c0 [(-1, 0, 0, 1, 1), (0, 0, 0, 1, 0), (1, 0, -1, 0, 0)] []
0

 [3, 2, 1, 0, 3, 1]
sort and inv:      [(0, 1, 0, -1, 0), (0, -1, 0, 0, 0)] []
sort and inv + c0 [(0, -1, 0, 1, 0), (0, 1, 0, 0, 0), (1, 1, -1, -1, 0), (-1, -1, 0, 1, 1)] []
0

 [3, 2, 1, 0, 3]
sort and inv:      [(0, 0, 0, -1, 0)] []
sort and inv + c0 [(1, 1, -1, -1, 0), (-1, 0, 0, 1, 1), (0, 0, 0, 1, 0), (0, -1, 0, 1, 0)] []
0

 [3, 2, 1, 0, 2, 1, 2]
sort and inv:      [(0, 0, 0, -1, 0)] []
sort and inv + c0 [(0, -1, -1, 1, 1), (0, 0, 0, 1, 0), (0, 1, 0, 0, 0)] []
0

 [3, 2, 1, 0, 2, 1]
sort and inv:      [(0, -1, 0, 0, 0), (0, 1, 0, -1, 0)] []
sort and inv + c0 [(0, -1, 0, 1, 0), (0, 1, 0, 0, 0), (0, 0, -1, 1, 1)] []
0

 [3, 2, 1, 0, 2]
sort and inv:      [(-1, 0, 1, 0, 0), (0, 1, 0, -1, 0), (1, -1, -1, 0, 0)] []
sort and inv + c0 [(-1, 1, 1, 0, 0), (0, -1, 0, 1, 0), (1, 0, -1, 0, 0), (0, 0, -1, 1, 1)] []
0

 [3, 2, 1, 0, 1]
sort and inv:      [(0, 0, 0, -1, 0)] []
sort and inv + c0 [(1, 0, -1, 0, 0), (-1, -1, 0, 1, 1), (0, 0, 0, 1, 0), (0, 1, 0, 0, 0)] []
0

 [3, 2, 1, 0]
sort and inv:      [(0, -1, 0, 0, 0), (0, 1, 0, -1, 0)] []
sort and inv + c0 [(0, 1, 0, 0, 0), (0, -1, 0, 1, 0), (1, 0, -1, 0, 0), (-1, 0, 0, 1, 1)] []
0

 [3, 2, 1, 3, 2, 3]
sort and inv:      [(-1, 0, 1, 0, 0), (0, 0, -1, 0, 1), (1, 0, 0, -1, -1)] []
sort and inv + c0 [(0, 0, 1, 0, -1), (1, 0, -1, 0, 0), (-1, 0, 0, 1, 1)] []
0

 [3, 2, 1, 3, 2]
sort and inv:      [(-1, 0, 0, 0, 1), (0, 0, 0, -1, 0)] []
sort and inv + c0 [(0, 0, 0, 1, 0), (0, 0, -1, 1, 1)] []
0

 [3, 2, 1, 3]
sort and inv:      [(0, 0, 0, -1, 0), (-1, 0, 0, 0, 1)] []
sort and inv + c0 [(0, 0, 0, 1, 0), (1, 1, -1, 0, 0), (0, 0, -1, 1, 1), (-1, -1, 0, 2, 1)] []
0

 [3, 2, 1, 2]
sort and inv:      [(0, 1, 0, -1, 0), (0, -1, -1, 1, 1), (1, 0, 0, -1, -1), (-1, 0, 1, 0, 0)] []
sort and inv + c0 [(0, 1, 1, -1, -1), (1, 0, -1, 0, 0), (0, -1, 0, 1, 0), (-1, 0, 0, 1, 1)] []
0

 [3, 2, 1]
sort and inv:      [(1, 0, 0, -1, -1), (0, 1, 0, -1, 0), (-1, -1, 0, 1, 1)] []
sort and inv + c0 [(1, 1, 0, -1, -1), (0, -1, 0, 1, 0), (0, 0, -1, 1, 1), (-1, 0, 0, 1, 1)] []
0

 [3, 2, 0, 3]
sort and inv:      [(0, 1, 0, -1, 0), (0, -1, 0, 0, 0), (-1, -1, 0, 1, 1)] []
sort and inv + c0 [(0, 1, 0, 0, 0), (0, -1, 0, 1, 0), (0, 0, -1, 0, 1)] []
0

 [3, 2, 0]
sort and inv:      [(-1, -1, 0, 0, 1), (0, 0, 0, -1, 0)] []
sort and inv + c0 [(0, -1, -1, 1, 1), (0, 0, 0, 1, 0), (0, 1, 0, 0, 0)] []
0

 [3, 2, 3]
sort and inv:      [(0, 1, 0, -1, 0), (-1, -1, 0, 1, 1), (0, 0, 0, -1, 0)] []
sort and inv + c0 [(0, 0, -1, 1, 1), (0, 0, 0, 1, 0)] []
0

 [3, 2]
sort and inv:      [(-1, 0, 0, 0, 1), (0, -1, 0, 0, 0), (0, 1, 0, -1, 0)] []
sort and inv + c0 [(0, -1, 0, 1, 0), (0, 0, -1, 1, 1), (0, 1, 0, 0, 0)] []
0

 [3, 1, 0, 1]
sort and inv:      [(0, 0, 0, -1, 0), (0, -1, -1, 0, 1)] []
sort and inv + c0 [(0, 0, 0, 1, 0), (0, 0, -1, 1, 1)] []
0

 [3, 1, 0]
sort and inv:      [(0, 0, -1, 0, 1), (0, 1, 1, -1, -1), (0, -1, 0, 0, 0)] []
sort and inv + c0 [(0, 1, 0, 0, 0), (0, 0, 1, 0, -1), (0, -1, -1, 1, 1)] []
0

 [3, 1]
sort and inv:      [(0, 0, -1, 0, 1), (0, 1, 1, -1, -1), (1, -1, -1, 0, 0), (-1, 0, 1, 0, 0)] []
sort and inv + c0 [(1, 0, -1, 0, 0), (0, 0, 1, 0, -1), (-1, 1, 1, 0, 0), (0, -1, -1, 1, 1)] []
0

 [3, 0]
sort and inv:      [(0, 0, 0, -1, 0), (0, -1, -1, 0, 1), (-1, -1, 0, 0, 1), (-1, 0, 1, -1, 0)] []
sort and inv + c0 [(0, 0, 0, 1, 0), (0, 0, -1, 1, 1)] []
0

 [3]
sort and inv:      [(0, 1, 1, -1, -1), (0, -1, 0, 0, 0), (0, 0, -1, 0, 1), (-1, 0, 0, 0, 1)] []
sort and inv + c0 [(0, 0, 1, 0, -1), (0, 1, 0, 0, 0), (0, -1, -1, 1, 1)] []
0

 [2, 1, 0, 2, 1, 2]
sort and inv:      [(0, 0, -1, 0, 1), (0, 1, 0, -1, 0), (0, -1, 0, 0, 0)] []
sort and inv + c0 [(0, 1, 0, 0, 0), (0, -1, 0, 1, 0)] []
0

 [2, 1, 0, 2, 1]
sort and inv:      [(0, 0, -1, -1, 1), (0, 0, 0, -1, 0)] []
sort and inv + c0 [(0, 0, 0, 1, 0)] []
0

 [2, 1, 0, 2]
sort and inv:      [(0, 0, -1, -1, 1), (0, 0, 0, -1, 0)] []
sort and inv + c0 [(0, 0, 0, 1, 0)] []
0

 [2, 1, 0, 1]
sort and inv:      [(1, 1, -1, -1, 0), (0, -1, 0, 0, 0), (-1, 0, 1, 0, 0), (0, 0, -1, 0, 1)] []
sort and inv + c0 [(1, 0, -1, 0, 0), (0, 1, 0, 0, 0), (-1, -1, 1, 1, 0)] []
0

 [2, 1, 0]
sort and inv:      [(1, 0, -1, -1, 0), (0, 0, -1, 0, 1), (-1, 0, 1, 0, 0)] []
sort and inv + c0 [(1, 0, -1, 0, 0), (-1, 0, 1, 1, 0)] []
0

 [2, 1, 2]
sort and inv:      [(-1, 0, 1, 0, 0), (1, 0, -1, -1, 0), (-1, 0, 0, 0, 1)] []
sort and inv + c0 [(1, 0, -1, 0, 0), (-1, 0, 1, 1, 0)] []
0

 [2, 1]
sort and inv:      [(-1, 0, 1, 0, 0), (0, 0, -1, 0, 1), (0, 0, 0, -1, 0)] []
sort and inv + c0 [(0, 0, 0, 1, 0)] []
0

 [2, 0]
sort and inv:      [(0, -1, 0, 0, 0), (-1, -1, 1, 1, 0), (0, 1, 0, -1, 0), (0, 0, -1, 0, 1)] []
sort and inv + c0 [(0, 1, 0, 0, 0), (0, -1, 0, 1, 0)] []
0

 [2]
sort and inv:      [(0, 0, -1, 0, 1), (-1, -1, 1, 1, 0), (0, 0, 0, -1, 0), (0, 1, 0, -1, 0)] []
sort and inv + c0 [(0, 0, 0, 1, 0)] []
0

 [1, 0, 1]
sort and inv:      [(0, 0, -1, 0, 1), (0, -1, 0, 0, 0), (0, 0, 0, -1, 0)] []
sort and inv + c0 [(0, 0, 0, 1, 0)] []
0

 [1, 0]
sort and inv:      [(0, 1, 0, -1, 0), (0, -1, 0, 0, 0), (0, -1, -1, 0, 1)] []
sort and inv + c0 [(0, 1, 0, 0, 0), (0, -1, 0, 1, 0)] []
0

 [1]
sort and inv:      [(0, 1, 0, -1, 0), (1, -1, -1, 0, 0), (-1, 0, 0, 0, 1), (-1, 0, 1, 0, 0)] []
sort and inv + c0 [(1, 0, -1, 0, 0), (-1, 1, 1, 0, 0), (0, -1, 0, 1, 0)] []
0

 [0]
sort and inv:      [(0, 0, -1, 0, 1), (-1, 0, 1, 0, 0), (0, 0, 0, -1, 0), (0, -1, 0, 0, 0)] []
sort and inv + c0 [(0, 0, 0, 1, 0)] []
0

 []
sort and inv:      [(0, 1, 0, -1, 0), (0, -1, 0, 0, 0), (-1, 0, 1, 0, 0), (0, 0, -1, 0, 1)] []
sort and inv + c0 [(0, 1, 0, 0, 0), (0, -1, 0, 1, 0)] []
0
sage: A=CartanMatrix(['C',5])
....: c=[4,3,2,1,0]
....: for v in sortables(A,c[1:]):
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_cone(B(A,c),lam(A,v),[k,kinv])
....:     Q=p_lambda_cone(B(A,c),lam(A,v),[k+[c[0]],kinv+[c[0]]])
....:     print("\n",v)
....:     print("sort and inv:     ",list(map(vector,P.rays())),list(map(vector,
....: P.lines())))
....:     print("sort and inv + c0:",list(map(vector,Q.rays())),list(map(vector,
....: Q.lines())))
....:     print(P.intersection(Q).dimension())

 [3, 2, 1, 0, 3, 2, 1, 3, 2, 3]
sort and inv:      [(0, -1, 0, 0, 0), (0, 1, 0, -1, 0)] []
sort and inv + c0: [(0, 1, 0, 0, 0), (0, -1, 0, 1, 0), (0, 0, -1, 0, 1)] []
0

 [3, 2, 1, 0, 3, 2, 1, 3, 2]
sort and inv:      [(0, 0, 0, -1, 0)] []
sort and inv + c0: [(0, 0, 0, 1, 0), (0, 0, -1, 1, 1)] []
0

 [3, 2, 1, 0, 3, 2, 1, 3]
sort and inv:      [(0, 0, 0, -1, 0)] []
sort and inv + c0: [(0, 0, 0, 1, 0), (0, 0, -1, 1, 1)] []
0

 [3, 2, 1, 0, 3, 2, 1, 2]
sort and inv:      [(1, 1, -1, -1, 0), (0, -1, 0, 0, 0), (-1, 0, 1, 0, 0)] []
sort and inv + c0: [(1, 0, -1, 0, 0), (0, 1, 0, 0, 0), (-1, -1, 1, 1, 0), (0, 0, -1, 0, 1)] []
0

 [3, 2, 1, 0, 3, 2, 1]
sort and inv:      [(-1, 0, 1, 0, 0), (1, 0, -1, -1, 0)] []
sort and inv + c0: [(1, 0, -1, 0, 0), (-1, 0, 1, 1, 0), (0, 0, -1, 0, 1)] []
0

 [3, 2, 1, 0, 3, 2, 3]
sort and inv:      [(1, 0, -1, -1, 0), (-1, 0, 1, 0, 0)] []
sort and inv + c0: [(-1, 0, 1, 1, 0), (1, 0, -1, 0, 0), (0, 0, -1, 1, 1)] []
0

 [3, 2, 1, 0, 3, 2]
sort and inv:      [(0, 0, 0, -1, 0)] []
sort and inv + c0: [(-1, 0, 0, 1, 1), (0, 0, 0, 1, 0), (1, 0, -1, 0, 0)] []
0

 [3, 2, 1, 0, 3, 1]
sort and inv:      [(0, 1, 0, -1, 0), (0, -1, 0, 0, 0)] []
sort and inv + c0: [(0, -1, 0, 1, 0), (0, 1, 0, 0, 0), (1, 1, -1, -1, 0), (-1, -1, 0, 1, 1)] []
0

 [3, 2, 1, 0, 3]
sort and inv:      [(0, 0, 0, -1, 0)] []
sort and inv + c0: [(1, 1, -1, -1, 0), (-1, 0, 0, 1, 1), (0, 0, 0, 1, 0), (0, -1, 0, 1, 0)] []
0

 [3, 2, 1, 0, 2, 1, 2]
sort and inv:      [(0, 0, 0, -1, 0)] []
sort and inv + c0: [(0, -1, -1, 1, 1), (0, 0, 0, 1, 0), (0, 1, 0, 0, 0)] []
0

 [3, 2, 1, 0, 2, 1]
sort and inv:      [(0, -1, 0, 0, 0), (0, 1, 0, -1, 0)] []
sort and inv + c0: [(0, -1, 0, 1, 0), (0, 1, 0, 0, 0), (0, 0, -1, 1, 1)] []
0

 [3, 2, 1, 0, 2]
sort and inv:      [(-1, 0, 1, 0, 0), (0, 1, 0, -1, 0), (1, -1, -1, 0, 0)] []
sort and inv + c0: [(-1, 1, 1, 0, 0), (0, -1, 0, 1, 0), (1, 0, -1, 0, 0), (0, 0, -1, 1, 1)] []
0

 [3, 2, 1, 0, 1]
sort and inv:      [(0, 0, 0, -1, 0)] []
sort and inv + c0: [(1, 0, -1, 0, 0), (-1, -1, 0, 1, 1), (0, 0, 0, 1, 0), (0, 1, 0, 0, 0)] []
0

 [3, 2, 1, 0]
sort and inv:      [(0, -1, 0, 0, 0), (0, 1, 0, -1, 0)] []
sort and inv + c0: [(0, 1, 0, 0, 0), (0, -1, 0, 1, 0), (1, 0, -1, 0, 0), (-1, 0, 0, 1, 1)] []
0

 [3, 2, 1, 3, 2, 3]
sort and inv:      [(-1, 0, 1, 0, 0), (0, 0, -1, 0, 1), (1, 0, 0, -1, -1)] []
sort and inv + c0: [(0, 0, 1, 0, -1), (1, 0, -1, 0, 0), (-1, 0, 0, 1, 1)] []
0

 [3, 2, 1, 3, 2]
sort and inv:      [(-1, 0, 0, 0, 1), (0, 0, 0, -1, 0)] []
sort and inv + c0: [(0, 0, 0, 1, 0), (0, 0, -1, 1, 1)] []
0

 [3, 2, 1, 3]
sort and inv:      [(0, 0, 0, -1, 0), (-1, 0, 0, 0, 1)] []
sort and inv + c0: [(0, 0, 0, 1, 0), (1, 1, -1, 0, 0), (0, 0, -1, 1, 1), (-1, -1, 0, 2, 1)] []
0

 [3, 2, 1, 2]
sort and inv:      [(0, 1, 0, -1, 0), (0, -1, -1, 1, 1), (1, 0, 0, -1, -1), (-1, 0, 1, 0, 0)] []
sort and inv + c0: [(0, 1, 1, -1, -1), (1, 0, -1, 0, 0), (0, -1, 0, 1, 0), (-1, 0, 0, 1, 1)] []
0

 [3, 2, 1]
sort and inv:      [(1, 0, 0, -1, -1), (0, 1, 0, -1, 0), (-1, -1, 0, 1, 1)] []
sort and inv + c0: [(1, 1, 0, -1, -1), (0, -1, 0, 1, 0), (0, 0, -1, 1, 1), (-1, 0, 0, 1, 1)] []
0

 [3, 2, 0, 3]
sort and inv:      [(0, 1, 0, -1, 0), (0, -1, 0, 0, 0), (-1, -1, 0, 1, 1)] []
sort and inv + c0: [(0, 1, 0, 0, 0), (0, -1, 0, 1, 0), (0, 0, -1, 0, 1)] []
0

 [3, 2, 0]
sort and inv:      [(-1, -1, 0, 0, 1), (0, 0, 0, -1, 0)] []
sort and inv + c0: [(0, -1, -1, 1, 1), (0, 0, 0, 1, 0), (0, 1, 0, 0, 0)] []
0

 [3, 2, 3]
sort and inv:      [(0, 1, 0, -1, 0), (-1, -1, 0, 1, 1), (0, 0, 0, -1, 0)] []
sort and inv + c0: [(0, 0, -1, 1, 1), (0, 0, 0, 1, 0)] []
0

 [3, 2]
sort and inv:      [(-1, 0, 0, 0, 1), (0, -1, 0, 0, 0), (0, 1, 0, -1, 0)] []
sort and inv + c0: [(0, -1, 0, 1, 0), (0, 0, -1, 1, 1), (0, 1, 0, 0, 0)] []
0

 [3, 1, 0, 1]
sort and inv:      [(0, 0, 0, -1, 0), (0, -1, -1, 0, 1)] []
sort and inv + c0: [(0, 0, 0, 1, 0), (0, 0, -1, 1, 1)] []
0

 [3, 1, 0]
sort and inv:      [(0, 0, -1, 0, 1), (0, 1, 1, -1, -1), (0, -1, 0, 0, 0)] []
sort and inv + c0: [(0, 1, 0, 0, 0), (0, 0, 1, 0, -1), (0, -1, -1, 1, 1)] []
0

 [3, 1]
sort and inv:      [(0, 0, -1, 0, 1), (0, 1, 1, -1, -1), (1, -1, -1, 0, 0), (-1, 0, 1, 0, 0)] []
sort and inv + c0: [(1, 0, -1, 0, 0), (0, 0, 1, 0, -1), (-1, 1, 1, 0, 0), (0, -1, -1, 1, 1)] []
0

 [3, 0]
sort and inv:      [(0, 0, 0, -1, 0), (0, -1, -1, 0, 1), (-1, -1, 0, 0, 1), (-1, 0, 1, -1, 0)] []
sort and inv + c0: [(0, 0, 0, 1, 0), (0, 0, -1, 1, 1)] []
0

 [3]
sort and inv:      [(0, 1, 1, -1, -1), (0, -1, 0, 0, 0), (0, 0, -1, 0, 1), (-1, 0, 0, 0, 1)] []
sort and inv + c0: [(0, 0, 1, 0, -1), (0, 1, 0, 0, 0), (0, -1, -1, 1, 1)] []
0

 [2, 1, 0, 2, 1, 2]
sort and inv:      [(0, 0, -1, 0, 1), (0, 1, 0, -1, 0), (0, -1, 0, 0, 0)] []
sort and inv + c0: [(0, 1, 0, 0, 0), (0, -1, 0, 1, 0)] []
0

 [2, 1, 0, 2, 1]
sort and inv:      [(0, 0, -1, -1, 1), (0, 0, 0, -1, 0)] []
sort and inv + c0: [(0, 0, 0, 1, 0)] []
0

 [2, 1, 0, 2]
sort and inv:      [(0, 0, -1, -1, 1), (0, 0, 0, -1, 0)] []
sort and inv + c0: [(0, 0, 0, 1, 0)] []
0

 [2, 1, 0, 1]
sort and inv:      [(1, 1, -1, -1, 0), (0, -1, 0, 0, 0), (-1, 0, 1, 0, 0), (0, 0, -1, 0, 1)] []
sort and inv + c0: [(1, 0, -1, 0, 0), (0, 1, 0, 0, 0), (-1, -1, 1, 1, 0)] []
0

 [2, 1, 0]
sort and inv:      [(1, 0, -1, -1, 0), (0, 0, -1, 0, 1), (-1, 0, 1, 0, 0)] []
sort and inv + c0: [(1, 0, -1, 0, 0), (-1, 0, 1, 1, 0)] []
0

 [2, 1, 2]
sort and inv:      [(-1, 0, 1, 0, 0), (1, 0, -1, -1, 0), (-1, 0, 0, 0, 1)] []
sort and inv + c0: [(1, 0, -1, 0, 0), (-1, 0, 1, 1, 0)] []
0

 [2, 1]
sort and inv:      [(-1, 0, 1, 0, 0), (0, 0, -1, 0, 1), (0, 0, 0, -1, 0)] []
sort and inv + c0: [(0, 0, 0, 1, 0)] []
0

 [2, 0]
sort and inv:      [(0, -1, 0, 0, 0), (-1, -1, 1, 1, 0), (0, 1, 0, -1, 0), (0, 0, -1, 0, 1)] []
sort and inv + c0: [(0, 1, 0, 0, 0), (0, -1, 0, 1, 0)] []
0

 [2]
sort and inv:      [(0, 0, -1, 0, 1), (-1, -1, 1, 1, 0), (0, 0, 0, -1, 0), (0, 1, 0, -1, 0)] []
sort and inv + c0: [(0, 0, 0, 1, 0)] []
0

 [1, 0, 1]
sort and inv:      [(0, 0, -1, 0, 1), (0, -1, 0, 0, 0), (0, 0, 0, -1, 0)] []
sort and inv + c0: [(0, 0, 0, 1, 0)] []
0

 [1, 0]
sort and inv:      [(0, 1, 0, -1, 0), (0, -1, 0, 0, 0), (0, -1, -1, 0, 1)] []
sort and inv + c0: [(0, 1, 0, 0, 0), (0, -1, 0, 1, 0)] []
0

 [1]
sort and inv:      [(0, 1, 0, -1, 0), (1, -1, -1, 0, 0), (-1, 0, 0, 0, 1), (-1, 0, 1, 0, 0)] []
sort and inv + c0: [(1, 0, -1, 0, 0), (-1, 1, 1, 0, 0), (0, -1, 0, 1, 0)] []
0

 [0]
sort and inv:      [(0, 0, -1, 0, 1), (-1, 0, 1, 0, 0), (0, 0, 0, -1, 0), (0, -1, 0, 0, 0)] []
sort and inv + c0: [(0, 0, 0, 1, 0)] []
0

 []
sort and inv:      [(0, 1, 0, -1, 0), (0, -1, 0, 0, 0), (-1, 0, 1, 0, 0), (0, 0, -1, 0, 1)] []
sort and inv + c0: [(0, 1, 0, 0, 0), (0, -1, 0, 1, 0)] []
0
sage: A=CartanMatrix(['C',5])
....: c=[4,2,0,3,1]
....: for v in sortables(A,c[1:]):
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_cone(B(A,c),lam(A,v),[k,kinv])
....:     Q=p_lambda_cone(B(A,c),lam(A,v),[k+[c[0]],kinv+[c[0]]])
....:     print("\n",v)
....:     print("sort and inv:     ",list(map(vector,P.rays())),list(map(vector,
....: P.lines())))
....:     print("sort and inv + c0:",list(map(vector,Q.rays())),list(map(vector,
....: Q.lines())))
....:     print(P.intersection(Q).dimension())

 [2, 0, 3, 1, 2, 0, 3, 1, 2, 0]
sort and inv:      [(0, 0, 0, -1, 0)] []
sort and inv + c0: [(0, 0, 1, 0, 1), (0, -1, 0, 0, 0), (0, 0, 0, 1, 0)] []
0

 [2, 0, 3, 1, 2, 0, 3, 1, 2]
sort and inv:      [(0, 0, 1, -1, 1), (0, 0, 0, -1, 0)] []
sort and inv + c0: [(0, -1, 1, 0, 1), (0, 0, 0, 1, 0)] []
0

 [2, 0, 3, 1, 2, 0, 3, 1, 0]
sort and inv:      [(0, 0, 0, -1, 0)] []
sort and inv + c0: [(0, 0, 1, 0, 1), (-1, 0, -1, 0, 0), (0, 0, 0, 1, 0), (1, -1, 1, 0, 0)] []
0

 [2, 0, 3, 1, 2, 0, 3, 1]
sort and inv:      [(0, 0, 1, -1, 1), (0, 0, 0, -1, 0)] []
sort and inv + c0: [(1, -1, 2, 0, 1), (0, 0, 0, 1, 0), (-1, 0, -1, 1, 0), (0, -1, 1, 0, 1)] []
0

 [2, 0, 3, 1, 2, 0, 3]
sort and inv:      [(1, -1, 2, -1, 1), (0, 0, 0, -1, 0), (-1, 1, -1, 0, 0)] []
sort and inv + c0: [(0, 0, 0, 1, 0), (0, -1, 1, 0, 1)] []
0

 [2, 0, 3, 1, 2, 0, 1, 0]
sort and inv:      [(1, -1, 1, -1, 0), (-1, 1, -1, 0, 0)] []
sort and inv + c0: [(1, -1, 1, 0, 0), (-1, 1, -1, 1, 0), (0, 0, 1, 0, 1), (0, -1, 0, 0, 0)] []
0

 [2, 0, 3, 1, 2, 0, 1]
sort and inv:      [(0, 0, -1, 0, -1), (1, -1, 2, -1, 1), (-1, 1, -1, 0, 0)] []
sort and inv + c0: [(1, -1, 1, 0, 0), (-1, 1, -2, 1, -1), (0, 0, 1, 0, 1), (0, -1, 1, 0, 1)] []
0

 [2, 0, 3, 1, 2, 0]
sort and inv:      [(1, -1, 1, -1, 0), (-1, 1, -1, 0, 0), (0, 0, 1, -1, 1)] []
sort and inv + c0: [(1, -1, 1, 0, 0), (-1, 1, -1, 1, 0), (0, -1, 1, 0, 1)] []
0

 [2, 0, 3, 1, 2, 3, 1]
sort and inv:      [(1, -1, 1, -1, 0), (-1, 1, -1, 0, 0)] []
sort and inv + c0: [(0, 0, 1, 0, 1), (1, -1, 1, 0, 0), (-1, 1, -1, 1, 0), (0, -1, 0, -1, 0)] []
0

 [2, 0, 3, 1, 2, 3]
sort and inv:      [(1, -1, 1, -1, 0), (0, 0, 1, 0, 1), (-1, 1, -1, 0, 0)] []
sort and inv + c0: [(1, -1, 1, 0, 0), (-1, 1, -1, 1, 0), (0, -1, 1, -1, 1)] []
0

 [2, 0, 3, 1, 2, 1]
sort and inv:      [(0, 0, 0, -1, 0)] []
sort and inv + c0: [(0, 0, 1, 0, 1), (1, -2, 1, -1, 0), (0, 0, 0, 1, 0), (-1, 1, -1, 1, 0)] []
0

 [2, 0, 3, 1, 2]
sort and inv:      [(0, 0, 1, -1, 1), (0, 0, 0, -1, 0)] []
sort and inv + c0: [(1, -2, 2, -1, 1), (0, 0, 0, 1, 0), (-1, 1, -1, 1, 0)] []
0

 [2, 0, 3, 1, 0]
sort and inv:      [(1, -1, 1, -1, 0), (-1, 2, -2, 1, -1), (0, 0, 1, -1, 1), (0, -1, 1, -1, 1)] []
sort and inv + c0: [(0, 1, -1, 1, -1), (1, -2, 2, -1, 1), (-1, 1, -1, 1, 0)] []
0

 [2, 0, 3, 1]
sort and inv:      [(-1, 2, -1, 0, 0), (0, 0, 0, -1, 0), (0, 0, 1, -1, 1), (1, -2, 2, -2, 1)] []
sort and inv + c0: [(0, -1, 1, 0, 1), (0, 0, 0, 1, 0)] []
0

 [2, 0, 3, 2]
sort and inv:      [(0, 0, 0, -1, 0)] []
sort and inv + c0: [(0, 0, 1, 0, 1), (0, 0, 0, 1, 0), (0, -1, 0, 0, 0)] []
0

 [2, 0, 3]
sort and inv:      [(0, 0, 0, -1, 0), (0, 0, 1, -1, 1)] []
sort and inv + c0: [(0, -1, 1, 0, 1), (0, 0, 0, 1, 0)] []
0

 [2, 0, 1, 2, 0, 1]
sort and inv:      [(0, -1, 1, -1, 1), (0, 1, 0, 0, 0), (0, 0, 0, -1, 0)] []
sort and inv + c0: [(0, 0, 0, 1, 0)] []
0

 [2, 0, 1, 2, 0]
sort and inv:      [(1, 0, 1, 0, 0), (0, -1, 1, -1, 1), (-1, 1, -1, 0, 0), (0, 0, 0, -1, 0)] []
sort and inv + c0: [(0, 0, 0, 1, 0)] []
0

 [2, 0, 1, 2]
sort and inv:      [(1, -1, 1, -1, 0), (0, 1, 0, 1, 0), (-1, 1, -1, 0, 0), (0, -1, 1, -1, 1)] []
sort and inv + c0: [(1, -1, 1, 0, 0), (-1, 1, -1, 1, 0)] []
0

 [2, 0, 1, 0]
sort and inv:      [(0, 1, 0, 0, 0), (1, -1, 1, -1, 0), (0, -1, 1, -1, 1), (-1, 1, -1, 0, 0)] []
sort and inv + c0: [(1, -1, 1, 0, 0), (-1, 1, -1, 1, 0)] []
0

 [2, 0, 1]
sort and inv:      [(-1, 2, -1, 1, 0), (0, -1, 1, -1, 1), (1, -1, 1, -1, 0), (0, 0, 0, -1, 0)] []
sort and inv + c0: [(0, 0, 0, 1, 0)] []
0

 [2, 0]
sort and inv:      [(0, -1, 1, -1, 1), (0, 1, 0, 0, 0), (0, 0, 0, -1, 0)] []
sort and inv + c0: [(0, 0, 0, 1, 0)] []
0

 [2, 3, 1, 2, 3, 1]
sort and inv:      [(0, 1, 0, 0, 0), (0, -1, 0, -1, 0)] []
sort and inv + c0: [(0, 1, 0, 1, 0), (0, -1, 1, 0, 1), (0, -1, 0, 0, 0)] []
0

 [2, 3, 1, 2, 3]
sort and inv:      [(0, 1, 0, 0, 0), (0, -1, 1, -1, 1), (0, 0, -1, 0, -1)] []
sort and inv + c0: [(0, 1, -1, 1, -1), (0, -1, 0, 0, 0), (0, 0, 1, 0, 1)] []
0

 [2, 3, 1, 2, 1]
sort and inv:      [(0, 1, 0, 0, 0), (-1, 0, -1, 0, 0), (1, -1, 1, -1, 0)] []
sort and inv + c0: [(1, 0, 1, 0, 0), (-1, 1, -1, 1, 0), (0, -1, 0, 0, 0), (0, -1, 1, 0, 1)] []
0

 [2, 3, 1, 2]
sort and inv:      [(0, 1, 0, 0, 0), (1, -1, 2, -1, 1), (0, 0, -1, 0, -1), (-1, 0, -1, 0, 0)] []
sort and inv + c0: [(1, 0, 1, 0, 0), (-1, 1, -2, 1, -1), (0, -1, 0, 0, 0), (0, 0, 1, 0, 1)] []
0

 [2, 3, 1]
sort and inv:      [(0, 1, 0, 0, 0), (1, -1, 1, -1, 0), (0, -1, 1, -1, 1), (-1, 1, -2, 1, -1)] []
sort and inv + c0: [(0, 1, -1, 1, -1), (1, -1, 2, -1, 1), (0, -1, 0, 0, 0), (-1, 1, -1, 1, 0)] []
0

 [2, 3, 2]
sort and inv:      [(0, 1, 0, 0, 0), (0, -1, 0, -1, 0)] []
sort and inv + c0: [(0, 1, 0, 1, 0), (0, -1, 1, 0, 1), (0, -1, 0, 0, 0)] []
0

 [2, 3]
sort and inv:      [(0, 1, 0, 0, 0), (0, 0, -1, 0, -1), (0, -1, 1, -1, 1)] []
sort and inv + c0: [(0, 1, -1, 1, -1), (0, 0, 1, 0, 1), (0, -1, 0, 0, 0)] []
0

 [2, 1, 2]
sort and inv:      [(0, -1, 0, -1, 0), (0, 1, 0, 0, 0), (0, 0, 1, -1, 1)] []
sort and inv + c0: [(0, -1, 0, 0, 0), (0, 1, 0, 1, 0)] []
0

 [2, 1]
sort and inv:      [(1, -1, 1, -1, 0), (-1, 0, -1, 0, 0), (0, 0, 1, -1, 1), (0, 1, 0, 0, 0)] []
sort and inv + c0: [(1, 0, 1, 0, 0), (0, -1, 0, 0, 0), (-1, 1, -1, 1, 0)] []
0

 [2]
sort and inv:      [(0, 0, 1, -1, 1), (0, -1, 0, -1, 0), (0, 1, 0, 0, 0)] []
sort and inv + c0: [(0, 1, 0, 1, 0), (0, -1, 0, 0, 0)] []
0

 [0, 3, 1, 0]
sort and inv:      [(0, 1, 0, 0, 0), (0, -1, 0, -1, 0)] []
sort and inv + c0: [(0, 1, 0, 1, 0), (0, 0, 1, 0, 1), (0, -1, 0, 0, 0)] []
0

 [0, 3, 1]
sort and inv:      [(1, 0, 1, 0, 0), (-1, 1, -1, 0, 0), (0, -1, 0, -1, 0)] []
sort and inv + c0: [(0, 1, 0, 1, 0), (0, 0, 1, 0, 1), (1, -1, 1, 0, 0), (-1, 0, -1, 0, 0)] []
0

 [0, 3]
sort and inv:      [(0, 1, 0, 0, 0), (0, -1, 0, -1, 0)] []
sort and inv + c0: [(0, 1, 0, 1, 0), (0, 0, 1, 0, 1), (0, -1, 0, 0, 0)] []
0

 [0, 1, 0]
sort and inv:      [(0, 1, 0, 0, 0), (0, -1, 0, -1, 0), (0, 0, 1, 0, 1)] []
sort and inv + c0: [(0, 1, 0, 1, 0), (0, -1, 0, 0, 0)] []
0

 [0, 1]
sort and inv:      [(1, 0, 1, 0, 0), (-1, 1, -1, 0, 0), (0, -1, 0, -1, 0), (0, 0, 1, 0, 1)] []
sort and inv + c0: [(0, 1, 0, 1, 0), (1, -1, 1, 0, 0), (-1, 0, -1, 0, 0)] []
0

 [0]
sort and inv:      [(0, 1, 0, 0, 0), (0, -1, 0, -1, 0), (0, 0, 1, 0, 1)] []
sort and inv + c0: [(0, 1, 0, 1, 0), (0, -1, 0, 0, 0)] []
0

 [3, 1]
sort and inv:      [(0, 0, 0, -1, 0)] []
sort and inv + c0: [(0, 0, 1, 1, 1), (0, 0, 0, 1, 0)] []
0

 [3]
sort and inv:      [(0, 0, 0, -1, 0)] []
sort and inv + c0: [(0, 0, 1, 1, 1), (0, 0, 0, 1, 0)] []
0

 [1]
sort and inv:      [(0, 0, 0, -1, 0), (0, 0, 1, -1, 1)] []
sort and inv + c0: [(0, 0, 0, 1, 0)] []
0

 []
sort and inv:      [(0, 0, 0, -1, 0), (0, 0, 1, -1, 1)] []
sort and inv + c0: [(0, 0, 0, 1, 0)] []
0
sage: A=CartanMatrix(['C',5])
....: c=[4,3,2,1,0]
....: for v in sortables(A,c[1:]):
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_cone(B(A,c),lam(A,v),[k,kinv])
....:     Q=p_lambda_cone(B(A,c),lam(A,v),[k+[c[0]],kinv+[c[0]]])
....:     print("\n",v)
....:     print("sort and inv:     ",list(map(vector,P.rays())),list(map(vector,
....: P.lines())))
....:     print("sort and inv + c0:",list(map(vector,Q.rays())),list(map(vector,
....: Q.lines())))
....:     print(P.intersection(Q).dimension())
....: 

 [3, 2, 1, 0, 3, 2, 1, 3, 2, 3]
sort and inv:      [(0, -1, 0, 0, 0), (0, 1, 0, -1, 0)] []
sort and inv + c0: [(0, 1, 0, 0, 0), (0, -1, 0, 1, 0), (0, 0, -1, 0, 1)] []
0

 [3, 2, 1, 0, 3, 2, 1, 3, 2]
sort and inv:      [(0, 0, 0, -1, 0)] []
sort and inv + c0: [(0, 0, 0, 1, 0), (0, 0, -1, 1, 1)] []
0

 [3, 2, 1, 0, 3, 2, 1, 3]
sort and inv:      [(0, 0, 0, -1, 0)] []
sort and inv + c0: [(0, 0, 0, 1, 0), (0, 0, -1, 1, 1)] []
0

 [3, 2, 1, 0, 3, 2, 1, 2]
sort and inv:      [(1, 1, -1, -1, 0), (0, -1, 0, 0, 0), (-1, 0, 1, 0, 0)] []
sort and inv + c0: [(1, 0, -1, 0, 0), (0, 1, 0, 0, 0), (-1, -1, 1, 1, 0), (0, 0, -1, 0, 1)] []
0

 [3, 2, 1, 0, 3, 2, 1]
sort and inv:      [(-1, 0, 1, 0, 0), (1, 0, -1, -1, 0)] []
sort and inv + c0: [(1, 0, -1, 0, 0), (-1, 0, 1, 1, 0), (0, 0, -1, 0, 1)] []
0

 [3, 2, 1, 0, 3, 2, 3]
sort and inv:      [(1, 0, -1, -1, 0), (-1, 0, 1, 0, 0)] []
sort and inv + c0: [(-1, 0, 1, 1, 0), (1, 0, -1, 0, 0), (0, 0, -1, 1, 1)] []
0

 [3, 2, 1, 0, 3, 2]
sort and inv:      [(0, 0, 0, -1, 0)] []
sort and inv + c0: [(-1, 0, 0, 1, 1), (0, 0, 0, 1, 0), (1, 0, -1, 0, 0)] []
0

 [3, 2, 1, 0, 3, 1]
sort and inv:      [(0, 1, 0, -1, 0), (0, -1, 0, 0, 0)] []
sort and inv + c0: [(0, -1, 0, 1, 0), (0, 1, 0, 0, 0), (1, 1, -1, -1, 0), (-1, -1, 0, 1, 1)] []
0

 [3, 2, 1, 0, 3]
sort and inv:      [(0, 0, 0, -1, 0)] []
sort and inv + c0: [(1, 1, -1, -1, 0), (-1, 0, 0, 1, 1), (0, 0, 0, 1, 0), (0, -1, 0, 1, 0)] []
0

 [3, 2, 1, 0, 2, 1, 2]
sort and inv:      [(0, 0, 0, -1, 0)] []
sort and inv + c0: [(0, -1, -1, 1, 1), (0, 0, 0, 1, 0), (0, 1, 0, 0, 0)] []
0

 [3, 2, 1, 0, 2, 1]
sort and inv:      [(0, -1, 0, 0, 0), (0, 1, 0, -1, 0)] []
sort and inv + c0: [(0, -1, 0, 1, 0), (0, 1, 0, 0, 0), (0, 0, -1, 1, 1)] []
0

 [3, 2, 1, 0, 2]
sort and inv:      [(-1, 0, 1, 0, 0), (0, 1, 0, -1, 0), (1, -1, -1, 0, 0)] []
sort and inv + c0: [(-1, 1, 1, 0, 0), (0, -1, 0, 1, 0), (1, 0, -1, 0, 0), (0, 0, -1, 1, 1)] []
0

 [3, 2, 1, 0, 1]
sort and inv:      [(0, 0, 0, -1, 0)] []
sort and inv + c0: [(1, 0, -1, 0, 0), (-1, -1, 0, 1, 1), (0, 0, 0, 1, 0), (0, 1, 0, 0, 0)] []
0

 [3, 2, 1, 0]
sort and inv:      [(0, -1, 0, 0, 0), (0, 1, 0, -1, 0)] []
sort and inv + c0: [(0, 1, 0, 0, 0), (0, -1, 0, 1, 0), (1, 0, -1, 0, 0), (-1, 0, 0, 1, 1)] []
0

 [3, 2, 1, 3, 2, 3]
sort and inv:      [(-1, 0, 1, 0, 0), (0, 0, -1, 0, 1), (1, 0, 0, -1, -1)] []
sort and inv + c0: [(0, 0, 1, 0, -1), (1, 0, -1, 0, 0), (-1, 0, 0, 1, 1)] []
0

 [3, 2, 1, 3, 2]
sort and inv:      [(-1, 0, 0, 0, 1), (0, 0, 0, -1, 0)] []
sort and inv + c0: [(0, 0, 0, 1, 0), (0, 0, -1, 1, 1)] []
0

 [3, 2, 1, 3]
sort and inv:      [(0, 0, 0, -1, 0), (-1, 0, 0, 0, 1)] []
sort and inv + c0: [(0, 0, 0, 1, 0), (1, 1, -1, 0, 0), (0, 0, -1, 1, 1), (-1, -1, 0, 2, 1)] []
0

 [3, 2, 1, 2]
sort and inv:      [(0, 1, 0, -1, 0), (0, -1, -1, 1, 1), (1, 0, 0, -1, -1), (-1, 0, 1, 0, 0)] []
sort and inv + c0: [(0, 1, 1, -1, -1), (1, 0, -1, 0, 0), (0, -1, 0, 1, 0), (-1, 0, 0, 1, 1)] []
0

 [3, 2, 1]
sort and inv:      [(1, 0, 0, -1, -1), (0, 1, 0, -1, 0), (-1, -1, 0, 1, 1)] []
sort and inv + c0: [(1, 1, 0, -1, -1), (0, -1, 0, 1, 0), (0, 0, -1, 1, 1), (-1, 0, 0, 1, 1)] []
0

 [3, 2, 0, 3]
sort and inv:      [(0, 1, 0, -1, 0), (0, -1, 0, 0, 0), (-1, -1, 0, 1, 1)] []
sort and inv + c0: [(0, 1, 0, 0, 0), (0, -1, 0, 1, 0), (0, 0, -1, 0, 1)] []
0

 [3, 2, 0]
sort and inv:      [(-1, -1, 0, 0, 1), (0, 0, 0, -1, 0)] []
sort and inv + c0: [(0, -1, -1, 1, 1), (0, 0, 0, 1, 0), (0, 1, 0, 0, 0)] []
0

 [3, 2, 3]
sort and inv:      [(0, 1, 0, -1, 0), (-1, -1, 0, 1, 1), (0, 0, 0, -1, 0)] []
sort and inv + c0: [(0, 0, -1, 1, 1), (0, 0, 0, 1, 0)] []
0

 [3, 2]
sort and inv:      [(-1, 0, 0, 0, 1), (0, -1, 0, 0, 0), (0, 1, 0, -1, 0)] []
sort and inv + c0: [(0, -1, 0, 1, 0), (0, 0, -1, 1, 1), (0, 1, 0, 0, 0)] []
0

 [3, 1, 0, 1]
sort and inv:      [(0, 0, 0, -1, 0), (0, -1, -1, 0, 1)] []
sort and inv + c0: [(0, 0, 0, 1, 0), (0, 0, -1, 1, 1)] []
0

 [3, 1, 0]
sort and inv:      [(0, 0, -1, 0, 1), (0, 1, 1, -1, -1), (0, -1, 0, 0, 0)] []
sort and inv + c0: [(0, 1, 0, 0, 0), (0, 0, 1, 0, -1), (0, -1, -1, 1, 1)] []
0

 [3, 1]
sort and inv:      [(0, 0, -1, 0, 1), (0, 1, 1, -1, -1), (1, -1, -1, 0, 0), (-1, 0, 1, 0, 0)] []
sort and inv + c0: [(1, 0, -1, 0, 0), (0, 0, 1, 0, -1), (-1, 1, 1, 0, 0), (0, -1, -1, 1, 1)] []
0

 [3, 0]
sort and inv:      [(0, 0, 0, -1, 0), (0, -1, -1, 0, 1), (-1, -1, 0, 0, 1), (-1, 0, 1, -1, 0)] []
sort and inv + c0: [(0, 0, 0, 1, 0), (0, 0, -1, 1, 1)] []
0

 [3]
sort and inv:      [(0, 1, 1, -1, -1), (0, -1, 0, 0, 0), (0, 0, -1, 0, 1), (-1, 0, 0, 0, 1)] []
sort and inv + c0: [(0, 0, 1, 0, -1), (0, 1, 0, 0, 0), (0, -1, -1, 1, 1)] []
0

 [2, 1, 0, 2, 1, 2]
sort and inv:      [(0, 0, -1, 0, 1), (0, 1, 0, -1, 0), (0, -1, 0, 0, 0)] []
sort and inv + c0: [(0, 1, 0, 0, 0), (0, -1, 0, 1, 0)] []
0

 [2, 1, 0, 2, 1]
sort and inv:      [(0, 0, -1, -1, 1), (0, 0, 0, -1, 0)] []
sort and inv + c0: [(0, 0, 0, 1, 0)] []
0

 [2, 1, 0, 2]
sort and inv:      [(0, 0, -1, -1, 1), (0, 0, 0, -1, 0)] []
sort and inv + c0: [(0, 0, 0, 1, 0)] []
0

 [2, 1, 0, 1]
sort and inv:      [(1, 1, -1, -1, 0), (0, -1, 0, 0, 0), (-1, 0, 1, 0, 0), (0, 0, -1, 0, 1)] []
sort and inv + c0: [(1, 0, -1, 0, 0), (0, 1, 0, 0, 0), (-1, -1, 1, 1, 0)] []
0

 [2, 1, 0]
sort and inv:      [(1, 0, -1, -1, 0), (0, 0, -1, 0, 1), (-1, 0, 1, 0, 0)] []
sort and inv + c0: [(1, 0, -1, 0, 0), (-1, 0, 1, 1, 0)] []
0

 [2, 1, 2]
sort and inv:      [(-1, 0, 1, 0, 0), (1, 0, -1, -1, 0), (-1, 0, 0, 0, 1)] []
sort and inv + c0: [(1, 0, -1, 0, 0), (-1, 0, 1, 1, 0)] []
0

 [2, 1]
sort and inv:      [(-1, 0, 1, 0, 0), (0, 0, -1, 0, 1), (0, 0, 0, -1, 0)] []
sort and inv + c0: [(0, 0, 0, 1, 0)] []
0

 [2, 0]
sort and inv:      [(0, -1, 0, 0, 0), (-1, -1, 1, 1, 0), (0, 1, 0, -1, 0), (0, 0, -1, 0, 1)] []
sort and inv + c0: [(0, 1, 0, 0, 0), (0, -1, 0, 1, 0)] []
0

 [2]
sort and inv:      [(0, 0, -1, 0, 1), (-1, -1, 1, 1, 0), (0, 0, 0, -1, 0), (0, 1, 0, -1, 0)] []
sort and inv + c0: [(0, 0, 0, 1, 0)] []
0

 [1, 0, 1]
sort and inv:      [(0, 0, -1, 0, 1), (0, -1, 0, 0, 0), (0, 0, 0, -1, 0)] []
sort and inv + c0: [(0, 0, 0, 1, 0)] []
0

 [1, 0]
sort and inv:      [(0, 1, 0, -1, 0), (0, -1, 0, 0, 0), (0, -1, -1, 0, 1)] []
sort and inv + c0: [(0, 1, 0, 0, 0), (0, -1, 0, 1, 0)] []
0

 [1]
sort and inv:      [(0, 1, 0, -1, 0), (1, -1, -1, 0, 0), (-1, 0, 0, 0, 1), (-1, 0, 1, 0, 0)] []
sort and inv + c0: [(1, 0, -1, 0, 0), (-1, 1, 1, 0, 0), (0, -1, 0, 1, 0)] []
0

 [0]
sort and inv:      [(0, 0, -1, 0, 1), (-1, 0, 1, 0, 0), (0, 0, 0, -1, 0), (0, -1, 0, 0, 0)] []
sort and inv + c0: [(0, 0, 0, 1, 0)] []
0

 []
sort and inv:      [(0, 1, 0, -1, 0), (0, -1, 0, 0, 0), (-1, 0, 1, 0, 0), (0, 0, -1, 0, 1)] []
sort and inv + c0: [(0, 1, 0, 0, 0), (0, -1, 0, 1, 0)] []
0
sage: A=CartanMatrix(['C',5])
....: c=[4,3,2,1,0]
....: for v in sortables(A,c[1:]):
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_cone(B(A,c),lam(A,v),[k,kinv+[c[0]]])
....:     Q=p_lambda_cone(B(A,c),lam(A,v),[k+[c[0]],kinv])
....:     print("\n",v)
....:     print("sort and inv:     ",list(map(vector,P.rays())),list(map(vector,
....: P.lines())))
....:     print("sort and inv + c0:",list(map(vector,Q.rays())),list(map(vector,
....: Q.lines())))
....:     print(P.intersection(Q).dimension())

 [3, 2, 1, 0, 3, 2, 1, 3, 2, 3]
sort and inv:      [] []
sort and inv + c0: [(0, 0, -1, 0, 1)] [(0, 0, 0, 1, 0), (0, 1, 0, 0, 0)]
0

 [3, 2, 1, 0, 3, 2, 1, 3, 2]
sort and inv:      [] []
sort and inv + c0: [] []
0

 [3, 2, 1, 0, 3, 2, 1, 3]
sort and inv:      [] []
sort and inv + c0: [] []
0

 [3, 2, 1, 0, 3, 2, 1, 2]
sort and inv:      [] []
sort and inv + c0: [(-1, 0, 0, 0, 1)] [(0, 0, 0, 1, 0), (1, 0, -1, 0, 0), (0, 1, 0, 0, 0)]
0

 [3, 2, 1, 0, 3, 2, 1]
sort and inv:      [] []
sort and inv + c0: [(-1, 0, 0, 0, 1)] [(0, 0, 0, 1, 0), (1, 0, -1, 0, 0)]
0

 [3, 2, 1, 0, 3, 2, 3]
sort and inv:      [] [(0, 0, 0, 1, 0), (1, 0, -1, 0, 0)]
sort and inv + c0: [] []
0

 [3, 2, 1, 0, 3, 2]
sort and inv:      [] []
sort and inv + c0: [(1, 0, -1, 0, 0), (-1, 0, 0, 1, 1)] []
0

 [3, 2, 1, 0, 3, 1]
sort and inv:      [] []
sort and inv + c0: [(1, 0, -1, 0, 0), (-1, 0, 0, 0, 1)] [(0, 0, 0, 1, 0), (0, 1, 0, 0, 0)]
0

 [3, 2, 1, 0, 3]
sort and inv:      [] []
sort and inv + c0: [(1, 1, -1, -1, 0), (0, -1, 0, 1, 0), (-1, 0, 0, 1, 1)] []
0

 [3, 2, 1, 0, 2, 1, 2]
sort and inv:      [] []
sort and inv + c0: [(0, 1, 0, 0, 0), (0, -1, -1, 1, 1)] []
0

 [3, 2, 1, 0, 2, 1]
sort and inv:      [] [(0, 0, 0, 1, 0), (0, 1, 0, 0, 0)]
sort and inv + c0: [] []
0

 [3, 2, 1, 0, 2]
sort and inv:      [] [(0, 0, 0, 1, 0), (1, 0, -1, 0, 0), (0, 1, 0, 0, 0)]
sort and inv + c0: [] []
0

 [3, 2, 1, 0, 1]
sort and inv:      [] []
sort and inv + c0: [(1, 0, -1, 0, 0), (0, 1, 0, 0, 0), (-1, -1, 0, 1, 1)] []
0

 [3, 2, 1, 0]
sort and inv:      [] [(0, 0, 0, 1, 0), (0, 1, 0, 0, 0)]
sort and inv + c0: [(1, 0, -1, 0, 0), (-1, 0, 0, 1, 1)] []
0

 [3, 2, 1, 3, 2, 3]
sort and inv:      [] [(0, 0, 0, 1, 0), (1, 0, 0, 0, -1), (0, 0, 1, 0, -1)]
sort and inv + c0: [] []
0

 [3, 2, 1, 3, 2]
sort and inv:      [] []
sort and inv + c0: [] []
0

 [3, 2, 1, 3]
sort and inv:      [] []
sort and inv + c0: [] []
0

 [3, 2, 1, 2]
sort and inv:      [] [(0, 0, 0, 1, 0), (1, 0, 0, 0, -1), (0, 1, 0, 0, 0), (0, 0, 1, 0, -1)]
sort and inv + c0: [] []
0

 [3, 2, 1]
sort and inv:      [] [(0, 0, 0, 1, 0), (1, 0, 0, 0, -1), (0, 1, 0, 0, 0)]
sort and inv + c0: [] []
0

 [3, 2, 0, 3]
sort and inv:      [] []
sort and inv + c0: [(0, 0, -1, 0, 1), (-1, 0, 0, 0, 1)] [(0, 0, 0, 1, 0), (0, 1, 0, 0, 0)]
0

 [3, 2, 0]
sort and inv:      [] []
sort and inv + c0: [(0, -1, -1, 1, 1), (0, 1, 0, 0, 0)] []
0

 [3, 2, 3]
sort and inv:      [] []
sort and inv + c0: [(0, 1, 0, -1, 0), (-1, -1, 0, 1, 1)] []
0

 [3, 2]
sort and inv:      [] [(0, 0, 0, 1, 0), (0, 1, 0, 0, 0)]
sort and inv + c0: [] []
0

 [3, 1, 0, 1]
sort and inv:      [] []
sort and inv + c0: [] []
0

 [3, 1, 0]
sort and inv:      [] [(0, 0, 0, 1, 0), (0, 0, 1, 0, -1), (0, 1, 0, 0, 0)]
sort and inv + c0: [] []
0

 [3, 1]
sort and inv:      [] [(0, 0, 0, 1, 0), (1, 0, 0, 0, -1), (0, 1, 0, 0, 0), (0, 0, 1, 0, -1)]
sort and inv + c0: [] []
0

 [3, 0]
sort and inv:      [] []
sort and inv + c0: [] []
0

 [3]
sort and inv:      [] [(0, 0, 0, 1, 0), (0, 0, 1, 0, -1), (0, 1, 0, 0, 0)]
sort and inv + c0: [] []
0

 [2, 1, 0, 2, 1, 2]
sort and inv:      [] []
sort and inv + c0: [(0, 0, -1, 0, 1)] [(0, 0, 0, 1, 0), (0, 1, 0, 0, 0)]
0

 [2, 1, 0, 2, 1]
sort and inv:      [] []
sort and inv + c0: [] []
0

 [2, 1, 0, 2]
sort and inv:      [] []
sort and inv + c0: [] []
0

 [2, 1, 0, 1]
sort and inv:      [] []
sort and inv + c0: [(-1, 0, 0, 0, 1)] [(0, 0, 0, 1, 0), (1, 0, -1, 0, 0), (0, 1, 0, 0, 0)]
0

 [2, 1, 0]
sort and inv:      [] []
sort and inv + c0: [(-1, 0, 0, 0, 1)] [(0, 0, 0, 1, 0), (1, 0, -1, 0, 0)]
0

 [2, 1, 2]
sort and inv:      [] [(0, 0, 0, 1, 0), (1, 0, -1, 0, 0)]
sort and inv + c0: [] []
0

 [2, 1]
sort and inv:      [] []
sort and inv + c0: [(0, 0, -1, 0, 1), (-1, 0, 1, 0, 0)] []
0

 [2, 0]
sort and inv:      [] []
sort and inv + c0: [(-1, 0, 1, 0, 0), (0, 0, -1, 0, 1)] [(0, 0, 0, 1, 0), (0, 1, 0, 0, 0)]
0

 [2]
sort and inv:      [] []
sort and inv + c0: [(0, 0, -1, 0, 1), (0, 1, 0, -1, 0), (-1, -1, 1, 1, 0)] []
0

 [1, 0, 1]
sort and inv:      [] []
sort and inv + c0: [(0, 0, -1, 0, 1), (0, -1, 0, 0, 0)] []
0

 [1, 0]
sort and inv:      [] [(0, 0, 0, 1, 0), (0, 1, 0, 0, 0)]
sort and inv + c0: [] []
0

 [1]
sort and inv:      [] [(0, 0, 0, 1, 0), (1, 0, -1, 0, 0), (0, 1, 0, 0, 0)]
sort and inv + c0: [] []
0

 [0]
sort and inv:      [] []
sort and inv + c0: [(0, 0, -1, 0, 1), (0, -1, 0, 0, 0), (-1, 0, 1, 0, 0)] []
0

 []
sort and inv:      [] [(0, 0, 0, 1, 0), (0, 1, 0, 0, 0)]
sort and inv + c0: [(0, 0, -1, 0, 1), (-1, 0, 1, 0, 0)] []
0
sage: A=CartanMatrix(['C',5])
....: c=[4,3,2,1,0]
....: for v in sortables(A,c[1:]):
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_cone(B(A,c),lam(A,v),[k,kinv+[c[0]]])
....:     Q=p_lambda_cone(B(A,c),lam(A,v),[k+[c[0]],kinv])
....:     print("\n",v)
....:     print("sort and (inv+c0):",list(map(vector,P.rays())),list(map(vector,
....: P.lines())))
....:     print("(sort+c0) and inv:",list(map(vector,Q.rays())),list(map(vector,
....: Q.lines())))
....:     print(P.intersection(Q).dimension())

 [3, 2, 1, 0, 3, 2, 1, 3, 2, 3]
sort and (inv+c0): [] []
(sort+c0) and inv: [(0, 0, -1, 0, 1)] [(0, 0, 0, 1, 0), (0, 1, 0, 0, 0)]
0

 [3, 2, 1, 0, 3, 2, 1, 3, 2]
sort and (inv+c0): [] []
(sort+c0) and inv: [] []
0

 [3, 2, 1, 0, 3, 2, 1, 3]
sort and (inv+c0): [] []
(sort+c0) and inv: [] []
0

 [3, 2, 1, 0, 3, 2, 1, 2]
sort and (inv+c0): [] []
(sort+c0) and inv: [(-1, 0, 0, 0, 1)] [(0, 0, 0, 1, 0), (1, 0, -1, 0, 0), (0, 1, 0, 0, 0)]
0

 [3, 2, 1, 0, 3, 2, 1]
sort and (inv+c0): [] []
(sort+c0) and inv: [(-1, 0, 0, 0, 1)] [(0, 0, 0, 1, 0), (1, 0, -1, 0, 0)]
0

 [3, 2, 1, 0, 3, 2, 3]
sort and (inv+c0): [] [(0, 0, 0, 1, 0), (1, 0, -1, 0, 0)]
(sort+c0) and inv: [] []
0

 [3, 2, 1, 0, 3, 2]
sort and (inv+c0): [] []
(sort+c0) and inv: [(1, 0, -1, 0, 0), (-1, 0, 0, 1, 1)] []
0

 [3, 2, 1, 0, 3, 1]
sort and (inv+c0): [] []
(sort+c0) and inv: [(1, 0, -1, 0, 0), (-1, 0, 0, 0, 1)] [(0, 0, 0, 1, 0), (0, 1, 0, 0, 0)]
0

 [3, 2, 1, 0, 3]
sort and (inv+c0): [] []
(sort+c0) and inv: [(1, 1, -1, -1, 0), (0, -1, 0, 1, 0), (-1, 0, 0, 1, 1)] []
0

 [3, 2, 1, 0, 2, 1, 2]
sort and (inv+c0): [] []
(sort+c0) and inv: [(0, 1, 0, 0, 0), (0, -1, -1, 1, 1)] []
0

 [3, 2, 1, 0, 2, 1]
sort and (inv+c0): [] [(0, 0, 0, 1, 0), (0, 1, 0, 0, 0)]
(sort+c0) and inv: [] []
0

 [3, 2, 1, 0, 2]
sort and (inv+c0): [] [(0, 0, 0, 1, 0), (1, 0, -1, 0, 0), (0, 1, 0, 0, 0)]
(sort+c0) and inv: [] []
0

 [3, 2, 1, 0, 1]
sort and (inv+c0): [] []
(sort+c0) and inv: [(1, 0, -1, 0, 0), (0, 1, 0, 0, 0), (-1, -1, 0, 1, 1)] []
0

 [3, 2, 1, 0]
sort and (inv+c0): [] [(0, 0, 0, 1, 0), (0, 1, 0, 0, 0)]
(sort+c0) and inv: [(1, 0, -1, 0, 0), (-1, 0, 0, 1, 1)] []
0

 [3, 2, 1, 3, 2, 3]
sort and (inv+c0): [] [(0, 0, 0, 1, 0), (1, 0, 0, 0, -1), (0, 0, 1, 0, -1)]
(sort+c0) and inv: [] []
0

 [3, 2, 1, 3, 2]
sort and (inv+c0): [] []
(sort+c0) and inv: [] []
0

 [3, 2, 1, 3]
sort and (inv+c0): [] []
(sort+c0) and inv: [] []
0

 [3, 2, 1, 2]
sort and (inv+c0): [] [(0, 0, 0, 1, 0), (1, 0, 0, 0, -1), (0, 1, 0, 0, 0), (0, 0, 1, 0, -1)]
(sort+c0) and inv: [] []
0

 [3, 2, 1]
sort and (inv+c0): [] [(0, 0, 0, 1, 0), (1, 0, 0, 0, -1), (0, 1, 0, 0, 0)]
(sort+c0) and inv: [] []
0

 [3, 2, 0, 3]
sort and (inv+c0): [] []
(sort+c0) and inv: [(0, 0, -1, 0, 1), (-1, 0, 0, 0, 1)] [(0, 0, 0, 1, 0), (0, 1, 0, 0, 0)]
0

 [3, 2, 0]
sort and (inv+c0): [] []
(sort+c0) and inv: [(0, -1, -1, 1, 1), (0, 1, 0, 0, 0)] []
0

 [3, 2, 3]
sort and (inv+c0): [] []
(sort+c0) and inv: [(0, 1, 0, -1, 0), (-1, -1, 0, 1, 1)] []
0

 [3, 2]
sort and (inv+c0): [] [(0, 0, 0, 1, 0), (0, 1, 0, 0, 0)]
(sort+c0) and inv: [] []
0

 [3, 1, 0, 1]
sort and (inv+c0): [] []
(sort+c0) and inv: [] []
0

 [3, 1, 0]
sort and (inv+c0): [] [(0, 0, 0, 1, 0), (0, 0, 1, 0, -1), (0, 1, 0, 0, 0)]
(sort+c0) and inv: [] []
0

 [3, 1]
sort and (inv+c0): [] [(0, 0, 0, 1, 0), (1, 0, 0, 0, -1), (0, 1, 0, 0, 0), (0, 0, 1, 0, -1)]
(sort+c0) and inv: [] []
0

 [3, 0]
sort and (inv+c0): [] []
(sort+c0) and inv: [] []
0

 [3]
sort and (inv+c0): [] [(0, 0, 0, 1, 0), (0, 0, 1, 0, -1), (0, 1, 0, 0, 0)]
(sort+c0) and inv: [] []
0

 [2, 1, 0, 2, 1, 2]
sort and (inv+c0): [] []
(sort+c0) and inv: [(0, 0, -1, 0, 1)] [(0, 0, 0, 1, 0), (0, 1, 0, 0, 0)]
0

 [2, 1, 0, 2, 1]
sort and (inv+c0): [] []
(sort+c0) and inv: [] []
0

 [2, 1, 0, 2]
sort and (inv+c0): [] []
(sort+c0) and inv: [] []
0

 [2, 1, 0, 1]
sort and (inv+c0): [] []
(sort+c0) and inv: [(-1, 0, 0, 0, 1)] [(0, 0, 0, 1, 0), (1, 0, -1, 0, 0), (0, 1, 0, 0, 0)]
0

 [2, 1, 0]
sort and (inv+c0): [] []
(sort+c0) and inv: [(-1, 0, 0, 0, 1)] [(0, 0, 0, 1, 0), (1, 0, -1, 0, 0)]
0

 [2, 1, 2]
sort and (inv+c0): [] [(0, 0, 0, 1, 0), (1, 0, -1, 0, 0)]
(sort+c0) and inv: [] []
0

 [2, 1]
sort and (inv+c0): [] []
(sort+c0) and inv: [(0, 0, -1, 0, 1), (-1, 0, 1, 0, 0)] []
0

 [2, 0]
sort and (inv+c0): [] []
(sort+c0) and inv: [(-1, 0, 1, 0, 0), (0, 0, -1, 0, 1)] [(0, 0, 0, 1, 0), (0, 1, 0, 0, 0)]
0

 [2]
sort and (inv+c0): [] []
(sort+c0) and inv: [(0, 0, -1, 0, 1), (0, 1, 0, -1, 0), (-1, -1, 1, 1, 0)] []
0

 [1, 0, 1]
sort and (inv+c0): [] []
(sort+c0) and inv: [(0, 0, -1, 0, 1), (0, -1, 0, 0, 0)] []
0

 [1, 0]
sort and (inv+c0): [] [(0, 0, 0, 1, 0), (0, 1, 0, 0, 0)]
(sort+c0) and inv: [] []
0

 [1]
sort and (inv+c0): [] [(0, 0, 0, 1, 0), (1, 0, -1, 0, 0), (0, 1, 0, 0, 0)]
(sort+c0) and inv: [] []
0

 [0]
sort and (inv+c0): [] []
(sort+c0) and inv: [(0, 0, -1, 0, 1), (0, -1, 0, 0, 0), (-1, 0, 1, 0, 0)] []
0

 []
sort and (inv+c0): [] [(0, 0, 0, 1, 0), (0, 1, 0, 0, 0)]
(sort+c0) and inv: [(0, 0, -1, 0, 1), (-1, 0, 1, 0, 0)] []
0
sage: 
