Last login: Mon Nov  4 06:24:45 on ttys000

The default interactive shell is now zsh.
To update your account to use zsh, please run `chsh -s /bin/zsh`.
For more details, please visit https://support.apple.com/kb/HT208050.
MA-C02K804RDR53:~ reading$ sage
┌────────────────────────────────────────────────────────────────────┐
│ SageMath version 10.2, Release Date: 2023-12-03                    │
│ Using Python 3.11.1. Type "help()" for help.                       │
└────────────────────────────────────────────────────────────────────┘
sage: print?
Signature:      print(*args, sep=' ', end='\n', file=None, flush=False)
Docstring:     
Prints the values to a stream, or to sys.stdout by default.

   sep
      string inserted between values, default a space.

   end
      string appended after the last value, default a newline.

   file
      a file-like object (stream); defaults to the current sys.stdout.

   flush
      whether to forcibly flush the stream.
Init docstring: Initialize self.  See help(type(self)) for accurate signature.
File:           
Type:           builtin_function_or_method
sage: for i in range(10000):
....:     print(i,end='\r')
....: 
sage: for i in range(10000000):
....:     print(i,end='\r')
....: 
sage: binomial(12,6)
924
sage: attach('/Users/reading/git/affine_dominance/software/domination5.py')
sage: A=CartanMatrix(['C',7])
....: c=[6,4,2,0,5,3,1]
....: num=0
....: for v in sortables(A,c[1:]):
....:     fails=true
....:     num+=1
....:     print(num,v)
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     Ps=list(p_lambda(B(A,c),lam(A,v),seq) for seq in [k,kinv,k+[c[0]],kinv
....: 
....: +[c[0]]])
....:     for i in range(len(Ps)):
....:         for j in range(i+1,len(Ps)):
....:             if Ps[i].intersection(Ps[j]).dimension()==0:
....:                 print(i,j)
....:                 fails=false
....:                 break
....:     if fails:
....:         print('FAILS!')
....:         break
....: 
1 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 4, 2, 0]
0 3
1 2
2 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 4, 2]
0 3
1 2
3 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 4, 0]
0 3
1 2
4 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 4]
0 3
1 2
5 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 2, 0]
0 3
1 2
6 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 2]
0 3
1 2
7 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 0]
0 3
1 2
8 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1]
0 3
1 2
9 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 4]
0 3
1 2
10 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3]
0 3
1 2
11 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 1, 0]
1 2
12 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 1]
1 2
13 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 4, 2, 0, 5]
1 2
14 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 4, 2, 0, 3, 1, 2, 0]
0 3
15 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 4, 2, 0, 3, 1, 2]
0 3
1 2
16 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 4, 2, 0, 3, 1, 0]
0 3
17 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 4, 2, 0, 3, 1]
0 3
1 2
18 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 4, 2, 0, 3]
0 3
19 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 4, 2, 0, 1, 0]
0 3
20 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 4, 2, 0, 1]
0 3
1 2
21 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 4, 2, 0]
0 3
1 2
22 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 4, 2, 5, 3, 1, 4]
0 3
1 2
23 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 4, 2, 5, 3, 1]
0 3
1 2
24 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 4, 2, 5, 3, 4]
0 3
1 2
25 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 4, 2, 5, 3]
0 3
1 2
26 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 4, 2, 5, 1]
0 3
1 2
27 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 4, 2, 5]
0 3
1 2
28 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 4, 2, 3, 1]
0 3
29 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 4, 2, 3]
0 3
30 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 4, 2, 1]
0 3
31 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 4, 2]
0 3
32 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 4, 0, 5]
1 2
33 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 4, 0]
0 3
1 2
34 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 4, 5]
0 3
1 2
35 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 4]
0 3
1 2
36 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 2, 0, 1, 0]
0 3
37 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 2, 0, 1]
0 3
1 2
38 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 2, 0]
0 3
1 2
39 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 2, 1]
0 3
40 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 2]
0 3
41 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1, 0]
0 3
1 2
42 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 1]
0 3
1 2
43 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 4, 2, 5]
0 3
1 2
44 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 4, 2]
0 3
45 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 4, 5]
0 3
1 2
46 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 4]
0 3
1 2
47 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3, 2]
0 3
48 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 3]
0 3
1 2
49 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 1, 0]
0 3
50 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5, 1]
0 3
51 [4, 2, 0, 5, 3, 1, 4, 2, 0, 5]
0 3
52 [4, 2, 0, 5, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1, 0]
1 2
53 [4, 2, 0, 5, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3, 1]
1 2
54 [4, 2, 0, 5, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 3]
1 2
55 [4, 2, 0, 5, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 1, 0]
1 2
56 [4, 2, 0, 5, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0, 1]
1 2
57 [4, 2, 0, 5, 3, 1, 4, 2, 0, 3, 1, 4, 2, 0]
1 2
58 [4, 2, 0, 5, 3, 1, 4, 2, 0, 3, 1, 4, 2, 3, 1]
0 3
1 2
59 [4, 2, 0, 5, 3, 1, 4, 2, 0, 3, 1, 4, 2, 3]
0 3
1 2
60 [4, 2, 0, 5, 3, 1, 4, 2, 0, 3, 1, 4, 2, 1]
0 3
1 2
61 [4, 2, 0, 5, 3, 1, 4, 2, 0, 3, 1, 4, 2]
0 3
1 2
62 [4, 2, 0, 5, 3, 1, 4, 2, 0, 3, 1, 4, 0]
1 2
63 [4, 2, 0, 5, 3, 1, 4, 2, 0, 3, 1, 4]
0 3
1 2
64 [4, 2, 0, 5, 3, 1, 4, 2, 0, 3, 1, 2, 0, 1, 0]
FAILS!
sage: sage: A=CartanMatrix(['C',5])
....: ....: c=[4,3,2,1,0]
....: ....: num=0
....: ....: for v in sortables(A,c[1:]):
....: ....:     num+=1
....: ....:     k=list(reversed(v))
....: ....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....: ....:     P=p_lambda_cone(B(A,c),lam(A,v),[k,k+[c[0]]])
....: ....:     Q=p_lambda_cone(B(A,c),lam(A,v),[kinv,kinv+[c[0]]])
....: ....:     b=bool(P.translation(-lam(A,v))==-(Q.translation(-lam(A,v))))
....: ....:     print(num,v,b)
....: ....:     if b==false:
....: ....:         print('Failure!')
....: 
1 [3, 2, 1, 0, 3, 2, 1, 3, 2, 3] True
2 [3, 2, 1, 0, 3, 2, 1, 3, 2] True
3 [3, 2, 1, 0, 3, 2, 1, 3] True
4 [3, 2, 1, 0, 3, 2, 1, 2] True
5 [3, 2, 1, 0, 3, 2, 1] True
6 [3, 2, 1, 0, 3, 2, 3] True
7 [3, 2, 1, 0, 3, 2] True
8 [3, 2, 1, 0, 3, 1] True
9 [3, 2, 1, 0, 3] True
10 [3, 2, 1, 0, 2, 1, 2] True
11 [3, 2, 1, 0, 2, 1] True
12 [3, 2, 1, 0, 2] True
13 [3, 2, 1, 0, 1] True
14 [3, 2, 1, 0] True
15 [3, 2, 1, 3, 2, 3] True
16 [3, 2, 1, 3, 2] True
17 [3, 2, 1, 3] True
18 [3, 2, 1, 2] True
19 [3, 2, 1] True
20 [3, 2, 0, 3] True
21 [3, 2, 0] True
22 [3, 2, 3] True
23 [3, 2] True
24 [3, 1, 0, 1] True
25 [3, 1, 0] True
26 [3, 1] True
27 [3, 0] True
28 [3] True
29 [2, 1, 0, 2, 1, 2] True
30 [2, 1, 0, 2, 1] True
31 [2, 1, 0, 2] True
32 [2, 1, 0, 1] True
33 [2, 1, 0] True
34 [2, 1, 2] True
35 [2, 1] True
36 [2, 0] True
37 [2] True
38 [1, 0, 1] True
39 [1, 0] True
40 [1] True
41 [0] True
42 [] True
sage: A=CartanMatrix(['C',5])
....: c=[4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_cone(B(A,c),lam(A,v),[k,k+[c[0]]])
....:     Q=p_lambda_cone(B(A,c),lam(A,v),[kinv,kinv+[c[0]]])
....:     b=bool(P.translation(-lam(A,v))==-(Q.translation(-lam(A,v))))
....:     print(num,v,b)
....:     if b==false:
....:         print('Failure!')
1 [3, 2, 1, 0, 3, 2, 1, 3, 2, 3] True
2 [3, 2, 1, 0, 3, 2, 1, 3, 2] True
3 [3, 2, 1, 0, 3, 2, 1, 3] True
4 [3, 2, 1, 0, 3, 2, 1, 2] True
5 [3, 2, 1, 0, 3, 2, 1] True
6 [3, 2, 1, 0, 3, 2, 3] True
7 [3, 2, 1, 0, 3, 2] True
8 [3, 2, 1, 0, 3, 1] True
9 [3, 2, 1, 0, 3] True
10 [3, 2, 1, 0, 2, 1, 2] True
11 [3, 2, 1, 0, 2, 1] True
12 [3, 2, 1, 0, 2] True
13 [3, 2, 1, 0, 1] True
14 [3, 2, 1, 0] True
15 [3, 2, 1, 3, 2, 3] True
16 [3, 2, 1, 3, 2] True
17 [3, 2, 1, 3] True
18 [3, 2, 1, 2] True
19 [3, 2, 1] True
20 [3, 2, 0, 3] True
21 [3, 2, 0] True
22 [3, 2, 3] True
23 [3, 2] True
24 [3, 1, 0, 1] True
25 [3, 1, 0] True
26 [3, 1] True
27 [3, 0] True
28 [3] True
29 [2, 1, 0, 2, 1, 2] True
30 [2, 1, 0, 2, 1] True
31 [2, 1, 0, 2] True
32 [2, 1, 0, 1] True
33 [2, 1, 0] True
34 [2, 1, 2] True
35 [2, 1] True
36 [2, 0] True
37 [2] True
38 [1, 0, 1] True
39 [1, 0] True
40 [1] True
41 [0] True
42 [] True
sage: A=CartanMatrix(['C',5])
....: c=[4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     p_lambda_cone(B(A,c),lam(A,v),[k,k+[c[0]]])
....: 
....: 
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
sage: A=CartanMatrix(['C',5])
....: c=[4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     p_lambda_int(B(A,c),lam(A,v),[k,k+[c[0]]])
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 9 vertices and 7 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 10 vertices and 5 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 5 vertices and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 8 vertices and 6 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 6 vertices and 5 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 14 vertices and 2 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 7 vertices and 2 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 5 vertices and 6 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 12 vertices and 1 ray
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 14 vertices and 3 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 14 vertices and 3 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 20 vertices and 1 ray
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 15 vertices and 1 ray
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 23 vertices
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 12 vertices and 7 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 7 vertices and 5 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 6 vertices and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 13 vertices and 6 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 14 vertices and 1 ray
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 4 vertices and 5 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 5 vertices and 2 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 5 vertices and 5 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 6 vertices and 2 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 6 vertices and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 6 vertices and 5 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 6 vertices and 5 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 3 vertices and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 3 vertices and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 4 vertices and 5 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 3 vertices and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 2 vertices and 5 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 4 vertices and 6 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 4 vertices and 7 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 4 vertices and 6 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 3 vertices and 6 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 2 vertices and 5 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 2 vertices and 5 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 2 vertices and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 2 vertices and 5 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 2 vertices and 5 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
sage: A=CartanMatrix(['C',5])
....: c=[4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     p_lambda_cone(B(A,c),lam(A,v),[k,k+[c[0]]])
....: 
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
^[[AA 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
sage: A=CartanMatrix(['C',5])
....: c=[4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_cone(B(A,c),lam(A,v),[k,k+[c[0]]])
....:     print(map(vector,(P.rays()),\n,P.dimension()))
....: 
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
Cell In [12], line 9
      7 kinv=list(reversed(inv_sortable(A,c[Integer(1):],v)))
      8 P=p_lambda_cone(B(A,c),lam(A,v),[k,k+[c[Integer(0)]]])
----> 9 print(map(vector,(P.rays()), * BackslashOperator() * n,P.dimension()))

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/misc/misc.py:608, in BackslashOperator.__mul__(self, right)
    606 from sage.misc.superseded import deprecation
    607 deprecation(36394, 'the backslash operator has been deprecated')
--> 608 return self.left._backslash_(right)

AttributeError: 'BackslashOperator' object has no attribute 'left'
sage: A=CartanMatrix(['C',5])
....: c=[4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_cone(B(A,c),lam(A,v),[k,k+[c[0]]])
....:     print(map(vector,(P.rays()),P.lines()))
....: 
<map object at 0x153a813c0>
<map object at 0x153aa41c0>
<map object at 0x1537fb7c0>
<map object at 0x1537cb850>
<map object at 0x1537d1630>
<map object at 0x153281690>
<map object at 0x1531c4af0>
<map object at 0x1531c71c0>
<map object at 0x153108af0>
<map object at 0x15310ac20>
<map object at 0x1530ec880>
<map object at 0x1530edab0>
<map object at 0x1530ed390>
<map object at 0x1530edfc0>
<map object at 0x1530ed150>
<map object at 0x1530ecd00>
<map object at 0x1530ec7c0>
<map object at 0x1530ecd90>
<map object at 0x1530eea10>
<map object at 0x1530ed810>
<map object at 0x1530ee5c0>
<map object at 0x1530ed570>
<map object at 0x1530ee0b0>
<map object at 0x1530eee30>
<map object at 0x1530eea40>
<map object at 0x1530ee500>
<map object at 0x1530eefb0>
<map object at 0x1530eea40>
<map object at 0x1530edcc0>
<map object at 0x1530ef220>
<map object at 0x1530ecc40>
<map object at 0x1530ec5b0>
<map object at 0x1530ed3f0>
<map object at 0x1530ef220>
<map object at 0x1530ec7f0>
<map object at 0x1530ef1c0>
<map object at 0x1530eeda0>
<map object at 0x1530ee6e0>
<map object at 0x1530ed480>
<map object at 0x1530ed630>
<map object at 0x1530ecee0>
<map object at 0x1530ede10>
sage: A=CartanMatrix(['C',5])
....: c=[4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_cone(B(A,c),lam(A,v),[k,k+[c[0]]])
....:     print(list(map(vector,(P.rays()),P.lines())))
....: 
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
sage: A=CartanMatrix(['C',5])
....: c=[4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_cone(B(A,c),lam(A,v),[k,k+[c[0]]])
....:     print(list(map(vector,(P.rays()),P.lines())))
....:     print(P)
....: 
[]
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
[]
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
[]
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
[]
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
[]
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
[]
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
[]
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
[]
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
[]
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
[]
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
[]
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
[]
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
[]
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
[]
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
[]
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
[]
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
[]
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
[]
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
[]
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
[]
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
[]
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
[]
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
[]
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
[]
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
[]
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
[]
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
[]
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
[]
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
[]
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
[]
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
[]
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
[]
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
[]
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
[]
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
[]
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
[]
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
[]
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
^[[A[]
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
[]
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
[]
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
[]
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
[]
A 4-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 4 rays
sage: A=CartanMatrix(['C',5])
....: c=[4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_cone(B(A,c),lam(A,v),[k,k+[c[0]]])
....:     print(list(map(vector,P.rays())),P.lines())
....: 
[(0, 0, 1, 0, -1), (0, 1, 0, -1, 0), (0, -1, 0, 0, 0), (1, 0, -1, 0, 0)] ()
[(1, -1, -1, 0, 0), (0, 0, 1, 0, -1), (0, 1, 0, -1, 0), (0, 1, 0, 0, 0)] ()
[(-1, 1, 1, 0, 0), (0, 0, 1, 0, -1), (1, 0, -1, -1, 0), (1, 0, -1, 0, 0)] ()
[(0, 0, 1, 0, -1), (1, 1, -1, -1, 0), (0, -1, 0, 0, 0), (-1, 0, 1, 0, 0)] ()
[(0, 0, 1, 0, -1), (0, 1, 0, 0, 0), (1, 0, -1, -1, 0), (-1, 0, 1, 0, 0)] ()
[(-1, 0, 1, 1, 0), (0, 1, 0, -1, 0), (1, 0, -1, 0, 0), (1, 0, 0, -1, -1)] ()
[(1, 0, 0, -1, -1), (1, 1, -1, -1, 0), (-1, 0, 1, 1, 0), (-1, 0, 1, 0, 0)] ()
[(1, 1, 0, -1, -1), (-1, -1, 1, 1, 0), (0, -1, 0, 0, 0), (0, 1, 0, -1, 0)] ()
[(1, 0, 0, -1, -1), (-1, -1, 1, 1, 0), (0, 1, 0, 0, 0), (0, 1, 0, -1, 0)] ()
[(0, 1, 1, -1, -1), (0, -1, 0, 1, 0), (0, -1, 0, 0, 0), (1, 0, -1, 0, 0)] ()
[(1, -1, -1, 0, 0), (0, -1, 0, 1, 0), (0, 1, 0, 0, 0), (0, 1, 1, -1, -1)] ()
[(-1, 1, 1, 0, 0), (0, -1, 0, 1, 0), (1, 0, -1, 0, 0), (1, 0, 0, -1, -1)] ()
[(1, 1, 0, -1, -1), (-1, 0, 1, 0, 0), (0, -1, 0, 1, 0), (0, -1, 0, 0, 0)] ()
[(1, 0, 0, -1, -1), (0, 1, 0, 0, 0), (-1, 0, 1, 0, 0), (0, -1, 0, 1, 0)] ()
[(1, 0, -1, 0, 0), (-1, 0, 0, 1, 1), (0, 0, 1, 0, -1), (0, 1, 0, -1, 0)] ()
[(1, 1, -1, -1, 0), (-1, 0, 0, 1, 1), (0, 0, 1, 0, -1), (-1, 0, 1, 0, 0)] ()
[(-1, -1, 1, 1, 0), (-1, 0, 0, 1, 1), (0, 1, 0, -1, 0), (1, 1, 0, -1, -1)] ()
[(1, 0, -1, 0, 0), (-1, 0, 0, 1, 1), (0, 1, 1, -1, -1), (0, -1, 0, 1, 0)] ()
[(1, 1, 0, -1, -1), (0, -1, 0, 1, 0), (-1, 0, 0, 1, 1), (-1, 0, 1, 0, 0)] ()
[(0, 0, 1, 0, -1), (0, -1, 0, 0, 0), (-1, -1, 0, 1, 1), (0, 1, 0, -1, 0)] ()
[(0, 1, 1, -1, -1), (-1, -1, 0, 1, 1), (0, -1, 0, 1, 0), (0, -1, 0, 0, 0)] ()
[(-1, -1, 0, 1, 1), (0, 1, 0, -1, 0), (0, 0, 1, 0, -1), (0, 1, 0, 0, 0)] ()
[(-1, -1, 0, 1, 1), (0, -1, 0, 1, 0), (0, 1, 0, 0, 0), (0, 1, 1, -1, -1)] ()
[(0, -1, -1, 1, 1), (0, 0, 1, 0, -1), (0, -1, 0, 0, 0), (1, 0, -1, 0, 0)] ()
[(0, 1, 0, 0, 0), (0, -1, -1, 1, 1), (0, 0, 1, 0, -1), (1, -1, -1, 0, 0)] ()
[(1, 0, -1, 0, 0), (-1, 1, 1, 0, 0), (0, -1, -1, 1, 1), (0, 0, 1, 0, -1)] ()
[(-1, 0, 1, 0, 0), (0, -1, -1, 1, 1), (0, 0, 1, 0, -1), (0, -1, 0, 0, 0)] ()
[(0, 1, 0, 0, 0), (0, -1, -1, 1, 1), (0, 0, 1, 0, -1), (-1, 0, 1, 0, 0)] ()
[(0, 1, 0, -1, 0), (0, -1, 0, 0, 0), (0, 0, -1, 0, 1), (1, 0, -1, 0, 0)] ()
[(0, 0, -1, 0, 1), (1, -1, -1, 0, 0), (0, 1, 0, -1, 0), (0, 1, 0, 0, 0)] ()
[(-1, 1, 1, 0, 0), (0, 0, -1, 0, 1), (1, 0, -1, 0, 0), (1, 0, -1, -1, 0)] ()
[(1, 1, -1, -1, 0), (0, -1, 0, 0, 0), (-1, 0, 1, 0, 0), (0, 0, -1, 0, 1)] ()
[(0, 1, 0, 0, 0), (1, 0, -1, -1, 0), (-1, 0, 1, 0, 0), (0, 0, -1, 0, 1)] ()
[(1, 0, -1, 0, 0), (-1, 0, 1, 1, 0), (0, 1, 0, -1, 0), (0, 0, -1, 0, 1)] ()
[(1, 1, -1, -1, 0), (0, 0, -1, 0, 1), (-1, 0, 1, 1, 0), (-1, 0, 1, 0, 0)] ()
[(0, -1, 0, 0, 0), (-1, -1, 1, 1, 0), (0, 1, 0, -1, 0), (0, 0, -1, 0, 1)] ()
[(-1, -1, 1, 1, 0), (0, 0, -1, 0, 1), (0, 1, 0, 0, 0), (0, 1, 0, -1, 0)] ()
[(0, 0, -1, 0, 1), (0, -1, 0, 1, 0), (0, -1, 0, 0, 0), (1, 0, -1, 0, 0)] ()
[(0, 1, 0, 0, 0), (0, -1, 0, 1, 0), (0, 0, -1, 0, 1), (1, -1, -1, 0, 0)] ()
[(1, 0, -1, 0, 0), (-1, 1, 1, 0, 0), (0, -1, 0, 1, 0), (0, 0, -1, 0, 1)] ()
[(0, 0, -1, 0, 1), (-1, 0, 1, 0, 0), (0, -1, 0, 1, 0), (0, -1, 0, 0, 0)] ()
[(0, 1, 0, 0, 0), (0, -1, 0, 1, 0), (-1, 0, 1, 0, 0), (0, 0, -1, 0, 1)] ()
sage: A=CartanMatrix(['C',5])
....: c=[4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_cone(B(A,c),lam(A,v),[k,k+[c[0]]])
....:     print(list(sorted(map(vector,P.rays()))),P.lines())
[(0, -1, 0, 0, 0), (0, 0, 1, 0, -1), (0, 1, 0, -1, 0), (1, 0, -1, 0, 0)] ()
[(0, 0, 1, 0, -1), (0, 1, 0, -1, 0), (0, 1, 0, 0, 0), (1, -1, -1, 0, 0)] ()
[(-1, 1, 1, 0, 0), (0, 0, 1, 0, -1), (1, 0, -1, -1, 0), (1, 0, -1, 0, 0)] ()
[(-1, 0, 1, 0, 0), (0, -1, 0, 0, 0), (0, 0, 1, 0, -1), (1, 1, -1, -1, 0)] ()
[(-1, 0, 1, 0, 0), (0, 0, 1, 0, -1), (0, 1, 0, 0, 0), (1, 0, -1, -1, 0)] ()
[(-1, 0, 1, 1, 0), (0, 1, 0, -1, 0), (1, 0, -1, 0, 0), (1, 0, 0, -1, -1)] ()
[(-1, 0, 1, 0, 0), (-1, 0, 1, 1, 0), (1, 0, 0, -1, -1), (1, 1, -1, -1, 0)] ()
[(-1, -1, 1, 1, 0), (0, -1, 0, 0, 0), (0, 1, 0, -1, 0), (1, 1, 0, -1, -1)] ()
[(-1, -1, 1, 1, 0), (0, 1, 0, -1, 0), (0, 1, 0, 0, 0), (1, 0, 0, -1, -1)] ()
[(0, -1, 0, 0, 0), (0, -1, 0, 1, 0), (0, 1, 1, -1, -1), (1, 0, -1, 0, 0)] ()
[(0, -1, 0, 1, 0), (0, 1, 0, 0, 0), (0, 1, 1, -1, -1), (1, -1, -1, 0, 0)] ()
[(-1, 1, 1, 0, 0), (0, -1, 0, 1, 0), (1, 0, -1, 0, 0), (1, 0, 0, -1, -1)] ()
[(-1, 0, 1, 0, 0), (0, -1, 0, 0, 0), (0, -1, 0, 1, 0), (1, 1, 0, -1, -1)] ()
[(-1, 0, 1, 0, 0), (0, -1, 0, 1, 0), (0, 1, 0, 0, 0), (1, 0, 0, -1, -1)] ()
[(-1, 0, 0, 1, 1), (0, 0, 1, 0, -1), (0, 1, 0, -1, 0), (1, 0, -1, 0, 0)] ()
[(-1, 0, 0, 1, 1), (-1, 0, 1, 0, 0), (0, 0, 1, 0, -1), (1, 1, -1, -1, 0)] ()
[(-1, -1, 1, 1, 0), (-1, 0, 0, 1, 1), (0, 1, 0, -1, 0), (1, 1, 0, -1, -1)] ()
[(-1, 0, 0, 1, 1), (0, -1, 0, 1, 0), (0, 1, 1, -1, -1), (1, 0, -1, 0, 0)] ()
[(-1, 0, 0, 1, 1), (-1, 0, 1, 0, 0), (0, -1, 0, 1, 0), (1, 1, 0, -1, -1)] ()
[(-1, -1, 0, 1, 1), (0, -1, 0, 0, 0), (0, 0, 1, 0, -1), (0, 1, 0, -1, 0)] ()
[(-1, -1, 0, 1, 1), (0, -1, 0, 0, 0), (0, -1, 0, 1, 0), (0, 1, 1, -1, -1)] ()
[(-1, -1, 0, 1, 1), (0, 0, 1, 0, -1), (0, 1, 0, -1, 0), (0, 1, 0, 0, 0)] ()
[(-1, -1, 0, 1, 1), (0, -1, 0, 1, 0), (0, 1, 0, 0, 0), (0, 1, 1, -1, -1)] ()
[(0, -1, -1, 1, 1), (0, -1, 0, 0, 0), (0, 0, 1, 0, -1), (1, 0, -1, 0, 0)] ()
[(0, -1, -1, 1, 1), (0, 0, 1, 0, -1), (0, 1, 0, 0, 0), (1, -1, -1, 0, 0)] ()
[(-1, 1, 1, 0, 0), (0, -1, -1, 1, 1), (0, 0, 1, 0, -1), (1, 0, -1, 0, 0)] ()
[(-1, 0, 1, 0, 0), (0, -1, -1, 1, 1), (0, -1, 0, 0, 0), (0, 0, 1, 0, -1)] ()
[(-1, 0, 1, 0, 0), (0, -1, -1, 1, 1), (0, 0, 1, 0, -1), (0, 1, 0, 0, 0)] ()
[(0, -1, 0, 0, 0), (0, 0, -1, 0, 1), (0, 1, 0, -1, 0), (1, 0, -1, 0, 0)] ()
[(0, 0, -1, 0, 1), (0, 1, 0, -1, 0), (0, 1, 0, 0, 0), (1, -1, -1, 0, 0)] ()
[(-1, 1, 1, 0, 0), (0, 0, -1, 0, 1), (1, 0, -1, -1, 0), (1, 0, -1, 0, 0)] ()
[(-1, 0, 1, 0, 0), (0, -1, 0, 0, 0), (0, 0, -1, 0, 1), (1, 1, -1, -1, 0)] ()
[(-1, 0, 1, 0, 0), (0, 0, -1, 0, 1), (0, 1, 0, 0, 0), (1, 0, -1, -1, 0)] ()
[(-1, 0, 1, 1, 0), (0, 0, -1, 0, 1), (0, 1, 0, -1, 0), (1, 0, -1, 0, 0)] ()
[(-1, 0, 1, 0, 0), (-1, 0, 1, 1, 0), (0, 0, -1, 0, 1), (1, 1, -1, -1, 0)] ()
[(-1, -1, 1, 1, 0), (0, -1, 0, 0, 0), (0, 0, -1, 0, 1), (0, 1, 0, -1, 0)] ()
[(-1, -1, 1, 1, 0), (0, 0, -1, 0, 1), (0, 1, 0, -1, 0), (0, 1, 0, 0, 0)] ()
[(0, -1, 0, 0, 0), (0, -1, 0, 1, 0), (0, 0, -1, 0, 1), (1, 0, -1, 0, 0)] ()
[(0, -1, 0, 1, 0), (0, 0, -1, 0, 1), (0, 1, 0, 0, 0), (1, -1, -1, 0, 0)] ()
[(-1, 1, 1, 0, 0), (0, -1, 0, 1, 0), (0, 0, -1, 0, 1), (1, 0, -1, 0, 0)] ()
[(-1, 0, 1, 0, 0), (0, -1, 0, 0, 0), (0, -1, 0, 1, 0), (0, 0, -1, 0, 1)] ()
[(-1, 0, 1, 0, 0), (0, -1, 0, 1, 0), (0, 0, -1, 0, 1), (0, 1, 0, 0, 0)] ()
sage: A=CartanMatrix(['C',5])
....: c=[4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_cone(B(A,c),lam(A,v),[k,k+[c[0]]])
....:     print(matrix(list(sorted(map(vector,P.rays())))),P.lines())
[ 0 -1  0  0  0]
[ 0  0  1  0 -1]
[ 0  1  0 -1  0]
[ 1  0 -1  0  0] ()
[ 0  0  1  0 -1]
[ 0  1  0 -1  0]
[ 0  1  0  0  0]
[ 1 -1 -1  0  0] ()
[-1  1  1  0  0]
[ 0  0  1  0 -1]
[ 1  0 -1 -1  0]
[ 1  0 -1  0  0] ()
[-1  0  1  0  0]
[ 0 -1  0  0  0]
[ 0  0  1  0 -1]
[ 1  1 -1 -1  0] ()
[-1  0  1  0  0]
[ 0  0  1  0 -1]
[ 0  1  0  0  0]
[ 1  0 -1 -1  0] ()
[-1  0  1  1  0]
[ 0  1  0 -1  0]
[ 1  0 -1  0  0]
[ 1  0  0 -1 -1] ()
[-1  0  1  0  0]
[-1  0  1  1  0]
[ 1  0  0 -1 -1]
[ 1  1 -1 -1  0] ()
[-1 -1  1  1  0]
[ 0 -1  0  0  0]
[ 0  1  0 -1  0]
[ 1  1  0 -1 -1] ()
[-1 -1  1  1  0]
[ 0  1  0 -1  0]
[ 0  1  0  0  0]
[ 1  0  0 -1 -1] ()
[ 0 -1  0  0  0]
[ 0 -1  0  1  0]
[ 0  1  1 -1 -1]
[ 1  0 -1  0  0] ()
[ 0 -1  0  1  0]
[ 0  1  0  0  0]
[ 0  1  1 -1 -1]
[ 1 -1 -1  0  0] ()
[-1  1  1  0  0]
[ 0 -1  0  1  0]
[ 1  0 -1  0  0]
[ 1  0  0 -1 -1] ()
[-1  0  1  0  0]
[ 0 -1  0  0  0]
[ 0 -1  0  1  0]
[ 1  1  0 -1 -1] ()
[-1  0  1  0  0]
[ 0 -1  0  1  0]
[ 0  1  0  0  0]
[ 1  0  0 -1 -1] ()
[-1  0  0  1  1]
[ 0  0  1  0 -1]
[ 0  1  0 -1  0]
[ 1  0 -1  0  0] ()
[-1  0  0  1  1]
[-1  0  1  0  0]
[ 0  0  1  0 -1]
[ 1  1 -1 -1  0] ()
[-1 -1  1  1  0]
[-1  0  0  1  1]
[ 0  1  0 -1  0]
[ 1  1  0 -1 -1] ()
[-1  0  0  1  1]
[ 0 -1  0  1  0]
[ 0  1  1 -1 -1]
[ 1  0 -1  0  0] ()
[-1  0  0  1  1]
[-1  0  1  0  0]
[ 0 -1  0  1  0]
[ 1  1  0 -1 -1] ()
[-1 -1  0  1  1]
[ 0 -1  0  0  0]
[ 0  0  1  0 -1]
[ 0  1  0 -1  0] ()
[-1 -1  0  1  1]
[ 0 -1  0  0  0]
[ 0 -1  0  1  0]
[ 0  1  1 -1 -1] ()
[-1 -1  0  1  1]
[ 0  0  1  0 -1]
[ 0  1  0 -1  0]
[ 0  1  0  0  0] ()
[-1 -1  0  1  1]
[ 0 -1  0  1  0]
[ 0  1  0  0  0]
[ 0  1  1 -1 -1] ()
[ 0 -1 -1  1  1]
[ 0 -1  0  0  0]
[ 0  0  1  0 -1]
[ 1  0 -1  0  0] ()
[ 0 -1 -1  1  1]
[ 0  0  1  0 -1]
[ 0  1  0  0  0]
[ 1 -1 -1  0  0] ()
[-1  1  1  0  0]
[ 0 -1 -1  1  1]
[ 0  0  1  0 -1]
[ 1  0 -1  0  0] ()
[-1  0  1  0  0]
[ 0 -1 -1  1  1]
[ 0 -1  0  0  0]
[ 0  0  1  0 -1] ()
[-1  0  1  0  0]
[ 0 -1 -1  1  1]
[ 0  0  1  0 -1]
[ 0  1  0  0  0] ()
[ 0 -1  0  0  0]
[ 0  0 -1  0  1]
[ 0  1  0 -1  0]
[ 1  0 -1  0  0] ()
[ 0  0 -1  0  1]
[ 0  1  0 -1  0]
[ 0  1  0  0  0]
[ 1 -1 -1  0  0] ()
[-1  1  1  0  0]
[ 0  0 -1  0  1]
[ 1  0 -1 -1  0]
[ 1  0 -1  0  0] ()
[-1  0  1  0  0]
[ 0 -1  0  0  0]
[ 0  0 -1  0  1]
[ 1  1 -1 -1  0] ()
[-1  0  1  0  0]
[ 0  0 -1  0  1]
[ 0  1  0  0  0]
[ 1  0 -1 -1  0] ()
[-1  0  1  1  0]
[ 0  0 -1  0  1]
[ 0  1  0 -1  0]
[ 1  0 -1  0  0] ()
[-1  0  1  0  0]
[-1  0  1  1  0]
[ 0  0 -1  0  1]
[ 1  1 -1 -1  0] ()
[-1 -1  1  1  0]
[ 0 -1  0  0  0]
[ 0  0 -1  0  1]
[ 0  1  0 -1  0] ()
[-1 -1  1  1  0]
[ 0  0 -1  0  1]
[ 0  1  0 -1  0]
[ 0  1  0  0  0] ()
[ 0 -1  0  0  0]
[ 0 -1  0  1  0]
[ 0  0 -1  0  1]
[ 1  0 -1  0  0] ()
[ 0 -1  0  1  0]
[ 0  0 -1  0  1]
[ 0  1  0  0  0]
[ 1 -1 -1  0  0] ()
[-1  1  1  0  0]
[ 0 -1  0  1  0]
[ 0  0 -1  0  1]
[ 1  0 -1  0  0] ()
[-1  0  1  0  0]
[ 0 -1  0  0  0]
[ 0 -1  0  1  0]
[ 0  0 -1  0  1] ()
[-1  0  1  0  0]
[ 0 -1  0  1  0]
[ 0  0 -1  0  1]
[ 0  1  0  0  0] ()
sage: A=CartanMatrix(['C',5])
....: c=[4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_cone(B(A,c),lam(A,v),[k,k+[c[0]]])
....:     print(matrix(list(sorted(map(vector,P.rays())))),P.lines(),"\n")
[ 0 -1  0  0  0]
[ 0  0  1  0 -1]
[ 0  1  0 -1  0]
[ 1  0 -1  0  0] () 

[ 0  0  1  0 -1]
[ 0  1  0 -1  0]
[ 0  1  0  0  0]
[ 1 -1 -1  0  0] () 

[-1  1  1  0  0]
[ 0  0  1  0 -1]
[ 1  0 -1 -1  0]
[ 1  0 -1  0  0] () 

[-1  0  1  0  0]
[ 0 -1  0  0  0]
[ 0  0  1  0 -1]
[ 1  1 -1 -1  0] () 

[-1  0  1  0  0]
[ 0  0  1  0 -1]
[ 0  1  0  0  0]
[ 1  0 -1 -1  0] () 

[-1  0  1  1  0]
[ 0  1  0 -1  0]
[ 1  0 -1  0  0]
[ 1  0  0 -1 -1] () 

[-1  0  1  0  0]
[-1  0  1  1  0]
[ 1  0  0 -1 -1]
[ 1  1 -1 -1  0] () 

[-1 -1  1  1  0]
[ 0 -1  0  0  0]
[ 0  1  0 -1  0]
[ 1  1  0 -1 -1] () 

[-1 -1  1  1  0]
[ 0  1  0 -1  0]
[ 0  1  0  0  0]
[ 1  0  0 -1 -1] () 

[ 0 -1  0  0  0]
[ 0 -1  0  1  0]
[ 0  1  1 -1 -1]
[ 1  0 -1  0  0] () 

[ 0 -1  0  1  0]
[ 0  1  0  0  0]
[ 0  1  1 -1 -1]
[ 1 -1 -1  0  0] () 

[-1  1  1  0  0]
[ 0 -1  0  1  0]
[ 1  0 -1  0  0]
[ 1  0  0 -1 -1] () 

[-1  0  1  0  0]
[ 0 -1  0  0  0]
[ 0 -1  0  1  0]
[ 1  1  0 -1 -1] () 

[-1  0  1  0  0]
[ 0 -1  0  1  0]
[ 0  1  0  0  0]
[ 1  0  0 -1 -1] () 

[-1  0  0  1  1]
[ 0  0  1  0 -1]
[ 0  1  0 -1  0]
[ 1  0 -1  0  0] () 

[-1  0  0  1  1]
[-1  0  1  0  0]
[ 0  0  1  0 -1]
[ 1  1 -1 -1  0] () 

[-1 -1  1  1  0]
[-1  0  0  1  1]
[ 0  1  0 -1  0]
[ 1  1  0 -1 -1] () 

[-1  0  0  1  1]
[ 0 -1  0  1  0]
[ 0  1  1 -1 -1]
[ 1  0 -1  0  0] () 

[-1  0  0  1  1]
[-1  0  1  0  0]
[ 0 -1  0  1  0]
[ 1  1  0 -1 -1] () 

[-1 -1  0  1  1]
[ 0 -1  0  0  0]
[ 0  0  1  0 -1]
[ 0  1  0 -1  0] () 

[-1 -1  0  1  1]
[ 0 -1  0  0  0]
[ 0 -1  0  1  0]
[ 0  1  1 -1 -1] () 

[-1 -1  0  1  1]
[ 0  0  1  0 -1]
[ 0  1  0 -1  0]
[ 0  1  0  0  0] () 

[-1 -1  0  1  1]
[ 0 -1  0  1  0]
[ 0  1  0  0  0]
[ 0  1  1 -1 -1] () 

[ 0 -1 -1  1  1]
[ 0 -1  0  0  0]
[ 0  0  1  0 -1]
[ 1  0 -1  0  0] () 

[ 0 -1 -1  1  1]
[ 0  0  1  0 -1]
[ 0  1  0  0  0]
[ 1 -1 -1  0  0] () 

[-1  1  1  0  0]
[ 0 -1 -1  1  1]
[ 0  0  1  0 -1]
[ 1  0 -1  0  0] () 

[-1  0  1  0  0]
[ 0 -1 -1  1  1]
[ 0 -1  0  0  0]
[ 0  0  1  0 -1] () 

[-1  0  1  0  0]
[ 0 -1 -1  1  1]
[ 0  0  1  0 -1]
[ 0  1  0  0  0] () 

[ 0 -1  0  0  0]
[ 0  0 -1  0  1]
[ 0  1  0 -1  0]
[ 1  0 -1  0  0] () 

[ 0  0 -1  0  1]
[ 0  1  0 -1  0]
[ 0  1  0  0  0]
[ 1 -1 -1  0  0] () 

[-1  1  1  0  0]
[ 0  0 -1  0  1]
[ 1  0 -1 -1  0]
[ 1  0 -1  0  0] () 

[-1  0  1  0  0]
[ 0 -1  0  0  0]
[ 0  0 -1  0  1]
[ 1  1 -1 -1  0] () 

[-1  0  1  0  0]
[ 0  0 -1  0  1]
[ 0  1  0  0  0]
[ 1  0 -1 -1  0] () 

[-1  0  1  1  0]
[ 0  0 -1  0  1]
[ 0  1  0 -1  0]
[ 1  0 -1  0  0] () 

[-1  0  1  0  0]
[-1  0  1  1  0]
[ 0  0 -1  0  1]
[ 1  1 -1 -1  0] () 

[-1 -1  1  1  0]
[ 0 -1  0  0  0]
[ 0  0 -1  0  1]
[ 0  1  0 -1  0] () 

[-1 -1  1  1  0]
[ 0  0 -1  0  1]
[ 0  1  0 -1  0]
[ 0  1  0  0  0] () 

[ 0 -1  0  0  0]
[ 0 -1  0  1  0]
[ 0  0 -1  0  1]
[ 1  0 -1  0  0] () 

[ 0 -1  0  1  0]
[ 0  0 -1  0  1]
[ 0  1  0  0  0]
[ 1 -1 -1  0  0] () 

[-1  1  1  0  0]
[ 0 -1  0  1  0]
[ 0  0 -1  0  1]
[ 1  0 -1  0  0] () 

[-1  0  1  0  0]
[ 0 -1  0  0  0]
[ 0 -1  0  1  0]
[ 0  0 -1  0  1] () 

[-1  0  1  0  0]
[ 0 -1  0  1  0]
[ 0  0 -1  0  1]
[ 0  1  0  0  0] () 

sage: A=CartanMatrix(['A',2])
....: c=[0,1]
....: p_lambda(B(A,c),lam(A,[]),[0])
A 2-dimensional polyhedron in QQ^2 defined as the convex hull of 1 vertex and 2 rays
sage: A=CartanMatrix(['A',2])
....: c=[0,1]
....: P=p_lambda(B(A,c),lam(A,[]),[0])
sage: A=CartanMatrix(['A',2])
....: c=[0,1]
....: P=p_lambda(B(A,c),lam(A,[]),[0])
sage: A=CartanMatrix(['A',2])
....: c=[0,1]
....: P=p_lambda(B(A,c),lam(A,[]),[0])
sage: A=CartanMatrix(['A',2])
....: c=[0,1]
....: P=p_lambda(B(A,c),lam(A,[]),[0])
sage: A=CartanMatrix(['A',2])
....: c=[0,1]
....: P=p_lambda(B(A,c),lam(A,[]),[0])
....: Q=p_lambda(B(A,c),lam(A,[]),[0,1])
sage: A=CartanMatrix(['A',2])
....: c=[0,1]
....: P=p_lambda(B(A,c),lam(A,[]),[0])
....: Q=p_lambda(B(A,c),lam(A,[]),[0,1]):
....: plot(P,fill="red")
  Cell In [26], line 4
    Q=p_lambda(B(A,c),lam(A,[]),[Integer(0),Integer(1)]):
                                                        ^
SyntaxError: invalid syntax

sage: A=CartanMatrix(['A',2])
....: c=[0,1]
....: P=p_lambda(B(A,c),lam(A,[]),[0])
....: Q=p_lambda(B(A,c),lam(A,[]),[0,1])
....: P.plot(fill="red")+Q.plot(fill="blue")
Launched png viewer for Graphics object consisting of 10 graphics primitives
sage: A=CartanMatrix(['A',2])
....: c=[0,1]
....: P=p_lambda(B(A,c),lam(A,[]),[0])
....: Q=p_lambda(B(A,c),lam(A,[]),[0,1])
....: P.plot(fill="red")+Q.plot(fill="blue")
Launched png viewer for Graphics object consisting of 10 graphics primitives
sage: A=CartanMatrix(['A',2])
....: c=[0,1]
....: v=[]
....: P=p_lambda(B(A,c),lam(A,v),[0])
....: Q=p_lambda(B(A,c),lam(A,v),[0,1])
....: P.plot(fill="red")+Q.plot(fill="blue"):
....: p_lambda_int(B(A,c),lam(A,v),[[0],[0,1]])
  Cell In [29], line 6
    P.plot(fill="red")+Q.plot(fill="blue"):
                                          ^
SyntaxError: invalid syntax

sage: A=CartanMatrix(['A',2])
....: c=[0,1]
....: v=[]
....: P=p_lambda(B(A,c),lam(A,v),[0])
....: Q=p_lambda(B(A,c),lam(A,v),[0,1])
....: P.plot(fill="red")+Q.plot(fill="blue")
....: p_lambda_int(B(A,c),lam(A,v),[[0],[0,1]])
Launched png viewer for Graphics object consisting of 10 graphics primitives
A 0-dimensional polyhedron in QQ^2 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['A',2])
....: c=[0,1]
....: v=[1]
....: P=p_lambda(B(A,c),lam(A,v),[0])
....: Q=p_lambda(B(A,c),lam(A,v),[0,1])
....: P.plot(fill="red")+Q.plot(fill="blue")
....: p_lambda_int(B(A,c),lam(A,v),[[0],[0,1]])
Launched png viewer for Graphics object consisting of 10 graphics primitives
A 1-dimensional polyhedron in QQ^2 defined as the convex hull of 2 vertices
sage: A=CartanMatrix(['C',2])
....: c=[0,1]
....: v=[1]
....: P=p_lambda(B(A,c),lam(A,v),[0])
....: Q=p_lambda(B(A,c),lam(A,v),[0,1])
....: P.plot(fill="red")+Q.plot(fill="blue")
....: p_lambda_int(B(A,c),lam(A,v),[[0],[0,1]])
Launched png viewer for Graphics object consisting of 10 graphics primitives
A 1-dimensional polyhedron in QQ^2 defined as the convex hull of 2 vertices
sage: A=CartanMatrix(['C',2])
....: c=[1,0]
....: v=[1]
....: P=p_lambda(B(A,c),lam(A,v),[0])
....: Q=p_lambda(B(A,c),lam(A,v),[0,1])
....: P.plot(fill="red")+Q.plot(fill="blue")
....: p_lambda_int(B(A,c),lam(A,v),[[0],[0,1]])
Launched png viewer for Graphics object consisting of 9 graphics primitives
A 0-dimensional polyhedron in QQ^2 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['C',2])
....: c=[1,0]
....: v=[1]
....: P=p_lambda(B(A,c),lam(A,v),[1])
....: Q=p_lambda(B(A,c),lam(A,v),[1,0])
....: P.plot(fill="red")+Q.plot(fill="blue")
....: p_lambda_int(B(A,c),lam(A,v),[[0],[0,1]])
Launched png viewer for Graphics object consisting of 11 graphics primitives
A 0-dimensional polyhedron in QQ^2 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['C',2])
....: c=[1,0]
....: v=[1]
....: P=p_lambda(B(A,c),lam(A,v),[0])
....: Q=p_lambda(B(A,c),lam(A,v),[0,1])
....: P.plot(fill="red")+Q.plot(fill="blue")
....: p_lambda_int(B(A,c),lam(A,v),[[0],[0,1]])
Launched png viewer for Graphics object consisting of 9 graphics primitives
A 0-dimensional polyhedron in QQ^2 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['C',2])
....: c=[1,0]
....: v=[0]
....: P=p_lambda(B(A,c),lam(A,v),[0])
....: Q=p_lambda(B(A,c),lam(A,v),[0,1])
....: P.plot(fill="red")+Q.plot(fill="blue")
....: p_lambda_int(B(A,c),lam(A,v),[[0],[0,1]])
Launched png viewer for Graphics object consisting of 10 graphics primitives
A 1-dimensional polyhedron in QQ^2 defined as the convex hull of 2 vertices
sage: A=CartanMatrix(['C',2])
....: c=[1,0]
....: v=[]
....: P=p_lambda(B(A,c),lam(A,v),[0])
....: Q=p_lambda(B(A,c),lam(A,v),[0,1])
....: P.plot(fill="red")+Q.plot(fill="blue")
....: p_lambda_int(B(A,c),lam(A,v),[[0],[0,1]])
Launched png viewer for Graphics object consisting of 10 graphics primitives
A 1-dimensional polyhedron in QQ^2 defined as the convex hull of 2 vertices
sage: A=CartanMatrix(['C',2])
....: c=[1,0]
....: v=[]
....: P=p_lambda(B(A,c),lam(A,v),[0])
....: Q=p_lambda(B(A,c),lam(A,v),[0,1])
....: P.plot(fill="red")+Q.plot(fill="blue")
....: p_lambda_int(B(A,c),lam(A,v),[[0],[0,1]])
Launched png viewer for Graphics object consisting of 10 graphics primitives
A 1-dimensional polyhedron in QQ^2 defined as the convex hull of 2 vertices
sage: A=CartanMatrix(['C',2])
....: c=[1,0]
....: v=[0]
....: P=p_lambda(B(A,c),lam(A,v),[0])
....: Q=p_lambda(B(A,c),lam(A,v),[0,1])
....: P.plot(fill="red")+Q.plot(fill="blue")
....: p_lambda_int(B(A,c),lam(A,v),[[0],[0,1]])
Launched png viewer for Graphics object consisting of 10 graphics primitives
A 1-dimensional polyhedron in QQ^2 defined as the convex hull of 2 vertices
sage: B(A,c)
[ 0 -2]
[ 1  0]
sage: A=CartanMatrix(['C',2])
....: c=[1,0]
....: v=[0]
....: P=p_lambda(B(A,c),lam(A,v),[0])
....: Q=p_lambda(B(A,c),lam(A,v),[0,1])
....: P.plot(fill="red")+Q.plot(fill="blue")
....: p_lambda_int(B(A,c),lam(A,v),[[0],[0,1]])
Launched png viewer for Graphics object consisting of 10 graphics primitives
A 1-dimensional polyhedron in QQ^2 defined as the convex hull of 2 vertices
sage: A=CartanMatrix(['C',2])
....: c=[1,0]
....: v=[0]
....: P=p_lambda(B(A,c),lam(A,v),[])
....: Q=p_lambda(B(A,c),lam(A,v),[1])
....: P.plot(fill="red")+Q.plot(fill="blue")
....: p_lambda_int(B(A,c),lam(A,v),[[0],[0,1]])
Launched png viewer for Graphics object consisting of 8 graphics primitives
A 1-dimensional polyhedron in QQ^2 defined as the convex hull of 2 vertices
sage: A=CartanMatrix(['C',2])
....: c=[1,0]
....: v=[]
....: P=p_lambda(B(A,c),lam(A,v),[])
....: Q=p_lambda(B(A,c),lam(A,v),[1])
....: P.plot(fill="red")+Q.plot(fill="blue")
....: p_lambda_int(B(A,c),lam(A,v),[[0],[0,1]])
Launched png viewer for Graphics object consisting of 8 graphics primitives
A 1-dimensional polyhedron in QQ^2 defined as the convex hull of 2 vertices
sage: A=CartanMatrix(['C',2])
....: c=[1,0]
....: v=[]
....: P=p_lambda(B(A,c),lam(A,v),[])
....: Q=p_lambda(B(A,c),lam(A,v),[1])
....: P.plot(fill="red")+Q.plot(fill="blue")
....: p_lambda_int(B(A,c),lam(A,v),[[0],[0,1]])
Launched png viewer for Graphics object consisting of 8 graphics primitives
A 1-dimensional polyhedron in QQ^2 defined as the convex hull of 2 vertices
sage: lam(A,v)
(1, 1)
sage: A=CartanMatrix(['C',2])
....: c=[1,0]
....: v=[0]
....: P=p_lambda(B(A,c),lam(A,v),[0])
....: Q=p_lambda(B(A,c),lam(A,v),[0,1])
....: P.plot(fill="red")+Q.plot(fill="blue")
....: 
Launched png viewer for Graphics object consisting of 10 graphics primitives
sage: lam(A,v)
(-1, 2)
sage: A=CartanMatrix(['C',2])
....: c=[1,0]
....: v=[0]
....: p_lambda_cone(B(A,c),lam(A,v),[[0],[0,1]])
....: 
A 1-dimensional polyhedron in QQ^2 defined as the convex hull of 1 vertex and 1 ray
sage: A=CartanMatrix(['C',2])
....: c=[1,0]
....: v=[0]
....: P=p_lambda_cone(B(A,c),lam(A,v),[[0],[0,1]]):
....: P.rays
  Cell In [49], line 4
    P=p_lambda_cone(B(A,c),lam(A,v),[[Integer(0)],[Integer(0),Integer(1)]]):
                                                                           ^
SyntaxError: invalid syntax

sage: A=CartanMatrix(['C',2])
....: c=[1,0]
....: v=[0]
....: P=p_lambda_cone(B(A,c),lam(A,v),[[0],[0,1]])
....: list(map(vector,P.rays())),P.lines()
([(0, -1)], ())
sage: A=CartanMatrix(['C',2])
....: c=[1,0]
....: v=[0]
....: P=p_lambda_cone(B(A,c),lam(A,v),[[0],[0,1]])
....: B(A,c),list(map(vector,P.rays())),P.lines()
(
[ 0 -2]               
[ 1  0], [(0, -1)], ()
)
sage: A=CartanMatrix(['C',2])
....: c=[1,0]
....: v=[0]
....: P=p_lambda_cone(B(A,c),lam(A,v),[[0],[0,1]])
....: B(A,c),list(map(vector,P.rays())),P.lines()
(
[ 0 -2]               
[ 1  0], [(0, -1)], ()
)
sage: A=CartanMatrix(['C',2])
....: c=[1,0]
....: v=[0]
....: k=list(reversed(v))
....: P=p_lambda_cone(B(A,c),lam(A,v),[k,k+[c[0]]])
....: B(A,c),list(map(vector,P.rays())),P.lines()
(
[ 0 -2]               
[ 1  0], [(0, -1)], ()
)
sage: A=CartanMatrix(['C',2])
....: c=[1,0]
....: v=[]
....: k=list(reversed(v))
....: P=p_lambda_cone(B(A,c),lam(A,v),[k,k+[c[0]]])
....: B(A,c),list(map(vector,P.rays())),P.lines()
(
[ 0 -2]              
[ 1  0], [(0, 1)], ()
)
sage: A=CartanMatrix(['C',2])
....: c=[1,0]
....: v=[]
....: k=list(reversed(v))
....: P=p_lambda_cone(B(A,c),lam(A,v),[k,k+[c[0]]])
....: BB=copy(B(A,c)),list(map(vector,P.rays())),P.lines()
sage: A=CartanMatrix(['C',2])
....: c=[1,0]
....: v=[]
....: k=list(reversed(v))
....: P=p_lambda_cone(B(A,c),lam(A,v),[k,k+[c[0]]])
....: BB=copy(B(A,c))list(map(vector,P.rays())),P.lines():
  Cell In [56], line 6
    BB=copy(B(A,c))list(map(vector,P.rays())),P.lines():
                   ^
SyntaxError: invalid syntax

sage: A=CartanMatrix(['C',2])
....: c=[1,0]
....: v=[]
....: k=list(reversed(v))
....: P=p_lambda_cone(B(A,c),lam(A,v),[k,k+[c[0]]])
....: BB=copy(B(A,c))
....: for i in v:
....:     BB.mutate(i)
....: BB,list(map(vector,P.rays())),P.lines():
  Cell In [57], line 9
    BB,list(map(vector,P.rays())),P.lines():
                                           ^
SyntaxError: invalid syntax

sage: A=CartanMatrix(['C',2])
....: c=[1,0]
....: v=[]
....: k=list(reversed(v))
....: P=p_lambda_cone(B(A,c),lam(A,v),[k,k+[c[0]]])
....: BB=copy(B(A,c))
....: for i in v:
....:     BB.mutate(i)
....: BB,list(map(vector,P.rays())),P.lines()
(
[ 0 -2]              
[ 1  0], [(0, 1)], ()
)
sage: A=CartanMatrix(['C',2])
....: c=[1,0]
....: v=[0]
....: k=list(reversed(v))
....: P=p_lambda_cone(B(A,c),lam(A,v),[k,k+[c[0]]])
....: BB=copy(B(A,c))
....: for i in v:
....:     BB.mutate(i)
....: BB,list(map(vector,P.rays())),P.lines()
(
[ 0  2]               
[-1  0], [(0, -1)], ()
)
sage: A=CartanMatrix(['C',3])
....: c=[2,1,0]
....: v=[]
....: k=list(reversed(v))
....: P=p_lambda_cone(B(A,c),lam(A,v),[k,k+[c[0]]])
....: BB=copy(B(A,c))
....: for i in v:
....:     BB.mutate(i)
....: BB,list(map(vector,P.rays())),P.lines()
(
[ 0 -1  0]                             
[ 1  0 -2]                             
[ 0  1  0], [(0, 1, 0), (-1, 0, 1)], ()
)
sage: A=CartanMatrix(['C',3])
....: c=[2,1,0]
....: v=[1]
....: k=list(reversed(v))
....: P=p_lambda_cone(B(A,c),lam(A,v),[k,k+[c[0]]])
....: BB=copy(B(A,c))
....: for i in v:
....:     BB.mutate(i)
....: BB,list(map(vector,P.rays())),P.lines()
(
[ 0  1 -2]                              
[-1  0  2]                              
[ 1 -1  0], [(1, 0, -1), (-1, 1, 1)], ()
)
sage: A=CartanMatrix(['C',3])
....: c=[2,1,0]
....: v=[1]
....: k=list(reversed(v))
....: P=p_lambda_cone(B(A,c),lam(A,v),[k,k+[c[0]]])
....: BB=copy(B(A,c))
....: for i in v:
....:     BB.mutate(i)
....: B(A,c),BB,list(map(vector,P.rays())),P.lines()
(
[ 0 -1  0]  [ 0  1 -2]                              
[ 1  0 -2]  [-1  0  2]                              
[ 0  1  0], [ 1 -1  0], [(1, 0, -1), (-1, 1, 1)], ()
)
sage: A=CartanMatrix(['C',3])
....: c=[2,1,0]
....: v=[]
....: k=list(reversed(v))
....: P=p_lambda_cone(B(A,c),lam(A,v),[k,k+[c[0]]])
....: BB=copy(B(A,c))
....: for i in v:
....:     BB.mutate(i)
....: B(A,c),BB,list(map(vector,P.rays())),P.lines()
(
[ 0 -1  0]  [ 0 -1  0]                             
[ 1  0 -2]  [ 1  0 -2]                             
[ 0  1  0], [ 0  1  0], [(0, 1, 0), (-1, 0, 1)], ()
)
sage: A=CartanMatrix(['C',3])
....: c=[2,1,0]
....: v=[0]
....: k=list(reversed(v))
....: P=p_lambda_cone(B(A,c),lam(A,v),[k,k+[c[0]]])
....: BB=copy(B(A,c))
....: for i in v:
....:     BB.mutate(i)
....: B(A,c),BB,list(map(vector,P.rays())),P.lines()
(
[ 0 -1  0]  [ 0  1  0]                              
[ 1  0 -2]  [-1  0 -2]                              
[ 0  1  0], [ 0  1  0], [(0, -1, 0), (-1, 0, 1)], ()
)
sage: A=CartanMatrix(['C',3])
....: c=[2,1,0]
....: v=[1,0]
....: k=list(reversed(v))
....: P=p_lambda_cone(B(A,c),lam(A,v),[k,k+[c[0]]])
....: BB=copy(B(A,c))
....: for i in v:
....:     BB.mutate(i)
....: B(A,c),BB,list(map(vector,P.rays())),P.lines()
(
[ 0 -1  0]  [ 0 -1  2]                              
[ 1  0 -2]  [ 1  0  0]                              
[ 0  1  0], [-1  0  0], [(0, 1, 0), (1, -1, -1)], ()
)
sage: A=CartanMatrix(['C',5])
....: c=[4,3,2,1,0]
....: v=[]
....: k=list(reversed(v))
....: P=p_lambda_cone(B(A,c),lam(A,v),[k,k+[c[0]]])
....: BB=copy(B(A,c))
....: for i in v:
....:     BB.mutate(i)
....: B(A,c),BB,list(map(vector,P.rays())),P.lines()
(
[ 0 -1  0  0  0]  [ 0 -1  0  0  0]                                                                         
[ 1  0 -1  0  0]  [ 1  0 -1  0  0]                                                                         
[ 0  1  0 -1  0]  [ 0  1  0 -1  0]                                                                         
[ 0  0  1  0 -2]  [ 0  0  1  0 -2]                                                                         
[ 0  0  0  1  0], [ 0  0  0  1  0], [(0, 1, 0, 0, 0), (0, -1, 0, 1, 0), (-1, 0, 1, 0, 0), (0, 0, -1, 0, 1)],

()
)
sage: A=CartanMatrix(['C',5])
....: c=[4,3,2,1,0]
....: v=[3]
....: k=list(reversed(v))
....: P=p_lambda_cone(B(A,c),lam(A,v),[k,k+[c[0]]])
....: BB=copy(B(A,c))
....: for i in v:
....:     BB.mutate(i)
....: B(A,c),BB,list(map(vector,P.rays())),P.lines()
(
[ 0 -1  0  0  0]  [ 0 -1  0  0  0]                                                                          
[ 1  0 -1  0  0]  [ 1  0 -1  0  0]                                                                          
[ 0  1  0 -1  0]  [ 0  1  0  1 -2]                                                                          
[ 0  0  1  0 -2]  [ 0  0 -1  0  2]                                                                          
[ 0  0  0  1  0], [ 0  0  1 -1  0], [(0, 1, 0, 0, 0), (0, -1, -1, 1, 1), (0, 0, 1, 0, -1), (-1, 0, 1, 0, 0)],

()
)
sage: A=CartanMatrix(['C',4])
....: c=[3,2,1,0]
....: v=[2]
....: k=list(reversed(v))
....: P=p_lambda_cone(B(A,c),lam(A,v),[k,k+[c[0]]])
....: BB=copy(B(A,c))
....: for i in v:
....:     BB.mutate(i)
....: B(A,c),BB,list(map(vector,P.rays())),P.lines()
(
[ 0 -1  0  0]  [ 0 -1  0  0]
[ 1  0 -1  0]  [ 1  0  1 -2]
[ 0  1  0 -2]  [ 0 -1  0  2]
[ 0  0  1  0], [ 0  1 -1  0],

[(0, 1, 0, 0), (-1, -1, 1, 1), (0, 1, 0, -1)], ()
)
sage: A=CartanMatrix(['C',3])
....: c=[2,0,1]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_cone(B(A,c),lam(A,v),[k,k+[c[0]]])
....:     Q=p_lambda_cone(B(A,c),lam(A,v),[kinv,kinv+[c[0]]])
....:     b=bool(P.translation(-lam(A,v))==-(Q.translation(-lam(A,v))))
....:     print(num,v,b)
....:     if b==false:
....:         print('Failure!')
....: 
1 [0, 1, 0] True
2 [0, 1] True
3 [0] True
4 [1] True
5 [] True
sage: A=CartanMatrix(['C',5])
....: c=[4,0,1,2,3]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_cone(B(A,c),lam(A,v),[k,k+[c[0]]])
....:     Q=p_lambda_cone(B(A,c),lam(A,v),[kinv,kinv+[c[0]]])
....:     b=bool(P.translation(-lam(A,v))==-(Q.translation(-lam(A,v))))
....:     print(num,v,b)
....:     if b==false:
....:         print('Failure!')
1 [0, 1, 2, 3, 0, 1, 2, 0, 1, 0] True
2 [0, 1, 2, 3, 0, 1, 2, 0, 1] True
3 [0, 1, 2, 3, 0, 1, 2, 0] True
4 [0, 1, 2, 3, 0, 1, 2, 1] True
5 [0, 1, 2, 3, 0, 1, 2] True
6 [0, 1, 2, 3, 0, 1, 0] True
7 [0, 1, 2, 3, 0, 1] True
8 [0, 1, 2, 3, 0, 2] True
9 [0, 1, 2, 3, 0] True
10 [0, 1, 2, 3, 1, 2, 1] True
11 [0, 1, 2, 3, 1, 2] True
12 [0, 1, 2, 3, 1] True
13 [0, 1, 2, 3, 2] True
14 [0, 1, 2, 3] True
15 [0, 1, 2, 0, 1, 0] True
16 [0, 1, 2, 0, 1] True
17 [0, 1, 2, 0] True
18 [0, 1, 2, 1] True
19 [0, 1, 2] True
20 [0, 1, 3, 0] True
21 [0, 1, 3] True
22 [0, 1, 0] True
23 [0, 1] True
24 [0, 2, 3, 2] True
25 [0, 2, 3] True
26 [0, 2] True
27 [0, 3] True
28 [0] True
29 [1, 2, 3, 1, 2, 1] True
30 [1, 2, 3, 1, 2] True
31 [1, 2, 3, 1] True
32 [1, 2, 3, 2] True
33 [1, 2, 3] True
34 [1, 2, 1] True
35 [1, 2] True
36 [1, 3] True
37 [1] True
38 [2, 3, 2] True
39 [2, 3] True
40 [2] True
41 [3] True
42 [] True
sage: A=CartanMatrix(['C',7])
....: c=[6,0,1,2,3,4,5]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_cone(B(A,c),lam(A,v),[k,k+[c[0]]])
....:     Q=p_lambda_cone(B(A,c),lam(A,v),[kinv,kinv+[c[0]]])
....:     b=bool(P.translation(-lam(A,v))==-(Q.translation(-lam(A,v))))
....:     print(num,v,b)
....:     if b==false:
....:         print('Failure!')
1 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0] True
2 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1] True
3 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0] True
4 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 1] True
5 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2] True
6 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0] True
7 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1] True
8 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 2] True
9 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0] True
10 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2, 1] True
11 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2] True
12 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1] True
13 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 2] True
14 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3] True
15 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0] True
16 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1] True
17 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 0] True
18 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 1] True
19 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2] True
20 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 3, 0] True
21 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 3] True
22 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 0] True
23 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1] True
24 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 2, 3, 2] True
25 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 2, 3] True
26 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 2] True
27 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 3] True
28 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0] True
29 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] True
30 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3, 1, 2] True
31 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3, 1] True
32 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3, 2] True
33 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3] True
34 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 1] True
35 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2] True
36 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 3] True
37 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1] True
38 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 2, 3, 2] True
39 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 2, 3] True
40 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 2] True
41 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 3] True
42 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4] True
43 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0] True
44 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 0, 1] True
45 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 0] True
46 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 1] True
47 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2] True
48 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 0] True
49 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1] True
50 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 2] True
51 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0] True
52 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 1, 2, 1] True
53 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 1, 2] True
54 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 1] True
55 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 2] True
56 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3] True
57 [0, 1, 2, 3, 4, 5, 0, 1, 2, 4, 0, 1, 0] True
58 [0, 1, 2, 3, 4, 5, 0, 1, 2, 4, 0, 1] True
59 [0, 1, 2, 3, 4, 5, 0, 1, 2, 4, 0] True
60 [0, 1, 2, 3, 4, 5, 0, 1, 2, 4, 1] True
61 [0, 1, 2, 3, 4, 5, 0, 1, 2, 4] True
62 [0, 1, 2, 3, 4, 5, 0, 1, 2, 0, 1, 0] True
63 [0, 1, 2, 3, 4, 5, 0, 1, 2, 0, 1] True
64 [0, 1, 2, 3, 4, 5, 0, 1, 2, 0] True
65 [0, 1, 2, 3, 4, 5, 0, 1, 2, 1] True
66 [0, 1, 2, 3, 4, 5, 0, 1, 2] True
67 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 0, 3] True
68 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 0] True
69 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 3] True
70 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4] True
71 [0, 1, 2, 3, 4, 5, 0, 1, 3, 0] True
72 [0, 1, 2, 3, 4, 5, 0, 1, 3] True
73 [0, 1, 2, 3, 4, 5, 0, 1, 4, 0] True
74 [0, 1, 2, 3, 4, 5, 0, 1, 4] True
75 [0, 1, 2, 3, 4, 5, 0, 1, 0] True
76 [0, 1, 2, 3, 4, 5, 0, 1] True
77 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 2, 3, 2] True
78 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 2, 3] True
79 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 2] True
80 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 3] True
81 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4] True
82 [0, 1, 2, 3, 4, 5, 0, 2, 3, 2] True
83 [0, 1, 2, 3, 4, 5, 0, 2, 3] True
84 [0, 1, 2, 3, 4, 5, 0, 2, 4] True
85 [0, 1, 2, 3, 4, 5, 0, 2] True
86 [0, 1, 2, 3, 4, 5, 0, 3, 4, 3] True
87 [0, 1, 2, 3, 4, 5, 0, 3, 4] True
88 [0, 1, 2, 3, 4, 5, 0, 3] True
89 [0, 1, 2, 3, 4, 5, 0, 4] True
90 [0, 1, 2, 3, 4, 5, 0] True
91 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] True
92 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2] True
93 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1] True
94 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 2] True
95 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] True
96 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1] True
97 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] True
98 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 3] True
99 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1] True
100 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3, 2] True
101 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3] True
102 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2] True
103 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 3] True
104 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4] True
105 [0, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1] True
106 [0, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2] True
107 [0, 1, 2, 3, 4, 5, 1, 2, 3, 1] True
108 [0, 1, 2, 3, 4, 5, 1, 2, 3, 2] True
109 [0, 1, 2, 3, 4, 5, 1, 2, 3] True
110 [0, 1, 2, 3, 4, 5, 1, 2, 4, 1] True
111 [0, 1, 2, 3, 4, 5, 1, 2, 4] True
112 [0, 1, 2, 3, 4, 5, 1, 2, 1] True
113 [0, 1, 2, 3, 4, 5, 1, 2] True
114 [0, 1, 2, 3, 4, 5, 1, 3, 4, 3] True
115 [0, 1, 2, 3, 4, 5, 1, 3, 4] True
116 [0, 1, 2, 3, 4, 5, 1, 3] True
117 [0, 1, 2, 3, 4, 5, 1, 4] True
118 [0, 1, 2, 3, 4, 5, 1] True
119 [0, 1, 2, 3, 4, 5, 2, 3, 4, 2, 3, 2] True
120 [0, 1, 2, 3, 4, 5, 2, 3, 4, 2, 3] True
121 [0, 1, 2, 3, 4, 5, 2, 3, 4, 2] True
122 [0, 1, 2, 3, 4, 5, 2, 3, 4, 3] True
123 [0, 1, 2, 3, 4, 5, 2, 3, 4] True
124 [0, 1, 2, 3, 4, 5, 2, 3, 2] True
125 [0, 1, 2, 3, 4, 5, 2, 3] True
126 [0, 1, 2, 3, 4, 5, 2, 4] True
127 [0, 1, 2, 3, 4, 5, 2] True
128 [0, 1, 2, 3, 4, 5, 3, 4, 3] True
129 [0, 1, 2, 3, 4, 5, 3, 4] True
130 [0, 1, 2, 3, 4, 5, 3] True
131 [0, 1, 2, 3, 4, 5, 4] True
132 [0, 1, 2, 3, 4, 5] True
133 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0] True
134 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1] True
135 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0] True
136 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 1] True
137 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2] True
138 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0] True
139 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1] True
140 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 2] True
141 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0] True
142 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2, 1] True
143 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2] True
144 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1] True
145 [0, 1, 2, 3, 4, 0, 1, 2, 3, 2] True
146 [0, 1, 2, 3, 4, 0, 1, 2, 3] True
147 [0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0] True
148 [0, 1, 2, 3, 4, 0, 1, 2, 0, 1] True
149 [0, 1, 2, 3, 4, 0, 1, 2, 0] True
150 [0, 1, 2, 3, 4, 0, 1, 2, 1] True
151 [0, 1, 2, 3, 4, 0, 1, 2] True
152 [0, 1, 2, 3, 4, 0, 1, 3, 0] True
153 [0, 1, 2, 3, 4, 0, 1, 3] True
154 [0, 1, 2, 3, 4, 0, 1, 0] True
155 [0, 1, 2, 3, 4, 0, 1] True
156 [0, 1, 2, 3, 4, 0, 2, 3, 2] True
157 [0, 1, 2, 3, 4, 0, 2, 3] True
158 [0, 1, 2, 3, 4, 0, 2] True
159 [0, 1, 2, 3, 4, 0, 3] True
160 [0, 1, 2, 3, 4, 0] True
161 [0, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] True
162 [0, 1, 2, 3, 4, 1, 2, 3, 1, 2] True
163 [0, 1, 2, 3, 4, 1, 2, 3, 1] True
164 [0, 1, 2, 3, 4, 1, 2, 3, 2] True
165 [0, 1, 2, 3, 4, 1, 2, 3] True
166 [0, 1, 2, 3, 4, 1, 2, 1] True
167 [0, 1, 2, 3, 4, 1, 2] True
168 [0, 1, 2, 3, 4, 1, 3] True
169 [0, 1, 2, 3, 4, 1] True
170 [0, 1, 2, 3, 4, 2, 3, 2] True
171 [0, 1, 2, 3, 4, 2, 3] True
172 [0, 1, 2, 3, 4, 2] True
173 [0, 1, 2, 3, 4, 3] True
174 [0, 1, 2, 3, 4] True
175 [0, 1, 2, 3, 5, 0, 1, 2, 0, 1, 0] True
176 [0, 1, 2, 3, 5, 0, 1, 2, 0, 1] True
177 [0, 1, 2, 3, 5, 0, 1, 2, 0] True
178 [0, 1, 2, 3, 5, 0, 1, 2, 1] True
179 [0, 1, 2, 3, 5, 0, 1, 2] True
180 [0, 1, 2, 3, 5, 0, 1, 0] True
181 [0, 1, 2, 3, 5, 0, 1] True
182 [0, 1, 2, 3, 5, 0, 2] True
183 [0, 1, 2, 3, 5, 0] True
184 [0, 1, 2, 3, 5, 1, 2, 1] True
185 [0, 1, 2, 3, 5, 1, 2] True
186 [0, 1, 2, 3, 5, 1] True
187 [0, 1, 2, 3, 5, 2] True
188 [0, 1, 2, 3, 5] True
189 [0, 1, 2, 3, 0, 1, 2, 0, 1, 0] True
190 [0, 1, 2, 3, 0, 1, 2, 0, 1] True
191 [0, 1, 2, 3, 0, 1, 2, 0] True
192 [0, 1, 2, 3, 0, 1, 2, 1] True
193 [0, 1, 2, 3, 0, 1, 2] True
194 [0, 1, 2, 3, 0, 1, 0] True
195 [0, 1, 2, 3, 0, 1] True
196 [0, 1, 2, 3, 0, 2] True
197 [0, 1, 2, 3, 0] True
198 [0, 1, 2, 3, 1, 2, 1] True
199 [0, 1, 2, 3, 1, 2] True
200 [0, 1, 2, 3, 1] True
201 [0, 1, 2, 3, 2] True
202 [0, 1, 2, 3] True
203 [0, 1, 2, 4, 5, 0, 1, 4, 0] True
204 [0, 1, 2, 4, 5, 0, 1, 4] True
205 [0, 1, 2, 4, 5, 0, 1, 0] True
206 [0, 1, 2, 4, 5, 0, 1] True
207 [0, 1, 2, 4, 5, 0, 4] True
208 [0, 1, 2, 4, 5, 0] True
209 [0, 1, 2, 4, 5, 1, 4] True
210 [0, 1, 2, 4, 5, 1] True
211 [0, 1, 2, 4, 5, 4] True
212 [0, 1, 2, 4, 5] True
213 [0, 1, 2, 4, 0, 1, 0] True
214 [0, 1, 2, 4, 0, 1] True
215 [0, 1, 2, 4, 0] True
216 [0, 1, 2, 4, 1] True
217 [0, 1, 2, 4] True
218 [0, 1, 2, 5, 0, 1, 0] True
219 [0, 1, 2, 5, 0, 1] True
220 [0, 1, 2, 5, 0] True
221 [0, 1, 2, 5, 1] True
222 [0, 1, 2, 5] True
223 [0, 1, 2, 0, 1, 0] True
224 [0, 1, 2, 0, 1] True
225 [0, 1, 2, 0] True
226 [0, 1, 2, 1] True
227 [0, 1, 2] True
228 [0, 1, 3, 4, 5, 0, 3, 4, 3] True
229 [0, 1, 3, 4, 5, 0, 3, 4] True
230 [0, 1, 3, 4, 5, 0, 3] True
231 [0, 1, 3, 4, 5, 0, 4] True
232 [0, 1, 3, 4, 5, 0] True
233 [0, 1, 3, 4, 5, 3, 4, 3] True
234 [0, 1, 3, 4, 5, 3, 4] True
235 [0, 1, 3, 4, 5, 3] True
236 [0, 1, 3, 4, 5, 4] True
237 [0, 1, 3, 4, 5] True
238 [0, 1, 3, 4, 0, 3] True
239 [0, 1, 3, 4, 0] True
240 [0, 1, 3, 4, 3] True
241 [0, 1, 3, 4] True
242 [0, 1, 3, 5, 0] True
243 [0, 1, 3, 5] True
244 [0, 1, 3, 0] True
245 [0, 1, 3] True
246 [0, 1, 4, 5, 0, 4] True
247 [0, 1, 4, 5, 0] True
248 [0, 1, 4, 5, 4] True
249 [0, 1, 4, 5] True
250 [0, 1, 4, 0] True
251 [0, 1, 4] True
252 [0, 1, 5, 0] True
253 [0, 1, 5] True
254 [0, 1, 0] True
255 [0, 1] True
256 [0, 2, 3, 4, 5, 2, 3, 4, 2, 3, 2] True
257 [0, 2, 3, 4, 5, 2, 3, 4, 2, 3] True
258 [0, 2, 3, 4, 5, 2, 3, 4, 2] True
259 [0, 2, 3, 4, 5, 2, 3, 4, 3] True
260 [0, 2, 3, 4, 5, 2, 3, 4] True
261 [0, 2, 3, 4, 5, 2, 3, 2] True
262 [0, 2, 3, 4, 5, 2, 3] True
263 [0, 2, 3, 4, 5, 2, 4] True
264 [0, 2, 3, 4, 5, 2] True
265 [0, 2, 3, 4, 5, 3, 4, 3] True
266 [0, 2, 3, 4, 5, 3, 4] True
267 [0, 2, 3, 4, 5, 3] True
268 [0, 2, 3, 4, 5, 4] True
269 [0, 2, 3, 4, 5] True
270 [0, 2, 3, 4, 2, 3, 2] True
271 [0, 2, 3, 4, 2, 3] True
272 [0, 2, 3, 4, 2] True
273 [0, 2, 3, 4, 3] True
274 [0, 2, 3, 4] True
275 [0, 2, 3, 5, 2] True
276 [0, 2, 3, 5] True
277 [0, 2, 3, 2] True
278 [0, 2, 3] True
279 [0, 2, 4, 5, 4] True
280 [0, 2, 4, 5] True
281 [0, 2, 4] True
282 [0, 2, 5] True
283 [0, 2] True
284 [0, 3, 4, 5, 3, 4, 3] True
285 [0, 3, 4, 5, 3, 4] True
286 [0, 3, 4, 5, 3] True
287 [0, 3, 4, 5, 4] True
288 [0, 3, 4, 5] True
289 [0, 3, 4, 3] True
290 [0, 3, 4] True
291 [0, 3, 5] True
292 [0, 3] True
293 [0, 4, 5, 4] True
294 [0, 4, 5] True
295 [0, 4] True
296 [0, 5] True
297 [0] True
298 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] True
299 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2] True
300 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1] True
301 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 2] True
302 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] True
303 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1] True
304 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] True
305 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 3] True
306 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1] True
307 [1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3, 2] True
308 [1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3] True
309 [1, 2, 3, 4, 5, 1, 2, 3, 4, 2] True
310 [1, 2, 3, 4, 5, 1, 2, 3, 4, 3] True
311 [1, 2, 3, 4, 5, 1, 2, 3, 4] True
312 [1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1] True
313 [1, 2, 3, 4, 5, 1, 2, 3, 1, 2] True
314 [1, 2, 3, 4, 5, 1, 2, 3, 1] True
315 [1, 2, 3, 4, 5, 1, 2, 3, 2] True
316 [1, 2, 3, 4, 5, 1, 2, 3] True
317 [1, 2, 3, 4, 5, 1, 2, 4, 1] True
318 [1, 2, 3, 4, 5, 1, 2, 4] True
319 [1, 2, 3, 4, 5, 1, 2, 1] True
320 [1, 2, 3, 4, 5, 1, 2] True
321 [1, 2, 3, 4, 5, 1, 3, 4, 3] True
322 [1, 2, 3, 4, 5, 1, 3, 4] True
323 [1, 2, 3, 4, 5, 1, 3] True
324 [1, 2, 3, 4, 5, 1, 4] True
325 [1, 2, 3, 4, 5, 1] True
326 [1, 2, 3, 4, 5, 2, 3, 4, 2, 3, 2] True
327 [1, 2, 3, 4, 5, 2, 3, 4, 2, 3] True
328 [1, 2, 3, 4, 5, 2, 3, 4, 2] True
329 [1, 2, 3, 4, 5, 2, 3, 4, 3] True
330 [1, 2, 3, 4, 5, 2, 3, 4] True
331 [1, 2, 3, 4, 5, 2, 3, 2] True
332 [1, 2, 3, 4, 5, 2, 3] True
333 [1, 2, 3, 4, 5, 2, 4] True
334 [1, 2, 3, 4, 5, 2] True
335 [1, 2, 3, 4, 5, 3, 4, 3] True
336 [1, 2, 3, 4, 5, 3, 4] True
337 [1, 2, 3, 4, 5, 3] True
338 [1, 2, 3, 4, 5, 4] True
339 [1, 2, 3, 4, 5] True
340 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1] True
341 [1, 2, 3, 4, 1, 2, 3, 1, 2] True
342 [1, 2, 3, 4, 1, 2, 3, 1] True
343 [1, 2, 3, 4, 1, 2, 3, 2] True
344 [1, 2, 3, 4, 1, 2, 3] True
345 [1, 2, 3, 4, 1, 2, 1] True
346 [1, 2, 3, 4, 1, 2] True
347 [1, 2, 3, 4, 1, 3] True
348 [1, 2, 3, 4, 1] True
349 [1, 2, 3, 4, 2, 3, 2] True
350 [1, 2, 3, 4, 2, 3] True
351 [1, 2, 3, 4, 2] True
352 [1, 2, 3, 4, 3] True
353 [1, 2, 3, 4] True
354 [1, 2, 3, 5, 1, 2, 1] True
355 [1, 2, 3, 5, 1, 2] True
356 [1, 2, 3, 5, 1] True
357 [1, 2, 3, 5, 2] True
358 [1, 2, 3, 5] True
359 [1, 2, 3, 1, 2, 1] True
360 [1, 2, 3, 1, 2] True
361 [1, 2, 3, 1] True
362 [1, 2, 3, 2] True
363 [1, 2, 3] True
364 [1, 2, 4, 5, 1, 4] True
365 [1, 2, 4, 5, 1] True
366 [1, 2, 4, 5, 4] True
367 [1, 2, 4, 5] True
368 [1, 2, 4, 1] True
369 [1, 2, 4] True
370 [1, 2, 5, 1] True
371 [1, 2, 5] True
372 [1, 2, 1] True
373 [1, 2] True
374 [1, 3, 4, 5, 3, 4, 3] True
375 [1, 3, 4, 5, 3, 4] True
376 [1, 3, 4, 5, 3] True
377 [1, 3, 4, 5, 4] True
378 [1, 3, 4, 5] True
379 [1, 3, 4, 3] True
380 [1, 3, 4] True
381 [1, 3, 5] True
382 [1, 3] True
383 [1, 4, 5, 4] True
384 [1, 4, 5] True
385 [1, 4] True
386 [1, 5] True
387 [1] True
388 [2, 3, 4, 5, 2, 3, 4, 2, 3, 2] True
389 [2, 3, 4, 5, 2, 3, 4, 2, 3] True
390 [2, 3, 4, 5, 2, 3, 4, 2] True
391 [2, 3, 4, 5, 2, 3, 4, 3] True
392 [2, 3, 4, 5, 2, 3, 4] True
393 [2, 3, 4, 5, 2, 3, 2] True
394 [2, 3, 4, 5, 2, 3] True
395 [2, 3, 4, 5, 2, 4] True
396 [2, 3, 4, 5, 2] True
397 [2, 3, 4, 5, 3, 4, 3] True
398 [2, 3, 4, 5, 3, 4] True
399 [2, 3, 4, 5, 3] True
400 [2, 3, 4, 5, 4] True
401 [2, 3, 4, 5] True
402 [2, 3, 4, 2, 3, 2] True
403 [2, 3, 4, 2, 3] True
404 [2, 3, 4, 2] True
405 [2, 3, 4, 3] True
406 [2, 3, 4] True
407 [2, 3, 5, 2] True
408 [2, 3, 5] True
409 [2, 3, 2] True
410 [2, 3] True
411 [2, 4, 5, 4] True
412 [2, 4, 5] True
413 [2, 4] True
414 [2, 5] True
415 [2] True
416 [3, 4, 5, 3, 4, 3] True
417 [3, 4, 5, 3, 4] True
418 [3, 4, 5, 3] True
419 [3, 4, 5, 4] True
420 [3, 4, 5] True
421 [3, 4, 3] True
422 [3, 4] True
423 [3, 5] True
424 [3] True
425 [4, 5, 4] True
426 [4, 5] True
427 [4] True
428 [5] True
429 [] True
sage: A=CartanMatrix(['C',5])
....: c=[4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_cone(B(A,c),lam(A,v),[k])
....:     Q=p_lambda_cone(B(A,c),lam(A,v),[kinv+[c[0]]])
....:     b=bool(P.translation(-lam(A,v))==-(Q.translation(-lam(A,v))))
....:     print(num,v,b)
....:     if b==false:
....:         print('Failure!')
1 [3, 2, 1, 0, 3, 2, 1, 3, 2, 3] True
2 [3, 2, 1, 0, 3, 2, 1, 3, 2] True
3 [3, 2, 1, 0, 3, 2, 1, 3] True
4 [3, 2, 1, 0, 3, 2, 1, 2] True
5 [3, 2, 1, 0, 3, 2, 1] True
6 [3, 2, 1, 0, 3, 2, 3] True
7 [3, 2, 1, 0, 3, 2] True
8 [3, 2, 1, 0, 3, 1] True
9 [3, 2, 1, 0, 3] True
10 [3, 2, 1, 0, 2, 1, 2] True
11 [3, 2, 1, 0, 2, 1] True
12 [3, 2, 1, 0, 2] True
13 [3, 2, 1, 0, 1] True
14 [3, 2, 1, 0] True
15 [3, 2, 1, 3, 2, 3] True
16 [3, 2, 1, 3, 2] True
17 [3, 2, 1, 3] True
18 [3, 2, 1, 2] True
19 [3, 2, 1] True
20 [3, 2, 0, 3] True
21 [3, 2, 0] True
22 [3, 2, 3] True
23 [3, 2] True
24 [3, 1, 0, 1] True
25 [3, 1, 0] True
26 [3, 1] True
27 [3, 0] True
28 [3] True
29 [2, 1, 0, 2, 1, 2] True
30 [2, 1, 0, 2, 1] True
31 [2, 1, 0, 2] True
32 [2, 1, 0, 1] True
33 [2, 1, 0] True
34 [2, 1, 2] True
35 [2, 1] True
36 [2, 0] True
37 [2] True
38 [1, 0, 1] True
39 [1, 0] True
40 [1] True
41 [0] True
42 [] True
sage: A=CartanMatrix(['C',7])
....: c=[6,54,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_cone(B(A,c),lam(A,v),[k])
....:     Q=p_lambda_cone(B(A,c),lam(A,v),[kinv+[c[0]]])
....:     b=bool(P.translation(-lam(A,v))==-(Q.translation(-lam(A,v))))
....:     print(num,v,b)
....:     if b==false:
....:         print('Failure!')
---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
Cell In [73], line 4
      2 c=[Integer(6),Integer(54),Integer(3),Integer(2),Integer(1),Integer(0)]
      3 num=Integer(0)
----> 4 for v in sortables(A,c[Integer(1):]):
      5     num+=Integer(1)
      6     k=list(reversed(v))

File ~/git/affine_dominance/software/domination5.py:261, in sortables(A, c)
    260 def sortables(A,c):
--> 261     yield from sortables_remaining(A,c,[],vector([1]*A.nrows()))

File ~/git/affine_dominance/software/domination5.py:267, in sortables_remaining(A, c, sort, vec)
    265     yield sort
    266 else:
--> 267     if vec[c[0]]>0:
    268         yield from sortables_remaining(A,c[1:]+[c[0]],sort+[c[0]],reflect_once(A,vec,c[0]))
    269     yield from sortables_remaining(A,c[1:],sort,vec)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/modules/free_module_element.pyx:1842, in sage.modules.free_module_element.FreeModuleElement.__getitem__ (build/cythonized/sage/modules/free_module_element.c:19571)()
   1840     n += d
   1841 if n < 0 or n >= d:
-> 1842     raise IndexError("vector index out of range")
   1843 return self.get_unsafe(n)
   1844 

IndexError: vector index out of range
sage: A=CartanMatrix(['C',7])
....: c=[6,5,4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_cone(B(A,c),lam(A,v),[k])
....:     Q=p_lambda_cone(B(A,c),lam(A,v),[kinv+[c[0]]])
....:     b=bool(P.translation(-lam(A,v))==-(Q.translation(-lam(A,v))))
....:     print(num,v,b)
....:     if b==false:
....:         print('Failure!')
1 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] True
2 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] True
3 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] True
4 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] True
5 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] True
6 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] True
7 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] True
8 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] True
9 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5] True
10 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] True
11 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] True
12 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4] True
13 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 3] True
14 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2] True
15 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] True
16 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4] True
17 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5] True
18 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 4] True
19 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3] True
20 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2, 5] True
21 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2] True
22 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 5] True
23 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4] True
24 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2, 3] True
25 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2] True
26 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3] True
27 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 2] True
28 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5] True
29 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] True
30 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3] True
31 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4] True
32 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 3] True
33 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2] True
34 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 4] True
35 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3] True
36 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 2] True
37 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4] True
38 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2, 3] True
39 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2] True
^C---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:1066, in Polyhedra_base._make_Inequality(self, polyhedron, data)
   1065 try:
-> 1066     obj = self._Inequality_pool.pop()
   1067 except IndexError:

IndexError: pop from empty list

During handling of the above exception, another exception occurred:

KeyboardInterrupt                         Traceback (most recent call last)
Cell In [74], line 8
      6 k=list(reversed(v))
      7 kinv=list(reversed(inv_sortable(A,c[Integer(1):],v)))
----> 8 P=p_lambda_cone(B(A,c),lam(A,v),[k])
      9 Q=p_lambda_cone(B(A,c),lam(A,v),[kinv+[c[Integer(0)]]])
     10 b=bool(P.translation(-lam(A,v))==-(Q.translation(-lam(A,v))))

File ~/git/affine_dominance/software/domination5.py:76, in p_lambda_cone(B, la, seqs)
     74 P = cone_at(p_lambda(B, la, seqs[0]),la)
     75 for s in seqs:
---> 76     P = P.intersection(cone_at(p_lambda(B, la, s),la))
     77     if P.dimension()==0:
     78         break

File ~/git/affine_dominance/software/domination5.py:37, in p_lambda(B, la, seq)
     35 Em = E(B, k, -1)
     36 Hp = Polyhedron(ieqs=[(0,)*(k+1)+(1,)+(0,)*(m-k-1)])
---> 37 Hm = Polyhedron(ieqs=[(0,)*(k+1)+(-1,)+(0,)*(m-k-1)])
     38 #print("Hp:   ",Hp,Hp.vertices(),Hp.rays(),Hp.lines(),"\n")
     39 #print("Hm:   ",Hm,Hm.vertices(),Hm.rays(),Hm.lines(),"\n\n")
     40 Pp = P.intersection(Hp)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/constructor.py:768, in Polyhedron(vertices, rays, lines, ieqs, eqns, ambient_dim, base_ring, minimize, verbose, backend, mutable)
    766 if got_Vrep:
    767     Vrep = [vertices, rays, lines]
--> 768 return parent(Vrep, Hrep, convert=convert, verbose=verbose, mutable=mutable)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/parent.pyx:903, in sage.structure.parent.Parent.__call__ (build/cythonized/sage/structure/parent.c:12685)()
    901         return mor._call_(x)
    902     else:
--> 903         return mor._call_with_args(x, args, kwds)
    904 
    905 raise TypeError(_LazyString("No conversion defined from %s to %s", (R, self), {}))

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:177, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_with_args (build/cythonized/sage/structure/coerce_maps.c:7430)()
    175             return C._element_constructor(x, *args)
    176         else:
--> 177             return C._element_constructor(x, *args, **kwds)
    178 except Exception:
    179     if print_warnings:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:695, in Polyhedra_base._element_constructor_(self, *args, **kwds)
    693     if convert and Vrep:
    694         Vrep = [convert_base_ring(_) for _ in Vrep]
--> 695     return self.element_class(self, Vrep, Hrep, **kwds)
    696 if nargs == 1 and is_Polyhedron(args[0]):
    697     copy = kwds.pop('copy', args[0].parent() is not self)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:70, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
---> 70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:195, in Polyhedron_ppl.set_immutable(self)
    193         raise e
    194 if not hasattr(self, '_Hrepresentation'):
--> 195     self._init_Hrepresentation_from_ppl(True)
    196 self._is_mutable = False

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:344, in Polyhedron_ppl._init_Hrepresentation_from_ppl(self, minimize)
    342 for c in cs:
    343     if c.is_inequality():
--> 344         parent._make_Inequality(self, (c.inhomogeneous_term(),) + c.coefficients())
    345     elif c.is_equality():
    346         parent._make_Equation(self, (c.inhomogeneous_term(),) + c.coefficients())

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:1068, in Polyhedra_base._make_Inequality(self, polyhedron, data)
   1066     obj = self._Inequality_pool.pop()
   1067 except IndexError:
-> 1068     obj = Inequality(self)
   1069 obj._set_data(polyhedron, data)
   1070 return obj

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/representation.py:410, in Hrepresentation.__init__(self, polyhedron_parent)
    408 self._base_ring = polyhedron_parent.base_ring()
    409 self._vector = polyhedron_parent.Hrepresentation_space()(0)
--> 410 self._A = polyhedron_parent.ambient_space()(0)
    411 self._b = polyhedron_parent.base_ring()(0)
    412 self._index = 0

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/misc/cachefunc.pyx:2329, in sage.misc.cachefunc.CachedMethodCallerNoArgs.__call__ (build/cythonized/sage/misc/cachefunc.c:16226)()
   2327 if self.cache is None:
   2328     f = self.f
-> 2329     self.cache = f(self._instance)
   2330 return self.cache
   2331 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:460, in Polyhedra_base.Vrepresentation_space(self)
    457     R = self.base_ring()
    458     return self(None, [[[R.one()] + [R.zero()] * self.ambient_dim()], []], convert=True)
--> 460 @cached_method
    461 def Vrepresentation_space(self):
    462     r"""
    463     Return the ambient vector space.
    464 
   (...)
    478         Vector space of dimension 4 over Rational Field
    479     """
    480     if self.base_ring() in Fields():

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['C',5])
....: c=[4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_cone(B(A,c),lam(A,v),[kinv])
....:     Q=p_lambda_cone(B(A,c),lam(A,v),[k+[c[0]]])
....:     b=bool(P.translation(-lam(A,v))==-(Q.translation(-lam(A,v))))
....:     print(num,v,b)
....:     if b==false:
....:         print('Failure!')
1 [3, 2, 1, 0, 3, 2, 1, 3, 2, 3] False
Failure!
2 [3, 2, 1, 0, 3, 2, 1, 3, 2] False
Failure!
3 [3, 2, 1, 0, 3, 2, 1, 3] False
Failure!
4 [3, 2, 1, 0, 3, 2, 1, 2] False
Failure!
5 [3, 2, 1, 0, 3, 2, 1] False
Failure!
6 [3, 2, 1, 0, 3, 2, 3] False
Failure!
7 [3, 2, 1, 0, 3, 2] False
Failure!
8 [3, 2, 1, 0, 3, 1] False
Failure!
9 [3, 2, 1, 0, 3] False
Failure!
10 [3, 2, 1, 0, 2, 1, 2] False
Failure!
11 [3, 2, 1, 0, 2, 1] False
Failure!
12 [3, 2, 1, 0, 2] False
Failure!
13 [3, 2, 1, 0, 1] False
Failure!
14 [3, 2, 1, 0] False
Failure!
15 [3, 2, 1, 3, 2, 3] True
16 [3, 2, 1, 3, 2] False
Failure!
17 [3, 2, 1, 3] False
Failure!
18 [3, 2, 1, 2] True
19 [3, 2, 1] False
Failure!
20 [3, 2, 0, 3] False
Failure!
21 [3, 2, 0] False
Failure!
22 [3, 2, 3] False
Failure!
23 [3, 2] False
Failure!
24 [3, 1, 0, 1] False
Failure!
25 [3, 1, 0] True
26 [3, 1] True
27 [3, 0] False
Failure!
28 [3] False
Failure!
29 [2, 1, 0, 2, 1, 2] False
Failure!
30 [2, 1, 0, 2, 1] False
Failure!
31 [2, 1, 0, 2] False
Failure!
32 [2, 1, 0, 1] False
Failure!
33 [2, 1, 0] False
Failure!
34 [2, 1, 2] False
Failure!
35 [2, 1] False
Failure!
36 [2, 0] False
Failure!
37 [2] False
Failure!
38 [1, 0, 1] False
Failure!
39 [1, 0] False
Failure!
40 [1] False
Failure!
41 [0] False
Failure!
42 [] False
Failure!
sage: A=CartanMatrix(['C',5])
....: c=[4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_cone(B(A,c),lam(A,v),[k])
....:     Q=p_lambda_cone(B(A,c),lam(A,v),[kinv+[c[0]]])
....:     b=bool(P.translation(-lam(A,v))==-(Q.translation(-lam(A,v))))
....:     print(num,v,b)
....:     if b==false:
....:         print('Failure!')
1 [3, 2, 1, 0, 3, 2, 1, 3, 2, 3] True
2 [3, 2, 1, 0, 3, 2, 1, 3, 2] True
3 [3, 2, 1, 0, 3, 2, 1, 3] True
4 [3, 2, 1, 0, 3, 2, 1, 2] True
5 [3, 2, 1, 0, 3, 2, 1] True
6 [3, 2, 1, 0, 3, 2, 3] True
7 [3, 2, 1, 0, 3, 2] True
8 [3, 2, 1, 0, 3, 1] True
9 [3, 2, 1, 0, 3] True
10 [3, 2, 1, 0, 2, 1, 2] True
11 [3, 2, 1, 0, 2, 1] True
12 [3, 2, 1, 0, 2] True
13 [3, 2, 1, 0, 1] True
14 [3, 2, 1, 0] True
15 [3, 2, 1, 3, 2, 3] True
16 [3, 2, 1, 3, 2] True
17 [3, 2, 1, 3] True
18 [3, 2, 1, 2] True
19 [3, 2, 1] True
20 [3, 2, 0, 3] True
21 [3, 2, 0] True
22 [3, 2, 3] True
23 [3, 2] True
24 [3, 1, 0, 1] True
25 [3, 1, 0] True
26 [3, 1] True
27 [3, 0] True
28 [3] True
29 [2, 1, 0, 2, 1, 2] True
30 [2, 1, 0, 2, 1] True
31 [2, 1, 0, 2] True
32 [2, 1, 0, 1] True
33 [2, 1, 0] True
34 [2, 1, 2] True
35 [2, 1] True
36 [2, 0] True
37 [2] True
38 [1, 0, 1] True
39 [1, 0] True
40 [1] True
41 [0] True
42 [] True
sage: A=CartanMatrix(['C',7])
....: c=[6,5,4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_cone(B(A,c),lam(A,v),[k])
....:     Q=p_lambda_cone(B(A,c),lam(A,v),[kinv+[c[0]]])
....:     b=bool(P.translation(-lam(A,v))==-(Q.translation(-lam(A,v))))
....:     print(num,v,b)
....:     if b==false:
....:         print('Failure!')
1 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] True
2 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] True
3 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] True
4 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] True
5 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] True
6 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] True
7 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] True
8 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] True
9 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5] True
10 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] True
11 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] True
12 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4] True
13 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 3] True
14 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2] True
15 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] True
16 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4] True
17 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5] True
18 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 4] True
19 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3] True
20 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2, 5] True
21 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2] True
22 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 5] True
23 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4] True
24 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2, 3] True
25 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2] True
26 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3] True
27 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 2] True
28 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5] True
29 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] True
30 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3] True
31 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4] True
32 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 3] True
33 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2] True
34 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 4] True
35 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3] True
36 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 2] True
37 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4] True
38 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2, 3] True
39 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2] True
40 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3] True
41 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 2] True
42 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1] True
43 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] True
44 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4] True
45 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5] True
46 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 4] True
47 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3] True
48 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 5] True
49 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4] True
50 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 3] True
51 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5] True
52 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4, 3, 4] True
53 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4, 3] True
54 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4] True
55 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 3] True
56 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2] True
57 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5, 4, 5] True
58 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5, 4] True
59 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5] True
60 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 4] True
61 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1] True
62 [5, 4, 3, 2, 1, 0, 5, 4, 3, 5, 4, 5] True
63 [5, 4, 3, 2, 1, 0, 5, 4, 3, 5, 4] True
64 [5, 4, 3, 2, 1, 0, 5, 4, 3, 5] True
65 [5, 4, 3, 2, 1, 0, 5, 4, 3, 4] True
66 [5, 4, 3, 2, 1, 0, 5, 4, 3] True
67 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 5, 2] True
68 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 5] True
69 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 2] True
70 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1] True
71 [5, 4, 3, 2, 1, 0, 5, 4, 2, 5] True
72 [5, 4, 3, 2, 1, 0, 5, 4, 2] True
73 [5, 4, 3, 2, 1, 0, 5, 4, 1, 5] True
74 [5, 4, 3, 2, 1, 0, 5, 4, 1] True
75 [5, 4, 3, 2, 1, 0, 5, 4, 5] True
76 [5, 4, 3, 2, 1, 0, 5, 4] True
77 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3, 2, 3] True
78 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3, 2] True
79 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3] True
80 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 2] True
81 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1] True
82 [5, 4, 3, 2, 1, 0, 5, 3, 2, 3] True
83 [5, 4, 3, 2, 1, 0, 5, 3, 2] True
84 [5, 4, 3, 2, 1, 0, 5, 3, 1] True
85 [5, 4, 3, 2, 1, 0, 5, 3] True
86 [5, 4, 3, 2, 1, 0, 5, 2, 1, 2] True
87 [5, 4, 3, 2, 1, 0, 5, 2, 1] True
88 [5, 4, 3, 2, 1, 0, 5, 2] True
89 [5, 4, 3, 2, 1, 0, 5, 1] True
90 [5, 4, 3, 2, 1, 0, 5] True
91 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] True
92 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3] True
93 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4] True
94 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 3] True
95 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2] True
96 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 4] True
97 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3] True
98 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 2] True
99 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4] True
100 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2, 3] True
101 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2] True
102 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3] True
103 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 2] True
104 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1] True
105 [5, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3, 4] True
106 [5, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3] True
107 [5, 4, 3, 2, 1, 0, 4, 3, 2, 4] True
108 [5, 4, 3, 2, 1, 0, 4, 3, 2, 3] True
109 [5, 4, 3, 2, 1, 0, 4, 3, 2] True
110 [5, 4, 3, 2, 1, 0, 4, 3, 1, 4] True
111 [5, 4, 3, 2, 1, 0, 4, 3, 1] True
112 [5, 4, 3, 2, 1, 0, 4, 3, 4] True
113 [5, 4, 3, 2, 1, 0, 4, 3] True
114 [5, 4, 3, 2, 1, 0, 4, 2, 1, 2] True
115 [5, 4, 3, 2, 1, 0, 4, 2, 1] True
116 [5, 4, 3, 2, 1, 0, 4, 2] True
117 [5, 4, 3, 2, 1, 0, 4, 1] True
118 [5, 4, 3, 2, 1, 0, 4] True
119 [5, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] True
120 [5, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2] True
121 [5, 4, 3, 2, 1, 0, 3, 2, 1, 3] True
122 [5, 4, 3, 2, 1, 0, 3, 2, 1, 2] True
123 [5, 4, 3, 2, 1, 0, 3, 2, 1] True
124 [5, 4, 3, 2, 1, 0, 3, 2, 3] True
125 [5, 4, 3, 2, 1, 0, 3, 2] True
126 [5, 4, 3, 2, 1, 0, 3, 1] True
127 [5, 4, 3, 2, 1, 0, 3] True
128 [5, 4, 3, 2, 1, 0, 2, 1, 2] True
129 [5, 4, 3, 2, 1, 0, 2, 1] True
130 [5, 4, 3, 2, 1, 0, 2] True
131 [5, 4, 3, 2, 1, 0, 1] True
132 [5, 4, 3, 2, 1, 0] True
133 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] True
134 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] True
135 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] True
136 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] True
137 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] True
138 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] True
139 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] True
140 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] True
141 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5] True
142 [5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] True
143 [5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] True
144 [5, 4, 3, 2, 1, 5, 4, 3, 2, 4] True
145 [5, 4, 3, 2, 1, 5, 4, 3, 2, 3] True
146 [5, 4, 3, 2, 1, 5, 4, 3, 2] True
147 [5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] True
148 [5, 4, 3, 2, 1, 5, 4, 3, 5, 4] True
149 [5, 4, 3, 2, 1, 5, 4, 3, 5] True
150 [5, 4, 3, 2, 1, 5, 4, 3, 4] True
151 [5, 4, 3, 2, 1, 5, 4, 3] True
152 [5, 4, 3, 2, 1, 5, 4, 2, 5] True
153 [5, 4, 3, 2, 1, 5, 4, 2] True
154 [5, 4, 3, 2, 1, 5, 4, 5] True
155 [5, 4, 3, 2, 1, 5, 4] True
156 [5, 4, 3, 2, 1, 5, 3, 2, 3] True
157 [5, 4, 3, 2, 1, 5, 3, 2] True
158 [5, 4, 3, 2, 1, 5, 3] True
159 [5, 4, 3, 2, 1, 5, 2] True
160 [5, 4, 3, 2, 1, 5] True
161 [5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] True
162 [5, 4, 3, 2, 1, 4, 3, 2, 4, 3] True
163 [5, 4, 3, 2, 1, 4, 3, 2, 4] True
164 [5, 4, 3, 2, 1, 4, 3, 2, 3] True
165 [5, 4, 3, 2, 1, 4, 3, 2] True
166 [5, 4, 3, 2, 1, 4, 3, 4] True
167 [5, 4, 3, 2, 1, 4, 3] True
168 [5, 4, 3, 2, 1, 4, 2] True
169 [5, 4, 3, 2, 1, 4] True
170 [5, 4, 3, 2, 1, 3, 2, 3] True
171 [5, 4, 3, 2, 1, 3, 2] True
172 [5, 4, 3, 2, 1, 3] True
173 [5, 4, 3, 2, 1, 2] True
174 [5, 4, 3, 2, 1] True
175 [5, 4, 3, 2, 0, 5, 4, 3, 5, 4, 5] True
176 [5, 4, 3, 2, 0, 5, 4, 3, 5, 4] True
177 [5, 4, 3, 2, 0, 5, 4, 3, 5] True
178 [5, 4, 3, 2, 0, 5, 4, 3, 4] True
179 [5, 4, 3, 2, 0, 5, 4, 3] True
180 [5, 4, 3, 2, 0, 5, 4, 5] True
181 [5, 4, 3, 2, 0, 5, 4] True
182 [5, 4, 3, 2, 0, 5, 3] True
183 [5, 4, 3, 2, 0, 5] True
184 [5, 4, 3, 2, 0, 4, 3, 4] True
185 [5, 4, 3, 2, 0, 4, 3] True
186 [5, 4, 3, 2, 0, 4] True
187 [5, 4, 3, 2, 0, 3] True
188 [5, 4, 3, 2, 0] True
189 [5, 4, 3, 2, 5, 4, 3, 5, 4, 5] True
190 [5, 4, 3, 2, 5, 4, 3, 5, 4] True
191 [5, 4, 3, 2, 5, 4, 3, 5] True
192 [5, 4, 3, 2, 5, 4, 3, 4] True
193 [5, 4, 3, 2, 5, 4, 3] True
194 [5, 4, 3, 2, 5, 4, 5] True
195 [5, 4, 3, 2, 5, 4] True
196 [5, 4, 3, 2, 5, 3] True
197 [5, 4, 3, 2, 5] True
198 [5, 4, 3, 2, 4, 3, 4] True
199 [5, 4, 3, 2, 4, 3] True
200 [5, 4, 3, 2, 4] True
201 [5, 4, 3, 2, 3] True
202 [5, 4, 3, 2] True
203 [5, 4, 3, 1, 0, 5, 4, 1, 5] True
204 [5, 4, 3, 1, 0, 5, 4, 1] True
205 [5, 4, 3, 1, 0, 5, 4, 5] True
206 [5, 4, 3, 1, 0, 5, 4] True
207 [5, 4, 3, 1, 0, 5, 1] True
208 [5, 4, 3, 1, 0, 5] True
209 [5, 4, 3, 1, 0, 4, 1] True
210 [5, 4, 3, 1, 0, 4] True
211 [5, 4, 3, 1, 0, 1] True
212 [5, 4, 3, 1, 0] True
213 [5, 4, 3, 1, 5, 4, 5] True
214 [5, 4, 3, 1, 5, 4] True
215 [5, 4, 3, 1, 5] True
216 [5, 4, 3, 1, 4] True
217 [5, 4, 3, 1] True
218 [5, 4, 3, 0, 5, 4, 5] True
219 [5, 4, 3, 0, 5, 4] True
220 [5, 4, 3, 0, 5] True
221 [5, 4, 3, 0, 4] True
222 [5, 4, 3, 0] True
223 [5, 4, 3, 5, 4, 5] True
224 [5, 4, 3, 5, 4] True
225 [5, 4, 3, 5] True
226 [5, 4, 3, 4] True
227 [5, 4, 3] True
228 [5, 4, 2, 1, 0, 5, 2, 1, 2] True
229 [5, 4, 2, 1, 0, 5, 2, 1] True
230 [5, 4, 2, 1, 0, 5, 2] True
231 [5, 4, 2, 1, 0, 5, 1] True
232 [5, 4, 2, 1, 0, 5] True
233 [5, 4, 2, 1, 0, 2, 1, 2] True
234 [5, 4, 2, 1, 0, 2, 1] True
235 [5, 4, 2, 1, 0, 2] True
236 [5, 4, 2, 1, 0, 1] True
237 [5, 4, 2, 1, 0] True
238 [5, 4, 2, 1, 5, 2] True
239 [5, 4, 2, 1, 5] True
240 [5, 4, 2, 1, 2] True
241 [5, 4, 2, 1] True
242 [5, 4, 2, 0, 5] True
243 [5, 4, 2, 0] True
244 [5, 4, 2, 5] True
245 [5, 4, 2] True
246 [5, 4, 1, 0, 5, 1] True
247 [5, 4, 1, 0, 5] True
248 [5, 4, 1, 0, 1] True
249 [5, 4, 1, 0] True
250 [5, 4, 1, 5] True
251 [5, 4, 1] True
252 [5, 4, 0, 5] True
253 [5, 4, 0] True
254 [5, 4, 5] True
255 [5, 4] True
256 [5, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] True
257 [5, 3, 2, 1, 0, 3, 2, 1, 3, 2] True
258 [5, 3, 2, 1, 0, 3, 2, 1, 3] True
259 [5, 3, 2, 1, 0, 3, 2, 1, 2] True
260 [5, 3, 2, 1, 0, 3, 2, 1] True
261 [5, 3, 2, 1, 0, 3, 2, 3] True
262 [5, 3, 2, 1, 0, 3, 2] True
263 [5, 3, 2, 1, 0, 3, 1] True
264 [5, 3, 2, 1, 0, 3] True
265 [5, 3, 2, 1, 0, 2, 1, 2] True
266 [5, 3, 2, 1, 0, 2, 1] True
267 [5, 3, 2, 1, 0, 2] True
268 [5, 3, 2, 1, 0, 1] True
269 [5, 3, 2, 1, 0] True
270 [5, 3, 2, 1, 3, 2, 3] True
271 [5, 3, 2, 1, 3, 2] True
272 [5, 3, 2, 1, 3] True
273 [5, 3, 2, 1, 2] True
274 [5, 3, 2, 1] True
275 [5, 3, 2, 0, 3] True
276 [5, 3, 2, 0] True
277 [5, 3, 2, 3] True
278 [5, 3, 2] True
279 [5, 3, 1, 0, 1] True
280 [5, 3, 1, 0] True
281 [5, 3, 1] True
282 [5, 3, 0] True
283 [5, 3] True
284 [5, 2, 1, 0, 2, 1, 2] True
285 [5, 2, 1, 0, 2, 1] True
286 [5, 2, 1, 0, 2] True
287 [5, 2, 1, 0, 1] True
288 [5, 2, 1, 0] True
289 [5, 2, 1, 2] True
290 [5, 2, 1] True
291 [5, 2, 0] True
292 [5, 2] True
293 [5, 1, 0, 1] True
294 [5, 1, 0] True
295 [5, 1] True
296 [5, 0] True
297 [5] True
298 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] True
299 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3] True
300 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4] True
301 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 3] True
302 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2] True
303 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 4] True
304 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3] True
305 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 2] True
306 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4] True
307 [4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2, 3] True
308 [4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2] True
309 [4, 3, 2, 1, 0, 4, 3, 2, 1, 3] True
310 [4, 3, 2, 1, 0, 4, 3, 2, 1, 2] True
311 [4, 3, 2, 1, 0, 4, 3, 2, 1] True
312 [4, 3, 2, 1, 0, 4, 3, 2, 4, 3, 4] True
313 [4, 3, 2, 1, 0, 4, 3, 2, 4, 3] True
314 [4, 3, 2, 1, 0, 4, 3, 2, 4] True
315 [4, 3, 2, 1, 0, 4, 3, 2, 3] True
316 [4, 3, 2, 1, 0, 4, 3, 2] True
317 [4, 3, 2, 1, 0, 4, 3, 1, 4] True
318 [4, 3, 2, 1, 0, 4, 3, 1] True
319 [4, 3, 2, 1, 0, 4, 3, 4] True
320 [4, 3, 2, 1, 0, 4, 3] True
321 [4, 3, 2, 1, 0, 4, 2, 1, 2] True
322 [4, 3, 2, 1, 0, 4, 2, 1] True
323 [4, 3, 2, 1, 0, 4, 2] True
324 [4, 3, 2, 1, 0, 4, 1] True
325 [4, 3, 2, 1, 0, 4] True
326 [4, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] True
327 [4, 3, 2, 1, 0, 3, 2, 1, 3, 2] True
328 [4, 3, 2, 1, 0, 3, 2, 1, 3] True
329 [4, 3, 2, 1, 0, 3, 2, 1, 2] True
330 [4, 3, 2, 1, 0, 3, 2, 1] True
331 [4, 3, 2, 1, 0, 3, 2, 3] True
332 [4, 3, 2, 1, 0, 3, 2] True
333 [4, 3, 2, 1, 0, 3, 1] True
334 [4, 3, 2, 1, 0, 3] True
335 [4, 3, 2, 1, 0, 2, 1, 2] True
336 [4, 3, 2, 1, 0, 2, 1] True
337 [4, 3, 2, 1, 0, 2] True
338 [4, 3, 2, 1, 0, 1] True
339 [4, 3, 2, 1, 0] True
340 [4, 3, 2, 1, 4, 3, 2, 4, 3, 4] True
341 [4, 3, 2, 1, 4, 3, 2, 4, 3] True
342 [4, 3, 2, 1, 4, 3, 2, 4] True
343 [4, 3, 2, 1, 4, 3, 2, 3] True
344 [4, 3, 2, 1, 4, 3, 2] True
345 [4, 3, 2, 1, 4, 3, 4] True
346 [4, 3, 2, 1, 4, 3] True
347 [4, 3, 2, 1, 4, 2] True
348 [4, 3, 2, 1, 4] True
349 [4, 3, 2, 1, 3, 2, 3] True
350 [4, 3, 2, 1, 3, 2] True
351 [4, 3, 2, 1, 3] True
352 [4, 3, 2, 1, 2] True
353 [4, 3, 2, 1] True
354 [4, 3, 2, 0, 4, 3, 4] True
355 [4, 3, 2, 0, 4, 3] True
356 [4, 3, 2, 0, 4] True
357 [4, 3, 2, 0, 3] True
358 [4, 3, 2, 0] True
359 [4, 3, 2, 4, 3, 4] True
360 [4, 3, 2, 4, 3] True
361 [4, 3, 2, 4] True
362 [4, 3, 2, 3] True
363 [4, 3, 2] True
364 [4, 3, 1, 0, 4, 1] True
365 [4, 3, 1, 0, 4] True
366 [4, 3, 1, 0, 1] True
367 [4, 3, 1, 0] True
368 [4, 3, 1, 4] True
369 [4, 3, 1] True
370 [4, 3, 0, 4] True
371 [4, 3, 0] True
372 [4, 3, 4] True
373 [4, 3] True
374 [4, 2, 1, 0, 2, 1, 2] True
375 [4, 2, 1, 0, 2, 1] True
376 [4, 2, 1, 0, 2] True
377 [4, 2, 1, 0, 1] True
378 [4, 2, 1, 0] True
379 [4, 2, 1, 2] True
380 [4, 2, 1] True
381 [4, 2, 0] True
382 [4, 2] True
383 [4, 1, 0, 1] True
384 [4, 1, 0] True
385 [4, 1] True
386 [4, 0] True
387 [4] True
388 [3, 2, 1, 0, 3, 2, 1, 3, 2, 3] True
389 [3, 2, 1, 0, 3, 2, 1, 3, 2] True
390 [3, 2, 1, 0, 3, 2, 1, 3] True
391 [3, 2, 1, 0, 3, 2, 1, 2] True
392 [3, 2, 1, 0, 3, 2, 1] True
393 [3, 2, 1, 0, 3, 2, 3] True
394 [3, 2, 1, 0, 3, 2] True
395 [3, 2, 1, 0, 3, 1] True
396 [3, 2, 1, 0, 3] True
397 [3, 2, 1, 0, 2, 1, 2] True
398 [3, 2, 1, 0, 2, 1] True
399 [3, 2, 1, 0, 2] True
400 [3, 2, 1, 0, 1] True
401 [3, 2, 1, 0] True
402 [3, 2, 1, 3, 2, 3] True
403 [3, 2, 1, 3, 2] True
404 [3, 2, 1, 3] True
405 [3, 2, 1, 2] True
406 [3, 2, 1] True
407 [3, 2, 0, 3] True
408 [3, 2, 0] True
409 [3, 2, 3] True
410 [3, 2] True
411 [3, 1, 0, 1] True
412 [3, 1, 0] True
413 [3, 1] True
414 [3, 0] True
415 [3] True
416 [2, 1, 0, 2, 1, 2] True
417 [2, 1, 0, 2, 1] True
418 [2, 1, 0, 2] True
419 [2, 1, 0, 1] True
420 [2, 1, 0] True
421 [2, 1, 2] True
422 [2, 1] True
423 [2, 0] True
424 [2] True
425 [1, 0, 1] True
426 [1, 0] True
427 [1] True
428 [0] True
429 [] True
sage: A=CartanMatrix(['C',7])
....: c=[6,5,4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_cone(B(A,c),lam(A,v),[kinv,k+[c[0]]])
....:     print(num,v,P.dimension())
....: 
1 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 4
2 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
3 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] 0
4 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] 5
5 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] 4
6 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] 0
7 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] 0
8 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] 4
9 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5] 0
10 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] 0
11 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] 0
12 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4] 0
13 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 3] 0
14 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2] 0
15 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] 0
16 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4] 0
17 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5] 0
18 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 4] 0
19 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3] 0
20 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2, 5] 5
21 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2] 0
22 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 5] 4
23 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4] 0
24 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2, 3] 0
25 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2] 0
26 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3] 0
27 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 2] 0
28 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5] 0
29 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 5
30 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
31 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4] 0
32 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 3] 6
33 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2] 5
34 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 4] 0
35 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3] 4
36 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 2] 6
37 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4] 5
38 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2, 3] 4
39 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2] 0
40 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3] 0
41 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 2] 5
42 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1] 4
43 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
44 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
45 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5] 0
46 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 4] 0
47 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3] 0
48 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 5] 3
49 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4] 0
50 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 3] 0
51 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5] 0
52 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4, 3, 4] 0
53 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4, 3] 3
54 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4] 4
55 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 3] 0
56 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2] 3
57 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5, 4, 5] 5
58 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5, 4] 0
59 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5] 0
60 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 4] 6
61 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1] 5
62 [5, 4, 3, 2, 1, 0, 5, 4, 3, 5, 4, 5] 4
63 [5, 4, 3, 2, 1, 0, 5, 4, 3, 5, 4] 0
64 [5, 4, 3, 2, 1, 0, 5, 4, 3, 5] 0
65 [5, 4, 3, 2, 1, 0, 5, 4, 3, 4] 5
66 [5, 4, 3, 2, 1, 0, 5, 4, 3] 4
67 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 5, 2] 0
68 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 5] 0
69 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 2] 3
70 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1] 0
71 [5, 4, 3, 2, 1, 0, 5, 4, 2, 5] 0
72 [5, 4, 3, 2, 1, 0, 5, 4, 2] 0
73 [5, 4, 3, 2, 1, 0, 5, 4, 1, 5] 0
74 [5, 4, 3, 2, 1, 0, 5, 4, 1] 4
75 [5, 4, 3, 2, 1, 0, 5, 4, 5] 0
76 [5, 4, 3, 2, 1, 0, 5, 4] 3
77 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3, 2, 3] 5
78 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3, 2] 0
79 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3] 0
80 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 2] 6
81 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1] 5
82 [5, 4, 3, 2, 1, 0, 5, 3, 2, 3] 0
83 [5, 4, 3, 2, 1, 0, 5, 3, 2] 4
84 [5, 4, 3, 2, 1, 0, 5, 3, 1] 6
85 [5, 4, 3, 2, 1, 0, 5, 3] 5
86 [5, 4, 3, 2, 1, 0, 5, 2, 1, 2] 4
87 [5, 4, 3, 2, 1, 0, 5, 2, 1] 0
88 [5, 4, 3, 2, 1, 0, 5, 2] 0
89 [5, 4, 3, 2, 1, 0, 5, 1] 5
90 [5, 4, 3, 2, 1, 0, 5] 4
91 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 3
92 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
93 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4] 0
94 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 3] 4
95 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2] 3
96 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 4] 0
97 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3] 0
98 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 2] 3
99 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4] 0
100 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2, 3] 0
101 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2] 0
102 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3] 0
103 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 2] 0
104 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1] 0
105 [5, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3, 4] 0
106 [5, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3] 0
107 [5, 4, 3, 2, 1, 0, 4, 3, 2, 4] 0
108 [5, 4, 3, 2, 1, 0, 4, 3, 2, 3] 0
109 [5, 4, 3, 2, 1, 0, 4, 3, 2] 0
110 [5, 4, 3, 2, 1, 0, 4, 3, 1, 4] 4
111 [5, 4, 3, 2, 1, 0, 4, 3, 1] 0
112 [5, 4, 3, 2, 1, 0, 4, 3, 4] 3
113 [5, 4, 3, 2, 1, 0, 4, 3] 0
114 [5, 4, 3, 2, 1, 0, 4, 2, 1, 2] 0
115 [5, 4, 3, 2, 1, 0, 4, 2, 1] 0
116 [5, 4, 3, 2, 1, 0, 4, 2] 0
117 [5, 4, 3, 2, 1, 0, 4, 1] 0
118 [5, 4, 3, 2, 1, 0, 4] 0
119 [5, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 4
120 [5, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
121 [5, 4, 3, 2, 1, 0, 3, 2, 1, 3] 0
122 [5, 4, 3, 2, 1, 0, 3, 2, 1, 2] 5
123 [5, 4, 3, 2, 1, 0, 3, 2, 1] 4
124 [5, 4, 3, 2, 1, 0, 3, 2, 3] 0
125 [5, 4, 3, 2, 1, 0, 3, 2] 3
126 [5, 4, 3, 2, 1, 0, 3, 1] 5
127 [5, 4, 3, 2, 1, 0, 3] 4
128 [5, 4, 3, 2, 1, 0, 2, 1, 2] 3
129 [5, 4, 3, 2, 1, 0, 2, 1] 0
130 [5, 4, 3, 2, 1, 0, 2] 0
131 [5, 4, 3, 2, 1, 0, 1] 4
132 [5, 4, 3, 2, 1, 0] 3
133 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
134 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
135 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] 0
136 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] 0
137 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] 0
138 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] 0
139 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] 0
140 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] 0
141 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5] 0
142 [5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] 0
143 [5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] 0
144 [5, 4, 3, 2, 1, 5, 4, 3, 2, 4] 0
145 [5, 4, 3, 2, 1, 5, 4, 3, 2, 3] 0
146 [5, 4, 3, 2, 1, 5, 4, 3, 2] 0
147 [5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] 0
148 [5, 4, 3, 2, 1, 5, 4, 3, 5, 4] 0
149 [5, 4, 3, 2, 1, 5, 4, 3, 5] 0
150 [5, 4, 3, 2, 1, 5, 4, 3, 4] 0
151 [5, 4, 3, 2, 1, 5, 4, 3] 0
152 [5, 4, 3, 2, 1, 5, 4, 2, 5] 0
153 [5, 4, 3, 2, 1, 5, 4, 2] 0
154 [5, 4, 3, 2, 1, 5, 4, 5] 0
155 [5, 4, 3, 2, 1, 5, 4] 0
156 [5, 4, 3, 2, 1, 5, 3, 2, 3] 0
157 [5, 4, 3, 2, 1, 5, 3, 2] 0
158 [5, 4, 3, 2, 1, 5, 3] 0
159 [5, 4, 3, 2, 1, 5, 2] 0
160 [5, 4, 3, 2, 1, 5] 0
161 [5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
162 [5, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
163 [5, 4, 3, 2, 1, 4, 3, 2, 4] 0
164 [5, 4, 3, 2, 1, 4, 3, 2, 3] 0
165 [5, 4, 3, 2, 1, 4, 3, 2] 0
166 [5, 4, 3, 2, 1, 4, 3, 4] 0
167 [5, 4, 3, 2, 1, 4, 3] 0
168 [5, 4, 3, 2, 1, 4, 2] 0
169 [5, 4, 3, 2, 1, 4] 0
170 [5, 4, 3, 2, 1, 3, 2, 3] 0
171 [5, 4, 3, 2, 1, 3, 2] 0
172 [5, 4, 3, 2, 1, 3] 0
173 [5, 4, 3, 2, 1, 2] 0
174 [5, 4, 3, 2, 1] 0
175 [5, 4, 3, 2, 0, 5, 4, 3, 5, 4, 5] 5
176 [5, 4, 3, 2, 0, 5, 4, 3, 5, 4] 0
177 [5, 4, 3, 2, 0, 5, 4, 3, 5] 0
178 [5, 4, 3, 2, 0, 5, 4, 3, 4] 6
179 [5, 4, 3, 2, 0, 5, 4, 3] 5
180 [5, 4, 3, 2, 0, 5, 4, 5] 0
181 [5, 4, 3, 2, 0, 5, 4] 3
182 [5, 4, 3, 2, 0, 5, 3] 6
183 [5, 4, 3, 2, 0, 5] 4
184 [5, 4, 3, 2, 0, 4, 3, 4] 3
185 [5, 4, 3, 2, 0, 4, 3] 0
186 [5, 4, 3, 2, 0, 4] 0
187 [5, 4, 3, 2, 0, 3] 4
188 [5, 4, 3, 2, 0] 3
189 [5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 3
190 [5, 4, 3, 2, 5, 4, 3, 5, 4] 0
191 [5, 4, 3, 2, 5, 4, 3, 5] 0
192 [5, 4, 3, 2, 5, 4, 3, 4] 4
193 [5, 4, 3, 2, 5, 4, 3] 3
194 [5, 4, 3, 2, 5, 4, 5] 0
195 [5, 4, 3, 2, 5, 4] 0
196 [5, 4, 3, 2, 5, 3] 3
197 [5, 4, 3, 2, 5] 0
198 [5, 4, 3, 2, 4, 3, 4] 0
199 [5, 4, 3, 2, 4, 3] 0
200 [5, 4, 3, 2, 4] 0
201 [5, 4, 3, 2, 3] 0
202 [5, 4, 3, 2] 0
203 [5, 4, 3, 1, 0, 5, 4, 1, 5] 0
204 [5, 4, 3, 1, 0, 5, 4, 1] 0
205 [5, 4, 3, 1, 0, 5, 4, 5] 0
206 [5, 4, 3, 1, 0, 5, 4] 0
207 [5, 4, 3, 1, 0, 5, 1] 0
208 [5, 4, 3, 1, 0, 5] 0
209 [5, 4, 3, 1, 0, 4, 1] 0
210 [5, 4, 3, 1, 0, 4] 0
211 [5, 4, 3, 1, 0, 1] 0
212 [5, 4, 3, 1, 0] 0
213 [5, 4, 3, 1, 5, 4, 5] 0
214 [5, 4, 3, 1, 5, 4] 0
215 [5, 4, 3, 1, 5] 0
216 [5, 4, 3, 1, 4] 0
217 [5, 4, 3, 1] 0
218 [5, 4, 3, 0, 5, 4, 5] 0
219 [5, 4, 3, 0, 5, 4] 0
220 [5, 4, 3, 0, 5] 0
221 [5, 4, 3, 0, 4] 0
222 [5, 4, 3, 0] 0
223 [5, 4, 3, 5, 4, 5] 0
224 [5, 4, 3, 5, 4] 0
225 [5, 4, 3, 5] 0
226 [5, 4, 3, 4] 0
227 [5, 4, 3] 0
228 [5, 4, 2, 1, 0, 5, 2, 1, 2] 5
229 [5, 4, 2, 1, 0, 5, 2, 1] 0
230 [5, 4, 2, 1, 0, 5, 2] 0
231 [5, 4, 2, 1, 0, 5, 1] 6
232 [5, 4, 2, 1, 0, 5] 5
233 [5, 4, 2, 1, 0, 2, 1, 2] 3
234 [5, 4, 2, 1, 0, 2, 1] 0
235 [5, 4, 2, 1, 0, 2] 0
236 [5, 4, 2, 1, 0, 1] 4
237 [5, 4, 2, 1, 0] 3
238 [5, 4, 2, 1, 5, 2] 0
239 [5, 4, 2, 1, 5] 3
240 [5, 4, 2, 1, 2] 0
241 [5, 4, 2, 1] 0
242 [5, 4, 2, 0, 5] 6
243 [5, 4, 2, 0] 3
244 [5, 4, 2, 5] 4
245 [5, 4, 2] 0
246 [5, 4, 1, 0, 5, 1] 3
247 [5, 4, 1, 0, 5] 0
248 [5, 4, 1, 0, 1] 0
249 [5, 4, 1, 0] 0
250 [5, 4, 1, 5] 0
251 [5, 4, 1] 0
252 [5, 4, 0, 5] 4
253 [5, 4, 0] 0
254 [5, 4, 5] 3
255 [5, 4] 0
256 [5, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
257 [5, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
258 [5, 3, 2, 1, 0, 3, 2, 1, 3] 0
259 [5, 3, 2, 1, 0, 3, 2, 1, 2] 0
260 [5, 3, 2, 1, 0, 3, 2, 1] 0
261 [5, 3, 2, 1, 0, 3, 2, 3] 0
262 [5, 3, 2, 1, 0, 3, 2] 0
263 [5, 3, 2, 1, 0, 3, 1] 0
264 [5, 3, 2, 1, 0, 3] 0
265 [5, 3, 2, 1, 0, 2, 1, 2] 0
266 [5, 3, 2, 1, 0, 2, 1] 0
267 [5, 3, 2, 1, 0, 2] 0
268 [5, 3, 2, 1, 0, 1] 0
269 [5, 3, 2, 1, 0] 0
270 [5, 3, 2, 1, 3, 2, 3] 0
271 [5, 3, 2, 1, 3, 2] 0
272 [5, 3, 2, 1, 3] 0
273 [5, 3, 2, 1, 2] 0
274 [5, 3, 2, 1] 0
275 [5, 3, 2, 0, 3] 0
276 [5, 3, 2, 0] 0
277 [5, 3, 2, 3] 0
278 [5, 3, 2] 0
279 [5, 3, 1, 0, 1] 0
280 [5, 3, 1, 0] 0
281 [5, 3, 1] 0
282 [5, 3, 0] 0
283 [5, 3] 0
284 [5, 2, 1, 0, 2, 1, 2] 0
285 [5, 2, 1, 0, 2, 1] 0
286 [5, 2, 1, 0, 2] 0
287 [5, 2, 1, 0, 1] 0
288 [5, 2, 1, 0] 0
289 [5, 2, 1, 2] 0
290 [5, 2, 1] 0
291 [5, 2, 0] 0
292 [5, 2] 0
293 [5, 1, 0, 1] 0
294 [5, 1, 0] 0
295 [5, 1] 0
296 [5, 0] 0
297 [5] 0
298 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 4
299 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
300 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4] 0
301 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 3] 5
302 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2] 4
303 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 4] 0
304 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3] 0
305 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 2] 4
306 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4] 0
307 [4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2, 3] 0
308 [4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2] 0
309 [4, 3, 2, 1, 0, 4, 3, 2, 1, 3] 0
310 [4, 3, 2, 1, 0, 4, 3, 2, 1, 2] 0
311 [4, 3, 2, 1, 0, 4, 3, 2, 1] 0
312 [4, 3, 2, 1, 0, 4, 3, 2, 4, 3, 4] 0
313 [4, 3, 2, 1, 0, 4, 3, 2, 4, 3] 0
314 [4, 3, 2, 1, 0, 4, 3, 2, 4] 0
315 [4, 3, 2, 1, 0, 4, 3, 2, 3] 0
316 [4, 3, 2, 1, 0, 4, 3, 2] 0
317 [4, 3, 2, 1, 0, 4, 3, 1, 4] 5
318 [4, 3, 2, 1, 0, 4, 3, 1] 0
319 [4, 3, 2, 1, 0, 4, 3, 4] 4
320 [4, 3, 2, 1, 0, 4, 3] 0
321 [4, 3, 2, 1, 0, 4, 2, 1, 2] 0
322 [4, 3, 2, 1, 0, 4, 2, 1] 0
323 [4, 3, 2, 1, 0, 4, 2] 0
324 [4, 3, 2, 1, 0, 4, 1] 0
325 [4, 3, 2, 1, 0, 4] 0
326 [4, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 5
327 [4, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
328 [4, 3, 2, 1, 0, 3, 2, 1, 3] 0
329 [4, 3, 2, 1, 0, 3, 2, 1, 2] 6
330 [4, 3, 2, 1, 0, 3, 2, 1] 5
331 [4, 3, 2, 1, 0, 3, 2, 3] 0
332 [4, 3, 2, 1, 0, 3, 2] 4
333 [4, 3, 2, 1, 0, 3, 1] 6
334 [4, 3, 2, 1, 0, 3] 5
335 [4, 3, 2, 1, 0, 2, 1, 2] 4
336 [4, 3, 2, 1, 0, 2, 1] 0
337 [4, 3, 2, 1, 0, 2] 0
338 [4, 3, 2, 1, 0, 1] 5
339 [4, 3, 2, 1, 0] 4
340 [4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
341 [4, 3, 2, 1, 4, 3, 2, 4, 3] 0
342 [4, 3, 2, 1, 4, 3, 2, 4] 0
343 [4, 3, 2, 1, 4, 3, 2, 3] 0
344 [4, 3, 2, 1, 4, 3, 2] 0
345 [4, 3, 2, 1, 4, 3, 4] 3
346 [4, 3, 2, 1, 4, 3] 0
347 [4, 3, 2, 1, 4, 2] 0
348 [4, 3, 2, 1, 4] 0
349 [4, 3, 2, 1, 3, 2, 3] 0
350 [4, 3, 2, 1, 3, 2] 3
351 [4, 3, 2, 1, 3] 4
352 [4, 3, 2, 1, 2] 0
353 [4, 3, 2, 1] 3
354 [4, 3, 2, 0, 4, 3, 4] 5
355 [4, 3, 2, 0, 4, 3] 0
356 [4, 3, 2, 0, 4] 0
357 [4, 3, 2, 0, 3] 6
358 [4, 3, 2, 0] 5
359 [4, 3, 2, 4, 3, 4] 4
360 [4, 3, 2, 4, 3] 0
361 [4, 3, 2, 4] 0
362 [4, 3, 2, 3] 5
363 [4, 3, 2] 4
364 [4, 3, 1, 0, 4, 1] 0
365 [4, 3, 1, 0, 4] 0
366 [4, 3, 1, 0, 1] 3
367 [4, 3, 1, 0] 0
368 [4, 3, 1, 4] 0
369 [4, 3, 1] 0
370 [4, 3, 0, 4] 0
371 [4, 3, 0] 4
372 [4, 3, 4] 0
373 [4, 3] 3
374 [4, 2, 1, 0, 2, 1, 2] 5
375 [4, 2, 1, 0, 2, 1] 0
376 [4, 2, 1, 0, 2] 0
377 [4, 2, 1, 0, 1] 6
378 [4, 2, 1, 0] 5
379 [4, 2, 1, 2] 0
380 [4, 2, 1] 4
381 [4, 2, 0] 6
382 [4, 2] 5
383 [4, 1, 0, 1] 4
384 [4, 1, 0] 0
385 [4, 1] 0
386 [4, 0] 5
387 [4] 4
388 [3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 3
389 [3, 2, 1, 0, 3, 2, 1, 3, 2] 0
390 [3, 2, 1, 0, 3, 2, 1, 3] 0
391 [3, 2, 1, 0, 3, 2, 1, 2] 4
392 [3, 2, 1, 0, 3, 2, 1] 3
393 [3, 2, 1, 0, 3, 2, 3] 0
394 [3, 2, 1, 0, 3, 2] 0
395 [3, 2, 1, 0, 3, 1] 3
396 [3, 2, 1, 0, 3] 0
397 [3, 2, 1, 0, 2, 1, 2] 0
398 [3, 2, 1, 0, 2, 1] 0
399 [3, 2, 1, 0, 2] 0
400 [3, 2, 1, 0, 1] 0
401 [3, 2, 1, 0] 0
402 [3, 2, 1, 3, 2, 3] 0
403 [3, 2, 1, 3, 2] 0
404 [3, 2, 1, 3] 0
405 [3, 2, 1, 2] 0
406 [3, 2, 1] 0
407 [3, 2, 0, 3] 4
408 [3, 2, 0] 0
409 [3, 2, 3] 3
410 [3, 2] 0
411 [3, 1, 0, 1] 0
412 [3, 1, 0] 0
413 [3, 1] 0
414 [3, 0] 0
415 [3] 0
416 [2, 1, 0, 2, 1, 2] 4
417 [2, 1, 0, 2, 1] 0
418 [2, 1, 0, 2] 0
419 [2, 1, 0, 1] 5
420 [2, 1, 0] 4
421 [2, 1, 2] 0
422 [2, 1] 3
423 [2, 0] 5
424 [2] 4
425 [1, 0, 1] 3
426 [1, 0] 0
427 [1] 0
428 [0] 4
429 [] 3
sage: A=CartanMatrix(['C',7])
....: c=[6,5,4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_cone(B(A,c),lam(A,v),[kinv,k+[c[0]]])
....:     print(num,v,P.dimension())
....: 
1 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 4
2 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
3 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] 0
4 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] 5
5 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] 4
6 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] 0
7 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] 0
8 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] 4
9 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5] 0
10 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] 0
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [79], line 8
      6 k=list(reversed(v))
      7 kinv=list(reversed(inv_sortable(A,c[Integer(1):],v)))
----> 8 P=p_lambda_cone(B(A,c),lam(A,v),[kinv,k+[c[Integer(0)]]])
      9 print(num,v,P.dimension())

File ~/git/affine_dominance/software/domination5.py:76, in p_lambda_cone(B, la, seqs)
     74 P = cone_at(p_lambda(B, la, seqs[0]),la)
     75 for s in seqs:
---> 76     P = P.intersection(cone_at(p_lambda(B, la, s),la))
     77     if P.dimension()==0:
     78         break

File ~/git/affine_dominance/software/domination5.py:36, in p_lambda(B, la, seq)
     34 Ep = E(B, k, 1)
     35 Em = E(B, k, -1)
---> 36 Hp = Polyhedron(ieqs=[(0,)*(k+1)+(1,)+(0,)*(m-k-1)])
     37 Hm = Polyhedron(ieqs=[(0,)*(k+1)+(-1,)+(0,)*(m-k-1)])
     38 #print("Hp:   ",Hp,Hp.vertices(),Hp.rays(),Hp.lines(),"\n")
     39 #print("Hm:   ",Hm,Hm.vertices(),Hm.rays(),Hm.lines(),"\n\n")

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/constructor.py:768, in Polyhedron(vertices, rays, lines, ieqs, eqns, ambient_dim, base_ring, minimize, verbose, backend, mutable)
    766 if got_Vrep:
    767     Vrep = [vertices, rays, lines]
--> 768 return parent(Vrep, Hrep, convert=convert, verbose=verbose, mutable=mutable)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/parent.pyx:903, in sage.structure.parent.Parent.__call__ (build/cythonized/sage/structure/parent.c:12685)()
    901         return mor._call_(x)
    902     else:
--> 903         return mor._call_with_args(x, args, kwds)
    904 
    905 raise TypeError(_LazyString("No conversion defined from %s to %s", (R, self), {}))

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:177, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_with_args (build/cythonized/sage/structure/coerce_maps.c:7430)()
    175             return C._element_constructor(x, *args)
    176         else:
--> 177             return C._element_constructor(x, *args, **kwds)
    178 except Exception:
    179     if print_warnings:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:695, in Polyhedra_base._element_constructor_(self, *args, **kwds)
    693     if convert and Vrep:
    694         Vrep = [convert_base_ring(_) for _ in Vrep]
--> 695     return self.element_class(self, Vrep, Hrep, **kwds)
    696 if nargs == 1 and is_Polyhedron(args[0]):
    697     copy = kwds.pop('copy', args[0].parent() is not self)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:70, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
---> 70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:195, in Polyhedron_ppl.set_immutable(self)
    193         raise e
    194 if not hasattr(self, '_Hrepresentation'):
--> 195     self._init_Hrepresentation_from_ppl(True)
    196 self._is_mutable = False

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:344, in Polyhedron_ppl._init_Hrepresentation_from_ppl(self, minimize)
    342 for c in cs:
    343     if c.is_inequality():
--> 344         parent._make_Inequality(self, (c.inhomogeneous_term(),) + c.coefficients())
    345     elif c.is_equality():
    346         parent._make_Equation(self, (c.inhomogeneous_term(),) + c.coefficients())

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:1069, in Polyhedra_base._make_Inequality(self, polyhedron, data)
   1067 except IndexError:
   1068     obj = Inequality(self)
-> 1069 obj._set_data(polyhedron, data)
   1070 return obj

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/representation.py:439, in Hrepresentation._set_data(self, polyhedron, data)
    436 if len(data) != self._vector.degree():
    437     raise ValueError('H-representation data requires a list of length ambient_dim+1')
--> 439 self._vector[:] = data
    440 self._A[:] = data[1:]
    441 self._b = self._base_ring(data[0])

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/modules/free_module_element.pyx:1893, in sage.modules.free_module_element.FreeModuleElement.__setitem__ (build/cythonized/sage/modules/free_module_element.c:20047)()
   1891 if isinstance(i, slice):
   1892     PySlice_GetIndicesEx(i, d, &start, &stop, &step, &slicelength)
-> 1893     values = [R(x) for x in value]
   1894     if len(values) != slicelength:
   1895         raise IndexError("slice assignment would change dimension")

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/parent.pyx:901, in sage.structure.parent.Parent.__call__ (build/cythonized/sage/structure/parent.c:12658)()
    899 if mor is not None:
    900     if no_extra_args:
--> 901         return mor._call_(x)
    902     else:
    903         return mor._call_with_args(x, args, kwds)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:158, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_ (build/cythonized/sage/structure/coerce_maps.c:6834)()
    156 cdef Parent C = self._codomain
    157 try:
--> 158     return C._element_constructor(x)
    159 except Exception:
    160     if print_warnings:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/rings/rational.pyx:536, in sage.rings.rational.Rational.__init__ (build/cythonized/sage/rings/rational.cpp:14305)()
    534     """
    535     if x is not None:
--> 536         self.__set_value(x, base)
    537 
    538 def __reduce__(self):

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/rings/rational.pyx:670, in sage.rings.rational.Rational._Rational__set_value (build/cythonized/sage/rings/rational.cpp:16246)()
    668         raise TypeError("unable to convert {!r} to a rational".format(x))
    669 
--> 670 elif isinstance(x, fractions.Fraction):
    671     mpz_set(mpq_numref(self.value), (<integer.Integer> integer.Integer(x.numerator)).value)
    672     mpz_set(mpq_denref(self.value), (<integer.Integer> integer.Integer(x.denominator)).value)

File <frozen abc>:117, in __instancecheck__(cls, instance)

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['C',7])
....: c=[6,5,4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_cone(B(A,c),lam(A,v),[k,k+[c[0]],kinv+[c[0]]])
....:     print(num,v,P.dimension())
1 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
2 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
3 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] 0
4 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] 0
5 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] 0
6 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] 0
7 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] 0
8 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] 0
9 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5] 0
10 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] 0
11 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] 0
12 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4] 0
13 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 3] 0
14 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2] 0
15 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] 0
16 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4] 0
17 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5] 0
18 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 4] 0
19 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3] 0
20 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2, 5] 0
21 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2] 0
22 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 5] 0
23 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4] 0
24 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2, 3] 0
25 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2] 0
26 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3] 0
27 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 2] 0
28 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5] 0
29 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
30 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
31 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4] 0
32 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 3] 0
33 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2] 0
34 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 4] 0
35 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3] 0
36 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 2] 0
37 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4] 0
38 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2, 3] 0
39 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2] 0
40 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3] 0
41 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 2] 0
42 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1] 0
43 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 3
44 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
45 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5] 0
46 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 4] 4
47 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3] 3
48 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 5] 0
49 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4] 0
50 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 3] 3
51 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5] 0
52 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4, 3, 4] 0
53 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4, 3] 0
54 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4] 0
55 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 3] 0
56 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2] 0
57 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5, 4, 5] 0
58 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5, 4] 0
59 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5] 0
60 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 4] 0
61 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1] 0
62 [5, 4, 3, 2, 1, 0, 5, 4, 3, 5, 4, 5] 0
63 [5, 4, 3, 2, 1, 0, 5, 4, 3, 5, 4] 0
64 [5, 4, 3, 2, 1, 0, 5, 4, 3, 5] 0
65 [5, 4, 3, 2, 1, 0, 5, 4, 3, 4] 0
66 [5, 4, 3, 2, 1, 0, 5, 4, 3] 0
67 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 5, 2] 0
68 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 5] 3
69 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 2] 0
70 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1] 0
71 [5, 4, 3, 2, 1, 0, 5, 4, 2, 5] 4
72 [5, 4, 3, 2, 1, 0, 5, 4, 2] 0
73 [5, 4, 3, 2, 1, 0, 5, 4, 1, 5] 0
74 [5, 4, 3, 2, 1, 0, 5, 4, 1] 0
75 [5, 4, 3, 2, 1, 0, 5, 4, 5] 3
76 [5, 4, 3, 2, 1, 0, 5, 4] 0
77 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3, 2, 3] 0
78 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3, 2] 0
79 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3] 0
80 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 2] 0
81 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1] 0
82 [5, 4, 3, 2, 1, 0, 5, 3, 2, 3] 0
83 [5, 4, 3, 2, 1, 0, 5, 3, 2] 0
84 [5, 4, 3, 2, 1, 0, 5, 3, 1] 0
85 [5, 4, 3, 2, 1, 0, 5, 3] 0
86 [5, 4, 3, 2, 1, 0, 5, 2, 1, 2] 0
87 [5, 4, 3, 2, 1, 0, 5, 2, 1] 0
88 [5, 4, 3, 2, 1, 0, 5, 2] 0
89 [5, 4, 3, 2, 1, 0, 5, 1] 0
90 [5, 4, 3, 2, 1, 0, 5] 0
91 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
92 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
93 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4] 0
94 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 3] 0
95 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2] 0
96 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 4] 3
97 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3] 0
98 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 2] 0
99 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4] 0
100 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2, 3] 0
101 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2] 3
102 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3] 4
103 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 2] 0
104 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1] 3
105 [5, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3, 4] 4
106 [5, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3] 0
107 [5, 4, 3, 2, 1, 0, 4, 3, 2, 4] 0
108 [5, 4, 3, 2, 1, 0, 4, 3, 2, 3] 5
109 [5, 4, 3, 2, 1, 0, 4, 3, 2] 4
110 [5, 4, 3, 2, 1, 0, 4, 3, 1, 4] 0
111 [5, 4, 3, 2, 1, 0, 4, 3, 1] 0
112 [5, 4, 3, 2, 1, 0, 4, 3, 4] 0
113 [5, 4, 3, 2, 1, 0, 4, 3] 3
114 [5, 4, 3, 2, 1, 0, 4, 2, 1, 2] 0
115 [5, 4, 3, 2, 1, 0, 4, 2, 1] 4
116 [5, 4, 3, 2, 1, 0, 4, 2] 5
117 [5, 4, 3, 2, 1, 0, 4, 1] 0
118 [5, 4, 3, 2, 1, 0, 4] 4
119 [5, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
120 [5, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
121 [5, 4, 3, 2, 1, 0, 3, 2, 1, 3] 0
122 [5, 4, 3, 2, 1, 0, 3, 2, 1, 2] 0
123 [5, 4, 3, 2, 1, 0, 3, 2, 1] 0
124 [5, 4, 3, 2, 1, 0, 3, 2, 3] 3
125 [5, 4, 3, 2, 1, 0, 3, 2] 0
126 [5, 4, 3, 2, 1, 0, 3, 1] 0
127 [5, 4, 3, 2, 1, 0, 3] 0
128 [5, 4, 3, 2, 1, 0, 2, 1, 2] 0
129 [5, 4, 3, 2, 1, 0, 2, 1] 3
130 [5, 4, 3, 2, 1, 0, 2] 4
131 [5, 4, 3, 2, 1, 0, 1] 0
132 [5, 4, 3, 2, 1, 0] 3
133 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 4
134 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
135 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] 0
136 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] 5
137 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] 4
138 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] 0
139 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] 0
140 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] 4
141 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5] 0
142 [5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] 0
143 [5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] 0
144 [5, 4, 3, 2, 1, 5, 4, 3, 2, 4] 0
145 [5, 4, 3, 2, 1, 5, 4, 3, 2, 3] 0
146 [5, 4, 3, 2, 1, 5, 4, 3, 2] 0
147 [5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] 0
148 [5, 4, 3, 2, 1, 5, 4, 3, 5, 4] 0
149 [5, 4, 3, 2, 1, 5, 4, 3, 5] 0
150 [5, 4, 3, 2, 1, 5, 4, 3, 4] 0
151 [5, 4, 3, 2, 1, 5, 4, 3] 0
152 [5, 4, 3, 2, 1, 5, 4, 2, 5] 5
153 [5, 4, 3, 2, 1, 5, 4, 2] 0
154 [5, 4, 3, 2, 1, 5, 4, 5] 4
155 [5, 4, 3, 2, 1, 5, 4] 0
156 [5, 4, 3, 2, 1, 5, 3, 2, 3] 0
157 [5, 4, 3, 2, 1, 5, 3, 2] 0
158 [5, 4, 3, 2, 1, 5, 3] 0
159 [5, 4, 3, 2, 1, 5, 2] 0
160 [5, 4, 3, 2, 1, 5] 0
161 [5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 5
162 [5, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
163 [5, 4, 3, 2, 1, 4, 3, 2, 4] 0
164 [5, 4, 3, 2, 1, 4, 3, 2, 3] 6
165 [5, 4, 3, 2, 1, 4, 3, 2] 5
166 [5, 4, 3, 2, 1, 4, 3, 4] 0
167 [5, 4, 3, 2, 1, 4, 3] 4
168 [5, 4, 3, 2, 1, 4, 2] 6
169 [5, 4, 3, 2, 1, 4] 5
170 [5, 4, 3, 2, 1, 3, 2, 3] 4
171 [5, 4, 3, 2, 1, 3, 2] 0
172 [5, 4, 3, 2, 1, 3] 0
173 [5, 4, 3, 2, 1, 2] 5
174 [5, 4, 3, 2, 1] 4
175 [5, 4, 3, 2, 0, 5, 4, 3, 5, 4, 5] 0
176 [5, 4, 3, 2, 0, 5, 4, 3, 5, 4] 0
177 [5, 4, 3, 2, 0, 5, 4, 3, 5] 0
178 [5, 4, 3, 2, 0, 5, 4, 3, 4] 0
179 [5, 4, 3, 2, 0, 5, 4, 3] 0
180 [5, 4, 3, 2, 0, 5, 4, 5] 0
181 [5, 4, 3, 2, 0, 5, 4] 0
182 [5, 4, 3, 2, 0, 5, 3] 0
183 [5, 4, 3, 2, 0, 5] 0
184 [5, 4, 3, 2, 0, 4, 3, 4] 0
185 [5, 4, 3, 2, 0, 4, 3] 0
186 [5, 4, 3, 2, 0, 4] 0
187 [5, 4, 3, 2, 0, 3] 0
188 [5, 4, 3, 2, 0] 0
189 [5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
190 [5, 4, 3, 2, 5, 4, 3, 5, 4] 0
191 [5, 4, 3, 2, 5, 4, 3, 5] 0
192 [5, 4, 3, 2, 5, 4, 3, 4] 0
193 [5, 4, 3, 2, 5, 4, 3] 0
194 [5, 4, 3, 2, 5, 4, 5] 3
195 [5, 4, 3, 2, 5, 4] 0
196 [5, 4, 3, 2, 5, 3] 0
197 [5, 4, 3, 2, 5] 0
198 [5, 4, 3, 2, 4, 3, 4] 0
199 [5, 4, 3, 2, 4, 3] 3
200 [5, 4, 3, 2, 4] 4
201 [5, 4, 3, 2, 3] 0
202 [5, 4, 3, 2] 3
203 [5, 4, 3, 1, 0, 5, 4, 1, 5] 0
204 [5, 4, 3, 1, 0, 5, 4, 1] 0
205 [5, 4, 3, 1, 0, 5, 4, 5] 4
206 [5, 4, 3, 1, 0, 5, 4] 0
207 [5, 4, 3, 1, 0, 5, 1] 0
208 [5, 4, 3, 1, 0, 5] 0
209 [5, 4, 3, 1, 0, 4, 1] 0
210 [5, 4, 3, 1, 0, 4] 5
211 [5, 4, 3, 1, 0, 1] 0
212 [5, 4, 3, 1, 0] 4
213 [5, 4, 3, 1, 5, 4, 5] 5
214 [5, 4, 3, 1, 5, 4] 0
215 [5, 4, 3, 1, 5] 0
216 [5, 4, 3, 1, 4] 6
217 [5, 4, 3, 1] 5
218 [5, 4, 3, 0, 5, 4, 5] 0
219 [5, 4, 3, 0, 5, 4] 0
220 [5, 4, 3, 0, 5] 0
221 [5, 4, 3, 0, 4] 0
222 [5, 4, 3, 0] 0
223 [5, 4, 3, 5, 4, 5] 4
224 [5, 4, 3, 5, 4] 0
225 [5, 4, 3, 5] 0
226 [5, 4, 3, 4] 5
227 [5, 4, 3] 4
228 [5, 4, 2, 1, 0, 5, 2, 1, 2] 0
229 [5, 4, 2, 1, 0, 5, 2, 1] 0
230 [5, 4, 2, 1, 0, 5, 2] 0
231 [5, 4, 2, 1, 0, 5, 1] 0
232 [5, 4, 2, 1, 0, 5] 0
233 [5, 4, 2, 1, 0, 2, 1, 2] 0
234 [5, 4, 2, 1, 0, 2, 1] 0
235 [5, 4, 2, 1, 0, 2] 0
236 [5, 4, 2, 1, 0, 1] 0
237 [5, 4, 2, 1, 0] 0
238 [5, 4, 2, 1, 5, 2] 0
239 [5, 4, 2, 1, 5] 0
240 [5, 4, 2, 1, 2] 3
241 [5, 4, 2, 1] 0
242 [5, 4, 2, 0, 5] 0
243 [5, 4, 2, 0] 0
244 [5, 4, 2, 5] 0
245 [5, 4, 2] 0
246 [5, 4, 1, 0, 5, 1] 0
247 [5, 4, 1, 0, 5] 0
248 [5, 4, 1, 0, 1] 0
249 [5, 4, 1, 0] 3
250 [5, 4, 1, 5] 0
251 [5, 4, 1] 4
252 [5, 4, 0, 5] 0
253 [5, 4, 0] 0
254 [5, 4, 5] 0
255 [5, 4] 3
256 [5, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
257 [5, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
258 [5, 3, 2, 1, 0, 3, 2, 1, 3] 0
259 [5, 3, 2, 1, 0, 3, 2, 1, 2] 0
260 [5, 3, 2, 1, 0, 3, 2, 1] 0
261 [5, 3, 2, 1, 0, 3, 2, 3] 4
262 [5, 3, 2, 1, 0, 3, 2] 0
263 [5, 3, 2, 1, 0, 3, 1] 0
264 [5, 3, 2, 1, 0, 3] 0
265 [5, 3, 2, 1, 0, 2, 1, 2] 0
266 [5, 3, 2, 1, 0, 2, 1] 4
267 [5, 3, 2, 1, 0, 2] 5
268 [5, 3, 2, 1, 0, 1] 0
269 [5, 3, 2, 1, 0] 4
270 [5, 3, 2, 1, 3, 2, 3] 5
271 [5, 3, 2, 1, 3, 2] 0
272 [5, 3, 2, 1, 3] 0
273 [5, 3, 2, 1, 2] 6
274 [5, 3, 2, 1] 5
275 [5, 3, 2, 0, 3] 0
276 [5, 3, 2, 0] 0
277 [5, 3, 2, 3] 0
278 [5, 3, 2] 4
279 [5, 3, 1, 0, 1] 0
280 [5, 3, 1, 0] 5
281 [5, 3, 1] 6
282 [5, 3, 0] 0
283 [5, 3] 5
284 [5, 2, 1, 0, 2, 1, 2] 0
285 [5, 2, 1, 0, 2, 1] 0
286 [5, 2, 1, 0, 2] 0
287 [5, 2, 1, 0, 1] 0
288 [5, 2, 1, 0] 0
289 [5, 2, 1, 2] 4
290 [5, 2, 1] 0
291 [5, 2, 0] 0
292 [5, 2] 0
293 [5, 1, 0, 1] 0
294 [5, 1, 0] 4
295 [5, 1] 5
296 [5, 0] 0
297 [5] 4
298 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
299 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
300 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4] 0
301 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 3] 0
302 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2] 0
303 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 4] 0
304 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3] 0
305 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 2] 0
306 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4] 0
307 [4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2, 3] 0
308 [4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2] 0
309 [4, 3, 2, 1, 0, 4, 3, 2, 1, 3] 0
310 [4, 3, 2, 1, 0, 4, 3, 2, 1, 2] 0
311 [4, 3, 2, 1, 0, 4, 3, 2, 1] 0
312 [4, 3, 2, 1, 0, 4, 3, 2, 4, 3, 4] 0
313 [4, 3, 2, 1, 0, 4, 3, 2, 4, 3] 0
314 [4, 3, 2, 1, 0, 4, 3, 2, 4] 0
315 [4, 3, 2, 1, 0, 4, 3, 2, 3] 0
316 [4, 3, 2, 1, 0, 4, 3, 2] 0
317 [4, 3, 2, 1, 0, 4, 3, 1, 4] 0
318 [4, 3, 2, 1, 0, 4, 3, 1] 0
319 [4, 3, 2, 1, 0, 4, 3, 4] 0
320 [4, 3, 2, 1, 0, 4, 3] 0
321 [4, 3, 2, 1, 0, 4, 2, 1, 2] 0
322 [4, 3, 2, 1, 0, 4, 2, 1] 0
323 [4, 3, 2, 1, 0, 4, 2] 0
324 [4, 3, 2, 1, 0, 4, 1] 0
325 [4, 3, 2, 1, 0, 4] 0
326 [4, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
327 [4, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
328 [4, 3, 2, 1, 0, 3, 2, 1, 3] 0
329 [4, 3, 2, 1, 0, 3, 2, 1, 2] 0
330 [4, 3, 2, 1, 0, 3, 2, 1] 0
331 [4, 3, 2, 1, 0, 3, 2, 3] 0
332 [4, 3, 2, 1, 0, 3, 2] 0
333 [4, 3, 2, 1, 0, 3, 1] 0
334 [4, 3, 2, 1, 0, 3] 0
335 [4, 3, 2, 1, 0, 2, 1, 2] 0
336 [4, 3, 2, 1, 0, 2, 1] 0
337 [4, 3, 2, 1, 0, 2] 0
338 [4, 3, 2, 1, 0, 1] 0
339 [4, 3, 2, 1, 0] 0
340 [4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 3
341 [4, 3, 2, 1, 4, 3, 2, 4, 3] 0
342 [4, 3, 2, 1, 4, 3, 2, 4] 0
343 [4, 3, 2, 1, 4, 3, 2, 3] 4
344 [4, 3, 2, 1, 4, 3, 2] 3
345 [4, 3, 2, 1, 4, 3, 4] 0
346 [4, 3, 2, 1, 4, 3] 0
347 [4, 3, 2, 1, 4, 2] 3
348 [4, 3, 2, 1, 4] 0
349 [4, 3, 2, 1, 3, 2, 3] 0
350 [4, 3, 2, 1, 3, 2] 0
351 [4, 3, 2, 1, 3] 0
352 [4, 3, 2, 1, 2] 0
353 [4, 3, 2, 1] 0
354 [4, 3, 2, 0, 4, 3, 4] 0
355 [4, 3, 2, 0, 4, 3] 0
356 [4, 3, 2, 0, 4] 0
357 [4, 3, 2, 0, 3] 0
358 [4, 3, 2, 0] 0
359 [4, 3, 2, 4, 3, 4] 0
360 [4, 3, 2, 4, 3] 0
361 [4, 3, 2, 4] 0
362 [4, 3, 2, 3] 0
363 [4, 3, 2] 0
364 [4, 3, 1, 0, 4, 1] 0
365 [4, 3, 1, 0, 4] 3
366 [4, 3, 1, 0, 1] 0
367 [4, 3, 1, 0] 0
368 [4, 3, 1, 4] 4
369 [4, 3, 1] 0
370 [4, 3, 0, 4] 0
371 [4, 3, 0] 0
372 [4, 3, 4] 3
373 [4, 3] 0
374 [4, 2, 1, 0, 2, 1, 2] 0
375 [4, 2, 1, 0, 2, 1] 0
376 [4, 2, 1, 0, 2] 0
377 [4, 2, 1, 0, 1] 0
378 [4, 2, 1, 0] 0
379 [4, 2, 1, 2] 0
380 [4, 2, 1] 0
381 [4, 2, 0] 0
382 [4, 2] 0
383 [4, 1, 0, 1] 0
384 [4, 1, 0] 0
385 [4, 1] 0
386 [4, 0] 0
387 [4] 0
388 [3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
389 [3, 2, 1, 0, 3, 2, 1, 3, 2] 0
390 [3, 2, 1, 0, 3, 2, 1, 3] 0
391 [3, 2, 1, 0, 3, 2, 1, 2] 0
392 [3, 2, 1, 0, 3, 2, 1] 0
393 [3, 2, 1, 0, 3, 2, 3] 3
394 [3, 2, 1, 0, 3, 2] 0
395 [3, 2, 1, 0, 3, 1] 0
396 [3, 2, 1, 0, 3] 0
397 [3, 2, 1, 0, 2, 1, 2] 0
398 [3, 2, 1, 0, 2, 1] 3
399 [3, 2, 1, 0, 2] 4
400 [3, 2, 1, 0, 1] 0
401 [3, 2, 1, 0] 3
402 [3, 2, 1, 3, 2, 3] 4
403 [3, 2, 1, 3, 2] 0
404 [3, 2, 1, 3] 0
405 [3, 2, 1, 2] 5
406 [3, 2, 1] 4
407 [3, 2, 0, 3] 0
408 [3, 2, 0] 0
409 [3, 2, 3] 0
410 [3, 2] 3
411 [3, 1, 0, 1] 0
412 [3, 1, 0] 4
413 [3, 1] 5
414 [3, 0] 0
415 [3] 4
416 [2, 1, 0, 2, 1, 2] 0
417 [2, 1, 0, 2, 1] 0
418 [2, 1, 0, 2] 0
419 [2, 1, 0, 1] 0
420 [2, 1, 0] 0
421 [2, 1, 2] 3
422 [2, 1] 0
423 [2, 0] 0
424 [2] 0
425 [1, 0, 1] 0
426 [1, 0] 3
427 [1] 4
428 [0] 0
429 [] 3
sage: A=CartanMatrix(['C',7])
....: c=[6,5,4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_cone(B(A,c),lam(A,v),[k,kinv,kinv+[c[0]]])
....:     print(num,v,P.dimension())
1 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
2 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
3 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] 0
4 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] 0
5 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] 0
6 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] 0
7 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] 0
8 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] 0
9 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5] 0
10 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] 0
11 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] 0
12 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4] 0
13 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 3] 0
14 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2] 0
15 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] 0
16 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4] 0
17 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5] 0
18 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 4] 0
19 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3] 0
20 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2, 5] 0
21 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2] 0
22 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 5] 0
23 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4] 0
24 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2, 3] 0
25 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2] 0
26 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3] 0
27 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 2] 0
28 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5] 0
29 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
30 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
31 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4] 0
32 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 3] 0
33 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2] 0
34 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 4] 0
35 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3] 0
36 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 2] 0
37 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4] 0
38 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2, 3] 0
39 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2] 0
40 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3] 0
41 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 2] 0
42 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1] 0
43 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 3
44 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
45 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5] 0
46 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 4] 4
47 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3] 3
48 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 5] 0
49 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4] 0
50 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 3] 3
51 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5] 0
52 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4, 3, 4] 0
53 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4, 3] 0
54 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4] 0
55 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 3] 0
56 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2] 0
57 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5, 4, 5] 0
58 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5, 4] 0
59 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5] 0
60 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 4] 0
61 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1] 0
62 [5, 4, 3, 2, 1, 0, 5, 4, 3, 5, 4, 5] 0
63 [5, 4, 3, 2, 1, 0, 5, 4, 3, 5, 4] 0
64 [5, 4, 3, 2, 1, 0, 5, 4, 3, 5] 0
65 [5, 4, 3, 2, 1, 0, 5, 4, 3, 4] 0
66 [5, 4, 3, 2, 1, 0, 5, 4, 3] 0
67 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 5, 2] 0
68 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 5] 3
69 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 2] 0
70 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1] 0
71 [5, 4, 3, 2, 1, 0, 5, 4, 2, 5] 4
72 [5, 4, 3, 2, 1, 0, 5, 4, 2] 0
73 [5, 4, 3, 2, 1, 0, 5, 4, 1, 5] 0
74 [5, 4, 3, 2, 1, 0, 5, 4, 1] 0
75 [5, 4, 3, 2, 1, 0, 5, 4, 5] 3
76 [5, 4, 3, 2, 1, 0, 5, 4] 0
77 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3, 2, 3] 0
78 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3, 2] 0
79 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3] 0
80 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 2] 0
81 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1] 0
82 [5, 4, 3, 2, 1, 0, 5, 3, 2, 3] 0
83 [5, 4, 3, 2, 1, 0, 5, 3, 2] 0
84 [5, 4, 3, 2, 1, 0, 5, 3, 1] 0
85 [5, 4, 3, 2, 1, 0, 5, 3] 0
86 [5, 4, 3, 2, 1, 0, 5, 2, 1, 2] 0
87 [5, 4, 3, 2, 1, 0, 5, 2, 1] 0
88 [5, 4, 3, 2, 1, 0, 5, 2] 0
89 [5, 4, 3, 2, 1, 0, 5, 1] 0
90 [5, 4, 3, 2, 1, 0, 5] 0
91 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
92 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
93 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4] 0
94 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 3] 0
95 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2] 0
96 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 4] 3
97 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3] 0
98 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 2] 0
99 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4] 0
100 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2, 3] 0
101 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2] 3
102 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3] 4
103 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 2] 0
104 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1] 3
105 [5, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3, 4] 4
106 [5, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3] 0
107 [5, 4, 3, 2, 1, 0, 4, 3, 2, 4] 0
108 [5, 4, 3, 2, 1, 0, 4, 3, 2, 3] 5
109 [5, 4, 3, 2, 1, 0, 4, 3, 2] 4
110 [5, 4, 3, 2, 1, 0, 4, 3, 1, 4] 0
111 [5, 4, 3, 2, 1, 0, 4, 3, 1] 0
112 [5, 4, 3, 2, 1, 0, 4, 3, 4] 0
113 [5, 4, 3, 2, 1, 0, 4, 3] 3
114 [5, 4, 3, 2, 1, 0, 4, 2, 1, 2] 0
115 [5, 4, 3, 2, 1, 0, 4, 2, 1] 4
116 [5, 4, 3, 2, 1, 0, 4, 2] 5
117 [5, 4, 3, 2, 1, 0, 4, 1] 0
118 [5, 4, 3, 2, 1, 0, 4] 4
119 [5, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
120 [5, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
121 [5, 4, 3, 2, 1, 0, 3, 2, 1, 3] 0
122 [5, 4, 3, 2, 1, 0, 3, 2, 1, 2] 0
123 [5, 4, 3, 2, 1, 0, 3, 2, 1] 0
124 [5, 4, 3, 2, 1, 0, 3, 2, 3] 3
125 [5, 4, 3, 2, 1, 0, 3, 2] 0
126 [5, 4, 3, 2, 1, 0, 3, 1] 0
127 [5, 4, 3, 2, 1, 0, 3] 0
128 [5, 4, 3, 2, 1, 0, 2, 1, 2] 0
129 [5, 4, 3, 2, 1, 0, 2, 1] 3
130 [5, 4, 3, 2, 1, 0, 2] 4
131 [5, 4, 3, 2, 1, 0, 1] 0
132 [5, 4, 3, 2, 1, 0] 3
133 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 4
134 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
135 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] 0
136 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] 5
137 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] 4
138 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] 0
139 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] 0
140 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] 4
141 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5] 0
142 [5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] 0
143 [5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] 0
144 [5, 4, 3, 2, 1, 5, 4, 3, 2, 4] 0
145 [5, 4, 3, 2, 1, 5, 4, 3, 2, 3] 0
146 [5, 4, 3, 2, 1, 5, 4, 3, 2] 0
147 [5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] 0
148 [5, 4, 3, 2, 1, 5, 4, 3, 5, 4] 0
149 [5, 4, 3, 2, 1, 5, 4, 3, 5] 0
150 [5, 4, 3, 2, 1, 5, 4, 3, 4] 0
151 [5, 4, 3, 2, 1, 5, 4, 3] 0
152 [5, 4, 3, 2, 1, 5, 4, 2, 5] 5
153 [5, 4, 3, 2, 1, 5, 4, 2] 0
154 [5, 4, 3, 2, 1, 5, 4, 5] 4
155 [5, 4, 3, 2, 1, 5, 4] 0
156 [5, 4, 3, 2, 1, 5, 3, 2, 3] 0
157 [5, 4, 3, 2, 1, 5, 3, 2] 0
158 [5, 4, 3, 2, 1, 5, 3] 0
159 [5, 4, 3, 2, 1, 5, 2] 0
160 [5, 4, 3, 2, 1, 5] 0
161 [5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 5
162 [5, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
163 [5, 4, 3, 2, 1, 4, 3, 2, 4] 0
164 [5, 4, 3, 2, 1, 4, 3, 2, 3] 6
165 [5, 4, 3, 2, 1, 4, 3, 2] 5
166 [5, 4, 3, 2, 1, 4, 3, 4] 0
167 [5, 4, 3, 2, 1, 4, 3] 4
168 [5, 4, 3, 2, 1, 4, 2] 6
169 [5, 4, 3, 2, 1, 4] 5
170 [5, 4, 3, 2, 1, 3, 2, 3] 4
171 [5, 4, 3, 2, 1, 3, 2] 0
172 [5, 4, 3, 2, 1, 3] 0
173 [5, 4, 3, 2, 1, 2] 5
174 [5, 4, 3, 2, 1] 4
175 [5, 4, 3, 2, 0, 5, 4, 3, 5, 4, 5] 0
176 [5, 4, 3, 2, 0, 5, 4, 3, 5, 4] 0
177 [5, 4, 3, 2, 0, 5, 4, 3, 5] 0
178 [5, 4, 3, 2, 0, 5, 4, 3, 4] 0
179 [5, 4, 3, 2, 0, 5, 4, 3] 0
180 [5, 4, 3, 2, 0, 5, 4, 5] 0
181 [5, 4, 3, 2, 0, 5, 4] 0
182 [5, 4, 3, 2, 0, 5, 3] 0
183 [5, 4, 3, 2, 0, 5] 0
184 [5, 4, 3, 2, 0, 4, 3, 4] 0
185 [5, 4, 3, 2, 0, 4, 3] 0
186 [5, 4, 3, 2, 0, 4] 0
187 [5, 4, 3, 2, 0, 3] 0
188 [5, 4, 3, 2, 0] 0
189 [5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
190 [5, 4, 3, 2, 5, 4, 3, 5, 4] 0
191 [5, 4, 3, 2, 5, 4, 3, 5] 0
192 [5, 4, 3, 2, 5, 4, 3, 4] 0
193 [5, 4, 3, 2, 5, 4, 3] 0
194 [5, 4, 3, 2, 5, 4, 5] 3
195 [5, 4, 3, 2, 5, 4] 0
196 [5, 4, 3, 2, 5, 3] 0
197 [5, 4, 3, 2, 5] 0
198 [5, 4, 3, 2, 4, 3, 4] 0
199 [5, 4, 3, 2, 4, 3] 3
200 [5, 4, 3, 2, 4] 4
201 [5, 4, 3, 2, 3] 0
202 [5, 4, 3, 2] 3
203 [5, 4, 3, 1, 0, 5, 4, 1, 5] 0
204 [5, 4, 3, 1, 0, 5, 4, 1] 0
205 [5, 4, 3, 1, 0, 5, 4, 5] 4
206 [5, 4, 3, 1, 0, 5, 4] 0
207 [5, 4, 3, 1, 0, 5, 1] 0
208 [5, 4, 3, 1, 0, 5] 0
209 [5, 4, 3, 1, 0, 4, 1] 0
210 [5, 4, 3, 1, 0, 4] 5
211 [5, 4, 3, 1, 0, 1] 0
212 [5, 4, 3, 1, 0] 4
213 [5, 4, 3, 1, 5, 4, 5] 5
214 [5, 4, 3, 1, 5, 4] 0
215 [5, 4, 3, 1, 5] 0
216 [5, 4, 3, 1, 4] 6
217 [5, 4, 3, 1] 5
218 [5, 4, 3, 0, 5, 4, 5] 0
219 [5, 4, 3, 0, 5, 4] 0
220 [5, 4, 3, 0, 5] 0
221 [5, 4, 3, 0, 4] 0
222 [5, 4, 3, 0] 0
223 [5, 4, 3, 5, 4, 5] 4
224 [5, 4, 3, 5, 4] 0
225 [5, 4, 3, 5] 0
226 [5, 4, 3, 4] 5
227 [5, 4, 3] 4
228 [5, 4, 2, 1, 0, 5, 2, 1, 2] 0
229 [5, 4, 2, 1, 0, 5, 2, 1] 0
230 [5, 4, 2, 1, 0, 5, 2] 0
231 [5, 4, 2, 1, 0, 5, 1] 0
232 [5, 4, 2, 1, 0, 5] 0
233 [5, 4, 2, 1, 0, 2, 1, 2] 0
234 [5, 4, 2, 1, 0, 2, 1] 0
235 [5, 4, 2, 1, 0, 2] 0
236 [5, 4, 2, 1, 0, 1] 0
237 [5, 4, 2, 1, 0] 0
238 [5, 4, 2, 1, 5, 2] 0
239 [5, 4, 2, 1, 5] 0
240 [5, 4, 2, 1, 2] 3
241 [5, 4, 2, 1] 0
242 [5, 4, 2, 0, 5] 0
243 [5, 4, 2, 0] 0
244 [5, 4, 2, 5] 0
245 [5, 4, 2] 0
246 [5, 4, 1, 0, 5, 1] 0
247 [5, 4, 1, 0, 5] 0
248 [5, 4, 1, 0, 1] 0
249 [5, 4, 1, 0] 3
250 [5, 4, 1, 5] 0
251 [5, 4, 1] 4
252 [5, 4, 0, 5] 0
253 [5, 4, 0] 0
254 [5, 4, 5] 0
255 [5, 4] 3
256 [5, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
257 [5, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
258 [5, 3, 2, 1, 0, 3, 2, 1, 3] 0
259 [5, 3, 2, 1, 0, 3, 2, 1, 2] 0
260 [5, 3, 2, 1, 0, 3, 2, 1] 0
261 [5, 3, 2, 1, 0, 3, 2, 3] 4
262 [5, 3, 2, 1, 0, 3, 2] 0
263 [5, 3, 2, 1, 0, 3, 1] 0
264 [5, 3, 2, 1, 0, 3] 0
265 [5, 3, 2, 1, 0, 2, 1, 2] 0
266 [5, 3, 2, 1, 0, 2, 1] 4
267 [5, 3, 2, 1, 0, 2] 5
268 [5, 3, 2, 1, 0, 1] 0
269 [5, 3, 2, 1, 0] 4
270 [5, 3, 2, 1, 3, 2, 3] 5
271 [5, 3, 2, 1, 3, 2] 0
272 [5, 3, 2, 1, 3] 0
273 [5, 3, 2, 1, 2] 6
274 [5, 3, 2, 1] 5
275 [5, 3, 2, 0, 3] 0
276 [5, 3, 2, 0] 0
277 [5, 3, 2, 3] 0
278 [5, 3, 2] 4
279 [5, 3, 1, 0, 1] 0
280 [5, 3, 1, 0] 5
281 [5, 3, 1] 6
282 [5, 3, 0] 0
283 [5, 3] 5
284 [5, 2, 1, 0, 2, 1, 2] 0
285 [5, 2, 1, 0, 2, 1] 0
286 [5, 2, 1, 0, 2] 0
287 [5, 2, 1, 0, 1] 0
288 [5, 2, 1, 0] 0
289 [5, 2, 1, 2] 4
290 [5, 2, 1] 0
291 [5, 2, 0] 0
292 [5, 2] 0
293 [5, 1, 0, 1] 0
294 [5, 1, 0] 4
295 [5, 1] 5
296 [5, 0] 0
297 [5] 4
298 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
299 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
300 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4] 0
301 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 3] 0
302 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2] 0
303 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 4] 0
304 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3] 0
305 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 2] 0
306 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4] 0
307 [4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2, 3] 0
308 [4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2] 0
309 [4, 3, 2, 1, 0, 4, 3, 2, 1, 3] 0
310 [4, 3, 2, 1, 0, 4, 3, 2, 1, 2] 0
311 [4, 3, 2, 1, 0, 4, 3, 2, 1] 0
312 [4, 3, 2, 1, 0, 4, 3, 2, 4, 3, 4] 0
313 [4, 3, 2, 1, 0, 4, 3, 2, 4, 3] 0
314 [4, 3, 2, 1, 0, 4, 3, 2, 4] 0
315 [4, 3, 2, 1, 0, 4, 3, 2, 3] 0
316 [4, 3, 2, 1, 0, 4, 3, 2] 0
317 [4, 3, 2, 1, 0, 4, 3, 1, 4] 0
318 [4, 3, 2, 1, 0, 4, 3, 1] 0
319 [4, 3, 2, 1, 0, 4, 3, 4] 0
320 [4, 3, 2, 1, 0, 4, 3] 0
321 [4, 3, 2, 1, 0, 4, 2, 1, 2] 0
322 [4, 3, 2, 1, 0, 4, 2, 1] 0
323 [4, 3, 2, 1, 0, 4, 2] 0
324 [4, 3, 2, 1, 0, 4, 1] 0
325 [4, 3, 2, 1, 0, 4] 0
326 [4, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
327 [4, 3, 2, 1, 0, 3, 2, 1, 3, 2] 0
328 [4, 3, 2, 1, 0, 3, 2, 1, 3] 0
329 [4, 3, 2, 1, 0, 3, 2, 1, 2] 0
330 [4, 3, 2, 1, 0, 3, 2, 1] 0
331 [4, 3, 2, 1, 0, 3, 2, 3] 0
332 [4, 3, 2, 1, 0, 3, 2] 0
333 [4, 3, 2, 1, 0, 3, 1] 0
334 [4, 3, 2, 1, 0, 3] 0
335 [4, 3, 2, 1, 0, 2, 1, 2] 0
336 [4, 3, 2, 1, 0, 2, 1] 0
337 [4, 3, 2, 1, 0, 2] 0
338 [4, 3, 2, 1, 0, 1] 0
339 [4, 3, 2, 1, 0] 0
340 [4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 3
341 [4, 3, 2, 1, 4, 3, 2, 4, 3] 0
342 [4, 3, 2, 1, 4, 3, 2, 4] 0
343 [4, 3, 2, 1, 4, 3, 2, 3] 4
344 [4, 3, 2, 1, 4, 3, 2] 3
345 [4, 3, 2, 1, 4, 3, 4] 0
346 [4, 3, 2, 1, 4, 3] 0
347 [4, 3, 2, 1, 4, 2] 3
348 [4, 3, 2, 1, 4] 0
349 [4, 3, 2, 1, 3, 2, 3] 0
350 [4, 3, 2, 1, 3, 2] 0
351 [4, 3, 2, 1, 3] 0
352 [4, 3, 2, 1, 2] 0
353 [4, 3, 2, 1] 0
354 [4, 3, 2, 0, 4, 3, 4] 0
355 [4, 3, 2, 0, 4, 3] 0
356 [4, 3, 2, 0, 4] 0
357 [4, 3, 2, 0, 3] 0
358 [4, 3, 2, 0] 0
359 [4, 3, 2, 4, 3, 4] 0
360 [4, 3, 2, 4, 3] 0
361 [4, 3, 2, 4] 0
362 [4, 3, 2, 3] 0
363 [4, 3, 2] 0
364 [4, 3, 1, 0, 4, 1] 0
365 [4, 3, 1, 0, 4] 3
366 [4, 3, 1, 0, 1] 0
367 [4, 3, 1, 0] 0
368 [4, 3, 1, 4] 4
369 [4, 3, 1] 0
370 [4, 3, 0, 4] 0
371 [4, 3, 0] 0
372 [4, 3, 4] 3
373 [4, 3] 0
374 [4, 2, 1, 0, 2, 1, 2] 0
375 [4, 2, 1, 0, 2, 1] 0
376 [4, 2, 1, 0, 2] 0
377 [4, 2, 1, 0, 1] 0
378 [4, 2, 1, 0] 0
379 [4, 2, 1, 2] 0
380 [4, 2, 1] 0
381 [4, 2, 0] 0
382 [4, 2] 0
383 [4, 1, 0, 1] 0
384 [4, 1, 0] 0
385 [4, 1] 0
386 [4, 0] 0
387 [4] 0
388 [3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 0
389 [3, 2, 1, 0, 3, 2, 1, 3, 2] 0
390 [3, 2, 1, 0, 3, 2, 1, 3] 0
391 [3, 2, 1, 0, 3, 2, 1, 2] 0
392 [3, 2, 1, 0, 3, 2, 1] 0
393 [3, 2, 1, 0, 3, 2, 3] 3
394 [3, 2, 1, 0, 3, 2] 0
395 [3, 2, 1, 0, 3, 1] 0
396 [3, 2, 1, 0, 3] 0
397 [3, 2, 1, 0, 2, 1, 2] 0
398 [3, 2, 1, 0, 2, 1] 3
399 [3, 2, 1, 0, 2] 4
400 [3, 2, 1, 0, 1] 0
401 [3, 2, 1, 0] 3
402 [3, 2, 1, 3, 2, 3] 4
403 [3, 2, 1, 3, 2] 0
404 [3, 2, 1, 3] 0
405 [3, 2, 1, 2] 5
406 [3, 2, 1] 4
407 [3, 2, 0, 3] 0
408 [3, 2, 0] 0
409 [3, 2, 3] 0
410 [3, 2] 3
411 [3, 1, 0, 1] 0
412 [3, 1, 0] 4
413 [3, 1] 5
414 [3, 0] 0
415 [3] 4
416 [2, 1, 0, 2, 1, 2] 0
417 [2, 1, 0, 2, 1] 0
418 [2, 1, 0, 2] 0
419 [2, 1, 0, 1] 0
420 [2, 1, 0] 0
421 [2, 1, 2] 3
422 [2, 1] 0
423 [2, 0] 0
424 [2] 0
425 [1, 0, 1] 0
426 [1, 0] 3
427 [1] 4
428 [0] 0
429 [] 3
sage: A=CartanMatrix(['C',7])
....: c=[6,5,4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_cone(B(A,c),lam(A,v),[k+[c[0]],kinv,kinv+[c[0]]])
....:     print(num,v,P.dimension())
1 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 4
2 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
3 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] 0
4 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] 5
5 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] 4
6 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] 0
7 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] 0
8 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] 4
9 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5] 0
10 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] 0
11 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] 0
12 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4] 0
13 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 3] 0
14 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2] 0
15 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] 0
16 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4] 0
17 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5] 0
18 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 4] 0
19 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3] 0
20 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2, 5] 5
21 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2] 0
22 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 5] 4
23 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4] 0
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [82], line 8
      6 k=list(reversed(v))
      7 kinv=list(reversed(inv_sortable(A,c[Integer(1):],v)))
----> 8 P=p_lambda_cone(B(A,c),lam(A,v),[k+[c[Integer(0)]],kinv,kinv+[c[Integer(0)]]])
      9 print(num,v,P.dimension())

File ~/git/affine_dominance/software/domination5.py:76, in p_lambda_cone(B, la, seqs)
     74 P = cone_at(p_lambda(B, la, seqs[0]),la)
     75 for s in seqs:
---> 76     P = P.intersection(cone_at(p_lambda(B, la, s),la))
     77     if P.dimension()==0:
     78         break

File ~/git/affine_dominance/software/domination5.py:49, in p_lambda(B, la, seq)
     45         P=Ep*Pp
     46     else:
     47         #print("Pp:   ",Pp,Pp.vertices(),Pp.rays(),Pp.lines(),"\n")
     48         #print("Pm:   ",Pm,Pm.vertices(),Pm.rays(),Pm.lines(),"\n\n")
---> 49         P=(Ep*Pp).convex_hull(Em*Pm)
     50     B.mutate(k)
     51 return P

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4099, in sage.structure.element.Matrix.__mul__ (build/cythonized/sage/structure/element.c:35219)()
   4097 
   4098         if BOTH_ARE_ELEMENT(cl):
-> 4099             return coercion_model.bin_op(left, right, mul)
   4100 
   4101         cdef long value

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1222, in sage.structure.coerce.CoercionModel.bin_op (build/cythonized/sage/structure/coerce.c:15809)()
   1220 if action is not None:
   1221     if (<Action>action)._is_left:
-> 1222         return (<Action>action)._act_(x, y)
   1223     else:
   1224         return (<Action>action)._act_(y, x)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_actions.pyx:157, in sage.structure.coerce_actions.ActedUponAction._act_ (build/cythonized/sage/structure/coerce_actions.c:8579)()
    155     <... 'sage.structure.coerce_actions.ActedUponAction'>
    156 """
--> 157 return (<Element>x)._acted_upon_(g, not self._is_left)
    158 
    159 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:949, in sage.structure.element.Element._acted_upon_ (build/cythonized/sage/structure/element.c:16495)()
    947     return None
    948 
--> 949 cpdef _acted_upon_(self, x, bint self_on_left) noexcept:
    950     """
    951     Use this method to implement ``self`` acted on by x.

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1450, in Polyhedron_base5._acted_upon_(self, actor, self_on_left)
   1448         raise ValueError("matrices should act on the left")
   1449     else:
-> 1450         return self.linear_transformation(actor)
   1451 else:
   1452     return self.dilation(actor)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1879, in Polyhedron_base5.linear_transformation(self, linear_transf, new_base_ring)
   1873     pref_rep = 'Vrep' if self.n_vertices() <= self.n_inequalities() else 'Hrep'
   1875     return new_parent.element_class(new_parent, [new_vertices, new_rays, new_lines],
   1876                                     [new_inequalities, new_equations],
   1877                                     Vrep_minimal=True, Hrep_minimal=True, pref_rep=pref_rep)
-> 1879 return new_parent.element_class(new_parent, [tuple(new_vertices), tuple(new_rays), tuple(new_lines)], None)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:174, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    171     lines = tuple(lines)
    173 if vertices or rays or lines:
--> 174     self._init_from_Vrepresentation(vertices, rays, lines, **kwds)
    175 else:
    176     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:99, in Polyhedron_ppl._init_from_Vrepresentation(self, vertices, rays, lines, minimize, verbose)
     72 def _init_from_Vrepresentation(self, vertices, rays, lines, minimize=True, verbose=False):
     73     """
     74     Construct polyhedron from V-representation data.
     75 
   (...)
     97         sage: Polyhedron_ppl._init_from_Vrepresentation(p, [], [], [])
     98     """
---> 99     gs = self._convert_generators_to_ppl(vertices, rays, lines)
    100     if gs.empty():
    101         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'empty')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:473, in Polyhedron_ppl._convert_generators_to_ppl(vertices, rays, lines)
    471     vertices = []
    472 for v in vertices:
--> 473     gs.insert(Polyhedron_ppl._convert_generator_to_ppl(v, VERTEX))
    474 if rays is None:
    475     rays = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:442, in Polyhedron_ppl._convert_generator_to_ppl(v, typ)
    440 d = LCM_list([denominator(v_i) for v_i in v])
    441 if d.is_one():
--> 442     return ob(Linear_Expression(v, 0))
    443 else:
    444     dv = [ d*v_i for v_i in v ]

File ppl/linear_algebra.pyx:654, in ppl.linear_algebra.Linear_Expression.__init__()

File ppl/linear_algebra.pyx:49, in ppl.linear_algebra.PPL_Coefficient_from_pyobject()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:1107, in sage.structure.element.Element.__richcmp__ (build/cythonized/sage/structure/element.c:18121)()
   1105         return (<Element>self)._richcmp_(other, op)
   1106     else:
-> 1107         return coercion_model.richcmp(self, other, op)
   1108 
   1109 cpdef _richcmp_(left, right, int op) noexcept:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:2021, in sage.structure.coerce.CoercionModel.richcmp (build/cythonized/sage/structure/coerce.c:26173)()
   2019 # Coerce to a common parent
   2020 try:
-> 2021     x, y = self.canonical_coercion(x, y)
   2022 except (TypeError, NotImplementedError):
   2023     pass

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1422, in sage.structure.coerce.CoercionModel.canonical_coercion (build/cythonized/sage/structure/coerce.c:18956)()
   1420             self._record_exception()
   1421 
-> 1422     raise TypeError("no common canonical parent for objects with parents: '%s' and '%s'"%(xp, yp))
   1423 
   1424 cpdef coercion_maps(self, R, S) noexcept:

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['C',7])
....: c=[6,5,4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     d=p_lambda_cone(B(A,c),lam(A,v),[kinv,k+[c[0]]]).dimension()
....:     print(num,v,d)
....:     if d>0:
....:         print('Failure!')
....: 
1 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 4
Failure!
2 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
3 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] 0
4 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] 5
Failure!
5 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] 4
Failure!
6 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] 0
7 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] 0
8 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] 4
Failure!
9 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5] 0
10 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] 0
11 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] 0
12 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4] 0
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [83], line 8
      6 k=list(reversed(v))
      7 kinv=list(reversed(inv_sortable(A,c[Integer(1):],v)))
----> 8 d=p_lambda_cone(B(A,c),lam(A,v),[kinv,k+[c[Integer(0)]]]).dimension()
      9 print(num,v,d)
     10 if d>Integer(0):

File ~/git/affine_dominance/software/domination5.py:76, in p_lambda_cone(B, la, seqs)
     74 P = cone_at(p_lambda(B, la, seqs[0]),la)
     75 for s in seqs:
---> 76     P = P.intersection(cone_at(p_lambda(B, la, s),la))
     77     if P.dimension()==0:
     78         break

File ~/git/affine_dominance/software/domination5.py:40, in p_lambda(B, la, seq)
     37 Hm = Polyhedron(ieqs=[(0,)*(k+1)+(-1,)+(0,)*(m-k-1)])
     38 #print("Hp:   ",Hp,Hp.vertices(),Hp.rays(),Hp.lines(),"\n")
     39 #print("Hm:   ",Hm,Hm.vertices(),Hm.rays(),Hm.lines(),"\n\n")
---> 40 Pp = P.intersection(Hp)
     41 Pm = P.intersection(Hm)
     42 if Pp.dimension() < rk:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1371, in Polyhedron_base5.intersection(self, other)
   1369 parent = self.parent()
   1370 try:
-> 1371     intersection = parent.element_class(parent, None, [new_ieqs, new_eqns])
   1373     # Force calculation of the vertices.
   1374     _ = intersection.n_vertices()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:70, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
---> 70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:189, in Polyhedron_ppl.set_immutable(self)
    187 if not hasattr(self, '_Vrepresentation'):
    188     try:
--> 189         self._init_Vrepresentation_from_ppl(True)
    190     except TypeError as e:
    191         # Apparently the polyhedron is (no longer) integral.
    192         self._clear_cache()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:300, in Polyhedron_ppl._init_Vrepresentation_from_ppl(self, minimize)
    298     raise TypeError("Vrepresentation of mutable polyhedra cannot be recomputed")
    299 self._Vrepresentation = []
--> 300 gs = self._ppl_polyhedron.minimized_generators()
    301 parent = self.parent()
    302 for g in gs:

File ppl/polyhedron.pyx:340, in ppl.polyhedron.Polyhedron.minimized_generators()

KeyboardInterrupt: 
sage: A=CartanMatrix(['C',7])
....: c=[6,5,4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     d=p_lambda_cone(B(A,c),lam(A,v),[kinv,k+[c[0]]]).dimension()
....:     print(num,v,d)
....:     if d>0:
....:         print('Failure!')
....:         break
....: 
1 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 4
Failure!
sage: A=CartanMatrix(['C',7])
....: c=[6,5,4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     d=p_lambda_cone(B(A,c),lam(A,v),[k,kinv+[c[0]]]).dimension()
....:     print(num,v,d)
....:     if d>0:
....:         print('Failure!')
....:         break
1 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
2 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
3 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] 0
4 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] 0
5 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] 0
6 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] 0
7 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] 0
8 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] 0
9 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5] 0
10 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] 0
11 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] 0
12 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4] 0
13 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 3] 0
14 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2] 0
15 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] 0
16 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4] 0
17 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5] 0
18 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 4] 0
19 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3] 0
20 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2, 5] 0
21 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2] 0
22 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 5] 0
23 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4] 0
24 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2, 3] 0
25 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2] 0
26 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3] 0
27 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 2] 0
28 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5] 0
29 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
30 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
31 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4] 0
32 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 3] 0
33 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2] 0
34 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 4] 0
35 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3] 0
36 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 2] 0
37 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4] 0
38 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2, 3] 0
39 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2] 0
40 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3] 0
41 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 2] 0
42 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1] 0
43 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 3
Failure!
sage: A=CartanMatrix(['C',7])
....: c=[6,5,4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     d=p_lambda_cone(B(A,c),lam(A,v),[k,kinv,kinv+[c[0]]]).dimension()
....:     print(num,v,d)
....:     if d>0:
....:         print('Failure!')
....:         break
1 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
2 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
3 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] 0
4 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] 0
5 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] 0
6 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] 0
7 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] 0
8 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] 0
9 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5] 0
10 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] 0
11 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] 0
12 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4] 0
13 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 3] 0
14 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2] 0
15 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] 0
16 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4] 0
17 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5] 0
18 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 4] 0
19 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3] 0
20 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2, 5] 0
21 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2] 0
22 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 5] 0
23 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4] 0
24 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2, 3] 0
25 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2] 0
26 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3] 0
27 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 2] 0
28 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5] 0
29 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
30 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
31 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4] 0
32 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 3] 0
33 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2] 0
34 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 4] 0
35 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3] 0
36 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 2] 0
37 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4] 0
38 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2, 3] 0
39 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2] 0
40 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3] 0
41 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 2] 0
42 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1] 0
43 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 3
Failure!
sage: A=CartanMatrix(['C',7])
....: c=[6,5,4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     d=p_lambda_cone(B(A,c),lam(A,v),[k,k+[c[0]],kinv+[c[0]]]).dimension()
....:     print(num,v,d)
....:     if d>0:
....:         print('Failure!')
....:         break
1 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 0
2 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] 0
3 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] 0
4 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] 0
5 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] 0
6 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] 0
7 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] 0
8 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] 0
9 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5] 0
10 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] 0
11 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] 0
12 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4] 0
13 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 3] 0
14 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2] 0
15 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] 0
16 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4] 0
17 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5] 0
18 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 4] 0
19 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3] 0
20 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2, 5] 0
21 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2] 0
22 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 5] 0
23 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4] 0
24 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2, 3] 0
25 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2] 0
26 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3] 0
27 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 2] 0
28 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5] 0
29 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] 0
30 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3] 0
31 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4] 0
32 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 3] 0
33 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2] 0
34 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 4] 0
35 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3] 0
36 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 2] 0
37 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4] 0
38 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2, 3] 0
39 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2] 0
40 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3] 0
41 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 2] 0
42 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1] 0
43 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] 3
Failure!
sage: A=CartanMatrix(['C',7])
....: c=[6,5,4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_cone(B(A,c),lam(A,v),[k,k+[c[0]]])
....:     Q=p_lambda_cone(B(A,c),lam(A,v),[kinv,kinv+[c[0]]])
....:     b=bool(P.translation(-lam(A,v))==-(Q.translation(-lam(A,v))))
....:     print(num,v,b)
....:     if b==false:
....:         print('Failure!')
1 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] True
2 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] True
3 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] True
4 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] True
5 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] True
6 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] True
7 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] True
8 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] True
9 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5] True
10 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] True
11 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] True
12 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4] True
13 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 3] True
14 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2] True
15 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] True
16 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4] True
17 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5] True
18 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 4] True
19 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3] True
20 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2, 5] True
21 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2] True
22 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 5] True
23 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4] True
24 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2, 3] True
25 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2] True
26 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3] True
27 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 2] True
28 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5] True
29 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] True
30 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3] True
31 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4] True
32 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 3] True
33 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2] True
34 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 4] True
35 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3] True
36 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 2] True
37 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4] True
38 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2, 3] True
39 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2] True
40 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3] True
41 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 2] True
42 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1] True
43 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] True
44 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4] True
45 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5] True
46 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 4] True
47 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3] True
48 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 5] True
49 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4] True
50 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 3] True
51 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5] True
52 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4, 3, 4] True
53 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4, 3] True
54 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4] True
55 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 3] True
56 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2] True
57 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5, 4, 5] True
58 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5, 4] True
59 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5] True
60 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 4] True
61 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1] True
62 [5, 4, 3, 2, 1, 0, 5, 4, 3, 5, 4, 5] True
63 [5, 4, 3, 2, 1, 0, 5, 4, 3, 5, 4] True
64 [5, 4, 3, 2, 1, 0, 5, 4, 3, 5] True
65 [5, 4, 3, 2, 1, 0, 5, 4, 3, 4] True
66 [5, 4, 3, 2, 1, 0, 5, 4, 3] True
67 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 5, 2] True
68 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 5] True
69 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 2] True
70 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1] True
71 [5, 4, 3, 2, 1, 0, 5, 4, 2, 5] True
72 [5, 4, 3, 2, 1, 0, 5, 4, 2] True
73 [5, 4, 3, 2, 1, 0, 5, 4, 1, 5] True
74 [5, 4, 3, 2, 1, 0, 5, 4, 1] True
75 [5, 4, 3, 2, 1, 0, 5, 4, 5] True
76 [5, 4, 3, 2, 1, 0, 5, 4] True
77 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3, 2, 3] True
78 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3, 2] True
79 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3] True
80 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 2] True
81 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1] True
82 [5, 4, 3, 2, 1, 0, 5, 3, 2, 3] True
83 [5, 4, 3, 2, 1, 0, 5, 3, 2] True
84 [5, 4, 3, 2, 1, 0, 5, 3, 1] True
85 [5, 4, 3, 2, 1, 0, 5, 3] True
86 [5, 4, 3, 2, 1, 0, 5, 2, 1, 2] True
87 [5, 4, 3, 2, 1, 0, 5, 2, 1] True
88 [5, 4, 3, 2, 1, 0, 5, 2] True
89 [5, 4, 3, 2, 1, 0, 5, 1] True
90 [5, 4, 3, 2, 1, 0, 5] True
91 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] True
92 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3] True
93 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4] True
94 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 3] True
95 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2] True
96 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 4] True
97 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3] True
98 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 2] True
99 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4] True
100 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2, 3] True
101 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2] True
102 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3] True
103 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 2] True
104 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1] True
105 [5, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3, 4] True
106 [5, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3] True
107 [5, 4, 3, 2, 1, 0, 4, 3, 2, 4] True
108 [5, 4, 3, 2, 1, 0, 4, 3, 2, 3] True
109 [5, 4, 3, 2, 1, 0, 4, 3, 2] True
110 [5, 4, 3, 2, 1, 0, 4, 3, 1, 4] True
111 [5, 4, 3, 2, 1, 0, 4, 3, 1] True
112 [5, 4, 3, 2, 1, 0, 4, 3, 4] True
113 [5, 4, 3, 2, 1, 0, 4, 3] True
114 [5, 4, 3, 2, 1, 0, 4, 2, 1, 2] True
115 [5, 4, 3, 2, 1, 0, 4, 2, 1] True
116 [5, 4, 3, 2, 1, 0, 4, 2] True
117 [5, 4, 3, 2, 1, 0, 4, 1] True
118 [5, 4, 3, 2, 1, 0, 4] True
119 [5, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] True
120 [5, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2] True
121 [5, 4, 3, 2, 1, 0, 3, 2, 1, 3] True
122 [5, 4, 3, 2, 1, 0, 3, 2, 1, 2] True
123 [5, 4, 3, 2, 1, 0, 3, 2, 1] True
124 [5, 4, 3, 2, 1, 0, 3, 2, 3] True
125 [5, 4, 3, 2, 1, 0, 3, 2] True
126 [5, 4, 3, 2, 1, 0, 3, 1] True
127 [5, 4, 3, 2, 1, 0, 3] True
128 [5, 4, 3, 2, 1, 0, 2, 1, 2] True
129 [5, 4, 3, 2, 1, 0, 2, 1] True
130 [5, 4, 3, 2, 1, 0, 2] True
131 [5, 4, 3, 2, 1, 0, 1] True
132 [5, 4, 3, 2, 1, 0] True
133 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] True
134 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] True
135 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] True
136 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] True
137 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] True
138 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] True
139 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] True
140 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] True
141 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5] True
142 [5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] True
143 [5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] True
144 [5, 4, 3, 2, 1, 5, 4, 3, 2, 4] True
145 [5, 4, 3, 2, 1, 5, 4, 3, 2, 3] True
146 [5, 4, 3, 2, 1, 5, 4, 3, 2] True
147 [5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] True
148 [5, 4, 3, 2, 1, 5, 4, 3, 5, 4] True
149 [5, 4, 3, 2, 1, 5, 4, 3, 5] True
150 [5, 4, 3, 2, 1, 5, 4, 3, 4] True
151 [5, 4, 3, 2, 1, 5, 4, 3] True
152 [5, 4, 3, 2, 1, 5, 4, 2, 5] True
153 [5, 4, 3, 2, 1, 5, 4, 2] True
154 [5, 4, 3, 2, 1, 5, 4, 5] True
155 [5, 4, 3, 2, 1, 5, 4] True
156 [5, 4, 3, 2, 1, 5, 3, 2, 3] True
157 [5, 4, 3, 2, 1, 5, 3, 2] True
158 [5, 4, 3, 2, 1, 5, 3] True
159 [5, 4, 3, 2, 1, 5, 2] True
160 [5, 4, 3, 2, 1, 5] True
161 [5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] True
162 [5, 4, 3, 2, 1, 4, 3, 2, 4, 3] True
163 [5, 4, 3, 2, 1, 4, 3, 2, 4] True
164 [5, 4, 3, 2, 1, 4, 3, 2, 3] True
165 [5, 4, 3, 2, 1, 4, 3, 2] True
166 [5, 4, 3, 2, 1, 4, 3, 4] True
167 [5, 4, 3, 2, 1, 4, 3] True
168 [5, 4, 3, 2, 1, 4, 2] True
169 [5, 4, 3, 2, 1, 4] True
170 [5, 4, 3, 2, 1, 3, 2, 3] True
171 [5, 4, 3, 2, 1, 3, 2] True
172 [5, 4, 3, 2, 1, 3] True
173 [5, 4, 3, 2, 1, 2] True
174 [5, 4, 3, 2, 1] True
175 [5, 4, 3, 2, 0, 5, 4, 3, 5, 4, 5] True
176 [5, 4, 3, 2, 0, 5, 4, 3, 5, 4] True
177 [5, 4, 3, 2, 0, 5, 4, 3, 5] True
178 [5, 4, 3, 2, 0, 5, 4, 3, 4] True
179 [5, 4, 3, 2, 0, 5, 4, 3] True
180 [5, 4, 3, 2, 0, 5, 4, 5] True
181 [5, 4, 3, 2, 0, 5, 4] True
182 [5, 4, 3, 2, 0, 5, 3] True
183 [5, 4, 3, 2, 0, 5] True
184 [5, 4, 3, 2, 0, 4, 3, 4] True
185 [5, 4, 3, 2, 0, 4, 3] True
186 [5, 4, 3, 2, 0, 4] True
187 [5, 4, 3, 2, 0, 3] True
188 [5, 4, 3, 2, 0] True
189 [5, 4, 3, 2, 5, 4, 3, 5, 4, 5] True
190 [5, 4, 3, 2, 5, 4, 3, 5, 4] True
191 [5, 4, 3, 2, 5, 4, 3, 5] True
192 [5, 4, 3, 2, 5, 4, 3, 4] True
193 [5, 4, 3, 2, 5, 4, 3] True
194 [5, 4, 3, 2, 5, 4, 5] True
195 [5, 4, 3, 2, 5, 4] True
196 [5, 4, 3, 2, 5, 3] True
197 [5, 4, 3, 2, 5] True
198 [5, 4, 3, 2, 4, 3, 4] True
199 [5, 4, 3, 2, 4, 3] True
200 [5, 4, 3, 2, 4] True
201 [5, 4, 3, 2, 3] True
202 [5, 4, 3, 2] True
203 [5, 4, 3, 1, 0, 5, 4, 1, 5] True
204 [5, 4, 3, 1, 0, 5, 4, 1] True
205 [5, 4, 3, 1, 0, 5, 4, 5] True
206 [5, 4, 3, 1, 0, 5, 4] True
207 [5, 4, 3, 1, 0, 5, 1] True
208 [5, 4, 3, 1, 0, 5] True
209 [5, 4, 3, 1, 0, 4, 1] True
210 [5, 4, 3, 1, 0, 4] True
211 [5, 4, 3, 1, 0, 1] True
212 [5, 4, 3, 1, 0] True
213 [5, 4, 3, 1, 5, 4, 5] True
214 [5, 4, 3, 1, 5, 4] True
215 [5, 4, 3, 1, 5] True
216 [5, 4, 3, 1, 4] True
217 [5, 4, 3, 1] True
218 [5, 4, 3, 0, 5, 4, 5] True
219 [5, 4, 3, 0, 5, 4] True
220 [5, 4, 3, 0, 5] True
221 [5, 4, 3, 0, 4] True
222 [5, 4, 3, 0] True
223 [5, 4, 3, 5, 4, 5] True
224 [5, 4, 3, 5, 4] True
225 [5, 4, 3, 5] True
226 [5, 4, 3, 4] True
227 [5, 4, 3] True
228 [5, 4, 2, 1, 0, 5, 2, 1, 2] True
229 [5, 4, 2, 1, 0, 5, 2, 1] True
230 [5, 4, 2, 1, 0, 5, 2] True
231 [5, 4, 2, 1, 0, 5, 1] True
232 [5, 4, 2, 1, 0, 5] True
233 [5, 4, 2, 1, 0, 2, 1, 2] True
234 [5, 4, 2, 1, 0, 2, 1] True
235 [5, 4, 2, 1, 0, 2] True
236 [5, 4, 2, 1, 0, 1] True
237 [5, 4, 2, 1, 0] True
238 [5, 4, 2, 1, 5, 2] True
239 [5, 4, 2, 1, 5] True
240 [5, 4, 2, 1, 2] True
241 [5, 4, 2, 1] True
242 [5, 4, 2, 0, 5] True
243 [5, 4, 2, 0] True
244 [5, 4, 2, 5] True
245 [5, 4, 2] True
246 [5, 4, 1, 0, 5, 1] True
247 [5, 4, 1, 0, 5] True
248 [5, 4, 1, 0, 1] True
249 [5, 4, 1, 0] True
250 [5, 4, 1, 5] True
251 [5, 4, 1] True
252 [5, 4, 0, 5] True
253 [5, 4, 0] True
254 [5, 4, 5] True
255 [5, 4] True
256 [5, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] True
257 [5, 3, 2, 1, 0, 3, 2, 1, 3, 2] True
258 [5, 3, 2, 1, 0, 3, 2, 1, 3] True
259 [5, 3, 2, 1, 0, 3, 2, 1, 2] True
260 [5, 3, 2, 1, 0, 3, 2, 1] True
261 [5, 3, 2, 1, 0, 3, 2, 3] True
262 [5, 3, 2, 1, 0, 3, 2] True
263 [5, 3, 2, 1, 0, 3, 1] True
264 [5, 3, 2, 1, 0, 3] True
265 [5, 3, 2, 1, 0, 2, 1, 2] True
266 [5, 3, 2, 1, 0, 2, 1] True
267 [5, 3, 2, 1, 0, 2] True
268 [5, 3, 2, 1, 0, 1] True
269 [5, 3, 2, 1, 0] True
270 [5, 3, 2, 1, 3, 2, 3] True
271 [5, 3, 2, 1, 3, 2] True
272 [5, 3, 2, 1, 3] True
273 [5, 3, 2, 1, 2] True
274 [5, 3, 2, 1] True
275 [5, 3, 2, 0, 3] True
276 [5, 3, 2, 0] True
277 [5, 3, 2, 3] True
278 [5, 3, 2] True
279 [5, 3, 1, 0, 1] True
280 [5, 3, 1, 0] True
281 [5, 3, 1] True
282 [5, 3, 0] True
283 [5, 3] True
284 [5, 2, 1, 0, 2, 1, 2] True
285 [5, 2, 1, 0, 2, 1] True
286 [5, 2, 1, 0, 2] True
287 [5, 2, 1, 0, 1] True
288 [5, 2, 1, 0] True
289 [5, 2, 1, 2] True
290 [5, 2, 1] True
291 [5, 2, 0] True
292 [5, 2] True
293 [5, 1, 0, 1] True
294 [5, 1, 0] True
295 [5, 1] True
296 [5, 0] True
297 [5] True
298 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] True
299 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3] True
300 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4] True
301 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 3] True
302 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2] True
303 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 4] True
304 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3] True
305 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 2] True
306 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4] True
307 [4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2, 3] True
308 [4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2] True
309 [4, 3, 2, 1, 0, 4, 3, 2, 1, 3] True
310 [4, 3, 2, 1, 0, 4, 3, 2, 1, 2] True
311 [4, 3, 2, 1, 0, 4, 3, 2, 1] True
312 [4, 3, 2, 1, 0, 4, 3, 2, 4, 3, 4] True
313 [4, 3, 2, 1, 0, 4, 3, 2, 4, 3] True
314 [4, 3, 2, 1, 0, 4, 3, 2, 4] True
315 [4, 3, 2, 1, 0, 4, 3, 2, 3] True
316 [4, 3, 2, 1, 0, 4, 3, 2] True
317 [4, 3, 2, 1, 0, 4, 3, 1, 4] True
318 [4, 3, 2, 1, 0, 4, 3, 1] True
319 [4, 3, 2, 1, 0, 4, 3, 4] True
320 [4, 3, 2, 1, 0, 4, 3] True
321 [4, 3, 2, 1, 0, 4, 2, 1, 2] True
322 [4, 3, 2, 1, 0, 4, 2, 1] True
323 [4, 3, 2, 1, 0, 4, 2] True
324 [4, 3, 2, 1, 0, 4, 1] True
325 [4, 3, 2, 1, 0, 4] True
326 [4, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] True
327 [4, 3, 2, 1, 0, 3, 2, 1, 3, 2] True
328 [4, 3, 2, 1, 0, 3, 2, 1, 3] True
329 [4, 3, 2, 1, 0, 3, 2, 1, 2] True
330 [4, 3, 2, 1, 0, 3, 2, 1] True
331 [4, 3, 2, 1, 0, 3, 2, 3] True
332 [4, 3, 2, 1, 0, 3, 2] True
333 [4, 3, 2, 1, 0, 3, 1] True
334 [4, 3, 2, 1, 0, 3] True
335 [4, 3, 2, 1, 0, 2, 1, 2] True
336 [4, 3, 2, 1, 0, 2, 1] True
337 [4, 3, 2, 1, 0, 2] True
338 [4, 3, 2, 1, 0, 1] True
339 [4, 3, 2, 1, 0] True
340 [4, 3, 2, 1, 4, 3, 2, 4, 3, 4] True
341 [4, 3, 2, 1, 4, 3, 2, 4, 3] True
342 [4, 3, 2, 1, 4, 3, 2, 4] True
343 [4, 3, 2, 1, 4, 3, 2, 3] True
344 [4, 3, 2, 1, 4, 3, 2] True
345 [4, 3, 2, 1, 4, 3, 4] True
346 [4, 3, 2, 1, 4, 3] True
347 [4, 3, 2, 1, 4, 2] True
348 [4, 3, 2, 1, 4] True
349 [4, 3, 2, 1, 3, 2, 3] True
350 [4, 3, 2, 1, 3, 2] True
351 [4, 3, 2, 1, 3] True
352 [4, 3, 2, 1, 2] True
353 [4, 3, 2, 1] True
354 [4, 3, 2, 0, 4, 3, 4] True
355 [4, 3, 2, 0, 4, 3] True
356 [4, 3, 2, 0, 4] True
357 [4, 3, 2, 0, 3] True
358 [4, 3, 2, 0] True
359 [4, 3, 2, 4, 3, 4] True
360 [4, 3, 2, 4, 3] True
361 [4, 3, 2, 4] True
362 [4, 3, 2, 3] True
363 [4, 3, 2] True
364 [4, 3, 1, 0, 4, 1] True
365 [4, 3, 1, 0, 4] True
366 [4, 3, 1, 0, 1] True
367 [4, 3, 1, 0] True
368 [4, 3, 1, 4] True
369 [4, 3, 1] True
370 [4, 3, 0, 4] True
371 [4, 3, 0] True
372 [4, 3, 4] True
373 [4, 3] True
374 [4, 2, 1, 0, 2, 1, 2] True
375 [4, 2, 1, 0, 2, 1] True
376 [4, 2, 1, 0, 2] True
377 [4, 2, 1, 0, 1] True
378 [4, 2, 1, 0] True
379 [4, 2, 1, 2] True
380 [4, 2, 1] True
381 [4, 2, 0] True
382 [4, 2] True
383 [4, 1, 0, 1] True
384 [4, 1, 0] True
385 [4, 1] True
386 [4, 0] True
387 [4] True
388 [3, 2, 1, 0, 3, 2, 1, 3, 2, 3] True
389 [3, 2, 1, 0, 3, 2, 1, 3, 2] True
390 [3, 2, 1, 0, 3, 2, 1, 3] True
391 [3, 2, 1, 0, 3, 2, 1, 2] True
392 [3, 2, 1, 0, 3, 2, 1] True
393 [3, 2, 1, 0, 3, 2, 3] True
394 [3, 2, 1, 0, 3, 2] True
395 [3, 2, 1, 0, 3, 1] True
396 [3, 2, 1, 0, 3] True
397 [3, 2, 1, 0, 2, 1, 2] True
398 [3, 2, 1, 0, 2, 1] True
399 [3, 2, 1, 0, 2] True
400 [3, 2, 1, 0, 1] True
401 [3, 2, 1, 0] True
402 [3, 2, 1, 3, 2, 3] True
403 [3, 2, 1, 3, 2] True
404 [3, 2, 1, 3] True
405 [3, 2, 1, 2] True
406 [3, 2, 1] True
407 [3, 2, 0, 3] True
408 [3, 2, 0] True
409 [3, 2, 3] True
410 [3, 2] True
411 [3, 1, 0, 1] True
412 [3, 1, 0] True
413 [3, 1] True
414 [3, 0] True
415 [3] True
416 [2, 1, 0, 2, 1, 2] True
417 [2, 1, 0, 2, 1] True
418 [2, 1, 0, 2] True
419 [2, 1, 0, 1] True
420 [2, 1, 0] True
421 [2, 1, 2] True
422 [2, 1] True
423 [2, 0] True
424 [2] True
425 [1, 0, 1] True
426 [1, 0] True
427 [1] True
428 [0] True
429 [] True
sage: A=CartanMatrix(['D',4])
....: c=[3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_cone(B(A,c),lam(A,v),[k,k+[c[0]]])
....:     Bprime=B(A,c)
....:     Bprime.set_column(c[0],[0]*A.nrows())
....:     S=p_lambda_cone(Bprime,lam(A,v),[k])
....:     b=bool(P==S)
....:     print(num,v,b)
....:     if not(b):
....:         print('Failure!')
....:         break
....: 
1 [2, 1, 0, 2, 1, 2] True
2 [2, 1, 0, 2, 1] False
Failure!
sage: A=CartanMatrix(['D',5])
....: c=[4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_cone(B(A,c),lam(A,v),[k,k+[c[0]]])
....:     Bprime=B(A,c)
....:     Bprime.set_column(c[0],[0]*A.nrows())
....:     S=p_lambda_cone(Bprime,lam(A,v),[k])
....:     b=bool(P==S)
....:     print(num,v,b)
....:     if not(b):
....:         print('Failure!')
....:         break
1 [3, 2, 1, 0, 3, 2, 1, 3, 2, 3] True
2 [3, 2, 1, 0, 3, 2, 1, 3, 2] True
3 [3, 2, 1, 0, 3, 2, 1, 3] True
4 [3, 2, 1, 0, 3, 2, 1, 2] True
5 [3, 2, 1, 0, 3, 2, 1] True
6 [3, 2, 1, 0, 3, 2, 3] True
7 [3, 2, 1, 0, 3, 2] True
8 [3, 2, 1, 0, 3, 1] True
9 [3, 2, 1, 0, 3] True
10 [3, 2, 1, 0, 2, 1, 2] True
11 [3, 2, 1, 0, 2, 1] True
12 [3, 2, 1, 0, 2] True
13 [3, 2, 1, 0, 1] True
14 [3, 2, 1, 0] True
15 [3, 2, 1, 3, 2, 3] True
16 [3, 2, 1, 3, 2] True
17 [3, 2, 1, 3] True
18 [3, 2, 1, 2] True
19 [3, 2, 1] True
20 [3, 2, 0, 3] True
21 [3, 2, 0] True
22 [3, 2, 3] True
23 [3, 2] True
24 [3, 1, 0, 1] True
25 [3, 1, 0] True
26 [3, 1] True
27 [3, 0] True
28 [3] True
29 [2, 1, 0, 2, 1, 2] True
30 [2, 1, 0, 2, 1] True
31 [2, 1, 0, 2] True
32 [2, 1, 0, 1] True
33 [2, 1, 0] True
34 [2, 1, 2] True
35 [2, 1] True
36 [2, 0] True
37 [2] True
38 [1, 0, 1] True
39 [1, 0] True
40 [1] True
41 [0] True
42 [] True
sage: A=CartanMatrix(['D',7])
....: c=[6,54,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_cone(B(A,c),lam(A,v),[k,k+[c[0]]])
....:     Bprime=B(A,c)
....:     Bprime.set_column(c[0],[0]*A.nrows())
....:     S=p_lambda_cone(Bprime,lam(A,v),[k])
....:     b=bool(P==S)
....:     print(num,v,b)
....:     if not(b):
....:         print('Failure!')
....:         break
---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
Cell In [91], line 4
      2 c=[Integer(6),Integer(54),Integer(3),Integer(2),Integer(1),Integer(0)]
      3 num=Integer(0)
----> 4 for v in sortables(A,c[Integer(1):]):
      5     num+=Integer(1)
      6     k=list(reversed(v))

File ~/git/affine_dominance/software/domination5.py:261, in sortables(A, c)
    260 def sortables(A,c):
--> 261     yield from sortables_remaining(A,c,[],vector([1]*A.nrows()))

File ~/git/affine_dominance/software/domination5.py:267, in sortables_remaining(A, c, sort, vec)
    265     yield sort
    266 else:
--> 267     if vec[c[0]]>0:
    268         yield from sortables_remaining(A,c[1:]+[c[0]],sort+[c[0]],reflect_once(A,vec,c[0]))
    269     yield from sortables_remaining(A,c[1:],sort,vec)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/modules/free_module_element.pyx:1842, in sage.modules.free_module_element.FreeModuleElement.__getitem__ (build/cythonized/sage/modules/free_module_element.c:19571)()
   1840     n += d
   1841 if n < 0 or n >= d:
-> 1842     raise IndexError("vector index out of range")
   1843 return self.get_unsafe(n)
   1844 

IndexError: vector index out of range
sage: A=CartanMatrix(['D',7])
....: c=[6,5,4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_cone(B(A,c),lam(A,v),[k,k+[c[0]]])
....:     Bprime=B(A,c)
....:     Bprime.set_column(c[0],[0]*A.nrows())
....:     S=p_lambda_cone(Bprime,lam(A,v),[k])
....:     b=bool(P==S)
....:     print(num,v,b)
....:     if not(b):
....:         print('Failure!')
....:         break
1 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] True
2 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] True
3 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] True
4 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] True
5 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] True
6 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] True
7 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] True
8 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] True
9 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5] True
10 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] True
11 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] True
12 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4] True
13 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 3] True
14 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2] True
15 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] True
16 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4] True
17 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5] True
18 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 4] True
19 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3] True
20 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2, 5] True
21 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2] True
22 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 5] True
23 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4] True
24 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2, 3] True
25 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2] True
26 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3] True
27 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 2] True
28 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5] True
29 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] True
30 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3] True
31 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4] True
32 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 3] True
33 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2] True
34 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 4] True
35 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3] True
36 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 2] True
37 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4] True
38 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2, 3] True
39 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2] True
40 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3] True
41 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 2] True
42 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1] True
43 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] True
44 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4] True
45 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5] True
46 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 4] True
47 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3] True
48 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 5] True
49 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4] True
50 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 3] True
51 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5] True
52 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4, 3, 4] True
53 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4, 3] True
54 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4] True
55 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 3] True
56 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2] True
57 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5, 4, 5] True
58 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5, 4] True
59 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5] True
60 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 4] True
61 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1] True
62 [5, 4, 3, 2, 1, 0, 5, 4, 3, 5, 4, 5] True
63 [5, 4, 3, 2, 1, 0, 5, 4, 3, 5, 4] True
64 [5, 4, 3, 2, 1, 0, 5, 4, 3, 5] True
65 [5, 4, 3, 2, 1, 0, 5, 4, 3, 4] True
66 [5, 4, 3, 2, 1, 0, 5, 4, 3] True
67 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 5, 2] True
68 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 5] True
69 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 2] True
70 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1] True
71 [5, 4, 3, 2, 1, 0, 5, 4, 2, 5] True
72 [5, 4, 3, 2, 1, 0, 5, 4, 2] True
73 [5, 4, 3, 2, 1, 0, 5, 4, 1, 5] True
74 [5, 4, 3, 2, 1, 0, 5, 4, 1] True
75 [5, 4, 3, 2, 1, 0, 5, 4, 5] True
76 [5, 4, 3, 2, 1, 0, 5, 4] True
77 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3, 2, 3] True
78 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3, 2] True
79 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3] True
80 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 2] True
81 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1] True
82 [5, 4, 3, 2, 1, 0, 5, 3, 2, 3] True
83 [5, 4, 3, 2, 1, 0, 5, 3, 2] True
84 [5, 4, 3, 2, 1, 0, 5, 3, 1] True
85 [5, 4, 3, 2, 1, 0, 5, 3] True
86 [5, 4, 3, 2, 1, 0, 5, 2, 1, 2] True
87 [5, 4, 3, 2, 1, 0, 5, 2, 1] True
88 [5, 4, 3, 2, 1, 0, 5, 2] True
89 [5, 4, 3, 2, 1, 0, 5, 1] True
90 [5, 4, 3, 2, 1, 0, 5] True
91 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] True
92 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3] True
93 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4] True
94 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 3] True
95 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2] True
96 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 4] True
97 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3] True
98 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 2] True
99 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4] True
100 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2, 3] True
101 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2] True
102 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3] True
103 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 2] True
104 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1] True
105 [5, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3, 4] True
106 [5, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3] True
107 [5, 4, 3, 2, 1, 0, 4, 3, 2, 4] True
108 [5, 4, 3, 2, 1, 0, 4, 3, 2, 3] True
109 [5, 4, 3, 2, 1, 0, 4, 3, 2] True
110 [5, 4, 3, 2, 1, 0, 4, 3, 1, 4] True
111 [5, 4, 3, 2, 1, 0, 4, 3, 1] True
112 [5, 4, 3, 2, 1, 0, 4, 3, 4] True
113 [5, 4, 3, 2, 1, 0, 4, 3] True
114 [5, 4, 3, 2, 1, 0, 4, 2, 1, 2] True
115 [5, 4, 3, 2, 1, 0, 4, 2, 1] True
116 [5, 4, 3, 2, 1, 0, 4, 2] True
117 [5, 4, 3, 2, 1, 0, 4, 1] True
118 [5, 4, 3, 2, 1, 0, 4] True
119 [5, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] True
120 [5, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2] True
121 [5, 4, 3, 2, 1, 0, 3, 2, 1, 3] True
122 [5, 4, 3, 2, 1, 0, 3, 2, 1, 2] True
123 [5, 4, 3, 2, 1, 0, 3, 2, 1] True
124 [5, 4, 3, 2, 1, 0, 3, 2, 3] True
125 [5, 4, 3, 2, 1, 0, 3, 2] True
126 [5, 4, 3, 2, 1, 0, 3, 1] True
127 [5, 4, 3, 2, 1, 0, 3] True
128 [5, 4, 3, 2, 1, 0, 2, 1, 2] True
129 [5, 4, 3, 2, 1, 0, 2, 1] True
130 [5, 4, 3, 2, 1, 0, 2] True
131 [5, 4, 3, 2, 1, 0, 1] True
132 [5, 4, 3, 2, 1, 0] True
133 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] True
134 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] True
135 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] True
136 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] True
137 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] True
138 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] True
139 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] True
140 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] True
141 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5] True
142 [5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] True
143 [5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] True
144 [5, 4, 3, 2, 1, 5, 4, 3, 2, 4] True
145 [5, 4, 3, 2, 1, 5, 4, 3, 2, 3] True
146 [5, 4, 3, 2, 1, 5, 4, 3, 2] True
147 [5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] True
148 [5, 4, 3, 2, 1, 5, 4, 3, 5, 4] True
149 [5, 4, 3, 2, 1, 5, 4, 3, 5] True
150 [5, 4, 3, 2, 1, 5, 4, 3, 4] True
151 [5, 4, 3, 2, 1, 5, 4, 3] True
152 [5, 4, 3, 2, 1, 5, 4, 2, 5] True
153 [5, 4, 3, 2, 1, 5, 4, 2] True
154 [5, 4, 3, 2, 1, 5, 4, 5] True
155 [5, 4, 3, 2, 1, 5, 4] True
156 [5, 4, 3, 2, 1, 5, 3, 2, 3] True
157 [5, 4, 3, 2, 1, 5, 3, 2] True
158 [5, 4, 3, 2, 1, 5, 3] True
159 [5, 4, 3, 2, 1, 5, 2] True
160 [5, 4, 3, 2, 1, 5] True
161 [5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] True
162 [5, 4, 3, 2, 1, 4, 3, 2, 4, 3] True
163 [5, 4, 3, 2, 1, 4, 3, 2, 4] True
164 [5, 4, 3, 2, 1, 4, 3, 2, 3] True
165 [5, 4, 3, 2, 1, 4, 3, 2] True
166 [5, 4, 3, 2, 1, 4, 3, 4] True
167 [5, 4, 3, 2, 1, 4, 3] True
168 [5, 4, 3, 2, 1, 4, 2] True
169 [5, 4, 3, 2, 1, 4] True
170 [5, 4, 3, 2, 1, 3, 2, 3] True
171 [5, 4, 3, 2, 1, 3, 2] True
172 [5, 4, 3, 2, 1, 3] True
173 [5, 4, 3, 2, 1, 2] True
174 [5, 4, 3, 2, 1] True
175 [5, 4, 3, 2, 0, 5, 4, 3, 5, 4, 5] True
176 [5, 4, 3, 2, 0, 5, 4, 3, 5, 4] True
177 [5, 4, 3, 2, 0, 5, 4, 3, 5] True
178 [5, 4, 3, 2, 0, 5, 4, 3, 4] True
179 [5, 4, 3, 2, 0, 5, 4, 3] True
180 [5, 4, 3, 2, 0, 5, 4, 5] True
181 [5, 4, 3, 2, 0, 5, 4] True
182 [5, 4, 3, 2, 0, 5, 3] True
183 [5, 4, 3, 2, 0, 5] True
184 [5, 4, 3, 2, 0, 4, 3, 4] True
185 [5, 4, 3, 2, 0, 4, 3] True
186 [5, 4, 3, 2, 0, 4] True
187 [5, 4, 3, 2, 0, 3] True
188 [5, 4, 3, 2, 0] True
189 [5, 4, 3, 2, 5, 4, 3, 5, 4, 5] True
190 [5, 4, 3, 2, 5, 4, 3, 5, 4] True
191 [5, 4, 3, 2, 5, 4, 3, 5] True
192 [5, 4, 3, 2, 5, 4, 3, 4] True
193 [5, 4, 3, 2, 5, 4, 3] True
194 [5, 4, 3, 2, 5, 4, 5] True
195 [5, 4, 3, 2, 5, 4] True
196 [5, 4, 3, 2, 5, 3] True
197 [5, 4, 3, 2, 5] True
198 [5, 4, 3, 2, 4, 3, 4] True
199 [5, 4, 3, 2, 4, 3] True
200 [5, 4, 3, 2, 4] True
201 [5, 4, 3, 2, 3] True
202 [5, 4, 3, 2] True
203 [5, 4, 3, 1, 0, 5, 4, 1, 5] True
204 [5, 4, 3, 1, 0, 5, 4, 1] True
205 [5, 4, 3, 1, 0, 5, 4, 5] True
206 [5, 4, 3, 1, 0, 5, 4] True
207 [5, 4, 3, 1, 0, 5, 1] True
208 [5, 4, 3, 1, 0, 5] True
209 [5, 4, 3, 1, 0, 4, 1] True
210 [5, 4, 3, 1, 0, 4] True
211 [5, 4, 3, 1, 0, 1] True
212 [5, 4, 3, 1, 0] True
213 [5, 4, 3, 1, 5, 4, 5] True
214 [5, 4, 3, 1, 5, 4] True
215 [5, 4, 3, 1, 5] True
216 [5, 4, 3, 1, 4] True
217 [5, 4, 3, 1] True
218 [5, 4, 3, 0, 5, 4, 5] True
219 [5, 4, 3, 0, 5, 4] True
220 [5, 4, 3, 0, 5] True
221 [5, 4, 3, 0, 4] True
222 [5, 4, 3, 0] True
223 [5, 4, 3, 5, 4, 5] True
224 [5, 4, 3, 5, 4] True
225 [5, 4, 3, 5] True
226 [5, 4, 3, 4] True
227 [5, 4, 3] True
228 [5, 4, 2, 1, 0, 5, 2, 1, 2] True
229 [5, 4, 2, 1, 0, 5, 2, 1] True
230 [5, 4, 2, 1, 0, 5, 2] True
231 [5, 4, 2, 1, 0, 5, 1] True
232 [5, 4, 2, 1, 0, 5] True
233 [5, 4, 2, 1, 0, 2, 1, 2] True
234 [5, 4, 2, 1, 0, 2, 1] True
235 [5, 4, 2, 1, 0, 2] True
236 [5, 4, 2, 1, 0, 1] True
237 [5, 4, 2, 1, 0] True
238 [5, 4, 2, 1, 5, 2] True
239 [5, 4, 2, 1, 5] True
240 [5, 4, 2, 1, 2] True
241 [5, 4, 2, 1] True
242 [5, 4, 2, 0, 5] True
243 [5, 4, 2, 0] True
244 [5, 4, 2, 5] True
245 [5, 4, 2] True
246 [5, 4, 1, 0, 5, 1] True
247 [5, 4, 1, 0, 5] True
248 [5, 4, 1, 0, 1] True
249 [5, 4, 1, 0] True
250 [5, 4, 1, 5] True
251 [5, 4, 1] True
252 [5, 4, 0, 5] True
253 [5, 4, 0] True
254 [5, 4, 5] True
255 [5, 4] True
256 [5, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] True
257 [5, 3, 2, 1, 0, 3, 2, 1, 3, 2] True
258 [5, 3, 2, 1, 0, 3, 2, 1, 3] True
259 [5, 3, 2, 1, 0, 3, 2, 1, 2] True
260 [5, 3, 2, 1, 0, 3, 2, 1] True
261 [5, 3, 2, 1, 0, 3, 2, 3] True
262 [5, 3, 2, 1, 0, 3, 2] True
263 [5, 3, 2, 1, 0, 3, 1] True
264 [5, 3, 2, 1, 0, 3] True
265 [5, 3, 2, 1, 0, 2, 1, 2] True
266 [5, 3, 2, 1, 0, 2, 1] True
267 [5, 3, 2, 1, 0, 2] True
268 [5, 3, 2, 1, 0, 1] True
269 [5, 3, 2, 1, 0] True
270 [5, 3, 2, 1, 3, 2, 3] True
271 [5, 3, 2, 1, 3, 2] True
272 [5, 3, 2, 1, 3] True
273 [5, 3, 2, 1, 2] True
274 [5, 3, 2, 1] True
275 [5, 3, 2, 0, 3] True
276 [5, 3, 2, 0] True
277 [5, 3, 2, 3] True
278 [5, 3, 2] True
279 [5, 3, 1, 0, 1] True
280 [5, 3, 1, 0] True
281 [5, 3, 1] True
282 [5, 3, 0] True
283 [5, 3] True
284 [5, 2, 1, 0, 2, 1, 2] True
285 [5, 2, 1, 0, 2, 1] True
286 [5, 2, 1, 0, 2] True
287 [5, 2, 1, 0, 1] True
288 [5, 2, 1, 0] True
289 [5, 2, 1, 2] True
290 [5, 2, 1] True
291 [5, 2, 0] True
292 [5, 2] True
293 [5, 1, 0, 1] True
294 [5, 1, 0] True
295 [5, 1] True
296 [5, 0] True
297 [5] True
298 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] True
299 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3] True
300 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4] True
301 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 3] True
302 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2] True
303 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 4] True
304 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3] True
305 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 2] True
306 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4] True
307 [4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2, 3] True
308 [4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2] True
309 [4, 3, 2, 1, 0, 4, 3, 2, 1, 3] True
310 [4, 3, 2, 1, 0, 4, 3, 2, 1, 2] True
311 [4, 3, 2, 1, 0, 4, 3, 2, 1] True
312 [4, 3, 2, 1, 0, 4, 3, 2, 4, 3, 4] True
313 [4, 3, 2, 1, 0, 4, 3, 2, 4, 3] True
314 [4, 3, 2, 1, 0, 4, 3, 2, 4] True
315 [4, 3, 2, 1, 0, 4, 3, 2, 3] True
316 [4, 3, 2, 1, 0, 4, 3, 2] True
317 [4, 3, 2, 1, 0, 4, 3, 1, 4] True
318 [4, 3, 2, 1, 0, 4, 3, 1] True
319 [4, 3, 2, 1, 0, 4, 3, 4] True
320 [4, 3, 2, 1, 0, 4, 3] True
321 [4, 3, 2, 1, 0, 4, 2, 1, 2] True
322 [4, 3, 2, 1, 0, 4, 2, 1] True
323 [4, 3, 2, 1, 0, 4, 2] True
324 [4, 3, 2, 1, 0, 4, 1] True
325 [4, 3, 2, 1, 0, 4] True
326 [4, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] True
327 [4, 3, 2, 1, 0, 3, 2, 1, 3, 2] True
328 [4, 3, 2, 1, 0, 3, 2, 1, 3] True
329 [4, 3, 2, 1, 0, 3, 2, 1, 2] True
330 [4, 3, 2, 1, 0, 3, 2, 1] True
331 [4, 3, 2, 1, 0, 3, 2, 3] True
332 [4, 3, 2, 1, 0, 3, 2] True
333 [4, 3, 2, 1, 0, 3, 1] True
334 [4, 3, 2, 1, 0, 3] True
335 [4, 3, 2, 1, 0, 2, 1, 2] True
336 [4, 3, 2, 1, 0, 2, 1] True
337 [4, 3, 2, 1, 0, 2] True
338 [4, 3, 2, 1, 0, 1] True
339 [4, 3, 2, 1, 0] True
340 [4, 3, 2, 1, 4, 3, 2, 4, 3, 4] True
341 [4, 3, 2, 1, 4, 3, 2, 4, 3] True
342 [4, 3, 2, 1, 4, 3, 2, 4] True
343 [4, 3, 2, 1, 4, 3, 2, 3] True
344 [4, 3, 2, 1, 4, 3, 2] True
345 [4, 3, 2, 1, 4, 3, 4] True
346 [4, 3, 2, 1, 4, 3] True
347 [4, 3, 2, 1, 4, 2] True
348 [4, 3, 2, 1, 4] True
349 [4, 3, 2, 1, 3, 2, 3] True
350 [4, 3, 2, 1, 3, 2] True
351 [4, 3, 2, 1, 3] True
352 [4, 3, 2, 1, 2] True
353 [4, 3, 2, 1] True
354 [4, 3, 2, 0, 4, 3, 4] True
355 [4, 3, 2, 0, 4, 3] True
356 [4, 3, 2, 0, 4] True
357 [4, 3, 2, 0, 3] True
358 [4, 3, 2, 0] True
359 [4, 3, 2, 4, 3, 4] True
360 [4, 3, 2, 4, 3] True
361 [4, 3, 2, 4] True
362 [4, 3, 2, 3] True
363 [4, 3, 2] True
364 [4, 3, 1, 0, 4, 1] True
365 [4, 3, 1, 0, 4] True
366 [4, 3, 1, 0, 1] True
367 [4, 3, 1, 0] True
368 [4, 3, 1, 4] True
369 [4, 3, 1] True
370 [4, 3, 0, 4] True
371 [4, 3, 0] True
372 [4, 3, 4] True
373 [4, 3] True
374 [4, 2, 1, 0, 2, 1, 2] True
375 [4, 2, 1, 0, 2, 1] True
376 [4, 2, 1, 0, 2] True
377 [4, 2, 1, 0, 1] True
378 [4, 2, 1, 0] True
379 [4, 2, 1, 2] True
380 [4, 2, 1] True
381 [4, 2, 0] True
382 [4, 2] True
383 [4, 1, 0, 1] True
384 [4, 1, 0] True
385 [4, 1] True
386 [4, 0] True
387 [4] True
388 [3, 2, 1, 0, 3, 2, 1, 3, 2, 3] True
389 [3, 2, 1, 0, 3, 2, 1, 3, 2] True
390 [3, 2, 1, 0, 3, 2, 1, 3] True
391 [3, 2, 1, 0, 3, 2, 1, 2] True
392 [3, 2, 1, 0, 3, 2, 1] True
393 [3, 2, 1, 0, 3, 2, 3] True
394 [3, 2, 1, 0, 3, 2] True
395 [3, 2, 1, 0, 3, 1] True
396 [3, 2, 1, 0, 3] True
397 [3, 2, 1, 0, 2, 1, 2] True
398 [3, 2, 1, 0, 2, 1] True
399 [3, 2, 1, 0, 2] True
400 [3, 2, 1, 0, 1] True
401 [3, 2, 1, 0] True
402 [3, 2, 1, 3, 2, 3] True
403 [3, 2, 1, 3, 2] True
404 [3, 2, 1, 3] True
405 [3, 2, 1, 2] True
406 [3, 2, 1] True
407 [3, 2, 0, 3] True
408 [3, 2, 0] True
409 [3, 2, 3] True
410 [3, 2] True
411 [3, 1, 0, 1] True
412 [3, 1, 0] True
413 [3, 1] True
414 [3, 0] True
415 [3] True
416 [2, 1, 0, 2, 1, 2] True
417 [2, 1, 0, 2, 1] True
418 [2, 1, 0, 2] True
419 [2, 1, 0, 1] True
420 [2, 1, 0] True
421 [2, 1, 2] True
422 [2, 1] True
423 [2, 0] True
424 [2] True
425 [1, 0, 1] True
426 [1, 0] True
427 [1] True
428 [0] True
429 [] True
sage: A=CartanMatrix(['A',7])
....: c=[6,5,4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_cone(B(A,c),lam(A,v),[k,k+[c[0]]])
....:     Bprime=B(A,c)
....:     Bprime.set_column(c[0],[0]*A.nrows())
....:     S=p_lambda_cone(Bprime,lam(A,v),[k])
....:     b=bool(P==S)
....:     print(num,v,b)
....:     if not(b):
....:         print('Failure!')
....:         break
1 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] True
2 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] True
3 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] True
4 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] True
5 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] True
6 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] True
7 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] True
8 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] True
9 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5] True
10 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] True
11 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] True
12 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4] True
13 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 3] True
14 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2] True
15 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] True
16 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4] True
17 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5] True
18 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 4] True
19 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3] True
20 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2, 5] True
21 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2] True
22 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 5] True
23 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4] True
24 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2, 3] True
25 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2] True
26 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3] True
27 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 2] True
28 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5] True
29 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] True
30 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3] True
31 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4] True
32 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 3] True
33 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2] True
34 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 4] True
35 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3] True
36 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 2] True
37 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4] True
38 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2, 3] True
39 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2] True
40 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3] True
41 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 2] True
42 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1] True
43 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] True
44 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4] True
45 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5] True
46 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 4] True
47 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3] True
48 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 5] True
49 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4] True
50 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 3] True
51 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5] True
52 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4, 3, 4] True
53 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4, 3] True
54 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4] True
55 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 3] True
56 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2] True
57 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5, 4, 5] True
58 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5, 4] True
59 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5] True
60 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 4] True
61 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1] True
62 [5, 4, 3, 2, 1, 0, 5, 4, 3, 5, 4, 5] True
63 [5, 4, 3, 2, 1, 0, 5, 4, 3, 5, 4] True
64 [5, 4, 3, 2, 1, 0, 5, 4, 3, 5] True
65 [5, 4, 3, 2, 1, 0, 5, 4, 3, 4] True
66 [5, 4, 3, 2, 1, 0, 5, 4, 3] True
67 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 5, 2] True
68 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 5] True
69 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 2] True
70 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1] True
71 [5, 4, 3, 2, 1, 0, 5, 4, 2, 5] True
72 [5, 4, 3, 2, 1, 0, 5, 4, 2] True
73 [5, 4, 3, 2, 1, 0, 5, 4, 1, 5] True
74 [5, 4, 3, 2, 1, 0, 5, 4, 1] True
75 [5, 4, 3, 2, 1, 0, 5, 4, 5] True
76 [5, 4, 3, 2, 1, 0, 5, 4] True
77 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3, 2, 3] True
78 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3, 2] True
79 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3] True
80 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 2] True
81 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1] True
82 [5, 4, 3, 2, 1, 0, 5, 3, 2, 3] True
83 [5, 4, 3, 2, 1, 0, 5, 3, 2] True
84 [5, 4, 3, 2, 1, 0, 5, 3, 1] True
85 [5, 4, 3, 2, 1, 0, 5, 3] True
86 [5, 4, 3, 2, 1, 0, 5, 2, 1, 2] True
87 [5, 4, 3, 2, 1, 0, 5, 2, 1] True
88 [5, 4, 3, 2, 1, 0, 5, 2] True
89 [5, 4, 3, 2, 1, 0, 5, 1] True
90 [5, 4, 3, 2, 1, 0, 5] True
91 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] True
92 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3] True
93 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4] True
94 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 3] True
95 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2] True
96 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 4] True
97 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3] True
98 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 2] True
99 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4] True
100 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2, 3] True
101 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2] True
102 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3] True
103 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 2] True
104 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1] True
105 [5, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3, 4] True
106 [5, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3] True
107 [5, 4, 3, 2, 1, 0, 4, 3, 2, 4] True
108 [5, 4, 3, 2, 1, 0, 4, 3, 2, 3] True
109 [5, 4, 3, 2, 1, 0, 4, 3, 2] True
110 [5, 4, 3, 2, 1, 0, 4, 3, 1, 4] True
111 [5, 4, 3, 2, 1, 0, 4, 3, 1] True
112 [5, 4, 3, 2, 1, 0, 4, 3, 4] True
113 [5, 4, 3, 2, 1, 0, 4, 3] True
114 [5, 4, 3, 2, 1, 0, 4, 2, 1, 2] True
115 [5, 4, 3, 2, 1, 0, 4, 2, 1] True
116 [5, 4, 3, 2, 1, 0, 4, 2] True
117 [5, 4, 3, 2, 1, 0, 4, 1] True
118 [5, 4, 3, 2, 1, 0, 4] True
119 [5, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] True
120 [5, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2] True
121 [5, 4, 3, 2, 1, 0, 3, 2, 1, 3] True
122 [5, 4, 3, 2, 1, 0, 3, 2, 1, 2] True
123 [5, 4, 3, 2, 1, 0, 3, 2, 1] True
124 [5, 4, 3, 2, 1, 0, 3, 2, 3] True
125 [5, 4, 3, 2, 1, 0, 3, 2] True
126 [5, 4, 3, 2, 1, 0, 3, 1] True
127 [5, 4, 3, 2, 1, 0, 3] True
128 [5, 4, 3, 2, 1, 0, 2, 1, 2] True
129 [5, 4, 3, 2, 1, 0, 2, 1] True
130 [5, 4, 3, 2, 1, 0, 2] True
131 [5, 4, 3, 2, 1, 0, 1] True
132 [5, 4, 3, 2, 1, 0] True
133 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] True
134 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] True
135 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] True
136 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] True
137 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] True
138 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] True
139 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] True
140 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] True
141 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5] True
142 [5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] True
143 [5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] True
144 [5, 4, 3, 2, 1, 5, 4, 3, 2, 4] True
145 [5, 4, 3, 2, 1, 5, 4, 3, 2, 3] True
146 [5, 4, 3, 2, 1, 5, 4, 3, 2] True
147 [5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] True
148 [5, 4, 3, 2, 1, 5, 4, 3, 5, 4] True
149 [5, 4, 3, 2, 1, 5, 4, 3, 5] True
150 [5, 4, 3, 2, 1, 5, 4, 3, 4] True
151 [5, 4, 3, 2, 1, 5, 4, 3] True
152 [5, 4, 3, 2, 1, 5, 4, 2, 5] True
153 [5, 4, 3, 2, 1, 5, 4, 2] True
154 [5, 4, 3, 2, 1, 5, 4, 5] True
155 [5, 4, 3, 2, 1, 5, 4] True
156 [5, 4, 3, 2, 1, 5, 3, 2, 3] True
157 [5, 4, 3, 2, 1, 5, 3, 2] True
158 [5, 4, 3, 2, 1, 5, 3] True
159 [5, 4, 3, 2, 1, 5, 2] True
160 [5, 4, 3, 2, 1, 5] True
161 [5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] True
162 [5, 4, 3, 2, 1, 4, 3, 2, 4, 3] True
163 [5, 4, 3, 2, 1, 4, 3, 2, 4] True
164 [5, 4, 3, 2, 1, 4, 3, 2, 3] True
165 [5, 4, 3, 2, 1, 4, 3, 2] True
166 [5, 4, 3, 2, 1, 4, 3, 4] True
167 [5, 4, 3, 2, 1, 4, 3] True
168 [5, 4, 3, 2, 1, 4, 2] True
169 [5, 4, 3, 2, 1, 4] True
170 [5, 4, 3, 2, 1, 3, 2, 3] True
171 [5, 4, 3, 2, 1, 3, 2] True
172 [5, 4, 3, 2, 1, 3] True
173 [5, 4, 3, 2, 1, 2] True
174 [5, 4, 3, 2, 1] True
175 [5, 4, 3, 2, 0, 5, 4, 3, 5, 4, 5] True
176 [5, 4, 3, 2, 0, 5, 4, 3, 5, 4] True
177 [5, 4, 3, 2, 0, 5, 4, 3, 5] True
178 [5, 4, 3, 2, 0, 5, 4, 3, 4] True
179 [5, 4, 3, 2, 0, 5, 4, 3] True
180 [5, 4, 3, 2, 0, 5, 4, 5] True
181 [5, 4, 3, 2, 0, 5, 4] True
182 [5, 4, 3, 2, 0, 5, 3] True
183 [5, 4, 3, 2, 0, 5] True
184 [5, 4, 3, 2, 0, 4, 3, 4] True
185 [5, 4, 3, 2, 0, 4, 3] True
186 [5, 4, 3, 2, 0, 4] True
187 [5, 4, 3, 2, 0, 3] True
188 [5, 4, 3, 2, 0] True
189 [5, 4, 3, 2, 5, 4, 3, 5, 4, 5] True
190 [5, 4, 3, 2, 5, 4, 3, 5, 4] True
191 [5, 4, 3, 2, 5, 4, 3, 5] True
192 [5, 4, 3, 2, 5, 4, 3, 4] True
193 [5, 4, 3, 2, 5, 4, 3] True
194 [5, 4, 3, 2, 5, 4, 5] True
195 [5, 4, 3, 2, 5, 4] True
196 [5, 4, 3, 2, 5, 3] True
197 [5, 4, 3, 2, 5] True
198 [5, 4, 3, 2, 4, 3, 4] True
199 [5, 4, 3, 2, 4, 3] True
200 [5, 4, 3, 2, 4] True
201 [5, 4, 3, 2, 3] True
202 [5, 4, 3, 2] True
203 [5, 4, 3, 1, 0, 5, 4, 1, 5] True
204 [5, 4, 3, 1, 0, 5, 4, 1] True
205 [5, 4, 3, 1, 0, 5, 4, 5] True
206 [5, 4, 3, 1, 0, 5, 4] True
207 [5, 4, 3, 1, 0, 5, 1] True
208 [5, 4, 3, 1, 0, 5] True
209 [5, 4, 3, 1, 0, 4, 1] True
210 [5, 4, 3, 1, 0, 4] True
211 [5, 4, 3, 1, 0, 1] True
212 [5, 4, 3, 1, 0] True
213 [5, 4, 3, 1, 5, 4, 5] True
214 [5, 4, 3, 1, 5, 4] True
215 [5, 4, 3, 1, 5] True
216 [5, 4, 3, 1, 4] True
217 [5, 4, 3, 1] True
218 [5, 4, 3, 0, 5, 4, 5] True
219 [5, 4, 3, 0, 5, 4] True
220 [5, 4, 3, 0, 5] True
221 [5, 4, 3, 0, 4] True
222 [5, 4, 3, 0] True
223 [5, 4, 3, 5, 4, 5] True
224 [5, 4, 3, 5, 4] True
225 [5, 4, 3, 5] True
226 [5, 4, 3, 4] True
227 [5, 4, 3] True
228 [5, 4, 2, 1, 0, 5, 2, 1, 2] True
229 [5, 4, 2, 1, 0, 5, 2, 1] True
230 [5, 4, 2, 1, 0, 5, 2] True
231 [5, 4, 2, 1, 0, 5, 1] True
232 [5, 4, 2, 1, 0, 5] True
233 [5, 4, 2, 1, 0, 2, 1, 2] True
234 [5, 4, 2, 1, 0, 2, 1] True
235 [5, 4, 2, 1, 0, 2] True
236 [5, 4, 2, 1, 0, 1] True
237 [5, 4, 2, 1, 0] True
238 [5, 4, 2, 1, 5, 2] True
239 [5, 4, 2, 1, 5] True
240 [5, 4, 2, 1, 2] True
241 [5, 4, 2, 1] True
242 [5, 4, 2, 0, 5] True
243 [5, 4, 2, 0] True
244 [5, 4, 2, 5] True
245 [5, 4, 2] True
246 [5, 4, 1, 0, 5, 1] True
247 [5, 4, 1, 0, 5] True
248 [5, 4, 1, 0, 1] True
249 [5, 4, 1, 0] True
250 [5, 4, 1, 5] True
251 [5, 4, 1] True
252 [5, 4, 0, 5] True
253 [5, 4, 0] True
254 [5, 4, 5] True
255 [5, 4] True
256 [5, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] True
257 [5, 3, 2, 1, 0, 3, 2, 1, 3, 2] True
258 [5, 3, 2, 1, 0, 3, 2, 1, 3] True
259 [5, 3, 2, 1, 0, 3, 2, 1, 2] True
260 [5, 3, 2, 1, 0, 3, 2, 1] True
261 [5, 3, 2, 1, 0, 3, 2, 3] True
262 [5, 3, 2, 1, 0, 3, 2] True
263 [5, 3, 2, 1, 0, 3, 1] True
264 [5, 3, 2, 1, 0, 3] True
265 [5, 3, 2, 1, 0, 2, 1, 2] True
266 [5, 3, 2, 1, 0, 2, 1] True
267 [5, 3, 2, 1, 0, 2] True
268 [5, 3, 2, 1, 0, 1] True
269 [5, 3, 2, 1, 0] True
270 [5, 3, 2, 1, 3, 2, 3] True
271 [5, 3, 2, 1, 3, 2] True
272 [5, 3, 2, 1, 3] True
273 [5, 3, 2, 1, 2] True
274 [5, 3, 2, 1] True
275 [5, 3, 2, 0, 3] True
276 [5, 3, 2, 0] True
277 [5, 3, 2, 3] True
278 [5, 3, 2] True
279 [5, 3, 1, 0, 1] True
280 [5, 3, 1, 0] True
281 [5, 3, 1] True
282 [5, 3, 0] True
283 [5, 3] True
284 [5, 2, 1, 0, 2, 1, 2] True
285 [5, 2, 1, 0, 2, 1] True
286 [5, 2, 1, 0, 2] True
287 [5, 2, 1, 0, 1] True
288 [5, 2, 1, 0] True
289 [5, 2, 1, 2] True
290 [5, 2, 1] True
291 [5, 2, 0] True
292 [5, 2] True
293 [5, 1, 0, 1] True
294 [5, 1, 0] True
295 [5, 1] True
296 [5, 0] True
297 [5] True
298 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] True
299 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3] True
300 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4] True
301 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 3] True
302 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2] True
303 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 4] True
304 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3] True
305 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 2] True
306 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4] True
307 [4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2, 3] True
308 [4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2] True
309 [4, 3, 2, 1, 0, 4, 3, 2, 1, 3] True
310 [4, 3, 2, 1, 0, 4, 3, 2, 1, 2] True
311 [4, 3, 2, 1, 0, 4, 3, 2, 1] True
312 [4, 3, 2, 1, 0, 4, 3, 2, 4, 3, 4] True
313 [4, 3, 2, 1, 0, 4, 3, 2, 4, 3] True
314 [4, 3, 2, 1, 0, 4, 3, 2, 4] True
315 [4, 3, 2, 1, 0, 4, 3, 2, 3] True
316 [4, 3, 2, 1, 0, 4, 3, 2] True
317 [4, 3, 2, 1, 0, 4, 3, 1, 4] True
318 [4, 3, 2, 1, 0, 4, 3, 1] True
319 [4, 3, 2, 1, 0, 4, 3, 4] True
320 [4, 3, 2, 1, 0, 4, 3] True
321 [4, 3, 2, 1, 0, 4, 2, 1, 2] True
322 [4, 3, 2, 1, 0, 4, 2, 1] True
323 [4, 3, 2, 1, 0, 4, 2] True
324 [4, 3, 2, 1, 0, 4, 1] True
325 [4, 3, 2, 1, 0, 4] True
326 [4, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] True
327 [4, 3, 2, 1, 0, 3, 2, 1, 3, 2] True
328 [4, 3, 2, 1, 0, 3, 2, 1, 3] True
329 [4, 3, 2, 1, 0, 3, 2, 1, 2] True
330 [4, 3, 2, 1, 0, 3, 2, 1] True
331 [4, 3, 2, 1, 0, 3, 2, 3] True
332 [4, 3, 2, 1, 0, 3, 2] True
333 [4, 3, 2, 1, 0, 3, 1] True
334 [4, 3, 2, 1, 0, 3] True
335 [4, 3, 2, 1, 0, 2, 1, 2] True
336 [4, 3, 2, 1, 0, 2, 1] True
337 [4, 3, 2, 1, 0, 2] True
338 [4, 3, 2, 1, 0, 1] True
339 [4, 3, 2, 1, 0] True
340 [4, 3, 2, 1, 4, 3, 2, 4, 3, 4] True
341 [4, 3, 2, 1, 4, 3, 2, 4, 3] True
342 [4, 3, 2, 1, 4, 3, 2, 4] True
343 [4, 3, 2, 1, 4, 3, 2, 3] True
344 [4, 3, 2, 1, 4, 3, 2] True
345 [4, 3, 2, 1, 4, 3, 4] True
346 [4, 3, 2, 1, 4, 3] True
347 [4, 3, 2, 1, 4, 2] True
348 [4, 3, 2, 1, 4] True
349 [4, 3, 2, 1, 3, 2, 3] True
350 [4, 3, 2, 1, 3, 2] True
351 [4, 3, 2, 1, 3] True
352 [4, 3, 2, 1, 2] True
353 [4, 3, 2, 1] True
354 [4, 3, 2, 0, 4, 3, 4] True
355 [4, 3, 2, 0, 4, 3] True
356 [4, 3, 2, 0, 4] True
357 [4, 3, 2, 0, 3] True
358 [4, 3, 2, 0] True
359 [4, 3, 2, 4, 3, 4] True
360 [4, 3, 2, 4, 3] True
361 [4, 3, 2, 4] True
362 [4, 3, 2, 3] True
363 [4, 3, 2] True
364 [4, 3, 1, 0, 4, 1] True
365 [4, 3, 1, 0, 4] True
366 [4, 3, 1, 0, 1] True
367 [4, 3, 1, 0] True
368 [4, 3, 1, 4] True
369 [4, 3, 1] True
370 [4, 3, 0, 4] True
371 [4, 3, 0] True
372 [4, 3, 4] True
373 [4, 3] True
374 [4, 2, 1, 0, 2, 1, 2] True
375 [4, 2, 1, 0, 2, 1] True
376 [4, 2, 1, 0, 2] True
377 [4, 2, 1, 0, 1] True
378 [4, 2, 1, 0] True
379 [4, 2, 1, 2] True
380 [4, 2, 1] True
381 [4, 2, 0] True
382 [4, 2] True
383 [4, 1, 0, 1] True
384 [4, 1, 0] True
385 [4, 1] True
386 [4, 0] True
387 [4] True
388 [3, 2, 1, 0, 3, 2, 1, 3, 2, 3] True
389 [3, 2, 1, 0, 3, 2, 1, 3, 2] True
390 [3, 2, 1, 0, 3, 2, 1, 3] True
391 [3, 2, 1, 0, 3, 2, 1, 2] True
392 [3, 2, 1, 0, 3, 2, 1] True
393 [3, 2, 1, 0, 3, 2, 3] True
394 [3, 2, 1, 0, 3, 2] True
395 [3, 2, 1, 0, 3, 1] True
396 [3, 2, 1, 0, 3] True
397 [3, 2, 1, 0, 2, 1, 2] True
398 [3, 2, 1, 0, 2, 1] True
399 [3, 2, 1, 0, 2] True
400 [3, 2, 1, 0, 1] True
401 [3, 2, 1, 0] True
402 [3, 2, 1, 3, 2, 3] True
403 [3, 2, 1, 3, 2] True
404 [3, 2, 1, 3] True
405 [3, 2, 1, 2] True
406 [3, 2, 1] True
407 [3, 2, 0, 3] True
408 [3, 2, 0] True
409 [3, 2, 3] True
410 [3, 2] True
411 [3, 1, 0, 1] True
412 [3, 1, 0] True
413 [3, 1] True
414 [3, 0] True
415 [3] True
416 [2, 1, 0, 2, 1, 2] True
417 [2, 1, 0, 2, 1] True
418 [2, 1, 0, 2] True
419 [2, 1, 0, 1] True
420 [2, 1, 0] True
421 [2, 1, 2] True
422 [2, 1] True
423 [2, 0] True
424 [2] True
425 [1, 0, 1] True
426 [1, 0] True
427 [1] True
428 [0] True
429 [] True
sage: A=CartanMatrix(['A',5])
....: c=[4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_cone(B(A,c),lam(A,v),[k,k+[c[0]]])
....:     Bprime=B(A,c)
....:     Bprime.set_column(c[0],[0]*A.nrows())
....:     S=p_lambda_cone(Bprime,lam(A,v),[k])
....:     b=bool(P==S)
....:     print(num,v,b)
....:     if not(b):
....:         print('Failure!')
....:         break
1 [3, 2, 1, 0, 3, 2, 1, 3, 2, 3] True
2 [3, 2, 1, 0, 3, 2, 1, 3, 2] True
3 [3, 2, 1, 0, 3, 2, 1, 3] True
4 [3, 2, 1, 0, 3, 2, 1, 2] True
5 [3, 2, 1, 0, 3, 2, 1] True
6 [3, 2, 1, 0, 3, 2, 3] True
7 [3, 2, 1, 0, 3, 2] True
8 [3, 2, 1, 0, 3, 1] True
9 [3, 2, 1, 0, 3] True
10 [3, 2, 1, 0, 2, 1, 2] True
11 [3, 2, 1, 0, 2, 1] True
12 [3, 2, 1, 0, 2] True
13 [3, 2, 1, 0, 1] True
14 [3, 2, 1, 0] True
15 [3, 2, 1, 3, 2, 3] True
16 [3, 2, 1, 3, 2] True
17 [3, 2, 1, 3] True
18 [3, 2, 1, 2] True
19 [3, 2, 1] True
20 [3, 2, 0, 3] True
21 [3, 2, 0] True
22 [3, 2, 3] True
23 [3, 2] True
24 [3, 1, 0, 1] True
25 [3, 1, 0] True
26 [3, 1] True
27 [3, 0] True
28 [3] True
29 [2, 1, 0, 2, 1, 2] True
30 [2, 1, 0, 2, 1] True
31 [2, 1, 0, 2] True
32 [2, 1, 0, 1] True
33 [2, 1, 0] True
34 [2, 1, 2] True
35 [2, 1] True
36 [2, 0] True
37 [2] True
38 [1, 0, 1] True
39 [1, 0] True
40 [1] True
41 [0] True
42 [] True
sage: A=CartanMatrix(['A',3])
....: c=[2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_cone(B(A,c),lam(A,v),[k,k+[c[0]]])
....:     Bprime=B(A,c)
....:     Bprime.set_column(c[0],[0]*A.nrows())
....:     S=p_lambda_cone(Bprime,lam(A,v),[k])
....:     b=bool(P==S)
....:     print(num,v,b)
....:     if not(b):
....:         print('Failure!')
....:         break
1 [1, 0, 1] True
2 [1, 0] True
3 [1] True
4 [0] True
5 [] True
sage: A=CartanMatrix(['A',3])
....: c=[2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_int(B(A,c),lam(A,v),[k,k+[c[0]]])
....:     Bprime=B(A,c)
....:     Bprime.set_column(c[0],[0]*A.nrows())
....:     S=p_lambda_int(Bprime,lam(A,v),[k])
....:     b=bool(P==S)
....:     print(num,v,b)
....:     if not(b):
....:         print('Failure!')
....:         break
1 [1, 0, 1] True
2 [1, 0] False
Failure!
sage: A=CartanMatrix(['A',3])
....: c=[2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_cone(B(A,c),lam(A,v),[k,k+[c[0]]])
....:     Bprime=B(A,c)
....:     Bprime.set_column(c[0],[0]*A.nrows())
....:     S=p_lambda_cone(Bprime,lam(A,v),[k])
....:     b=bool(P==S)
....:     P.plot(fill="red")+S.plot(fill="blue")
....:     print(num,v,b)
....:     if not(b):
....:         print('Failure!')
....:         break
Launched html viewer for Graphics3d Object
1 [1, 0, 1] True
Launched html viewer for Graphics3d Object
2 [1, 0] True
Launched html viewer for Graphics3d Object
3 [1] True
Launched html viewer for Graphics3d Object
4 [0] True
Launched html viewer for Graphics3d Object
5 [] True
sage: A=CartanMatrix(['A',3])
....: c=[2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_int(B(A,c),lam(A,v),[k,k+[c[0]]])
....:     Bprime=B(A,c)
....:     Bprime.set_column(c[0],[0]*A.nrows())
....:     S=p_lambda_int(Bprime,lam(A,v),[k])
....:     b=bool(P==S)
....:     P.plot(fill="red")+S.plot(fill="blue")
....:     print(num,v,b)
....:     if not(b):
....:         print('Failure!')
....:         break
Launched html viewer for Graphics3d Object
1 [1, 0, 1] True
Launched html viewer for Graphics3d Object
2 [1, 0] False
Failure!
sage: A=CartanMatrix(['A',3])
....: c=[2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_int(B(A,c),lam(A,v),[k,k+[c[0]]])
....:     Bprime=B(A,c)
....:     Bprime.set_column(c[0],[0]*A.nrows())
....:     S=p_lambda_int(Bprime,lam(A,v),[k])
....:     P.plot(fill="red",alpha=0.5)+S.plot(fill="blue",alpha=0.5)
....: 
....: 
....: 
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['A',3])
....: c=[2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_int(B(A,c),lam(A,v),[k,k+[c[0]]])
....:     Bprime=B(A,c)
....:     Bprime.set_column(c[0],[0]*A.nrows())
....:     S=p_lambda_int(Bprime,lam(A,v),[k])
....:     P.translation((0.02,0,0.02)).plot(fill="red",alpha=0.5)+S.plot(fill="blue",alpha=0.5)
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['A',3])
....: c=[2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_int(B(A,c),lam(A,v),[k,k+[c[0]]])
....:     Bprime=B(A,c)
....:     Bprime.set_column(c[0],[0]*A.nrows())
....:     S=p_lambda_int(Bprime,lam(A,v),[k])
....:     P.translation((0.02,0,0.02)).plot(fill="red",alpha=0.5)+S.plot(fill="blue",alpha=0.5)
....: 
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
Launched html viewer for Graphics3d Object
sage: A=CartanMatrix(['A',3])
....: c=[2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_int(B(A,c),lam(A,v),[k,k+[c[0]]])
....:     Bprime=B(A,c)
....:     Bprime.set_column(c[0],[0]*A.nrows())
....:     S=p_lambda_int(Bprime,lam(A,v),[k])
....:     b=bool(S.contains(P))
....:     P.plot(fill="red")+S.plot(fill="blue")
....:     print(num,v,b)
....:     if not(b):
....:         print('Failure!')
....:         break
....: 
Launched html viewer for Graphics3d Object
1 [1, 0, 1] False
Failure!
sage: A=CartanMatrix(['A',3])
....: c=[2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_int(B(A,c),lam(A,v),[k,k+[c[0]]])
....:     Bprime=B(A,c)
....:     Bprime.set_column(c[0],[0]*A.nrows())
....:     S=p_lambda_int(Bprime,lam(A,v),[k])
....:     b=bool(S.contains(P))
....:     print(num,v,b)
....:     if not(b):
....:         print('Failure!')
....:         break
1 [1, 0, 1] False
Failure!
sage: P=Polyhedron(vertices=[(1,1)])
sage: Q=Polyhedron(vertices=[(0,0),(3,3)])
sage: P=Polyhedron(vertices=[(1,1),(2,2)])
sage: P.contains(Q)
False
sage: Q.contains(P)
False
sage: A=CartanMatrix(['A',3])
....: c=[2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_cone(B(A,c),lam(A,v),[k,k+[c[0]]])
....:     Bprime=B(A,c)
....:     Bprime.set_column(c[0],[0]*A.nrows())
....:     S=p_lambda_cone(Bprime,lam(A,v),[k])
....:     b=bool(S==P)
....:     print(num,v,b)
....:     if not(b):
....:         print('Failure!')
....:         break
1 [1, 0, 1] True
2 [1, 0] True
3 [1] True
4 [0] True
5 [] True
sage: A=CartanMatrix(['C',4])
....: c=[3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_cone(B(A,c),lam(A,v),[k,k+[c[0]]])
....:     Bprime=B(A,c)
....:     Bprime.set_column(c[0],[0]*A.nrows())
....:     S=p_lambda_cone(Bprime,lam(A,v),[k])
....:     b=bool(S==P)
....:     print(num,v,b)
....:     if not(b):
....:         print('Failure!')
....:         break
1 [2, 1, 0, 2, 1, 2] True
2 [2, 1, 0, 2, 1] True
3 [2, 1, 0, 2] True
4 [2, 1, 0, 1] True
5 [2, 1, 0] True
6 [2, 1, 2] True
7 [2, 1] True
8 [2, 0] True
9 [2] True
10 [1, 0, 1] True
11 [1, 0] True
12 [1] True
13 [0] True
14 [] True
sage: A=CartanMatrix(['C',6])
....: c=[5,4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_cone(B(A,c),lam(A,v),[k,k+[c[0]]])
....:     Bprime=B(A,c)
....:     Bprime.set_column(c[0],[0]*A.nrows())
....:     S=p_lambda_cone(Bprime,lam(A,v),[k])
....:     b=bool(S==P)
....:     print(num,v,b)
....:     if not(b):
....:         print('Failure!')
....:         break
1 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] True
2 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3] True
3 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4] True
4 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 3] True
5 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2] True
6 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 4] True
7 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3] True
8 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 2] True
9 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4] True
10 [4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2, 3] True
11 [4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2] True
12 [4, 3, 2, 1, 0, 4, 3, 2, 1, 3] True
13 [4, 3, 2, 1, 0, 4, 3, 2, 1, 2] True
14 [4, 3, 2, 1, 0, 4, 3, 2, 1] True
15 [4, 3, 2, 1, 0, 4, 3, 2, 4, 3, 4] True
16 [4, 3, 2, 1, 0, 4, 3, 2, 4, 3] True
17 [4, 3, 2, 1, 0, 4, 3, 2, 4] True
18 [4, 3, 2, 1, 0, 4, 3, 2, 3] True
19 [4, 3, 2, 1, 0, 4, 3, 2] True
20 [4, 3, 2, 1, 0, 4, 3, 1, 4] True
21 [4, 3, 2, 1, 0, 4, 3, 1] True
22 [4, 3, 2, 1, 0, 4, 3, 4] True
23 [4, 3, 2, 1, 0, 4, 3] True
24 [4, 3, 2, 1, 0, 4, 2, 1, 2] True
25 [4, 3, 2, 1, 0, 4, 2, 1] True
26 [4, 3, 2, 1, 0, 4, 2] True
27 [4, 3, 2, 1, 0, 4, 1] True
28 [4, 3, 2, 1, 0, 4] True
29 [4, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] True
30 [4, 3, 2, 1, 0, 3, 2, 1, 3, 2] True
31 [4, 3, 2, 1, 0, 3, 2, 1, 3] True
32 [4, 3, 2, 1, 0, 3, 2, 1, 2] True
33 [4, 3, 2, 1, 0, 3, 2, 1] True
34 [4, 3, 2, 1, 0, 3, 2, 3] True
35 [4, 3, 2, 1, 0, 3, 2] True
36 [4, 3, 2, 1, 0, 3, 1] True
37 [4, 3, 2, 1, 0, 3] True
38 [4, 3, 2, 1, 0, 2, 1, 2] True
39 [4, 3, 2, 1, 0, 2, 1] True
40 [4, 3, 2, 1, 0, 2] True
41 [4, 3, 2, 1, 0, 1] True
42 [4, 3, 2, 1, 0] True
43 [4, 3, 2, 1, 4, 3, 2, 4, 3, 4] True
44 [4, 3, 2, 1, 4, 3, 2, 4, 3] True
45 [4, 3, 2, 1, 4, 3, 2, 4] True
46 [4, 3, 2, 1, 4, 3, 2, 3] True
47 [4, 3, 2, 1, 4, 3, 2] True
48 [4, 3, 2, 1, 4, 3, 4] True
49 [4, 3, 2, 1, 4, 3] True
50 [4, 3, 2, 1, 4, 2] True
51 [4, 3, 2, 1, 4] True
52 [4, 3, 2, 1, 3, 2, 3] True
53 [4, 3, 2, 1, 3, 2] True
54 [4, 3, 2, 1, 3] True
55 [4, 3, 2, 1, 2] True
56 [4, 3, 2, 1] True
57 [4, 3, 2, 0, 4, 3, 4] True
58 [4, 3, 2, 0, 4, 3] True
59 [4, 3, 2, 0, 4] True
60 [4, 3, 2, 0, 3] True
61 [4, 3, 2, 0] True
62 [4, 3, 2, 4, 3, 4] True
63 [4, 3, 2, 4, 3] True
64 [4, 3, 2, 4] True
65 [4, 3, 2, 3] True
66 [4, 3, 2] True
67 [4, 3, 1, 0, 4, 1] True
68 [4, 3, 1, 0, 4] True
69 [4, 3, 1, 0, 1] True
70 [4, 3, 1, 0] True
71 [4, 3, 1, 4] True
72 [4, 3, 1] True
73 [4, 3, 0, 4] True
74 [4, 3, 0] True
75 [4, 3, 4] True
76 [4, 3] True
77 [4, 2, 1, 0, 2, 1, 2] True
78 [4, 2, 1, 0, 2, 1] True
79 [4, 2, 1, 0, 2] True
80 [4, 2, 1, 0, 1] True
81 [4, 2, 1, 0] True
82 [4, 2, 1, 2] True
83 [4, 2, 1] True
84 [4, 2, 0] True
85 [4, 2] True
86 [4, 1, 0, 1] True
87 [4, 1, 0] True
88 [4, 1] True
89 [4, 0] True
90 [4] True
91 [3, 2, 1, 0, 3, 2, 1, 3, 2, 3] True
92 [3, 2, 1, 0, 3, 2, 1, 3, 2] True
93 [3, 2, 1, 0, 3, 2, 1, 3] True
94 [3, 2, 1, 0, 3, 2, 1, 2] True
95 [3, 2, 1, 0, 3, 2, 1] True
96 [3, 2, 1, 0, 3, 2, 3] True
97 [3, 2, 1, 0, 3, 2] True
98 [3, 2, 1, 0, 3, 1] True
99 [3, 2, 1, 0, 3] True
100 [3, 2, 1, 0, 2, 1, 2] True
101 [3, 2, 1, 0, 2, 1] True
102 [3, 2, 1, 0, 2] True
103 [3, 2, 1, 0, 1] True
104 [3, 2, 1, 0] True
105 [3, 2, 1, 3, 2, 3] True
106 [3, 2, 1, 3, 2] True
107 [3, 2, 1, 3] True
108 [3, 2, 1, 2] True
109 [3, 2, 1] True
110 [3, 2, 0, 3] True
111 [3, 2, 0] True
112 [3, 2, 3] True
113 [3, 2] True
114 [3, 1, 0, 1] True
115 [3, 1, 0] True
116 [3, 1] True
117 [3, 0] True
118 [3] True
119 [2, 1, 0, 2, 1, 2] True
120 [2, 1, 0, 2, 1] True
121 [2, 1, 0, 2] True
122 [2, 1, 0, 1] True
123 [2, 1, 0] True
124 [2, 1, 2] True
125 [2, 1] True
126 [2, 0] True
127 [2] True
128 [1, 0, 1] True
129 [1, 0] True
130 [1] True
131 [0] True
132 [] True
sage: A=CartanMatrix(['D',4])
....: c=[3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_cone(B(A,c),lam(A,v),[k,k+[c[0]]])
....:     Bprime=B(A,c)
....:     Bprime.set_column(c[0],[0]*A.nrows())
....:     S=p_lambda_cone(Bprime,lam(A,v),[k])
....:     b=bool(S==P)
....:     print(num,v,b)
....:     if not(b):
....:         print('Failure!')
....:         break
1 [2, 1, 0, 2, 1, 2] True
2 [2, 1, 0, 2, 1] False
Failure!
sage: A=CartanMatrix(['D',4])
....: c=[3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_cone(B(A,c),lam(A,v),[k,k+[c[0]]])
....:     Bprime=B(A,c)
....:     Bprime.set_column(c[0],[0]*A.nrows())
....:     S=p_lambda_cone(Bprime,lam(A,v),[k])
....:     b=bool(S==P)
....:     print(num,v,b)
....:     if not(b):
....:         print('Failure!')
....: 
1 [2, 1, 0, 2, 1, 2] True
2 [2, 1, 0, 2, 1] False
Failure!
3 [2, 1, 0, 2] False
Failure!
4 [2, 1, 0, 1] True
5 [2, 1, 0] True
6 [2, 1, 2] True
7 [2, 1] True
8 [2, 0] True
9 [2] True
10 [1, 0, 1] True
11 [1, 0] True
12 [1] True
13 [0] True
14 [] True
sage: B(A,c)
[ 0 -1  0  0]
[ 1  0 -1 -1]
[ 0  1  0  0]
[ 0  1  0  0]
sage: A=CartanMatrix(['D',6])
....: c=[5,4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_cone(B(A,c),lam(A,v),[k,k+[c[0]]])
....:     Bprime=B(A,c)
....:     Bprime.set_column(c[0],[0]*A.nrows())
....:     S=p_lambda_cone(Bprime,lam(A,v),[k])
....:     b=bool(S==P)
....:     print(num,v,b)
....:     if not(b):
....:         print('Failure!')
1 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] True
2 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3] True
3 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4] True
4 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 3] True
5 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2] True
6 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 4] False
Failure!
7 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3] False
Failure!
8 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 2] True
9 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4] False
Failure!
10 [4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2, 3] False
Failure!
11 [4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2] False
Failure!
12 [4, 3, 2, 1, 0, 4, 3, 2, 1, 3] False
Failure!
13 [4, 3, 2, 1, 0, 4, 3, 2, 1, 2] False
Failure!
14 [4, 3, 2, 1, 0, 4, 3, 2, 1] False
Failure!
15 [4, 3, 2, 1, 0, 4, 3, 2, 4, 3, 4] False
Failure!
16 [4, 3, 2, 1, 0, 4, 3, 2, 4, 3] False
Failure!
17 [4, 3, 2, 1, 0, 4, 3, 2, 4] False
Failure!
18 [4, 3, 2, 1, 0, 4, 3, 2, 3] False
Failure!
19 [4, 3, 2, 1, 0, 4, 3, 2] False
Failure!
20 [4, 3, 2, 1, 0, 4, 3, 1, 4] True
21 [4, 3, 2, 1, 0, 4, 3, 1] False
Failure!
22 [4, 3, 2, 1, 0, 4, 3, 4] True
23 [4, 3, 2, 1, 0, 4, 3] False
Failure!
24 [4, 3, 2, 1, 0, 4, 2, 1, 2] False
Failure!
25 [4, 3, 2, 1, 0, 4, 2, 1] False
Failure!
26 [4, 3, 2, 1, 0, 4, 2] False
Failure!
27 [4, 3, 2, 1, 0, 4, 1] False
Failure!
28 [4, 3, 2, 1, 0, 4] False
Failure!
29 [4, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] True
30 [4, 3, 2, 1, 0, 3, 2, 1, 3, 2] True
31 [4, 3, 2, 1, 0, 3, 2, 1, 3] True
32 [4, 3, 2, 1, 0, 3, 2, 1, 2] True
33 [4, 3, 2, 1, 0, 3, 2, 1] True
34 [4, 3, 2, 1, 0, 3, 2, 3] True
35 [4, 3, 2, 1, 0, 3, 2] True
36 [4, 3, 2, 1, 0, 3, 1] True
37 [4, 3, 2, 1, 0, 3] True
38 [4, 3, 2, 1, 0, 2, 1, 2] True
39 [4, 3, 2, 1, 0, 2, 1] True
40 [4, 3, 2, 1, 0, 2] True
41 [4, 3, 2, 1, 0, 1] True
42 [4, 3, 2, 1, 0] True
43 [4, 3, 2, 1, 4, 3, 2, 4, 3, 4] True
44 [4, 3, 2, 1, 4, 3, 2, 4, 3] True
45 [4, 3, 2, 1, 4, 3, 2, 4] True
46 [4, 3, 2, 1, 4, 3, 2, 3] True
47 [4, 3, 2, 1, 4, 3, 2] True
48 [4, 3, 2, 1, 4, 3, 4] True
49 [4, 3, 2, 1, 4, 3] False
Failure!
50 [4, 3, 2, 1, 4, 2] True
51 [4, 3, 2, 1, 4] False
Failure!
52 [4, 3, 2, 1, 3, 2, 3] True
53 [4, 3, 2, 1, 3, 2] True
54 [4, 3, 2, 1, 3] True
55 [4, 3, 2, 1, 2] True
56 [4, 3, 2, 1] True
57 [4, 3, 2, 0, 4, 3, 4] True
58 [4, 3, 2, 0, 4, 3] False
Failure!
59 [4, 3, 2, 0, 4] False
Failure!
60 [4, 3, 2, 0, 3] True
61 [4, 3, 2, 0] True
62 [4, 3, 2, 4, 3, 4] True
63 [4, 3, 2, 4, 3] False
Failure!
64 [4, 3, 2, 4] False
Failure!
65 [4, 3, 2, 3] True
66 [4, 3, 2] True
67 [4, 3, 1, 0, 4, 1] True
68 [4, 3, 1, 0, 4] True
69 [4, 3, 1, 0, 1] True
70 [4, 3, 1, 0] True
71 [4, 3, 1, 4] True
72 [4, 3, 1] True
73 [4, 3, 0, 4] True
74 [4, 3, 0] True
75 [4, 3, 4] True
76 [4, 3] True
77 [4, 2, 1, 0, 2, 1, 2] True
78 [4, 2, 1, 0, 2, 1] True
79 [4, 2, 1, 0, 2] True
80 [4, 2, 1, 0, 1] True
81 [4, 2, 1, 0] True
82 [4, 2, 1, 2] True
83 [4, 2, 1] True
84 [4, 2, 0] True
85 [4, 2] True
86 [4, 1, 0, 1] True
87 [4, 1, 0] True
88 [4, 1] True
89 [4, 0] True
90 [4] True
91 [3, 2, 1, 0, 3, 2, 1, 3, 2, 3] True
92 [3, 2, 1, 0, 3, 2, 1, 3, 2] True
93 [3, 2, 1, 0, 3, 2, 1, 3] True
94 [3, 2, 1, 0, 3, 2, 1, 2] True
95 [3, 2, 1, 0, 3, 2, 1] True
96 [3, 2, 1, 0, 3, 2, 3] True
97 [3, 2, 1, 0, 3, 2] True
98 [3, 2, 1, 0, 3, 1] True
99 [3, 2, 1, 0, 3] True
100 [3, 2, 1, 0, 2, 1, 2] True
101 [3, 2, 1, 0, 2, 1] True
102 [3, 2, 1, 0, 2] True
103 [3, 2, 1, 0, 1] True
104 [3, 2, 1, 0] True
105 [3, 2, 1, 3, 2, 3] True
106 [3, 2, 1, 3, 2] True
107 [3, 2, 1, 3] True
108 [3, 2, 1, 2] True
109 [3, 2, 1] True
110 [3, 2, 0, 3] True
111 [3, 2, 0] True
112 [3, 2, 3] True
113 [3, 2] True
114 [3, 1, 0, 1] True
115 [3, 1, 0] True
116 [3, 1] True
117 [3, 0] True
118 [3] True
119 [2, 1, 0, 2, 1, 2] True
120 [2, 1, 0, 2, 1] True
121 [2, 1, 0, 2] True
122 [2, 1, 0, 1] True
123 [2, 1, 0] True
124 [2, 1, 2] True
125 [2, 1] True
126 [2, 0] True
127 [2] True
128 [1, 0, 1] True
129 [1, 0] True
130 [1] True
131 [0] True
132 [] True
sage: A=CartanMatrix(['D',5])
....: c=[4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_cone(B(A,c),lam(A,v),[k,k+[c[0]]])
....:     Bprime=B(A,c)
....:     Bprime.set_column(c[0],[0]*A.nrows())
....:     S=p_lambda_cone(Bprime,lam(A,v),[k])
....:     b=bool(S==P)
....:     print(num,v,b)
....:     if not(b):
....:         print('Failure!')
1 [3, 2, 1, 0, 3, 2, 1, 3, 2, 3] True
2 [3, 2, 1, 0, 3, 2, 1, 3, 2] True
3 [3, 2, 1, 0, 3, 2, 1, 3] True
4 [3, 2, 1, 0, 3, 2, 1, 2] True
5 [3, 2, 1, 0, 3, 2, 1] True
6 [3, 2, 1, 0, 3, 2, 3] True
7 [3, 2, 1, 0, 3, 2] True
8 [3, 2, 1, 0, 3, 1] True
9 [3, 2, 1, 0, 3] True
10 [3, 2, 1, 0, 2, 1, 2] True
11 [3, 2, 1, 0, 2, 1] True
12 [3, 2, 1, 0, 2] True
13 [3, 2, 1, 0, 1] True
14 [3, 2, 1, 0] True
15 [3, 2, 1, 3, 2, 3] True
16 [3, 2, 1, 3, 2] True
17 [3, 2, 1, 3] True
18 [3, 2, 1, 2] True
19 [3, 2, 1] True
20 [3, 2, 0, 3] True
21 [3, 2, 0] True
22 [3, 2, 3] True
23 [3, 2] True
24 [3, 1, 0, 1] True
25 [3, 1, 0] True
26 [3, 1] True
27 [3, 0] True
28 [3] True
29 [2, 1, 0, 2, 1, 2] True
30 [2, 1, 0, 2, 1] True
31 [2, 1, 0, 2] True
32 [2, 1, 0, 1] True
33 [2, 1, 0] True
34 [2, 1, 2] True
35 [2, 1] True
36 [2, 0] True
37 [2] True
38 [1, 0, 1] True
39 [1, 0] True
40 [1] True
41 [0] True
42 [] True
sage: A=CartanMatrix(['D',5])
....: c=[4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_cone(B(A,c),lam(A,v),[k,k+[c[0]]])
....:     Bprime=B(A,c)
....:     Bprime.set_column(c[0],[0]*A.nrows())
....:     S=p_lambda_cone(Bprime,lam(A,v),[k])
....:     b=bool(S==P)
....:     print(num,v,b)
....:     if not(b):
....:         print('Failure!')
....:         break
....: 
1 [3, 2, 1, 0, 3, 2, 1, 3, 2, 3] True
2 [3, 2, 1, 0, 3, 2, 1, 3, 2] True
3 [3, 2, 1, 0, 3, 2, 1, 3] True
4 [3, 2, 1, 0, 3, 2, 1, 2] True
5 [3, 2, 1, 0, 3, 2, 1] True
6 [3, 2, 1, 0, 3, 2, 3] True
7 [3, 2, 1, 0, 3, 2] True
8 [3, 2, 1, 0, 3, 1] True
9 [3, 2, 1, 0, 3] True
10 [3, 2, 1, 0, 2, 1, 2] True
11 [3, 2, 1, 0, 2, 1] True
12 [3, 2, 1, 0, 2] True
13 [3, 2, 1, 0, 1] True
14 [3, 2, 1, 0] True
15 [3, 2, 1, 3, 2, 3] True
16 [3, 2, 1, 3, 2] True
17 [3, 2, 1, 3] True
18 [3, 2, 1, 2] True
19 [3, 2, 1] True
20 [3, 2, 0, 3] True
21 [3, 2, 0] True
22 [3, 2, 3] True
23 [3, 2] True
24 [3, 1, 0, 1] True
25 [3, 1, 0] True
26 [3, 1] True
27 [3, 0] True
28 [3] True
29 [2, 1, 0, 2, 1, 2] True
30 [2, 1, 0, 2, 1] True
31 [2, 1, 0, 2] True
32 [2, 1, 0, 1] True
33 [2, 1, 0] True
34 [2, 1, 2] True
35 [2, 1] True
36 [2, 0] True
37 [2] True
38 [1, 0, 1] True
39 [1, 0] True
40 [1] True
41 [0] True
42 [] True
sage: A=CartanMatrix(['C',6])
....: c=[5,4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_cone(B(A,c),lam(A,v),[k,k+[c[0]]])
....:     Bprime=B(A,c)
....:     Bprime.set_column(c[0],[0]*A.nrows())
....:     S=p_lambda_cone(Bprime,lam(A,v),[k])
....:     b=bool(S==P)
....:     print(num,v,b)
....:     if not(b):
....:         print('Failure!')
....:         break
1 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] True
2 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3] True
3 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4] True
4 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 3] True
5 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2] True
6 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 4] True
7 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3] True
8 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 2] True
9 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4] True
10 [4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2, 3] True
11 [4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2] True
12 [4, 3, 2, 1, 0, 4, 3, 2, 1, 3] True
13 [4, 3, 2, 1, 0, 4, 3, 2, 1, 2] True
14 [4, 3, 2, 1, 0, 4, 3, 2, 1] True
15 [4, 3, 2, 1, 0, 4, 3, 2, 4, 3, 4] True
16 [4, 3, 2, 1, 0, 4, 3, 2, 4, 3] True
17 [4, 3, 2, 1, 0, 4, 3, 2, 4] True
18 [4, 3, 2, 1, 0, 4, 3, 2, 3] True
19 [4, 3, 2, 1, 0, 4, 3, 2] True
20 [4, 3, 2, 1, 0, 4, 3, 1, 4] True
21 [4, 3, 2, 1, 0, 4, 3, 1] True
22 [4, 3, 2, 1, 0, 4, 3, 4] True
23 [4, 3, 2, 1, 0, 4, 3] True
24 [4, 3, 2, 1, 0, 4, 2, 1, 2] True
25 [4, 3, 2, 1, 0, 4, 2, 1] True
26 [4, 3, 2, 1, 0, 4, 2] True
27 [4, 3, 2, 1, 0, 4, 1] True
28 [4, 3, 2, 1, 0, 4] True
29 [4, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] True
30 [4, 3, 2, 1, 0, 3, 2, 1, 3, 2] True
31 [4, 3, 2, 1, 0, 3, 2, 1, 3] True
32 [4, 3, 2, 1, 0, 3, 2, 1, 2] True
33 [4, 3, 2, 1, 0, 3, 2, 1] True
34 [4, 3, 2, 1, 0, 3, 2, 3] True
35 [4, 3, 2, 1, 0, 3, 2] True
36 [4, 3, 2, 1, 0, 3, 1] True
37 [4, 3, 2, 1, 0, 3] True
38 [4, 3, 2, 1, 0, 2, 1, 2] True
39 [4, 3, 2, 1, 0, 2, 1] True
40 [4, 3, 2, 1, 0, 2] True
41 [4, 3, 2, 1, 0, 1] True
42 [4, 3, 2, 1, 0] True
43 [4, 3, 2, 1, 4, 3, 2, 4, 3, 4] True
44 [4, 3, 2, 1, 4, 3, 2, 4, 3] True
45 [4, 3, 2, 1, 4, 3, 2, 4] True
46 [4, 3, 2, 1, 4, 3, 2, 3] True
47 [4, 3, 2, 1, 4, 3, 2] True
48 [4, 3, 2, 1, 4, 3, 4] True
49 [4, 3, 2, 1, 4, 3] True
50 [4, 3, 2, 1, 4, 2] True
51 [4, 3, 2, 1, 4] True
52 [4, 3, 2, 1, 3, 2, 3] True
53 [4, 3, 2, 1, 3, 2] True
54 [4, 3, 2, 1, 3] True
55 [4, 3, 2, 1, 2] True
56 [4, 3, 2, 1] True
57 [4, 3, 2, 0, 4, 3, 4] True
58 [4, 3, 2, 0, 4, 3] True
59 [4, 3, 2, 0, 4] True
60 [4, 3, 2, 0, 3] True
61 [4, 3, 2, 0] True
62 [4, 3, 2, 4, 3, 4] True
63 [4, 3, 2, 4, 3] True
64 [4, 3, 2, 4] True
65 [4, 3, 2, 3] True
66 [4, 3, 2] True
67 [4, 3, 1, 0, 4, 1] True
68 [4, 3, 1, 0, 4] True
69 [4, 3, 1, 0, 1] True
70 [4, 3, 1, 0] True
71 [4, 3, 1, 4] True
72 [4, 3, 1] True
73 [4, 3, 0, 4] True
74 [4, 3, 0] True
75 [4, 3, 4] True
76 [4, 3] True
77 [4, 2, 1, 0, 2, 1, 2] True
78 [4, 2, 1, 0, 2, 1] True
79 [4, 2, 1, 0, 2] True
80 [4, 2, 1, 0, 1] True
81 [4, 2, 1, 0] True
82 [4, 2, 1, 2] True
83 [4, 2, 1] True
84 [4, 2, 0] True
85 [4, 2] True
86 [4, 1, 0, 1] True
87 [4, 1, 0] True
88 [4, 1] True
89 [4, 0] True
90 [4] True
91 [3, 2, 1, 0, 3, 2, 1, 3, 2, 3] True
92 [3, 2, 1, 0, 3, 2, 1, 3, 2] True
93 [3, 2, 1, 0, 3, 2, 1, 3] True
94 [3, 2, 1, 0, 3, 2, 1, 2] True
95 [3, 2, 1, 0, 3, 2, 1] True
96 [3, 2, 1, 0, 3, 2, 3] True
97 [3, 2, 1, 0, 3, 2] True
98 [3, 2, 1, 0, 3, 1] True
99 [3, 2, 1, 0, 3] True
100 [3, 2, 1, 0, 2, 1, 2] True
101 [3, 2, 1, 0, 2, 1] True
102 [3, 2, 1, 0, 2] True
103 [3, 2, 1, 0, 1] True
104 [3, 2, 1, 0] True
105 [3, 2, 1, 3, 2, 3] True
106 [3, 2, 1, 3, 2] True
107 [3, 2, 1, 3] True
108 [3, 2, 1, 2] True
109 [3, 2, 1] True
110 [3, 2, 0, 3] True
111 [3, 2, 0] True
112 [3, 2, 3] True
113 [3, 2] True
114 [3, 1, 0, 1] True
115 [3, 1, 0] True
116 [3, 1] True
117 [3, 0] True
118 [3] True
119 [2, 1, 0, 2, 1, 2] True
120 [2, 1, 0, 2, 1] True
121 [2, 1, 0, 2] True
122 [2, 1, 0, 1] True
123 [2, 1, 0] True
124 [2, 1, 2] True
125 [2, 1] True
126 [2, 0] True
127 [2] True
128 [1, 0, 1] True
129 [1, 0] True
130 [1] True
131 [0] True
132 [] True
sage: A=CartanMatrix(['C',6])
....: c=[5,4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_int(B(A,c),lam(A,v),[k,k+[c[0]]])
....:     Bprime=B(A,c)
....:     Bprime.set_column(c[0],[0]*A.nrows())
....:     S=p_lambda_int(Bprime,lam(A,v),[k])
....:     b=bool(S.intersection(P)==P)
....:     print(num,v,b)
....:     if not(b):
....:         print('Failure!')
....:         break
....: 
1 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] True
2 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3] True
3 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4] True
4 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 3] True
5 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2] True
6 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 4] True
7 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3] True
8 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 2] True
9 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4] True
10 [4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2, 3] True
11 [4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2] True
12 [4, 3, 2, 1, 0, 4, 3, 2, 1, 3] True
13 [4, 3, 2, 1, 0, 4, 3, 2, 1, 2] True
14 [4, 3, 2, 1, 0, 4, 3, 2, 1] True
15 [4, 3, 2, 1, 0, 4, 3, 2, 4, 3, 4] True
16 [4, 3, 2, 1, 0, 4, 3, 2, 4, 3] True
17 [4, 3, 2, 1, 0, 4, 3, 2, 4] True
18 [4, 3, 2, 1, 0, 4, 3, 2, 3] True
19 [4, 3, 2, 1, 0, 4, 3, 2] True
20 [4, 3, 2, 1, 0, 4, 3, 1, 4] True
21 [4, 3, 2, 1, 0, 4, 3, 1] True
22 [4, 3, 2, 1, 0, 4, 3, 4] True
23 [4, 3, 2, 1, 0, 4, 3] True
24 [4, 3, 2, 1, 0, 4, 2, 1, 2] True
25 [4, 3, 2, 1, 0, 4, 2, 1] True
26 [4, 3, 2, 1, 0, 4, 2] True
27 [4, 3, 2, 1, 0, 4, 1] True
28 [4, 3, 2, 1, 0, 4] True
29 [4, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] True
30 [4, 3, 2, 1, 0, 3, 2, 1, 3, 2] True
31 [4, 3, 2, 1, 0, 3, 2, 1, 3] True
32 [4, 3, 2, 1, 0, 3, 2, 1, 2] True
33 [4, 3, 2, 1, 0, 3, 2, 1] True
34 [4, 3, 2, 1, 0, 3, 2, 3] True
35 [4, 3, 2, 1, 0, 3, 2] True
36 [4, 3, 2, 1, 0, 3, 1] True
37 [4, 3, 2, 1, 0, 3] True
38 [4, 3, 2, 1, 0, 2, 1, 2] True
39 [4, 3, 2, 1, 0, 2, 1] True
40 [4, 3, 2, 1, 0, 2] True
41 [4, 3, 2, 1, 0, 1] True
42 [4, 3, 2, 1, 0] True
43 [4, 3, 2, 1, 4, 3, 2, 4, 3, 4] True
44 [4, 3, 2, 1, 4, 3, 2, 4, 3] True
45 [4, 3, 2, 1, 4, 3, 2, 4] True
46 [4, 3, 2, 1, 4, 3, 2, 3] True
47 [4, 3, 2, 1, 4, 3, 2] True
48 [4, 3, 2, 1, 4, 3, 4] True
49 [4, 3, 2, 1, 4, 3] True
50 [4, 3, 2, 1, 4, 2] True
51 [4, 3, 2, 1, 4] True
52 [4, 3, 2, 1, 3, 2, 3] True
53 [4, 3, 2, 1, 3, 2] True
54 [4, 3, 2, 1, 3] True
55 [4, 3, 2, 1, 2] True
56 [4, 3, 2, 1] True
57 [4, 3, 2, 0, 4, 3, 4] True
58 [4, 3, 2, 0, 4, 3] True
59 [4, 3, 2, 0, 4] True
60 [4, 3, 2, 0, 3] True
61 [4, 3, 2, 0] True
62 [4, 3, 2, 4, 3, 4] True
63 [4, 3, 2, 4, 3] True
64 [4, 3, 2, 4] True
65 [4, 3, 2, 3] True
66 [4, 3, 2] True
67 [4, 3, 1, 0, 4, 1] True
68 [4, 3, 1, 0, 4] True
69 [4, 3, 1, 0, 1] True
70 [4, 3, 1, 0] True
71 [4, 3, 1, 4] True
72 [4, 3, 1] True
73 [4, 3, 0, 4] True
74 [4, 3, 0] True
75 [4, 3, 4] True
76 [4, 3] True
77 [4, 2, 1, 0, 2, 1, 2] True
78 [4, 2, 1, 0, 2, 1] True
79 [4, 2, 1, 0, 2] True
80 [4, 2, 1, 0, 1] True
81 [4, 2, 1, 0] True
82 [4, 2, 1, 2] True
83 [4, 2, 1] True
84 [4, 2, 0] True
85 [4, 2] True
86 [4, 1, 0, 1] True
87 [4, 1, 0] True
88 [4, 1] True
89 [4, 0] True
90 [4] True
91 [3, 2, 1, 0, 3, 2, 1, 3, 2, 3] True
92 [3, 2, 1, 0, 3, 2, 1, 3, 2] True
93 [3, 2, 1, 0, 3, 2, 1, 3] True
94 [3, 2, 1, 0, 3, 2, 1, 2] True
95 [3, 2, 1, 0, 3, 2, 1] True
96 [3, 2, 1, 0, 3, 2, 3] True
97 [3, 2, 1, 0, 3, 2] True
98 [3, 2, 1, 0, 3, 1] True
99 [3, 2, 1, 0, 3] True
100 [3, 2, 1, 0, 2, 1, 2] True
101 [3, 2, 1, 0, 2, 1] True
102 [3, 2, 1, 0, 2] True
103 [3, 2, 1, 0, 1] True
104 [3, 2, 1, 0] True
105 [3, 2, 1, 3, 2, 3] True
106 [3, 2, 1, 3, 2] True
107 [3, 2, 1, 3] True
108 [3, 2, 1, 2] True
109 [3, 2, 1] True
110 [3, 2, 0, 3] True
111 [3, 2, 0] True
112 [3, 2, 3] True
113 [3, 2] True
114 [3, 1, 0, 1] True
115 [3, 1, 0] True
116 [3, 1] True
117 [3, 0] True
118 [3] True
119 [2, 1, 0, 2, 1, 2] True
120 [2, 1, 0, 2, 1] True
121 [2, 1, 0, 2] True
122 [2, 1, 0, 1] True
123 [2, 1, 0] True
124 [2, 1, 2] True
125 [2, 1] True
126 [2, 0] True
127 [2] True
128 [1, 0, 1] True
129 [1, 0] True
130 [1] True
131 [0] True
132 [] True
sage: A=CartanMatrix(['C',5])
....: c=[4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_int(B(A,c),lam(A,v),[k,k+[c[0]]])
....:     Bprime=B(A,c)
....:     Bprime.set_column(c[0],[0]*A.nrows())
....:     S=p_lambda_int(Bprime,lam(A,v),[k])
....:     b=bool(S.intersection(P)==P)
....:     print(num,v,b)
....:     if not(b):
....:         print('Failure!')
....:         break
1 [3, 2, 1, 0, 3, 2, 1, 3, 2, 3] True
2 [3, 2, 1, 0, 3, 2, 1, 3, 2] True
3 [3, 2, 1, 0, 3, 2, 1, 3] True
4 [3, 2, 1, 0, 3, 2, 1, 2] True
5 [3, 2, 1, 0, 3, 2, 1] True
6 [3, 2, 1, 0, 3, 2, 3] True
7 [3, 2, 1, 0, 3, 2] True
8 [3, 2, 1, 0, 3, 1] True
9 [3, 2, 1, 0, 3] True
10 [3, 2, 1, 0, 2, 1, 2] True
11 [3, 2, 1, 0, 2, 1] True
12 [3, 2, 1, 0, 2] True
13 [3, 2, 1, 0, 1] True
14 [3, 2, 1, 0] True
15 [3, 2, 1, 3, 2, 3] True
16 [3, 2, 1, 3, 2] True
17 [3, 2, 1, 3] True
18 [3, 2, 1, 2] True
19 [3, 2, 1] True
20 [3, 2, 0, 3] True
21 [3, 2, 0] True
22 [3, 2, 3] True
23 [3, 2] True
24 [3, 1, 0, 1] True
25 [3, 1, 0] True
26 [3, 1] True
27 [3, 0] True
28 [3] True
29 [2, 1, 0, 2, 1, 2] True
30 [2, 1, 0, 2, 1] True
31 [2, 1, 0, 2] True
32 [2, 1, 0, 1] True
33 [2, 1, 0] True
34 [2, 1, 2] True
35 [2, 1] True
36 [2, 0] True
37 [2] True
38 [1, 0, 1] True
39 [1, 0] True
40 [1] True
41 [0] True
42 [] True
sage: A=CartanMatrix(['C',3])
....: c=[2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_int(B(A,c),lam(A,v),[k,k+[c[0]]])
....:     Bprime=B(A,c)
....:     Bprime.set_column(c[0],[0]*A.nrows())
....:     S=p_lambda_int(Bprime,lam(A,v),[k])
....:     b=bool(S.intersection(P)==P)
....:     print(num,v,b)
....:     if not(b):
....:         print('Failure!')
....:         break
1 [1, 0, 1] True
2 [1, 0] True
3 [1] True
4 [0] True
5 [] True
sage: A=CartanMatrix(['C',7])
....: c=[6,5,4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_int(B(A,c),lam(A,v),[k,k+[c[0]]])
....:     Bprime=B(A,c)
....:     Bprime.set_column(c[0],[0]*A.nrows())
....:     S=p_lambda_int(Bprime,lam(A,v),[k])
....:     b=bool(S.intersection(P)==P)
....:     print(num,v,b)
....:     if not(b):
....:         print('Failure!')
....:         break
1 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] True
2 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] True
3 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] True
4 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] True
5 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] True
6 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] True
7 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] True
8 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] True
9 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 5] True
10 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] True
11 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] True
12 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 4] True
13 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2, 3] True
14 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 2] True
15 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] True
16 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5, 4] True
17 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 5] True
18 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3, 4] True
19 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 3] True
20 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2, 5] True
21 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 2] True
22 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4, 5] True
23 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 4] True
24 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2, 3] True
25 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3, 2] True
26 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 3] True
27 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5, 2] True
28 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 5] True
29 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] True
30 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4, 3] True
31 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 4] True
32 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2, 3] True
33 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 2] True
34 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3, 4] True
35 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 3] True
36 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4, 2] True
37 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 4] True
38 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2, 3] True
39 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3, 2] True
40 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 3] True
41 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 2] True
42 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1] True
43 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] True
44 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5, 4] True
45 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 5] True
46 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3, 4] True
47 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 3] True
48 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4, 5] True
49 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 4] True
50 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5, 3] True
51 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 5] True
52 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4, 3, 4] True
53 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4, 3] True
54 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 4] True
55 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 3] True
56 [5, 4, 3, 2, 1, 0, 5, 4, 3, 2] True
57 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5, 4, 5] True
58 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5, 4] True
59 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 5] True
60 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1, 4] True
61 [5, 4, 3, 2, 1, 0, 5, 4, 3, 1] True
62 [5, 4, 3, 2, 1, 0, 5, 4, 3, 5, 4, 5] True
63 [5, 4, 3, 2, 1, 0, 5, 4, 3, 5, 4] True
64 [5, 4, 3, 2, 1, 0, 5, 4, 3, 5] True
65 [5, 4, 3, 2, 1, 0, 5, 4, 3, 4] True
66 [5, 4, 3, 2, 1, 0, 5, 4, 3] True
67 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 5, 2] True
68 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 5] True
69 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1, 2] True
70 [5, 4, 3, 2, 1, 0, 5, 4, 2, 1] True
71 [5, 4, 3, 2, 1, 0, 5, 4, 2, 5] True
72 [5, 4, 3, 2, 1, 0, 5, 4, 2] True
73 [5, 4, 3, 2, 1, 0, 5, 4, 1, 5] True
74 [5, 4, 3, 2, 1, 0, 5, 4, 1] True
75 [5, 4, 3, 2, 1, 0, 5, 4, 5] True
76 [5, 4, 3, 2, 1, 0, 5, 4] True
77 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3, 2, 3] True
78 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3, 2] True
79 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 3] True
80 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1, 2] True
81 [5, 4, 3, 2, 1, 0, 5, 3, 2, 1] True
82 [5, 4, 3, 2, 1, 0, 5, 3, 2, 3] True
83 [5, 4, 3, 2, 1, 0, 5, 3, 2] True
84 [5, 4, 3, 2, 1, 0, 5, 3, 1] True
85 [5, 4, 3, 2, 1, 0, 5, 3] True
86 [5, 4, 3, 2, 1, 0, 5, 2, 1, 2] True
87 [5, 4, 3, 2, 1, 0, 5, 2, 1] True
88 [5, 4, 3, 2, 1, 0, 5, 2] True
89 [5, 4, 3, 2, 1, 0, 5, 1] True
90 [5, 4, 3, 2, 1, 0, 5] True
91 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] True
92 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3] True
93 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4] True
94 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 3] True
95 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2] True
96 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 4] True
97 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3] True
98 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 2] True
99 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4] True
100 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2, 3] True
101 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2] True
102 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 3] True
103 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 2] True
104 [5, 4, 3, 2, 1, 0, 4, 3, 2, 1] True
105 [5, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3, 4] True
106 [5, 4, 3, 2, 1, 0, 4, 3, 2, 4, 3] True
107 [5, 4, 3, 2, 1, 0, 4, 3, 2, 4] True
108 [5, 4, 3, 2, 1, 0, 4, 3, 2, 3] True
109 [5, 4, 3, 2, 1, 0, 4, 3, 2] True
110 [5, 4, 3, 2, 1, 0, 4, 3, 1, 4] True
111 [5, 4, 3, 2, 1, 0, 4, 3, 1] True
112 [5, 4, 3, 2, 1, 0, 4, 3, 4] True
113 [5, 4, 3, 2, 1, 0, 4, 3] True
114 [5, 4, 3, 2, 1, 0, 4, 2, 1, 2] True
115 [5, 4, 3, 2, 1, 0, 4, 2, 1] True
116 [5, 4, 3, 2, 1, 0, 4, 2] True
117 [5, 4, 3, 2, 1, 0, 4, 1] True
118 [5, 4, 3, 2, 1, 0, 4] True
119 [5, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] True
120 [5, 4, 3, 2, 1, 0, 3, 2, 1, 3, 2] True
121 [5, 4, 3, 2, 1, 0, 3, 2, 1, 3] True
122 [5, 4, 3, 2, 1, 0, 3, 2, 1, 2] True
123 [5, 4, 3, 2, 1, 0, 3, 2, 1] True
124 [5, 4, 3, 2, 1, 0, 3, 2, 3] True
125 [5, 4, 3, 2, 1, 0, 3, 2] True
126 [5, 4, 3, 2, 1, 0, 3, 1] True
127 [5, 4, 3, 2, 1, 0, 3] True
128 [5, 4, 3, 2, 1, 0, 2, 1, 2] True
129 [5, 4, 3, 2, 1, 0, 2, 1] True
130 [5, 4, 3, 2, 1, 0, 2] True
131 [5, 4, 3, 2, 1, 0, 1] True
132 [5, 4, 3, 2, 1, 0] True
133 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4, 5] True
134 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5, 4] True
135 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 5] True
136 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3, 4] True
137 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 3] True
138 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4, 5] True
139 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4] True
140 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 3] True
141 [5, 4, 3, 2, 1, 5, 4, 3, 2, 5] True
142 [5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3, 4] True
143 [5, 4, 3, 2, 1, 5, 4, 3, 2, 4, 3] True
144 [5, 4, 3, 2, 1, 5, 4, 3, 2, 4] True
145 [5, 4, 3, 2, 1, 5, 4, 3, 2, 3] True
146 [5, 4, 3, 2, 1, 5, 4, 3, 2] True
147 [5, 4, 3, 2, 1, 5, 4, 3, 5, 4, 5] True
148 [5, 4, 3, 2, 1, 5, 4, 3, 5, 4] True
149 [5, 4, 3, 2, 1, 5, 4, 3, 5] True
150 [5, 4, 3, 2, 1, 5, 4, 3, 4] True
151 [5, 4, 3, 2, 1, 5, 4, 3] True
152 [5, 4, 3, 2, 1, 5, 4, 2, 5] True
153 [5, 4, 3, 2, 1, 5, 4, 2] True
154 [5, 4, 3, 2, 1, 5, 4, 5] True
155 [5, 4, 3, 2, 1, 5, 4] True
156 [5, 4, 3, 2, 1, 5, 3, 2, 3] True
157 [5, 4, 3, 2, 1, 5, 3, 2] True
158 [5, 4, 3, 2, 1, 5, 3] True
159 [5, 4, 3, 2, 1, 5, 2] True
160 [5, 4, 3, 2, 1, 5] True
161 [5, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] True
162 [5, 4, 3, 2, 1, 4, 3, 2, 4, 3] True
163 [5, 4, 3, 2, 1, 4, 3, 2, 4] True
164 [5, 4, 3, 2, 1, 4, 3, 2, 3] True
165 [5, 4, 3, 2, 1, 4, 3, 2] True
166 [5, 4, 3, 2, 1, 4, 3, 4] True
167 [5, 4, 3, 2, 1, 4, 3] True
168 [5, 4, 3, 2, 1, 4, 2] True
169 [5, 4, 3, 2, 1, 4] True
170 [5, 4, 3, 2, 1, 3, 2, 3] True
171 [5, 4, 3, 2, 1, 3, 2] True
172 [5, 4, 3, 2, 1, 3] True
173 [5, 4, 3, 2, 1, 2] True
174 [5, 4, 3, 2, 1] True
175 [5, 4, 3, 2, 0, 5, 4, 3, 5, 4, 5] True
176 [5, 4, 3, 2, 0, 5, 4, 3, 5, 4] True
177 [5, 4, 3, 2, 0, 5, 4, 3, 5] True
178 [5, 4, 3, 2, 0, 5, 4, 3, 4] True
179 [5, 4, 3, 2, 0, 5, 4, 3] True
180 [5, 4, 3, 2, 0, 5, 4, 5] True
181 [5, 4, 3, 2, 0, 5, 4] True
182 [5, 4, 3, 2, 0, 5, 3] True
183 [5, 4, 3, 2, 0, 5] True
184 [5, 4, 3, 2, 0, 4, 3, 4] True
185 [5, 4, 3, 2, 0, 4, 3] True
186 [5, 4, 3, 2, 0, 4] True
187 [5, 4, 3, 2, 0, 3] True
188 [5, 4, 3, 2, 0] True
189 [5, 4, 3, 2, 5, 4, 3, 5, 4, 5] True
190 [5, 4, 3, 2, 5, 4, 3, 5, 4] True
191 [5, 4, 3, 2, 5, 4, 3, 5] True
192 [5, 4, 3, 2, 5, 4, 3, 4] True
193 [5, 4, 3, 2, 5, 4, 3] True
194 [5, 4, 3, 2, 5, 4, 5] True
195 [5, 4, 3, 2, 5, 4] True
196 [5, 4, 3, 2, 5, 3] True
197 [5, 4, 3, 2, 5] True
198 [5, 4, 3, 2, 4, 3, 4] True
199 [5, 4, 3, 2, 4, 3] True
200 [5, 4, 3, 2, 4] True
201 [5, 4, 3, 2, 3] True
202 [5, 4, 3, 2] True
203 [5, 4, 3, 1, 0, 5, 4, 1, 5] True
204 [5, 4, 3, 1, 0, 5, 4, 1] True
205 [5, 4, 3, 1, 0, 5, 4, 5] True
206 [5, 4, 3, 1, 0, 5, 4] True
207 [5, 4, 3, 1, 0, 5, 1] True
208 [5, 4, 3, 1, 0, 5] True
209 [5, 4, 3, 1, 0, 4, 1] True
210 [5, 4, 3, 1, 0, 4] True
211 [5, 4, 3, 1, 0, 1] True
212 [5, 4, 3, 1, 0] True
213 [5, 4, 3, 1, 5, 4, 5] True
214 [5, 4, 3, 1, 5, 4] True
215 [5, 4, 3, 1, 5] True
216 [5, 4, 3, 1, 4] True
217 [5, 4, 3, 1] True
218 [5, 4, 3, 0, 5, 4, 5] True
219 [5, 4, 3, 0, 5, 4] True
220 [5, 4, 3, 0, 5] True
221 [5, 4, 3, 0, 4] True
222 [5, 4, 3, 0] True
223 [5, 4, 3, 5, 4, 5] True
224 [5, 4, 3, 5, 4] True
225 [5, 4, 3, 5] True
226 [5, 4, 3, 4] True
227 [5, 4, 3] True
228 [5, 4, 2, 1, 0, 5, 2, 1, 2] True
229 [5, 4, 2, 1, 0, 5, 2, 1] True
230 [5, 4, 2, 1, 0, 5, 2] True
231 [5, 4, 2, 1, 0, 5, 1] True
232 [5, 4, 2, 1, 0, 5] True
233 [5, 4, 2, 1, 0, 2, 1, 2] True
234 [5, 4, 2, 1, 0, 2, 1] True
235 [5, 4, 2, 1, 0, 2] True
236 [5, 4, 2, 1, 0, 1] True
237 [5, 4, 2, 1, 0] True
238 [5, 4, 2, 1, 5, 2] True
239 [5, 4, 2, 1, 5] True
240 [5, 4, 2, 1, 2] True
241 [5, 4, 2, 1] True
242 [5, 4, 2, 0, 5] True
243 [5, 4, 2, 0] True
244 [5, 4, 2, 5] True
245 [5, 4, 2] True
246 [5, 4, 1, 0, 5, 1] True
247 [5, 4, 1, 0, 5] True
248 [5, 4, 1, 0, 1] True
249 [5, 4, 1, 0] True
250 [5, 4, 1, 5] True
251 [5, 4, 1] True
252 [5, 4, 0, 5] True
253 [5, 4, 0] True
254 [5, 4, 5] True
255 [5, 4] True
256 [5, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] True
257 [5, 3, 2, 1, 0, 3, 2, 1, 3, 2] True
258 [5, 3, 2, 1, 0, 3, 2, 1, 3] True
259 [5, 3, 2, 1, 0, 3, 2, 1, 2] True
260 [5, 3, 2, 1, 0, 3, 2, 1] True
261 [5, 3, 2, 1, 0, 3, 2, 3] True
262 [5, 3, 2, 1, 0, 3, 2] True
263 [5, 3, 2, 1, 0, 3, 1] True
264 [5, 3, 2, 1, 0, 3] True
265 [5, 3, 2, 1, 0, 2, 1, 2] True
266 [5, 3, 2, 1, 0, 2, 1] True
267 [5, 3, 2, 1, 0, 2] True
268 [5, 3, 2, 1, 0, 1] True
269 [5, 3, 2, 1, 0] True
270 [5, 3, 2, 1, 3, 2, 3] True
271 [5, 3, 2, 1, 3, 2] True
272 [5, 3, 2, 1, 3] True
273 [5, 3, 2, 1, 2] True
274 [5, 3, 2, 1] True
275 [5, 3, 2, 0, 3] True
276 [5, 3, 2, 0] True
277 [5, 3, 2, 3] True
278 [5, 3, 2] True
279 [5, 3, 1, 0, 1] True
280 [5, 3, 1, 0] True
281 [5, 3, 1] True
282 [5, 3, 0] True
283 [5, 3] True
284 [5, 2, 1, 0, 2, 1, 2] True
285 [5, 2, 1, 0, 2, 1] True
286 [5, 2, 1, 0, 2] True
287 [5, 2, 1, 0, 1] True
288 [5, 2, 1, 0] True
289 [5, 2, 1, 2] True
290 [5, 2, 1] True
291 [5, 2, 0] True
292 [5, 2] True
293 [5, 1, 0, 1] True
294 [5, 1, 0] True
295 [5, 1] True
296 [5, 0] True
297 [5] True
298 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3, 4] True
299 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3] True
300 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 4] True
301 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2, 3] True
302 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 2] True
303 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3, 4] True
304 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3] True
305 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 2] True
306 [4, 3, 2, 1, 0, 4, 3, 2, 1, 4] True
307 [4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2, 3] True
308 [4, 3, 2, 1, 0, 4, 3, 2, 1, 3, 2] True
309 [4, 3, 2, 1, 0, 4, 3, 2, 1, 3] True
310 [4, 3, 2, 1, 0, 4, 3, 2, 1, 2] True
311 [4, 3, 2, 1, 0, 4, 3, 2, 1] True
312 [4, 3, 2, 1, 0, 4, 3, 2, 4, 3, 4] True
313 [4, 3, 2, 1, 0, 4, 3, 2, 4, 3] True
314 [4, 3, 2, 1, 0, 4, 3, 2, 4] True
315 [4, 3, 2, 1, 0, 4, 3, 2, 3] True
316 [4, 3, 2, 1, 0, 4, 3, 2] True
317 [4, 3, 2, 1, 0, 4, 3, 1, 4] True
318 [4, 3, 2, 1, 0, 4, 3, 1] True
319 [4, 3, 2, 1, 0, 4, 3, 4] True
320 [4, 3, 2, 1, 0, 4, 3] True
321 [4, 3, 2, 1, 0, 4, 2, 1, 2] True
322 [4, 3, 2, 1, 0, 4, 2, 1] True
323 [4, 3, 2, 1, 0, 4, 2] True
324 [4, 3, 2, 1, 0, 4, 1] True
325 [4, 3, 2, 1, 0, 4] True
326 [4, 3, 2, 1, 0, 3, 2, 1, 3, 2, 3] True
327 [4, 3, 2, 1, 0, 3, 2, 1, 3, 2] True
328 [4, 3, 2, 1, 0, 3, 2, 1, 3] True
329 [4, 3, 2, 1, 0, 3, 2, 1, 2] True
330 [4, 3, 2, 1, 0, 3, 2, 1] True
331 [4, 3, 2, 1, 0, 3, 2, 3] True
332 [4, 3, 2, 1, 0, 3, 2] True
333 [4, 3, 2, 1, 0, 3, 1] True
334 [4, 3, 2, 1, 0, 3] True
335 [4, 3, 2, 1, 0, 2, 1, 2] True
336 [4, 3, 2, 1, 0, 2, 1] True
337 [4, 3, 2, 1, 0, 2] True
338 [4, 3, 2, 1, 0, 1] True
339 [4, 3, 2, 1, 0] True
340 [4, 3, 2, 1, 4, 3, 2, 4, 3, 4] True
341 [4, 3, 2, 1, 4, 3, 2, 4, 3] True
342 [4, 3, 2, 1, 4, 3, 2, 4] True
343 [4, 3, 2, 1, 4, 3, 2, 3] True
344 [4, 3, 2, 1, 4, 3, 2] True
345 [4, 3, 2, 1, 4, 3, 4] True
346 [4, 3, 2, 1, 4, 3] True
347 [4, 3, 2, 1, 4, 2] True
348 [4, 3, 2, 1, 4] True
349 [4, 3, 2, 1, 3, 2, 3] True
350 [4, 3, 2, 1, 3, 2] True
351 [4, 3, 2, 1, 3] True
352 [4, 3, 2, 1, 2] True
353 [4, 3, 2, 1] True
354 [4, 3, 2, 0, 4, 3, 4] True
355 [4, 3, 2, 0, 4, 3] True
356 [4, 3, 2, 0, 4] True
357 [4, 3, 2, 0, 3] True
358 [4, 3, 2, 0] True
359 [4, 3, 2, 4, 3, 4] True
360 [4, 3, 2, 4, 3] True
361 [4, 3, 2, 4] True
362 [4, 3, 2, 3] True
363 [4, 3, 2] True
364 [4, 3, 1, 0, 4, 1] True
365 [4, 3, 1, 0, 4] True
366 [4, 3, 1, 0, 1] True
367 [4, 3, 1, 0] True
368 [4, 3, 1, 4] True
369 [4, 3, 1] True
370 [4, 3, 0, 4] True
371 [4, 3, 0] True
372 [4, 3, 4] True
373 [4, 3] True
374 [4, 2, 1, 0, 2, 1, 2] True
375 [4, 2, 1, 0, 2, 1] True
376 [4, 2, 1, 0, 2] True
377 [4, 2, 1, 0, 1] True
378 [4, 2, 1, 0] True
379 [4, 2, 1, 2] True
380 [4, 2, 1] True
381 [4, 2, 0] True
382 [4, 2] True
383 [4, 1, 0, 1] True
384 [4, 1, 0] True
385 [4, 1] True
386 [4, 0] True
387 [4] True
388 [3, 2, 1, 0, 3, 2, 1, 3, 2, 3] True
389 [3, 2, 1, 0, 3, 2, 1, 3, 2] True
390 [3, 2, 1, 0, 3, 2, 1, 3] True
391 [3, 2, 1, 0, 3, 2, 1, 2] True
392 [3, 2, 1, 0, 3, 2, 1] True
393 [3, 2, 1, 0, 3, 2, 3] True
394 [3, 2, 1, 0, 3, 2] True
395 [3, 2, 1, 0, 3, 1] True
396 [3, 2, 1, 0, 3] True
397 [3, 2, 1, 0, 2, 1, 2] True
398 [3, 2, 1, 0, 2, 1] True
399 [3, 2, 1, 0, 2] True
400 [3, 2, 1, 0, 1] True
401 [3, 2, 1, 0] True
402 [3, 2, 1, 3, 2, 3] True
403 [3, 2, 1, 3, 2] True
404 [3, 2, 1, 3] True
405 [3, 2, 1, 2] True
406 [3, 2, 1] True
407 [3, 2, 0, 3] True
408 [3, 2, 0] True
409 [3, 2, 3] True
410 [3, 2] True
411 [3, 1, 0, 1] True
412 [3, 1, 0] True
413 [3, 1] True
414 [3, 0] True
415 [3] True
416 [2, 1, 0, 2, 1, 2] True
417 [2, 1, 0, 2, 1] True
418 [2, 1, 0, 2] True
419 [2, 1, 0, 1] True
420 [2, 1, 0] True
421 [2, 1, 2] True
422 [2, 1] True
423 [2, 0] True
424 [2] True
425 [1, 0, 1] True
426 [1, 0] True
427 [1] True
428 [0] True
429 [] True
sage: A=CartanMatrix(['D',4])
....: c=[3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_int(B(A,c),lam(A,v),[k,k+[c[0]]])
....:     Bprime=B(A,c)
....:     Bprime.set_column(c[0],[0]*A.nrows())
....:     S=p_lambda_int(Bprime,lam(A,v),[k])
....:     b=bool(S.intersection(P)==P)
....:     print(num,v,b)
....:     if not(b):
....:         print('Failure!')
....:         break
1 [2, 1, 0, 2, 1, 2] True
2 [2, 1, 0, 2, 1] False
Failure!
sage: A=CartanMatrix(['D',5])
....: c=[4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_int(B(A,c),lam(A,v),[k,k+[c[0]]])
....:     Bprime=B(A,c)
....:     Bprime.set_column(c[0],[0]*A.nrows())
....:     S=p_lambda_int(Bprime,lam(A,v),[k])
....:     b=bool(S.intersection(P)==P)
....:     print(num,v,b)
....:     if not(b):
....:         print('Failure!')
....:         break
1 [3, 2, 1, 0, 3, 2, 1, 3, 2, 3] True
2 [3, 2, 1, 0, 3, 2, 1, 3, 2] True
3 [3, 2, 1, 0, 3, 2, 1, 3] True
4 [3, 2, 1, 0, 3, 2, 1, 2] True
5 [3, 2, 1, 0, 3, 2, 1] True
6 [3, 2, 1, 0, 3, 2, 3] True
7 [3, 2, 1, 0, 3, 2] True
8 [3, 2, 1, 0, 3, 1] True
9 [3, 2, 1, 0, 3] True
10 [3, 2, 1, 0, 2, 1, 2] True
11 [3, 2, 1, 0, 2, 1] True
12 [3, 2, 1, 0, 2] True
13 [3, 2, 1, 0, 1] True
14 [3, 2, 1, 0] True
15 [3, 2, 1, 3, 2, 3] True
16 [3, 2, 1, 3, 2] True
17 [3, 2, 1, 3] True
18 [3, 2, 1, 2] True
19 [3, 2, 1] True
20 [3, 2, 0, 3] True
21 [3, 2, 0] True
22 [3, 2, 3] True
23 [3, 2] True
24 [3, 1, 0, 1] True
25 [3, 1, 0] True
26 [3, 1] True
27 [3, 0] True
28 [3] True
29 [2, 1, 0, 2, 1, 2] True
30 [2, 1, 0, 2, 1] True
31 [2, 1, 0, 2] True
32 [2, 1, 0, 1] True
33 [2, 1, 0] True
34 [2, 1, 2] True
35 [2, 1] True
36 [2, 0] True
37 [2] True
38 [1, 0, 1] True
39 [1, 0] True
40 [1] True
41 [0] True
42 [] True
sage: A=CartanMatrix(['D',4])
....: c=[3,1,0,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_int(B(A,c),lam(A,v),[k,k+[c[0]]])
....:     Bprime=B(A,c)
....:     Bprime.set_column(c[0],[0]*A.nrows())
....:     S=p_lambda_int(Bprime,lam(A,v),[k])
....:     b=bool(S.intersection(P)==P)
....:     print(num,v,b)
....:     if not(b):
....:         print('Failure!')
....:         break
1 [1, 0, 2, 1, 0, 2] True
2 [1, 0, 2, 1, 0] True
3 [1, 0, 2, 1, 2] True
4 [1, 0, 2, 1] False
Failure!
sage: A=CartanMatrix(['D',4])
....: c=[1,0,2,3]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_int(B(A,c),lam(A,v),[k,k+[c[0]]])
....:     Bprime=B(A,c)
....:     Bprime.set_column(c[0],[0]*A.nrows())
....:     S=p_lambda_int(Bprime,lam(A,v),[k])
....:     b=bool(S.intersection(P)==P)
....:     print(num,v,b)
....:     if not(b):
....:         print('Failure!')
....:         break
1 [0, 2, 3] True
2 [0, 2] True
3 [0, 3] True
4 [0] True
5 [2, 3] True
6 [2] True
7 [3] True
8 [] True
sage: A=CartanMatrix(['D',6])
....: c=[1,0,2,3,4,5]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_int(B(A,c),lam(A,v),[k,k+[c[0]]])
....:     Bprime=B(A,c)
....:     Bprime.set_column(c[0],[0]*A.nrows())
....:     S=p_lambda_int(Bprime,lam(A,v),[k])
....:     b=bool(S.intersection(P)==P)
....:     print(num,v,b)
....:     if not(b):
....:         print('Failure!')
....:         break
1 [0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5] True
2 [0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4] True
3 [0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 5] True
4 [0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3] True
5 [0, 2, 3, 4, 5, 2, 3, 4, 5, 2] True
6 [0, 2, 3, 4, 5, 2, 3, 4, 5] True
7 [0, 2, 3, 4, 5, 2, 3, 4, 2, 3] True
8 [0, 2, 3, 4, 5, 2, 3, 4, 2] True
9 [0, 2, 3, 4, 5, 2, 3, 4] True
10 [0, 2, 3, 4, 5, 2, 3, 5, 2, 3] True
11 [0, 2, 3, 4, 5, 2, 3, 5, 2] True
12 [0, 2, 3, 4, 5, 2, 3, 5] True
13 [0, 2, 3, 4, 5, 2, 3, 2] True
14 [0, 2, 3, 4, 5, 2, 3] True
15 [0, 2, 3, 4, 5, 2] True
16 [0, 2, 3, 4, 5, 3, 4, 5] True
17 [0, 2, 3, 4, 5, 3, 4] True
18 [0, 2, 3, 4, 5, 3, 5] True
19 [0, 2, 3, 4, 5, 3] True
20 [0, 2, 3, 4, 5] True
21 [0, 2, 3, 4, 2, 3, 2] True
22 [0, 2, 3, 4, 2, 3] True
23 [0, 2, 3, 4, 2] True
24 [0, 2, 3, 4, 3] True
25 [0, 2, 3, 4] True
26 [0, 2, 3, 5, 2, 3, 2] True
27 [0, 2, 3, 5, 2, 3] True
28 [0, 2, 3, 5, 2] True
29 [0, 2, 3, 5, 3] True
30 [0, 2, 3, 5] True
31 [0, 2, 3, 2] True
32 [0, 2, 3] True
33 [0, 2, 4, 5] True
34 [0, 2, 4] True
35 [0, 2, 5] True
36 [0, 2] True
37 [0, 3, 4, 5, 3, 4, 5] True
38 [0, 3, 4, 5, 3, 4] True
39 [0, 3, 4, 5, 3, 5] True
40 [0, 3, 4, 5, 3] True
41 [0, 3, 4, 5] True
42 [0, 3, 4, 3] True
43 [0, 3, 4] True
44 [0, 3, 5, 3] True
45 [0, 3, 5] True
46 [0, 3] True
47 [0, 4, 5] True
48 [0, 4] True
49 [0, 5] True
50 [0] True
51 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5] True
52 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4] True
53 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 5] True
54 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3] True
55 [2, 3, 4, 5, 2, 3, 4, 5, 2] True
56 [2, 3, 4, 5, 2, 3, 4, 5] True
57 [2, 3, 4, 5, 2, 3, 4, 2, 3] True
58 [2, 3, 4, 5, 2, 3, 4, 2] True
59 [2, 3, 4, 5, 2, 3, 4] True
60 [2, 3, 4, 5, 2, 3, 5, 2, 3] True
61 [2, 3, 4, 5, 2, 3, 5, 2] True
62 [2, 3, 4, 5, 2, 3, 5] True
63 [2, 3, 4, 5, 2, 3, 2] True
64 [2, 3, 4, 5, 2, 3] True
65 [2, 3, 4, 5, 2] True
66 [2, 3, 4, 5, 3, 4, 5] True
67 [2, 3, 4, 5, 3, 4] True
68 [2, 3, 4, 5, 3, 5] True
69 [2, 3, 4, 5, 3] True
70 [2, 3, 4, 5] True
71 [2, 3, 4, 2, 3, 2] True
72 [2, 3, 4, 2, 3] True
73 [2, 3, 4, 2] True
74 [2, 3, 4, 3] True
75 [2, 3, 4] True
76 [2, 3, 5, 2, 3, 2] True
77 [2, 3, 5, 2, 3] True
78 [2, 3, 5, 2] True
79 [2, 3, 5, 3] True
80 [2, 3, 5] True
81 [2, 3, 2] True
82 [2, 3] True
83 [2, 4, 5] True
84 [2, 4] True
85 [2, 5] True
86 [2] True
87 [3, 4, 5, 3, 4, 5] True
88 [3, 4, 5, 3, 4] True
89 [3, 4, 5, 3, 5] True
90 [3, 4, 5, 3] True
91 [3, 4, 5] True
92 [3, 4, 3] True
93 [3, 4] True
94 [3, 5, 3] True
95 [3, 5] True
96 [3] True
97 [4, 5] True
98 [4] True
99 [5] True
100 [] True
sage: A=CartanMatrix(['D',4])
....: c=[1,0,2,3]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_int(B(A,c),lam(A,v),[k,k+[c[0]]])
....:     Bprime=B(A,c)
....:     Bprime.set_column(c[0],[0]*A.nrows())
....:     S=p_lambda_int(Bprime,lam(A,v),[k])
....:     b=bool(S.intersection(P)==P)
....:     print(num,v,b)
....:     if not(b):
....:         print('Failure!')
....:         break
....: 
1 [0, 2, 3] True
2 [0, 2] True
3 [0, 3] True
4 [0] True
5 [2, 3] True
6 [2] True
7 [3] True
8 [] True
sage: B(A,c)
[ 0 -1  0  0]
[ 1  0  1  1]
[ 0 -1  0  0]
[ 0 -1  0  0]
sage: A=CartanMatrix(['D',6])
....: c=[1,0,2,3,4,5]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_int(B(A,c),lam(A,v),[k,k+[c[0]]])
....:     Bprime=B(A,c)
....:     Bprime.set_column(c[0],[0]*A.nrows())
....:     S=p_lambda_int(Bprime,lam(A,v),[k])
....:     b=bool(S.intersection(P)==P)
....:     print(num,v,b)
....:     if not(b):
....:         print('Failure!')
....:         break
....: 
1 [0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5] True
2 [0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4] True
3 [0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 5] True
4 [0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3] True
5 [0, 2, 3, 4, 5, 2, 3, 4, 5, 2] True
6 [0, 2, 3, 4, 5, 2, 3, 4, 5] True
7 [0, 2, 3, 4, 5, 2, 3, 4, 2, 3] True
8 [0, 2, 3, 4, 5, 2, 3, 4, 2] True
9 [0, 2, 3, 4, 5, 2, 3, 4] True
10 [0, 2, 3, 4, 5, 2, 3, 5, 2, 3] True
11 [0, 2, 3, 4, 5, 2, 3, 5, 2] True
12 [0, 2, 3, 4, 5, 2, 3, 5] True
13 [0, 2, 3, 4, 5, 2, 3, 2] True
14 [0, 2, 3, 4, 5, 2, 3] True
15 [0, 2, 3, 4, 5, 2] True
16 [0, 2, 3, 4, 5, 3, 4, 5] True
17 [0, 2, 3, 4, 5, 3, 4] True
18 [0, 2, 3, 4, 5, 3, 5] True
19 [0, 2, 3, 4, 5, 3] True
20 [0, 2, 3, 4, 5] True
21 [0, 2, 3, 4, 2, 3, 2] True
22 [0, 2, 3, 4, 2, 3] True
23 [0, 2, 3, 4, 2] True
24 [0, 2, 3, 4, 3] True
25 [0, 2, 3, 4] True
26 [0, 2, 3, 5, 2, 3, 2] True
27 [0, 2, 3, 5, 2, 3] True
28 [0, 2, 3, 5, 2] True
29 [0, 2, 3, 5, 3] True
30 [0, 2, 3, 5] True
31 [0, 2, 3, 2] True
32 [0, 2, 3] True
33 [0, 2, 4, 5] True
34 [0, 2, 4] True
35 [0, 2, 5] True
36 [0, 2] True
37 [0, 3, 4, 5, 3, 4, 5] True
38 [0, 3, 4, 5, 3, 4] True
39 [0, 3, 4, 5, 3, 5] True
40 [0, 3, 4, 5, 3] True
41 [0, 3, 4, 5] True
42 [0, 3, 4, 3] True
43 [0, 3, 4] True
44 [0, 3, 5, 3] True
45 [0, 3, 5] True
46 [0, 3] True
47 [0, 4, 5] True
48 [0, 4] True
49 [0, 5] True
50 [0] True
51 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5] True
52 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4] True
53 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 5] True
54 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3] True
55 [2, 3, 4, 5, 2, 3, 4, 5, 2] True
56 [2, 3, 4, 5, 2, 3, 4, 5] True
57 [2, 3, 4, 5, 2, 3, 4, 2, 3] True
58 [2, 3, 4, 5, 2, 3, 4, 2] True
59 [2, 3, 4, 5, 2, 3, 4] True
60 [2, 3, 4, 5, 2, 3, 5, 2, 3] True
61 [2, 3, 4, 5, 2, 3, 5, 2] True
62 [2, 3, 4, 5, 2, 3, 5] True
63 [2, 3, 4, 5, 2, 3, 2] True
64 [2, 3, 4, 5, 2, 3] True
65 [2, 3, 4, 5, 2] True
66 [2, 3, 4, 5, 3, 4, 5] True
67 [2, 3, 4, 5, 3, 4] True
68 [2, 3, 4, 5, 3, 5] True
69 [2, 3, 4, 5, 3] True
70 [2, 3, 4, 5] True
71 [2, 3, 4, 2, 3, 2] True
72 [2, 3, 4, 2, 3] True
73 [2, 3, 4, 2] True
74 [2, 3, 4, 3] True
75 [2, 3, 4] True
76 [2, 3, 5, 2, 3, 2] True
77 [2, 3, 5, 2, 3] True
78 [2, 3, 5, 2] True
79 [2, 3, 5, 3] True
80 [2, 3, 5] True
81 [2, 3, 2] True
82 [2, 3] True
83 [2, 4, 5] True
84 [2, 4] True
85 [2, 5] True
86 [2] True
87 [3, 4, 5, 3, 4, 5] True
88 [3, 4, 5, 3, 4] True
89 [3, 4, 5, 3, 5] True
90 [3, 4, 5, 3] True
91 [3, 4, 5] True
92 [3, 4, 3] True
93 [3, 4] True
94 [3, 5, 3] True
95 [3, 5] True
96 [3] True
97 [4, 5] True
98 [4] True
99 [5] True
100 [] True
sage: B(A,c)
[ 0 -1  0  0  0  0]
[ 1  0  1  0  0  0]
[ 0 -1  0  1  0  0]
[ 0  0 -1  0  1  1]
[ 0  0  0 -1  0  0]
[ 0  0  0 -1  0  0]
sage: A=CartanMatrix(['D',6])
....: c=[4,1,0,2,3,5,1]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_int(B(A,c),lam(A,v),[k,k+[c[0]]])
....:     Bprime=B(A,c)
....:     Bprime.set_column(c[0],[0]*A.nrows())
....:     S=p_lambda_int(Bprime,lam(A,v),[k])
....:     b=bool(S.intersection(P)==P)
....:     print(num,v,b)
....:     if not(b):
....:         print('Failure!')
....:         break
1 [1, 0, 2, 3, 5, 1, 0, 2, 3, 5, 1, 0, 2, 1, 0] True
2 [1, 0, 2, 3, 5, 1, 0, 2, 3, 5, 1, 0, 2, 1] False
Failure!
sage: A=CartanMatrix(['D',6])
....: c=[4,0,2,3,5,1]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_int(B(A,c),lam(A,v),[k,k+[c[0]]])
....:     Bprime=B(A,c)
....:     Bprime.set_column(c[0],[0]*A.nrows())
....:     S=p_lambda_int(Bprime,lam(A,v),[k])
....:     b=bool(S.intersection(P)==P)
....:     print(num,v,b)
....:     if not(b):
....:         print('Failure!')
....:         break
1 [0, 2, 3, 5, 1, 0, 2, 3, 5, 1, 0, 2, 3, 1, 0] True
2 [0, 2, 3, 5, 1, 0, 2, 3, 5, 1, 0, 2, 3, 1] False
Failure!
sage: B(A,c)
[ 0  1  0  0  0  0]
[-1  0 -1  0  0  0]
[ 0  1  0  1  0  0]
[ 0  0 -1  0 -1  1]
[ 0  0  0  1  0  0]
[ 0  0  0 -1  0  0]
sage: A=CartanMatrix(['D',6])
....: c=[1,0,2,3,4,5]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_int(B(A,c),lam(A,v),[kinv,kinv+[c[0]]])
....:     Bprime=B(A,c)
....:     Bprime.set_column(c[0],[0]*A.nrows())
....:     S=p_lambda_int(Bprime,lam(A,v),[kinv])
....:     b=bool(S.intersection(P)==P)
....:     print(num,v,b)
....:     if not(b):
....:         print('Failure!')
....:         break
1 [0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5] True
2 [0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4] True
3 [0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 5] True
4 [0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3] True
5 [0, 2, 3, 4, 5, 2, 3, 4, 5, 2] True
6 [0, 2, 3, 4, 5, 2, 3, 4, 5] True
7 [0, 2, 3, 4, 5, 2, 3, 4, 2, 3] True
8 [0, 2, 3, 4, 5, 2, 3, 4, 2] True
9 [0, 2, 3, 4, 5, 2, 3, 4] True
10 [0, 2, 3, 4, 5, 2, 3, 5, 2, 3] True
11 [0, 2, 3, 4, 5, 2, 3, 5, 2] True
12 [0, 2, 3, 4, 5, 2, 3, 5] True
13 [0, 2, 3, 4, 5, 2, 3, 2] True
14 [0, 2, 3, 4, 5, 2, 3] True
15 [0, 2, 3, 4, 5, 2] True
16 [0, 2, 3, 4, 5, 3, 4, 5] True
17 [0, 2, 3, 4, 5, 3, 4] True
18 [0, 2, 3, 4, 5, 3, 5] True
19 [0, 2, 3, 4, 5, 3] True
20 [0, 2, 3, 4, 5] True
21 [0, 2, 3, 4, 2, 3, 2] True
22 [0, 2, 3, 4, 2, 3] True
23 [0, 2, 3, 4, 2] True
24 [0, 2, 3, 4, 3] True
25 [0, 2, 3, 4] True
26 [0, 2, 3, 5, 2, 3, 2] True
27 [0, 2, 3, 5, 2, 3] True
28 [0, 2, 3, 5, 2] True
29 [0, 2, 3, 5, 3] True
30 [0, 2, 3, 5] True
31 [0, 2, 3, 2] True
32 [0, 2, 3] True
33 [0, 2, 4, 5] True
34 [0, 2, 4] True
35 [0, 2, 5] True
36 [0, 2] True
37 [0, 3, 4, 5, 3, 4, 5] True
38 [0, 3, 4, 5, 3, 4] True
39 [0, 3, 4, 5, 3, 5] True
40 [0, 3, 4, 5, 3] True
41 [0, 3, 4, 5] True
42 [0, 3, 4, 3] True
43 [0, 3, 4] True
44 [0, 3, 5, 3] True
45 [0, 3, 5] True
46 [0, 3] True
47 [0, 4, 5] True
48 [0, 4] True
49 [0, 5] True
50 [0] True
51 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5] True
52 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4] True
53 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 5] True
54 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3] True
55 [2, 3, 4, 5, 2, 3, 4, 5, 2] True
56 [2, 3, 4, 5, 2, 3, 4, 5] True
57 [2, 3, 4, 5, 2, 3, 4, 2, 3] True
58 [2, 3, 4, 5, 2, 3, 4, 2] True
59 [2, 3, 4, 5, 2, 3, 4] True
60 [2, 3, 4, 5, 2, 3, 5, 2, 3] True
61 [2, 3, 4, 5, 2, 3, 5, 2] True
62 [2, 3, 4, 5, 2, 3, 5] True
63 [2, 3, 4, 5, 2, 3, 2] True
64 [2, 3, 4, 5, 2, 3] True
65 [2, 3, 4, 5, 2] True
66 [2, 3, 4, 5, 3, 4, 5] True
67 [2, 3, 4, 5, 3, 4] True
68 [2, 3, 4, 5, 3, 5] True
69 [2, 3, 4, 5, 3] True
70 [2, 3, 4, 5] True
71 [2, 3, 4, 2, 3, 2] True
72 [2, 3, 4, 2, 3] True
73 [2, 3, 4, 2] True
74 [2, 3, 4, 3] True
75 [2, 3, 4] True
76 [2, 3, 5, 2, 3, 2] True
77 [2, 3, 5, 2, 3] True
78 [2, 3, 5, 2] True
79 [2, 3, 5, 3] True
80 [2, 3, 5] True
81 [2, 3, 2] True
82 [2, 3] True
83 [2, 4, 5] True
84 [2, 4] True
85 [2, 5] True
86 [2] True
87 [3, 4, 5, 3, 4, 5] True
88 [3, 4, 5, 3, 4] True
89 [3, 4, 5, 3, 5] True
90 [3, 4, 5, 3] True
91 [3, 4, 5] True
92 [3, 4, 3] True
93 [3, 4] True
94 [3, 5, 3] True
95 [3, 5] True
96 [3] True
97 [4, 5] True
98 [4] True
99 [5] True
100 [] True
sage: A=CartanMatrix(['D',6])
....: c=[0,1,2,3,4,5]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_int(B(A,c),lam(A,v),[kinv,kinv+[c[0]]])
....:     Bprime=B(A,c)
....:     Bprime.set_column(c[0],[0]*A.nrows())
....:     S=p_lambda_int(Bprime,lam(A,v),[kinv])
....:     b=bool(S.intersection(P)==P)
....:     print(num,v,b)
....:     if not(b):
....:         print('Failure!')
....:         break
1 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5] True
2 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4] True
3 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 5] True
4 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3] True
5 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2] True
6 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1] True
7 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5] True
8 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] True
9 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] True
10 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1] True
11 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4] True
12 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 5, 1, 2, 3] True
13 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 5, 1, 2] True
14 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 5, 1] True
15 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 5] True
16 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2] True
17 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1] True
18 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3] True
19 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 1] True
20 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2] True
21 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1] True
22 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5] True
23 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4] True
24 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 5] True
25 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3] True
26 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2] True
27 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5] True
28 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2] True
29 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1] True
30 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] True
31 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1] True
32 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] True
33 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1] True
34 [1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3] True
35 [1, 2, 3, 4, 5, 1, 2, 3, 4, 2] True
36 [1, 2, 3, 4, 5, 1, 2, 3, 4] True
37 [1, 2, 3, 4, 5, 1, 2, 3, 5, 1, 2, 3, 1, 2] True
38 [1, 2, 3, 4, 5, 1, 2, 3, 5, 1, 2, 3, 1] True
39 [1, 2, 3, 4, 5, 1, 2, 3, 5, 1, 2, 3] True
40 [1, 2, 3, 4, 5, 1, 2, 3, 5, 1, 2, 1] True
41 [1, 2, 3, 4, 5, 1, 2, 3, 5, 1, 2] True
42 [1, 2, 3, 4, 5, 1, 2, 3, 5, 1] True
43 [1, 2, 3, 4, 5, 1, 2, 3, 5, 2, 3] True
44 [1, 2, 3, 4, 5, 1, 2, 3, 5, 2] True
45 [1, 2, 3, 4, 5, 1, 2, 3, 5] True
46 [1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1] True
47 [1, 2, 3, 4, 5, 1, 2, 3, 1, 2] True
48 [1, 2, 3, 4, 5, 1, 2, 3, 1] True
49 [1, 2, 3, 4, 5, 1, 2, 3, 2] True
50 [1, 2, 3, 4, 5, 1, 2, 3] True
51 [1, 2, 3, 4, 5, 1, 2, 1] True
52 [1, 2, 3, 4, 5, 1, 2] True
53 [1, 2, 3, 4, 5, 1, 3, 4, 5] True
54 [1, 2, 3, 4, 5, 1, 3, 4] True
55 [1, 2, 3, 4, 5, 1, 3, 5] True
56 [1, 2, 3, 4, 5, 1, 3] True
57 [1, 2, 3, 4, 5, 1] True
58 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5] True
59 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4] True
60 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 5] True
61 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3] True
62 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2] True
63 [1, 2, 3, 4, 5, 2, 3, 4, 5] True
64 [1, 2, 3, 4, 5, 2, 3, 4, 2, 3] True
65 [1, 2, 3, 4, 5, 2, 3, 4, 2] True
66 [1, 2, 3, 4, 5, 2, 3, 4] True
67 [1, 2, 3, 4, 5, 2, 3, 5, 2, 3] True
68 [1, 2, 3, 4, 5, 2, 3, 5, 2] True
69 [1, 2, 3, 4, 5, 2, 3, 5] True
70 [1, 2, 3, 4, 5, 2, 3, 2] True
71 [1, 2, 3, 4, 5, 2, 3] True
72 [1, 2, 3, 4, 5, 2] True
73 [1, 2, 3, 4, 5, 3, 4, 5] True
74 [1, 2, 3, 4, 5, 3, 4] True
75 [1, 2, 3, 4, 5, 3, 5] True
76 [1, 2, 3, 4, 5, 3] True
77 [1, 2, 3, 4, 5] True
78 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1] True
79 [1, 2, 3, 4, 1, 2, 3, 1, 2] True
80 [1, 2, 3, 4, 1, 2, 3, 1] True
81 [1, 2, 3, 4, 1, 2, 3, 2] True
82 [1, 2, 3, 4, 1, 2, 3] True
83 [1, 2, 3, 4, 1, 2, 1] True
84 [1, 2, 3, 4, 1, 2] True
85 [1, 2, 3, 4, 1, 3] True
86 [1, 2, 3, 4, 1] True
87 [1, 2, 3, 4, 2, 3, 2] True
88 [1, 2, 3, 4, 2, 3] True
89 [1, 2, 3, 4, 2] True
90 [1, 2, 3, 4, 3] True
91 [1, 2, 3, 4] True
92 [1, 2, 3, 5, 1, 2, 3, 1, 2, 1] True
93 [1, 2, 3, 5, 1, 2, 3, 1, 2] True
94 [1, 2, 3, 5, 1, 2, 3, 1] True
95 [1, 2, 3, 5, 1, 2, 3, 2] True
96 [1, 2, 3, 5, 1, 2, 3] True
97 [1, 2, 3, 5, 1, 2, 1] True
98 [1, 2, 3, 5, 1, 2] True
99 [1, 2, 3, 5, 1, 3] True
100 [1, 2, 3, 5, 1] True
101 [1, 2, 3, 5, 2, 3, 2] True
102 [1, 2, 3, 5, 2, 3] True
103 [1, 2, 3, 5, 2] True
104 [1, 2, 3, 5, 3] True
105 [1, 2, 3, 5] True
106 [1, 2, 3, 1, 2, 1] False
Failure!
sage: A=CartanMatrix(['C',5])
....: c=[4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_int(B(A,c),lam(A,v),[k,k+[c[0]]])
....:     Bprime=B(A,c)
....:     Bprime.set_column(c[0],[0]*A.nrows())
....:     S=p_lambda_int(Bprime,lam(A,v),[k])
....:     b=bool(S.intersection(P)==P)
....:     print(num,v,b)
....:     if not(b):
....:         print('Failure!')
....:         break
1 [3, 2, 1, 0, 3, 2, 1, 3, 2, 3] True
2 [3, 2, 1, 0, 3, 2, 1, 3, 2] True
3 [3, 2, 1, 0, 3, 2, 1, 3] True
4 [3, 2, 1, 0, 3, 2, 1, 2] True
5 [3, 2, 1, 0, 3, 2, 1] True
6 [3, 2, 1, 0, 3, 2, 3] True
7 [3, 2, 1, 0, 3, 2] True
8 [3, 2, 1, 0, 3, 1] True
9 [3, 2, 1, 0, 3] True
10 [3, 2, 1, 0, 2, 1, 2] True
11 [3, 2, 1, 0, 2, 1] True
12 [3, 2, 1, 0, 2] True
13 [3, 2, 1, 0, 1] True
14 [3, 2, 1, 0] True
15 [3, 2, 1, 3, 2, 3] True
16 [3, 2, 1, 3, 2] True
17 [3, 2, 1, 3] True
18 [3, 2, 1, 2] True
19 [3, 2, 1] True
20 [3, 2, 0, 3] True
21 [3, 2, 0] True
22 [3, 2, 3] True
23 [3, 2] True
24 [3, 1, 0, 1] True
25 [3, 1, 0] True
26 [3, 1] True
27 [3, 0] True
28 [3] True
29 [2, 1, 0, 2, 1, 2] True
30 [2, 1, 0, 2, 1] True
31 [2, 1, 0, 2] True
32 [2, 1, 0, 1] True
33 [2, 1, 0] True
34 [2, 1, 2] True
35 [2, 1] True
36 [2, 0] True
37 [2] True
38 [1, 0, 1] True
39 [1, 0] True
40 [1] True
41 [0] True
42 [] True
sage: A=CartanMatrix(['C',5])
....: c=[4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_int(B(A,c),lam(A,v),[k])
....:     Bprime=B(A,c)
....:     Bprime.set_column(c[0],[0]*A.nrows())
....:     S=p_lambda_int(Bprime,lam(A,v),[k])
....:     b=bool(S.intersection(P)==P)
....:     print(num,v,b)
....:     if not(b):
....:         print('Failure!')
....:         break
1 [3, 2, 1, 0, 3, 2, 1, 3, 2, 3] True
2 [3, 2, 1, 0, 3, 2, 1, 3, 2] False
Failure!
sage: A=CartanMatrix(['C',5])
....: c=[4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     P=p_lambda_int(B(A,c),lam(A,v),[k,k+[c[0]]])
....:     Bprime=B(A,c)
....:     Bprime.set_column(c[0],[0]*A.nrows())
....:     S=p_lambda_int(Bprime,lam(A,v),[k])
....:     b=bool(S.intersection(P)==P)
....:     print(num,v,b)
....:     if not(b):
....:         print('Failure!')
....:         break
....: 
1 [3, 2, 1, 0, 3, 2, 1, 3, 2, 3] True
2 [3, 2, 1, 0, 3, 2, 1, 3, 2] True
3 [3, 2, 1, 0, 3, 2, 1, 3] True
4 [3, 2, 1, 0, 3, 2, 1, 2] True
5 [3, 2, 1, 0, 3, 2, 1] True
6 [3, 2, 1, 0, 3, 2, 3] True
7 [3, 2, 1, 0, 3, 2] True
8 [3, 2, 1, 0, 3, 1] True
9 [3, 2, 1, 0, 3] True
10 [3, 2, 1, 0, 2, 1, 2] True
11 [3, 2, 1, 0, 2, 1] True
12 [3, 2, 1, 0, 2] True
13 [3, 2, 1, 0, 1] True
14 [3, 2, 1, 0] True
15 [3, 2, 1, 3, 2, 3] True
16 [3, 2, 1, 3, 2] True
17 [3, 2, 1, 3] True
18 [3, 2, 1, 2] True
19 [3, 2, 1] True
20 [3, 2, 0, 3] True
21 [3, 2, 0] True
22 [3, 2, 3] True
23 [3, 2] True
24 [3, 1, 0, 1] True
25 [3, 1, 0] True
26 [3, 1] True
27 [3, 0] True
28 [3] True
29 [2, 1, 0, 2, 1, 2] True
30 [2, 1, 0, 2, 1] True
31 [2, 1, 0, 2] True
32 [2, 1, 0, 1] True
33 [2, 1, 0] True
34 [2, 1, 2] True
35 [2, 1] True
36 [2, 0] True
37 [2] True
38 [1, 0, 1] True
39 [1, 0] True
40 [1] True
41 [0] True
42 [] True
### reloading attached file domination5.py modified at 12:56:53 ###
### reloading attached file domination5.py modified at 12:57:48 ###
sage: A=CartanMatrix(['C',5])
....: c=[4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     B1=mutate(B(A,c),k)
....:     B2=mutate(B(A,c),k+[c[0]])
....:     print(v,B1,B2)
....: 
[3, 2, 1, 0, 3, 2, 1, 3, 2, 3] [ 0  1  0  0  2]
[-1  0  1  0  0]
[ 0 -1  0  1  0]
[ 0  0 -1  0  0]
[-1  0  0  0  0] [ 0  1  0  0 -2]
[-1  0  1  0  2]
[ 0 -1  0  1  0]
[ 0  0 -1  0  0]
[ 1 -1  0  0  0]
[3, 2, 1, 0, 3, 2, 1, 3, 2] [ 0  1  0  0  2]
[-1  0  1  0  0]
[ 0 -1  0 -1  0]
[ 0  0  1  0  0]
[-1  0  0  0  0] [ 0  1  0  0 -2]
[-1  0  1  0  2]
[ 0 -1  0 -1  0]
[ 0  0  1  0  0]
[ 1 -1  0  0  0]
[3, 2, 1, 0, 3, 2, 1, 3] [ 0  1  0  0  2]
[-1  0 -1  0  0]
[ 0  1  0  1  0]
[ 0  0 -1  0  0]
[-1  0  0  0  0] [ 0  1  0  0 -2]
[-1  0 -1  0  2]
[ 0  1  0  1  0]
[ 0  0 -1  0  0]
[ 1 -1  0  0  0]
[3, 2, 1, 0, 3, 2, 1, 2] [ 0  1  0  0  2]
[-1  0  1 -1  0]
[ 0 -1  0  1  0]
[ 0  1 -1  0  0]
[-1  0  0  0  0] [ 0  1  0  0 -2]
[-1  0  1 -1  2]
[ 0 -1  0  1  0]
[ 0  1 -1  0  0]
[ 1 -1  0  0  0]
[3, 2, 1, 0, 3, 2, 1] [ 0  1  0  0  2]
[-1  0 -1  0  0]
[ 0  1  0 -1  0]
[ 0  0  1  0  0]
[-1  0  0  0  0] [ 0  1  0  0 -2]
[-1  0 -1  0  2]
[ 0  1  0 -1  0]
[ 0  0  1  0  0]
[ 1 -1  0  0  0]
[3, 2, 1, 0, 3, 2, 3] [ 0 -1  0  0  2]
[ 1  0  1  0  0]
[ 0 -1  0  1  0]
[ 0  0 -1  0  0]
[-1  0  0  0  0] [ 0 -1  0  0  0]
[ 1  0  1  0 -2]
[ 0 -1  0  1  2]
[ 0  0 -1  0  0]
[ 0  1 -1  0  0]
[3, 2, 1, 0, 3, 2] [ 0 -1  0  0  2]
[ 1  0  1  0  0]
[ 0 -1  0 -1  0]
[ 0  0  1  0  0]
[-1  0  0  0  0] [ 0 -1  0  0  0]
[ 1  0  1  0 -2]
[ 0 -1  0 -1  2]
[ 0  0  1  0  0]
[ 0  1 -1  0  0]
[3, 2, 1, 0, 3, 1] [ 0  1 -1  0  2]
[-1  0  1  0  0]
[ 1 -1  0  1  0]
[ 0  0 -1  0  0]
[-1  0  0  0  0] [ 0  1 -1  0  0]
[-1  0  1  0  0]
[ 1 -1  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0]
[3, 2, 1, 0, 3] [ 0 -1  0  0  2]
[ 1  0 -1  0  0]
[ 0  1  0  1  0]
[ 0  0 -1  0  0]
[-1  0  0  0  0] [ 0 -1  0  0  0]
[ 1  0 -1  0  0]
[ 0  1  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0]
[3, 2, 1, 0, 2, 1, 2] [ 0  1  0 -1  2]
[-1  0  1  1  0]
[ 0 -1  0  0  0]
[ 1 -1  0  0  0]
[-1  0  0  0  0] [ 0  1  0 -1  0]
[-1  0  1  1  0]
[ 0 -1  0  0  0]
[ 1 -1  0  0 -2]
[ 0  0  0  1  0]
[3, 2, 1, 0, 2, 1] [ 0  1  0 -1  2]
[-1  0 -1  1  0]
[ 0  1  0  0  0]
[ 1 -1  0  0  0]
[-1  0  0  0  0] [ 0  1  0 -1  0]
[-1  0 -1  1  0]
[ 0  1  0  0  0]
[ 1 -1  0  0 -2]
[ 0  0  0  1  0]
[3, 2, 1, 0, 2] [ 0 -1  0  0  2]
[ 1  0  1 -1  0]
[ 0 -1  0  1  0]
[ 0  1 -1  0  0]
[-1  0  0  0  0] [ 0 -1  0  0  0]
[ 1  0  1 -1  0]
[ 0 -1  0  1  0]
[ 0  1 -1  0 -2]
[ 0  0  0  1  0]
[3, 2, 1, 0, 1] [ 0  1 -1  0  2]
[-1  0  1  0  0]
[ 1 -1  0 -1  0]
[ 0  0  1  0  0]
[-1  0  0  0  0] [ 0  1 -1  0  0]
[-1  0  1  0  0]
[ 1 -1  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0]
[3, 2, 1, 0] [ 0 -1  0  0  2]
[ 1  0 -1  0  0]
[ 0  1  0 -1  0]
[ 0  0  1  0  0]
[-1  0  0  0  0] [ 0 -1  0  0  0]
[ 1  0 -1  0  0]
[ 0  1  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0]
[3, 2, 1, 3, 2, 3] [ 0  1  0  0 -2]
[-1  0  1  0  2]
[ 0 -1  0  1  0]
[ 0  0 -1  0  0]
[ 1 -1  0  0  0] [ 0  1  0  0  0]
[-1  0  1  0 -2]
[ 0 -1  0  1  2]
[ 0  0 -1  0  0]
[ 0  1 -1  0  0]
[3, 2, 1, 3, 2] [ 0  1  0  0 -2]
[-1  0  1  0  2]
[ 0 -1  0 -1  0]
[ 0  0  1  0  0]
[ 1 -1  0  0  0] [ 0  1  0  0  0]
[-1  0  1  0 -2]
[ 0 -1  0 -1  2]
[ 0  0  1  0  0]
[ 0  1 -1  0  0]
[3, 2, 1, 3] [ 0  1  0  0 -2]
[-1  0 -1  0  2]
[ 0  1  0  1  0]
[ 0  0 -1  0  0]
[ 1 -1  0  0  0] [ 0  1  0  0  0]
[-1  0 -1  0  0]
[ 0  1  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0]
[3, 2, 1, 2] [ 0  1  0  0 -2]
[-1  0  1 -1  2]
[ 0 -1  0  1  0]
[ 0  1 -1  0  0]
[ 1 -1  0  0  0] [ 0  1  0  0  0]
[-1  0  1 -1  0]
[ 0 -1  0  1  0]
[ 0  1 -1  0 -2]
[ 0  0  0  1  0]
[3, 2, 1] [ 0  1  0  0 -2]
[-1  0 -1  0  2]
[ 0  1  0 -1  0]
[ 0  0  1  0  0]
[ 1 -1  0  0  0] [ 0  1  0  0  0]
[-1  0 -1  0  0]
[ 0  1  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0]
[3, 2, 0, 3] [ 0  1  0  0  0]
[-1  0  1  0 -2]
[ 0 -1  0  1  2]
[ 0  0 -1  0  0]
[ 0  1 -1  0  0] [ 0  1  0  0  0]
[-1  0  1  0  0]
[ 0 -1  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0]
[3, 2, 0] [ 0  1  0  0  0]
[-1  0  1  0 -2]
[ 0 -1  0 -1  2]
[ 0  0  1  0  0]
[ 0  1 -1  0  0] [ 0  1  0  0  0]
[-1  0  1  0  0]
[ 0 -1  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0]
[3, 2, 3] [ 0 -1  0  0  0]
[ 1  0  1  0 -2]
[ 0 -1  0  1  2]
[ 0  0 -1  0  0]
[ 0  1 -1  0  0] [ 0 -1  0  0  0]
[ 1  0  1  0  0]
[ 0 -1  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0]
[3, 2] [ 0 -1  0  0  0]
[ 1  0  1  0 -2]
[ 0 -1  0 -1  2]
[ 0  0  1  0  0]
[ 0  1 -1  0  0] [ 0 -1  0  0  0]
[ 1  0  1  0  0]
[ 0 -1  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0]
[3, 1, 0, 1] [ 0  1  1  0  0]
[-1  0  0  0  0]
[-1  0  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0] [ 0  1  1  0  0]
[-1  0  0  0  0]
[-1  0  0  1  0]
[ 0  0 -1  0 -2]
[ 0  0  0  1  0]
[3, 1, 0] [ 0 -1  1  0  0]
[ 1  0  0  0  0]
[-1  0  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0] [ 0 -1  1  0  0]
[ 1  0  0  0  0]
[-1  0  0  1  0]
[ 0  0 -1  0 -2]
[ 0  0  0  1  0]
[3, 1] [ 0  1 -1  0  0]
[-1  0  1  0  0]
[ 1 -1  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0] [ 0  1 -1  0  0]
[-1  0  1  0  0]
[ 1 -1  0  1  0]
[ 0  0 -1  0 -2]
[ 0  0  0  1  0]
[3, 0] [ 0  1  0  0  0]
[-1  0 -1  0  0]
[ 0  1  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0] [ 0  1  0  0  0]
[-1  0 -1  0  0]
[ 0  1  0  1  0]
[ 0  0 -1  0 -2]
[ 0  0  0  1  0]
[3] [ 0 -1  0  0  0]
[ 1  0 -1  0  0]
[ 0  1  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0] [ 0 -1  0  0  0]
[ 1  0 -1  0  0]
[ 0  1  0  1  0]
[ 0  0 -1  0 -2]
[ 0  0  0  1  0]
[2, 1, 0, 2, 1, 2] [ 0  1  0  1  0]
[-1  0  1  0  0]
[ 0 -1  0  0  0]
[-1  0  0  0 -2]
[ 0  0  0  1  0] [ 0  1  0  1  0]
[-1  0  1  0  0]
[ 0 -1  0  0  0]
[-1  0  0  0  2]
[ 0  0  0 -1  0]
[2, 1, 0, 2, 1] [ 0  1  0  1  0]
[-1  0 -1  0  0]
[ 0  1  0  0  0]
[-1  0  0  0 -2]
[ 0  0  0  1  0] [ 0  1  0  1  0]
[-1  0 -1  0  0]
[ 0  1  0  0  0]
[-1  0  0  0  2]
[ 0  0  0 -1  0]
[2, 1, 0, 2] [ 0 -1  0  1  0]
[ 1  0  1  0  0]
[ 0 -1  0  0  0]
[-1  0  0  0 -2]
[ 0  0  0  1  0] [ 0 -1  0  1  0]
[ 1  0  1  0  0]
[ 0 -1  0  0  0]
[-1  0  0  0  2]
[ 0  0  0 -1  0]
[2, 1, 0, 1] [ 0  1 -1  1  0]
[-1  0  1  0  0]
[ 1 -1  0  0  0]
[-1  0  0  0 -2]
[ 0  0  0  1  0] [ 0  1 -1  1  0]
[-1  0  1  0  0]
[ 1 -1  0  0  0]
[-1  0  0  0  2]
[ 0  0  0 -1  0]
[2, 1, 0] [ 0 -1  0  1  0]
[ 1  0 -1  0  0]
[ 0  1  0  0  0]
[-1  0  0  0 -2]
[ 0  0  0  1  0] [ 0 -1  0  1  0]
[ 1  0 -1  0  0]
[ 0  1  0  0  0]
[-1  0  0  0  2]
[ 0  0  0 -1  0]
[2, 1, 2] [ 0  1  0 -1  0]
[-1  0  1  1  0]
[ 0 -1  0  0  0]
[ 1 -1  0  0 -2]
[ 0  0  0  1  0] [ 0  1  0 -1  0]
[-1  0  1  1  0]
[ 0 -1  0  0  0]
[ 1 -1  0  0  2]
[ 0  0  0 -1  0]
[2, 1] [ 0  1  0 -1  0]
[-1  0 -1  1  0]
[ 0  1  0  0  0]
[ 1 -1  0  0 -2]
[ 0  0  0  1  0] [ 0  1  0 -1  0]
[-1  0 -1  1  0]
[ 0  1  0  0  0]
[ 1 -1  0  0  2]
[ 0  0  0 -1  0]
[2, 0] [ 0  1  0  0  0]
[-1  0  1 -1  0]
[ 0 -1  0  1  0]
[ 0  1 -1  0 -2]
[ 0  0  0  1  0] [ 0  1  0  0  0]
[-1  0  1 -1  0]
[ 0 -1  0  1  0]
[ 0  1 -1  0  2]
[ 0  0  0 -1  0]
[2] [ 0 -1  0  0  0]
[ 1  0  1 -1  0]
[ 0 -1  0  1  0]
[ 0  1 -1  0 -2]
[ 0  0  0  1  0] [ 0 -1  0  0  0]
[ 1  0  1 -1  0]
[ 0 -1  0  1  0]
[ 0  1 -1  0  2]
[ 0  0  0 -1  0]
[1, 0, 1] [ 0  1  1  0  0]
[-1  0  0  0  0]
[-1  0  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0] [ 0  1  1  0  0]
[-1  0  0  0  0]
[-1  0  0 -1  0]
[ 0  0  1  0  2]
[ 0  0  0 -1  0]
[1, 0] [ 0 -1  1  0  0]
[ 1  0  0  0  0]
[-1  0  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0] [ 0 -1  1  0  0]
[ 1  0  0  0  0]
[-1  0  0 -1  0]
[ 0  0  1  0  2]
[ 0  0  0 -1  0]
[1] [ 0  1 -1  0  0]
[-1  0  1  0  0]
[ 1 -1  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0] [ 0  1 -1  0  0]
[-1  0  1  0  0]
[ 1 -1  0 -1  0]
[ 0  0  1  0  2]
[ 0  0  0 -1  0]
[0] [ 0  1  0  0  0]
[-1  0 -1  0  0]
[ 0  1  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0] [ 0  1  0  0  0]
[-1  0 -1  0  0]
[ 0  1  0 -1  0]
[ 0  0  1  0  2]
[ 0  0  0 -1  0]
[] [ 0 -1  0  0  0]
[ 1  0 -1  0  0]
[ 0  1  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0] [ 0 -1  0  0  0]
[ 1  0 -1  0  0]
[ 0  1  0 -1  0]
[ 0  0  1  0  2]
[ 0  0  0 -1  0]
sage: A=CartanMatrix(['C',5])
....: c=[4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     B1=mutate(B(A,c),k)
....:     B2=mutate(B(A,c),k+[c[0]])
....:     print(v,"\n",B1,"\n",B2)
....: 
[3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 
 [ 0  1  0  0  2]
[-1  0  1  0  0]
[ 0 -1  0  1  0]
[ 0  0 -1  0  0]
[-1  0  0  0  0] 
 [ 0  1  0  0 -2]
[-1  0  1  0  2]
[ 0 -1  0  1  0]
[ 0  0 -1  0  0]
[ 1 -1  0  0  0]
[3, 2, 1, 0, 3, 2, 1, 3, 2] 
 [ 0  1  0  0  2]
[-1  0  1  0  0]
[ 0 -1  0 -1  0]
[ 0  0  1  0  0]
[-1  0  0  0  0] 
 [ 0  1  0  0 -2]
[-1  0  1  0  2]
[ 0 -1  0 -1  0]
[ 0  0  1  0  0]
[ 1 -1  0  0  0]
[3, 2, 1, 0, 3, 2, 1, 3] 
 [ 0  1  0  0  2]
[-1  0 -1  0  0]
[ 0  1  0  1  0]
[ 0  0 -1  0  0]
[-1  0  0  0  0] 
 [ 0  1  0  0 -2]
[-1  0 -1  0  2]
[ 0  1  0  1  0]
[ 0  0 -1  0  0]
[ 1 -1  0  0  0]
[3, 2, 1, 0, 3, 2, 1, 2] 
 [ 0  1  0  0  2]
[-1  0  1 -1  0]
[ 0 -1  0  1  0]
[ 0  1 -1  0  0]
[-1  0  0  0  0] 
 [ 0  1  0  0 -2]
[-1  0  1 -1  2]
[ 0 -1  0  1  0]
[ 0  1 -1  0  0]
[ 1 -1  0  0  0]
[3, 2, 1, 0, 3, 2, 1] 
 [ 0  1  0  0  2]
[-1  0 -1  0  0]
[ 0  1  0 -1  0]
[ 0  0  1  0  0]
[-1  0  0  0  0] 
 [ 0  1  0  0 -2]
[-1  0 -1  0  2]
[ 0  1  0 -1  0]
[ 0  0  1  0  0]
[ 1 -1  0  0  0]
[3, 2, 1, 0, 3, 2, 3] 
 [ 0 -1  0  0  2]
[ 1  0  1  0  0]
[ 0 -1  0  1  0]
[ 0  0 -1  0  0]
[-1  0  0  0  0] 
 [ 0 -1  0  0  0]
[ 1  0  1  0 -2]
[ 0 -1  0  1  2]
[ 0  0 -1  0  0]
[ 0  1 -1  0  0]
[3, 2, 1, 0, 3, 2] 
 [ 0 -1  0  0  2]
[ 1  0  1  0  0]
[ 0 -1  0 -1  0]
[ 0  0  1  0  0]
[-1  0  0  0  0] 
 [ 0 -1  0  0  0]
[ 1  0  1  0 -2]
[ 0 -1  0 -1  2]
[ 0  0  1  0  0]
[ 0  1 -1  0  0]
[3, 2, 1, 0, 3, 1] 
 [ 0  1 -1  0  2]
[-1  0  1  0  0]
[ 1 -1  0  1  0]
[ 0  0 -1  0  0]
[-1  0  0  0  0] 
 [ 0  1 -1  0  0]
[-1  0  1  0  0]
[ 1 -1  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0]
[3, 2, 1, 0, 3] 
 [ 0 -1  0  0  2]
[ 1  0 -1  0  0]
[ 0  1  0  1  0]
[ 0  0 -1  0  0]
[-1  0  0  0  0] 
 [ 0 -1  0  0  0]
[ 1  0 -1  0  0]
[ 0  1  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0]
[3, 2, 1, 0, 2, 1, 2] 
 [ 0  1  0 -1  2]
[-1  0  1  1  0]
[ 0 -1  0  0  0]
[ 1 -1  0  0  0]
[-1  0  0  0  0] 
 [ 0  1  0 -1  0]
[-1  0  1  1  0]
[ 0 -1  0  0  0]
[ 1 -1  0  0 -2]
[ 0  0  0  1  0]
[3, 2, 1, 0, 2, 1] 
 [ 0  1  0 -1  2]
[-1  0 -1  1  0]
[ 0  1  0  0  0]
[ 1 -1  0  0  0]
[-1  0  0  0  0] 
 [ 0  1  0 -1  0]
[-1  0 -1  1  0]
[ 0  1  0  0  0]
[ 1 -1  0  0 -2]
[ 0  0  0  1  0]
[3, 2, 1, 0, 2] 
 [ 0 -1  0  0  2]
[ 1  0  1 -1  0]
[ 0 -1  0  1  0]
[ 0  1 -1  0  0]
[-1  0  0  0  0] 
 [ 0 -1  0  0  0]
[ 1  0  1 -1  0]
[ 0 -1  0  1  0]
[ 0  1 -1  0 -2]
[ 0  0  0  1  0]
[3, 2, 1, 0, 1] 
 [ 0  1 -1  0  2]
[-1  0  1  0  0]
[ 1 -1  0 -1  0]
[ 0  0  1  0  0]
[-1  0  0  0  0] 
 [ 0  1 -1  0  0]
[-1  0  1  0  0]
[ 1 -1  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0]
[3, 2, 1, 0] 
 [ 0 -1  0  0  2]
[ 1  0 -1  0  0]
[ 0  1  0 -1  0]
[ 0  0  1  0  0]
[-1  0  0  0  0] 
 [ 0 -1  0  0  0]
[ 1  0 -1  0  0]
[ 0  1  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0]
[3, 2, 1, 3, 2, 3] 
 [ 0  1  0  0 -2]
[-1  0  1  0  2]
[ 0 -1  0  1  0]
[ 0  0 -1  0  0]
[ 1 -1  0  0  0] 
 [ 0  1  0  0  0]
[-1  0  1  0 -2]
[ 0 -1  0  1  2]
[ 0  0 -1  0  0]
[ 0  1 -1  0  0]
[3, 2, 1, 3, 2] 
 [ 0  1  0  0 -2]
[-1  0  1  0  2]
[ 0 -1  0 -1  0]
[ 0  0  1  0  0]
[ 1 -1  0  0  0] 
 [ 0  1  0  0  0]
[-1  0  1  0 -2]
[ 0 -1  0 -1  2]
[ 0  0  1  0  0]
[ 0  1 -1  0  0]
[3, 2, 1, 3] 
 [ 0  1  0  0 -2]
[-1  0 -1  0  2]
[ 0  1  0  1  0]
[ 0  0 -1  0  0]
[ 1 -1  0  0  0] 
 [ 0  1  0  0  0]
[-1  0 -1  0  0]
[ 0  1  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0]
[3, 2, 1, 2] 
 [ 0  1  0  0 -2]
[-1  0  1 -1  2]
[ 0 -1  0  1  0]
[ 0  1 -1  0  0]
[ 1 -1  0  0  0] 
 [ 0  1  0  0  0]
[-1  0  1 -1  0]
[ 0 -1  0  1  0]
[ 0  1 -1  0 -2]
[ 0  0  0  1  0]
[3, 2, 1] 
 [ 0  1  0  0 -2]
[-1  0 -1  0  2]
[ 0  1  0 -1  0]
[ 0  0  1  0  0]
[ 1 -1  0  0  0] 
 [ 0  1  0  0  0]
[-1  0 -1  0  0]
[ 0  1  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0]
[3, 2, 0, 3] 
 [ 0  1  0  0  0]
[-1  0  1  0 -2]
[ 0 -1  0  1  2]
[ 0  0 -1  0  0]
[ 0  1 -1  0  0] 
 [ 0  1  0  0  0]
[-1  0  1  0  0]
[ 0 -1  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0]
[3, 2, 0] 
 [ 0  1  0  0  0]
[-1  0  1  0 -2]
[ 0 -1  0 -1  2]
[ 0  0  1  0  0]
[ 0  1 -1  0  0] 
 [ 0  1  0  0  0]
[-1  0  1  0  0]
[ 0 -1  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0]
[3, 2, 3] 
 [ 0 -1  0  0  0]
[ 1  0  1  0 -2]
[ 0 -1  0  1  2]
[ 0  0 -1  0  0]
[ 0  1 -1  0  0] 
 [ 0 -1  0  0  0]
[ 1  0  1  0  0]
[ 0 -1  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0]
[3, 2] 
 [ 0 -1  0  0  0]
[ 1  0  1  0 -2]
[ 0 -1  0 -1  2]
[ 0  0  1  0  0]
[ 0  1 -1  0  0] 
 [ 0 -1  0  0  0]
[ 1  0  1  0  0]
[ 0 -1  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0]
[3, 1, 0, 1] 
 [ 0  1  1  0  0]
[-1  0  0  0  0]
[-1  0  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0] 
 [ 0  1  1  0  0]
[-1  0  0  0  0]
[-1  0  0  1  0]
[ 0  0 -1  0 -2]
[ 0  0  0  1  0]
[3, 1, 0] 
 [ 0 -1  1  0  0]
[ 1  0  0  0  0]
[-1  0  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0] 
 [ 0 -1  1  0  0]
[ 1  0  0  0  0]
[-1  0  0  1  0]
[ 0  0 -1  0 -2]
[ 0  0  0  1  0]
[3, 1] 
 [ 0  1 -1  0  0]
[-1  0  1  0  0]
[ 1 -1  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0] 
 [ 0  1 -1  0  0]
[-1  0  1  0  0]
[ 1 -1  0  1  0]
[ 0  0 -1  0 -2]
[ 0  0  0  1  0]
[3, 0] 
 [ 0  1  0  0  0]
[-1  0 -1  0  0]
[ 0  1  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0] 
 [ 0  1  0  0  0]
[-1  0 -1  0  0]
[ 0  1  0  1  0]
[ 0  0 -1  0 -2]
[ 0  0  0  1  0]
[3] 
 [ 0 -1  0  0  0]
[ 1  0 -1  0  0]
[ 0  1  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0] 
 [ 0 -1  0  0  0]
[ 1  0 -1  0  0]
[ 0  1  0  1  0]
[ 0  0 -1  0 -2]
[ 0  0  0  1  0]
[2, 1, 0, 2, 1, 2] 
 [ 0  1  0  1  0]
[-1  0  1  0  0]
[ 0 -1  0  0  0]
[-1  0  0  0 -2]
[ 0  0  0  1  0] 
 [ 0  1  0  1  0]
[-1  0  1  0  0]
[ 0 -1  0  0  0]
[-1  0  0  0  2]
[ 0  0  0 -1  0]
[2, 1, 0, 2, 1] 
 [ 0  1  0  1  0]
[-1  0 -1  0  0]
[ 0  1  0  0  0]
[-1  0  0  0 -2]
[ 0  0  0  1  0] 
 [ 0  1  0  1  0]
[-1  0 -1  0  0]
[ 0  1  0  0  0]
[-1  0  0  0  2]
[ 0  0  0 -1  0]
[2, 1, 0, 2] 
 [ 0 -1  0  1  0]
[ 1  0  1  0  0]
[ 0 -1  0  0  0]
[-1  0  0  0 -2]
[ 0  0  0  1  0] 
 [ 0 -1  0  1  0]
[ 1  0  1  0  0]
[ 0 -1  0  0  0]
[-1  0  0  0  2]
[ 0  0  0 -1  0]
[2, 1, 0, 1] 
 [ 0  1 -1  1  0]
[-1  0  1  0  0]
[ 1 -1  0  0  0]
[-1  0  0  0 -2]
[ 0  0  0  1  0] 
 [ 0  1 -1  1  0]
[-1  0  1  0  0]
[ 1 -1  0  0  0]
[-1  0  0  0  2]
[ 0  0  0 -1  0]
[2, 1, 0] 
 [ 0 -1  0  1  0]
[ 1  0 -1  0  0]
[ 0  1  0  0  0]
[-1  0  0  0 -2]
[ 0  0  0  1  0] 
 [ 0 -1  0  1  0]
[ 1  0 -1  0  0]
[ 0  1  0  0  0]
[-1  0  0  0  2]
[ 0  0  0 -1  0]
[2, 1, 2] 
 [ 0  1  0 -1  0]
[-1  0  1  1  0]
[ 0 -1  0  0  0]
[ 1 -1  0  0 -2]
[ 0  0  0  1  0] 
 [ 0  1  0 -1  0]
[-1  0  1  1  0]
[ 0 -1  0  0  0]
[ 1 -1  0  0  2]
[ 0  0  0 -1  0]
[2, 1] 
 [ 0  1  0 -1  0]
[-1  0 -1  1  0]
[ 0  1  0  0  0]
[ 1 -1  0  0 -2]
[ 0  0  0  1  0] 
 [ 0  1  0 -1  0]
[-1  0 -1  1  0]
[ 0  1  0  0  0]
[ 1 -1  0  0  2]
[ 0  0  0 -1  0]
[2, 0] 
 [ 0  1  0  0  0]
[-1  0  1 -1  0]
[ 0 -1  0  1  0]
[ 0  1 -1  0 -2]
[ 0  0  0  1  0] 
 [ 0  1  0  0  0]
[-1  0  1 -1  0]
[ 0 -1  0  1  0]
[ 0  1 -1  0  2]
[ 0  0  0 -1  0]
[2] 
 [ 0 -1  0  0  0]
[ 1  0  1 -1  0]
[ 0 -1  0  1  0]
[ 0  1 -1  0 -2]
[ 0  0  0  1  0] 
 [ 0 -1  0  0  0]
[ 1  0  1 -1  0]
[ 0 -1  0  1  0]
[ 0  1 -1  0  2]
[ 0  0  0 -1  0]
[1, 0, 1] 
 [ 0  1  1  0  0]
[-1  0  0  0  0]
[-1  0  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0] 
 [ 0  1  1  0  0]
[-1  0  0  0  0]
[-1  0  0 -1  0]
[ 0  0  1  0  2]
[ 0  0  0 -1  0]
[1, 0] 
 [ 0 -1  1  0  0]
[ 1  0  0  0  0]
[-1  0  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0] 
 [ 0 -1  1  0  0]
[ 1  0  0  0  0]
[-1  0  0 -1  0]
[ 0  0  1  0  2]
[ 0  0  0 -1  0]
[1] 
 [ 0  1 -1  0  0]
[-1  0  1  0  0]
[ 1 -1  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0] 
 [ 0  1 -1  0  0]
[-1  0  1  0  0]
[ 1 -1  0 -1  0]
[ 0  0  1  0  2]
[ 0  0  0 -1  0]
[0] 
 [ 0  1  0  0  0]
[-1  0 -1  0  0]
[ 0  1  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0] 
 [ 0  1  0  0  0]
[-1  0 -1  0  0]
[ 0  1  0 -1  0]
[ 0  0  1  0  2]
[ 0  0  0 -1  0]
[] 
 [ 0 -1  0  0  0]
[ 1  0 -1  0  0]
[ 0  1  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0] 
 [ 0 -1  0  0  0]
[ 1  0 -1  0  0]
[ 0  1  0 -1  0]
[ 0  0  1  0  2]
[ 0  0  0 -1  0]
sage: A=CartanMatrix(['C',5])
....: c=[4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     B1=mutate(B(A,c),k)
....:     B2=mutate(B(A,c),k+[c[0]])
....:     print(v,"\n",B1,"\n",B2,"\n")
....: 
[3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 
 [ 0  1  0  0  2]
[-1  0  1  0  0]
[ 0 -1  0  1  0]
[ 0  0 -1  0  0]
[-1  0  0  0  0] 
 [ 0  1  0  0 -2]
[-1  0  1  0  2]
[ 0 -1  0  1  0]
[ 0  0 -1  0  0]
[ 1 -1  0  0  0] 

[3, 2, 1, 0, 3, 2, 1, 3, 2] 
 [ 0  1  0  0  2]
[-1  0  1  0  0]
[ 0 -1  0 -1  0]
[ 0  0  1  0  0]
[-1  0  0  0  0] 
 [ 0  1  0  0 -2]
[-1  0  1  0  2]
[ 0 -1  0 -1  0]
[ 0  0  1  0  0]
[ 1 -1  0  0  0] 

[3, 2, 1, 0, 3, 2, 1, 3] 
 [ 0  1  0  0  2]
[-1  0 -1  0  0]
[ 0  1  0  1  0]
[ 0  0 -1  0  0]
[-1  0  0  0  0] 
 [ 0  1  0  0 -2]
[-1  0 -1  0  2]
[ 0  1  0  1  0]
[ 0  0 -1  0  0]
[ 1 -1  0  0  0] 

[3, 2, 1, 0, 3, 2, 1, 2] 
 [ 0  1  0  0  2]
[-1  0  1 -1  0]
[ 0 -1  0  1  0]
[ 0  1 -1  0  0]
[-1  0  0  0  0] 
 [ 0  1  0  0 -2]
[-1  0  1 -1  2]
[ 0 -1  0  1  0]
[ 0  1 -1  0  0]
[ 1 -1  0  0  0] 

[3, 2, 1, 0, 3, 2, 1] 
 [ 0  1  0  0  2]
[-1  0 -1  0  0]
[ 0  1  0 -1  0]
[ 0  0  1  0  0]
[-1  0  0  0  0] 
 [ 0  1  0  0 -2]
[-1  0 -1  0  2]
[ 0  1  0 -1  0]
[ 0  0  1  0  0]
[ 1 -1  0  0  0] 

[3, 2, 1, 0, 3, 2, 3] 
 [ 0 -1  0  0  2]
[ 1  0  1  0  0]
[ 0 -1  0  1  0]
[ 0  0 -1  0  0]
[-1  0  0  0  0] 
 [ 0 -1  0  0  0]
[ 1  0  1  0 -2]
[ 0 -1  0  1  2]
[ 0  0 -1  0  0]
[ 0  1 -1  0  0] 

[3, 2, 1, 0, 3, 2] 
 [ 0 -1  0  0  2]
[ 1  0  1  0  0]
[ 0 -1  0 -1  0]
[ 0  0  1  0  0]
[-1  0  0  0  0] 
 [ 0 -1  0  0  0]
[ 1  0  1  0 -2]
[ 0 -1  0 -1  2]
[ 0  0  1  0  0]
[ 0  1 -1  0  0] 

[3, 2, 1, 0, 3, 1] 
 [ 0  1 -1  0  2]
[-1  0  1  0  0]
[ 1 -1  0  1  0]
[ 0  0 -1  0  0]
[-1  0  0  0  0] 
 [ 0  1 -1  0  0]
[-1  0  1  0  0]
[ 1 -1  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0] 

[3, 2, 1, 0, 3] 
 [ 0 -1  0  0  2]
[ 1  0 -1  0  0]
[ 0  1  0  1  0]
[ 0  0 -1  0  0]
[-1  0  0  0  0] 
 [ 0 -1  0  0  0]
[ 1  0 -1  0  0]
[ 0  1  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0] 

[3, 2, 1, 0, 2, 1, 2] 
 [ 0  1  0 -1  2]
[-1  0  1  1  0]
[ 0 -1  0  0  0]
[ 1 -1  0  0  0]
[-1  0  0  0  0] 
 [ 0  1  0 -1  0]
[-1  0  1  1  0]
[ 0 -1  0  0  0]
[ 1 -1  0  0 -2]
[ 0  0  0  1  0] 

[3, 2, 1, 0, 2, 1] 
 [ 0  1  0 -1  2]
[-1  0 -1  1  0]
[ 0  1  0  0  0]
[ 1 -1  0  0  0]
[-1  0  0  0  0] 
 [ 0  1  0 -1  0]
[-1  0 -1  1  0]
[ 0  1  0  0  0]
[ 1 -1  0  0 -2]
[ 0  0  0  1  0] 

[3, 2, 1, 0, 2] 
 [ 0 -1  0  0  2]
[ 1  0  1 -1  0]
[ 0 -1  0  1  0]
[ 0  1 -1  0  0]
[-1  0  0  0  0] 
 [ 0 -1  0  0  0]
[ 1  0  1 -1  0]
[ 0 -1  0  1  0]
[ 0  1 -1  0 -2]
[ 0  0  0  1  0] 

[3, 2, 1, 0, 1] 
 [ 0  1 -1  0  2]
[-1  0  1  0  0]
[ 1 -1  0 -1  0]
[ 0  0  1  0  0]
[-1  0  0  0  0] 
 [ 0  1 -1  0  0]
[-1  0  1  0  0]
[ 1 -1  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0] 

[3, 2, 1, 0] 
 [ 0 -1  0  0  2]
[ 1  0 -1  0  0]
[ 0  1  0 -1  0]
[ 0  0  1  0  0]
[-1  0  0  0  0] 
 [ 0 -1  0  0  0]
[ 1  0 -1  0  0]
[ 0  1  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0] 

[3, 2, 1, 3, 2, 3] 
 [ 0  1  0  0 -2]
[-1  0  1  0  2]
[ 0 -1  0  1  0]
[ 0  0 -1  0  0]
[ 1 -1  0  0  0] 
 [ 0  1  0  0  0]
[-1  0  1  0 -2]
[ 0 -1  0  1  2]
[ 0  0 -1  0  0]
[ 0  1 -1  0  0] 

[3, 2, 1, 3, 2] 
 [ 0  1  0  0 -2]
[-1  0  1  0  2]
[ 0 -1  0 -1  0]
[ 0  0  1  0  0]
[ 1 -1  0  0  0] 
 [ 0  1  0  0  0]
[-1  0  1  0 -2]
[ 0 -1  0 -1  2]
[ 0  0  1  0  0]
[ 0  1 -1  0  0] 

[3, 2, 1, 3] 
 [ 0  1  0  0 -2]
[-1  0 -1  0  2]
[ 0  1  0  1  0]
[ 0  0 -1  0  0]
[ 1 -1  0  0  0] 
 [ 0  1  0  0  0]
[-1  0 -1  0  0]
[ 0  1  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0] 

[3, 2, 1, 2] 
 [ 0  1  0  0 -2]
[-1  0  1 -1  2]
[ 0 -1  0  1  0]
[ 0  1 -1  0  0]
[ 1 -1  0  0  0] 
 [ 0  1  0  0  0]
[-1  0  1 -1  0]
[ 0 -1  0  1  0]
[ 0  1 -1  0 -2]
[ 0  0  0  1  0] 

[3, 2, 1] 
 [ 0  1  0  0 -2]
[-1  0 -1  0  2]
[ 0  1  0 -1  0]
[ 0  0  1  0  0]
[ 1 -1  0  0  0] 
 [ 0  1  0  0  0]
[-1  0 -1  0  0]
[ 0  1  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0] 

[3, 2, 0, 3] 
 [ 0  1  0  0  0]
[-1  0  1  0 -2]
[ 0 -1  0  1  2]
[ 0  0 -1  0  0]
[ 0  1 -1  0  0] 
 [ 0  1  0  0  0]
[-1  0  1  0  0]
[ 0 -1  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0] 

[3, 2, 0] 
 [ 0  1  0  0  0]
[-1  0  1  0 -2]
[ 0 -1  0 -1  2]
[ 0  0  1  0  0]
[ 0  1 -1  0  0] 
 [ 0  1  0  0  0]
[-1  0  1  0  0]
[ 0 -1  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0] 

[3, 2, 3] 
 [ 0 -1  0  0  0]
[ 1  0  1  0 -2]
[ 0 -1  0  1  2]
[ 0  0 -1  0  0]
[ 0  1 -1  0  0] 
 [ 0 -1  0  0  0]
[ 1  0  1  0  0]
[ 0 -1  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0] 

[3, 2] 
 [ 0 -1  0  0  0]
[ 1  0  1  0 -2]
[ 0 -1  0 -1  2]
[ 0  0  1  0  0]
[ 0  1 -1  0  0] 
 [ 0 -1  0  0  0]
[ 1  0  1  0  0]
[ 0 -1  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0] 

[3, 1, 0, 1] 
 [ 0  1  1  0  0]
[-1  0  0  0  0]
[-1  0  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0] 
 [ 0  1  1  0  0]
[-1  0  0  0  0]
[-1  0  0  1  0]
[ 0  0 -1  0 -2]
[ 0  0  0  1  0] 

[3, 1, 0] 
 [ 0 -1  1  0  0]
[ 1  0  0  0  0]
[-1  0  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0] 
 [ 0 -1  1  0  0]
[ 1  0  0  0  0]
[-1  0  0  1  0]
[ 0  0 -1  0 -2]
[ 0  0  0  1  0] 

[3, 1] 
 [ 0  1 -1  0  0]
[-1  0  1  0  0]
[ 1 -1  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0] 
 [ 0  1 -1  0  0]
[-1  0  1  0  0]
[ 1 -1  0  1  0]
[ 0  0 -1  0 -2]
[ 0  0  0  1  0] 

[3, 0] 
 [ 0  1  0  0  0]
[-1  0 -1  0  0]
[ 0  1  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0] 
 [ 0  1  0  0  0]
[-1  0 -1  0  0]
[ 0  1  0  1  0]
[ 0  0 -1  0 -2]
[ 0  0  0  1  0] 

[3] 
 [ 0 -1  0  0  0]
[ 1  0 -1  0  0]
[ 0  1  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0] 
 [ 0 -1  0  0  0]
[ 1  0 -1  0  0]
[ 0  1  0  1  0]
[ 0  0 -1  0 -2]
[ 0  0  0  1  0] 

[2, 1, 0, 2, 1, 2] 
 [ 0  1  0  1  0]
[-1  0  1  0  0]
[ 0 -1  0  0  0]
[-1  0  0  0 -2]
[ 0  0  0  1  0] 
 [ 0  1  0  1  0]
[-1  0  1  0  0]
[ 0 -1  0  0  0]
[-1  0  0  0  2]
[ 0  0  0 -1  0] 

[2, 1, 0, 2, 1] 
 [ 0  1  0  1  0]
[-1  0 -1  0  0]
[ 0  1  0  0  0]
[-1  0  0  0 -2]
[ 0  0  0  1  0] 
 [ 0  1  0  1  0]
[-1  0 -1  0  0]
[ 0  1  0  0  0]
[-1  0  0  0  2]
[ 0  0  0 -1  0] 

[2, 1, 0, 2] 
 [ 0 -1  0  1  0]
[ 1  0  1  0  0]
[ 0 -1  0  0  0]
[-1  0  0  0 -2]
[ 0  0  0  1  0] 
 [ 0 -1  0  1  0]
[ 1  0  1  0  0]
[ 0 -1  0  0  0]
[-1  0  0  0  2]
[ 0  0  0 -1  0] 

[2, 1, 0, 1] 
 [ 0  1 -1  1  0]
[-1  0  1  0  0]
[ 1 -1  0  0  0]
[-1  0  0  0 -2]
[ 0  0  0  1  0] 
 [ 0  1 -1  1  0]
[-1  0  1  0  0]
[ 1 -1  0  0  0]
[-1  0  0  0  2]
[ 0  0  0 -1  0] 

[2, 1, 0] 
 [ 0 -1  0  1  0]
[ 1  0 -1  0  0]
[ 0  1  0  0  0]
[-1  0  0  0 -2]
[ 0  0  0  1  0] 
 [ 0 -1  0  1  0]
[ 1  0 -1  0  0]
[ 0  1  0  0  0]
[-1  0  0  0  2]
[ 0  0  0 -1  0] 

[2, 1, 2] 
 [ 0  1  0 -1  0]
[-1  0  1  1  0]
[ 0 -1  0  0  0]
[ 1 -1  0  0 -2]
[ 0  0  0  1  0] 
 [ 0  1  0 -1  0]
[-1  0  1  1  0]
[ 0 -1  0  0  0]
[ 1 -1  0  0  2]
[ 0  0  0 -1  0] 

[2, 1] 
 [ 0  1  0 -1  0]
[-1  0 -1  1  0]
[ 0  1  0  0  0]
[ 1 -1  0  0 -2]
[ 0  0  0  1  0] 
 [ 0  1  0 -1  0]
[-1  0 -1  1  0]
[ 0  1  0  0  0]
[ 1 -1  0  0  2]
[ 0  0  0 -1  0] 

[2, 0] 
 [ 0  1  0  0  0]
[-1  0  1 -1  0]
[ 0 -1  0  1  0]
[ 0  1 -1  0 -2]
[ 0  0  0  1  0] 
 [ 0  1  0  0  0]
[-1  0  1 -1  0]
[ 0 -1  0  1  0]
[ 0  1 -1  0  2]
[ 0  0  0 -1  0] 

[2] 
 [ 0 -1  0  0  0]
[ 1  0  1 -1  0]
[ 0 -1  0  1  0]
[ 0  1 -1  0 -2]
[ 0  0  0  1  0] 
 [ 0 -1  0  0  0]
[ 1  0  1 -1  0]
[ 0 -1  0  1  0]
[ 0  1 -1  0  2]
[ 0  0  0 -1  0] 

[1, 0, 1] 
 [ 0  1  1  0  0]
[-1  0  0  0  0]
[-1  0  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0] 
 [ 0  1  1  0  0]
[-1  0  0  0  0]
[-1  0  0 -1  0]
[ 0  0  1  0  2]
[ 0  0  0 -1  0] 

[1, 0] 
 [ 0 -1  1  0  0]
[ 1  0  0  0  0]
[-1  0  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0] 
 [ 0 -1  1  0  0]
[ 1  0  0  0  0]
[-1  0  0 -1  0]
[ 0  0  1  0  2]
[ 0  0  0 -1  0] 

[1] 
 [ 0  1 -1  0  0]
[-1  0  1  0  0]
[ 1 -1  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0] 
 [ 0  1 -1  0  0]
[-1  0  1  0  0]
[ 1 -1  0 -1  0]
[ 0  0  1  0  2]
[ 0  0  0 -1  0] 

[0] 
 [ 0  1  0  0  0]
[-1  0 -1  0  0]
[ 0  1  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0] 
 [ 0  1  0  0  0]
[-1  0 -1  0  0]
[ 0  1  0 -1  0]
[ 0  0  1  0  2]
[ 0  0  0 -1  0] 

[] 
 [ 0 -1  0  0  0]
[ 1  0 -1  0  0]
[ 0  1  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0] 
 [ 0 -1  0  0  0]
[ 1  0 -1  0  0]
[ 0  1  0 -1  0]
[ 0  0  1  0  2]
[ 0  0  0 -1  0] 

sage: A=CartanMatrix(['C',5])
....: c=[4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     B1=mutate(B(A,c),k)
....:     B2=mutate(B(A,c),k+[c[0]])
....:     print(v,"\n\r",B1,"\n",B2,"\n")
[3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 
 [ 0  1  0  0  2]
[-1  0  1  0  0]
[ 0 -1  0  1  0]
[ 0  0 -1  0  0]
[-1  0  0  0  0] 
 [ 0  1  0  0 -2]
[-1  0  1  0  2]
[ 0 -1  0  1  0]
[ 0  0 -1  0  0]
[ 1 -1  0  0  0] 

[3, 2, 1, 0, 3, 2, 1, 3, 2] 
 [ 0  1  0  0  2]
[-1  0  1  0  0]
[ 0 -1  0 -1  0]
[ 0  0  1  0  0]
[-1  0  0  0  0] 
 [ 0  1  0  0 -2]
[-1  0  1  0  2]
[ 0 -1  0 -1  0]
[ 0  0  1  0  0]
[ 1 -1  0  0  0] 

[3, 2, 1, 0, 3, 2, 1, 3] 
 [ 0  1  0  0  2]
[-1  0 -1  0  0]
[ 0  1  0  1  0]
[ 0  0 -1  0  0]
[-1  0  0  0  0] 
 [ 0  1  0  0 -2]
[-1  0 -1  0  2]
[ 0  1  0  1  0]
[ 0  0 -1  0  0]
[ 1 -1  0  0  0] 

[3, 2, 1, 0, 3, 2, 1, 2] 
 [ 0  1  0  0  2]
[-1  0  1 -1  0]
[ 0 -1  0  1  0]
[ 0  1 -1  0  0]
[-1  0  0  0  0] 
 [ 0  1  0  0 -2]
[-1  0  1 -1  2]
[ 0 -1  0  1  0]
[ 0  1 -1  0  0]
[ 1 -1  0  0  0] 

[3, 2, 1, 0, 3, 2, 1] 
 [ 0  1  0  0  2]
[-1  0 -1  0  0]
[ 0  1  0 -1  0]
[ 0  0  1  0  0]
[-1  0  0  0  0] 
 [ 0  1  0  0 -2]
[-1  0 -1  0  2]
[ 0  1  0 -1  0]
[ 0  0  1  0  0]
[ 1 -1  0  0  0] 

[3, 2, 1, 0, 3, 2, 3] 
 [ 0 -1  0  0  2]
[ 1  0  1  0  0]
[ 0 -1  0  1  0]
[ 0  0 -1  0  0]
[-1  0  0  0  0] 
 [ 0 -1  0  0  0]
[ 1  0  1  0 -2]
[ 0 -1  0  1  2]
[ 0  0 -1  0  0]
[ 0  1 -1  0  0] 

[3, 2, 1, 0, 3, 2] 
 [ 0 -1  0  0  2]
[ 1  0  1  0  0]
[ 0 -1  0 -1  0]
[ 0  0  1  0  0]
[-1  0  0  0  0] 
 [ 0 -1  0  0  0]
[ 1  0  1  0 -2]
[ 0 -1  0 -1  2]
[ 0  0  1  0  0]
[ 0  1 -1  0  0] 

[3, 2, 1, 0, 3, 1] 
 [ 0  1 -1  0  2]
[-1  0  1  0  0]
[ 1 -1  0  1  0]
[ 0  0 -1  0  0]
[-1  0  0  0  0] 
 [ 0  1 -1  0  0]
[-1  0  1  0  0]
[ 1 -1  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0] 

[3, 2, 1, 0, 3] 
 [ 0 -1  0  0  2]
[ 1  0 -1  0  0]
[ 0  1  0  1  0]
[ 0  0 -1  0  0]
[-1  0  0  0  0] 
 [ 0 -1  0  0  0]
[ 1  0 -1  0  0]
[ 0  1  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0] 

[3, 2, 1, 0, 2, 1, 2] 
 [ 0  1  0 -1  2]
[-1  0  1  1  0]
[ 0 -1  0  0  0]
[ 1 -1  0  0  0]
[-1  0  0  0  0] 
 [ 0  1  0 -1  0]
[-1  0  1  1  0]
[ 0 -1  0  0  0]
[ 1 -1  0  0 -2]
[ 0  0  0  1  0] 

[3, 2, 1, 0, 2, 1] 
 [ 0  1  0 -1  2]
[-1  0 -1  1  0]
[ 0  1  0  0  0]
[ 1 -1  0  0  0]
[-1  0  0  0  0] 
 [ 0  1  0 -1  0]
[-1  0 -1  1  0]
[ 0  1  0  0  0]
[ 1 -1  0  0 -2]
[ 0  0  0  1  0] 

[3, 2, 1, 0, 2] 
 [ 0 -1  0  0  2]
[ 1  0  1 -1  0]
[ 0 -1  0  1  0]
[ 0  1 -1  0  0]
[-1  0  0  0  0] 
 [ 0 -1  0  0  0]
[ 1  0  1 -1  0]
[ 0 -1  0  1  0]
[ 0  1 -1  0 -2]
[ 0  0  0  1  0] 

[3, 2, 1, 0, 1] 
 [ 0  1 -1  0  2]
[-1  0  1  0  0]
[ 1 -1  0 -1  0]
[ 0  0  1  0  0]
[-1  0  0  0  0] 
 [ 0  1 -1  0  0]
[-1  0  1  0  0]
[ 1 -1  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0] 

[3, 2, 1, 0] 
 [ 0 -1  0  0  2]
[ 1  0 -1  0  0]
[ 0  1  0 -1  0]
[ 0  0  1  0  0]
[-1  0  0  0  0] 
 [ 0 -1  0  0  0]
[ 1  0 -1  0  0]
[ 0  1  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0] 

[3, 2, 1, 3, 2, 3] 
 [ 0  1  0  0 -2]
[-1  0  1  0  2]
[ 0 -1  0  1  0]
[ 0  0 -1  0  0]
[ 1 -1  0  0  0] 
 [ 0  1  0  0  0]
[-1  0  1  0 -2]
[ 0 -1  0  1  2]
[ 0  0 -1  0  0]
[ 0  1 -1  0  0] 

[3, 2, 1, 3, 2] 
 [ 0  1  0  0 -2]
[-1  0  1  0  2]
[ 0 -1  0 -1  0]
[ 0  0  1  0  0]
[ 1 -1  0  0  0] 
 [ 0  1  0  0  0]
[-1  0  1  0 -2]
[ 0 -1  0 -1  2]
[ 0  0  1  0  0]
[ 0  1 -1  0  0] 

[3, 2, 1, 3] 
 [ 0  1  0  0 -2]
[-1  0 -1  0  2]
[ 0  1  0  1  0]
[ 0  0 -1  0  0]
[ 1 -1  0  0  0] 
 [ 0  1  0  0  0]
[-1  0 -1  0  0]
[ 0  1  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0] 

[3, 2, 1, 2] 
 [ 0  1  0  0 -2]
[-1  0  1 -1  2]
[ 0 -1  0  1  0]
[ 0  1 -1  0  0]
[ 1 -1  0  0  0] 
 [ 0  1  0  0  0]
[-1  0  1 -1  0]
[ 0 -1  0  1  0]
[ 0  1 -1  0 -2]
[ 0  0  0  1  0] 

[3, 2, 1] 
 [ 0  1  0  0 -2]
[-1  0 -1  0  2]
[ 0  1  0 -1  0]
[ 0  0  1  0  0]
[ 1 -1  0  0  0] 
 [ 0  1  0  0  0]
[-1  0 -1  0  0]
[ 0  1  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0] 

[3, 2, 0, 3] 
 [ 0  1  0  0  0]
[-1  0  1  0 -2]
[ 0 -1  0  1  2]
[ 0  0 -1  0  0]
[ 0  1 -1  0  0] 
 [ 0  1  0  0  0]
[-1  0  1  0  0]
[ 0 -1  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0] 

[3, 2, 0] 
 [ 0  1  0  0  0]
[-1  0  1  0 -2]
[ 0 -1  0 -1  2]
[ 0  0  1  0  0]
[ 0  1 -1  0  0] 
 [ 0  1  0  0  0]
[-1  0  1  0  0]
[ 0 -1  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0] 

[3, 2, 3] 
 [ 0 -1  0  0  0]
[ 1  0  1  0 -2]
[ 0 -1  0  1  2]
[ 0  0 -1  0  0]
[ 0  1 -1  0  0] 
 [ 0 -1  0  0  0]
[ 1  0  1  0  0]
[ 0 -1  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0] 

[3, 2] 
 [ 0 -1  0  0  0]
[ 1  0  1  0 -2]
[ 0 -1  0 -1  2]
[ 0  0  1  0  0]
[ 0  1 -1  0  0] 
 [ 0 -1  0  0  0]
[ 1  0  1  0  0]
[ 0 -1  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0] 

[3, 1, 0, 1] 
 [ 0  1  1  0  0]
[-1  0  0  0  0]
[-1  0  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0] 
 [ 0  1  1  0  0]
[-1  0  0  0  0]
[-1  0  0  1  0]
[ 0  0 -1  0 -2]
[ 0  0  0  1  0] 

[3, 1, 0] 
 [ 0 -1  1  0  0]
[ 1  0  0  0  0]
[-1  0  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0] 
 [ 0 -1  1  0  0]
[ 1  0  0  0  0]
[-1  0  0  1  0]
[ 0  0 -1  0 -2]
[ 0  0  0  1  0] 

[3, 1] 
 [ 0  1 -1  0  0]
[-1  0  1  0  0]
[ 1 -1  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0] 
 [ 0  1 -1  0  0]
[-1  0  1  0  0]
[ 1 -1  0  1  0]
[ 0  0 -1  0 -2]
[ 0  0  0  1  0] 

[3, 0] 
 [ 0  1  0  0  0]
[-1  0 -1  0  0]
[ 0  1  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0] 
 [ 0  1  0  0  0]
[-1  0 -1  0  0]
[ 0  1  0  1  0]
[ 0  0 -1  0 -2]
[ 0  0  0  1  0] 

[3] 
 [ 0 -1  0  0  0]
[ 1  0 -1  0  0]
[ 0  1  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0] 
 [ 0 -1  0  0  0]
[ 1  0 -1  0  0]
[ 0  1  0  1  0]
[ 0  0 -1  0 -2]
[ 0  0  0  1  0] 

[2, 1, 0, 2, 1, 2] 
 [ 0  1  0  1  0]
[-1  0  1  0  0]
[ 0 -1  0  0  0]
[-1  0  0  0 -2]
[ 0  0  0  1  0] 
 [ 0  1  0  1  0]
[-1  0  1  0  0]
[ 0 -1  0  0  0]
[-1  0  0  0  2]
[ 0  0  0 -1  0] 

[2, 1, 0, 2, 1] 
 [ 0  1  0  1  0]
[-1  0 -1  0  0]
[ 0  1  0  0  0]
[-1  0  0  0 -2]
[ 0  0  0  1  0] 
 [ 0  1  0  1  0]
[-1  0 -1  0  0]
[ 0  1  0  0  0]
[-1  0  0  0  2]
[ 0  0  0 -1  0] 

[2, 1, 0, 2] 
 [ 0 -1  0  1  0]
[ 1  0  1  0  0]
[ 0 -1  0  0  0]
[-1  0  0  0 -2]
[ 0  0  0  1  0] 
 [ 0 -1  0  1  0]
[ 1  0  1  0  0]
[ 0 -1  0  0  0]
[-1  0  0  0  2]
[ 0  0  0 -1  0] 

[2, 1, 0, 1] 
 [ 0  1 -1  1  0]
[-1  0  1  0  0]
[ 1 -1  0  0  0]
[-1  0  0  0 -2]
[ 0  0  0  1  0] 
 [ 0  1 -1  1  0]
[-1  0  1  0  0]
[ 1 -1  0  0  0]
[-1  0  0  0  2]
[ 0  0  0 -1  0] 

[2, 1, 0] 
 [ 0 -1  0  1  0]
[ 1  0 -1  0  0]
[ 0  1  0  0  0]
[-1  0  0  0 -2]
[ 0  0  0  1  0] 
 [ 0 -1  0  1  0]
[ 1  0 -1  0  0]
[ 0  1  0  0  0]
[-1  0  0  0  2]
[ 0  0  0 -1  0] 

[2, 1, 2] 
 [ 0  1  0 -1  0]
[-1  0  1  1  0]
[ 0 -1  0  0  0]
[ 1 -1  0  0 -2]
[ 0  0  0  1  0] 
 [ 0  1  0 -1  0]
[-1  0  1  1  0]
[ 0 -1  0  0  0]
[ 1 -1  0  0  2]
[ 0  0  0 -1  0] 

[2, 1] 
 [ 0  1  0 -1  0]
[-1  0 -1  1  0]
[ 0  1  0  0  0]
[ 1 -1  0  0 -2]
[ 0  0  0  1  0] 
 [ 0  1  0 -1  0]
[-1  0 -1  1  0]
[ 0  1  0  0  0]
[ 1 -1  0  0  2]
[ 0  0  0 -1  0] 

[2, 0] 
 [ 0  1  0  0  0]
[-1  0  1 -1  0]
[ 0 -1  0  1  0]
[ 0  1 -1  0 -2]
[ 0  0  0  1  0] 
 [ 0  1  0  0  0]
[-1  0  1 -1  0]
[ 0 -1  0  1  0]
[ 0  1 -1  0  2]
[ 0  0  0 -1  0] 

[2] 
 [ 0 -1  0  0  0]
[ 1  0  1 -1  0]
[ 0 -1  0  1  0]
[ 0  1 -1  0 -2]
[ 0  0  0  1  0] 
 [ 0 -1  0  0  0]
[ 1  0  1 -1  0]
[ 0 -1  0  1  0]
[ 0  1 -1  0  2]
[ 0  0  0 -1  0] 

[1, 0, 1] 
 [ 0  1  1  0  0]
[-1  0  0  0  0]
[-1  0  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0] 
 [ 0  1  1  0  0]
[-1  0  0  0  0]
[-1  0  0 -1  0]
[ 0  0  1  0  2]
[ 0  0  0 -1  0] 

[1, 0] 
 [ 0 -1  1  0  0]
[ 1  0  0  0  0]
[-1  0  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0] 
 [ 0 -1  1  0  0]
[ 1  0  0  0  0]
[-1  0  0 -1  0]
[ 0  0  1  0  2]
[ 0  0  0 -1  0] 

[1] 
 [ 0  1 -1  0  0]
[-1  0  1  0  0]
[ 1 -1  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0] 
 [ 0  1 -1  0  0]
[-1  0  1  0  0]
[ 1 -1  0 -1  0]
[ 0  0  1  0  2]
[ 0  0  0 -1  0] 

[0] 
 [ 0  1  0  0  0]
[-1  0 -1  0  0]
[ 0  1  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0] 
 [ 0  1  0  0  0]
[-1  0 -1  0  0]
[ 0  1  0 -1  0]
[ 0  0  1  0  2]
[ 0  0  0 -1  0] 

[] 
 [ 0 -1  0  0  0]
[ 1  0 -1  0  0]
[ 0  1  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0] 
 [ 0 -1  0  0  0]
[ 1  0 -1  0  0]
[ 0  1  0 -1  0]
[ 0  0  1  0  2]
[ 0  0  0 -1  0] 

sage: A=CartanMatrix(['C',5])
....: c=[4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     B1=mutate(B(A,c),k)
....:     B2=mutate(B(A,c),k+[c[0]])
....:     print(v,"\n\r",B1,"\n\r",B2,"\n")
[3, 2, 1, 0, 3, 2, 1, 3, 2, 3] 
 [ 0  1  0  0  2]
[-1  0  1  0  0]
[ 0 -1  0  1  0]
[ 0  0 -1  0  0]
[-1  0  0  0  0] 
 [ 0  1  0  0 -2]
[-1  0  1  0  2]
[ 0 -1  0  1  0]
[ 0  0 -1  0  0]
[ 1 -1  0  0  0] 

[3, 2, 1, 0, 3, 2, 1, 3, 2] 
 [ 0  1  0  0  2]
[-1  0  1  0  0]
[ 0 -1  0 -1  0]
[ 0  0  1  0  0]
[-1  0  0  0  0] 
 [ 0  1  0  0 -2]
[-1  0  1  0  2]
[ 0 -1  0 -1  0]
[ 0  0  1  0  0]
[ 1 -1  0  0  0] 

[3, 2, 1, 0, 3, 2, 1, 3] 
 [ 0  1  0  0  2]
[-1  0 -1  0  0]
[ 0  1  0  1  0]
[ 0  0 -1  0  0]
[-1  0  0  0  0] 
 [ 0  1  0  0 -2]
[-1  0 -1  0  2]
[ 0  1  0  1  0]
[ 0  0 -1  0  0]
[ 1 -1  0  0  0] 

[3, 2, 1, 0, 3, 2, 1, 2] 
 [ 0  1  0  0  2]
[-1  0  1 -1  0]
[ 0 -1  0  1  0]
[ 0  1 -1  0  0]
[-1  0  0  0  0] 
 [ 0  1  0  0 -2]
[-1  0  1 -1  2]
[ 0 -1  0  1  0]
[ 0  1 -1  0  0]
[ 1 -1  0  0  0] 

[3, 2, 1, 0, 3, 2, 1] 
 [ 0  1  0  0  2]
[-1  0 -1  0  0]
[ 0  1  0 -1  0]
[ 0  0  1  0  0]
[-1  0  0  0  0] 
 [ 0  1  0  0 -2]
[-1  0 -1  0  2]
[ 0  1  0 -1  0]
[ 0  0  1  0  0]
[ 1 -1  0  0  0] 

[3, 2, 1, 0, 3, 2, 3] 
 [ 0 -1  0  0  2]
[ 1  0  1  0  0]
[ 0 -1  0  1  0]
[ 0  0 -1  0  0]
[-1  0  0  0  0] 
 [ 0 -1  0  0  0]
[ 1  0  1  0 -2]
[ 0 -1  0  1  2]
[ 0  0 -1  0  0]
[ 0  1 -1  0  0] 

[3, 2, 1, 0, 3, 2] 
 [ 0 -1  0  0  2]
[ 1  0  1  0  0]
[ 0 -1  0 -1  0]
[ 0  0  1  0  0]
[-1  0  0  0  0] 
 [ 0 -1  0  0  0]
[ 1  0  1  0 -2]
[ 0 -1  0 -1  2]
[ 0  0  1  0  0]
[ 0  1 -1  0  0] 

[3, 2, 1, 0, 3, 1] 
 [ 0  1 -1  0  2]
[-1  0  1  0  0]
[ 1 -1  0  1  0]
[ 0  0 -1  0  0]
[-1  0  0  0  0] 
 [ 0  1 -1  0  0]
[-1  0  1  0  0]
[ 1 -1  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0] 

[3, 2, 1, 0, 3] 
 [ 0 -1  0  0  2]
[ 1  0 -1  0  0]
[ 0  1  0  1  0]
[ 0  0 -1  0  0]
[-1  0  0  0  0] 
 [ 0 -1  0  0  0]
[ 1  0 -1  0  0]
[ 0  1  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0] 

[3, 2, 1, 0, 2, 1, 2] 
 [ 0  1  0 -1  2]
[-1  0  1  1  0]
[ 0 -1  0  0  0]
[ 1 -1  0  0  0]
[-1  0  0  0  0] 
 [ 0  1  0 -1  0]
[-1  0  1  1  0]
[ 0 -1  0  0  0]
[ 1 -1  0  0 -2]
[ 0  0  0  1  0] 

[3, 2, 1, 0, 2, 1] 
 [ 0  1  0 -1  2]
[-1  0 -1  1  0]
[ 0  1  0  0  0]
[ 1 -1  0  0  0]
[-1  0  0  0  0] 
 [ 0  1  0 -1  0]
[-1  0 -1  1  0]
[ 0  1  0  0  0]
[ 1 -1  0  0 -2]
[ 0  0  0  1  0] 

[3, 2, 1, 0, 2] 
 [ 0 -1  0  0  2]
[ 1  0  1 -1  0]
[ 0 -1  0  1  0]
[ 0  1 -1  0  0]
[-1  0  0  0  0] 
 [ 0 -1  0  0  0]
[ 1  0  1 -1  0]
[ 0 -1  0  1  0]
[ 0  1 -1  0 -2]
[ 0  0  0  1  0] 

[3, 2, 1, 0, 1] 
 [ 0  1 -1  0  2]
[-1  0  1  0  0]
[ 1 -1  0 -1  0]
[ 0  0  1  0  0]
[-1  0  0  0  0] 
 [ 0  1 -1  0  0]
[-1  0  1  0  0]
[ 1 -1  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0] 

[3, 2, 1, 0] 
 [ 0 -1  0  0  2]
[ 1  0 -1  0  0]
[ 0  1  0 -1  0]
[ 0  0  1  0  0]
[-1  0  0  0  0] 
 [ 0 -1  0  0  0]
[ 1  0 -1  0  0]
[ 0  1  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0] 

[3, 2, 1, 3, 2, 3] 
 [ 0  1  0  0 -2]
[-1  0  1  0  2]
[ 0 -1  0  1  0]
[ 0  0 -1  0  0]
[ 1 -1  0  0  0] 
 [ 0  1  0  0  0]
[-1  0  1  0 -2]
[ 0 -1  0  1  2]
[ 0  0 -1  0  0]
[ 0  1 -1  0  0] 

[3, 2, 1, 3, 2] 
 [ 0  1  0  0 -2]
[-1  0  1  0  2]
[ 0 -1  0 -1  0]
[ 0  0  1  0  0]
[ 1 -1  0  0  0] 
 [ 0  1  0  0  0]
[-1  0  1  0 -2]
[ 0 -1  0 -1  2]
[ 0  0  1  0  0]
[ 0  1 -1  0  0] 

[3, 2, 1, 3] 
 [ 0  1  0  0 -2]
[-1  0 -1  0  2]
[ 0  1  0  1  0]
[ 0  0 -1  0  0]
[ 1 -1  0  0  0] 
 [ 0  1  0  0  0]
[-1  0 -1  0  0]
[ 0  1  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0] 

[3, 2, 1, 2] 
 [ 0  1  0  0 -2]
[-1  0  1 -1  2]
[ 0 -1  0  1  0]
[ 0  1 -1  0  0]
[ 1 -1  0  0  0] 
 [ 0  1  0  0  0]
[-1  0  1 -1  0]
[ 0 -1  0  1  0]
[ 0  1 -1  0 -2]
[ 0  0  0  1  0] 

[3, 2, 1] 
 [ 0  1  0  0 -2]
[-1  0 -1  0  2]
[ 0  1  0 -1  0]
[ 0  0  1  0  0]
[ 1 -1  0  0  0] 
 [ 0  1  0  0  0]
[-1  0 -1  0  0]
[ 0  1  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0] 

[3, 2, 0, 3] 
 [ 0  1  0  0  0]
[-1  0  1  0 -2]
[ 0 -1  0  1  2]
[ 0  0 -1  0  0]
[ 0  1 -1  0  0] 
 [ 0  1  0  0  0]
[-1  0  1  0  0]
[ 0 -1  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0] 

[3, 2, 0] 
 [ 0  1  0  0  0]
[-1  0  1  0 -2]
[ 0 -1  0 -1  2]
[ 0  0  1  0  0]
[ 0  1 -1  0  0] 
 [ 0  1  0  0  0]
[-1  0  1  0  0]
[ 0 -1  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0] 

[3, 2, 3] 
 [ 0 -1  0  0  0]
[ 1  0  1  0 -2]
[ 0 -1  0  1  2]
[ 0  0 -1  0  0]
[ 0  1 -1  0  0] 
 [ 0 -1  0  0  0]
[ 1  0  1  0  0]
[ 0 -1  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0] 

[3, 2] 
 [ 0 -1  0  0  0]
[ 1  0  1  0 -2]
[ 0 -1  0 -1  2]
[ 0  0  1  0  0]
[ 0  1 -1  0  0] 
 [ 0 -1  0  0  0]
[ 1  0  1  0  0]
[ 0 -1  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0] 

[3, 1, 0, 1] 
 [ 0  1  1  0  0]
[-1  0  0  0  0]
[-1  0  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0] 
 [ 0  1  1  0  0]
[-1  0  0  0  0]
[-1  0  0  1  0]
[ 0  0 -1  0 -2]
[ 0  0  0  1  0] 

[3, 1, 0] 
 [ 0 -1  1  0  0]
[ 1  0  0  0  0]
[-1  0  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0] 
 [ 0 -1  1  0  0]
[ 1  0  0  0  0]
[-1  0  0  1  0]
[ 0  0 -1  0 -2]
[ 0  0  0  1  0] 

[3, 1] 
 [ 0  1 -1  0  0]
[-1  0  1  0  0]
[ 1 -1  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0] 
 [ 0  1 -1  0  0]
[-1  0  1  0  0]
[ 1 -1  0  1  0]
[ 0  0 -1  0 -2]
[ 0  0  0  1  0] 

[3, 0] 
 [ 0  1  0  0  0]
[-1  0 -1  0  0]
[ 0  1  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0] 
 [ 0  1  0  0  0]
[-1  0 -1  0  0]
[ 0  1  0  1  0]
[ 0  0 -1  0 -2]
[ 0  0  0  1  0] 

[3] 
 [ 0 -1  0  0  0]
[ 1  0 -1  0  0]
[ 0  1  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0] 
 [ 0 -1  0  0  0]
[ 1  0 -1  0  0]
[ 0  1  0  1  0]
[ 0  0 -1  0 -2]
[ 0  0  0  1  0] 

[2, 1, 0, 2, 1, 2] 
 [ 0  1  0  1  0]
[-1  0  1  0  0]
[ 0 -1  0  0  0]
[-1  0  0  0 -2]
[ 0  0  0  1  0] 
 [ 0  1  0  1  0]
[-1  0  1  0  0]
[ 0 -1  0  0  0]
[-1  0  0  0  2]
[ 0  0  0 -1  0] 

[2, 1, 0, 2, 1] 
 [ 0  1  0  1  0]
[-1  0 -1  0  0]
[ 0  1  0  0  0]
[-1  0  0  0 -2]
[ 0  0  0  1  0] 
 [ 0  1  0  1  0]
[-1  0 -1  0  0]
[ 0  1  0  0  0]
[-1  0  0  0  2]
[ 0  0  0 -1  0] 

[2, 1, 0, 2] 
 [ 0 -1  0  1  0]
[ 1  0  1  0  0]
[ 0 -1  0  0  0]
[-1  0  0  0 -2]
[ 0  0  0  1  0] 
 [ 0 -1  0  1  0]
[ 1  0  1  0  0]
[ 0 -1  0  0  0]
[-1  0  0  0  2]
[ 0  0  0 -1  0] 

[2, 1, 0, 1] 
 [ 0  1 -1  1  0]
[-1  0  1  0  0]
[ 1 -1  0  0  0]
[-1  0  0  0 -2]
[ 0  0  0  1  0] 
 [ 0  1 -1  1  0]
[-1  0  1  0  0]
[ 1 -1  0  0  0]
[-1  0  0  0  2]
[ 0  0  0 -1  0] 

[2, 1, 0] 
 [ 0 -1  0  1  0]
[ 1  0 -1  0  0]
[ 0  1  0  0  0]
[-1  0  0  0 -2]
[ 0  0  0  1  0] 
 [ 0 -1  0  1  0]
[ 1  0 -1  0  0]
[ 0  1  0  0  0]
[-1  0  0  0  2]
[ 0  0  0 -1  0] 

[2, 1, 2] 
 [ 0  1  0 -1  0]
[-1  0  1  1  0]
[ 0 -1  0  0  0]
[ 1 -1  0  0 -2]
[ 0  0  0  1  0] 
 [ 0  1  0 -1  0]
[-1  0  1  1  0]
[ 0 -1  0  0  0]
[ 1 -1  0  0  2]
[ 0  0  0 -1  0] 

[2, 1] 
 [ 0  1  0 -1  0]
[-1  0 -1  1  0]
[ 0  1  0  0  0]
[ 1 -1  0  0 -2]
[ 0  0  0  1  0] 
 [ 0  1  0 -1  0]
[-1  0 -1  1  0]
[ 0  1  0  0  0]
[ 1 -1  0  0  2]
[ 0  0  0 -1  0] 

[2, 0] 
 [ 0  1  0  0  0]
[-1  0  1 -1  0]
[ 0 -1  0  1  0]
[ 0  1 -1  0 -2]
[ 0  0  0  1  0] 
 [ 0  1  0  0  0]
[-1  0  1 -1  0]
[ 0 -1  0  1  0]
[ 0  1 -1  0  2]
[ 0  0  0 -1  0] 

[2] 
 [ 0 -1  0  0  0]
[ 1  0  1 -1  0]
[ 0 -1  0  1  0]
[ 0  1 -1  0 -2]
[ 0  0  0  1  0] 
 [ 0 -1  0  0  0]
[ 1  0  1 -1  0]
[ 0 -1  0  1  0]
[ 0  1 -1  0  2]
[ 0  0  0 -1  0] 

[1, 0, 1] 
 [ 0  1  1  0  0]
[-1  0  0  0  0]
[-1  0  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0] 
 [ 0  1  1  0  0]
[-1  0  0  0  0]
[-1  0  0 -1  0]
[ 0  0  1  0  2]
[ 0  0  0 -1  0] 

[1, 0] 
 [ 0 -1  1  0  0]
[ 1  0  0  0  0]
[-1  0  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0] 
 [ 0 -1  1  0  0]
[ 1  0  0  0  0]
[-1  0  0 -1  0]
[ 0  0  1  0  2]
[ 0  0  0 -1  0] 

[1] 
 [ 0  1 -1  0  0]
[-1  0  1  0  0]
[ 1 -1  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0] 
 [ 0  1 -1  0  0]
[-1  0  1  0  0]
[ 1 -1  0 -1  0]
[ 0  0  1  0  2]
[ 0  0  0 -1  0] 

[0] 
 [ 0  1  0  0  0]
[-1  0 -1  0  0]
[ 0  1  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0] 
 [ 0  1  0  0  0]
[-1  0 -1  0  0]
[ 0  1  0 -1  0]
[ 0  0  1  0  2]
[ 0  0  0 -1  0] 

[] 
 [ 0 -1  0  0  0]
[ 1  0 -1  0  0]
[ 0  1  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0] 
 [ 0 -1  0  0  0]
[ 1  0 -1  0  0]
[ 0  1  0 -1  0]
[ 0  0  1  0  2]
[ 0  0  0 -1  0] 

sage: A=CartanMatrix(['C',5])
....: c=[4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     B1=mutate(B(A,c),k)
....:     B2=mutate(B(A,c),k+[c[0]])
....:     print(v,"\n\r",B1,"\n\r",B2,"\n",sep=[])
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In [145], line 10
      8 B1=mutate(B(A,c),k)
      9 B2=mutate(B(A,c),k+[c[Integer(0)]])
---> 10 print(v,"\n\r",B1,"\n\r",B2,"\n",sep=[])

TypeError: sep must be None or a string, not list
sage: A=CartanMatrix(['C',5])
....: c=[4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     B1=mutate(B(A,c),k)
....:     B2=mutate(B(A,c),k+[c[0]])
....:     print(v,"\n\r",B1,"\n\r",B2,"\n",sep="")
[3, 2, 1, 0, 3, 2, 1, 3, 2, 3]
[ 0  1  0  0  2]
[-1  0  1  0  0]
[ 0 -1  0  1  0]
[ 0  0 -1  0  0]
[-1  0  0  0  0]
[ 0  1  0  0 -2]
[-1  0  1  0  2]
[ 0 -1  0  1  0]
[ 0  0 -1  0  0]
[ 1 -1  0  0  0]

[3, 2, 1, 0, 3, 2, 1, 3, 2]
[ 0  1  0  0  2]
[-1  0  1  0  0]
[ 0 -1  0 -1  0]
[ 0  0  1  0  0]
[-1  0  0  0  0]
[ 0  1  0  0 -2]
[-1  0  1  0  2]
[ 0 -1  0 -1  0]
[ 0  0  1  0  0]
[ 1 -1  0  0  0]

[3, 2, 1, 0, 3, 2, 1, 3]
[ 0  1  0  0  2]
[-1  0 -1  0  0]
[ 0  1  0  1  0]
[ 0  0 -1  0  0]
[-1  0  0  0  0]
[ 0  1  0  0 -2]
[-1  0 -1  0  2]
[ 0  1  0  1  0]
[ 0  0 -1  0  0]
[ 1 -1  0  0  0]

[3, 2, 1, 0, 3, 2, 1, 2]
[ 0  1  0  0  2]
[-1  0  1 -1  0]
[ 0 -1  0  1  0]
[ 0  1 -1  0  0]
[-1  0  0  0  0]
[ 0  1  0  0 -2]
[-1  0  1 -1  2]
[ 0 -1  0  1  0]
[ 0  1 -1  0  0]
[ 1 -1  0  0  0]

[3, 2, 1, 0, 3, 2, 1]
[ 0  1  0  0  2]
[-1  0 -1  0  0]
[ 0  1  0 -1  0]
[ 0  0  1  0  0]
[-1  0  0  0  0]
[ 0  1  0  0 -2]
[-1  0 -1  0  2]
[ 0  1  0 -1  0]
[ 0  0  1  0  0]
[ 1 -1  0  0  0]

[3, 2, 1, 0, 3, 2, 3]
[ 0 -1  0  0  2]
[ 1  0  1  0  0]
[ 0 -1  0  1  0]
[ 0  0 -1  0  0]
[-1  0  0  0  0]
[ 0 -1  0  0  0]
[ 1  0  1  0 -2]
[ 0 -1  0  1  2]
[ 0  0 -1  0  0]
[ 0  1 -1  0  0]

[3, 2, 1, 0, 3, 2]
[ 0 -1  0  0  2]
[ 1  0  1  0  0]
[ 0 -1  0 -1  0]
[ 0  0  1  0  0]
[-1  0  0  0  0]
[ 0 -1  0  0  0]
[ 1  0  1  0 -2]
[ 0 -1  0 -1  2]
[ 0  0  1  0  0]
[ 0  1 -1  0  0]

[3, 2, 1, 0, 3, 1]
[ 0  1 -1  0  2]
[-1  0  1  0  0]
[ 1 -1  0  1  0]
[ 0  0 -1  0  0]
[-1  0  0  0  0]
[ 0  1 -1  0  0]
[-1  0  1  0  0]
[ 1 -1  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0]

[3, 2, 1, 0, 3]
[ 0 -1  0  0  2]
[ 1  0 -1  0  0]
[ 0  1  0  1  0]
[ 0  0 -1  0  0]
[-1  0  0  0  0]
[ 0 -1  0  0  0]
[ 1  0 -1  0  0]
[ 0  1  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0]

[3, 2, 1, 0, 2, 1, 2]
[ 0  1  0 -1  2]
[-1  0  1  1  0]
[ 0 -1  0  0  0]
[ 1 -1  0  0  0]
[-1  0  0  0  0]
[ 0  1  0 -1  0]
[-1  0  1  1  0]
[ 0 -1  0  0  0]
[ 1 -1  0  0 -2]
[ 0  0  0  1  0]

[3, 2, 1, 0, 2, 1]
[ 0  1  0 -1  2]
[-1  0 -1  1  0]
[ 0  1  0  0  0]
[ 1 -1  0  0  0]
[-1  0  0  0  0]
[ 0  1  0 -1  0]
[-1  0 -1  1  0]
[ 0  1  0  0  0]
[ 1 -1  0  0 -2]
[ 0  0  0  1  0]

[3, 2, 1, 0, 2]
[ 0 -1  0  0  2]
[ 1  0  1 -1  0]
[ 0 -1  0  1  0]
[ 0  1 -1  0  0]
[-1  0  0  0  0]
[ 0 -1  0  0  0]
[ 1  0  1 -1  0]
[ 0 -1  0  1  0]
[ 0  1 -1  0 -2]
[ 0  0  0  1  0]

[3, 2, 1, 0, 1]
[ 0  1 -1  0  2]
[-1  0  1  0  0]
[ 1 -1  0 -1  0]
[ 0  0  1  0  0]
[-1  0  0  0  0]
[ 0  1 -1  0  0]
[-1  0  1  0  0]
[ 1 -1  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0]

[3, 2, 1, 0]
[ 0 -1  0  0  2]
[ 1  0 -1  0  0]
[ 0  1  0 -1  0]
[ 0  0  1  0  0]
[-1  0  0  0  0]
[ 0 -1  0  0  0]
[ 1  0 -1  0  0]
[ 0  1  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0]

[3, 2, 1, 3, 2, 3]
[ 0  1  0  0 -2]
[-1  0  1  0  2]
[ 0 -1  0  1  0]
[ 0  0 -1  0  0]
[ 1 -1  0  0  0]
[ 0  1  0  0  0]
[-1  0  1  0 -2]
[ 0 -1  0  1  2]
[ 0  0 -1  0  0]
[ 0  1 -1  0  0]

[3, 2, 1, 3, 2]
[ 0  1  0  0 -2]
[-1  0  1  0  2]
[ 0 -1  0 -1  0]
[ 0  0  1  0  0]
[ 1 -1  0  0  0]
[ 0  1  0  0  0]
[-1  0  1  0 -2]
[ 0 -1  0 -1  2]
[ 0  0  1  0  0]
[ 0  1 -1  0  0]

[3, 2, 1, 3]
[ 0  1  0  0 -2]
[-1  0 -1  0  2]
[ 0  1  0  1  0]
[ 0  0 -1  0  0]
[ 1 -1  0  0  0]
[ 0  1  0  0  0]
[-1  0 -1  0  0]
[ 0  1  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0]

[3, 2, 1, 2]
[ 0  1  0  0 -2]
[-1  0  1 -1  2]
[ 0 -1  0  1  0]
[ 0  1 -1  0  0]
[ 1 -1  0  0  0]
[ 0  1  0  0  0]
[-1  0  1 -1  0]
[ 0 -1  0  1  0]
[ 0  1 -1  0 -2]
[ 0  0  0  1  0]

[3, 2, 1]
[ 0  1  0  0 -2]
[-1  0 -1  0  2]
[ 0  1  0 -1  0]
[ 0  0  1  0  0]
[ 1 -1  0  0  0]
[ 0  1  0  0  0]
[-1  0 -1  0  0]
[ 0  1  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0]

[3, 2, 0, 3]
[ 0  1  0  0  0]
[-1  0  1  0 -2]
[ 0 -1  0  1  2]
[ 0  0 -1  0  0]
[ 0  1 -1  0  0]
[ 0  1  0  0  0]
[-1  0  1  0  0]
[ 0 -1  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0]

[3, 2, 0]
[ 0  1  0  0  0]
[-1  0  1  0 -2]
[ 0 -1  0 -1  2]
[ 0  0  1  0  0]
[ 0  1 -1  0  0]
[ 0  1  0  0  0]
[-1  0  1  0  0]
[ 0 -1  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0]

[3, 2, 3]
[ 0 -1  0  0  0]
[ 1  0  1  0 -2]
[ 0 -1  0  1  2]
[ 0  0 -1  0  0]
[ 0  1 -1  0  0]
[ 0 -1  0  0  0]
[ 1  0  1  0  0]
[ 0 -1  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0]

[3, 2]
[ 0 -1  0  0  0]
[ 1  0  1  0 -2]
[ 0 -1  0 -1  2]
[ 0  0  1  0  0]
[ 0  1 -1  0  0]
[ 0 -1  0  0  0]
[ 1  0  1  0  0]
[ 0 -1  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0]

[3, 1, 0, 1]
[ 0  1  1  0  0]
[-1  0  0  0  0]
[-1  0  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0]
[ 0  1  1  0  0]
[-1  0  0  0  0]
[-1  0  0  1  0]
[ 0  0 -1  0 -2]
[ 0  0  0  1  0]

[3, 1, 0]
[ 0 -1  1  0  0]
[ 1  0  0  0  0]
[-1  0  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0]
[ 0 -1  1  0  0]
[ 1  0  0  0  0]
[-1  0  0  1  0]
[ 0  0 -1  0 -2]
[ 0  0  0  1  0]

[3, 1]
[ 0  1 -1  0  0]
[-1  0  1  0  0]
[ 1 -1  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0]
[ 0  1 -1  0  0]
[-1  0  1  0  0]
[ 1 -1  0  1  0]
[ 0  0 -1  0 -2]
[ 0  0  0  1  0]

[3, 0]
[ 0  1  0  0  0]
[-1  0 -1  0  0]
[ 0  1  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0]
[ 0  1  0  0  0]
[-1  0 -1  0  0]
[ 0  1  0  1  0]
[ 0  0 -1  0 -2]
[ 0  0  0  1  0]

[3]
[ 0 -1  0  0  0]
[ 1  0 -1  0  0]
[ 0  1  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0]
[ 0 -1  0  0  0]
[ 1  0 -1  0  0]
[ 0  1  0  1  0]
[ 0  0 -1  0 -2]
[ 0  0  0  1  0]

[2, 1, 0, 2, 1, 2]
[ 0  1  0  1  0]
[-1  0  1  0  0]
[ 0 -1  0  0  0]
[-1  0  0  0 -2]
[ 0  0  0  1  0]
[ 0  1  0  1  0]
[-1  0  1  0  0]
[ 0 -1  0  0  0]
[-1  0  0  0  2]
[ 0  0  0 -1  0]

[2, 1, 0, 2, 1]
[ 0  1  0  1  0]
[-1  0 -1  0  0]
[ 0  1  0  0  0]
[-1  0  0  0 -2]
[ 0  0  0  1  0]
[ 0  1  0  1  0]
[-1  0 -1  0  0]
[ 0  1  0  0  0]
[-1  0  0  0  2]
[ 0  0  0 -1  0]

[2, 1, 0, 2]
[ 0 -1  0  1  0]
[ 1  0  1  0  0]
[ 0 -1  0  0  0]
[-1  0  0  0 -2]
[ 0  0  0  1  0]
[ 0 -1  0  1  0]
[ 1  0  1  0  0]
[ 0 -1  0  0  0]
[-1  0  0  0  2]
[ 0  0  0 -1  0]

[2, 1, 0, 1]
[ 0  1 -1  1  0]
[-1  0  1  0  0]
[ 1 -1  0  0  0]
[-1  0  0  0 -2]
[ 0  0  0  1  0]
[ 0  1 -1  1  0]
[-1  0  1  0  0]
[ 1 -1  0  0  0]
[-1  0  0  0  2]
[ 0  0  0 -1  0]

[2, 1, 0]
[ 0 -1  0  1  0]
[ 1  0 -1  0  0]
[ 0  1  0  0  0]
[-1  0  0  0 -2]
[ 0  0  0  1  0]
[ 0 -1  0  1  0]
[ 1  0 -1  0  0]
[ 0  1  0  0  0]
[-1  0  0  0  2]
[ 0  0  0 -1  0]

[2, 1, 2]
[ 0  1  0 -1  0]
[-1  0  1  1  0]
[ 0 -1  0  0  0]
[ 1 -1  0  0 -2]
[ 0  0  0  1  0]
[ 0  1  0 -1  0]
[-1  0  1  1  0]
[ 0 -1  0  0  0]
[ 1 -1  0  0  2]
[ 0  0  0 -1  0]

[2, 1]
[ 0  1  0 -1  0]
[-1  0 -1  1  0]
[ 0  1  0  0  0]
[ 1 -1  0  0 -2]
[ 0  0  0  1  0]
[ 0  1  0 -1  0]
[-1  0 -1  1  0]
[ 0  1  0  0  0]
[ 1 -1  0  0  2]
[ 0  0  0 -1  0]

[2, 0]
[ 0  1  0  0  0]
[-1  0  1 -1  0]
[ 0 -1  0  1  0]
[ 0  1 -1  0 -2]
[ 0  0  0  1  0]
[ 0  1  0  0  0]
[-1  0  1 -1  0]
[ 0 -1  0  1  0]
[ 0  1 -1  0  2]
[ 0  0  0 -1  0]

[2]
[ 0 -1  0  0  0]
[ 1  0  1 -1  0]
[ 0 -1  0  1  0]
[ 0  1 -1  0 -2]
[ 0  0  0  1  0]
[ 0 -1  0  0  0]
[ 1  0  1 -1  0]
[ 0 -1  0  1  0]
[ 0  1 -1  0  2]
[ 0  0  0 -1  0]

[1, 0, 1]
[ 0  1  1  0  0]
[-1  0  0  0  0]
[-1  0  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0]
[ 0  1  1  0  0]
[-1  0  0  0  0]
[-1  0  0 -1  0]
[ 0  0  1  0  2]
[ 0  0  0 -1  0]

[1, 0]
[ 0 -1  1  0  0]
[ 1  0  0  0  0]
[-1  0  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0]
[ 0 -1  1  0  0]
[ 1  0  0  0  0]
[-1  0  0 -1  0]
[ 0  0  1  0  2]
[ 0  0  0 -1  0]

[1]
[ 0  1 -1  0  0]
[-1  0  1  0  0]
[ 1 -1  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0]
[ 0  1 -1  0  0]
[-1  0  1  0  0]
[ 1 -1  0 -1  0]
[ 0  0  1  0  2]
[ 0  0  0 -1  0]

[0]
[ 0  1  0  0  0]
[-1  0 -1  0  0]
[ 0  1  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0]
[ 0  1  0  0  0]
[-1  0 -1  0  0]
[ 0  1  0 -1  0]
[ 0  0  1  0  2]
[ 0  0  0 -1  0]

[]
[ 0 -1  0  0  0]
[ 1  0 -1  0  0]
[ 0  1  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0]
[ 0 -1  0  0  0]
[ 1  0 -1  0  0]
[ 0  1  0 -1  0]
[ 0  0  1  0  2]
[ 0  0  0 -1  0]

sage: A=CartanMatrix(['C',5])
....: c=[4,3,2,1,0]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     k=list(reversed(v))
....:     kinv=list(reversed(inv_sortable(A,c[1:],v)))
....:     B1=mutate(B(A,c),k)
....:     B2=mutate(B(A,c),k+[c[0]])
....:     print(v,"\n",B1,"\n\n",B2,"\n\n",sep="")
[3, 2, 1, 0, 3, 2, 1, 3, 2, 3]
[ 0  1  0  0  2]
[-1  0  1  0  0]
[ 0 -1  0  1  0]
[ 0  0 -1  0  0]
[-1  0  0  0  0]

[ 0  1  0  0 -2]
[-1  0  1  0  2]
[ 0 -1  0  1  0]
[ 0  0 -1  0  0]
[ 1 -1  0  0  0]


[3, 2, 1, 0, 3, 2, 1, 3, 2]
[ 0  1  0  0  2]
[-1  0  1  0  0]
[ 0 -1  0 -1  0]
[ 0  0  1  0  0]
[-1  0  0  0  0]

[ 0  1  0  0 -2]
[-1  0  1  0  2]
[ 0 -1  0 -1  0]
[ 0  0  1  0  0]
[ 1 -1  0  0  0]


[3, 2, 1, 0, 3, 2, 1, 3]
[ 0  1  0  0  2]
[-1  0 -1  0  0]
[ 0  1  0  1  0]
[ 0  0 -1  0  0]
[-1  0  0  0  0]

[ 0  1  0  0 -2]
[-1  0 -1  0  2]
[ 0  1  0  1  0]
[ 0  0 -1  0  0]
[ 1 -1  0  0  0]


[3, 2, 1, 0, 3, 2, 1, 2]
[ 0  1  0  0  2]
[-1  0  1 -1  0]
[ 0 -1  0  1  0]
[ 0  1 -1  0  0]
[-1  0  0  0  0]

[ 0  1  0  0 -2]
[-1  0  1 -1  2]
[ 0 -1  0  1  0]
[ 0  1 -1  0  0]
[ 1 -1  0  0  0]


[3, 2, 1, 0, 3, 2, 1]
[ 0  1  0  0  2]
[-1  0 -1  0  0]
[ 0  1  0 -1  0]
[ 0  0  1  0  0]
[-1  0  0  0  0]

[ 0  1  0  0 -2]
[-1  0 -1  0  2]
[ 0  1  0 -1  0]
[ 0  0  1  0  0]
[ 1 -1  0  0  0]


[3, 2, 1, 0, 3, 2, 3]
[ 0 -1  0  0  2]
[ 1  0  1  0  0]
[ 0 -1  0  1  0]
[ 0  0 -1  0  0]
[-1  0  0  0  0]

[ 0 -1  0  0  0]
[ 1  0  1  0 -2]
[ 0 -1  0  1  2]
[ 0  0 -1  0  0]
[ 0  1 -1  0  0]


[3, 2, 1, 0, 3, 2]
[ 0 -1  0  0  2]
[ 1  0  1  0  0]
[ 0 -1  0 -1  0]
[ 0  0  1  0  0]
[-1  0  0  0  0]

[ 0 -1  0  0  0]
[ 1  0  1  0 -2]
[ 0 -1  0 -1  2]
[ 0  0  1  0  0]
[ 0  1 -1  0  0]


[3, 2, 1, 0, 3, 1]
[ 0  1 -1  0  2]
[-1  0  1  0  0]
[ 1 -1  0  1  0]
[ 0  0 -1  0  0]
[-1  0  0  0  0]

[ 0  1 -1  0  0]
[-1  0  1  0  0]
[ 1 -1  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0]


[3, 2, 1, 0, 3]
[ 0 -1  0  0  2]
[ 1  0 -1  0  0]
[ 0  1  0  1  0]
[ 0  0 -1  0  0]
[-1  0  0  0  0]

[ 0 -1  0  0  0]
[ 1  0 -1  0  0]
[ 0  1  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0]


[3, 2, 1, 0, 2, 1, 2]
[ 0  1  0 -1  2]
[-1  0  1  1  0]
[ 0 -1  0  0  0]
[ 1 -1  0  0  0]
[-1  0  0  0  0]

[ 0  1  0 -1  0]
[-1  0  1  1  0]
[ 0 -1  0  0  0]
[ 1 -1  0  0 -2]
[ 0  0  0  1  0]


[3, 2, 1, 0, 2, 1]
[ 0  1  0 -1  2]
[-1  0 -1  1  0]
[ 0  1  0  0  0]
[ 1 -1  0  0  0]
[-1  0  0  0  0]

[ 0  1  0 -1  0]
[-1  0 -1  1  0]
[ 0  1  0  0  0]
[ 1 -1  0  0 -2]
[ 0  0  0  1  0]


[3, 2, 1, 0, 2]
[ 0 -1  0  0  2]
[ 1  0  1 -1  0]
[ 0 -1  0  1  0]
[ 0  1 -1  0  0]
[-1  0  0  0  0]

[ 0 -1  0  0  0]
[ 1  0  1 -1  0]
[ 0 -1  0  1  0]
[ 0  1 -1  0 -2]
[ 0  0  0  1  0]


[3, 2, 1, 0, 1]
[ 0  1 -1  0  2]
[-1  0  1  0  0]
[ 1 -1  0 -1  0]
[ 0  0  1  0  0]
[-1  0  0  0  0]

[ 0  1 -1  0  0]
[-1  0  1  0  0]
[ 1 -1  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0]


[3, 2, 1, 0]
[ 0 -1  0  0  2]
[ 1  0 -1  0  0]
[ 0  1  0 -1  0]
[ 0  0  1  0  0]
[-1  0  0  0  0]

[ 0 -1  0  0  0]
[ 1  0 -1  0  0]
[ 0  1  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0]


[3, 2, 1, 3, 2, 3]
[ 0  1  0  0 -2]
[-1  0  1  0  2]
[ 0 -1  0  1  0]
[ 0  0 -1  0  0]
[ 1 -1  0  0  0]

[ 0  1  0  0  0]
[-1  0  1  0 -2]
[ 0 -1  0  1  2]
[ 0  0 -1  0  0]
[ 0  1 -1  0  0]


[3, 2, 1, 3, 2]
[ 0  1  0  0 -2]
[-1  0  1  0  2]
[ 0 -1  0 -1  0]
[ 0  0  1  0  0]
[ 1 -1  0  0  0]

[ 0  1  0  0  0]
[-1  0  1  0 -2]
[ 0 -1  0 -1  2]
[ 0  0  1  0  0]
[ 0  1 -1  0  0]


[3, 2, 1, 3]
[ 0  1  0  0 -2]
[-1  0 -1  0  2]
[ 0  1  0  1  0]
[ 0  0 -1  0  0]
[ 1 -1  0  0  0]

[ 0  1  0  0  0]
[-1  0 -1  0  0]
[ 0  1  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0]


[3, 2, 1, 2]
[ 0  1  0  0 -2]
[-1  0  1 -1  2]
[ 0 -1  0  1  0]
[ 0  1 -1  0  0]
[ 1 -1  0  0  0]

[ 0  1  0  0  0]
[-1  0  1 -1  0]
[ 0 -1  0  1  0]
[ 0  1 -1  0 -2]
[ 0  0  0  1  0]


[3, 2, 1]
[ 0  1  0  0 -2]
[-1  0 -1  0  2]
[ 0  1  0 -1  0]
[ 0  0  1  0  0]
[ 1 -1  0  0  0]

[ 0  1  0  0  0]
[-1  0 -1  0  0]
[ 0  1  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0]


[3, 2, 0, 3]
[ 0  1  0  0  0]
[-1  0  1  0 -2]
[ 0 -1  0  1  2]
[ 0  0 -1  0  0]
[ 0  1 -1  0  0]

[ 0  1  0  0  0]
[-1  0  1  0  0]
[ 0 -1  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0]


[3, 2, 0]
[ 0  1  0  0  0]
[-1  0  1  0 -2]
[ 0 -1  0 -1  2]
[ 0  0  1  0  0]
[ 0  1 -1  0  0]

[ 0  1  0  0  0]
[-1  0  1  0  0]
[ 0 -1  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0]


[3, 2, 3]
[ 0 -1  0  0  0]
[ 1  0  1  0 -2]
[ 0 -1  0  1  2]
[ 0  0 -1  0  0]
[ 0  1 -1  0  0]

[ 0 -1  0  0  0]
[ 1  0  1  0  0]
[ 0 -1  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0]


[3, 2]
[ 0 -1  0  0  0]
[ 1  0  1  0 -2]
[ 0 -1  0 -1  2]
[ 0  0  1  0  0]
[ 0  1 -1  0  0]

[ 0 -1  0  0  0]
[ 1  0  1  0  0]
[ 0 -1  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0]


[3, 1, 0, 1]
[ 0  1  1  0  0]
[-1  0  0  0  0]
[-1  0  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0]

[ 0  1  1  0  0]
[-1  0  0  0  0]
[-1  0  0  1  0]
[ 0  0 -1  0 -2]
[ 0  0  0  1  0]


[3, 1, 0]
[ 0 -1  1  0  0]
[ 1  0  0  0  0]
[-1  0  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0]

[ 0 -1  1  0  0]
[ 1  0  0  0  0]
[-1  0  0  1  0]
[ 0  0 -1  0 -2]
[ 0  0  0  1  0]


[3, 1]
[ 0  1 -1  0  0]
[-1  0  1  0  0]
[ 1 -1  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0]

[ 0  1 -1  0  0]
[-1  0  1  0  0]
[ 1 -1  0  1  0]
[ 0  0 -1  0 -2]
[ 0  0  0  1  0]


[3, 0]
[ 0  1  0  0  0]
[-1  0 -1  0  0]
[ 0  1  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0]

[ 0  1  0  0  0]
[-1  0 -1  0  0]
[ 0  1  0  1  0]
[ 0  0 -1  0 -2]
[ 0  0  0  1  0]


[3]
[ 0 -1  0  0  0]
[ 1  0 -1  0  0]
[ 0  1  0  1 -2]
[ 0  0 -1  0  2]
[ 0  0  1 -1  0]

[ 0 -1  0  0  0]
[ 1  0 -1  0  0]
[ 0  1  0  1  0]
[ 0  0 -1  0 -2]
[ 0  0  0  1  0]


[2, 1, 0, 2, 1, 2]
[ 0  1  0  1  0]
[-1  0  1  0  0]
[ 0 -1  0  0  0]
[-1  0  0  0 -2]
[ 0  0  0  1  0]

[ 0  1  0  1  0]
[-1  0  1  0  0]
[ 0 -1  0  0  0]
[-1  0  0  0  2]
[ 0  0  0 -1  0]


[2, 1, 0, 2, 1]
[ 0  1  0  1  0]
[-1  0 -1  0  0]
[ 0  1  0  0  0]
[-1  0  0  0 -2]
[ 0  0  0  1  0]

[ 0  1  0  1  0]
[-1  0 -1  0  0]
[ 0  1  0  0  0]
[-1  0  0  0  2]
[ 0  0  0 -1  0]


[2, 1, 0, 2]
[ 0 -1  0  1  0]
[ 1  0  1  0  0]
[ 0 -1  0  0  0]
[-1  0  0  0 -2]
[ 0  0  0  1  0]

[ 0 -1  0  1  0]
[ 1  0  1  0  0]
[ 0 -1  0  0  0]
[-1  0  0  0  2]
[ 0  0  0 -1  0]


[2, 1, 0, 1]
[ 0  1 -1  1  0]
[-1  0  1  0  0]
[ 1 -1  0  0  0]
[-1  0  0  0 -2]
[ 0  0  0  1  0]

[ 0  1 -1  1  0]
[-1  0  1  0  0]
[ 1 -1  0  0  0]
[-1  0  0  0  2]
[ 0  0  0 -1  0]


[2, 1, 0]
[ 0 -1  0  1  0]
[ 1  0 -1  0  0]
[ 0  1  0  0  0]
[-1  0  0  0 -2]
[ 0  0  0  1  0]

[ 0 -1  0  1  0]
[ 1  0 -1  0  0]
[ 0  1  0  0  0]
[-1  0  0  0  2]
[ 0  0  0 -1  0]


[2, 1, 2]
[ 0  1  0 -1  0]
[-1  0  1  1  0]
[ 0 -1  0  0  0]
[ 1 -1  0  0 -2]
[ 0  0  0  1  0]

[ 0  1  0 -1  0]
[-1  0  1  1  0]
[ 0 -1  0  0  0]
[ 1 -1  0  0  2]
[ 0  0  0 -1  0]


[2, 1]
[ 0  1  0 -1  0]
[-1  0 -1  1  0]
[ 0  1  0  0  0]
[ 1 -1  0  0 -2]
[ 0  0  0  1  0]

[ 0  1  0 -1  0]
[-1  0 -1  1  0]
[ 0  1  0  0  0]
[ 1 -1  0  0  2]
[ 0  0  0 -1  0]


[2, 0]
[ 0  1  0  0  0]
[-1  0  1 -1  0]
[ 0 -1  0  1  0]
[ 0  1 -1  0 -2]
[ 0  0  0  1  0]

[ 0  1  0  0  0]
[-1  0  1 -1  0]
[ 0 -1  0  1  0]
[ 0  1 -1  0  2]
[ 0  0  0 -1  0]


[2]
[ 0 -1  0  0  0]
[ 1  0  1 -1  0]
[ 0 -1  0  1  0]
[ 0  1 -1  0 -2]
[ 0  0  0  1  0]

[ 0 -1  0  0  0]
[ 1  0  1 -1  0]
[ 0 -1  0  1  0]
[ 0  1 -1  0  2]
[ 0  0  0 -1  0]


[1, 0, 1]
[ 0  1  1  0  0]
[-1  0  0  0  0]
[-1  0  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0]

[ 0  1  1  0  0]
[-1  0  0  0  0]
[-1  0  0 -1  0]
[ 0  0  1  0  2]
[ 0  0  0 -1  0]


[1, 0]
[ 0 -1  1  0  0]
[ 1  0  0  0  0]
[-1  0  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0]

[ 0 -1  1  0  0]
[ 1  0  0  0  0]
[-1  0  0 -1  0]
[ 0  0  1  0  2]
[ 0  0  0 -1  0]


[1]
[ 0  1 -1  0  0]
[-1  0  1  0  0]
[ 1 -1  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0]

[ 0  1 -1  0  0]
[-1  0  1  0  0]
[ 1 -1  0 -1  0]
[ 0  0  1  0  2]
[ 0  0  0 -1  0]


[0]
[ 0  1  0  0  0]
[-1  0 -1  0  0]
[ 0  1  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0]

[ 0  1  0  0  0]
[-1  0 -1  0  0]
[ 0  1  0 -1  0]
[ 0  0  1  0  2]
[ 0  0  0 -1  0]


[]
[ 0 -1  0  0  0]
[ 1  0 -1  0  0]
[ 0  1  0 -1  0]
[ 0  0  1  0 -2]
[ 0  0  0  1  0]

[ 0 -1  0  0  0]
[ 1  0 -1  0  0]
[ 0  1  0 -1  0]
[ 0  0  1  0  2]
[ 0  0  0 -1  0]


### reloading attached file domination5.py modified at 16:25:02 ###
sage: 
