Last login: Fri Sep 20 21:54:05 on ttys012

The default interactive shell is now zsh.
To update your account to use zsh, please run `chsh -s /bin/zsh`.
For more details, please visit https://support.apple.com/kb/HT208050.
clear ; /Applications/SageMath-10-2.app/Contents/Frameworks/Sage.framework/Versions/Current/venv/bin/sage ; exit
MA-C02K804RDR53:~ reading$ clear ; /Applications/SageMath-10-2.app/Contents/Frameworks/Sage.framework/Versions/Current/venv/bin/sage ; exit















┌────────────────────────────────────────────────────────────────────┐
│ SageMath version 10.2, Release Date: 2023-12-03                    │
│ Using Python 3.11.1. Type "help()" for help.                       │
└────────────────────────────────────────────────────────────────────┘
sage: %attach /Users/reading/git/affine_dominance/domination4.py
---------------------------------------------------------------------------
OSError                                   Traceback (most recent call last)
Cell In [1], line 1
----> 1 get_ipython().run_line_magic('attach', '/Users/reading/git/affine_dominance/domination4.py')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/IPython/core/interactiveshell.py:2364, in InteractiveShell.run_line_magic(self, magic_name, line, _stack_depth)
   2362     kwargs['local_ns'] = self.get_local_scope(stack_depth)
   2363 with self.builtin_trap:
-> 2364     result = fn(*args, **kwargs)
   2365 return result

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/repl/ipython_extension.py:162, in SageMagics.attach(self, s)
    124 @line_magic
    125 def attach(self, s):
    126     r"""
    127     Attach the code contained in the file ``s``.
    128 
   (...)
    160         sage: shell.quit()
    161     """
--> 162     return self.shell.ex(load_wrap(s, attach=True))

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/IPython/core/interactiveshell.py:2743, in InteractiveShell.ex(self, cmd)
   2741 """Execute a normal python statement in user namespace."""
   2742 with self.builtin_trap:
-> 2743     exec(cmd, self.user_global_ns, self.user_ns)

File <string>:1

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/repl/load.py:245, in load(filename, globals, attach)
    243         break
    244 else:
--> 245     raise IOError('did not find file %r to load or attach' % filename)
    247 ext = os.path.splitext(fpath)[1].lower()
    248 if ext == '.py':

OSError: did not find file '/Users/reading/git/affine_dominance/domination4.py' to load or attach
sage: %attach /Users/reading/git/affine_dominance/software/domination4.py
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: coxnum=8
....: n=1
....: for v in sortables(A,c):
....:     print(n,v)
....:     n+=1
....:     Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in ra
....: nge((coxnum+2)*A.nrows()))
....:     fails=true
....:     for i in range(len(Ps)):
....:         for j in range(i+1,len(Ps)):
....:             if (Ps[i].intersection(Ps[j])).dimension()==0:
....:                 fails=false
....:                 break
....:     if fails:
....:         print('FAILS!')
....:         break
....: 
1 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]
2 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2]
3 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1]
4 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0]
5 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]
6 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 0, 1]
7 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 0]
8 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2]
9 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 0]
10 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1]
11 [0, 1, 2, 3, 0, 1, 2, 3, 0]
12 [0, 1, 2, 3, 0, 1, 2, 3, 1, 2, 3]
13 [0, 1, 2, 3, 0, 1, 2, 3, 1, 2]
14 [0, 1, 2, 3, 0, 1, 2, 3, 1]
15 [0, 1, 2, 3, 0, 1, 2, 3]
16 [0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
17 [0, 1, 2, 3, 0, 1, 2, 0, 1]
18 [0, 1, 2, 3, 0, 1, 2, 0]
19 [0, 1, 2, 3, 0, 1, 2, 1]
20 [0, 1, 2, 3, 0, 1, 2]
21 [0, 1, 2, 3, 0, 1, 0]
22 [0, 1, 2, 3, 0, 1]
23 [0, 1, 2, 3, 0, 2, 3]
24 [0, 1, 2, 3, 0, 2]
25 [0, 1, 2, 3, 0]
26 [0, 1, 2, 3, 1, 2, 3, 1, 2, 3]
27 [0, 1, 2, 3, 1, 2, 3, 1, 2]
28 [0, 1, 2, 3, 1, 2, 3, 1]
29 [0, 1, 2, 3, 1, 2, 3]
30 [0, 1, 2, 3, 1, 2, 1]
31 [0, 1, 2, 3, 1, 2]
32 [0, 1, 2, 3, 1]
33 [0, 1, 2, 3, 2, 3]
34 [0, 1, 2, 3, 2]
35 [0, 1, 2, 3]
36 [0, 1, 2, 0, 1, 0]
37 [0, 1, 2, 0, 1]
38 [0, 1, 2, 0]
39 [0, 1, 2, 1]
40 [0, 1, 2]
41 [0, 1, 3, 0]
42 [0, 1, 3]
43 [0, 1, 0]
44 [0, 1]
45 [0, 2, 3, 2, 3]
46 [0, 2, 3, 2]
47 [0, 2, 3]
48 [0, 2]
49 [0, 3]
50 [0]
51 [1, 2, 3, 1, 2, 3, 1, 2, 3]
52 [1, 2, 3, 1, 2, 3, 1, 2]
53 [1, 2, 3, 1, 2, 3, 1]
54 [1, 2, 3, 1, 2, 3]
55 [1, 2, 3, 1, 2, 1]
56 [1, 2, 3, 1, 2]
57 [1, 2, 3, 1]
58 [1, 2, 3, 2, 3]
59 [1, 2, 3, 2]
60 [1, 2, 3]
61 [1, 2, 1]
62 [1, 2]
63 [1, 3]
64 [1]
65 [2, 3, 2, 3]
66 [2, 3, 2]
67 [2, 3]
68 [2]
69 [3]
70 []
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: coxnum=10
....: n=1
....: for v in sortables(A,c):
....:     print(n,v)
....:     n+=1
....:     Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in ra
....: nge((coxnum+2)*A.nrows()))
....:     fails=true
....:     for i in range(len(Ps)):
....:         for j in range(i+1,len(Ps)):
....:             if (Ps[i].intersection(Ps[j])).dimension()==0:
....:                 fails=false
....:                 break
....:     if fails:
....:         print('FAILS!')
....:         break
....: 
1 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
2 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3]
3 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2]
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [4], line 12
     10 for i in range(len(Ps)):
     11     for j in range(i+Integer(1),len(Ps)):
---> 12         if (Ps[i].intersection(Ps[j])).dimension()==Integer(0):
     13             fails=false
     14             break

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1371, in Polyhedron_base5.intersection(self, other)
   1369 parent = self.parent()
   1370 try:
-> 1371     intersection = parent.element_class(parent, None, [new_ieqs, new_eqns])
   1373     # Force calculation of the vertices.
   1374     _ = intersection.n_vertices()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:179, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    177 elif Hrep is not None:
    178     ieqs, eqns = Hrep
--> 179     self._init_from_Hrepresentation(ieqs, eqns, **kwds)
    180 else:
    181     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:129, in Polyhedron_ppl._init_from_Hrepresentation(self, ieqs, eqns, minimize, verbose)
    106 def _init_from_Hrepresentation(self, ieqs, eqns, minimize=True, verbose=False):
    107     """
    108     Construct polyhedron from H-representation data.
    109 
   (...)
    127         sage: Polyhedron_ppl._init_from_Hrepresentation(p, [], [])
    128     """
--> 129     cs = self._convert_constraints_to_ppl(ieqs, eqns)
    130     if cs.empty():
    131         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'universe')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:534, in Polyhedron_ppl._convert_constraints_to_ppl(ieqs, eqns)
    532     ieqs = []
    533 for ieq in ieqs:
--> 534     cs.insert(Polyhedron_ppl._convert_constraint_to_ppl(ieq, INEQUALITY))
    535 if eqns is None:
    536     eqns = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:509, in Polyhedron_ppl._convert_constraint_to_ppl(c, typ)
    507 A = dc[1:]
    508 if typ == INEQUALITY:
--> 509     return Linear_Expression(A, b) >= 0
    510 else:
    511     return Linear_Expression(A, b) == 0

File ppl/linear_algebra.pyx:654, in ppl.linear_algebra.Linear_Expression.__init__()

File ppl/linear_algebra.pyx:49, in ppl.linear_algebra.PPL_Coefficient_from_pyobject()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/rings/integer.pyx:914, in sage.rings.integer.Integer.__richcmp__ (build/cythonized/sage/rings/integer.c:16498)()
    912     c = mpz_cmp_d((<Integer>left).value, d)
    913 else:
--> 914     return coercion_model.richcmp(left, right, op)
    915 
    916 return rich_to_bool_sgn(op, c)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:2021, in sage.structure.coerce.CoercionModel.richcmp (build/cythonized/sage/structure/coerce.c:26173)()
   2019 # Coerce to a common parent
   2020 try:
-> 2021     x, y = self.canonical_coercion(x, y)
   2022 except (TypeError, NotImplementedError):
   2023     pass

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1422, in sage.structure.coerce.CoercionModel.canonical_coercion (build/cythonized/sage/structure/coerce.c:18967)()
   1420             self._record_exception()
   1421 
-> 1422     raise TypeError("no common canonical parent for objects with parents: '%s' and '%s'"%(xp, yp))
   1423 
   1424 cpdef coercion_maps(self, R, S) noexcept:

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: coxnum=8
....: n=1
....: for v in sortables(A,c):
....:     print(n,v)
....:     n+=1
....:     Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in ra
....: nge((coxnum+2)*A.nrows()))
....:     fails=true
....:     for i in range(len(Ps)):
....:         for j in range(i+1,len(Ps)):
....:             if (Ps[i].intersection(Ps[j])).dimension()==0:
....:                 fails=false
....:                 break
....:     if fails:
....:         print('FAILS!')
....:         break
....: 
1 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]
2 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2]
3 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1]
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [5], line 8
      6 print(n,v)
      7 n+=Integer(1)
----> 8 Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in range((coxnum+Integer(2))*A.nrows()))
      9 fails=true
     10 for i in range(len(Ps)):

Cell In [5], line 8, in <genexpr>(.0)
      6 print(n,v)
      7 n+=Integer(1)
----> 8 Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in range((coxnum+Integer(2))*A.nrows()))
      9 fails=true
     10 for i in range(len(Ps)):

File ~/git/affine_dominance/software/domination4.py:146, in p_lambda_faster(B, la, seq)
    144 Ep = E(B, k, 1)
    145 Em = E(B, k, -1)
--> 146 Hp = Polyhedron(ieqs=[(0,)*(k+1)+(1,)+(0,)*(m-k-1)])
    147 Hm = Polyhedron(ieqs=[(0,)*(k+1)+(-1,)+(0,)*(m-k-1)])
    148 #print("Hp:   ",Hp,Hp.vertices(),Hp.rays(),Hp.lines(),"\n")
    149 #print("Hm:   ",Hm,Hm.vertices(),Hm.rays(),Hm.lines(),"\n\n")

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/constructor.py:768, in Polyhedron(vertices, rays, lines, ieqs, eqns, ambient_dim, base_ring, minimize, verbose, backend, mutable)
    766 if got_Vrep:
    767     Vrep = [vertices, rays, lines]
--> 768 return parent(Vrep, Hrep, convert=convert, verbose=verbose, mutable=mutable)

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: coxnum=8
....: n=1
....: for v in sortables(A,c):
....:     print(n,v)
....:     n+=1
....:     Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in ra
....: nge((coxnum+2)*A.nrows()))
....:     fails=true
....:     for i in range(len(Ps)):
....:         for j in range(i):
....:             if (Ps[i].intersection(Ps[j])).dimension()==0:
....:                 fails=false
....:                 break
....:     if fails:
....:         print('FAILS!')
....:         break
....: 
1 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]
2 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2]
3 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1]
4 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0]
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [6], line 8
      6 print(n,v)
      7 n+=Integer(1)
----> 8 Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in range((coxnum+Integer(2))*A.nrows()))
      9 fails=true
     10 for i in range(len(Ps)):

Cell In [6], line 8, in <genexpr>(.0)
      6 print(n,v)
      7 n+=Integer(1)
----> 8 Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in range((coxnum+Integer(2))*A.nrows()))
      9 fails=true
     10 for i in range(len(Ps)):

File ~/git/affine_dominance/software/domination4.py:159, in p_lambda_faster(B, la, seq)
    155         P=Ep*Pp
    156     else:
    157         #print("Pp:   ",Pp,Pp.vertices(),Pp.rays(),Pp.lines(),"\n")
    158         #print("Pm:   ",Pm,Pm.vertices(),Pm.rays(),Pm.lines(),"\n\n")
--> 159         P=(Ep*Pp).convex_hull(Em*Pm)
    160     B.mutate(k)
    161 return P

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4099, in sage.structure.element.Matrix.__mul__ (build/cythonized/sage/structure/element.c:35219)()
   4097 
   4098         if BOTH_ARE_ELEMENT(cl):
-> 4099             return coercion_model.bin_op(left, right, mul)
   4100 
   4101         cdef long value

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1222, in sage.structure.coerce.CoercionModel.bin_op (build/cythonized/sage/structure/coerce.c:15809)()
   1220 if action is not None:
   1221     if (<Action>action)._is_left:
-> 1222         return (<Action>action)._act_(x, y)
   1223     else:
   1224         return (<Action>action)._act_(y, x)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_actions.pyx:157, in sage.structure.coerce_actions.ActedUponAction._act_ (build/cythonized/sage/structure/coerce_actions.c:8579)()
    155     <... 'sage.structure.coerce_actions.ActedUponAction'>
    156 """
--> 157 return (<Element>x)._acted_upon_(g, not self._is_left)
    158 
    159 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:949, in sage.structure.element.Element._acted_upon_ (build/cythonized/sage/structure/element.c:16495)()
    947     return None
    948 
--> 949 cpdef _acted_upon_(self, x, bint self_on_left) noexcept:
    950     """
    951     Use this method to implement ``self`` acted on by x.

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1450, in Polyhedron_base5._acted_upon_(self, actor, self_on_left)
   1448         raise ValueError("matrices should act on the left")
   1449     else:
-> 1450         return self.linear_transformation(actor)
   1451 else:
   1452     return self.dilation(actor)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1879, in Polyhedron_base5.linear_transformation(self, linear_transf, new_base_ring)
   1873     pref_rep = 'Vrep' if self.n_vertices() <= self.n_inequalities() else 'Hrep'
   1875     return new_parent.element_class(new_parent, [new_vertices, new_rays, new_lines],
   1876                                     [new_inequalities, new_equations],
   1877                                     Vrep_minimal=True, Hrep_minimal=True, pref_rep=pref_rep)
-> 1879 return new_parent.element_class(new_parent, [tuple(new_vertices), tuple(new_rays), tuple(new_lines)], None)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:174, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    171     lines = tuple(lines)
    173 if vertices or rays or lines:
--> 174     self._init_from_Vrepresentation(vertices, rays, lines, **kwds)
    175 else:
    176     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:99, in Polyhedron_ppl._init_from_Vrepresentation(self, vertices, rays, lines, minimize, verbose)
     72 def _init_from_Vrepresentation(self, vertices, rays, lines, minimize=True, verbose=False):
     73     """
     74     Construct polyhedron from V-representation data.
     75 
   (...)
     97         sage: Polyhedron_ppl._init_from_Vrepresentation(p, [], [], [])
     98     """
---> 99     gs = self._convert_generators_to_ppl(vertices, rays, lines)
    100     if gs.empty():
    101         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'empty')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:473, in Polyhedron_ppl._convert_generators_to_ppl(vertices, rays, lines)
    471     vertices = []
    472 for v in vertices:
--> 473     gs.insert(Polyhedron_ppl._convert_generator_to_ppl(v, VERTEX))
    474 if rays is None:
    475     rays = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:442, in Polyhedron_ppl._convert_generator_to_ppl(v, typ)
    440 d = LCM_list([denominator(v_i) for v_i in v])
    441 if d.is_one():
--> 442     return ob(Linear_Expression(v, 0))
    443 else:
    444     dv = [ d*v_i for v_i in v ]

File ppl/linear_algebra.pyx:654, in ppl.linear_algebra.Linear_Expression.__init__()

File ppl/linear_algebra.pyx:49, in ppl.linear_algebra.PPL_Coefficient_from_pyobject()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:1107, in sage.structure.element.Element.__richcmp__ (build/cythonized/sage/structure/element.c:18121)()
   1105         return (<Element>self)._richcmp_(other, op)
   1106     else:
-> 1107         return coercion_model.richcmp(self, other, op)
   1108 
   1109 cpdef _richcmp_(left, right, int op) noexcept:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:2021, in sage.structure.coerce.CoercionModel.richcmp (build/cythonized/sage/structure/coerce.c:26173)()
   2019 # Coerce to a common parent
   2020 try:
-> 2021     x, y = self.canonical_coercion(x, y)
   2022 except (TypeError, NotImplementedError):
   2023     pass

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1422, in sage.structure.coerce.CoercionModel.canonical_coercion (build/cythonized/sage/structure/coerce.c:18956)()
   1420             self._record_exception()
   1421 
-> 1422     raise TypeError("no common canonical parent for objects with parents: '%s' and '%s'"%(xp, yp))
   1423 
   1424 cpdef coercion_maps(self, R, S) noexcept:

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: coxnum=8
....: n=1
....: for v in sortables(A,c):
....:     print(n,v)
....:     n+=1
....:     Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in ra
....: nge((coxnum+2)*A.nrows()))
....:     fails=true
....:     for i in range(len(Ps)):
....:         for j in range(i+1,len(Ps)):
....:             if (Ps[i].intersection(Ps[j])).dimension()==0:
....:                 fails=false
....:                 break
....:     if fails:
....:         print('FAILS!')
....:         break
....: 
1 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]
2 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2]
3 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1]
4 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0]
5 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [7], line 8
      6 print(n,v)
      7 n+=Integer(1)
----> 8 Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in range((coxnum+Integer(2))*A.nrows()))
      9 fails=true
     10 for i in range(len(Ps)):

Cell In [7], line 8, in <genexpr>(.0)
      6 print(n,v)
      7 n+=Integer(1)
----> 8 Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in range((coxnum+Integer(2))*A.nrows()))
      9 fails=true
     10 for i in range(len(Ps)):

File ~/git/affine_dominance/software/domination4.py:151, in p_lambda_faster(B, la, seq)
    148 #print("Hp:   ",Hp,Hp.vertices(),Hp.rays(),Hp.lines(),"\n")
    149 #print("Hm:   ",Hm,Hm.vertices(),Hm.rays(),Hm.lines(),"\n\n")
    150 Pp = P.intersection(Hp)
--> 151 Pm = P.intersection(Hm)
    152 if Pp.dimension() < rk:
    153     P=Em*Pm

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1371, in Polyhedron_base5.intersection(self, other)
   1369 parent = self.parent()
   1370 try:
-> 1371     intersection = parent.element_class(parent, None, [new_ieqs, new_eqns])
   1373     # Force calculation of the vertices.
   1374     _ = intersection.n_vertices()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:70, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
---> 70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:195, in Polyhedron_ppl.set_immutable(self)
    193         raise e
    194 if not hasattr(self, '_Hrepresentation'):
--> 195     self._init_Hrepresentation_from_ppl(True)
    196 self._is_mutable = False

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:344, in Polyhedron_ppl._init_Hrepresentation_from_ppl(self, minimize)
    342 for c in cs:
    343     if c.is_inequality():
--> 344         parent._make_Inequality(self, (c.inhomogeneous_term(),) + c.coefficients())
    345     elif c.is_equality():
    346         parent._make_Equation(self, (c.inhomogeneous_term(),) + c.coefficients())

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:1069, in Polyhedra_base._make_Inequality(self, polyhedron, data)
   1067 except IndexError:
   1068     obj = Inequality(self)
-> 1069 obj._set_data(polyhedron, data)
   1070 return obj

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/representation.py:439, in Hrepresentation._set_data(self, polyhedron, data)
    436 if len(data) != self._vector.degree():
    437     raise ValueError('H-representation data requires a list of length ambient_dim+1')
--> 439 self._vector[:] = data
    440 self._A[:] = data[1:]
    441 self._b = self._base_ring(data[0])

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/modules/free_module_element.pyx:1893, in sage.modules.free_module_element.FreeModuleElement.__setitem__ (build/cythonized/sage/modules/free_module_element.c:20047)()
   1891 if isinstance(i, slice):
   1892     PySlice_GetIndicesEx(i, d, &start, &stop, &step, &slicelength)
-> 1893     values = [R(x) for x in value]
   1894     if len(values) != slicelength:
   1895         raise IndexError("slice assignment would change dimension")

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/parent.pyx:901, in sage.structure.parent.Parent.__call__ (build/cythonized/sage/structure/parent.c:12658)()
    899 if mor is not None:
    900     if no_extra_args:
--> 901         return mor._call_(x)
    902     else:
    903         return mor._call_with_args(x, args, kwds)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_maps.pyx:158, in sage.structure.coerce_maps.DefaultConvertMap_unique._call_ (build/cythonized/sage/structure/coerce_maps.c:6834)()
    156 cdef Parent C = self._codomain
    157 try:
--> 158     return C._element_constructor(x)
    159 except Exception:
    160     if print_warnings:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/rings/rational.pyx:536, in sage.rings.rational.Rational.__init__ (build/cythonized/sage/rings/rational.cpp:14305)()
    534     """
    535     if x is not None:
--> 536         self.__set_value(x, base)
    537 
    538 def __reduce__(self):

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/rings/rational.pyx:670, in sage.rings.rational.Rational._Rational__set_value (build/cythonized/sage/rings/rational.cpp:16246)()
    668         raise TypeError("unable to convert {!r} to a rational".format(x))
    669 
--> 670 elif isinstance(x, fractions.Fraction):
    671     mpz_set(mpq_numref(self.value), (<integer.Integer> integer.Integer(x.numerator)).value)
    672     mpz_set(mpq_denref(self.value), (<integer.Integer> integer.Integer(x.denominator)).value)

File <frozen abc>:117, in __instancecheck__(cls, instance)

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: coxnum=10
....: n=1
....: for v in sortables(A,c):
....:     print(n,v)
....:     n+=1
....:     Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in ra
....: nge((coxnum+2)*A.nrows()))
....:     fails=true
....:     for i in range(len(Ps)):
....:         for j in range(i+1,len(Ps)):
....:             if (Ps[i].intersection(Ps[j])).dimension()==0:
....:                 fails=false
....:                 break
....:     if fails:
....:         print('FAILS!')
....:         break
....: 
1 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
2 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3]
3 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2]
4 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1]
5 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0]
6 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
7 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
8 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
9 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
10 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3]
11 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
12 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0]
13 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2]
14 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 0]
15 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1]
16 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0]
17 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4]
18 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3]
19 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2]
20 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1]
21 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
22 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1]
23 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0]
24 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
25 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0]
26 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
27 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
28 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2]
29 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1]
30 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3]
31 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0]
32 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
33 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0]
34 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 1]
35 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2]
36 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 0]
37 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1]
38 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2, 3, 4]
39 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2, 3]
40 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2]
41 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0]
42 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
43 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
^C---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:1066, in Polyhedra_base._make_Inequality(self, polyhedron, data)
   1065 try:
-> 1066     obj = self._Inequality_pool.pop()
   1067 except IndexError:

IndexError: pop from empty list

During handling of the above exception, another exception occurred:

KeyboardInterrupt                         Traceback (most recent call last)
Cell In [8], line 8
      6 print(n,v)
      7 n+=Integer(1)
----> 8 Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in range((coxnum+Integer(2))*A.nrows()))
      9 fails=true
     10 for i in range(len(Ps)):

Cell In [8], line 8, in <genexpr>(.0)
      6 print(n,v)
      7 n+=Integer(1)
----> 8 Ps=list(p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i)) for i in range((coxnum+Integer(2))*A.nrows()))
      9 fails=true
     10 for i in range(len(Ps)):

File ~/git/affine_dominance/software/domination4.py:159, in p_lambda_faster(B, la, seq)
    155         P=Ep*Pp
    156     else:
    157         #print("Pp:   ",Pp,Pp.vertices(),Pp.rays(),Pp.lines(),"\n")
    158         #print("Pm:   ",Pm,Pm.vertices(),Pm.rays(),Pm.lines(),"\n\n")
--> 159         P=(Ep*Pp).convex_hull(Em*Pm)
    160     B.mutate(k)
    161 return P

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1312, in Polyhedron_base5.convex_hull(self, other)
   1310 hull_rays = self.rays() + other.rays()
   1311 hull_lines = self.lines() + other.lines()
-> 1312 return self.parent().element_class(self.parent(), [hull_vertices, hull_rays, hull_lines], None)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:70, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
---> 70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:195, in Polyhedron_ppl.set_immutable(self)
    193         raise e
    194 if not hasattr(self, '_Hrepresentation'):
--> 195     self._init_Hrepresentation_from_ppl(True)
    196 self._is_mutable = False

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:344, in Polyhedron_ppl._init_Hrepresentation_from_ppl(self, minimize)
    342 for c in cs:
    343     if c.is_inequality():
--> 344         parent._make_Inequality(self, (c.inhomogeneous_term(),) + c.coefficients())
    345     elif c.is_equality():
    346         parent._make_Equation(self, (c.inhomogeneous_term(),) + c.coefficients())

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:1068, in Polyhedra_base._make_Inequality(self, polyhedron, data)
   1066     obj = self._Inequality_pool.pop()
   1067 except IndexError:
-> 1068     obj = Inequality(self)
   1069 obj._set_data(polyhedron, data)
   1070 return obj

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/representation.py:410, in Hrepresentation.__init__(self, polyhedron_parent)
    408 self._base_ring = polyhedron_parent.base_ring()
    409 self._vector = polyhedron_parent.Hrepresentation_space()(0)
--> 410 self._A = polyhedron_parent.ambient_space()(0)
    411 self._b = polyhedron_parent.base_ring()(0)
    412 self._index = 0

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/misc/cachefunc.pyx:2329, in sage.misc.cachefunc.CachedMethodCallerNoArgs.__call__ (build/cythonized/sage/misc/cachefunc.c:16226)()
   2327 if self.cache is None:
   2328     f = self.f
-> 2329     self.cache = f(self._instance)
   2330 return self.cache
   2331 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/parent.py:482, in Polyhedra_base.Vrepresentation_space(self)
    480 if self.base_ring() in Fields():
    481     from sage.modules.free_module import VectorSpace
--> 482     return VectorSpace(self.base_ring(), self.ambient_dim())
    483 else:
    484     from sage.modules.free_module import FreeModule

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/modules/free_module.py:571, in VectorSpace(K, dimension_or_basis_keys, sparse, inner_product_matrix, with_basis, dimension, basis_keys, **args)
    569 if sparse not in (True, False):
    570     raise TypeError("Argument sparse (= %s) must be a boolean." % sparse)
--> 571 return FreeModule(K, dimension_or_basis_keys, sparse, inner_product_matrix,
    572                   with_basis=with_basis, rank=dimension, basis_keys=basis_keys,
    573                   **args)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/modules/free_module.py:529, in FreeModule(base_ring, rank_or_basis_keys, sparse, inner_product_matrix, with_basis, rank, basis_keys, **args)
    527 elif with_basis == 'standard':
    528     if rank is not None:
--> 529         return FreeModuleFactory_with_standard_basis(base_ring, rank, sparse,
    530                                                     inner_product_matrix, **args)
    531     else:
    532         if inner_product_matrix is not None:

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
### reloading attached file domination4.py modified at 01:55:20 ###
### reloading attached file domination4.py modified at 01:56:45 ###
### reloading attached file domination4.py modified at 02:12:31 ###
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: coxnum=8
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+1) for
....: i in range(2)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....: 
1 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]
FAILURE! 4
2 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2]
FAILURE! 4
3 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1]
FAILURE! 4
4 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0]
FAILURE! 4
5 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]
FAILURE! 4
6 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 0, 1]
FAILURE! 4
7 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 0]
FAILURE! 4
8 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2]
FAILURE! 4
9 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 0]
FAILURE! 4
10 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1]
FAILURE! 4
11 [0, 1, 2, 3, 0, 1, 2, 3, 0]
FAILURE! 4
12 [0, 1, 2, 3, 0, 1, 2, 3, 1, 2, 3]
FAILURE! 4
13 [0, 1, 2, 3, 0, 1, 2, 3, 1, 2]
FAILURE! 4
14 [0, 1, 2, 3, 0, 1, 2, 3, 1]
FAILURE! 4
15 [0, 1, 2, 3, 0, 1, 2, 3]
FAILURE! 4
16 [0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
FAILURE! 4
17 [0, 1, 2, 3, 0, 1, 2, 0, 1]
FAILURE! 4
18 [0, 1, 2, 3, 0, 1, 2, 0]
FAILURE! 4
19 [0, 1, 2, 3, 0, 1, 2, 1]
FAILURE! 4
20 [0, 1, 2, 3, 0, 1, 2]
FAILURE! 4
21 [0, 1, 2, 3, 0, 1, 0]
FAILURE! 4
22 [0, 1, 2, 3, 0, 1]
FAILURE! 4
23 [0, 1, 2, 3, 0, 2, 3]
FAILURE! 4
24 [0, 1, 2, 3, 0, 2]
FAILURE! 4
25 [0, 1, 2, 3, 0]
FAILURE! 4
26 [0, 1, 2, 3, 1, 2, 3, 1, 2, 3]
FAILURE! 3
27 [0, 1, 2, 3, 1, 2, 3, 1, 2]
FAILURE! 3
28 [0, 1, 2, 3, 1, 2, 3, 1]
FAILURE! 3
29 [0, 1, 2, 3, 1, 2, 3]
FAILURE! 3
30 [0, 1, 2, 3, 1, 2, 1]
FAILURE! 3
31 [0, 1, 2, 3, 1, 2]
FAILURE! 3
32 [0, 1, 2, 3, 1]
FAILURE! 3
33 [0, 1, 2, 3, 2, 3]
FAILURE! 3
34 [0, 1, 2, 3, 2]
FAILURE! 3
35 [0, 1, 2, 3]
FAILURE! 3
36 [0, 1, 2, 0, 1, 0]
FAILURE! 3
37 [0, 1, 2, 0, 1]
FAILURE! 3
38 [0, 1, 2, 0]
FAILURE! 3
39 [0, 1, 2, 1]
FAILURE! 1
40 [0, 1, 2]
FAILURE! 1
41 [0, 1, 3, 0]
FAILURE! 1
42 [0, 1, 3]
43 [0, 1, 0]
FAILURE! 1
44 [0, 1]
45 [0, 2, 3, 2, 3]
FAILURE! 2
46 [0, 2, 3, 2]
FAILURE! 2
47 [0, 2, 3]
FAILURE! 2
48 [0, 2]
49 [0, 3]
50 [0]
51 [1, 2, 3, 1, 2, 3, 1, 2, 3]
FAILURE! 4
52 [1, 2, 3, 1, 2, 3, 1, 2]
FAILURE! 4
53 [1, 2, 3, 1, 2, 3, 1]
FAILURE! 4
54 [1, 2, 3, 1, 2, 3]
FAILURE! 4
55 [1, 2, 3, 1, 2, 1]
FAILURE! 4
56 [1, 2, 3, 1, 2]
FAILURE! 4
57 [1, 2, 3, 1]
FAILURE! 4
58 [1, 2, 3, 2, 3]
FAILURE! 4
59 [1, 2, 3, 2]
FAILURE! 4
60 [1, 2, 3]
FAILURE! 4
61 [1, 2, 1]
FAILURE! 3
62 [1, 2]
FAILURE! 3
63 [1, 3]
FAILURE! 1
64 [1]
FAILURE! 1
65 [2, 3, 2, 3]
FAILURE! 2
66 [2, 3, 2]
FAILURE! 2
67 [2, 3]
FAILURE! 2
68 [2]
69 [3]
70 []
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: coxnum=8
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+1) for
....: i in range(coxnum)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....: 
1 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]
2 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2]
3 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1]
4 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0]
5 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]
6 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 0, 1]
7 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 0]
8 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2]
9 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 0]
10 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1]
11 [0, 1, 2, 3, 0, 1, 2, 3, 0]
12 [0, 1, 2, 3, 0, 1, 2, 3, 1, 2, 3]
13 [0, 1, 2, 3, 0, 1, 2, 3, 1, 2]
14 [0, 1, 2, 3, 0, 1, 2, 3, 1]
15 [0, 1, 2, 3, 0, 1, 2, 3]
16 [0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
17 [0, 1, 2, 3, 0, 1, 2, 0, 1]
18 [0, 1, 2, 3, 0, 1, 2, 0]
19 [0, 1, 2, 3, 0, 1, 2, 1]
20 [0, 1, 2, 3, 0, 1, 2]
21 [0, 1, 2, 3, 0, 1, 0]
22 [0, 1, 2, 3, 0, 1]
23 [0, 1, 2, 3, 0, 2, 3]
24 [0, 1, 2, 3, 0, 2]
25 [0, 1, 2, 3, 0]
26 [0, 1, 2, 3, 1, 2, 3, 1, 2, 3]
27 [0, 1, 2, 3, 1, 2, 3, 1, 2]
28 [0, 1, 2, 3, 1, 2, 3, 1]
29 [0, 1, 2, 3, 1, 2, 3]
30 [0, 1, 2, 3, 1, 2, 1]
31 [0, 1, 2, 3, 1, 2]
32 [0, 1, 2, 3, 1]
33 [0, 1, 2, 3, 2, 3]
34 [0, 1, 2, 3, 2]
35 [0, 1, 2, 3]
36 [0, 1, 2, 0, 1, 0]
37 [0, 1, 2, 0, 1]
38 [0, 1, 2, 0]
39 [0, 1, 2, 1]
40 [0, 1, 2]
41 [0, 1, 3, 0]
42 [0, 1, 3]
43 [0, 1, 0]
44 [0, 1]
45 [0, 2, 3, 2, 3]
46 [0, 2, 3, 2]
47 [0, 2, 3]
48 [0, 2]
49 [0, 3]
50 [0]
51 [1, 2, 3, 1, 2, 3, 1, 2, 3]
52 [1, 2, 3, 1, 2, 3, 1, 2]
53 [1, 2, 3, 1, 2, 3, 1]
54 [1, 2, 3, 1, 2, 3]
55 [1, 2, 3, 1, 2, 1]
56 [1, 2, 3, 1, 2]
57 [1, 2, 3, 1]
58 [1, 2, 3, 2, 3]
59 [1, 2, 3, 2]
60 [1, 2, 3]
61 [1, 2, 1]
62 [1, 2]
63 [1, 3]
64 [1]
65 [2, 3, 2, 3]
66 [2, 3, 2]
67 [2, 3]
68 [2]
69 [3]
70 []
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: coxnum=8
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+1) for
....: i in range(2)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]
FAILURE! 4
sage: A=CartanMatrix(['C',4])
....: c=[0,1,2,3]
....: coxnum=8
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+1) for
....: i in range(coxnum)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]
2 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2]
3 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1]
4 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0]
5 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]
6 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 0, 1]
7 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 0]
8 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2]
9 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 0]
10 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1]
11 [0, 1, 2, 3, 0, 1, 2, 3, 0]
12 [0, 1, 2, 3, 0, 1, 2, 3, 1, 2, 3]
13 [0, 1, 2, 3, 0, 1, 2, 3, 1, 2]
14 [0, 1, 2, 3, 0, 1, 2, 3, 1]
15 [0, 1, 2, 3, 0, 1, 2, 3]
16 [0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
17 [0, 1, 2, 3, 0, 1, 2, 0, 1]
18 [0, 1, 2, 3, 0, 1, 2, 0]
19 [0, 1, 2, 3, 0, 1, 2, 1]
20 [0, 1, 2, 3, 0, 1, 2]
21 [0, 1, 2, 3, 0, 1, 0]
22 [0, 1, 2, 3, 0, 1]
23 [0, 1, 2, 3, 0, 2, 3]
24 [0, 1, 2, 3, 0, 2]
25 [0, 1, 2, 3, 0]
26 [0, 1, 2, 3, 1, 2, 3, 1, 2, 3]
27 [0, 1, 2, 3, 1, 2, 3, 1, 2]
28 [0, 1, 2, 3, 1, 2, 3, 1]
29 [0, 1, 2, 3, 1, 2, 3]
30 [0, 1, 2, 3, 1, 2, 1]
31 [0, 1, 2, 3, 1, 2]
32 [0, 1, 2, 3, 1]
33 [0, 1, 2, 3, 2, 3]
34 [0, 1, 2, 3, 2]
35 [0, 1, 2, 3]
36 [0, 1, 2, 0, 1, 0]
37 [0, 1, 2, 0, 1]
38 [0, 1, 2, 0]
39 [0, 1, 2, 1]
40 [0, 1, 2]
41 [0, 1, 3, 0]
42 [0, 1, 3]
43 [0, 1, 0]
44 [0, 1]
45 [0, 2, 3, 2, 3]
46 [0, 2, 3, 2]
47 [0, 2, 3]
48 [0, 2]
49 [0, 3]
50 [0]
51 [1, 2, 3, 1, 2, 3, 1, 2, 3]
52 [1, 2, 3, 1, 2, 3, 1, 2]
53 [1, 2, 3, 1, 2, 3, 1]
54 [1, 2, 3, 1, 2, 3]
55 [1, 2, 3, 1, 2, 1]
56 [1, 2, 3, 1, 2]
57 [1, 2, 3, 1]
58 [1, 2, 3, 2, 3]
59 [1, 2, 3, 2]
60 [1, 2, 3]
61 [1, 2, 1]
62 [1, 2]
63 [1, 3]
64 [1]
65 [2, 3, 2, 3]
66 [2, 3, 2]
67 [2, 3]
68 [2]
69 [3]
70 []
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: coxnum=8
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+1) for
....: i in range(coxnum)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
2 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3]
3 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2]
4 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1]
5 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0]
6 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
7 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
8 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
9 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
10 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3]
11 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
12 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0]
13 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2]
14 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 0]
15 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1]
16 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0]
17 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4]
18 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3]
19 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2]
20 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1]
21 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
22 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1]
23 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0]
24 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
25 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0]
26 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
27 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
28 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2]
29 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1]
30 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3]
31 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0]
32 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
33 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0]
34 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 1]
35 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2]
36 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 0]
37 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1]
38 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2, 3, 4]
39 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2, 3]
40 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2]
41 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0]
42 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
43 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
44 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
45 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1]
46 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4]
47 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 1, 2]
48 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 1]
49 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3]
50 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 1]
51 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2]
52 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1]
53 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2, 3, 4]
54 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2, 3]
55 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2]
56 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
57 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
58 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1]
59 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0]
60 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 1]
61 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
62 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0]
63 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
64 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 2]
65 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
66 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2, 1]
67 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2]
68 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1]
69 [0, 1, 2, 3, 4, 0, 1, 2, 3, 2]
70 [0, 1, 2, 3, 4, 0, 1, 2, 3]
71 [0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0]
72 [0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
73 [0, 1, 2, 3, 4, 0, 1, 2, 0]
74 [0, 1, 2, 3, 4, 0, 1, 2, 1]
75 [0, 1, 2, 3, 4, 0, 1, 2]
76 [0, 1, 2, 3, 4, 0, 1, 3, 4, 0]
77 [0, 1, 2, 3, 4, 0, 1, 3, 4]
78 [0, 1, 2, 3, 4, 0, 1, 3, 0]
79 [0, 1, 2, 3, 4, 0, 1, 3]
80 [0, 1, 2, 3, 4, 0, 1, 0]
81 [0, 1, 2, 3, 4, 0, 1]
82 [0, 1, 2, 3, 4, 0, 2, 3, 4, 2, 3, 4]
83 [0, 1, 2, 3, 4, 0, 2, 3, 4, 2, 3]
84 [0, 1, 2, 3, 4, 0, 2, 3, 4, 2]
85 [0, 1, 2, 3, 4, 0, 2, 3, 4]
86 [0, 1, 2, 3, 4, 0, 2, 3, 2]
87 [0, 1, 2, 3, 4, 0, 2, 3]
88 [0, 1, 2, 3, 4, 0, 2]
89 [0, 1, 2, 3, 4, 0, 3, 4]
90 [0, 1, 2, 3, 4, 0, 3]
91 [0, 1, 2, 3, 4, 0]
92 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
93 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
94 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
95 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1]
96 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
97 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2]
98 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1]
99 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
100 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1]
101 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
102 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1]
103 [0, 1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4]
104 [0, 1, 2, 3, 4, 1, 2, 3, 4, 2, 3]
105 [0, 1, 2, 3, 4, 1, 2, 3, 4, 2]
106 [0, 1, 2, 3, 4, 1, 2, 3, 4]
107 [0, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
108 [0, 1, 2, 3, 4, 1, 2, 3, 1, 2]
109 [0, 1, 2, 3, 4, 1, 2, 3, 1]
110 [0, 1, 2, 3, 4, 1, 2, 3, 2]
111 [0, 1, 2, 3, 4, 1, 2, 3]
112 [0, 1, 2, 3, 4, 1, 2, 1]
113 [0, 1, 2, 3, 4, 1, 2]
114 [0, 1, 2, 3, 4, 1, 3, 4]
115 [0, 1, 2, 3, 4, 1, 3]
116 [0, 1, 2, 3, 4, 1]
117 [0, 1, 2, 3, 4, 2, 3, 4, 2, 3, 4]
118 [0, 1, 2, 3, 4, 2, 3, 4, 2, 3]
119 [0, 1, 2, 3, 4, 2, 3, 4, 2]
120 [0, 1, 2, 3, 4, 2, 3, 4]
121 [0, 1, 2, 3, 4, 2, 3, 2]
122 [0, 1, 2, 3, 4, 2, 3]
123 [0, 1, 2, 3, 4, 2]
124 [0, 1, 2, 3, 4, 3, 4]
125 [0, 1, 2, 3, 4, 3]
126 [0, 1, 2, 3, 4]
127 [0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
128 [0, 1, 2, 3, 0, 1, 2, 0, 1]
129 [0, 1, 2, 3, 0, 1, 2, 0]
130 [0, 1, 2, 3, 0, 1, 2, 1]
131 [0, 1, 2, 3, 0, 1, 2]
132 [0, 1, 2, 3, 0, 1, 0]
133 [0, 1, 2, 3, 0, 1]
134 [0, 1, 2, 3, 0, 2]
135 [0, 1, 2, 3, 0]
136 [0, 1, 2, 3, 1, 2, 1]
137 [0, 1, 2, 3, 1, 2]
138 [0, 1, 2, 3, 1]
139 [0, 1, 2, 3, 2]
140 [0, 1, 2, 3]
141 [0, 1, 2, 4, 0, 1, 0]
142 [0, 1, 2, 4, 0, 1]
143 [0, 1, 2, 4, 0]
144 [0, 1, 2, 4, 1]
145 [0, 1, 2, 4]
146 [0, 1, 2, 0, 1, 0]
147 [0, 1, 2, 0, 1]
148 [0, 1, 2, 0]
149 [0, 1, 2, 1]
150 [0, 1, 2]
151 [0, 1, 3, 4, 0, 3, 4]
152 [0, 1, 3, 4, 0, 3]
153 [0, 1, 3, 4, 0]
154 [0, 1, 3, 4, 3, 4]
155 [0, 1, 3, 4, 3]
156 [0, 1, 3, 4]
157 [0, 1, 3, 0]
158 [0, 1, 3]
159 [0, 1, 4, 0]
160 [0, 1, 4]
161 [0, 1, 0]
162 [0, 1]
163 [0, 2, 3, 4, 2, 3, 4, 2, 3, 4]
164 [0, 2, 3, 4, 2, 3, 4, 2, 3]
165 [0, 2, 3, 4, 2, 3, 4, 2]
166 [0, 2, 3, 4, 2, 3, 4]
167 [0, 2, 3, 4, 2, 3, 2]
168 [0, 2, 3, 4, 2, 3]
169 [0, 2, 3, 4, 2]
170 [0, 2, 3, 4, 3, 4]
171 [0, 2, 3, 4, 3]
172 [0, 2, 3, 4]
173 [0, 2, 3, 2]
174 [0, 2, 3]
175 [0, 2, 4]
176 [0, 2]
177 [0, 3, 4, 3, 4]
178 [0, 3, 4, 3]
179 [0, 3, 4]
180 [0, 3]
181 [0, 4]
182 [0]
183 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
184 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
185 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
186 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1]
187 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
188 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2]
189 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1]
190 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
191 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1]
192 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
193 [1, 2, 3, 4, 1, 2, 3, 4, 1]
194 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4]
195 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3]
196 [1, 2, 3, 4, 1, 2, 3, 4, 2]
197 [1, 2, 3, 4, 1, 2, 3, 4]
198 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
199 [1, 2, 3, 4, 1, 2, 3, 1, 2]
200 [1, 2, 3, 4, 1, 2, 3, 1]
201 [1, 2, 3, 4, 1, 2, 3, 2]
202 [1, 2, 3, 4, 1, 2, 3]
203 [1, 2, 3, 4, 1, 2, 1]
204 [1, 2, 3, 4, 1, 2]
205 [1, 2, 3, 4, 1, 3, 4]
206 [1, 2, 3, 4, 1, 3]
207 [1, 2, 3, 4, 1]
208 [1, 2, 3, 4, 2, 3, 4, 2, 3, 4]
209 [1, 2, 3, 4, 2, 3, 4, 2, 3]
210 [1, 2, 3, 4, 2, 3, 4, 2]
211 [1, 2, 3, 4, 2, 3, 4]
212 [1, 2, 3, 4, 2, 3, 2]
213 [1, 2, 3, 4, 2, 3]
214 [1, 2, 3, 4, 2]
215 [1, 2, 3, 4, 3, 4]
216 [1, 2, 3, 4, 3]
217 [1, 2, 3, 4]
218 [1, 2, 3, 1, 2, 1]
219 [1, 2, 3, 1, 2]
220 [1, 2, 3, 1]
221 [1, 2, 3, 2]
222 [1, 2, 3]
223 [1, 2, 4, 1]
224 [1, 2, 4]
225 [1, 2, 1]
226 [1, 2]
227 [1, 3, 4, 3, 4]
228 [1, 3, 4, 3]
229 [1, 3, 4]
230 [1, 3]
231 [1, 4]
232 [1]
233 [2, 3, 4, 2, 3, 4, 2, 3, 4]
234 [2, 3, 4, 2, 3, 4, 2, 3]
235 [2, 3, 4, 2, 3, 4, 2]
236 [2, 3, 4, 2, 3, 4]
237 [2, 3, 4, 2, 3, 2]
238 [2, 3, 4, 2, 3]
239 [2, 3, 4, 2]
240 [2, 3, 4, 3, 4]
241 [2, 3, 4, 3]
242 [2, 3, 4]
243 [2, 3, 2]
244 [2, 3]
245 [2, 4]
246 [2]
247 [3, 4, 3, 4]
248 [3, 4, 3]
249 [3, 4]
250 [3]
251 [4]
252 []
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: coxnum=8
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+1) for
....: i in range(3)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
FAILURE! 4
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: coxnum=8
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+1) for
....: i in range(4)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
FAILURE! 4
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: coxnum=10
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+1) for
....: i in range(coxnum)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
2 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3]
3 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2]
4 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1]
5 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0]
6 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
7 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
8 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
9 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
10 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3]
11 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
12 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0]
13 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2]
14 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 0]
15 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1]
16 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0]
17 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4]
18 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3]
19 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2]
20 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1]
21 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
22 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1]
23 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0]
24 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
25 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0]
26 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
27 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
28 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2]
29 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1]
30 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3]
31 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0]
32 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
33 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 0]
34 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 1]
35 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2]
36 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 0]
37 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1]
38 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2, 3, 4]
39 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2, 3]
40 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 2]
41 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0]
42 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
43 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
44 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
45 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1]
46 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 4]
47 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 1, 2]
48 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3, 1]
49 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 3]
50 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2, 1]
51 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1, 2]
52 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 1]
53 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2, 3, 4]
54 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2, 3]
55 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2]
56 [0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
57 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
58 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1]
59 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0]
60 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 1]
61 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
62 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0]
63 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
64 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 2]
65 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
66 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2, 1]
67 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2]
68 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1]
69 [0, 1, 2, 3, 4, 0, 1, 2, 3, 2]
70 [0, 1, 2, 3, 4, 0, 1, 2, 3]
71 [0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0]
72 [0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
73 [0, 1, 2, 3, 4, 0, 1, 2, 0]
74 [0, 1, 2, 3, 4, 0, 1, 2, 1]
75 [0, 1, 2, 3, 4, 0, 1, 2]
76 [0, 1, 2, 3, 4, 0, 1, 3, 4, 0]
77 [0, 1, 2, 3, 4, 0, 1, 3, 4]
78 [0, 1, 2, 3, 4, 0, 1, 3, 0]
79 [0, 1, 2, 3, 4, 0, 1, 3]
80 [0, 1, 2, 3, 4, 0, 1, 0]
81 [0, 1, 2, 3, 4, 0, 1]
82 [0, 1, 2, 3, 4, 0, 2, 3, 4, 2, 3, 4]
83 [0, 1, 2, 3, 4, 0, 2, 3, 4, 2, 3]
84 [0, 1, 2, 3, 4, 0, 2, 3, 4, 2]
85 [0, 1, 2, 3, 4, 0, 2, 3, 4]
86 [0, 1, 2, 3, 4, 0, 2, 3, 2]
87 [0, 1, 2, 3, 4, 0, 2, 3]
88 [0, 1, 2, 3, 4, 0, 2]
89 [0, 1, 2, 3, 4, 0, 3, 4]
90 [0, 1, 2, 3, 4, 0, 3]
91 [0, 1, 2, 3, 4, 0]
92 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
93 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
94 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
95 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1]
96 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
97 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2]
98 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1]
99 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
100 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1]
101 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
102 [0, 1, 2, 3, 4, 1, 2, 3, 4, 1]
103 [0, 1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4]
104 [0, 1, 2, 3, 4, 1, 2, 3, 4, 2, 3]
105 [0, 1, 2, 3, 4, 1, 2, 3, 4, 2]
106 [0, 1, 2, 3, 4, 1, 2, 3, 4]
107 [0, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
108 [0, 1, 2, 3, 4, 1, 2, 3, 1, 2]
109 [0, 1, 2, 3, 4, 1, 2, 3, 1]
110 [0, 1, 2, 3, 4, 1, 2, 3, 2]
111 [0, 1, 2, 3, 4, 1, 2, 3]
112 [0, 1, 2, 3, 4, 1, 2, 1]
113 [0, 1, 2, 3, 4, 1, 2]
114 [0, 1, 2, 3, 4, 1, 3, 4]
115 [0, 1, 2, 3, 4, 1, 3]
116 [0, 1, 2, 3, 4, 1]
117 [0, 1, 2, 3, 4, 2, 3, 4, 2, 3, 4]
118 [0, 1, 2, 3, 4, 2, 3, 4, 2, 3]
119 [0, 1, 2, 3, 4, 2, 3, 4, 2]
120 [0, 1, 2, 3, 4, 2, 3, 4]
121 [0, 1, 2, 3, 4, 2, 3, 2]
122 [0, 1, 2, 3, 4, 2, 3]
123 [0, 1, 2, 3, 4, 2]
124 [0, 1, 2, 3, 4, 3, 4]
125 [0, 1, 2, 3, 4, 3]
126 [0, 1, 2, 3, 4]
127 [0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
128 [0, 1, 2, 3, 0, 1, 2, 0, 1]
129 [0, 1, 2, 3, 0, 1, 2, 0]
130 [0, 1, 2, 3, 0, 1, 2, 1]
131 [0, 1, 2, 3, 0, 1, 2]
132 [0, 1, 2, 3, 0, 1, 0]
133 [0, 1, 2, 3, 0, 1]
134 [0, 1, 2, 3, 0, 2]
135 [0, 1, 2, 3, 0]
136 [0, 1, 2, 3, 1, 2, 1]
137 [0, 1, 2, 3, 1, 2]
138 [0, 1, 2, 3, 1]
139 [0, 1, 2, 3, 2]
140 [0, 1, 2, 3]
141 [0, 1, 2, 4, 0, 1, 0]
142 [0, 1, 2, 4, 0, 1]
143 [0, 1, 2, 4, 0]
144 [0, 1, 2, 4, 1]
145 [0, 1, 2, 4]
146 [0, 1, 2, 0, 1, 0]
147 [0, 1, 2, 0, 1]
148 [0, 1, 2, 0]
149 [0, 1, 2, 1]
150 [0, 1, 2]
151 [0, 1, 3, 4, 0, 3, 4]
152 [0, 1, 3, 4, 0, 3]
153 [0, 1, 3, 4, 0]
154 [0, 1, 3, 4, 3, 4]
155 [0, 1, 3, 4, 3]
156 [0, 1, 3, 4]
157 [0, 1, 3, 0]
158 [0, 1, 3]
159 [0, 1, 4, 0]
160 [0, 1, 4]
161 [0, 1, 0]
162 [0, 1]
163 [0, 2, 3, 4, 2, 3, 4, 2, 3, 4]
164 [0, 2, 3, 4, 2, 3, 4, 2, 3]
165 [0, 2, 3, 4, 2, 3, 4, 2]
166 [0, 2, 3, 4, 2, 3, 4]
167 [0, 2, 3, 4, 2, 3, 2]
168 [0, 2, 3, 4, 2, 3]
169 [0, 2, 3, 4, 2]
170 [0, 2, 3, 4, 3, 4]
171 [0, 2, 3, 4, 3]
172 [0, 2, 3, 4]
173 [0, 2, 3, 2]
174 [0, 2, 3]
175 [0, 2, 4]
176 [0, 2]
177 [0, 3, 4, 3, 4]
178 [0, 3, 4, 3]
179 [0, 3, 4]
180 [0, 3]
181 [0, 4]
182 [0]
183 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
184 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
185 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
186 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1]
187 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
188 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2]
189 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1]
190 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]
191 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1]
192 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2]
193 [1, 2, 3, 4, 1, 2, 3, 4, 1]
194 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4]
195 [1, 2, 3, 4, 1, 2, 3, 4, 2, 3]
196 [1, 2, 3, 4, 1, 2, 3, 4, 2]
197 [1, 2, 3, 4, 1, 2, 3, 4]
198 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
199 [1, 2, 3, 4, 1, 2, 3, 1, 2]
200 [1, 2, 3, 4, 1, 2, 3, 1]
201 [1, 2, 3, 4, 1, 2, 3, 2]
202 [1, 2, 3, 4, 1, 2, 3]
203 [1, 2, 3, 4, 1, 2, 1]
204 [1, 2, 3, 4, 1, 2]
205 [1, 2, 3, 4, 1, 3, 4]
206 [1, 2, 3, 4, 1, 3]
207 [1, 2, 3, 4, 1]
208 [1, 2, 3, 4, 2, 3, 4, 2, 3, 4]
209 [1, 2, 3, 4, 2, 3, 4, 2, 3]
210 [1, 2, 3, 4, 2, 3, 4, 2]
211 [1, 2, 3, 4, 2, 3, 4]
212 [1, 2, 3, 4, 2, 3, 2]
213 [1, 2, 3, 4, 2, 3]
214 [1, 2, 3, 4, 2]
215 [1, 2, 3, 4, 3, 4]
216 [1, 2, 3, 4, 3]
217 [1, 2, 3, 4]
218 [1, 2, 3, 1, 2, 1]
219 [1, 2, 3, 1, 2]
220 [1, 2, 3, 1]
221 [1, 2, 3, 2]
222 [1, 2, 3]
223 [1, 2, 4, 1]
224 [1, 2, 4]
225 [1, 2, 1]
226 [1, 2]
227 [1, 3, 4, 3, 4]
228 [1, 3, 4, 3]
229 [1, 3, 4]
230 [1, 3]
231 [1, 4]
232 [1]
233 [2, 3, 4, 2, 3, 4, 2, 3, 4]
234 [2, 3, 4, 2, 3, 4, 2, 3]
235 [2, 3, 4, 2, 3, 4, 2]
236 [2, 3, 4, 2, 3, 4]
237 [2, 3, 4, 2, 3, 2]
238 [2, 3, 4, 2, 3]
239 [2, 3, 4, 2]
240 [2, 3, 4, 3, 4]
241 [2, 3, 4, 3]
242 [2, 3, 4]
243 [2, 3, 2]
244 [2, 3]
245 [2, 4]
246 [2]
247 [3, 4, 3, 4]
248 [3, 4, 3]
249 [3, 4]
250 [3]
251 [4]
252 []
sage: A=CartanMatrix(['C',7])
....: c=[0,1,2,3,4,5,6]
....: coxnum=14
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+1) for
....: i in range(coxnum)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6]
2 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5]
3 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4]
4 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3]
5 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2]
6 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1]
7 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0]
8 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6]
9 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4]
10 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3]
11 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2]
12 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1]
13 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0]
14 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5]
15 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 3]
16 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2]
17 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1]
18 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0]
19 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4]
20 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 0, 1, 2]
21 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 0, 1]
22 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 0]
23 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3]
24 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 0, 1]
25 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 0]
26 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2]
27 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 0]
28 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1]
29 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0]
30 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6]
31 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5]
32 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4]
33 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3]
34 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2]
35 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1]
36 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6]
37 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3]
38 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2]
39 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1]
40 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0]
41 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4]
42 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2]
43 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1]
44 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0]
45 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3]
46 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 0, 1]
47 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 0]
48 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2]
49 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 0]
50 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1]
51 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0]
52 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4]
53 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 3]
54 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2]
55 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1]
56 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5]
57 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
58 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
59 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
60 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 3]
61 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
62 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 0]
63 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2]
64 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 0]
65 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1]
66 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0]
67 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 1, 2, 3]
68 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 1, 2]
69 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 1]
70 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4]
71 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 0, 1, 2, 0, 1]
72 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 0, 1, 2, 0]
73 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 0, 1, 2]
74 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 0, 1, 0]
75 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 0, 1]
76 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 0]
77 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 1, 2]
78 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 1]
79 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3]
80 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 0, 1, 0]
81 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 0, 1]
82 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 0]
83 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 1]
84 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2]
85 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 0]
86 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1]
87 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6]
88 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5]
89 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4]
90 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 2, 3]
91 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 2]
92 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0]
93 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6]
94 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5]
95 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4]
96 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3]
97 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2]
98 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1]
99 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6]
100 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4]
101 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3]
102 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2]
103 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1]
104 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5]
105 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3]
106 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2]
107 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1]
108 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4]
109 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 1, 2]
110 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 1]
111 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3]
112 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 1]
113 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2]
114 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1]
115 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6]
116 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5]
117 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 2, 3, 4]
118 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 2, 3]
119 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 2]
120 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6]
121 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
122 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
123 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
124 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3]
125 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
126 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 0]
127 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2]
128 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 0]
129 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1]
130 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0]
131 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3]
132 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2]
133 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1]
134 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4]
135 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 0, 1]
136 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 0]
137 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2]
138 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 0]
139 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1]
140 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0]
141 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 1, 2]
142 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 1]
143 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3]
144 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 0, 1, 0]
145 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 0, 1]
146 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 0]
147 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 1]
148 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2]
149 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 0]
150 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1]
151 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 2, 3, 4]
152 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 2, 3]
153 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 2]
154 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0]
155 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3]
156 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2]
157 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1]
158 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4]
159 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2]
160 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 3, 1]
161 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 3]
162 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 1]
163 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2]
164 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1]
165 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 2, 3, 4]
166 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 2, 3]
167 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 2]
168 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5]
169 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1]
170 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0]
171 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
172 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0]
173 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
174 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
175 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2]
176 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1]
177 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 3]
178 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0]
179 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
180 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 0]
181 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 1]
182 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2]
183 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 0]
184 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1]
185 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 2, 3]
186 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 2]
187 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0]
188 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 1, 2, 3, 1, 2]
189 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 1, 2, 3, 1]
190 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 1, 2, 3]
191 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 1, 2, 1]
192 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 1, 2]
193 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 1]
194 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 2, 3]
195 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 2]
196 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4]
197 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
198 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 0, 1, 2, 0, 1]
199 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 0, 1, 2, 0]
200 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 0, 1, 2, 1]
201 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 0, 1, 2]
202 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 0, 1, 0]
203 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 0, 1]
204 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 0, 2]
205 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 0]
206 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 1, 2, 1]
207 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 1, 2]
208 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 1]
209 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 2]
210 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3]
211 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 0, 1, 0]
212 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 0, 1]
213 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 0]
214 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 1]
215 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2]
216 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 6, 0]
217 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 6]
218 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 0]
219 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5]
220 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 0]
221 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4]
222 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 0]
223 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 3]
224 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 0]
225 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1]
226 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6]
227 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 2, 3, 4, 5]
228 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 2, 3, 4]
229 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 2, 3]
230 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 2]
231 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6]
232 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 2, 3, 4]
233 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 2, 3]
234 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 2]
235 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5]
236 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 2, 3]
237 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 2]
238 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4]
239 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 2]
240 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 2, 3]
241 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 2]
242 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 3, 4, 5, 6]
243 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 3, 4, 5]
244 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 3, 4]
245 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 3]
246 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0]
247 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6]
248 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5]
249 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4]
250 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3]
251 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2]
252 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1]
253 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6]
254 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4]
255 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3]
256 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2]
257 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1]
258 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5]
259 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3]
260 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2]
261 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1]
262 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4]
263 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 1, 2]
264 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 1]
265 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3]
266 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 1]
267 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2]
268 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1]
269 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6]
270 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5]
271 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4]
272 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3]
273 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2]
274 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6]
275 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3]
276 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2]
277 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1]
278 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4]
279 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2]
280 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1]
281 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3]
282 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 1]
283 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2]
284 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1]
285 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 4]
286 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3]
287 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2]
288 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5]
289 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 1, 2]
290 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 1]
291 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3]
292 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 1]
293 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2]
294 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1]
295 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 2, 3]
296 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 2]
297 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4]
298 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 1, 2, 1]
299 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 1, 2]
300 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 1]
301 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 2]
302 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3]
303 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 1]
304 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2]
305 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6]
306 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5]
307 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 3, 4]
308 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 3]
309 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1]
310 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6]
311 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5]
312 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4]
313 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3]
314 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2]
315 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6]
316 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4]
317 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3]
318 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2]
319 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5]
320 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3]
321 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 2]
322 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 2, 3, 4]
323 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 2, 3, 2]
324 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 2, 3]
325 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 2]
326 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 3, 4, 5, 6]
327 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 3, 4, 5]
328 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 3, 4]
329 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 3]
330 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6]
331 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1]
332 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0]
333 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
334 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0]
335 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
336 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
337 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2]
338 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1]
339 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3]
340 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0]
341 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
342 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 0]
343 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 1]
344 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2]
345 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 0]
346 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1]
347 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 2, 3]
348 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 2]
349 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0]
350 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3, 1, 2]
351 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3, 1]
352 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3]
353 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 1]
354 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2]
355 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1]
356 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 2, 3]
357 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 2]
358 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4]
359 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
360 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 0, 1]
361 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 0]
362 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 1]
363 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2]
364 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 0]
365 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1]
366 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 2]
367 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0]
368 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 1, 2, 1]
369 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 1, 2]
370 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 1]
371 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 2]
372 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3]
373 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 0, 1, 0]
374 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 0, 1]
375 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 0]
376 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 1]
377 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2]
378 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 0]
379 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 3, 4]
380 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 3, 0]
381 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 3]
382 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 0]
383 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1]
384 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 2, 3]
385 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 2]
386 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 2, 3, 4]
387 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 2, 3, 2]
388 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 2, 3]
389 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 2]
390 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 3, 4]
391 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 3]
392 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0]
393 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2]
394 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1]
395 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3]
396 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1]
397 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2]
398 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1]
399 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3]
400 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2]
401 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4]
402 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1]
403 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2]
404 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 3, 1]
405 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 3, 2]
406 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 3]
407 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 1]
408 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2]
409 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 3, 4]
410 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 3]
411 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1]
412 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 2, 3, 4, 2, 3]
413 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 2, 3, 4, 2]
414 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 2, 3, 4]
415 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 2, 3, 2]
416 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 2, 3]
417 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 2]
418 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 3, 4]
419 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 3]
420 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5]
421 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
422 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1]
423 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0]
424 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 1]
425 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
426 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0]
427 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
428 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 2]
429 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
430 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2, 1]
431 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2]
432 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1]
433 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 3, 2]
434 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 3]
435 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0]
436 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
437 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 0]
438 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 1]
439 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2]
440 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 3, 0]
441 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 3]
442 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 0]
443 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1]
444 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 2, 3, 2]
445 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 2, 3]
446 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 2]
447 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 3]
448 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0]
449 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
450 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 1, 2, 3, 1, 2]
451 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 1, 2, 3, 1]
452 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 1, 2, 3, 2]
453 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 1, 2, 3]
454 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 1, 2, 1]
455 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 1, 2]
456 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 1, 3]
457 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 1]
458 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 2, 3, 2]
459 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 2, 3]
460 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 2]
461 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 3]
462 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4]
463 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
464 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 0, 1, 2, 0, 1]
465 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 0, 1, 2, 0]
466 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 0, 1, 2, 1]
467 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 0, 1, 2]
468 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 0, 1, 0]
469 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 0, 1]
470 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 0, 2]
471 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 0]
472 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 1, 2, 1]
473 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 1, 2]
474 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 1]
475 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 2]
476 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3]
477 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 4, 5, 6, 0, 1, 0]
478 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 4, 5, 6, 0, 1]
479 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 4, 5, 6, 0]
480 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 4, 5, 6, 1]
481 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 4, 5, 6]
482 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 4, 5, 0, 1, 0]
483 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 4, 5, 0, 1]
484 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 4, 5, 0]
485 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 4, 5, 1]
486 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 4, 5]
487 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 4, 0, 1, 0]
488 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 4, 0, 1]
489 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 4, 0]
490 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 4, 1]
491 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 4]
492 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 0, 1, 0]
493 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 0, 1]
494 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 0]
495 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 1]
496 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2]
497 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 6, 0, 3, 4, 5, 6]
498 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 6, 0, 3, 4, 5]
499 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 6, 0, 3, 4]
500 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 6, 0, 3]
501 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 6, 0]
502 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 6, 3, 4, 5, 6]
503 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 6, 3, 4, 5]
504 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 6, 3, 4]
505 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 6, 3]
506 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 6]
507 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 0, 3, 4]
508 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 0, 3]
509 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 0]
510 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 3, 4]
511 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 3]
512 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5]
513 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 0, 3]
514 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 0]
515 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 3]
516 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4]
517 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 0]
518 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 3]
519 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 4, 5, 6, 0]
520 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 4, 5, 6]
521 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 4, 5, 0]
522 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 4, 5]
523 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 4, 0]
524 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 4]
525 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 0]
526 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1]
527 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6]
528 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5]
529 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4]
530 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3]
531 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2]
532 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6]
533 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4]
534 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3]
535 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2]
536 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 2, 3, 4, 5]
537 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3]
538 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 2, 3, 4, 2]
539 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 2, 3, 4]
540 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 2, 3, 2]
541 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 2, 3]
542 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 2]
543 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 3, 4, 5, 6]
544 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 3, 4, 5]
545 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 3, 4]
546 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 3]
547 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6]
548 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 2, 3, 4, 2, 3]
549 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 2, 3, 4, 2]
550 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 2, 3, 4]
551 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 2, 3, 2]
552 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 2, 3]
553 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 2]
554 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 3, 4]
555 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 3]
556 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5]
557 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 2, 3, 2]
558 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 2, 3]
559 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 2]
560 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 3]
561 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4]
562 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 2]
563 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 2, 3]
564 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 2, 4, 5, 6]
565 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 2, 4, 5]
566 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 2, 4]
567 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 2]
568 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 3, 4, 5, 6, 3, 4, 5, 6]
569 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 3, 4, 5, 6, 3, 4, 5]
570 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 3, 4, 5, 6, 3, 4]
571 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 3, 4, 5, 6, 3]
572 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 3, 4, 5, 6]
573 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 3, 4, 5, 3, 4]
574 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 3, 4, 5, 3]
575 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 3, 4, 5]
576 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 3, 4, 3]
577 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 3, 4]
578 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 3]
579 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 4, 5, 6]
580 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 4, 5]
581 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 4]
582 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0]
583 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6]
584 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5]
585 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4]
586 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3]
587 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2]
588 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1]
589 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6]
590 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4]
591 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3]
592 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2]
593 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1]
594 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5]
595 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3]
596 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2]
597 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1]
598 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4]
599 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 1, 2]
600 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 1]
601 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3]
602 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 1]
603 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2]
604 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1]
605 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6]
606 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5]
607 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4]
608 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3]
609 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2]
610 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6]
611 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3]
612 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2]
613 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1]
614 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4]
615 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2]
616 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1]
617 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3]
618 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 1]
619 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2]
620 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1]
621 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 4]
622 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3]
623 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2]
624 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5]
625 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 1, 2]
626 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 1]
627 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3]
628 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 1]
629 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2]
630 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1]
631 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 2, 3]
632 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 2]
633 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4]
634 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 1, 2, 1]
635 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 1, 2]
636 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 1]
637 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 2]
638 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3]
639 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 1]
640 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2]
641 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6]
642 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5]
643 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3, 4]
644 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3]
645 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1]
646 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6]
647 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5]
648 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4]
649 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3]
650 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2]
651 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6]
652 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4]
653 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3]
654 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2]
655 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5]
656 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3]
657 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 2]
658 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4]
659 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 2]
660 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3]
661 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2]
662 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3, 4, 5, 6]
663 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3, 4, 5]
664 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3, 4]
665 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3]
666 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6]
667 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2]
668 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1]
669 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3]
670 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1]
671 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2]
672 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1]
673 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3]
674 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2]
675 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4]
676 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1]
677 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2]
678 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1]
679 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 2]
680 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3]
681 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 1]
682 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2]
683 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 3, 4]
684 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 3]
685 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1]
686 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 4, 2, 3]
687 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 4, 2]
688 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 4]
689 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 2]
690 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3]
691 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2]
692 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 3, 4]
693 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 3]
694 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5]
695 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
696 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 1, 2]
697 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 1]
698 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 2]
699 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3]
700 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 1]
701 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2]
702 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 3]
703 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1]
704 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 2, 3, 2]
705 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 2, 3]
706 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 2]
707 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 3]
708 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4]
709 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 1, 2, 1]
710 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 1, 2]
711 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 1]
712 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 2]
713 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3]
714 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 4, 5, 6, 1]
715 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 4, 5, 6]
716 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 4, 5, 1]
717 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 4, 5]
718 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 4, 1]
719 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 4]
720 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2, 1]
721 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 2]
722 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 3, 4, 5, 6]
723 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 3, 4, 5]
724 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 3, 4]
725 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 3]
726 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6]
727 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 3, 4]
728 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 3]
729 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5]
730 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 3, 4, 3]
731 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 3, 4]
732 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 3]
733 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 4, 5, 6]
734 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 4, 5]
735 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1, 4]
736 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 1]
737 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6]
738 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5]
739 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4]
740 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3]
741 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2]
742 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6]
743 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4]
744 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3]
745 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2]
746 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5]
747 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3]
748 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 2]
749 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4]
750 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 2]
751 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3]
752 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2]
753 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5, 6]
754 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5]
755 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4]
756 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3]
757 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6]
758 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2, 3]
759 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2]
760 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4]
761 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 2]
762 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3]
763 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2]
764 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 3, 4]
765 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 3]
766 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5]
767 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3, 2]
768 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3]
769 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 2]
770 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 3]
771 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 2, 3, 4]
772 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 2, 3, 2]
773 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 2, 3]
774 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 2, 4, 5, 6]
775 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 2, 4, 5]
776 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 2, 4]
777 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 2]
778 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6]
779 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5]
780 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4]
781 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3]
782 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 3, 4, 5, 6]
783 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 3, 4, 5, 3, 4]
784 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 3, 4, 5, 3]
785 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 3, 4, 5]
786 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 3, 4, 3]
787 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 3, 4]
788 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 3]
789 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 4, 5, 6]
790 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 4, 5]
791 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 4]
792 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6]
793 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
794 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1]
795 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0]
796 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 1]
797 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
798 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0]
799 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
800 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 2]
801 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
802 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2, 1]
803 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2]
804 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1]
805 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 2]
806 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3]
807 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0]
808 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
809 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 0]
810 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 1]
811 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2]
812 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 3, 0]
813 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 3]
814 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 0]
815 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1]
816 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 2, 3, 2]
817 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 2, 3]
818 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 2]
819 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 3]
820 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0]
821 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
822 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3, 1, 2]
823 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3, 1]
824 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3, 2]
825 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3]
826 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 1]
827 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2]
828 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 3]
829 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1]
830 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 2, 3, 2]
831 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 2, 3]
832 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 2]
833 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 3]
834 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4]
835 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
836 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 0, 1]
837 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 0]
838 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 1]
839 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2]
840 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 0]
841 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1]
842 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 2]
843 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0]
844 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 1, 2, 1]
845 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 1, 2]
846 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 1]
847 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 2]
848 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3]
849 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 4, 0, 1, 0]
850 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 4, 0, 1]
851 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 4, 0]
852 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 4, 1]
853 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 4]
854 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 0, 1, 0]
855 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 0, 1]
856 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 0]
857 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 1]
858 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2]
859 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 0, 3]
860 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 0]
861 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 3]
862 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 3, 4]
863 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 3, 0]
864 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 3]
865 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 4, 0]
866 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 4]
867 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1, 0]
868 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 1]
869 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 2, 3, 2]
870 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 2, 3]
871 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 2]
872 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 3]
873 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 2, 3, 4]
874 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 2, 3, 2]
875 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 2, 3]
876 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 2, 4]
877 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 2]
878 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 3, 4, 3]
879 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 3, 4]
880 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 3]
881 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 4]
882 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0]
883 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
884 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2]
885 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1]
886 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 2]
887 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3]
888 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1]
889 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2]
890 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 3]
891 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1]
892 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3, 2]
893 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3]
894 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2]
895 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 3]
896 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4]
897 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1]
898 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2]
899 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 3, 1]
900 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 3, 2]
901 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 3]
902 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 4, 1]
903 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 4]
904 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2, 1]
905 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 2]
906 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 3, 4, 3]
907 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 3, 4]
908 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 3]
909 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1, 4]
910 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 1]
911 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 2, 3, 4, 2, 3, 2]
912 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 2, 3, 4, 2, 3]
913 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 2, 3, 4, 2]
914 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 2, 3, 4, 3]
915 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 2, 3, 4]
916 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 2, 3, 2]
917 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 2, 3]
918 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 2, 4]
919 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 2]
920 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 3, 4, 3]
921 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 3, 4]
922 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 3]
923 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 4]
924 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5]
925 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
926 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1]
927 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0]
928 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 1]
929 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
930 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0]
931 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
932 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 2]
933 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
934 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2, 1]
935 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2]
936 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1]
937 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 3, 2]
938 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 3]
939 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0]
940 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
941 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 0]
942 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2, 1]
943 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 2]
944 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 3, 0]
945 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 3]
946 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1, 0]
947 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 1]
948 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 2, 3, 2]
949 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 2, 3]
950 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 2]
951 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0, 3]
952 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 0]
953 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
954 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 1, 2, 3, 1, 2]
955 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 1, 2, 3, 1]
956 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 1, 2, 3, 2]
957 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 1, 2, 3]
958 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 1, 2, 1]
959 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 1, 2]
960 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 1, 3]
961 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 1]
962 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 2, 3, 2]
963 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 2, 3]
964 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 2]
965 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 3]
966 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4]
967 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 5, 6, 0, 1, 2, 0, 1, 0]
968 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 5, 6, 0, 1, 2, 0, 1]
969 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 5, 6, 0, 1, 2, 0]
970 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 5, 6, 0, 1, 2, 1]
971 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 5, 6, 0, 1, 2]
972 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 5, 6, 0, 1, 0]
973 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 5, 6, 0, 1]
974 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 5, 6, 0, 2]
975 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 5, 6, 0]
976 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 5, 6, 1, 2, 1]
977 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 5, 6, 1, 2]
978 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 5, 6, 1]
979 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 5, 6, 2]
980 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 5, 6]
981 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 5, 0, 1, 2, 0, 1, 0]
982 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 5, 0, 1, 2, 0, 1]
983 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 5, 0, 1, 2, 0]
984 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 5, 0, 1, 2, 1]
985 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 5, 0, 1, 2]
986 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 5, 0, 1, 0]
987 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 5, 0, 1]
988 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 5, 0, 2]
989 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 5, 0]
990 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 5, 1, 2, 1]
991 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 5, 1, 2]
992 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 5, 1]
993 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 5, 2]
994 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 5]
995 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
996 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 0, 1, 2, 0, 1]
997 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 0, 1, 2, 0]
998 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 0, 1, 2, 1]
999 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 0, 1, 2]
1000 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 0, 1, 0]
1001 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 0, 1]
1002 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 0, 2]
1003 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 0]
1004 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 1, 2, 1]
1005 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 1, 2]
1006 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 1]
1007 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 2]
1008 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3]
1009 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 4, 5, 6, 0, 1, 4, 5, 6, 0]
1010 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 4, 5, 6, 0, 1, 4, 5, 6]
1011 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 4, 5, 6, 0, 1, 4, 5, 0]
1012 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 4, 5, 6, 0, 1, 4, 5]
1013 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 4, 5, 6, 0, 1, 4, 0]
1014 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 4, 5, 6, 0, 1, 4]
1015 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 4, 5, 6, 0, 1, 0]
1016 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 4, 5, 6, 0, 1]
1017 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 4, 5, 6, 0, 4, 5, 6]
1018 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 4, 5, 6, 0, 4, 5]
1019 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 4, 5, 6, 0, 4]
1020 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 4, 5, 6, 0]
1021 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 4, 5, 6, 1, 4, 5, 6]
1022 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 4, 5, 6, 1, 4, 5]
1023 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 4, 5, 6, 1, 4]
1024 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 4, 5, 6, 1]
1025 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 4, 5, 6, 4, 5, 6]
1026 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 4, 5, 6, 4, 5]
1027 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 4, 5, 6, 4]
1028 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 4, 5, 6]
1029 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 4, 5, 0, 1, 4, 0]
1030 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 4, 5, 0, 1, 4]
1031 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 4, 5, 0, 1, 0]
1032 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 4, 5, 0, 1]
1033 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 4, 5, 0, 4]
1034 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 4, 5, 0]
1035 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 4, 5, 1, 4]
1036 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 4, 5, 1]
1037 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 4, 5, 4]
1038 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 4, 5]
1039 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 4, 0, 1, 0]
1040 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 4, 0, 1]
1041 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 4, 0]
1042 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 4, 1]
1043 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 4]
1044 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 5, 6, 0, 1, 0]
1045 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 5, 6, 0, 1]
1046 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 5, 6, 0]
1047 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 5, 6, 1]
1048 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 5, 6]
1049 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 5, 0, 1, 0]
1050 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 5, 0, 1]
1051 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 5, 0]
1052 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 5, 1]
1053 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 5]
1054 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 0, 1, 0]
1055 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 0, 1]
1056 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 0]
1057 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 1]
1058 [0, 1, 2, 3, 4, 5, 6, 0, 1, 2]
1059 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 6, 0, 3, 4, 5, 6, 3, 4, 5, 6]
1060 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 6, 0, 3, 4, 5, 6, 3, 4, 5]
1061 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 6, 0, 3, 4, 5, 6, 3, 4]
1062 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 6, 0, 3, 4, 5, 6, 3]
1063 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 6, 0, 3, 4, 5, 6]
1064 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 6, 0, 3, 4, 5, 3, 4]
1065 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 6, 0, 3, 4, 5, 3]
1066 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 6, 0, 3, 4, 5]
1067 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 6, 0, 3, 4, 3]
1068 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 6, 0, 3, 4]
1069 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 6, 0, 3]
1070 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 6, 0, 4, 5, 6]
1071 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 6, 0, 4, 5]
1072 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 6, 0, 4]
1073 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 6, 0]
1074 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6]
1075 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5]
1076 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4]
1077 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 6, 3, 4, 5, 6, 3]
1078 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 6, 3, 4, 5, 6]
1079 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 6, 3, 4, 5, 3, 4]
1080 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 6, 3, 4, 5, 3]
1081 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 6, 3, 4, 5]
1082 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 6, 3, 4, 3]
1083 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 6, 3, 4]
1084 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 6, 3]
1085 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 6, 4, 5, 6]
1086 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 6, 4, 5]
1087 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 6, 4]
1088 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 6]
1089 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 0, 3, 4, 3]
1090 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 0, 3, 4]
1091 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 0, 3]
1092 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 0, 4]
1093 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 0]
1094 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 3, 4, 3]
1095 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 3, 4]
1096 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 3]
1097 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 4]
1098 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5]
1099 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 0, 3]
1100 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 0]
1101 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4, 3]
1102 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 4]
1103 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 5, 6, 0]
1104 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 5, 6]
1105 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 5, 0]
1106 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 5]
1107 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3, 0]
1108 [0, 1, 2, 3, 4, 5, 6, 0, 1, 3]
1109 [0, 1, 2, 3, 4, 5, 6, 0, 1, 4, 5, 6, 0, 4, 5, 6]
1110 [0, 1, 2, 3, 4, 5, 6, 0, 1, 4, 5, 6, 0, 4, 5]
1111 [0, 1, 2, 3, 4, 5, 6, 0, 1, 4, 5, 6, 0, 4]
1112 [0, 1, 2, 3, 4, 5, 6, 0, 1, 4, 5, 6, 0]
1113 [0, 1, 2, 3, 4, 5, 6, 0, 1, 4, 5, 6, 4, 5, 6]
1114 [0, 1, 2, 3, 4, 5, 6, 0, 1, 4, 5, 6, 4, 5]
1115 [0, 1, 2, 3, 4, 5, 6, 0, 1, 4, 5, 6, 4]
1116 [0, 1, 2, 3, 4, 5, 6, 0, 1, 4, 5, 6]
1117 [0, 1, 2, 3, 4, 5, 6, 0, 1, 4, 5, 0, 4]
1118 [0, 1, 2, 3, 4, 5, 6, 0, 1, 4, 5, 0]
1119 [0, 1, 2, 3, 4, 5, 6, 0, 1, 4, 5, 4]
1120 [0, 1, 2, 3, 4, 5, 6, 0, 1, 4, 5]
1121 [0, 1, 2, 3, 4, 5, 6, 0, 1, 4, 0]
1122 [0, 1, 2, 3, 4, 5, 6, 0, 1, 4]
1123 [0, 1, 2, 3, 4, 5, 6, 0, 1, 5, 6, 0]
1124 [0, 1, 2, 3, 4, 5, 6, 0, 1, 5, 6]
1125 [0, 1, 2, 3, 4, 5, 6, 0, 1, 5, 0]
1126 [0, 1, 2, 3, 4, 5, 6, 0, 1, 5]
1127 [0, 1, 2, 3, 4, 5, 6, 0, 1, 0]
1128 [0, 1, 2, 3, 4, 5, 6, 0, 1]
1129 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6]
1130 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5]
1131 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4]
1132 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3]
1133 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2]
1134 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6]
1135 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4]
1136 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3]
1137 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2]
1138 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5]
1139 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3]
1140 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 2]
1141 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4]
1142 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 2]
1143 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3]
1144 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2]
1145 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5, 6]
1146 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5]
1147 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4]
1148 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3]
1149 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6]
1150 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2, 3]
1151 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2]
1152 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4]
1153 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 2]
1154 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3]
1155 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2]
1156 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 3, 4]
1157 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 3]
1158 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 2, 3, 4, 5]
1159 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3, 2]
1160 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3]
1161 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 2, 3, 4, 2]
1162 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 2, 3, 4, 3]
1163 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 2, 3, 4]
1164 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 2, 3, 2]
1165 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 2, 3]
1166 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 2, 4, 5, 6]
1167 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 2, 4, 5]
1168 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 2, 4]
1169 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 2]
1170 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6]
1171 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5]
1172 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4]
1173 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3]
1174 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 3, 4, 5, 6]
1175 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 3, 4, 5, 3, 4]
1176 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 3, 4, 5, 3]
1177 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 3, 4, 5]
1178 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 3, 4, 3]
1179 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 3, 4]
1180 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 3]
1181 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 4, 5, 6]
1182 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 4, 5]
1183 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 4]
1184 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6]
1185 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 2, 3, 4, 2, 3, 2]
1186 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 2, 3, 4, 2, 3]
1187 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 2, 3, 4, 2]
1188 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 2, 3, 4, 3]
1189 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 2, 3, 4]
1190 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 2, 3, 2]
1191 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 2, 3]
1192 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 2, 4]
1193 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 2]
1194 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 3, 4, 3]
1195 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 3, 4]
1196 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 3]
1197 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 4]
1198 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5]
1199 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 2, 3, 2]
1200 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 2, 3]
1201 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 2]
1202 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 3]
1203 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4]
1204 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 5, 6, 2]
1205 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 5, 6]
1206 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 5, 2]
1207 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 5]
1208 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3, 2]
1209 [0, 1, 2, 3, 4, 5, 6, 0, 2, 3]
1210 [0, 1, 2, 3, 4, 5, 6, 0, 2, 4, 5, 6, 4, 5, 6]
1211 [0, 1, 2, 3, 4, 5, 6, 0, 2, 4, 5, 6, 4, 5]
1212 [0, 1, 2, 3, 4, 5, 6, 0, 2, 4, 5, 6, 4]
1213 [0, 1, 2, 3, 4, 5, 6, 0, 2, 4, 5, 6]
1214 [0, 1, 2, 3, 4, 5, 6, 0, 2, 4, 5, 4]
1215 [0, 1, 2, 3, 4, 5, 6, 0, 2, 4, 5]
1216 [0, 1, 2, 3, 4, 5, 6, 0, 2, 4]
1217 [0, 1, 2, 3, 4, 5, 6, 0, 2, 5, 6]
1218 [0, 1, 2, 3, 4, 5, 6, 0, 2, 5]
1219 [0, 1, 2, 3, 4, 5, 6, 0, 2]
1220 [0, 1, 2, 3, 4, 5, 6, 0, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6]
1221 [0, 1, 2, 3, 4, 5, 6, 0, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5]
1222 [0, 1, 2, 3, 4, 5, 6, 0, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4]
1223 [0, 1, 2, 3, 4, 5, 6, 0, 3, 4, 5, 6, 3, 4, 5, 6, 3]
1224 [0, 1, 2, 3, 4, 5, 6, 0, 3, 4, 5, 6, 3, 4, 5, 6]
1225 [0, 1, 2, 3, 4, 5, 6, 0, 3, 4, 5, 6, 3, 4, 5, 3, 4]
1226 [0, 1, 2, 3, 4, 5, 6, 0, 3, 4, 5, 6, 3, 4, 5, 3]
1227 [0, 1, 2, 3, 4, 5, 6, 0, 3, 4, 5, 6, 3, 4, 5]
1228 [0, 1, 2, 3, 4, 5, 6, 0, 3, 4, 5, 6, 3, 4, 3]
1229 [0, 1, 2, 3, 4, 5, 6, 0, 3, 4, 5, 6, 3, 4]
1230 [0, 1, 2, 3, 4, 5, 6, 0, 3, 4, 5, 6, 3]
1231 [0, 1, 2, 3, 4, 5, 6, 0, 3, 4, 5, 6, 4, 5, 6]
1232 [0, 1, 2, 3, 4, 5, 6, 0, 3, 4, 5, 6, 4, 5]
1233 [0, 1, 2, 3, 4, 5, 6, 0, 3, 4, 5, 6, 4]
1234 [0, 1, 2, 3, 4, 5, 6, 0, 3, 4, 5, 6]
1235 [0, 1, 2, 3, 4, 5, 6, 0, 3, 4, 5, 3, 4, 3]
1236 [0, 1, 2, 3, 4, 5, 6, 0, 3, 4, 5, 3, 4]
1237 [0, 1, 2, 3, 4, 5, 6, 0, 3, 4, 5, 3]
1238 [0, 1, 2, 3, 4, 5, 6, 0, 3, 4, 5, 4]
1239 [0, 1, 2, 3, 4, 5, 6, 0, 3, 4, 5]
1240 [0, 1, 2, 3, 4, 5, 6, 0, 3, 4, 3]
1241 [0, 1, 2, 3, 4, 5, 6, 0, 3, 4]
1242 [0, 1, 2, 3, 4, 5, 6, 0, 3, 5, 6]
1243 [0, 1, 2, 3, 4, 5, 6, 0, 3, 5]
1244 [0, 1, 2, 3, 4, 5, 6, 0, 3]
1245 [0, 1, 2, 3, 4, 5, 6, 0, 4, 5, 6, 4, 5, 6]
1246 [0, 1, 2, 3, 4, 5, 6, 0, 4, 5, 6, 4, 5]
1247 [0, 1, 2, 3, 4, 5, 6, 0, 4, 5, 6, 4]
1248 [0, 1, 2, 3, 4, 5, 6, 0, 4, 5, 6]
1249 [0, 1, 2, 3, 4, 5, 6, 0, 4, 5, 4]
1250 [0, 1, 2, 3, 4, 5, 6, 0, 4, 5]
1251 [0, 1, 2, 3, 4, 5, 6, 0, 4]
1252 [0, 1, 2, 3, 4, 5, 6, 0, 5, 6]
1253 [0, 1, 2, 3, 4, 5, 6, 0, 5]
1254 [0, 1, 2, 3, 4, 5, 6, 0]
1255 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6]
1256 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5]
1257 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4]
1258 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3]
1259 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2]
1260 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1]
1261 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6]
1262 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4]
1263 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3]
1264 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2]
1265 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1]
1266 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5]
1267 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3]
1268 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2]
1269 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1]
1270 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4]
1271 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 1, 2]
1272 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 1]
1273 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3]
1274 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 1]
1275 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2]
1276 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1]
1277 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6]
1278 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5]
1279 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4]
1280 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3]
1281 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2]
1282 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6]
1283 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3]
1284 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2]
1285 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1]
1286 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4]
1287 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2]
1288 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1]
1289 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3]
1290 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 1]
1291 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2]
1292 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1]
1293 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 4]
1294 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3]
1295 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2]
1296 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5]
1297 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 1, 2]
1298 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 1]
1299 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3]
1300 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 1]
1301 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2]
1302 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1]
1303 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 2, 3]
1304 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 2]
1305 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4]
1306 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 1, 2, 1]
1307 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 1, 2]
1308 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 1]
1309 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 2]
1310 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3]
1311 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 1]
1312 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2]
1313 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6]
1314 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5]
1315 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3, 4]
1316 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3]
1317 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1]
1318 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6]
1319 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5]
1320 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4]
1321 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3]
1322 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2]
1323 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6]
1324 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4]
1325 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3]
1326 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2]
1327 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5]
1328 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3]
1329 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 2]
1330 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4]
1331 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 2]
1332 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3]
1333 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2]
1334 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3, 4, 5, 6]
1335 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3, 4, 5]
1336 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3, 4]
1337 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3]
1338 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6]
1339 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2]
1340 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1]
1341 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3]
1342 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1]
1343 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2]
1344 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1]
1345 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3]
1346 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2]
1347 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4]
1348 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1]
1349 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2]
1350 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1]
1351 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 2]
1352 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3]
1353 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 1]
1354 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2]
1355 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 3, 4]
1356 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 3]
1357 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1]
1358 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 4, 2, 3]
1359 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 4, 2]
1360 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 4]
1361 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 2]
1362 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3]
1363 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2]
1364 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 3, 4]
1365 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 3]
1366 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5]
1367 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
1368 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 1, 2]
1369 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 1]
1370 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 2]
1371 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3]
1372 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 1]
1373 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2]
1374 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 3]
1375 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1]
1376 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 2, 3, 2]
1377 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 2, 3]
1378 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 2]
1379 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 3]
1380 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4]
1381 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 1, 2, 1]
1382 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 1, 2]
1383 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 1]
1384 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 2]
1385 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3]
1386 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 4, 5, 6, 1]
1387 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 4, 5, 6]
1388 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 4, 5, 1]
1389 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 4, 5]
1390 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 4, 1]
1391 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 4]
1392 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 1]
1393 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2]
1394 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 3, 4, 5, 6]
1395 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 3, 4, 5]
1396 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 3, 4]
1397 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 3]
1398 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6]
1399 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 3, 4]
1400 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 3]
1401 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5]
1402 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3, 4, 3]
1403 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3, 4]
1404 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3]
1405 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 4, 5, 6]
1406 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 4, 5]
1407 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 4]
1408 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1]
1409 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6]
1410 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5]
1411 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4]
1412 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3]
1413 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2]
1414 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6]
1415 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4]
1416 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3]
1417 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2]
1418 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5]
1419 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3]
1420 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 2]
1421 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4]
1422 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 2]
1423 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3]
1424 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2]
1425 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5, 6]
1426 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5]
1427 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4]
1428 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3]
1429 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6]
1430 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2, 3]
1431 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2]
1432 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4]
1433 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 2]
1434 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3]
1435 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2]
1436 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 3, 4]
1437 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 3]
1438 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5]
1439 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3, 2]
1440 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3]
1441 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 2]
1442 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 3]
1443 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4]
1444 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 2]
1445 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3]
1446 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 4, 5, 6]
1447 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 4, 5]
1448 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 4]
1449 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2]
1450 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6]
1451 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5]
1452 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4]
1453 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3]
1454 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3, 4, 5, 6]
1455 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3, 4, 5, 3, 4]
1456 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3, 4, 5, 3]
1457 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3, 4, 5]
1458 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3, 4, 3]
1459 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3, 4]
1460 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3]
1461 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 4, 5, 6]
1462 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 4, 5]
1463 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 4]
1464 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6]
1465 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
1466 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2]
1467 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1]
1468 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 2]
1469 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3]
1470 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1]
1471 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2]
1472 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 3]
1473 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1]
1474 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3, 2]
1475 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3]
1476 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2]
1477 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 3]
1478 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4]
1479 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1]
1480 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2]
1481 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1]
1482 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 2]
1483 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3]
1484 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 4, 1]
1485 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 4]
1486 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 1]
1487 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2]
1488 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 3, 4, 3]
1489 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 3, 4]
1490 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 3]
1491 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 4]
1492 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1]
1493 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 4, 2, 3, 2]
1494 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 4, 2, 3]
1495 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 4, 2]
1496 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 4, 3]
1497 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 4]
1498 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 2]
1499 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3]
1500 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 4]
1501 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2]
1502 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 3, 4, 3]
1503 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 3, 4]
1504 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 3]
1505 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 4]
1506 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5]
1507 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
1508 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 1, 2]
1509 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 1]
1510 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 2]
1511 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3]
1512 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 1]
1513 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2]
1514 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 3]
1515 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1]
1516 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 2, 3, 2]
1517 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 2, 3]
1518 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 2]
1519 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 3]
1520 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4]
1521 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 5, 6, 1, 2, 1]
1522 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 5, 6, 1, 2]
1523 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 5, 6, 1]
1524 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 5, 6, 2]
1525 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 5, 6]
1526 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 5, 1, 2, 1]
1527 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 5, 1, 2]
1528 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 5, 1]
1529 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 5, 2]
1530 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 5]
1531 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 1, 2, 1]
1532 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 1, 2]
1533 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 1]
1534 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 2]
1535 [0, 1, 2, 3, 4, 5, 6, 1, 2, 3]
1536 [0, 1, 2, 3, 4, 5, 6, 1, 2, 4, 5, 6, 1, 4, 5, 6]
1537 [0, 1, 2, 3, 4, 5, 6, 1, 2, 4, 5, 6, 1, 4, 5]
1538 [0, 1, 2, 3, 4, 5, 6, 1, 2, 4, 5, 6, 1, 4]
1539 [0, 1, 2, 3, 4, 5, 6, 1, 2, 4, 5, 6, 1]
1540 [0, 1, 2, 3, 4, 5, 6, 1, 2, 4, 5, 6, 4, 5, 6]
1541 [0, 1, 2, 3, 4, 5, 6, 1, 2, 4, 5, 6, 4, 5]
1542 [0, 1, 2, 3, 4, 5, 6, 1, 2, 4, 5, 6, 4]
1543 [0, 1, 2, 3, 4, 5, 6, 1, 2, 4, 5, 6]
1544 [0, 1, 2, 3, 4, 5, 6, 1, 2, 4, 5, 1, 4]
1545 [0, 1, 2, 3, 4, 5, 6, 1, 2, 4, 5, 1]
1546 [0, 1, 2, 3, 4, 5, 6, 1, 2, 4, 5, 4]
1547 [0, 1, 2, 3, 4, 5, 6, 1, 2, 4, 5]
1548 [0, 1, 2, 3, 4, 5, 6, 1, 2, 4, 1]
1549 [0, 1, 2, 3, 4, 5, 6, 1, 2, 4]
1550 [0, 1, 2, 3, 4, 5, 6, 1, 2, 5, 6, 1]
1551 [0, 1, 2, 3, 4, 5, 6, 1, 2, 5, 6]
1552 [0, 1, 2, 3, 4, 5, 6, 1, 2, 5, 1]
1553 [0, 1, 2, 3, 4, 5, 6, 1, 2, 5]
1554 [0, 1, 2, 3, 4, 5, 6, 1, 2, 1]
1555 [0, 1, 2, 3, 4, 5, 6, 1, 2]
1556 [0, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6]
1557 [0, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5]
1558 [0, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4]
1559 [0, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 3, 4, 5, 6, 3]
1560 [0, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 3, 4, 5, 6]
1561 [0, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 3, 4, 5, 3, 4]
1562 [0, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 3, 4, 5, 3]
1563 [0, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 3, 4, 5]
1564 [0, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 3, 4, 3]
1565 [0, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 3, 4]
1566 [0, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 3]
1567 [0, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 4, 5, 6]
1568 [0, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 4, 5]
1569 [0, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 4]
1570 [0, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6]
1571 [0, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 3, 4, 3]
1572 [0, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 3, 4]
1573 [0, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 3]
1574 [0, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 4]
1575 [0, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5]
1576 [0, 1, 2, 3, 4, 5, 6, 1, 3, 4, 3]
1577 [0, 1, 2, 3, 4, 5, 6, 1, 3, 4]
1578 [0, 1, 2, 3, 4, 5, 6, 1, 3, 5, 6]
1579 [0, 1, 2, 3, 4, 5, 6, 1, 3, 5]
1580 [0, 1, 2, 3, 4, 5, 6, 1, 3]
1581 [0, 1, 2, 3, 4, 5, 6, 1, 4, 5, 6, 4, 5, 6]
1582 [0, 1, 2, 3, 4, 5, 6, 1, 4, 5, 6, 4, 5]
1583 [0, 1, 2, 3, 4, 5, 6, 1, 4, 5, 6, 4]
1584 [0, 1, 2, 3, 4, 5, 6, 1, 4, 5, 6]
1585 [0, 1, 2, 3, 4, 5, 6, 1, 4, 5, 4]
1586 [0, 1, 2, 3, 4, 5, 6, 1, 4, 5]
1587 [0, 1, 2, 3, 4, 5, 6, 1, 4]
1588 [0, 1, 2, 3, 4, 5, 6, 1, 5, 6]
1589 [0, 1, 2, 3, 4, 5, 6, 1, 5]
1590 [0, 1, 2, 3, 4, 5, 6, 1]
1591 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6]
1592 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5]
1593 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4]
1594 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3]
1595 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2]
1596 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6]
1597 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4]
1598 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3]
1599 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2]
1600 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5]
1601 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3]
1602 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 2]
1603 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4]
1604 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 2]
1605 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3]
1606 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2]
1607 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5, 6]
1608 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5]
1609 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4]
1610 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3]
1611 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6]
1612 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2, 3]
1613 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2]
1614 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4]
1615 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 2]
1616 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3]
1617 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2]
1618 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 3, 4]
1619 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 3]
1620 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5]
1621 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3, 2]
1622 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3]
1623 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 2]
1624 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 3]
1625 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4]
1626 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 2]
1627 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3]
1628 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 4, 5, 6]
1629 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 4, 5]
1630 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 4]
1631 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2]
1632 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6]
1633 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5]
1634 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4]
1635 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3]
1636 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5, 6]
1637 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5, 3, 4]
1638 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5, 3]
1639 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5]
1640 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 3]
1641 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4]
1642 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3]
1643 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 4, 5, 6]
1644 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 4, 5]
1645 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 4]
1646 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6]
1647 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2, 3, 2]
1648 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2, 3]
1649 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2]
1650 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 3]
1651 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4]
1652 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 2]
1653 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3]
1654 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 4]
1655 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2]
1656 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 3, 4, 3]
1657 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 3, 4]
1658 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 3]
1659 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 4]
1660 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5]
1661 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3, 2]
1662 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3]
1663 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 2]
1664 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 3]
1665 [0, 1, 2, 3, 4, 5, 6, 2, 3, 4]
1666 [0, 1, 2, 3, 4, 5, 6, 2, 3, 5, 6, 2]
1667 [0, 1, 2, 3, 4, 5, 6, 2, 3, 5, 6]
1668 [0, 1, 2, 3, 4, 5, 6, 2, 3, 5, 2]
1669 [0, 1, 2, 3, 4, 5, 6, 2, 3, 5]
1670 [0, 1, 2, 3, 4, 5, 6, 2, 3, 2]
1671 [0, 1, 2, 3, 4, 5, 6, 2, 3]
1672 [0, 1, 2, 3, 4, 5, 6, 2, 4, 5, 6, 4, 5, 6]
1673 [0, 1, 2, 3, 4, 5, 6, 2, 4, 5, 6, 4, 5]
1674 [0, 1, 2, 3, 4, 5, 6, 2, 4, 5, 6, 4]
1675 [0, 1, 2, 3, 4, 5, 6, 2, 4, 5, 6]
1676 [0, 1, 2, 3, 4, 5, 6, 2, 4, 5, 4]
1677 [0, 1, 2, 3, 4, 5, 6, 2, 4, 5]
1678 [0, 1, 2, 3, 4, 5, 6, 2, 4]
1679 [0, 1, 2, 3, 4, 5, 6, 2, 5, 6]
1680 [0, 1, 2, 3, 4, 5, 6, 2, 5]
1681 [0, 1, 2, 3, 4, 5, 6, 2]
1682 [0, 1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6]
1683 [0, 1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5]
1684 [0, 1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4]
1685 [0, 1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3]
1686 [0, 1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6]
1687 [0, 1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 3, 4]
1688 [0, 1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 3]
1689 [0, 1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5]
1690 [0, 1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 3]
1691 [0, 1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4]
1692 [0, 1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3]
1693 [0, 1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 4, 5, 6]
1694 [0, 1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 4, 5]
1695 [0, 1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 4]
1696 [0, 1, 2, 3, 4, 5, 6, 3, 4, 5, 6]
1697 [0, 1, 2, 3, 4, 5, 6, 3, 4, 5, 3, 4, 3]
1698 [0, 1, 2, 3, 4, 5, 6, 3, 4, 5, 3, 4]
1699 [0, 1, 2, 3, 4, 5, 6, 3, 4, 5, 3]
1700 [0, 1, 2, 3, 4, 5, 6, 3, 4, 5, 4]
1701 [0, 1, 2, 3, 4, 5, 6, 3, 4, 5]
1702 [0, 1, 2, 3, 4, 5, 6, 3, 4, 3]
1703 [0, 1, 2, 3, 4, 5, 6, 3, 4]
1704 [0, 1, 2, 3, 4, 5, 6, 3, 5, 6]
1705 [0, 1, 2, 3, 4, 5, 6, 3, 5]
1706 [0, 1, 2, 3, 4, 5, 6, 3]
1707 [0, 1, 2, 3, 4, 5, 6, 4, 5, 6, 4, 5, 6]
1708 [0, 1, 2, 3, 4, 5, 6, 4, 5, 6, 4, 5]
1709 [0, 1, 2, 3, 4, 5, 6, 4, 5, 6, 4]
1710 [0, 1, 2, 3, 4, 5, 6, 4, 5, 6]
1711 [0, 1, 2, 3, 4, 5, 6, 4, 5, 4]
1712 [0, 1, 2, 3, 4, 5, 6, 4, 5]
1713 [0, 1, 2, 3, 4, 5, 6, 4]
1714 [0, 1, 2, 3, 4, 5, 6, 5, 6]
1715 [0, 1, 2, 3, 4, 5, 6, 5]
1716 [0, 1, 2, 3, 4, 5, 6]
1717 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
1718 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1]
1719 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0]
1720 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 1]
1721 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
1722 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0]
1723 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
1724 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 2]
1725 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
1726 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2, 1]
1727 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2]
1728 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1]
1729 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 2]
1730 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3]
1731 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0]
1732 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
1733 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 0]
1734 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 1]
1735 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2]
1736 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 3, 0]
1737 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 3]
1738 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 0]
1739 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1]
1740 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 2, 3, 2]
1741 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 2, 3]
1742 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 2]
1743 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 3]
1744 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0]
1745 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
1746 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3, 1, 2]
1747 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3, 1]
1748 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3, 2]
1749 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3]
1750 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 1]
1751 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2]
1752 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 3]
1753 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1]
1754 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 2, 3, 2]
1755 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 2, 3]
1756 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 2]
1757 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 3]
1758 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4]
1759 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
1760 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 0, 1]
1761 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 0]
1762 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 1]
1763 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2]
1764 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 0]
1765 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1]
1766 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 2]
1767 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0]
1768 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 1, 2, 1]
1769 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 1, 2]
1770 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 1]
1771 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 2]
1772 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3]
1773 [0, 1, 2, 3, 4, 5, 0, 1, 2, 4, 0, 1, 0]
1774 [0, 1, 2, 3, 4, 5, 0, 1, 2, 4, 0, 1]
1775 [0, 1, 2, 3, 4, 5, 0, 1, 2, 4, 0]
1776 [0, 1, 2, 3, 4, 5, 0, 1, 2, 4, 1]
1777 [0, 1, 2, 3, 4, 5, 0, 1, 2, 4]
1778 [0, 1, 2, 3, 4, 5, 0, 1, 2, 0, 1, 0]
1779 [0, 1, 2, 3, 4, 5, 0, 1, 2, 0, 1]
1780 [0, 1, 2, 3, 4, 5, 0, 1, 2, 0]
1781 [0, 1, 2, 3, 4, 5, 0, 1, 2, 1]
1782 [0, 1, 2, 3, 4, 5, 0, 1, 2]
1783 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 0, 3]
1784 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 0]
1785 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 3]
1786 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4]
1787 [0, 1, 2, 3, 4, 5, 0, 1, 3, 0]
1788 [0, 1, 2, 3, 4, 5, 0, 1, 3]
1789 [0, 1, 2, 3, 4, 5, 0, 1, 4, 0]
1790 [0, 1, 2, 3, 4, 5, 0, 1, 4]
1791 [0, 1, 2, 3, 4, 5, 0, 1, 0]
1792 [0, 1, 2, 3, 4, 5, 0, 1]
1793 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 2, 3, 2]
1794 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 2, 3]
1795 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 2]
1796 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 3]
1797 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4]
1798 [0, 1, 2, 3, 4, 5, 0, 2, 3, 2]
1799 [0, 1, 2, 3, 4, 5, 0, 2, 3]
1800 [0, 1, 2, 3, 4, 5, 0, 2, 4]
1801 [0, 1, 2, 3, 4, 5, 0, 2]
1802 [0, 1, 2, 3, 4, 5, 0, 3, 4, 3]
1803 [0, 1, 2, 3, 4, 5, 0, 3, 4]
1804 [0, 1, 2, 3, 4, 5, 0, 3]
1805 [0, 1, 2, 3, 4, 5, 0, 4]
1806 [0, 1, 2, 3, 4, 5, 0]
1807 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
1808 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2]
1809 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1]
1810 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 2]
1811 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3]
1812 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1]
1813 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2]
1814 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 3]
1815 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1]
1816 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3, 2]
1817 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3]
1818 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2]
1819 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 3]
1820 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4]
1821 [0, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1]
1822 [0, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2]
1823 [0, 1, 2, 3, 4, 5, 1, 2, 3, 1]
1824 [0, 1, 2, 3, 4, 5, 1, 2, 3, 2]
1825 [0, 1, 2, 3, 4, 5, 1, 2, 3]
1826 [0, 1, 2, 3, 4, 5, 1, 2, 4, 1]
1827 [0, 1, 2, 3, 4, 5, 1, 2, 4]
1828 [0, 1, 2, 3, 4, 5, 1, 2, 1]
1829 [0, 1, 2, 3, 4, 5, 1, 2]
1830 [0, 1, 2, 3, 4, 5, 1, 3, 4, 3]
1831 [0, 1, 2, 3, 4, 5, 1, 3, 4]
1832 [0, 1, 2, 3, 4, 5, 1, 3]
1833 [0, 1, 2, 3, 4, 5, 1, 4]
1834 [0, 1, 2, 3, 4, 5, 1]
1835 [0, 1, 2, 3, 4, 5, 2, 3, 4, 2, 3, 2]
1836 [0, 1, 2, 3, 4, 5, 2, 3, 4, 2, 3]
1837 [0, 1, 2, 3, 4, 5, 2, 3, 4, 2]
1838 [0, 1, 2, 3, 4, 5, 2, 3, 4, 3]
1839 [0, 1, 2, 3, 4, 5, 2, 3, 4]
1840 [0, 1, 2, 3, 4, 5, 2, 3, 2]
1841 [0, 1, 2, 3, 4, 5, 2, 3]
1842 [0, 1, 2, 3, 4, 5, 2, 4]
1843 [0, 1, 2, 3, 4, 5, 2]
1844 [0, 1, 2, 3, 4, 5, 3, 4, 3]
1845 [0, 1, 2, 3, 4, 5, 3, 4]
1846 [0, 1, 2, 3, 4, 5, 3]
1847 [0, 1, 2, 3, 4, 5, 4]
1848 [0, 1, 2, 3, 4, 5]
1849 [0, 1, 2, 3, 4, 6, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
1850 [0, 1, 2, 3, 4, 6, 0, 1, 2, 3, 0, 1, 2, 0, 1]
1851 [0, 1, 2, 3, 4, 6, 0, 1, 2, 3, 0, 1, 2, 0]
1852 [0, 1, 2, 3, 4, 6, 0, 1, 2, 3, 0, 1, 2, 1]
1853 [0, 1, 2, 3, 4, 6, 0, 1, 2, 3, 0, 1, 2]
1854 [0, 1, 2, 3, 4, 6, 0, 1, 2, 3, 0, 1, 0]
1855 [0, 1, 2, 3, 4, 6, 0, 1, 2, 3, 0, 1]
1856 [0, 1, 2, 3, 4, 6, 0, 1, 2, 3, 0, 2]
1857 [0, 1, 2, 3, 4, 6, 0, 1, 2, 3, 0]
1858 [0, 1, 2, 3, 4, 6, 0, 1, 2, 3, 1, 2, 1]
1859 [0, 1, 2, 3, 4, 6, 0, 1, 2, 3, 1, 2]
1860 [0, 1, 2, 3, 4, 6, 0, 1, 2, 3, 1]
1861 [0, 1, 2, 3, 4, 6, 0, 1, 2, 3, 2]
1862 [0, 1, 2, 3, 4, 6, 0, 1, 2, 3]
1863 [0, 1, 2, 3, 4, 6, 0, 1, 2, 0, 1, 0]
1864 [0, 1, 2, 3, 4, 6, 0, 1, 2, 0, 1]
1865 [0, 1, 2, 3, 4, 6, 0, 1, 2, 0]
1866 [0, 1, 2, 3, 4, 6, 0, 1, 2, 1]
1867 [0, 1, 2, 3, 4, 6, 0, 1, 2]
1868 [0, 1, 2, 3, 4, 6, 0, 1, 3, 0]
1869 [0, 1, 2, 3, 4, 6, 0, 1, 3]
1870 [0, 1, 2, 3, 4, 6, 0, 1, 0]
1871 [0, 1, 2, 3, 4, 6, 0, 1]
1872 [0, 1, 2, 3, 4, 6, 0, 2, 3, 2]
1873 [0, 1, 2, 3, 4, 6, 0, 2, 3]
1874 [0, 1, 2, 3, 4, 6, 0, 2]
1875 [0, 1, 2, 3, 4, 6, 0, 3]
1876 [0, 1, 2, 3, 4, 6, 0]
1877 [0, 1, 2, 3, 4, 6, 1, 2, 3, 1, 2, 1]
1878 [0, 1, 2, 3, 4, 6, 1, 2, 3, 1, 2]
1879 [0, 1, 2, 3, 4, 6, 1, 2, 3, 1]
1880 [0, 1, 2, 3, 4, 6, 1, 2, 3, 2]
1881 [0, 1, 2, 3, 4, 6, 1, 2, 3]
1882 [0, 1, 2, 3, 4, 6, 1, 2, 1]
1883 [0, 1, 2, 3, 4, 6, 1, 2]
1884 [0, 1, 2, 3, 4, 6, 1, 3]
1885 [0, 1, 2, 3, 4, 6, 1]
1886 [0, 1, 2, 3, 4, 6, 2, 3, 2]
1887 [0, 1, 2, 3, 4, 6, 2, 3]
1888 [0, 1, 2, 3, 4, 6, 2]
1889 [0, 1, 2, 3, 4, 6, 3]
1890 [0, 1, 2, 3, 4, 6]
1891 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
1892 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1]
1893 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0]
1894 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 1]
1895 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
1896 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0]
1897 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
1898 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 2]
1899 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
1900 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2, 1]
1901 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2]
1902 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1]
1903 [0, 1, 2, 3, 4, 0, 1, 2, 3, 2]
1904 [0, 1, 2, 3, 4, 0, 1, 2, 3]
1905 [0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0]
1906 [0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
1907 [0, 1, 2, 3, 4, 0, 1, 2, 0]
1908 [0, 1, 2, 3, 4, 0, 1, 2, 1]
1909 [0, 1, 2, 3, 4, 0, 1, 2]
1910 [0, 1, 2, 3, 4, 0, 1, 3, 0]
1911 [0, 1, 2, 3, 4, 0, 1, 3]
1912 [0, 1, 2, 3, 4, 0, 1, 0]
1913 [0, 1, 2, 3, 4, 0, 1]
1914 [0, 1, 2, 3, 4, 0, 2, 3, 2]
1915 [0, 1, 2, 3, 4, 0, 2, 3]
1916 [0, 1, 2, 3, 4, 0, 2]
1917 [0, 1, 2, 3, 4, 0, 3]
1918 [0, 1, 2, 3, 4, 0]
1919 [0, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
1920 [0, 1, 2, 3, 4, 1, 2, 3, 1, 2]
1921 [0, 1, 2, 3, 4, 1, 2, 3, 1]
1922 [0, 1, 2, 3, 4, 1, 2, 3, 2]
1923 [0, 1, 2, 3, 4, 1, 2, 3]
1924 [0, 1, 2, 3, 4, 1, 2, 1]
1925 [0, 1, 2, 3, 4, 1, 2]
1926 [0, 1, 2, 3, 4, 1, 3]
1927 [0, 1, 2, 3, 4, 1]
1928 [0, 1, 2, 3, 4, 2, 3, 2]
1929 [0, 1, 2, 3, 4, 2, 3]
1930 [0, 1, 2, 3, 4, 2]
1931 [0, 1, 2, 3, 4, 3]
1932 [0, 1, 2, 3, 4]
1933 [0, 1, 2, 3, 5, 6, 0, 1, 2, 5, 6, 0, 1, 0]
1934 [0, 1, 2, 3, 5, 6, 0, 1, 2, 5, 6, 0, 1]
1935 [0, 1, 2, 3, 5, 6, 0, 1, 2, 5, 6, 0]
1936 [0, 1, 2, 3, 5, 6, 0, 1, 2, 5, 6, 1]
1937 [0, 1, 2, 3, 5, 6, 0, 1, 2, 5, 6]
1938 [0, 1, 2, 3, 5, 6, 0, 1, 2, 5, 0, 1, 0]
1939 [0, 1, 2, 3, 5, 6, 0, 1, 2, 5, 0, 1]
1940 [0, 1, 2, 3, 5, 6, 0, 1, 2, 5, 0]
1941 [0, 1, 2, 3, 5, 6, 0, 1, 2, 5, 1]
1942 [0, 1, 2, 3, 5, 6, 0, 1, 2, 5]
1943 [0, 1, 2, 3, 5, 6, 0, 1, 2, 0, 1, 0]
1944 [0, 1, 2, 3, 5, 6, 0, 1, 2, 0, 1]
1945 [0, 1, 2, 3, 5, 6, 0, 1, 2, 0]
1946 [0, 1, 2, 3, 5, 6, 0, 1, 2, 1]
1947 [0, 1, 2, 3, 5, 6, 0, 1, 2]
1948 [0, 1, 2, 3, 5, 6, 0, 1, 5, 6, 0]
1949 [0, 1, 2, 3, 5, 6, 0, 1, 5, 6]
1950 [0, 1, 2, 3, 5, 6, 0, 1, 5, 0]
1951 [0, 1, 2, 3, 5, 6, 0, 1, 5]
1952 [0, 1, 2, 3, 5, 6, 0, 1, 0]
1953 [0, 1, 2, 3, 5, 6, 0, 1]
1954 [0, 1, 2, 3, 5, 6, 0, 2, 5, 6]
1955 [0, 1, 2, 3, 5, 6, 0, 2, 5]
1956 [0, 1, 2, 3, 5, 6, 0, 2]
1957 [0, 1, 2, 3, 5, 6, 0, 5, 6]
1958 [0, 1, 2, 3, 5, 6, 0, 5]
1959 [0, 1, 2, 3, 5, 6, 0]
1960 [0, 1, 2, 3, 5, 6, 1, 2, 5, 6, 1]
1961 [0, 1, 2, 3, 5, 6, 1, 2, 5, 6]
1962 [0, 1, 2, 3, 5, 6, 1, 2, 5, 1]
1963 [0, 1, 2, 3, 5, 6, 1, 2, 5]
1964 [0, 1, 2, 3, 5, 6, 1, 2, 1]
1965 [0, 1, 2, 3, 5, 6, 1, 2]
1966 [0, 1, 2, 3, 5, 6, 1, 5, 6]
1967 [0, 1, 2, 3, 5, 6, 1, 5]
1968 [0, 1, 2, 3, 5, 6, 1]
1969 [0, 1, 2, 3, 5, 6, 2, 5, 6]
1970 [0, 1, 2, 3, 5, 6, 2, 5]
1971 [0, 1, 2, 3, 5, 6, 2]
1972 [0, 1, 2, 3, 5, 6, 5, 6]
1973 [0, 1, 2, 3, 5, 6, 5]
1974 [0, 1, 2, 3, 5, 6]
1975 [0, 1, 2, 3, 5, 0, 1, 2, 0, 1, 0]
1976 [0, 1, 2, 3, 5, 0, 1, 2, 0, 1]
1977 [0, 1, 2, 3, 5, 0, 1, 2, 0]
1978 [0, 1, 2, 3, 5, 0, 1, 2, 1]
1979 [0, 1, 2, 3, 5, 0, 1, 2]
1980 [0, 1, 2, 3, 5, 0, 1, 0]
1981 [0, 1, 2, 3, 5, 0, 1]
1982 [0, 1, 2, 3, 5, 0, 2]
1983 [0, 1, 2, 3, 5, 0]
1984 [0, 1, 2, 3, 5, 1, 2, 1]
1985 [0, 1, 2, 3, 5, 1, 2]
1986 [0, 1, 2, 3, 5, 1]
1987 [0, 1, 2, 3, 5, 2]
1988 [0, 1, 2, 3, 5]
1989 [0, 1, 2, 3, 6, 0, 1, 2, 0, 1, 0]
1990 [0, 1, 2, 3, 6, 0, 1, 2, 0, 1]
1991 [0, 1, 2, 3, 6, 0, 1, 2, 0]
1992 [0, 1, 2, 3, 6, 0, 1, 2, 1]
1993 [0, 1, 2, 3, 6, 0, 1, 2]
1994 [0, 1, 2, 3, 6, 0, 1, 0]
1995 [0, 1, 2, 3, 6, 0, 1]
1996 [0, 1, 2, 3, 6, 0, 2]
1997 [0, 1, 2, 3, 6, 0]
1998 [0, 1, 2, 3, 6, 1, 2, 1]
1999 [0, 1, 2, 3, 6, 1, 2]
2000 [0, 1, 2, 3, 6, 1]
2001 [0, 1, 2, 3, 6, 2]
2002 [0, 1, 2, 3, 6]
2003 [0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
2004 [0, 1, 2, 3, 0, 1, 2, 0, 1]
2005 [0, 1, 2, 3, 0, 1, 2, 0]
2006 [0, 1, 2, 3, 0, 1, 2, 1]
2007 [0, 1, 2, 3, 0, 1, 2]
2008 [0, 1, 2, 3, 0, 1, 0]
2009 [0, 1, 2, 3, 0, 1]
2010 [0, 1, 2, 3, 0, 2]
2011 [0, 1, 2, 3, 0]
2012 [0, 1, 2, 3, 1, 2, 1]
2013 [0, 1, 2, 3, 1, 2]
2014 [0, 1, 2, 3, 1]
2015 [0, 1, 2, 3, 2]
2016 [0, 1, 2, 3]
2017 [0, 1, 2, 4, 5, 6, 0, 1, 4, 5, 6, 0, 4, 5, 6]
2018 [0, 1, 2, 4, 5, 6, 0, 1, 4, 5, 6, 0, 4, 5]
2019 [0, 1, 2, 4, 5, 6, 0, 1, 4, 5, 6, 0, 4]
2020 [0, 1, 2, 4, 5, 6, 0, 1, 4, 5, 6, 0]
2021 [0, 1, 2, 4, 5, 6, 0, 1, 4, 5, 6, 4, 5, 6]
2022 [0, 1, 2, 4, 5, 6, 0, 1, 4, 5, 6, 4, 5]
2023 [0, 1, 2, 4, 5, 6, 0, 1, 4, 5, 6, 4]
2024 [0, 1, 2, 4, 5, 6, 0, 1, 4, 5, 6]
2025 [0, 1, 2, 4, 5, 6, 0, 1, 4, 5, 0, 4]
2026 [0, 1, 2, 4, 5, 6, 0, 1, 4, 5, 0]
2027 [0, 1, 2, 4, 5, 6, 0, 1, 4, 5, 4]
2028 [0, 1, 2, 4, 5, 6, 0, 1, 4, 5]
2029 [0, 1, 2, 4, 5, 6, 0, 1, 4, 0]
2030 [0, 1, 2, 4, 5, 6, 0, 1, 4]
2031 [0, 1, 2, 4, 5, 6, 0, 1, 5, 6, 0]
2032 [0, 1, 2, 4, 5, 6, 0, 1, 5, 6]
2033 [0, 1, 2, 4, 5, 6, 0, 1, 5, 0]
2034 [0, 1, 2, 4, 5, 6, 0, 1, 5]
2035 [0, 1, 2, 4, 5, 6, 0, 1, 0]
2036 [0, 1, 2, 4, 5, 6, 0, 1]
2037 [0, 1, 2, 4, 5, 6, 0, 4, 5, 6, 4, 5, 6]
2038 [0, 1, 2, 4, 5, 6, 0, 4, 5, 6, 4, 5]
2039 [0, 1, 2, 4, 5, 6, 0, 4, 5, 6, 4]
2040 [0, 1, 2, 4, 5, 6, 0, 4, 5, 6]
2041 [0, 1, 2, 4, 5, 6, 0, 4, 5, 4]
2042 [0, 1, 2, 4, 5, 6, 0, 4, 5]
2043 [0, 1, 2, 4, 5, 6, 0, 4]
2044 [0, 1, 2, 4, 5, 6, 0, 5, 6]
2045 [0, 1, 2, 4, 5, 6, 0, 5]
2046 [0, 1, 2, 4, 5, 6, 0]
2047 [0, 1, 2, 4, 5, 6, 1, 4, 5, 6, 4, 5, 6]
2048 [0, 1, 2, 4, 5, 6, 1, 4, 5, 6, 4, 5]
2049 [0, 1, 2, 4, 5, 6, 1, 4, 5, 6, 4]
2050 [0, 1, 2, 4, 5, 6, 1, 4, 5, 6]
2051 [0, 1, 2, 4, 5, 6, 1, 4, 5, 4]
2052 [0, 1, 2, 4, 5, 6, 1, 4, 5]
2053 [0, 1, 2, 4, 5, 6, 1, 4]
2054 [0, 1, 2, 4, 5, 6, 1, 5, 6]
2055 [0, 1, 2, 4, 5, 6, 1, 5]
2056 [0, 1, 2, 4, 5, 6, 1]
2057 [0, 1, 2, 4, 5, 6, 4, 5, 6, 4, 5, 6]
2058 [0, 1, 2, 4, 5, 6, 4, 5, 6, 4, 5]
2059 [0, 1, 2, 4, 5, 6, 4, 5, 6, 4]
2060 [0, 1, 2, 4, 5, 6, 4, 5, 6]
2061 [0, 1, 2, 4, 5, 6, 4, 5, 4]
2062 [0, 1, 2, 4, 5, 6, 4, 5]
2063 [0, 1, 2, 4, 5, 6, 4]
2064 [0, 1, 2, 4, 5, 6, 5, 6]
2065 [0, 1, 2, 4, 5, 6, 5]
2066 [0, 1, 2, 4, 5, 6]
2067 [0, 1, 2, 4, 5, 0, 1, 4, 0]
2068 [0, 1, 2, 4, 5, 0, 1, 4]
2069 [0, 1, 2, 4, 5, 0, 1, 0]
2070 [0, 1, 2, 4, 5, 0, 1]
2071 [0, 1, 2, 4, 5, 0, 4]
2072 [0, 1, 2, 4, 5, 0]
2073 [0, 1, 2, 4, 5, 1, 4]
2074 [0, 1, 2, 4, 5, 1]
2075 [0, 1, 2, 4, 5, 4]
2076 [0, 1, 2, 4, 5]
2077 [0, 1, 2, 4, 6, 0, 1, 0]
2078 [0, 1, 2, 4, 6, 0, 1]
2079 [0, 1, 2, 4, 6, 0]
2080 [0, 1, 2, 4, 6, 1]
2081 [0, 1, 2, 4, 6]
2082 [0, 1, 2, 4, 0, 1, 0]
2083 [0, 1, 2, 4, 0, 1]
2084 [0, 1, 2, 4, 0]
2085 [0, 1, 2, 4, 1]
2086 [0, 1, 2, 4]
2087 [0, 1, 2, 5, 6, 0, 1, 5, 6, 0]
2088 [0, 1, 2, 5, 6, 0, 1, 5, 6]
2089 [0, 1, 2, 5, 6, 0, 1, 5, 0]
2090 [0, 1, 2, 5, 6, 0, 1, 5]
2091 [0, 1, 2, 5, 6, 0, 1, 0]
2092 [0, 1, 2, 5, 6, 0, 1]
2093 [0, 1, 2, 5, 6, 0, 5, 6]
2094 [0, 1, 2, 5, 6, 0, 5]
2095 [0, 1, 2, 5, 6, 0]
2096 [0, 1, 2, 5, 6, 1, 5, 6]
2097 [0, 1, 2, 5, 6, 1, 5]
2098 [0, 1, 2, 5, 6, 1]
2099 [0, 1, 2, 5, 6, 5, 6]
2100 [0, 1, 2, 5, 6, 5]
2101 [0, 1, 2, 5, 6]
2102 [0, 1, 2, 5, 0, 1, 0]
2103 [0, 1, 2, 5, 0, 1]
2104 [0, 1, 2, 5, 0]
2105 [0, 1, 2, 5, 1]
2106 [0, 1, 2, 5]
2107 [0, 1, 2, 6, 0, 1, 0]
2108 [0, 1, 2, 6, 0, 1]
2109 [0, 1, 2, 6, 0]
2110 [0, 1, 2, 6, 1]
2111 [0, 1, 2, 6]
2112 [0, 1, 2, 0, 1, 0]
2113 [0, 1, 2, 0, 1]
2114 [0, 1, 2, 0]
2115 [0, 1, 2, 1]
2116 [0, 1, 2]
2117 [0, 1, 3, 4, 5, 6, 0, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6]
2118 [0, 1, 3, 4, 5, 6, 0, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5]
2119 [0, 1, 3, 4, 5, 6, 0, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4]
2120 [0, 1, 3, 4, 5, 6, 0, 3, 4, 5, 6, 3, 4, 5, 6, 3]
2121 [0, 1, 3, 4, 5, 6, 0, 3, 4, 5, 6, 3, 4, 5, 6]
2122 [0, 1, 3, 4, 5, 6, 0, 3, 4, 5, 6, 3, 4, 5, 3, 4]
2123 [0, 1, 3, 4, 5, 6, 0, 3, 4, 5, 6, 3, 4, 5, 3]
2124 [0, 1, 3, 4, 5, 6, 0, 3, 4, 5, 6, 3, 4, 5]
2125 [0, 1, 3, 4, 5, 6, 0, 3, 4, 5, 6, 3, 4, 3]
2126 [0, 1, 3, 4, 5, 6, 0, 3, 4, 5, 6, 3, 4]
2127 [0, 1, 3, 4, 5, 6, 0, 3, 4, 5, 6, 3]
2128 [0, 1, 3, 4, 5, 6, 0, 3, 4, 5, 6, 4, 5, 6]
2129 [0, 1, 3, 4, 5, 6, 0, 3, 4, 5, 6, 4, 5]
2130 [0, 1, 3, 4, 5, 6, 0, 3, 4, 5, 6, 4]
2131 [0, 1, 3, 4, 5, 6, 0, 3, 4, 5, 6]
2132 [0, 1, 3, 4, 5, 6, 0, 3, 4, 5, 3, 4, 3]
2133 [0, 1, 3, 4, 5, 6, 0, 3, 4, 5, 3, 4]
2134 [0, 1, 3, 4, 5, 6, 0, 3, 4, 5, 3]
2135 [0, 1, 3, 4, 5, 6, 0, 3, 4, 5, 4]
2136 [0, 1, 3, 4, 5, 6, 0, 3, 4, 5]
2137 [0, 1, 3, 4, 5, 6, 0, 3, 4, 3]
2138 [0, 1, 3, 4, 5, 6, 0, 3, 4]
2139 [0, 1, 3, 4, 5, 6, 0, 3, 5, 6]
2140 [0, 1, 3, 4, 5, 6, 0, 3, 5]
2141 [0, 1, 3, 4, 5, 6, 0, 3]
2142 [0, 1, 3, 4, 5, 6, 0, 4, 5, 6, 4, 5, 6]
2143 [0, 1, 3, 4, 5, 6, 0, 4, 5, 6, 4, 5]
2144 [0, 1, 3, 4, 5, 6, 0, 4, 5, 6, 4]
2145 [0, 1, 3, 4, 5, 6, 0, 4, 5, 6]
2146 [0, 1, 3, 4, 5, 6, 0, 4, 5, 4]
2147 [0, 1, 3, 4, 5, 6, 0, 4, 5]
2148 [0, 1, 3, 4, 5, 6, 0, 4]
2149 [0, 1, 3, 4, 5, 6, 0, 5, 6]
2150 [0, 1, 3, 4, 5, 6, 0, 5]
2151 [0, 1, 3, 4, 5, 6, 0]
2152 [0, 1, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6]
2153 [0, 1, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5]
2154 [0, 1, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4]
2155 [0, 1, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3]
2156 [0, 1, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6]
2157 [0, 1, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 3, 4]
2158 [0, 1, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 3]
2159 [0, 1, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5]
2160 [0, 1, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 3]
2161 [0, 1, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4]
2162 [0, 1, 3, 4, 5, 6, 3, 4, 5, 6, 3]
2163 [0, 1, 3, 4, 5, 6, 3, 4, 5, 6, 4, 5, 6]
2164 [0, 1, 3, 4, 5, 6, 3, 4, 5, 6, 4, 5]
2165 [0, 1, 3, 4, 5, 6, 3, 4, 5, 6, 4]
2166 [0, 1, 3, 4, 5, 6, 3, 4, 5, 6]
2167 [0, 1, 3, 4, 5, 6, 3, 4, 5, 3, 4, 3]
2168 [0, 1, 3, 4, 5, 6, 3, 4, 5, 3, 4]
2169 [0, 1, 3, 4, 5, 6, 3, 4, 5, 3]
2170 [0, 1, 3, 4, 5, 6, 3, 4, 5, 4]
2171 [0, 1, 3, 4, 5, 6, 3, 4, 5]
2172 [0, 1, 3, 4, 5, 6, 3, 4, 3]
2173 [0, 1, 3, 4, 5, 6, 3, 4]
2174 [0, 1, 3, 4, 5, 6, 3, 5, 6]
2175 [0, 1, 3, 4, 5, 6, 3, 5]
2176 [0, 1, 3, 4, 5, 6, 3]
2177 [0, 1, 3, 4, 5, 6, 4, 5, 6, 4, 5, 6]
2178 [0, 1, 3, 4, 5, 6, 4, 5, 6, 4, 5]
2179 [0, 1, 3, 4, 5, 6, 4, 5, 6, 4]
2180 [0, 1, 3, 4, 5, 6, 4, 5, 6]
2181 [0, 1, 3, 4, 5, 6, 4, 5, 4]
2182 [0, 1, 3, 4, 5, 6, 4, 5]
2183 [0, 1, 3, 4, 5, 6, 4]
2184 [0, 1, 3, 4, 5, 6, 5, 6]
2185 [0, 1, 3, 4, 5, 6, 5]
2186 [0, 1, 3, 4, 5, 6]
2187 [0, 1, 3, 4, 5, 0, 3, 4, 3]
2188 [0, 1, 3, 4, 5, 0, 3, 4]
2189 [0, 1, 3, 4, 5, 0, 3]
2190 [0, 1, 3, 4, 5, 0, 4]
2191 [0, 1, 3, 4, 5, 0]
2192 [0, 1, 3, 4, 5, 3, 4, 3]
2193 [0, 1, 3, 4, 5, 3, 4]
2194 [0, 1, 3, 4, 5, 3]
2195 [0, 1, 3, 4, 5, 4]
2196 [0, 1, 3, 4, 5]
2197 [0, 1, 3, 4, 6, 0, 3]
2198 [0, 1, 3, 4, 6, 0]
2199 [0, 1, 3, 4, 6, 3]
2200 [0, 1, 3, 4, 6]
2201 [0, 1, 3, 4, 0, 3]
2202 [0, 1, 3, 4, 0]
2203 [0, 1, 3, 4, 3]
2204 [0, 1, 3, 4]
2205 [0, 1, 3, 5, 6, 0, 5, 6]
2206 [0, 1, 3, 5, 6, 0, 5]
2207 [0, 1, 3, 5, 6, 0]
2208 [0, 1, 3, 5, 6, 5, 6]
2209 [0, 1, 3, 5, 6, 5]
2210 [0, 1, 3, 5, 6]
2211 [0, 1, 3, 5, 0]
2212 [0, 1, 3, 5]
2213 [0, 1, 3, 6, 0]
2214 [0, 1, 3, 6]
2215 [0, 1, 3, 0]
2216 [0, 1, 3]
2217 [0, 1, 4, 5, 6, 0, 4, 5, 6, 4, 5, 6]
2218 [0, 1, 4, 5, 6, 0, 4, 5, 6, 4, 5]
2219 [0, 1, 4, 5, 6, 0, 4, 5, 6, 4]
2220 [0, 1, 4, 5, 6, 0, 4, 5, 6]
2221 [0, 1, 4, 5, 6, 0, 4, 5, 4]
2222 [0, 1, 4, 5, 6, 0, 4, 5]
2223 [0, 1, 4, 5, 6, 0, 4]
2224 [0, 1, 4, 5, 6, 0, 5, 6]
2225 [0, 1, 4, 5, 6, 0, 5]
2226 [0, 1, 4, 5, 6, 0]
2227 [0, 1, 4, 5, 6, 4, 5, 6, 4, 5, 6]
2228 [0, 1, 4, 5, 6, 4, 5, 6, 4, 5]
2229 [0, 1, 4, 5, 6, 4, 5, 6, 4]
2230 [0, 1, 4, 5, 6, 4, 5, 6]
2231 [0, 1, 4, 5, 6, 4, 5, 4]
2232 [0, 1, 4, 5, 6, 4, 5]
2233 [0, 1, 4, 5, 6, 4]
2234 [0, 1, 4, 5, 6, 5, 6]
2235 [0, 1, 4, 5, 6, 5]
2236 [0, 1, 4, 5, 6]
2237 [0, 1, 4, 5, 0, 4]
2238 [0, 1, 4, 5, 0]
2239 [0, 1, 4, 5, 4]
2240 [0, 1, 4, 5]
2241 [0, 1, 4, 6, 0]
2242 [0, 1, 4, 6]
2243 [0, 1, 4, 0]
2244 [0, 1, 4]
2245 [0, 1, 5, 6, 0, 5, 6]
2246 [0, 1, 5, 6, 0, 5]
2247 [0, 1, 5, 6, 0]
2248 [0, 1, 5, 6, 5, 6]
2249 [0, 1, 5, 6, 5]
2250 [0, 1, 5, 6]
2251 [0, 1, 5, 0]
2252 [0, 1, 5]
2253 [0, 1, 6, 0]
2254 [0, 1, 6]
2255 [0, 1, 0]
2256 [0, 1]
2257 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6]
2258 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5]
2259 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4]
2260 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3]
2261 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2]
2262 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6]
2263 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4]
2264 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3]
2265 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2]
2266 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5]
2267 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3]
2268 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 2]
2269 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4]
2270 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 2]
2271 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3]
2272 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2]
2273 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5, 6]
2274 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5]
2275 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4]
2276 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3]
2277 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6]
2278 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2, 3]
2279 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2]
2280 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4]
2281 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 2]
2282 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3]
2283 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2]
2284 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 3, 4]
2285 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 3]
2286 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5]
2287 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3, 2]
2288 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3]
2289 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 2]
2290 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 3]
2291 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4]
2292 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 2]
2293 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3]
2294 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 4, 5, 6]
2295 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 4, 5]
2296 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 4]
2297 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2]
2298 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6]
2299 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5]
2300 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4]
2301 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3]
2302 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5, 6]
2303 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5, 3, 4]
2304 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5, 3]
2305 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5]
2306 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 3]
2307 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4]
2308 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3]
2309 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 4, 5, 6]
2310 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 4, 5]
2311 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 4]
2312 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6]
2313 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2, 3, 2]
2314 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2, 3]
2315 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2]
2316 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 3]
2317 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4]
2318 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 2]
2319 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3]
2320 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 4]
2321 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2]
2322 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 3, 4, 3]
2323 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 3, 4]
2324 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 3]
2325 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 4]
2326 [0, 2, 3, 4, 5, 6, 2, 3, 4, 5]
2327 [0, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3, 2]
2328 [0, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3]
2329 [0, 2, 3, 4, 5, 6, 2, 3, 4, 2]
2330 [0, 2, 3, 4, 5, 6, 2, 3, 4, 3]
2331 [0, 2, 3, 4, 5, 6, 2, 3, 4]
2332 [0, 2, 3, 4, 5, 6, 2, 3, 5, 6, 2]
2333 [0, 2, 3, 4, 5, 6, 2, 3, 5, 6]
2334 [0, 2, 3, 4, 5, 6, 2, 3, 5, 2]
2335 [0, 2, 3, 4, 5, 6, 2, 3, 5]
2336 [0, 2, 3, 4, 5, 6, 2, 3, 2]
2337 [0, 2, 3, 4, 5, 6, 2, 3]
2338 [0, 2, 3, 4, 5, 6, 2, 4, 5, 6, 4, 5, 6]
2339 [0, 2, 3, 4, 5, 6, 2, 4, 5, 6, 4, 5]
2340 [0, 2, 3, 4, 5, 6, 2, 4, 5, 6, 4]
2341 [0, 2, 3, 4, 5, 6, 2, 4, 5, 6]
2342 [0, 2, 3, 4, 5, 6, 2, 4, 5, 4]
2343 [0, 2, 3, 4, 5, 6, 2, 4, 5]
2344 [0, 2, 3, 4, 5, 6, 2, 4]
2345 [0, 2, 3, 4, 5, 6, 2, 5, 6]
2346 [0, 2, 3, 4, 5, 6, 2, 5]
2347 [0, 2, 3, 4, 5, 6, 2]
2348 [0, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6]
2349 [0, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5]
2350 [0, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4]
2351 [0, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3]
2352 [0, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6]
2353 [0, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 3, 4]
2354 [0, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 3]
2355 [0, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5]
2356 [0, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 3]
2357 [0, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4]
2358 [0, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3]
2359 [0, 2, 3, 4, 5, 6, 3, 4, 5, 6, 4, 5, 6]
2360 [0, 2, 3, 4, 5, 6, 3, 4, 5, 6, 4, 5]
2361 [0, 2, 3, 4, 5, 6, 3, 4, 5, 6, 4]
2362 [0, 2, 3, 4, 5, 6, 3, 4, 5, 6]
2363 [0, 2, 3, 4, 5, 6, 3, 4, 5, 3, 4, 3]
2364 [0, 2, 3, 4, 5, 6, 3, 4, 5, 3, 4]
2365 [0, 2, 3, 4, 5, 6, 3, 4, 5, 3]
2366 [0, 2, 3, 4, 5, 6, 3, 4, 5, 4]
2367 [0, 2, 3, 4, 5, 6, 3, 4, 5]
2368 [0, 2, 3, 4, 5, 6, 3, 4, 3]
2369 [0, 2, 3, 4, 5, 6, 3, 4]
2370 [0, 2, 3, 4, 5, 6, 3, 5, 6]
2371 [0, 2, 3, 4, 5, 6, 3, 5]
2372 [0, 2, 3, 4, 5, 6, 3]
2373 [0, 2, 3, 4, 5, 6, 4, 5, 6, 4, 5, 6]
2374 [0, 2, 3, 4, 5, 6, 4, 5, 6, 4, 5]
2375 [0, 2, 3, 4, 5, 6, 4, 5, 6, 4]
2376 [0, 2, 3, 4, 5, 6, 4, 5, 6]
2377 [0, 2, 3, 4, 5, 6, 4, 5, 4]
2378 [0, 2, 3, 4, 5, 6, 4, 5]
2379 [0, 2, 3, 4, 5, 6, 4]
2380 [0, 2, 3, 4, 5, 6, 5, 6]
2381 [0, 2, 3, 4, 5, 6, 5]
2382 [0, 2, 3, 4, 5, 6]
2383 [0, 2, 3, 4, 5, 2, 3, 4, 2, 3, 2]
2384 [0, 2, 3, 4, 5, 2, 3, 4, 2, 3]
2385 [0, 2, 3, 4, 5, 2, 3, 4, 2]
2386 [0, 2, 3, 4, 5, 2, 3, 4, 3]
2387 [0, 2, 3, 4, 5, 2, 3, 4]
2388 [0, 2, 3, 4, 5, 2, 3, 2]
2389 [0, 2, 3, 4, 5, 2, 3]
2390 [0, 2, 3, 4, 5, 2, 4]
2391 [0, 2, 3, 4, 5, 2]
2392 [0, 2, 3, 4, 5, 3, 4, 3]
2393 [0, 2, 3, 4, 5, 3, 4]
2394 [0, 2, 3, 4, 5, 3]
2395 [0, 2, 3, 4, 5, 4]
2396 [0, 2, 3, 4, 5]
2397 [0, 2, 3, 4, 6, 2, 3, 2]
2398 [0, 2, 3, 4, 6, 2, 3]
2399 [0, 2, 3, 4, 6, 2]
2400 [0, 2, 3, 4, 6, 3]
2401 [0, 2, 3, 4, 6]
2402 [0, 2, 3, 4, 2, 3, 2]
2403 [0, 2, 3, 4, 2, 3]
2404 [0, 2, 3, 4, 2]
2405 [0, 2, 3, 4, 3]
2406 [0, 2, 3, 4]
2407 [0, 2, 3, 5, 6, 2, 5, 6]
2408 [0, 2, 3, 5, 6, 2, 5]
2409 [0, 2, 3, 5, 6, 2]
2410 [0, 2, 3, 5, 6, 5, 6]
2411 [0, 2, 3, 5, 6, 5]
2412 [0, 2, 3, 5, 6]
2413 [0, 2, 3, 5, 2]
2414 [0, 2, 3, 5]
2415 [0, 2, 3, 6, 2]
2416 [0, 2, 3, 6]
2417 [0, 2, 3, 2]
2418 [0, 2, 3]
2419 [0, 2, 4, 5, 6, 4, 5, 6, 4, 5, 6]
2420 [0, 2, 4, 5, 6, 4, 5, 6, 4, 5]
2421 [0, 2, 4, 5, 6, 4, 5, 6, 4]
2422 [0, 2, 4, 5, 6, 4, 5, 6]
2423 [0, 2, 4, 5, 6, 4, 5, 4]
2424 [0, 2, 4, 5, 6, 4, 5]
2425 [0, 2, 4, 5, 6, 4]
2426 [0, 2, 4, 5, 6, 5, 6]
2427 [0, 2, 4, 5, 6, 5]
2428 [0, 2, 4, 5, 6]
2429 [0, 2, 4, 5, 4]
2430 [0, 2, 4, 5]
2431 [0, 2, 4, 6]
2432 [0, 2, 4]
2433 [0, 2, 5, 6, 5, 6]
2434 [0, 2, 5, 6, 5]
2435 [0, 2, 5, 6]
2436 [0, 2, 5]
2437 [0, 2, 6]
2438 [0, 2]
2439 [0, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6]
2440 [0, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5]
2441 [0, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4]
2442 [0, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3]
2443 [0, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6]
2444 [0, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 3, 4]
2445 [0, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 3]
2446 [0, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5]
2447 [0, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 3]
2448 [0, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4]
2449 [0, 3, 4, 5, 6, 3, 4, 5, 6, 3]
2450 [0, 3, 4, 5, 6, 3, 4, 5, 6, 4, 5, 6]
2451 [0, 3, 4, 5, 6, 3, 4, 5, 6, 4, 5]
2452 [0, 3, 4, 5, 6, 3, 4, 5, 6, 4]
2453 [0, 3, 4, 5, 6, 3, 4, 5, 6]
2454 [0, 3, 4, 5, 6, 3, 4, 5, 3, 4, 3]
2455 [0, 3, 4, 5, 6, 3, 4, 5, 3, 4]
2456 [0, 3, 4, 5, 6, 3, 4, 5, 3]
2457 [0, 3, 4, 5, 6, 3, 4, 5, 4]
2458 [0, 3, 4, 5, 6, 3, 4, 5]
2459 [0, 3, 4, 5, 6, 3, 4, 3]
2460 [0, 3, 4, 5, 6, 3, 4]
2461 [0, 3, 4, 5, 6, 3, 5, 6]
2462 [0, 3, 4, 5, 6, 3, 5]
2463 [0, 3, 4, 5, 6, 3]
2464 [0, 3, 4, 5, 6, 4, 5, 6, 4, 5, 6]
2465 [0, 3, 4, 5, 6, 4, 5, 6, 4, 5]
2466 [0, 3, 4, 5, 6, 4, 5, 6, 4]
2467 [0, 3, 4, 5, 6, 4, 5, 6]
2468 [0, 3, 4, 5, 6, 4, 5, 4]
2469 [0, 3, 4, 5, 6, 4, 5]
2470 [0, 3, 4, 5, 6, 4]
2471 [0, 3, 4, 5, 6, 5, 6]
2472 [0, 3, 4, 5, 6, 5]
2473 [0, 3, 4, 5, 6]
2474 [0, 3, 4, 5, 3, 4, 3]
2475 [0, 3, 4, 5, 3, 4]
2476 [0, 3, 4, 5, 3]
2477 [0, 3, 4, 5, 4]
2478 [0, 3, 4, 5]
2479 [0, 3, 4, 6, 3]
2480 [0, 3, 4, 6]
2481 [0, 3, 4, 3]
2482 [0, 3, 4]
2483 [0, 3, 5, 6, 5, 6]
2484 [0, 3, 5, 6, 5]
2485 [0, 3, 5, 6]
2486 [0, 3, 5]
2487 [0, 3, 6]
2488 [0, 3]
2489 [0, 4, 5, 6, 4, 5, 6, 4, 5, 6]
2490 [0, 4, 5, 6, 4, 5, 6, 4, 5]
2491 [0, 4, 5, 6, 4, 5, 6, 4]
2492 [0, 4, 5, 6, 4, 5, 6]
2493 [0, 4, 5, 6, 4, 5, 4]
2494 [0, 4, 5, 6, 4, 5]
2495 [0, 4, 5, 6, 4]
2496 [0, 4, 5, 6, 5, 6]
2497 [0, 4, 5, 6, 5]
2498 [0, 4, 5, 6]
2499 [0, 4, 5, 4]
2500 [0, 4, 5]
2501 [0, 4, 6]
2502 [0, 4]
2503 [0, 5, 6, 5, 6]
2504 [0, 5, 6, 5]
2505 [0, 5, 6]
2506 [0, 5]
2507 [0, 6]
2508 [0]
2509 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6]
2510 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5]
2511 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4]
2512 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3]
2513 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2]
2514 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1]
2515 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6]
2516 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4]
2517 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3]
2518 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2]
2519 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1]
2520 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5]
2521 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3]
2522 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2]
2523 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1]
2524 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4]
2525 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 1, 2]
2526 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 1]
2527 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3]
2528 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 1]
2529 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2]
2530 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1]
2531 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6]
2532 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5]
2533 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4]
2534 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3]
2535 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2]
2536 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6]
2537 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3]
2538 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2]
2539 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1]
2540 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4]
2541 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2]
2542 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1]
2543 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3]
2544 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 1]
2545 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2]
2546 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1]
2547 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 4]
2548 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3]
2549 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2]
2550 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5]
2551 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 1, 2]
2552 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 1]
2553 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3]
2554 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 1]
2555 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2]
2556 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1]
2557 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 2, 3]
2558 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 2]
2559 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4]
2560 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 1, 2, 1]
2561 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 1, 2]
2562 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 1]
2563 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 2]
2564 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3]
2565 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 1]
2566 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2]
2567 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6]
2568 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5]
2569 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3, 4]
2570 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3]
2571 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1]
2572 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6]
2573 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5]
2574 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4]
2575 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3]
2576 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2]
2577 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6]
2578 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4]
2579 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3]
2580 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2]
2581 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5]
2582 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3]
2583 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 2]
2584 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4]
2585 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 2]
2586 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3]
2587 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2]
2588 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3, 4, 5, 6]
2589 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3, 4, 5]
2590 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3, 4]
2591 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3]
2592 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6]
2593 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2]
2594 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1]
2595 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3]
2596 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1]
2597 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2]
2598 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1]
2599 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3]
2600 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2]
2601 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4]
2602 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1]
2603 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2]
2604 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1]
2605 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 2]
2606 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3]
2607 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 1]
2608 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2]
2609 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 3, 4]
2610 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 3]
2611 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1]
2612 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 4, 2, 3]
2613 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 4, 2]
2614 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 4]
2615 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 2]
2616 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3]
2617 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2]
2618 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 3, 4]
2619 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 3]
2620 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5]
2621 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
2622 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 1, 2]
2623 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 1]
2624 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 2]
2625 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3]
2626 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 1]
2627 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2]
2628 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 3]
2629 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1]
2630 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 2, 3, 2]
2631 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 2, 3]
2632 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 2]
2633 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 3]
2634 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4]
2635 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 1, 2, 1]
2636 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 1, 2]
2637 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 1]
2638 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 2]
2639 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3]
2640 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 4, 5, 6, 1]
2641 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 4, 5, 6]
2642 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 4, 5, 1]
2643 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 4, 5]
2644 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 4, 1]
2645 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 4]
2646 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 1]
2647 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2]
2648 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 3, 4, 5, 6]
2649 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 3, 4, 5]
2650 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 3, 4]
2651 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 3]
2652 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6]
2653 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 3, 4]
2654 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 3]
2655 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5]
2656 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3, 4, 3]
2657 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3, 4]
2658 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3]
2659 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 4, 5, 6]
2660 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 4, 5]
2661 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 4]
2662 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1]
2663 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6]
2664 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5]
2665 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4]
2666 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3]
2667 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2]
2668 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6]
2669 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4]
2670 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3]
2671 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2]
2672 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5]
2673 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3]
2674 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 2]
2675 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4]
2676 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 2]
2677 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3]
2678 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2]
2679 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5, 6]
2680 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5]
2681 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4]
2682 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3]
2683 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6]
2684 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2, 3]
2685 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2]
2686 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4]
2687 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 2]
2688 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3]
2689 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2]
2690 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 3, 4]
2691 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 3]
2692 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5]
2693 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3, 2]
2694 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3]
2695 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 2]
2696 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 3]
2697 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4]
2698 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 2]
2699 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3]
2700 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 4, 5, 6]
2701 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 4, 5]
2702 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 4]
2703 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2]
2704 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6]
2705 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5]
2706 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4]
2707 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3]
2708 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3, 4, 5, 6]
2709 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3, 4, 5, 3, 4]
2710 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3, 4, 5, 3]
2711 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3, 4, 5]
2712 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3, 4, 3]
2713 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3, 4]
2714 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3]
2715 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 4, 5, 6]
2716 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 4, 5]
2717 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 4]
2718 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6]
2719 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
2720 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2]
2721 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1]
2722 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 2]
2723 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3]
2724 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1]
2725 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2]
2726 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 3]
2727 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1]
2728 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3, 2]
2729 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3]
2730 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2]
2731 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 3]
2732 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4]
2733 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1]
2734 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2]
2735 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1]
2736 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 2]
2737 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3]
2738 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 4, 1]
2739 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 4]
2740 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 1]
2741 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2]
2742 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 3, 4, 3]
2743 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 3, 4]
2744 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 3]
2745 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 4]
2746 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1]
2747 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 4, 2, 3, 2]
2748 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 4, 2, 3]
2749 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 4, 2]
2750 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 4, 3]
2751 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 4]
2752 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 2]
2753 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3]
2754 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 4]
2755 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2]
2756 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 3, 4, 3]
2757 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 3, 4]
2758 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 3]
2759 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 4]
2760 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5]
2761 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
2762 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 1, 2]
2763 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 1]
2764 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 2]
2765 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3]
2766 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 1]
2767 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2]
2768 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 3]
2769 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1]
2770 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 2, 3, 2]
2771 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 2, 3]
2772 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 2]
2773 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 3]
2774 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4]
2775 [1, 2, 3, 4, 5, 6, 1, 2, 3, 5, 6, 1, 2, 1]
2776 [1, 2, 3, 4, 5, 6, 1, 2, 3, 5, 6, 1, 2]
2777 [1, 2, 3, 4, 5, 6, 1, 2, 3, 5, 6, 1]
2778 [1, 2, 3, 4, 5, 6, 1, 2, 3, 5, 6, 2]
2779 [1, 2, 3, 4, 5, 6, 1, 2, 3, 5, 6]
2780 [1, 2, 3, 4, 5, 6, 1, 2, 3, 5, 1, 2, 1]
2781 [1, 2, 3, 4, 5, 6, 1, 2, 3, 5, 1, 2]
2782 [1, 2, 3, 4, 5, 6, 1, 2, 3, 5, 1]
2783 [1, 2, 3, 4, 5, 6, 1, 2, 3, 5, 2]
2784 [1, 2, 3, 4, 5, 6, 1, 2, 3, 5]
2785 [1, 2, 3, 4, 5, 6, 1, 2, 3, 1, 2, 1]
2786 [1, 2, 3, 4, 5, 6, 1, 2, 3, 1, 2]
2787 [1, 2, 3, 4, 5, 6, 1, 2, 3, 1]
2788 [1, 2, 3, 4, 5, 6, 1, 2, 3, 2]
2789 [1, 2, 3, 4, 5, 6, 1, 2, 3]
2790 [1, 2, 3, 4, 5, 6, 1, 2, 4, 5, 6, 1, 4, 5, 6]
2791 [1, 2, 3, 4, 5, 6, 1, 2, 4, 5, 6, 1, 4, 5]
2792 [1, 2, 3, 4, 5, 6, 1, 2, 4, 5, 6, 1, 4]
2793 [1, 2, 3, 4, 5, 6, 1, 2, 4, 5, 6, 1]
2794 [1, 2, 3, 4, 5, 6, 1, 2, 4, 5, 6, 4, 5, 6]
2795 [1, 2, 3, 4, 5, 6, 1, 2, 4, 5, 6, 4, 5]
2796 [1, 2, 3, 4, 5, 6, 1, 2, 4, 5, 6, 4]
2797 [1, 2, 3, 4, 5, 6, 1, 2, 4, 5, 6]
2798 [1, 2, 3, 4, 5, 6, 1, 2, 4, 5, 1, 4]
2799 [1, 2, 3, 4, 5, 6, 1, 2, 4, 5, 1]
2800 [1, 2, 3, 4, 5, 6, 1, 2, 4, 5, 4]
2801 [1, 2, 3, 4, 5, 6, 1, 2, 4, 5]
2802 [1, 2, 3, 4, 5, 6, 1, 2, 4, 1]
2803 [1, 2, 3, 4, 5, 6, 1, 2, 4]
2804 [1, 2, 3, 4, 5, 6, 1, 2, 5, 6, 1]
2805 [1, 2, 3, 4, 5, 6, 1, 2, 5, 6]
2806 [1, 2, 3, 4, 5, 6, 1, 2, 5, 1]
2807 [1, 2, 3, 4, 5, 6, 1, 2, 5]
2808 [1, 2, 3, 4, 5, 6, 1, 2, 1]
2809 [1, 2, 3, 4, 5, 6, 1, 2]
2810 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6]
2811 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5]
2812 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4]
2813 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 3, 4, 5, 6, 3]
2814 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 3, 4, 5, 6]
2815 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 3, 4, 5, 3, 4]
2816 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 3, 4, 5, 3]
2817 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 3, 4, 5]
2818 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 3, 4, 3]
2819 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 3, 4]
2820 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 3]
2821 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 4, 5, 6]
2822 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 4, 5]
2823 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 4]
2824 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6]
2825 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 3, 4, 3]
2826 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 3, 4]
2827 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 3]
2828 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 4]
2829 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5]
2830 [1, 2, 3, 4, 5, 6, 1, 3, 4, 3]
2831 [1, 2, 3, 4, 5, 6, 1, 3, 4]
2832 [1, 2, 3, 4, 5, 6, 1, 3, 5, 6]
2833 [1, 2, 3, 4, 5, 6, 1, 3, 5]
2834 [1, 2, 3, 4, 5, 6, 1, 3]
2835 [1, 2, 3, 4, 5, 6, 1, 4, 5, 6, 4, 5, 6]
2836 [1, 2, 3, 4, 5, 6, 1, 4, 5, 6, 4, 5]
2837 [1, 2, 3, 4, 5, 6, 1, 4, 5, 6, 4]
2838 [1, 2, 3, 4, 5, 6, 1, 4, 5, 6]
2839 [1, 2, 3, 4, 5, 6, 1, 4, 5, 4]
2840 [1, 2, 3, 4, 5, 6, 1, 4, 5]
2841 [1, 2, 3, 4, 5, 6, 1, 4]
2842 [1, 2, 3, 4, 5, 6, 1, 5, 6]
2843 [1, 2, 3, 4, 5, 6, 1, 5]
2844 [1, 2, 3, 4, 5, 6, 1]
2845 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6]
2846 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5]
2847 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4]
2848 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3]
2849 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2]
2850 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6]
2851 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4]
2852 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3]
2853 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2]
2854 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5]
2855 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3]
2856 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 2]
2857 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4]
2858 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 2]
2859 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3]
2860 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2]
2861 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5, 6]
2862 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5]
2863 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4]
2864 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3]
2865 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6]
2866 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2, 3]
2867 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2]
2868 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4]
2869 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 2]
2870 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3]
2871 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2]
2872 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 3, 4]
2873 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 3]
2874 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5]
2875 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3, 2]
2876 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3]
2877 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 2]
2878 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 3]
2879 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4]
2880 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 2]
2881 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3]
2882 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 4, 5, 6]
2883 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 4, 5]
2884 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 4]
2885 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2]
2886 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6]
2887 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5]
2888 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4]
2889 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3]
2890 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5, 6]
2891 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5, 3, 4]
2892 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5, 3]
2893 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5]
2894 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 3]
2895 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4]
2896 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3]
2897 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 4, 5, 6]
2898 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 4, 5]
2899 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 4]
2900 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6]
2901 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2, 3, 2]
2902 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2, 3]
2903 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2]
2904 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 3]
2905 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4]
2906 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 2]
2907 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3]
2908 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 4]
2909 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2]
2910 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 3, 4, 3]
2911 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 3, 4]
2912 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 3]
2913 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 4]
2914 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5]
2915 [1, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3, 2]
2916 [1, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3]
2917 [1, 2, 3, 4, 5, 6, 2, 3, 4, 2]
2918 [1, 2, 3, 4, 5, 6, 2, 3, 4, 3]
2919 [1, 2, 3, 4, 5, 6, 2, 3, 4]
2920 [1, 2, 3, 4, 5, 6, 2, 3, 5, 6, 2]
2921 [1, 2, 3, 4, 5, 6, 2, 3, 5, 6]
2922 [1, 2, 3, 4, 5, 6, 2, 3, 5, 2]
2923 [1, 2, 3, 4, 5, 6, 2, 3, 5]
2924 [1, 2, 3, 4, 5, 6, 2, 3, 2]
2925 [1, 2, 3, 4, 5, 6, 2, 3]
2926 [1, 2, 3, 4, 5, 6, 2, 4, 5, 6, 4, 5, 6]
2927 [1, 2, 3, 4, 5, 6, 2, 4, 5, 6, 4, 5]
2928 [1, 2, 3, 4, 5, 6, 2, 4, 5, 6, 4]
2929 [1, 2, 3, 4, 5, 6, 2, 4, 5, 6]
2930 [1, 2, 3, 4, 5, 6, 2, 4, 5, 4]
2931 [1, 2, 3, 4, 5, 6, 2, 4, 5]
2932 [1, 2, 3, 4, 5, 6, 2, 4]
2933 [1, 2, 3, 4, 5, 6, 2, 5, 6]
2934 [1, 2, 3, 4, 5, 6, 2, 5]
2935 [1, 2, 3, 4, 5, 6, 2]
2936 [1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6]
2937 [1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5]
2938 [1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4]
2939 [1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3]
2940 [1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6]
2941 [1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 3, 4]
2942 [1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 3]
2943 [1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5]
2944 [1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 3]
2945 [1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4]
2946 [1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3]
2947 [1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 4, 5, 6]
2948 [1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 4, 5]
2949 [1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 4]
2950 [1, 2, 3, 4, 5, 6, 3, 4, 5, 6]
2951 [1, 2, 3, 4, 5, 6, 3, 4, 5, 3, 4, 3]
2952 [1, 2, 3, 4, 5, 6, 3, 4, 5, 3, 4]
2953 [1, 2, 3, 4, 5, 6, 3, 4, 5, 3]
2954 [1, 2, 3, 4, 5, 6, 3, 4, 5, 4]
2955 [1, 2, 3, 4, 5, 6, 3, 4, 5]
2956 [1, 2, 3, 4, 5, 6, 3, 4, 3]
2957 [1, 2, 3, 4, 5, 6, 3, 4]
2958 [1, 2, 3, 4, 5, 6, 3, 5, 6]
2959 [1, 2, 3, 4, 5, 6, 3, 5]
2960 [1, 2, 3, 4, 5, 6, 3]
2961 [1, 2, 3, 4, 5, 6, 4, 5, 6, 4, 5, 6]
2962 [1, 2, 3, 4, 5, 6, 4, 5, 6, 4, 5]
2963 [1, 2, 3, 4, 5, 6, 4, 5, 6, 4]
2964 [1, 2, 3, 4, 5, 6, 4, 5, 6]
2965 [1, 2, 3, 4, 5, 6, 4, 5, 4]
2966 [1, 2, 3, 4, 5, 6, 4, 5]
2967 [1, 2, 3, 4, 5, 6, 4]
2968 [1, 2, 3, 4, 5, 6, 5, 6]
2969 [1, 2, 3, 4, 5, 6, 5]
2970 [1, 2, 3, 4, 5, 6]
2971 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
2972 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2]
2973 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1]
2974 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 2]
2975 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3]
2976 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1]
2977 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2]
2978 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 3]
2979 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]
2980 [1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3, 2]
2981 [1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3]
2982 [1, 2, 3, 4, 5, 1, 2, 3, 4, 2]
2983 [1, 2, 3, 4, 5, 1, 2, 3, 4, 3]
2984 [1, 2, 3, 4, 5, 1, 2, 3, 4]
2985 [1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1]
2986 [1, 2, 3, 4, 5, 1, 2, 3, 1, 2]
2987 [1, 2, 3, 4, 5, 1, 2, 3, 1]
2988 [1, 2, 3, 4, 5, 1, 2, 3, 2]
2989 [1, 2, 3, 4, 5, 1, 2, 3]
2990 [1, 2, 3, 4, 5, 1, 2, 4, 1]
2991 [1, 2, 3, 4, 5, 1, 2, 4]
2992 [1, 2, 3, 4, 5, 1, 2, 1]
2993 [1, 2, 3, 4, 5, 1, 2]
2994 [1, 2, 3, 4, 5, 1, 3, 4, 3]
2995 [1, 2, 3, 4, 5, 1, 3, 4]
2996 [1, 2, 3, 4, 5, 1, 3]
2997 [1, 2, 3, 4, 5, 1, 4]
2998 [1, 2, 3, 4, 5, 1]
2999 [1, 2, 3, 4, 5, 2, 3, 4, 2, 3, 2]
3000 [1, 2, 3, 4, 5, 2, 3, 4, 2, 3]
3001 [1, 2, 3, 4, 5, 2, 3, 4, 2]
3002 [1, 2, 3, 4, 5, 2, 3, 4, 3]
3003 [1, 2, 3, 4, 5, 2, 3, 4]
3004 [1, 2, 3, 4, 5, 2, 3, 2]
3005 [1, 2, 3, 4, 5, 2, 3]
3006 [1, 2, 3, 4, 5, 2, 4]
3007 [1, 2, 3, 4, 5, 2]
3008 [1, 2, 3, 4, 5, 3, 4, 3]
3009 [1, 2, 3, 4, 5, 3, 4]
3010 [1, 2, 3, 4, 5, 3]
3011 [1, 2, 3, 4, 5, 4]
3012 [1, 2, 3, 4, 5]
3013 [1, 2, 3, 4, 6, 1, 2, 3, 1, 2, 1]
3014 [1, 2, 3, 4, 6, 1, 2, 3, 1, 2]
3015 [1, 2, 3, 4, 6, 1, 2, 3, 1]
3016 [1, 2, 3, 4, 6, 1, 2, 3, 2]
3017 [1, 2, 3, 4, 6, 1, 2, 3]
3018 [1, 2, 3, 4, 6, 1, 2, 1]
3019 [1, 2, 3, 4, 6, 1, 2]
3020 [1, 2, 3, 4, 6, 1, 3]
3021 [1, 2, 3, 4, 6, 1]
3022 [1, 2, 3, 4, 6, 2, 3, 2]
3023 [1, 2, 3, 4, 6, 2, 3]
3024 [1, 2, 3, 4, 6, 2]
3025 [1, 2, 3, 4, 6, 3]
3026 [1, 2, 3, 4, 6]
3027 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
3028 [1, 2, 3, 4, 1, 2, 3, 1, 2]
3029 [1, 2, 3, 4, 1, 2, 3, 1]
3030 [1, 2, 3, 4, 1, 2, 3, 2]
3031 [1, 2, 3, 4, 1, 2, 3]
3032 [1, 2, 3, 4, 1, 2, 1]
3033 [1, 2, 3, 4, 1, 2]
3034 [1, 2, 3, 4, 1, 3]
3035 [1, 2, 3, 4, 1]
3036 [1, 2, 3, 4, 2, 3, 2]
3037 [1, 2, 3, 4, 2, 3]
3038 [1, 2, 3, 4, 2]
3039 [1, 2, 3, 4, 3]
3040 [1, 2, 3, 4]
3041 [1, 2, 3, 5, 6, 1, 2, 5, 6, 1]
3042 [1, 2, 3, 5, 6, 1, 2, 5, 6]
3043 [1, 2, 3, 5, 6, 1, 2, 5, 1]
3044 [1, 2, 3, 5, 6, 1, 2, 5]
3045 [1, 2, 3, 5, 6, 1, 2, 1]
3046 [1, 2, 3, 5, 6, 1, 2]
3047 [1, 2, 3, 5, 6, 1, 5, 6]
3048 [1, 2, 3, 5, 6, 1, 5]
3049 [1, 2, 3, 5, 6, 1]
3050 [1, 2, 3, 5, 6, 2, 5, 6]
3051 [1, 2, 3, 5, 6, 2, 5]
3052 [1, 2, 3, 5, 6, 2]
3053 [1, 2, 3, 5, 6, 5, 6]
3054 [1, 2, 3, 5, 6, 5]
3055 [1, 2, 3, 5, 6]
3056 [1, 2, 3, 5, 1, 2, 1]
3057 [1, 2, 3, 5, 1, 2]
3058 [1, 2, 3, 5, 1]
3059 [1, 2, 3, 5, 2]
3060 [1, 2, 3, 5]
3061 [1, 2, 3, 6, 1, 2, 1]
3062 [1, 2, 3, 6, 1, 2]
3063 [1, 2, 3, 6, 1]
3064 [1, 2, 3, 6, 2]
3065 [1, 2, 3, 6]
3066 [1, 2, 3, 1, 2, 1]
3067 [1, 2, 3, 1, 2]
3068 [1, 2, 3, 1]
3069 [1, 2, 3, 2]
3070 [1, 2, 3]
3071 [1, 2, 4, 5, 6, 1, 4, 5, 6, 4, 5, 6]
3072 [1, 2, 4, 5, 6, 1, 4, 5, 6, 4, 5]
3073 [1, 2, 4, 5, 6, 1, 4, 5, 6, 4]
3074 [1, 2, 4, 5, 6, 1, 4, 5, 6]
3075 [1, 2, 4, 5, 6, 1, 4, 5, 4]
3076 [1, 2, 4, 5, 6, 1, 4, 5]
3077 [1, 2, 4, 5, 6, 1, 4]
3078 [1, 2, 4, 5, 6, 1, 5, 6]
3079 [1, 2, 4, 5, 6, 1, 5]
3080 [1, 2, 4, 5, 6, 1]
3081 [1, 2, 4, 5, 6, 4, 5, 6, 4, 5, 6]
3082 [1, 2, 4, 5, 6, 4, 5, 6, 4, 5]
3083 [1, 2, 4, 5, 6, 4, 5, 6, 4]
3084 [1, 2, 4, 5, 6, 4, 5, 6]
3085 [1, 2, 4, 5, 6, 4, 5, 4]
3086 [1, 2, 4, 5, 6, 4, 5]
3087 [1, 2, 4, 5, 6, 4]
3088 [1, 2, 4, 5, 6, 5, 6]
3089 [1, 2, 4, 5, 6, 5]
3090 [1, 2, 4, 5, 6]
3091 [1, 2, 4, 5, 1, 4]
3092 [1, 2, 4, 5, 1]
3093 [1, 2, 4, 5, 4]
3094 [1, 2, 4, 5]
3095 [1, 2, 4, 6, 1]
3096 [1, 2, 4, 6]
3097 [1, 2, 4, 1]
3098 [1, 2, 4]
3099 [1, 2, 5, 6, 1, 5, 6]
3100 [1, 2, 5, 6, 1, 5]
3101 [1, 2, 5, 6, 1]
3102 [1, 2, 5, 6, 5, 6]
3103 [1, 2, 5, 6, 5]
3104 [1, 2, 5, 6]
3105 [1, 2, 5, 1]
3106 [1, 2, 5]
3107 [1, 2, 6, 1]
3108 [1, 2, 6]
3109 [1, 2, 1]
3110 [1, 2]
3111 [1, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6]
3112 [1, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5]
3113 [1, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4]
3114 [1, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3]
3115 [1, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6]
3116 [1, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 3, 4]
3117 [1, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 3]
3118 [1, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5]
3119 [1, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 3]
3120 [1, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4]
3121 [1, 3, 4, 5, 6, 3, 4, 5, 6, 3]
3122 [1, 3, 4, 5, 6, 3, 4, 5, 6, 4, 5, 6]
3123 [1, 3, 4, 5, 6, 3, 4, 5, 6, 4, 5]
3124 [1, 3, 4, 5, 6, 3, 4, 5, 6, 4]
3125 [1, 3, 4, 5, 6, 3, 4, 5, 6]
3126 [1, 3, 4, 5, 6, 3, 4, 5, 3, 4, 3]
3127 [1, 3, 4, 5, 6, 3, 4, 5, 3, 4]
3128 [1, 3, 4, 5, 6, 3, 4, 5, 3]
3129 [1, 3, 4, 5, 6, 3, 4, 5, 4]
3130 [1, 3, 4, 5, 6, 3, 4, 5]
3131 [1, 3, 4, 5, 6, 3, 4, 3]
3132 [1, 3, 4, 5, 6, 3, 4]
3133 [1, 3, 4, 5, 6, 3, 5, 6]
3134 [1, 3, 4, 5, 6, 3, 5]
3135 [1, 3, 4, 5, 6, 3]
3136 [1, 3, 4, 5, 6, 4, 5, 6, 4, 5, 6]
3137 [1, 3, 4, 5, 6, 4, 5, 6, 4, 5]
3138 [1, 3, 4, 5, 6, 4, 5, 6, 4]
3139 [1, 3, 4, 5, 6, 4, 5, 6]
3140 [1, 3, 4, 5, 6, 4, 5, 4]
3141 [1, 3, 4, 5, 6, 4, 5]
3142 [1, 3, 4, 5, 6, 4]
3143 [1, 3, 4, 5, 6, 5, 6]
3144 [1, 3, 4, 5, 6, 5]
3145 [1, 3, 4, 5, 6]
3146 [1, 3, 4, 5, 3, 4, 3]
3147 [1, 3, 4, 5, 3, 4]
3148 [1, 3, 4, 5, 3]
3149 [1, 3, 4, 5, 4]
3150 [1, 3, 4, 5]
3151 [1, 3, 4, 6, 3]
3152 [1, 3, 4, 6]
3153 [1, 3, 4, 3]
3154 [1, 3, 4]
3155 [1, 3, 5, 6, 5, 6]
3156 [1, 3, 5, 6, 5]
3157 [1, 3, 5, 6]
3158 [1, 3, 5]
3159 [1, 3, 6]
3160 [1, 3]
3161 [1, 4, 5, 6, 4, 5, 6, 4, 5, 6]
3162 [1, 4, 5, 6, 4, 5, 6, 4, 5]
3163 [1, 4, 5, 6, 4, 5, 6, 4]
3164 [1, 4, 5, 6, 4, 5, 6]
3165 [1, 4, 5, 6, 4, 5, 4]
3166 [1, 4, 5, 6, 4, 5]
3167 [1, 4, 5, 6, 4]
3168 [1, 4, 5, 6, 5, 6]
3169 [1, 4, 5, 6, 5]
3170 [1, 4, 5, 6]
3171 [1, 4, 5, 4]
3172 [1, 4, 5]
3173 [1, 4, 6]
3174 [1, 4]
3175 [1, 5, 6, 5, 6]
3176 [1, 5, 6, 5]
3177 [1, 5, 6]
3178 [1, 5]
3179 [1, 6]
3180 [1]
3181 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6]
3182 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5]
3183 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4]
3184 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3]
3185 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2]
3186 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6]
3187 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4]
3188 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3]
3189 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2]
3190 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5]
3191 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3]
3192 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 2]
3193 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4]
3194 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 2]
3195 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3]
3196 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2]
3197 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5, 6]
3198 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5]
3199 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4]
3200 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3]
3201 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6]
3202 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2, 3]
3203 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2]
3204 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4]
3205 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 2]
3206 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3]
3207 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2]
3208 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 3, 4]
3209 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 3]
3210 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5]
3211 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3, 2]
3212 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3]
3213 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 2]
3214 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 3]
3215 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4]
3216 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 2]
3217 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3]
3218 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 4, 5, 6]
3219 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 4, 5]
3220 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 4]
3221 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2]
3222 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6]
3223 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5]
3224 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4]
3225 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3]
3226 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5, 6]
3227 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5, 3, 4]
3228 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5, 3]
3229 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5]
3230 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 3]
3231 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4]
3232 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3]
3233 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 4, 5, 6]
3234 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 4, 5]
3235 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 4]
3236 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6]
3237 [2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2, 3, 2]
3238 [2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2, 3]
3239 [2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2]
3240 [2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 3]
3241 [2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4]
3242 [2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 2]
3243 [2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3]
3244 [2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 4]
3245 [2, 3, 4, 5, 6, 2, 3, 4, 5, 2]
3246 [2, 3, 4, 5, 6, 2, 3, 4, 5, 3, 4, 3]
3247 [2, 3, 4, 5, 6, 2, 3, 4, 5, 3, 4]
3248 [2, 3, 4, 5, 6, 2, 3, 4, 5, 3]
3249 [2, 3, 4, 5, 6, 2, 3, 4, 5, 4]
3250 [2, 3, 4, 5, 6, 2, 3, 4, 5]
3251 [2, 3, 4, 5, 6, 2, 3, 4, 2, 3, 2]
3252 [2, 3, 4, 5, 6, 2, 3, 4, 2, 3]
3253 [2, 3, 4, 5, 6, 2, 3, 4, 2]
3254 [2, 3, 4, 5, 6, 2, 3, 4, 3]
3255 [2, 3, 4, 5, 6, 2, 3, 4]
3256 [2, 3, 4, 5, 6, 2, 3, 5, 6, 2]
3257 [2, 3, 4, 5, 6, 2, 3, 5, 6]
3258 [2, 3, 4, 5, 6, 2, 3, 5, 2]
3259 [2, 3, 4, 5, 6, 2, 3, 5]
3260 [2, 3, 4, 5, 6, 2, 3, 2]
3261 [2, 3, 4, 5, 6, 2, 3]
3262 [2, 3, 4, 5, 6, 2, 4, 5, 6, 4, 5, 6]
3263 [2, 3, 4, 5, 6, 2, 4, 5, 6, 4, 5]
3264 [2, 3, 4, 5, 6, 2, 4, 5, 6, 4]
3265 [2, 3, 4, 5, 6, 2, 4, 5, 6]
3266 [2, 3, 4, 5, 6, 2, 4, 5, 4]
3267 [2, 3, 4, 5, 6, 2, 4, 5]
3268 [2, 3, 4, 5, 6, 2, 4]
3269 [2, 3, 4, 5, 6, 2, 5, 6]
3270 [2, 3, 4, 5, 6, 2, 5]
3271 [2, 3, 4, 5, 6, 2]
3272 [2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6]
3273 [2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5]
3274 [2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4]
3275 [2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3]
3276 [2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6]
3277 [2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 3, 4]
3278 [2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 3]
3279 [2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5]
3280 [2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 3]
3281 [2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4]
3282 [2, 3, 4, 5, 6, 3, 4, 5, 6, 3]
3283 [2, 3, 4, 5, 6, 3, 4, 5, 6, 4, 5, 6]
3284 [2, 3, 4, 5, 6, 3, 4, 5, 6, 4, 5]
3285 [2, 3, 4, 5, 6, 3, 4, 5, 6, 4]
3286 [2, 3, 4, 5, 6, 3, 4, 5, 6]
3287 [2, 3, 4, 5, 6, 3, 4, 5, 3, 4, 3]
3288 [2, 3, 4, 5, 6, 3, 4, 5, 3, 4]
3289 [2, 3, 4, 5, 6, 3, 4, 5, 3]
3290 [2, 3, 4, 5, 6, 3, 4, 5, 4]
3291 [2, 3, 4, 5, 6, 3, 4, 5]
3292 [2, 3, 4, 5, 6, 3, 4, 3]
3293 [2, 3, 4, 5, 6, 3, 4]
3294 [2, 3, 4, 5, 6, 3, 5, 6]
3295 [2, 3, 4, 5, 6, 3, 5]
3296 [2, 3, 4, 5, 6, 3]
3297 [2, 3, 4, 5, 6, 4, 5, 6, 4, 5, 6]
3298 [2, 3, 4, 5, 6, 4, 5, 6, 4, 5]
3299 [2, 3, 4, 5, 6, 4, 5, 6, 4]
3300 [2, 3, 4, 5, 6, 4, 5, 6]
3301 [2, 3, 4, 5, 6, 4, 5, 4]
3302 [2, 3, 4, 5, 6, 4, 5]
3303 [2, 3, 4, 5, 6, 4]
3304 [2, 3, 4, 5, 6, 5, 6]
3305 [2, 3, 4, 5, 6, 5]
3306 [2, 3, 4, 5, 6]
3307 [2, 3, 4, 5, 2, 3, 4, 2, 3, 2]
3308 [2, 3, 4, 5, 2, 3, 4, 2, 3]
3309 [2, 3, 4, 5, 2, 3, 4, 2]
3310 [2, 3, 4, 5, 2, 3, 4, 3]
3311 [2, 3, 4, 5, 2, 3, 4]
3312 [2, 3, 4, 5, 2, 3, 2]
3313 [2, 3, 4, 5, 2, 3]
3314 [2, 3, 4, 5, 2, 4]
3315 [2, 3, 4, 5, 2]
3316 [2, 3, 4, 5, 3, 4, 3]
3317 [2, 3, 4, 5, 3, 4]
3318 [2, 3, 4, 5, 3]
3319 [2, 3, 4, 5, 4]
3320 [2, 3, 4, 5]
3321 [2, 3, 4, 6, 2, 3, 2]
3322 [2, 3, 4, 6, 2, 3]
3323 [2, 3, 4, 6, 2]
3324 [2, 3, 4, 6, 3]
3325 [2, 3, 4, 6]
3326 [2, 3, 4, 2, 3, 2]
3327 [2, 3, 4, 2, 3]
3328 [2, 3, 4, 2]
3329 [2, 3, 4, 3]
3330 [2, 3, 4]
3331 [2, 3, 5, 6, 2, 5, 6]
3332 [2, 3, 5, 6, 2, 5]
3333 [2, 3, 5, 6, 2]
3334 [2, 3, 5, 6, 5, 6]
3335 [2, 3, 5, 6, 5]
3336 [2, 3, 5, 6]
3337 [2, 3, 5, 2]
3338 [2, 3, 5]
3339 [2, 3, 6, 2]
3340 [2, 3, 6]
3341 [2, 3, 2]
3342 [2, 3]
3343 [2, 4, 5, 6, 4, 5, 6, 4, 5, 6]
3344 [2, 4, 5, 6, 4, 5, 6, 4, 5]
3345 [2, 4, 5, 6, 4, 5, 6, 4]
3346 [2, 4, 5, 6, 4, 5, 6]
3347 [2, 4, 5, 6, 4, 5, 4]
3348 [2, 4, 5, 6, 4, 5]
3349 [2, 4, 5, 6, 4]
3350 [2, 4, 5, 6, 5, 6]
3351 [2, 4, 5, 6, 5]
3352 [2, 4, 5, 6]
3353 [2, 4, 5, 4]
3354 [2, 4, 5]
3355 [2, 4, 6]
3356 [2, 4]
3357 [2, 5, 6, 5, 6]
3358 [2, 5, 6, 5]
3359 [2, 5, 6]
3360 [2, 5]
3361 [2, 6]
3362 [2]
3363 [3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6]
3364 [3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5]
3365 [3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4]
3366 [3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3]
3367 [3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6]
3368 [3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 3, 4]
3369 [3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 3]
3370 [3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5]
3371 [3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 3]
3372 [3, 4, 5, 6, 3, 4, 5, 6, 3, 4]
3373 [3, 4, 5, 6, 3, 4, 5, 6, 3]
3374 [3, 4, 5, 6, 3, 4, 5, 6, 4, 5, 6]
3375 [3, 4, 5, 6, 3, 4, 5, 6, 4, 5]
3376 [3, 4, 5, 6, 3, 4, 5, 6, 4]
3377 [3, 4, 5, 6, 3, 4, 5, 6]
3378 [3, 4, 5, 6, 3, 4, 5, 3, 4, 3]
3379 [3, 4, 5, 6, 3, 4, 5, 3, 4]
3380 [3, 4, 5, 6, 3, 4, 5, 3]
3381 [3, 4, 5, 6, 3, 4, 5, 4]
3382 [3, 4, 5, 6, 3, 4, 5]
3383 [3, 4, 5, 6, 3, 4, 3]
3384 [3, 4, 5, 6, 3, 4]
3385 [3, 4, 5, 6, 3, 5, 6]
3386 [3, 4, 5, 6, 3, 5]
3387 [3, 4, 5, 6, 3]
3388 [3, 4, 5, 6, 4, 5, 6, 4, 5, 6]
3389 [3, 4, 5, 6, 4, 5, 6, 4, 5]
3390 [3, 4, 5, 6, 4, 5, 6, 4]
3391 [3, 4, 5, 6, 4, 5, 6]
3392 [3, 4, 5, 6, 4, 5, 4]
3393 [3, 4, 5, 6, 4, 5]
3394 [3, 4, 5, 6, 4]
3395 [3, 4, 5, 6, 5, 6]
3396 [3, 4, 5, 6, 5]
3397 [3, 4, 5, 6]
3398 [3, 4, 5, 3, 4, 3]
3399 [3, 4, 5, 3, 4]
3400 [3, 4, 5, 3]
3401 [3, 4, 5, 4]
3402 [3, 4, 5]
3403 [3, 4, 6, 3]
3404 [3, 4, 6]
3405 [3, 4, 3]
3406 [3, 4]
3407 [3, 5, 6, 5, 6]
3408 [3, 5, 6, 5]
3409 [3, 5, 6]
3410 [3, 5]
3411 [3, 6]
3412 [3]
3413 [4, 5, 6, 4, 5, 6, 4, 5, 6]
3414 [4, 5, 6, 4, 5, 6, 4, 5]
3415 [4, 5, 6, 4, 5, 6, 4]
3416 [4, 5, 6, 4, 5, 6]
3417 [4, 5, 6, 4, 5, 4]
3418 [4, 5, 6, 4, 5]
3419 [4, 5, 6, 4]
3420 [4, 5, 6, 5, 6]
3421 [4, 5, 6, 5]
3422 [4, 5, 6]
3423 [4, 5, 4]
3424 [4, 5]
3425 [4, 6]
3426 [4]
3427 [5, 6, 5, 6]
3428 [5, 6, 5]
3429 [5, 6]
3430 [5]
3431 [6]
3432 []
sage: A=CartanMatrix(['D',6])
....: c=[0,1,2,3,4,5]
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+1) for
....: i in range(5)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5]
FAILURE! 4
sage: A=CartanMatrix(['D',6])
....: c=[0,1,2,3,4,5]
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+1) for
....: i in range(6)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5]
2 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4]
3 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 5]
4 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3]
5 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2]
6 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1]
7 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0]
8 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5]
9 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3]
10 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2]
11 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1]
12 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0]
13 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4]
14 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 5, 0, 1, 2, 3]
15 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 5, 0, 1, 2]
16 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 5, 0, 1]
17 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 5, 0]
18 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 5]
19 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2]
20 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1]
21 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0]
22 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3]
23 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 0, 1]
24 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 0]
25 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2]
26 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 0]
27 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1]
28 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0]
29 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]
30 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4]
31 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 5]
32 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3]
33 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2]
34 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1]
35 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5]
36 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
37 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
38 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
39 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3]
40 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
41 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 0]
42 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2]
43 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 0]
44 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1]
45 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0]
46 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3]
47 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2]
48 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1]
49 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4]
50 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 5, 0, 1, 2, 3, 0, 1, 2]
51 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 5, 0, 1, 2, 3, 0, 1]
52 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 5, 0, 1, 2, 3, 0]
53 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 5, 0, 1, 2, 3]
54 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 5, 0, 1, 2, 0, 1]
55 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 5, 0, 1, 2, 0]
56 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 5, 0, 1, 2]
57 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 5, 0, 1, 0]
58 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 5, 0, 1]
59 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 5, 0]
60 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 5, 1, 2, 3]
61 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 5, 1, 2]
62 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 5, 1]
63 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 5]
64 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 0, 1]
65 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 0]
66 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2]
67 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 0]
68 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1]
69 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0]
70 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 1, 2]
71 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 1]
72 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3]
73 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 0, 1, 0]
74 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 0, 1]
75 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 0]
76 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 1]
77 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2]
78 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 0]
79 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1]
80 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5]
81 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 2, 3, 4]
82 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 2, 3, 5]
83 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 2, 3]
84 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 2]
85 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0]
86 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]
87 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4]
88 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 5]
89 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3]
90 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2]
91 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1]
92 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]
93 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3]
94 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2]
95 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1]
96 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4]
97 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 5, 1, 2, 3]
98 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 5, 1, 2]
99 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 5, 1]
100 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 5]
101 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2]
102 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 1]
103 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3]
104 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 1]
105 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2]
106 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1]
107 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 2, 3, 4, 5]
108 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 2, 3, 4]
109 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 2, 3, 5]
110 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 2, 3]
111 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 2]
112 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5]
113 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1]
114 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0]
115 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
116 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0]
117 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
118 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
119 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2]
120 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1]
121 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3]
122 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0]
123 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
124 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 0]
125 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 1]
126 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2]
127 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 0]
128 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1]
129 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 2, 3]
130 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 2]
131 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0]
132 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3, 1, 2]
133 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3, 1]
134 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3]
135 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 1]
136 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2]
137 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1]
138 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 2, 3]
139 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 2]
140 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4]
141 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 5, 0, 1, 2, 3, 0, 1, 2, 0, 1]
142 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 5, 0, 1, 2, 3, 0, 1, 2, 0]
143 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 5, 0, 1, 2, 3, 0, 1, 2]
144 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 5, 0, 1, 2, 3, 0, 1, 0]
145 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 5, 0, 1, 2, 3, 0, 1]
146 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 5, 0, 1, 2, 3, 0]
147 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 5, 0, 1, 2, 3, 1, 2]
148 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 5, 0, 1, 2, 3, 1]
149 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 5, 0, 1, 2, 3]
150 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 5, 0, 1, 2, 0, 1, 0]
151 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 5, 0, 1, 2, 0, 1]
152 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 5, 0, 1, 2, 0]
153 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 5, 0, 1, 2, 1]
154 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 5, 0, 1, 2]
155 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 5, 0, 1, 0]
156 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 5, 0, 1]
157 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 5, 0, 2, 3]
158 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 5, 0, 2]
159 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 5, 0]
160 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 5, 1, 2, 3, 1, 2]
161 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 5, 1, 2, 3, 1]
162 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 5, 1, 2, 3]
163 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 5, 1, 2, 1]
164 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 5, 1, 2]
165 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 5, 1]
166 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 5, 2, 3]
167 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 5, 2]
168 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 5]
169 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
170 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 0, 1]
171 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 0]
172 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 1]
173 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2]
174 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 0]
175 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1]
176 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 2]
177 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0]
178 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 1, 2, 1]
179 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 1, 2]
180 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 1]
181 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 2]
182 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3]
183 [0, 1, 2, 3, 4, 5, 0, 1, 2, 0, 1, 0]
184 [0, 1, 2, 3, 4, 5, 0, 1, 2, 0, 1]
185 [0, 1, 2, 3, 4, 5, 0, 1, 2, 0]
186 [0, 1, 2, 3, 4, 5, 0, 1, 2, 1]
187 [0, 1, 2, 3, 4, 5, 0, 1, 2]
188 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 5, 0]
189 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 5]
190 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 0]
191 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4]
192 [0, 1, 2, 3, 4, 5, 0, 1, 3, 5, 0]
193 [0, 1, 2, 3, 4, 5, 0, 1, 3, 5]
194 [0, 1, 2, 3, 4, 5, 0, 1, 3, 0]
195 [0, 1, 2, 3, 4, 5, 0, 1, 3]
196 [0, 1, 2, 3, 4, 5, 0, 1, 0]
197 [0, 1, 2, 3, 4, 5, 0, 1]
198 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 2, 3, 4, 5]
199 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 2, 3, 4]
200 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 2, 3, 5]
201 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 2, 3]
202 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 2]
203 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5]
204 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 2, 3]
205 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 2]
206 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4]
207 [0, 1, 2, 3, 4, 5, 0, 2, 3, 5, 2, 3]
208 [0, 1, 2, 3, 4, 5, 0, 2, 3, 5, 2]
209 [0, 1, 2, 3, 4, 5, 0, 2, 3, 5]
210 [0, 1, 2, 3, 4, 5, 0, 2, 3, 2]
211 [0, 1, 2, 3, 4, 5, 0, 2, 3]
212 [0, 1, 2, 3, 4, 5, 0, 2]
213 [0, 1, 2, 3, 4, 5, 0, 3, 4, 5]
214 [0, 1, 2, 3, 4, 5, 0, 3, 4]
215 [0, 1, 2, 3, 4, 5, 0, 3, 5]
216 [0, 1, 2, 3, 4, 5, 0, 3]
217 [0, 1, 2, 3, 4, 5, 0]
218 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]
219 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4]
220 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 5]
221 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3]
222 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2]
223 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1]
224 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]
225 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3]
226 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2]
227 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1]
228 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4]
229 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 5, 1, 2, 3]
230 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 5, 1, 2]
231 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 5, 1]
232 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 5]
233 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2]
234 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1]
235 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3]
236 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 1]
237 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2]
238 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1]
239 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5]
240 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4]
241 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 5]
242 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3]
243 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2]
244 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]
245 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2]
246 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1]
247 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3]
248 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1]
249 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2]
250 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1]
251 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3]
252 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2]
253 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4]
254 [0, 1, 2, 3, 4, 5, 1, 2, 3, 5, 1, 2, 3, 1, 2]
255 [0, 1, 2, 3, 4, 5, 1, 2, 3, 5, 1, 2, 3, 1]
256 [0, 1, 2, 3, 4, 5, 1, 2, 3, 5, 1, 2, 3]
257 [0, 1, 2, 3, 4, 5, 1, 2, 3, 5, 1, 2, 1]
258 [0, 1, 2, 3, 4, 5, 1, 2, 3, 5, 1, 2]
259 [0, 1, 2, 3, 4, 5, 1, 2, 3, 5, 1]
260 [0, 1, 2, 3, 4, 5, 1, 2, 3, 5, 2, 3]
261 [0, 1, 2, 3, 4, 5, 1, 2, 3, 5, 2]
262 [0, 1, 2, 3, 4, 5, 1, 2, 3, 5]
263 [0, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1]
264 [0, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2]
265 [0, 1, 2, 3, 4, 5, 1, 2, 3, 1]
266 [0, 1, 2, 3, 4, 5, 1, 2, 3, 2]
267 [0, 1, 2, 3, 4, 5, 1, 2, 3]
268 [0, 1, 2, 3, 4, 5, 1, 2, 1]
269 [0, 1, 2, 3, 4, 5, 1, 2]
270 [0, 1, 2, 3, 4, 5, 1, 3, 4, 5]
271 [0, 1, 2, 3, 4, 5, 1, 3, 4]
272 [0, 1, 2, 3, 4, 5, 1, 3, 5]
273 [0, 1, 2, 3, 4, 5, 1, 3]
274 [0, 1, 2, 3, 4, 5, 1]
275 [0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5]
276 [0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4]
277 [0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 5]
278 [0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3]
279 [0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2]
280 [0, 1, 2, 3, 4, 5, 2, 3, 4, 5]
281 [0, 1, 2, 3, 4, 5, 2, 3, 4, 2, 3]
282 [0, 1, 2, 3, 4, 5, 2, 3, 4, 2]
283 [0, 1, 2, 3, 4, 5, 2, 3, 4]
284 [0, 1, 2, 3, 4, 5, 2, 3, 5, 2, 3]
285 [0, 1, 2, 3, 4, 5, 2, 3, 5, 2]
286 [0, 1, 2, 3, 4, 5, 2, 3, 5]
287 [0, 1, 2, 3, 4, 5, 2, 3, 2]
288 [0, 1, 2, 3, 4, 5, 2, 3]
289 [0, 1, 2, 3, 4, 5, 2]
290 [0, 1, 2, 3, 4, 5, 3, 4, 5]
291 [0, 1, 2, 3, 4, 5, 3, 4]
292 [0, 1, 2, 3, 4, 5, 3, 5]
293 [0, 1, 2, 3, 4, 5, 3]
294 [0, 1, 2, 3, 4, 5]
295 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
296 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1]
297 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0]
298 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 1]
299 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2]
300 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0]
301 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1]
302 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 2]
303 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0]
304 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2, 1]
305 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2]
306 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1]
307 [0, 1, 2, 3, 4, 0, 1, 2, 3, 2]
308 [0, 1, 2, 3, 4, 0, 1, 2, 3]
309 [0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0]
310 [0, 1, 2, 3, 4, 0, 1, 2, 0, 1]
311 [0, 1, 2, 3, 4, 0, 1, 2, 0]
312 [0, 1, 2, 3, 4, 0, 1, 2, 1]
313 [0, 1, 2, 3, 4, 0, 1, 2]
314 [0, 1, 2, 3, 4, 0, 1, 3, 0]
315 [0, 1, 2, 3, 4, 0, 1, 3]
316 [0, 1, 2, 3, 4, 0, 1, 0]
317 [0, 1, 2, 3, 4, 0, 1]
318 [0, 1, 2, 3, 4, 0, 2, 3, 2]
319 [0, 1, 2, 3, 4, 0, 2, 3]
320 [0, 1, 2, 3, 4, 0, 2]
321 [0, 1, 2, 3, 4, 0, 3]
322 [0, 1, 2, 3, 4, 0]
323 [0, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
324 [0, 1, 2, 3, 4, 1, 2, 3, 1, 2]
325 [0, 1, 2, 3, 4, 1, 2, 3, 1]
326 [0, 1, 2, 3, 4, 1, 2, 3, 2]
327 [0, 1, 2, 3, 4, 1, 2, 3]
328 [0, 1, 2, 3, 4, 1, 2, 1]
329 [0, 1, 2, 3, 4, 1, 2]
330 [0, 1, 2, 3, 4, 1, 3]
331 [0, 1, 2, 3, 4, 1]
332 [0, 1, 2, 3, 4, 2, 3, 2]
333 [0, 1, 2, 3, 4, 2, 3]
334 [0, 1, 2, 3, 4, 2]
335 [0, 1, 2, 3, 4, 3]
336 [0, 1, 2, 3, 4]
337 [0, 1, 2, 3, 5, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
338 [0, 1, 2, 3, 5, 0, 1, 2, 3, 0, 1, 2, 0, 1]
339 [0, 1, 2, 3, 5, 0, 1, 2, 3, 0, 1, 2, 0]
340 [0, 1, 2, 3, 5, 0, 1, 2, 3, 0, 1, 2, 1]
341 [0, 1, 2, 3, 5, 0, 1, 2, 3, 0, 1, 2]
342 [0, 1, 2, 3, 5, 0, 1, 2, 3, 0, 1, 0]
343 [0, 1, 2, 3, 5, 0, 1, 2, 3, 0, 1]
344 [0, 1, 2, 3, 5, 0, 1, 2, 3, 0, 2]
345 [0, 1, 2, 3, 5, 0, 1, 2, 3, 0]
346 [0, 1, 2, 3, 5, 0, 1, 2, 3, 1, 2, 1]
347 [0, 1, 2, 3, 5, 0, 1, 2, 3, 1, 2]
348 [0, 1, 2, 3, 5, 0, 1, 2, 3, 1]
349 [0, 1, 2, 3, 5, 0, 1, 2, 3, 2]
350 [0, 1, 2, 3, 5, 0, 1, 2, 3]
351 [0, 1, 2, 3, 5, 0, 1, 2, 0, 1, 0]
352 [0, 1, 2, 3, 5, 0, 1, 2, 0, 1]
353 [0, 1, 2, 3, 5, 0, 1, 2, 0]
354 [0, 1, 2, 3, 5, 0, 1, 2, 1]
355 [0, 1, 2, 3, 5, 0, 1, 2]
356 [0, 1, 2, 3, 5, 0, 1, 3, 0]
357 [0, 1, 2, 3, 5, 0, 1, 3]
358 [0, 1, 2, 3, 5, 0, 1, 0]
359 [0, 1, 2, 3, 5, 0, 1]
360 [0, 1, 2, 3, 5, 0, 2, 3, 2]
361 [0, 1, 2, 3, 5, 0, 2, 3]
362 [0, 1, 2, 3, 5, 0, 2]
363 [0, 1, 2, 3, 5, 0, 3]
364 [0, 1, 2, 3, 5, 0]
365 [0, 1, 2, 3, 5, 1, 2, 3, 1, 2, 1]
366 [0, 1, 2, 3, 5, 1, 2, 3, 1, 2]
367 [0, 1, 2, 3, 5, 1, 2, 3, 1]
368 [0, 1, 2, 3, 5, 1, 2, 3, 2]
369 [0, 1, 2, 3, 5, 1, 2, 3]
370 [0, 1, 2, 3, 5, 1, 2, 1]
371 [0, 1, 2, 3, 5, 1, 2]
372 [0, 1, 2, 3, 5, 1, 3]
373 [0, 1, 2, 3, 5, 1]
374 [0, 1, 2, 3, 5, 2, 3, 2]
375 [0, 1, 2, 3, 5, 2, 3]
376 [0, 1, 2, 3, 5, 2]
377 [0, 1, 2, 3, 5, 3]
378 [0, 1, 2, 3, 5]
379 [0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
380 [0, 1, 2, 3, 0, 1, 2, 0, 1]
381 [0, 1, 2, 3, 0, 1, 2, 0]
382 [0, 1, 2, 3, 0, 1, 2, 1]
383 [0, 1, 2, 3, 0, 1, 2]
384 [0, 1, 2, 3, 0, 1, 0]
385 [0, 1, 2, 3, 0, 1]
386 [0, 1, 2, 3, 0, 2]
387 [0, 1, 2, 3, 0]
388 [0, 1, 2, 3, 1, 2, 1]
389 [0, 1, 2, 3, 1, 2]
390 [0, 1, 2, 3, 1]
391 [0, 1, 2, 3, 2]
392 [0, 1, 2, 3]
393 [0, 1, 2, 4, 5, 0, 1, 0]
394 [0, 1, 2, 4, 5, 0, 1]
395 [0, 1, 2, 4, 5, 0]
396 [0, 1, 2, 4, 5, 1]
397 [0, 1, 2, 4, 5]
398 [0, 1, 2, 4, 0, 1, 0]
399 [0, 1, 2, 4, 0, 1]
400 [0, 1, 2, 4, 0]
401 [0, 1, 2, 4, 1]
402 [0, 1, 2, 4]
403 [0, 1, 2, 5, 0, 1, 0]
404 [0, 1, 2, 5, 0, 1]
405 [0, 1, 2, 5, 0]
406 [0, 1, 2, 5, 1]
407 [0, 1, 2, 5]
408 [0, 1, 2, 0, 1, 0]
409 [0, 1, 2, 0, 1]
410 [0, 1, 2, 0]
411 [0, 1, 2, 1]
412 [0, 1, 2]
413 [0, 1, 3, 4, 5, 0, 3, 4, 5]
414 [0, 1, 3, 4, 5, 0, 3, 4]
415 [0, 1, 3, 4, 5, 0, 3, 5]
416 [0, 1, 3, 4, 5, 0, 3]
417 [0, 1, 3, 4, 5, 0]
418 [0, 1, 3, 4, 5, 3, 4, 5]
419 [0, 1, 3, 4, 5, 3, 4]
420 [0, 1, 3, 4, 5, 3, 5]
421 [0, 1, 3, 4, 5, 3]
422 [0, 1, 3, 4, 5]
423 [0, 1, 3, 4, 0, 3]
424 [0, 1, 3, 4, 0]
425 [0, 1, 3, 4, 3]
426 [0, 1, 3, 4]
427 [0, 1, 3, 5, 0, 3]
428 [0, 1, 3, 5, 0]
429 [0, 1, 3, 5, 3]
430 [0, 1, 3, 5]
431 [0, 1, 3, 0]
432 [0, 1, 3]
433 [0, 1, 4, 5, 0]
434 [0, 1, 4, 5]
435 [0, 1, 4, 0]
436 [0, 1, 4]
437 [0, 1, 5, 0]
438 [0, 1, 5]
439 [0, 1, 0]
440 [0, 1]
441 [0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5]
442 [0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4]
443 [0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 5]
444 [0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3]
445 [0, 2, 3, 4, 5, 2, 3, 4, 5, 2]
446 [0, 2, 3, 4, 5, 2, 3, 4, 5]
447 [0, 2, 3, 4, 5, 2, 3, 4, 2, 3]
448 [0, 2, 3, 4, 5, 2, 3, 4, 2]
449 [0, 2, 3, 4, 5, 2, 3, 4]
450 [0, 2, 3, 4, 5, 2, 3, 5, 2, 3]
451 [0, 2, 3, 4, 5, 2, 3, 5, 2]
452 [0, 2, 3, 4, 5, 2, 3, 5]
453 [0, 2, 3, 4, 5, 2, 3, 2]
454 [0, 2, 3, 4, 5, 2, 3]
455 [0, 2, 3, 4, 5, 2]
456 [0, 2, 3, 4, 5, 3, 4, 5]
457 [0, 2, 3, 4, 5, 3, 4]
458 [0, 2, 3, 4, 5, 3, 5]
459 [0, 2, 3, 4, 5, 3]
460 [0, 2, 3, 4, 5]
461 [0, 2, 3, 4, 2, 3, 2]
462 [0, 2, 3, 4, 2, 3]
463 [0, 2, 3, 4, 2]
464 [0, 2, 3, 4, 3]
465 [0, 2, 3, 4]
466 [0, 2, 3, 5, 2, 3, 2]
467 [0, 2, 3, 5, 2, 3]
468 [0, 2, 3, 5, 2]
469 [0, 2, 3, 5, 3]
470 [0, 2, 3, 5]
471 [0, 2, 3, 2]
472 [0, 2, 3]
473 [0, 2, 4, 5]
474 [0, 2, 4]
475 [0, 2, 5]
476 [0, 2]
477 [0, 3, 4, 5, 3, 4, 5]
478 [0, 3, 4, 5, 3, 4]
479 [0, 3, 4, 5, 3, 5]
480 [0, 3, 4, 5, 3]
481 [0, 3, 4, 5]
482 [0, 3, 4, 3]
483 [0, 3, 4]
484 [0, 3, 5, 3]
485 [0, 3, 5]
486 [0, 3]
487 [0, 4, 5]
488 [0, 4]
489 [0, 5]
490 [0]
491 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]
492 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4]
493 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 5]
494 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3]
495 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2]
496 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1]
497 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]
498 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3]
499 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2]
500 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1]
501 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4]
502 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 5, 1, 2, 3]
503 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 5, 1, 2]
504 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 5, 1]
505 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 5]
506 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2]
507 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1]
508 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3]
509 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 1]
510 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2]
511 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1]
512 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5]
513 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4]
514 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 5]
515 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3]
516 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2]
517 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]
518 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2]
519 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1]
520 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3]
521 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1]
522 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2]
523 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1]
524 [1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3]
525 [1, 2, 3, 4, 5, 1, 2, 3, 4, 2]
526 [1, 2, 3, 4, 5, 1, 2, 3, 4]
527 [1, 2, 3, 4, 5, 1, 2, 3, 5, 1, 2, 3, 1, 2]
528 [1, 2, 3, 4, 5, 1, 2, 3, 5, 1, 2, 3, 1]
529 [1, 2, 3, 4, 5, 1, 2, 3, 5, 1, 2, 3]
530 [1, 2, 3, 4, 5, 1, 2, 3, 5, 1, 2, 1]
531 [1, 2, 3, 4, 5, 1, 2, 3, 5, 1, 2]
532 [1, 2, 3, 4, 5, 1, 2, 3, 5, 1]
533 [1, 2, 3, 4, 5, 1, 2, 3, 5, 2, 3]
534 [1, 2, 3, 4, 5, 1, 2, 3, 5, 2]
535 [1, 2, 3, 4, 5, 1, 2, 3, 5]
536 [1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1]
537 [1, 2, 3, 4, 5, 1, 2, 3, 1, 2]
538 [1, 2, 3, 4, 5, 1, 2, 3, 1]
539 [1, 2, 3, 4, 5, 1, 2, 3, 2]
540 [1, 2, 3, 4, 5, 1, 2, 3]
541 [1, 2, 3, 4, 5, 1, 2, 1]
542 [1, 2, 3, 4, 5, 1, 2]
543 [1, 2, 3, 4, 5, 1, 3, 4, 5]
544 [1, 2, 3, 4, 5, 1, 3, 4]
545 [1, 2, 3, 4, 5, 1, 3, 5]
546 [1, 2, 3, 4, 5, 1, 3]
547 [1, 2, 3, 4, 5, 1]
548 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5]
549 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4]
550 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 5]
551 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3]
552 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2]
553 [1, 2, 3, 4, 5, 2, 3, 4, 5]
554 [1, 2, 3, 4, 5, 2, 3, 4, 2, 3]
555 [1, 2, 3, 4, 5, 2, 3, 4, 2]
556 [1, 2, 3, 4, 5, 2, 3, 4]
557 [1, 2, 3, 4, 5, 2, 3, 5, 2, 3]
558 [1, 2, 3, 4, 5, 2, 3, 5, 2]
559 [1, 2, 3, 4, 5, 2, 3, 5]
560 [1, 2, 3, 4, 5, 2, 3, 2]
561 [1, 2, 3, 4, 5, 2, 3]
562 [1, 2, 3, 4, 5, 2]
563 [1, 2, 3, 4, 5, 3, 4, 5]
564 [1, 2, 3, 4, 5, 3, 4]
565 [1, 2, 3, 4, 5, 3, 5]
566 [1, 2, 3, 4, 5, 3]
567 [1, 2, 3, 4, 5]
568 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
569 [1, 2, 3, 4, 1, 2, 3, 1, 2]
570 [1, 2, 3, 4, 1, 2, 3, 1]
571 [1, 2, 3, 4, 1, 2, 3, 2]
572 [1, 2, 3, 4, 1, 2, 3]
573 [1, 2, 3, 4, 1, 2, 1]
574 [1, 2, 3, 4, 1, 2]
575 [1, 2, 3, 4, 1, 3]
576 [1, 2, 3, 4, 1]
577 [1, 2, 3, 4, 2, 3, 2]
578 [1, 2, 3, 4, 2, 3]
579 [1, 2, 3, 4, 2]
580 [1, 2, 3, 4, 3]
581 [1, 2, 3, 4]
582 [1, 2, 3, 5, 1, 2, 3, 1, 2, 1]
583 [1, 2, 3, 5, 1, 2, 3, 1, 2]
584 [1, 2, 3, 5, 1, 2, 3, 1]
585 [1, 2, 3, 5, 1, 2, 3, 2]
586 [1, 2, 3, 5, 1, 2, 3]
587 [1, 2, 3, 5, 1, 2, 1]
588 [1, 2, 3, 5, 1, 2]
589 [1, 2, 3, 5, 1, 3]
590 [1, 2, 3, 5, 1]
591 [1, 2, 3, 5, 2, 3, 2]
592 [1, 2, 3, 5, 2, 3]
593 [1, 2, 3, 5, 2]
594 [1, 2, 3, 5, 3]
595 [1, 2, 3, 5]
596 [1, 2, 3, 1, 2, 1]
597 [1, 2, 3, 1, 2]
598 [1, 2, 3, 1]
599 [1, 2, 3, 2]
600 [1, 2, 3]
601 [1, 2, 4, 5, 1]
602 [1, 2, 4, 5]
603 [1, 2, 4, 1]
604 [1, 2, 4]
605 [1, 2, 5, 1]
606 [1, 2, 5]
607 [1, 2, 1]
608 [1, 2]
609 [1, 3, 4, 5, 3, 4, 5]
610 [1, 3, 4, 5, 3, 4]
611 [1, 3, 4, 5, 3, 5]
612 [1, 3, 4, 5, 3]
613 [1, 3, 4, 5]
614 [1, 3, 4, 3]
615 [1, 3, 4]
616 [1, 3, 5, 3]
617 [1, 3, 5]
618 [1, 3]
619 [1, 4, 5]
620 [1, 4]
621 [1, 5]
622 [1]
623 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5]
624 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4]
625 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 5]
626 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3]
627 [2, 3, 4, 5, 2, 3, 4, 5, 2]
628 [2, 3, 4, 5, 2, 3, 4, 5]
629 [2, 3, 4, 5, 2, 3, 4, 2, 3]
630 [2, 3, 4, 5, 2, 3, 4, 2]
631 [2, 3, 4, 5, 2, 3, 4]
632 [2, 3, 4, 5, 2, 3, 5, 2, 3]
633 [2, 3, 4, 5, 2, 3, 5, 2]
634 [2, 3, 4, 5, 2, 3, 5]
635 [2, 3, 4, 5, 2, 3, 2]
636 [2, 3, 4, 5, 2, 3]
637 [2, 3, 4, 5, 2]
638 [2, 3, 4, 5, 3, 4, 5]
639 [2, 3, 4, 5, 3, 4]
640 [2, 3, 4, 5, 3, 5]
641 [2, 3, 4, 5, 3]
642 [2, 3, 4, 5]
643 [2, 3, 4, 2, 3, 2]
644 [2, 3, 4, 2, 3]
645 [2, 3, 4, 2]
646 [2, 3, 4, 3]
647 [2, 3, 4]
648 [2, 3, 5, 2, 3, 2]
649 [2, 3, 5, 2, 3]
650 [2, 3, 5, 2]
651 [2, 3, 5, 3]
652 [2, 3, 5]
653 [2, 3, 2]
654 [2, 3]
655 [2, 4, 5]
656 [2, 4]
657 [2, 5]
658 [2]
659 [3, 4, 5, 3, 4, 5]
660 [3, 4, 5, 3, 4]
661 [3, 4, 5, 3, 5]
662 [3, 4, 5, 3]
663 [3, 4, 5]
664 [3, 4, 3]
665 [3, 4]
666 [3, 5, 3]
667 [3, 5]
668 [3]
669 [4, 5]
670 [4]
671 [5]
672 []
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: list(c_inf_prefix(c,i*A.nrows()+1) for i in range(6))
....: 
[[0],
 [0, 1, 2, 0],
 [0, 1, 2, 0, 1, 2, 0],
 [0, 1, 2, 0, 1, 2, 0, 1, 2, 0],
 [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0],
 [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0]]
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+1) for
....: i in range(3)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [0, 1, 2, 0, 1, 2, 0, 1, 2]
FAILURE! 2
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+1) for
....: i in range(4)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [0, 1, 2, 0, 1, 2, 0, 1, 2]
2 [0, 1, 2, 0, 1, 2, 0, 1]
3 [0, 1, 2, 0, 1, 2, 0]
4 [0, 1, 2, 0, 1, 2]
5 [0, 1, 2, 0, 1, 0]
6 [0, 1, 2, 0, 1]
7 [0, 1, 2, 0]
8 [0, 1, 2, 1, 2]
9 [0, 1, 2, 1]
10 [0, 1, 2]
11 [0, 1, 0]
12 [0, 1]
13 [0, 2]
14 [0]
15 [1, 2, 1, 2]
16 [1, 2, 1]
17 [1, 2]
18 [1]
19 [2]
20 []
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: list(c_inf_prefix(c,i*A.nrows()+1) for i in range(4))
[[0], [0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0]]
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: v=[]
....: for i in range(4):
....:     p_lambda_faster(B(A,c),v,c_inf_prefix(c,i*A.nrows()+1))
....: 
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/special.py:2066, in block_matrix(*args, **kwds)
   2065 try:
-> 2066     (row_heights, col_widths) = _determine_block_matrix_grid(sub_matrices)
   2067 except ValueError as e:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/special.py:1622, in _determine_block_matrix_grid(sub_matrices)
   1621                 elif row_heights[i] != sub_height:
-> 1622                     raise ValueError("incompatible submatrix heights")
   1624 if None in row_heights or None in col_widths:

ValueError: incompatible submatrix heights

During handling of the above exception, another exception occurred:

ValueError                                Traceback (most recent call last)
Cell In [24], line 5
      3 v=[]
      4 for i in range(Integer(4)):
----> 5     p_lambda_faster(B(A,c),v,c_inf_prefix(c,i*A.nrows()+Integer(1)))

File ~/git/affine_dominance/software/domination4.py:137, in p_lambda_faster(B, la, seq)
    135 rk = B.rank()
    136 n = B.ncols()
--> 137 B = block_matrix([[B,matrix(la).transpose()]])
    138 for k in seq:
    139     B.mutate(k)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/special.py:2069, in block_matrix(*args, **kwds)
   2067     except ValueError as e:
   2068         if subdivide:
-> 2069             raise ValueError(e)
   2071 if col_widths is None:
   2072     # Try placing the matrices in rows instead
   2073     # (Only if subdivide is False)
   2074     (row_heights, zero_widths, total_width) = _determine_block_matrix_rows(sub_matrices)

ValueError: incompatible submatrix heights
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: v=[]
....: for i in range(4):
....:     p_lambda_faster(B(A,c),v,[])
....: 
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/special.py:2066, in block_matrix(*args, **kwds)
   2065 try:
-> 2066     (row_heights, col_widths) = _determine_block_matrix_grid(sub_matrices)
   2067 except ValueError as e:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/special.py:1622, in _determine_block_matrix_grid(sub_matrices)
   1621                 elif row_heights[i] != sub_height:
-> 1622                     raise ValueError("incompatible submatrix heights")
   1624 if None in row_heights or None in col_widths:

ValueError: incompatible submatrix heights

During handling of the above exception, another exception occurred:

ValueError                                Traceback (most recent call last)
Cell In [25], line 5
      3 v=[]
      4 for i in range(Integer(4)):
----> 5     p_lambda_faster(B(A,c),v,[])

File ~/git/affine_dominance/software/domination4.py:137, in p_lambda_faster(B, la, seq)
    135 rk = B.rank()
    136 n = B.ncols()
--> 137 B = block_matrix([[B,matrix(la).transpose()]])
    138 for k in seq:
    139     B.mutate(k)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/special.py:2069, in block_matrix(*args, **kwds)
   2067     except ValueError as e:
   2068         if subdivide:
-> 2069             raise ValueError(e)
   2071 if col_widths is None:
   2072     # Try placing the matrices in rows instead
   2073     # (Only if subdivide is False)
   2074     (row_heights, zero_widths, total_width) = _determine_block_matrix_rows(sub_matrices)

ValueError: incompatible submatrix heights
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: v=[]
....: for i in range(4):
....:     p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i*A.nrows()+1))
....: 
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 4 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: v=[]
....: for i in range(4):
....:     P=p_lambda_faster(B(A,c),lam(A,v),c_inf_prefix(c,i*A.nrows()+1))
....:     print(P,"\n",P.vertices(),"\n",P.rays(),"\n",P.lines(),"\n\n")
....: 
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays 
 (A vertex at (1, 1, 1),) 
 (A ray in the direction (0, 1, 0), A ray in the direction (1, 0, -1)) 
 () 


A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays 
 (A vertex at (0, -1, 2), A vertex at (1, 1, 1), A vertex at (1, 0, 1)) 
 (A ray in the direction (-1, 0, 1), A ray in the direction (-1, 1, 1)) 
 () 


A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 4 vertices and 2 rays 
 (A vertex at (0, -5, 2), A vertex at (5/2, 0, -1/2), A vertex at (1, 1, 1), A vertex at (2, 1, 0)) 
 (A ray in the direction (-2, -1, 2), A ray in the direction (-1, -1, 1)) 
 () 


A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays 
 (A vertex at (4, 0, -2), A vertex at (1, 1, 1), A vertex at (2, 2, 0)) 
 (A ray in the direction (-1, -2, 1), A ray in the direction (0, -1, 0)) 
 () 


sage: B(A,c)
[ 0  1  0]
[-1  0  2]
[ 0 -1  0]
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: list(c_inf_prefix(c,i*A.nrows()+1) for i in range(4))
[[0], [0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0]]
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+1) for
....: i in range(4)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [0, 1, 2, 0, 1, 2, 0, 1, 2]
2 [0, 1, 2, 0, 1, 2, 0, 1]
3 [0, 1, 2, 0, 1, 2, 0]
4 [0, 1, 2, 0, 1, 2]
5 [0, 1, 2, 0, 1, 0]
6 [0, 1, 2, 0, 1]
7 [0, 1, 2, 0]
8 [0, 1, 2, 1, 2]
9 [0, 1, 2, 1]
10 [0, 1, 2]
11 [0, 1, 0]
12 [0, 1]
13 [0, 2]
14 [0]
15 [1, 2, 1, 2]
16 [1, 2, 1]
17 [1, 2]
18 [1]
19 [2]
20 []
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()) for i
....: in range(4)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [0, 1, 2, 0, 1, 2, 0, 1, 2]
FAILURE! 1
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()) for i
....: in range(5)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [0, 1, 2, 0, 1, 2, 0, 1, 2]
FAILURE! 1
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()) for i
....: in range(20)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [0, 1, 2, 0, 1, 2, 0, 1, 2]
FAILURE! 1
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+1) for
....: i in range(3)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [0, 1, 2, 0, 1, 2, 0, 1, 2]
FAILURE! 2
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: n=1
....: for v in sortables(A,c):
....:     P=p_lambda_int(B(A,c),lam(A,v),list(c_inf_prefix(c,i*A.nrows()+1) for
....: i in range(4)))
....:     print(n,v)
....:     n+=1
....:     if P.dimension()>0:
....:         print("FAILURE!",P.dimension())
....:         break
....: 
1 [0, 1, 2, 0, 1, 2, 0, 1, 2]
2 [0, 1, 2, 0, 1, 2, 0, 1]
3 [0, 1, 2, 0, 1, 2, 0]
4 [0, 1, 2, 0, 1, 2]
5 [0, 1, 2, 0, 1, 0]
6 [0, 1, 2, 0, 1]
7 [0, 1, 2, 0]
8 [0, 1, 2, 1, 2]
9 [0, 1, 2, 1]
10 [0, 1, 2]
11 [0, 1, 0]
12 [0, 1]
13 [0, 2]
14 [0]
15 [1, 2, 1, 2]
16 [1, 2, 1]
17 [1, 2]
18 [1]
19 [2]
20 []
sage: -B(A,c)
[ 0 -1  0]
[ 1  0 -2]
[ 0  1  0]
sage: p_lambda_faster(B(A,c),lam(A,[]),[])
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex, 1 ray, 1 line
sage: A=CartanMatrix(['C',6])
....: c=[0,1,2,3,4,5]
....: P=p_lambda_faster(B(A,c),lam(A,[]),[])
....: MinP=p_lambda_faster(-B(A,c),lam(A,[]),[])
....: P.intersection(MinP)
....: 
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['C',6])
....: c=[1,2,3,4,5,0]
....: P=p_lambda_faster(B(A,c),lam(A,[]),[])
....: MinP=p_lambda_faster(-B(A,c),lam(A,[]),[])
....: P.intersection(MinP)
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['C',6])
....: c=[1,2,3,4,5,0]
....: P=p_lambda_faster(B(A,c),lam(A,[]),[])
....: MinP=p_lambda_faster(-B(A,c),lam(A,[]),[])
....: P.intersection(MinP)
A 0-dimensional polyhedron in QQ^6 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['C',5])
....: c=[0,1,2,3,4]
....: P=p_lambda_faster(B(A,c),lam(A,[]),[])
....: MinP=p_lambda_faster(-B(A,c),lam(A,[]),[])
....: P.intersection(MinP)
A 2-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex and 2 lines
sage: A=CartanMatrix(['C',5])
....: c=[1,2,3,4,0]
....: P=p_lambda_faster(B(A,c),lam(A,[]),[])
....: MinP=p_lambda_faster(-B(A,c),lam(A,[]),[])
....: P.intersection(MinP)
A 0-dimensional polyhedron in QQ^5 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['C',7])
....: c=[1,2,3,4,5,6,0]
....: P=p_lambda_faster(B(A,c),lam(A,[]),[])
....: MinP=p_lambda_faster(-B(A,c),lam(A,[]),[])
....: P.intersection(MinP)
A 0-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['C',7])
....: c=[0,1,2,3,4,5,6]
....: P=p_lambda_faster(B(A,c),lam(A,[]),[])
....: MinP=p_lambda_faster(-B(A,c),lam(A,[]),[])
....: P.intersection(MinP)
A 3-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex and 3 lines
sage: A=CartanMatrix(['C',7])
....: c=[1,2,3,4,5,6,0]
....: P=p_lambda_faster(B(A,c),lam(A,[]),[])
....: MinP=p_lambda_faster(-B(A,c),lam(A,[]),[])
....: P.intersection(MinP)
A 0-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['C',7])
....: c=[2,3,4,5,6,0,1]
....: P=p_lambda_faster(B(A,c),lam(A,[]),[])
....: MinP=p_lambda_faster(-B(A,c),lam(A,[]),[])
....: P.intersection(MinP)
A 0-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['C',7])
....: c=[3,4,5,6,0,1,2]
....: P=p_lambda_faster(B(A,c),lam(A,[]),[])
....: MinP=p_lambda_faster(-B(A,c),lam(A,[]),[])
....: P.intersection(MinP)
A 0-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['C',7])
....: c=[4,5,6,0,1,2,3]
....: P=p_lambda_faster(B(A,c),lam(A,[]),[])
....: MinP=p_lambda_faster(-B(A,c),lam(A,[]),[])
....: P.intersection(MinP)
A 0-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['C',7])
....: c=[5,6,0,1,2,3,4]
....: P=p_lambda_faster(B(A,c),lam(A,[]),[])
....: MinP=p_lambda_faster(-B(A,c),lam(A,[]),[])
....: P.intersection(MinP)
A 0-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['C',7])
....: c=[6,0,1,2,3,4,5]
....: P=p_lambda_faster(B(A,c),lam(A,[]),[])
....: MinP=p_lambda_faster(-B(A,c),lam(A,[]),[])
....: P.intersection(MinP)
A 0-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['C',7])
....: c=[0,1,2,3,4,5,6]
....: P=p_lambda_faster(B(A,c),lam(A,[]),[])
....: MinP=p_lambda_faster(-B(A,c),lam(A,[]),[])
....: P.intersection(MinP)
A 3-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex and 3 lines
sage: A=CartanMatrix(['C',7])
....: c=[0,1,2,3,4,5,6]
....: P=p_lambda_faster(B(A,c),lam(A,[]),[])
....: P.intersection(-P)
The empty polyhedron in QQ^7
sage: A=CartanMatrix(['C',7])
....: c=[0,1,2,3,4,5,6]
....: P=p_lambda_faster(B(A,c),lam(A,[]),[])
....: MinP=p_lambda_faster(-B(A,c),lam(A,[]),[])
....: P.intersection(MinP)
A 3-dimensional polyhedron in QQ^7 defined as the convex hull of 1 vertex and 3 lines
sage: A
[ 2 -1  0  0  0  0  0]
[-1  2 -1  0  0  0  0]
[ 0 -1  2 -1  0  0  0]
[ 0  0 -1  2 -1  0  0]
[ 0  0  0 -1  2 -1  0]
[ 0  0  0  0 -1  2 -2]
[ 0  0  0  0  0 -1  2]
sage: A=CartanMatrix(['A',2])
sage: c=[0,1]
### reloading attached file domination4.py modified at 19:26:04 ###
Traceback (most recent call last):

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/IPython/core/interactiveshell.py:3433 in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)

  Cell In [57], line 1
    sage.repl.load.load(sage.repl.load.base64.b64decode("L1VzZXJzL3JlYWRpbmcvZ2l0L2FmZmluZV9kb21pbmFuY2Uvc29mdHdhcmUvZG9taW5hdGlvbjQucHk="),globals(),True)

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/repl/load.py:252 in load
    code = compile(f.read(), fpath, 'exec')

  File ~/git/affine_dominance/software/domination4.py:232
    def Kcox(c,Coxnum)
                      ^
SyntaxError: expected ':'

### reloading attached file domination4.py modified at 19:36:10 ###
sage: Kc(c,3)
[[], [0, 1], [0, 1, 0, 1], [0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1]]
sage: A
[ 2 -1]
[-1  2]
sage: A=CartanMatrix(['A',2])
....: c=[0,1]
....: coxnum=3
....: for v in sortables(A,c):
....:     print(v)
....:     K=Kc(c,coxnum)
....:     for i in range(len(K)):
....:         for j in range(i+1,len(K)):
....:             if p_lambda_int(B(A,c),lam(A,c),[K[i],K[j]]).dimension()==0:
....:                 print(i,j)
....: 
[0, 1, 0]
0 4
1 2
3 4
[0, 1]
0 4
1 2
3 4
[0]
0 4
1 2
3 4
[1]
0 4
1 2
3 4
[]
0 4
1 2
3 4
sage: A=CartanMatrix(['B',2])
....: c=[0,1]
....: coxnum=3
....: for v in sortables(A,c):
....:     print(v)
....:     K=Kc(c,coxnum)
....:     for i in range(len(K)):
....:         for j in range(i+1,len(K)):
....:             if p_lambda_int(B(A,c),lam(A,c),[K[i],K[j]]).dimension()==0:
....:                 print(i,j)
....: 
[0, 1, 0, 1]
1 2
2 4
[0, 1, 0]
1 2
2 4
[0, 1]
1 2
2 4
[0]
1 2
2 4
[1]
1 2
2 4
[]
1 2
2 4
sage: A=CartanMatrix(['G',2])
....: c=[0,1]
....: coxnum=3
....: for v in sortables(A,c):
....:     print(v)
....:     K=Kc(c,coxnum)
....:     for i in range(len(K)):
....:         for j in range(i+1,len(K)):
....:             if p_lambda_int(B(A,c),lam(A,c),[K[i],K[j]]).dimension()==0:
....:                 print(i,j)
....: 
[0, 1, 0, 1, 0, 1]
1 2
[0, 1, 0, 1, 0]
1 2
[0, 1, 0, 1]
1 2
[0, 1, 0]
1 2
[0, 1]
1 2
[0]
1 2
[1]
1 2
[]
1 2
sage: A=CartanMatrix(['B',2])
....: c=[0,1]
....: coxnum=4
....: for v in sortables(A,c):
....:     print(v)
....:     K=Kc(c,coxnum)
....:     for i in range(len(K)):
....:         for j in range(i+1,len(K)):
....:             if p_lambda_int(B(A,c),lam(A,c),[K[i],K[j]]).dimension()==0:
....:                 print(i,j)
....: 
[0, 1, 0, 1]
1 2
1 5
2 4
4 5
[0, 1, 0]
1 2
1 5
2 4
4 5
[0, 1]
1 2
1 5
2 4
4 5
[0]
1 2
1 5
2 4
4 5
[1]
1 2
1 5
2 4
4 5
[]
1 2
1 5
2 4
4 5
sage: A=CartanMatrix(['G',2])
....: c=[0,1]
....: coxnum=6
....: for v in sortables(A,c):
....:     print(v)
....:     K=Kc(c,coxnum)
....:     for i in range(len(K)):
....:         for j in range(i+1,len(K)):
....:             if p_lambda_int(B(A,c),lam(A,c),[K[i],K[j]]).dimension()==0:
....:                 print(i,j)
....: 
[0, 1, 0, 1, 0, 1]
1 2
1 6
2 5
5 6
[0, 1, 0, 1, 0]
1 2
1 6
2 5
5 6
[0, 1, 0, 1]
1 2
1 6
2 5
5 6
[0, 1, 0]
1 2
1 6
2 5
5 6
[0, 1]
1 2
1 6
2 5
5 6
[0]
1 2
1 6
2 5
5 6
[1]
1 2
1 6
2 5
5 6
[]
1 2
1 6
2 5
5 6
sage: A=CartanMatrix(['B',3])
....: c=[0,1,2]
....: coxnum=6
....: for v in sortables(A,c):
....:     print(v)
....:     K=Kc(c,coxnum)
....:     for i in range(len(K)):
....:         for j in range(i+1,len(K)):
....:             if p_lambda_int(B(A,c),lam(A,c),[K[i],K[j]]).dimension()==0:
....:                 print(i,j)
....: 
[0, 1, 2, 0, 1, 2, 0, 1, 2]
[0, 1, 2, 0, 1, 2, 0, 1]
[0, 1, 2, 0, 1, 2, 0]
[0, 1, 2, 0, 1, 2]
[0, 1, 2, 0, 1, 0]
[0, 1, 2, 0, 1]
[0, 1, 2, 0]
[0, 1, 2, 1, 2]
[0, 1, 2, 1]
[0, 1, 2]
[0, 1, 0]
[0, 1]
[0, 2]
[0]
[1, 2, 1, 2]
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [64], line 9
      7 for i in range(len(K)):
      8     for j in range(i+Integer(1),len(K)):
----> 9         if p_lambda_int(B(A,c),lam(A,c),[K[i],K[j]]).dimension()==Integer(0):
     10             print(i,j)

File ~/git/affine_dominance/software/domination4.py:127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_faster(B, la, seqs[0])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_faster(B, la, s))
    128     if P.dimension()==0:
    129         break

File ~/git/affine_dominance/software/domination4.py:159, in p_lambda_faster(B, la, seq)
    155         P=Ep*Pp
    156     else:
    157         #print("Pp:   ",Pp,Pp.vertices(),Pp.rays(),Pp.lines(),"\n")
    158         #print("Pm:   ",Pm,Pm.vertices(),Pm.rays(),Pm.lines(),"\n\n")
--> 159         P=(Ep*Pp).convex_hull(Em*Pm)
    160     B.mutate(k)
    161 return P

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1312, in Polyhedron_base5.convex_hull(self, other)
   1310 hull_rays = self.rays() + other.rays()
   1311 hull_lines = self.lines() + other.lines()
-> 1312 return self.parent().element_class(self.parent(), [hull_vertices, hull_rays, hull_lines], None)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:70, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
---> 70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:189, in Polyhedron_ppl.set_immutable(self)
    187 if not hasattr(self, '_Vrepresentation'):
    188     try:
--> 189         self._init_Vrepresentation_from_ppl(True)
    190     except TypeError as e:
    191         # Apparently the polyhedron is (no longer) integral.
    192         self._clear_cache()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:300, in Polyhedron_ppl._init_Vrepresentation_from_ppl(self, minimize)
    298     raise TypeError("Vrepresentation of mutable polyhedra cannot be recomputed")
    299 self._Vrepresentation = []
--> 300 gs = self._ppl_polyhedron.minimized_generators()
    301 parent = self.parent()
    302 for g in gs:

File ppl/polyhedron.pyx:340, in ppl.polyhedron.Polyhedron.minimized_generators()

KeyboardInterrupt: 
sage: A=CartanMatrix(['B',4])
....: c=[0,1,2,3]
....: coxnum=6
....: for v in sortables(A,c):
....:     print(v)
....:     K=Kc(c,coxnum)
....:     for i in range(len(K)):
....:         for j in range(i+1,len(K)):
....:             if p_lambda_int(B(A,c),lam(A,c),[K[i],K[j]]).dimension()==0:
....:                 print(i,j)
....: 
[0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]
1 2
1 7
2 6
6 7
[0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2]
1 2
1 7
2 6
6 7
[0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1]
1 2
1 7
2 6
6 7
[0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0]
1 2
1 7
2 6
6 7
[0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]
1 2
1 7
2 6
6 7
[0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 0, 1]
1 2
1 7
2 6
6 7
[0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 0]
1 2
1 7
2 6
6 7
[0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2]
1 2
1 7
2 6
6 7
[0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 0]
1 2
1 7
2 6
6 7
[0, 1, 2, 3, 0, 1, 2, 3, 0, 1]
1 2
1 7
2 6
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [65], line 9
      7 for i in range(len(K)):
      8     for j in range(i+Integer(1),len(K)):
----> 9         if p_lambda_int(B(A,c),lam(A,c),[K[i],K[j]]).dimension()==Integer(0):
     10             print(i,j)

File ~/git/affine_dominance/software/domination4.py:127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_faster(B, la, seqs[0])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_faster(B, la, s))
    128     if P.dimension()==0:
    129         break

File ~/git/affine_dominance/software/domination4.py:150, in p_lambda_faster(B, la, seq)
    147 Hm = Polyhedron(ieqs=[(0,)*(k+1)+(-1,)+(0,)*(m-k-1)])
    148 #print("Hp:   ",Hp,Hp.vertices(),Hp.rays(),Hp.lines(),"\n")
    149 #print("Hm:   ",Hm,Hm.vertices(),Hm.rays(),Hm.lines(),"\n\n")
--> 150 Pp = P.intersection(Hp)
    151 Pm = P.intersection(Hm)
    152 if Pp.dimension() < rk:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1371, in Polyhedron_base5.intersection(self, other)
   1369 parent = self.parent()
   1370 try:
-> 1371     intersection = parent.element_class(parent, None, [new_ieqs, new_eqns])
   1373     # Force calculation of the vertices.
   1374     _ = intersection.n_vertices()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:70, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
---> 70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:189, in Polyhedron_ppl.set_immutable(self)
    187 if not hasattr(self, '_Vrepresentation'):
    188     try:
--> 189         self._init_Vrepresentation_from_ppl(True)
    190     except TypeError as e:
    191         # Apparently the polyhedron is (no longer) integral.
    192         self._clear_cache()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:300, in Polyhedron_ppl._init_Vrepresentation_from_ppl(self, minimize)
    298     raise TypeError("Vrepresentation of mutable polyhedra cannot be recomputed")
    299 self._Vrepresentation = []
--> 300 gs = self._ppl_polyhedron.minimized_generators()
    301 parent = self.parent()
    302 for g in gs:

File ppl/polyhedron.pyx:340, in ppl.polyhedron.Polyhedron.minimized_generators()

KeyboardInterrupt: 
sage: K(c,coxnum)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In [66], line 1
----> 1 K(c,coxnum)

TypeError: 'list' object is not callable
sage: Kc(c,coxnum)
[[],
 [0, 1, 2, 3],
 [0, 1, 2, 3, 0, 1, 2, 3],
 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3],
 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3],
 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3],
 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3],
 [0,
  1,
  2,
  3,
  0,
  1,
  2,
  3,
  0,
  1,
  2,
  3,
  0,
  1,
  2,
  3,
  0,
  1,
  2,
  3,
  0,
  1,
  2,
  3,
  0,
  1,
  2,
  3]]
sage: 
sage: A=CartanMatrix(['B',4])
....: c=[0,1,2,3]
....: coxnum=8
....: for v in sortables(A,c):
....:     print(v)
....:     K=Kc(c,coxnum)
....:     for i in range(len(K)):
....:         for j in range(i+1,len(K)):
....:             if p_lambda_int(B(A,c),lam(A,c),[K[i],K[j]]).dimension()==0:
....:                 print(i,j)
....: 
[0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [68], line 9
      7 for i in range(len(K)):
      8     for j in range(i+Integer(1),len(K)):
----> 9         if p_lambda_int(B(A,c),lam(A,c),[K[i],K[j]]).dimension()==Integer(0):
     10             print(i,j)

File ~/git/affine_dominance/software/domination4.py:127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_faster(B, la, seqs[0])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_faster(B, la, s))
    128     if P.dimension()==0:
    129         break

File ~/git/affine_dominance/software/domination4.py:159, in p_lambda_faster(B, la, seq)
    155         P=Ep*Pp
    156     else:
    157         #print("Pp:   ",Pp,Pp.vertices(),Pp.rays(),Pp.lines(),"\n")
    158         #print("Pm:   ",Pm,Pm.vertices(),Pm.rays(),Pm.lines(),"\n\n")
--> 159         P=(Ep*Pp).convex_hull(Em*Pm)
    160     B.mutate(k)
    161 return P

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4099, in sage.structure.element.Matrix.__mul__ (build/cythonized/sage/structure/element.c:35219)()
   4097 
   4098         if BOTH_ARE_ELEMENT(cl):
-> 4099             return coercion_model.bin_op(left, right, mul)
   4100 
   4101         cdef long value

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1222, in sage.structure.coerce.CoercionModel.bin_op (build/cythonized/sage/structure/coerce.c:15809)()
   1220 if action is not None:
   1221     if (<Action>action)._is_left:
-> 1222         return (<Action>action)._act_(x, y)
   1223     else:
   1224         return (<Action>action)._act_(y, x)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_actions.pyx:157, in sage.structure.coerce_actions.ActedUponAction._act_ (build/cythonized/sage/structure/coerce_actions.c:8579)()
    155     <... 'sage.structure.coerce_actions.ActedUponAction'>
    156 """
--> 157 return (<Element>x)._acted_upon_(g, not self._is_left)
    158 
    159 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:949, in sage.structure.element.Element._acted_upon_ (build/cythonized/sage/structure/element.c:16495)()
    947     return None
    948 
--> 949 cpdef _acted_upon_(self, x, bint self_on_left) noexcept:
    950     """
    951     Use this method to implement ``self`` acted on by x.

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1450, in Polyhedron_base5._acted_upon_(self, actor, self_on_left)
   1448         raise ValueError("matrices should act on the left")
   1449     else:
-> 1450         return self.linear_transformation(actor)
   1451 else:
   1452     return self.dilation(actor)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1822, in Polyhedron_base5.linear_transformation(self, linear_transf, new_base_ring)
   1820     new_vertices = ()
   1821 if self.n_rays():
-> 1822     new_rays = ( r for r in matrix(R, self.rays())*linear_transf.transpose() )
   1823 else:
   1824     new_rays = ()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4099, in sage.structure.element.Matrix.__mul__ (build/cythonized/sage/structure/element.c:35219)()
   4097 
   4098         if BOTH_ARE_ELEMENT(cl):
-> 4099             return coercion_model.bin_op(left, right, mul)
   4100 
   4101         cdef long value

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1222, in sage.structure.coerce.CoercionModel.bin_op (build/cythonized/sage/structure/coerce.c:15809)()
   1220 if action is not None:
   1221     if (<Action>action)._is_left:
-> 1222         return (<Action>action)._act_(x, y)
   1223     else:
   1224         return (<Action>action)._act_(y, x)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/action.pyx:272, in sage.matrix.action.MatrixMatrixAction._act_ (build/cythonized/sage/matrix/action.c:7598)()
    270         A = A.dense_matrix()
    271 assert type(A) is type(B), (type(A), type(B))
--> 272 prod = A._matrix_times_matrix_(B)
    273 if A._subdivisions is not None or B._subdivisions is not None:
    274     Asubs = A.subdivisions()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/matrix_rational_dense.pyx:1146, in sage.matrix.matrix_rational_dense.Matrix_rational_dense._matrix_times_matrix_ (build/cythonized/sage/matrix/matrix_rational_dense.cpp:20513)()
   1144         TypeError: unsupported operand parent(s) for *: 'Full MatrixSpace of 2 by 3 dense matrices over Rational Field' and 'Full MatrixSpace of 4 by 5 dense matrices over Rational Field'
   1145     """
-> 1146     return self._multiply_flint(right)
   1147 
   1148 def _multiply_flint(self, Matrix_rational_dense right):

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/matrix_rational_dense.pyx:1172, in sage.matrix.matrix_rational_dense.Matrix_rational_dense._multiply_flint (build/cythonized/sage/matrix/matrix_rational_dense.cpp:20844)()
   1170 
   1171         cdef Matrix_rational_dense ans
-> 1172         ans = Matrix_rational_dense.__new__(Matrix_rational_dense, parent, None, None, None)
   1173 
   1174         sig_on()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/matrix0.pyx:118, in sage.matrix.matrix0.Matrix.__cinit__ (build/cythonized/sage/matrix/matrix0.c:8310)()
    116 self._parent = P
    117 self._base_ring = P._base
--> 118 self._nrows = P.nrows()
    119 self._ncols = P.ncols()
    120 self.hash = -1

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/matrix/matrix_space.py:2162, in MatrixSpace.nrows(self)
   2151     """
   2152     Return the number of columns of matrices in this space.
   2153 
   (...)
   2158         500000
   2159     """
   2160     return self.__ncols
-> 2162 def nrows(self):
   2163     """
   2164     Return the number of rows of matrices in this space.
   2165 
   (...)
   2170         200000
   2171     """
   2172     return self.__nrows

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: 
sage: A=CartanMatrix(['B',4])
....: c=[0,1,2,3]
....: coxnum=8
....: for v in sortables(A,c):
....:     print(v)
....:     Ps=list(p_lambda_faster(B(A,c),lam(A,c),seq) for seq in Kc(c,coxnum))
....:     for i in range(len(Ps)):
....:         for j in range(i+1,len(Ps)):
....:             if (Ps[i].intersection(Ps[j])).dimension()==0:
....:                 print(i,j)
....: 
[0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]
1 2
1 7
2 6
6 7
[0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2]
1 2
1 7
2 6
6 7
[0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1]
1 2
1 7
2 6
6 7
[0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0]
1 2
1 7
2 6
6 7
[0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]
1 2
1 7
2 6
6 7
[0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 0, 1]
1 2
1 7
2 6
6 7
[0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 0]
1 2
1 7
2 6
6 7
[0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2]
1 2
1 7
2 6
6 7
[0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 0]
1 2
1 7
2 6
6 7
[0, 1, 2, 3, 0, 1, 2, 3, 0, 1]
1 2
1 7
2 6
6 7
[0, 1, 2, 3, 0, 1, 2, 3, 0]
1 2
1 7
2 6
6 7
[0, 1, 2, 3, 0, 1, 2, 3, 1, 2, 3]
1 2
1 7
2 6
6 7
[0, 1, 2, 3, 0, 1, 2, 3, 1, 2]
1 2
1 7
2 6
6 7
[0, 1, 2, 3, 0, 1, 2, 3, 1]
1 2
1 7
2 6
6 7
[0, 1, 2, 3, 0, 1, 2, 3]
1 2
1 7
2 6
6 7
[0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
1 2
1 7
2 6
6 7
[0, 1, 2, 3, 0, 1, 2, 0, 1]
1 2
1 7
2 6
6 7
[0, 1, 2, 3, 0, 1, 2, 0]
1 2
1 7
2 6
6 7
[0, 1, 2, 3, 0, 1, 2, 1]
1 2
1 7
2 6
6 7
[0, 1, 2, 3, 0, 1, 2]
1 2
1 7
2 6
6 7
[0, 1, 2, 3, 0, 1, 0]
1 2
1 7
2 6
6 7
[0, 1, 2, 3, 0, 1]
1 2
1 7
2 6
6 7
[0, 1, 2, 3, 0, 2, 3]
1 2
1 7
2 6
6 7
[0, 1, 2, 3, 0, 2]
1 2
1 7
2 6
6 7
[0, 1, 2, 3, 0]
1 2
1 7
2 6
6 7
[0, 1, 2, 3, 1, 2, 3, 1, 2, 3]
1 2
1 7
2 6
6 7
[0, 1, 2, 3, 1, 2, 3, 1, 2]
1 2
1 7
2 6
6 7
[0, 1, 2, 3, 1, 2, 3, 1]
1 2
1 7
2 6
6 7
[0, 1, 2, 3, 1, 2, 3]
1 2
1 7
2 6
6 7
[0, 1, 2, 3, 1, 2, 1]
1 2
1 7
2 6
6 7
[0, 1, 2, 3, 1, 2]
1 2
1 7
2 6
6 7
[0, 1, 2, 3, 1]
1 2
1 7
2 6
6 7
[0, 1, 2, 3, 2, 3]
1 2
1 7
2 6
6 7
[0, 1, 2, 3, 2]
1 2
1 7
2 6
6 7
[0, 1, 2, 3]
1 2
1 7
2 6
6 7
[0, 1, 2, 0, 1, 0]
1 2
1 7
2 6
6 7
[0, 1, 2, 0, 1]
1 2
1 7
2 6
6 7
[0, 1, 2, 0]
1 2
1 7
2 6
6 7
[0, 1, 2, 1]
1 2
1 7
2 6
6 7
[0, 1, 2]
1 2
1 7
2 6
6 7
[0, 1, 3, 0]
1 2
1 7
2 6
6 7
[0, 1, 3]
1 2
1 7
2 6
6 7
[0, 1, 0]
1 2
1 7
2 6
6 7
[0, 1]
1 2
1 7
2 6
6 7
[0, 2, 3, 2, 3]
1 2
1 7
2 6
6 7
[0, 2, 3, 2]
1 2
1 7
2 6
6 7
[0, 2, 3]
1 2
1 7
2 6
6 7
[0, 2]
1 2
1 7
2 6
6 7
[0, 3]
1 2
1 7
2 6
6 7
[0]
1 2
1 7
2 6
6 7
[1, 2, 3, 1, 2, 3, 1, 2, 3]
1 2
1 7
2 6
6 7
[1, 2, 3, 1, 2, 3, 1, 2]
1 2
1 7
2 6
6 7
[1, 2, 3, 1, 2, 3, 1]
1 2
1 7
2 6
6 7
[1, 2, 3, 1, 2, 3]
1 2
1 7
2 6
6 7
[1, 2, 3, 1, 2, 1]
1 2
1 7
2 6
6 7
[1, 2, 3, 1, 2]
1 2
1 7
2 6
6 7
[1, 2, 3, 1]
1 2
1 7
2 6
6 7
[1, 2, 3, 2, 3]
1 2
1 7
2 6
6 7
[1, 2, 3, 2]
1 2
1 7
2 6
6 7
[1, 2, 3]
1 2
1 7
2 6
6 7
[1, 2, 1]
1 2
1 7
2 6
6 7
[1, 2]
1 2
1 7
2 6
6 7
[1, 3]
1 2
1 7
2 6
6 7
[1]
1 2
1 7
2 6
6 7
[2, 3, 2, 3]
1 2
1 7
2 6
6 7
[2, 3, 2]
1 2
1 7
2 6
6 7
[2, 3]
1 2
1 7
2 6
6 7
[2]
1 2
1 7
2 6
6 7
[3]
1 2
1 7
2 6
6 7
[]
1 2
1 7
2 6
6 7
sage: A=CartanMatrix(['B',4])
....: c=[0,1,2,3]
....: coxnum=8
....: for v in sortables(A,c):
....:     print(v)
....:     Ps=list(p_lambda_faster(B(A,c),lam(A,v),seq) for seq in Kc(c,coxnum))
....:     for i in range(len(Ps)):
....:         for j in range(i+1,len(Ps)):
....:             if (Ps[i].intersection(Ps[j])).dimension()==0:
....:                 print(i,j)
....: 
[0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]
0 4
0 9
4 5
5 9
[0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2]
0 4
0 9
4 5
5 9
[0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1]
[0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0]
3 4
3 9
4 8
8 9
[0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]
3 4
3 9
4 8
8 9
[0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 0, 1]
[0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 0]
3 4
3 9
4 8
8 9
[0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2]
3 4
3 9
4 8
8 9
[0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 0]
[0, 1, 2, 3, 0, 1, 2, 3, 0, 1]
[0, 1, 2, 3, 0, 1, 2, 3, 0]
2 3
2 8
3 7
7 8
[0, 1, 2, 3, 0, 1, 2, 3, 1, 2, 3]
0 4
0 9
4 5
5 9
[0, 1, 2, 3, 0, 1, 2, 3, 1, 2]
[0, 1, 2, 3, 0, 1, 2, 3, 1]
2 3
2 8
3 7
7 8
[0, 1, 2, 3, 0, 1, 2, 3]
2 3
2 8
3 7
7 8
[0, 1, 2, 3, 0, 1, 2, 0, 1, 0]
[0, 1, 2, 3, 0, 1, 2, 0, 1]
[0, 1, 2, 3, 0, 1, 2, 0]
2 3
2 8
3 7
7 8
[0, 1, 2, 3, 0, 1, 2, 1]
2 3
2 8
3 7
7 8
[0, 1, 2, 3, 0, 1, 2]
2 3
2 8
3 7
7 8
[0, 1, 2, 3, 0, 1, 0]
[0, 1, 2, 3, 0, 1]
[0, 1, 2, 3, 0, 2, 3]
[0, 1, 2, 3, 0, 2]
1 2
1 7
2 6
6 7
[0, 1, 2, 3, 0]
1 2
1 7
2 6
6 7
[0, 1, 2, 3, 1, 2, 3, 1, 2, 3]
0 4
0 9
4 5
5 9
[0, 1, 2, 3, 1, 2, 3, 1, 2]
0 4
0 9
4 5
5 9
[0, 1, 2, 3, 1, 2, 3, 1]
3 4
3 9
4 8
8 9
[0, 1, 2, 3, 1, 2, 3]
3 4
3 9
4 8
8 9
[0, 1, 2, 3, 1, 2, 1]
[0, 1, 2, 3, 1, 2]
[0, 1, 2, 3, 1]
1 2
1 7
2 6
6 7
[0, 1, 2, 3, 2, 3]
[0, 1, 2, 3, 2]
^C---------------------------------------------------------------------------
KeyError                                  Traceback (most recent call last)
File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/misc/cachefunc.pyx:1962, in sage.misc.cachefunc.CachedMethodCaller.__call__ (build/cythonized/sage/misc/cachefunc.c:13372)()
   1961 try:
-> 1962     return cache[k]
   1963 except TypeError:  # k is not hashable

KeyError: ((Rational Field,), ())

During handling of the above exception, another exception occurred:

KeyboardInterrupt                         Traceback (most recent call last)
Cell In [70], line 6
      4 for v in sortables(A,c):
      5     print(v)
----> 6     Ps=list(p_lambda_faster(B(A,c),lam(A,v),seq) for seq in Kc(c,coxnum))
      7     for i in range(len(Ps)):
      8         for j in range(i+Integer(1),len(Ps)):

Cell In [70], line 6, in <genexpr>(.0)
      4 for v in sortables(A,c):
      5     print(v)
----> 6     Ps=list(p_lambda_faster(B(A,c),lam(A,v),seq) for seq in Kc(c,coxnum))
      7     for i in range(len(Ps)):
      8         for j in range(i+Integer(1),len(Ps)):

File ~/git/affine_dominance/software/domination4.py:159, in p_lambda_faster(B, la, seq)
    155         P=Ep*Pp
    156     else:
    157         #print("Pp:   ",Pp,Pp.vertices(),Pp.rays(),Pp.lines(),"\n")
    158         #print("Pm:   ",Pm,Pm.vertices(),Pm.rays(),Pm.lines(),"\n\n")
--> 159         P=(Ep*Pp).convex_hull(Em*Pm)
    160     B.mutate(k)
    161 return P

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4099, in sage.structure.element.Matrix.__mul__ (build/cythonized/sage/structure/element.c:35219)()
   4097 
   4098         if BOTH_ARE_ELEMENT(cl):
-> 4099             return coercion_model.bin_op(left, right, mul)
   4100 
   4101         cdef long value

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1222, in sage.structure.coerce.CoercionModel.bin_op (build/cythonized/sage/structure/coerce.c:15809)()
   1220 if action is not None:
   1221     if (<Action>action)._is_left:
-> 1222         return (<Action>action)._act_(x, y)
   1223     else:
   1224         return (<Action>action)._act_(y, x)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_actions.pyx:157, in sage.structure.coerce_actions.ActedUponAction._act_ (build/cythonized/sage/structure/coerce_actions.c:8579)()
    155     <... 'sage.structure.coerce_actions.ActedUponAction'>
    156 """
--> 157 return (<Element>x)._acted_upon_(g, not self._is_left)
    158 
    159 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:949, in sage.structure.element.Element._acted_upon_ (build/cythonized/sage/structure/element.c:16495)()
    947     return None
    948 
--> 949 cpdef _acted_upon_(self, x, bint self_on_left) noexcept:
    950     """
    951     Use this method to implement ``self`` acted on by x.

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1450, in Polyhedron_base5._acted_upon_(self, actor, self_on_left)
   1448         raise ValueError("matrices should act on the left")
   1449     else:
-> 1450         return self.linear_transformation(actor)
   1451 else:
   1452     return self.dilation(actor)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1818, in Polyhedron_base5.linear_transformation(self, linear_transf, new_base_ring)
   1814 # Multiplying a matrix with a vector is slow.
   1815 # So we multiply the entire vertex matrix etc.
   1816 # Still we create generators, as possibly the Vrepresentation will be discarded later on.
   1817 if self.n_vertices():
-> 1818     new_vertices = ( v for v in ((linear_transf*self.vertices_matrix(R)).transpose()) )
   1819 else:
   1820     new_vertices = ()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/misc/cachefunc.pyx:1967, in sage.misc.cachefunc.CachedMethodCaller.__call__ (build/cythonized/sage/misc/cachefunc.c:13508)()
   1965         return cache[k]
   1966 except KeyError:
-> 1967     w = self._instance_call(*args, **kwds)
   1968     cache[k] = w
   1969     return w

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/misc/cachefunc.pyx:1842, in sage.misc.cachefunc.CachedMethodCaller._instance_call (build/cythonized/sage/misc/cachefunc.c:12957)()
   1840         True
   1841     """
-> 1842     return self.f(self._instance, *args, **kwds)
   1843 
   1844 cdef fix_args_kwds(self, tuple args, dict kwds) noexcept:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:1098, in Polyhedron_base0.vertices_matrix(self, base_ring)
   1065     """
   1066     Return all vertices of the polyhedron.
   1067 
   (...)
   1094          A vertex at (0, 0, 1, 0), A vertex at (0, 0, 0, 1))
   1095     """
   1096     return tuple(self.vertex_generator())
-> 1098 @cached_method
   1099 def vertices_matrix(self, base_ring=None):
   1100     """
   1101     Return the coordinates of the vertices as the columns of a matrix.
   1102 
   (...)
   1148             True
   1149     """
   1150     from sage.matrix.constructor import matrix

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
### reloading attached file domination4.py modified at 19:52:22 ###
sage: A=CartanMatrix(['B',4])
....: c=[0,1,2,3]
....: coxnum=8
....: for v in sortables(A,c):
....:     if p_lambda_int(B(A,c),lam(A,v),Kc_even(c,coxnum)).dimension()==0:
....:         print(v,'yes')
....:     else:
....:         print(v,"FAILURE!")
....:         break
....: 
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In [71], line 5
      3 coxnum=Integer(8)
      4 for v in sortables(A,c):
----> 5     if p_lambda_int(B(A,c),lam(A,v),Kc_even(c,coxnum)).dimension()==Integer(0):
      6         print(v,'yes')
      7     else: 

File ~/git/affine_dominance/software/domination4.py:199, in Kc_even(c, coxnum)
    198 def Kc_even(c,coxnum):  # even powers of c
--> 199     return list(2*c*i for i in range((coxnum+3)/2))

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/rings/rational.pyx:567, in sage.rings.rational.Rational.__index__ (build/cythonized/sage/rings/rational.cpp:14616)()
    565         return int(self)
    566 
--> 567     raise TypeError(f"unable to convert rational {self} to an integer")
    568 
    569 cdef __set_value(self, x, unsigned int base) noexcept:

TypeError: unable to convert rational 11/2 to an integer
### reloading attached file domination4.py modified at 19:54:54 ###
sage: A=CartanMatrix(['B',4])
....: c=[0,1,2,3]
....: coxnum=8
....: for v in sortables(A,c):
....:     if p_lambda_int(B(A,c),lam(A,v),Kc_even(c,coxnum)).dimension()==0:
....:         print(v,'yes')
....:     else:
....:         print(v,"FAILURE!")
....:         break
....: 
[0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3] yes
[0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2] yes
[0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1] yes
[0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0] yes
[0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3] yes
[0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 0, 1] yes
[0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 0] yes
[0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2] yes
[0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 0] yes
[0, 1, 2, 3, 0, 1, 2, 3, 0, 1] yes
[0, 1, 2, 3, 0, 1, 2, 3, 0] yes
[0, 1, 2, 3, 0, 1, 2, 3, 1, 2, 3] yes
[0, 1, 2, 3, 0, 1, 2, 3, 1, 2] yes
[0, 1, 2, 3, 0, 1, 2, 3, 1] yes
[0, 1, 2, 3, 0, 1, 2, 3] yes
[0, 1, 2, 3, 0, 1, 2, 0, 1, 0] yes
[0, 1, 2, 3, 0, 1, 2, 0, 1] yes
[0, 1, 2, 3, 0, 1, 2, 0] yes
[0, 1, 2, 3, 0, 1, 2, 1] yes
[0, 1, 2, 3, 0, 1, 2] yes
[0, 1, 2, 3, 0, 1, 0] yes
[0, 1, 2, 3, 0, 1] yes
[0, 1, 2, 3, 0, 2, 3] yes
[0, 1, 2, 3, 0, 2] yes
[0, 1, 2, 3, 0] yes
[0, 1, 2, 3, 1, 2, 3, 1, 2, 3] yes
[0, 1, 2, 3, 1, 2, 3, 1, 2] yes
[0, 1, 2, 3, 1, 2, 3, 1] yes
[0, 1, 2, 3, 1, 2, 3] yes
[0, 1, 2, 3, 1, 2, 1] yes
[0, 1, 2, 3, 1, 2] yes
[0, 1, 2, 3, 1] yes
[0, 1, 2, 3, 2, 3] yes
[0, 1, 2, 3, 2] yes
[0, 1, 2, 3] yes
[0, 1, 2, 0, 1, 0] yes
[0, 1, 2, 0, 1] yes
[0, 1, 2, 0] yes
[0, 1, 2, 1] yes
[0, 1, 2] yes
[0, 1, 3, 0] yes
[0, 1, 3] yes
[0, 1, 0] yes
[0, 1] yes
[0, 2, 3, 2, 3] yes
[0, 2, 3, 2] yes
[0, 2, 3] yes
[0, 2] yes
[0, 3] yes
[0] yes
[1, 2, 3, 1, 2, 3, 1, 2, 3] yes
[1, 2, 3, 1, 2, 3, 1, 2] yes
[1, 2, 3, 1, 2, 3, 1] yes
[1, 2, 3, 1, 2, 3] yes
[1, 2, 3, 1, 2, 1] yes
[1, 2, 3, 1, 2] yes
[1, 2, 3, 1] yes
[1, 2, 3, 2, 3] yes
[1, 2, 3, 2] yes
[1, 2, 3] yes
[1, 2, 1] yes
[1, 2] yes
[1, 3] yes
[1] yes
[2, 3, 2, 3] yes
[2, 3, 2] yes
[2, 3] yes
[2] yes
[3] yes
[] yes
sage: A=CartanMatrix(['B',3])
....: c=[0,1,2]
....: coxnum=8
....: for v in sortables(A,c):
....:     if p_lambda_int(B(A,c),lam(A,v),Kc_even(c,coxnum)).dimension()==0:
....:         print(v,'yes')
....:     else:
....:         print(v,"FAILURE!")
....:         break
....: 
[0, 1, 2, 0, 1, 2, 0, 1, 2] FAILURE!
sage: A=CartanMatrix(['B',4])
....: c=[0,1,2,3]
....: coxnum=8
....: for v in sortables(A,c):
....:     if p_lambda_int(B(A,c),lam(A,v),Kc_even(c,coxnum)).dimension()==0:
....:         print(v,'yes')
....:     else:
....:         print(v,"FAILURE!")
....:         break
....: 
[0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3] yes
[0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2] yes
[0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1] yes
[0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0] yes
[0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3] yes
[0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 0, 1] yes
[0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 0] yes
[0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2] yes
[0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 0] yes
[0, 1, 2, 3, 0, 1, 2, 3, 0, 1] yes
[0, 1, 2, 3, 0, 1, 2, 3, 0] yes
[0, 1, 2, 3, 0, 1, 2, 3, 1, 2, 3] yes
[0, 1, 2, 3, 0, 1, 2, 3, 1, 2] yes
[0, 1, 2, 3, 0, 1, 2, 3, 1] yes
[0, 1, 2, 3, 0, 1, 2, 3] yes
[0, 1, 2, 3, 0, 1, 2, 0, 1, 0] yes
[0, 1, 2, 3, 0, 1, 2, 0, 1] yes
[0, 1, 2, 3, 0, 1, 2, 0] yes
[0, 1, 2, 3, 0, 1, 2, 1] yes
[0, 1, 2, 3, 0, 1, 2] yes
[0, 1, 2, 3, 0, 1, 0] yes
[0, 1, 2, 3, 0, 1] yes
[0, 1, 2, 3, 0, 2, 3] yes
[0, 1, 2, 3, 0, 2] yes
[0, 1, 2, 3, 0] yes
[0, 1, 2, 3, 1, 2, 3, 1, 2, 3] yes
[0, 1, 2, 3, 1, 2, 3, 1, 2] yes
[0, 1, 2, 3, 1, 2, 3, 1] yes
[0, 1, 2, 3, 1, 2, 3] yes
[0, 1, 2, 3, 1, 2, 1] yes
[0, 1, 2, 3, 1, 2] yes
[0, 1, 2, 3, 1] yes
[0, 1, 2, 3, 2, 3] yes
[0, 1, 2, 3, 2] yes
[0, 1, 2, 3] yes
[0, 1, 2, 0, 1, 0] yes
[0, 1, 2, 0, 1] yes
[0, 1, 2, 0] yes
[0, 1, 2, 1] yes
[0, 1, 2] yes
[0, 1, 3, 0] yes
[0, 1, 3] yes
[0, 1, 0] yes
[0, 1] yes
[0, 2, 3, 2, 3] yes
[0, 2, 3, 2] yes
[0, 2, 3] yes
[0, 2] yes
[0, 3] yes
[0] yes
[1, 2, 3, 1, 2, 3, 1, 2, 3] yes
[1, 2, 3, 1, 2, 3, 1, 2] yes
[1, 2, 3, 1, 2, 3, 1] yes
[1, 2, 3, 1, 2, 3] yes
[1, 2, 3, 1, 2, 1] yes
[1, 2, 3, 1, 2] yes
[1, 2, 3, 1] yes
[1, 2, 3, 2, 3] yes
[1, 2, 3, 2] yes
[1, 2, 3] yes
[1, 2, 1] yes
[1, 2] yes
[1, 3] yes
[1] yes
[2, 3, 2, 3] yes
[2, 3, 2] yes
[2, 3] yes
[2] yes
[3] yes
[] yes
sage: A=CartanMatrix(['B',3])
....: c=[0,2,1]
....: coxnum=8
....: for v in sortables(A,c):
....:     if p_lambda_int(B(A,c),lam(A,v),Kc_even(c,coxnum)).dimension()==0:
....:         print(v,'yes')
....:     else:
....:         print(v,"FAILURE!")
....:         break
....: 
[0, 2, 1, 0, 2, 1, 0, 2, 1] FAILURE!
sage: A=CartanMatrix(['B',6])
....: c=[0,1,2,3,4,5]
....: coxnum=8
....: for v in sortables(A,c):
....:     if p_lambda_int(B(A,c),lam(A,v),Kc_even(c,coxnum)).dimension()==0:
....:         print(v,'yes')
....:     else:
....:         print(v,"FAILURE!")
....:         break
....: 
[0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5] yes
[0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4] yes
[0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3] yes
[0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2] yes
[0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1] yes
[0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0] yes
[0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5] yes
[0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3] yes
[0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2] yes
[0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1] yes
[0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0] yes
[0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4] yes
[0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2] yes
[0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1] yes
[0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0] yes
[0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3] yes
[0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 0, 1] yes
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [76], line 5
      3 coxnum=Integer(8)
      4 for v in sortables(A,c):
----> 5     if p_lambda_int(B(A,c),lam(A,v),Kc_even(c,coxnum)).dimension()==Integer(0):
      6         print(v,'yes')
      7     else: 

File ~/git/affine_dominance/software/domination4.py:127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_faster(B, la, seqs[0])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_faster(B, la, s))
    128     if P.dimension()==0:
    129         break

File ~/git/affine_dominance/software/domination4.py:159, in p_lambda_faster(B, la, seq)
    155         P=Ep*Pp
    156     else:
    157         #print("Pp:   ",Pp,Pp.vertices(),Pp.rays(),Pp.lines(),"\n")
    158         #print("Pm:   ",Pm,Pm.vertices(),Pm.rays(),Pm.lines(),"\n\n")
--> 159         P=(Ep*Pp).convex_hull(Em*Pm)
    160     B.mutate(k)
    161 return P

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1312, in Polyhedron_base5.convex_hull(self, other)
   1310 hull_rays = self.rays() + other.rays()
   1311 hull_lines = self.lines() + other.lines()
-> 1312 return self.parent().element_class(self.parent(), [hull_vertices, hull_rays, hull_lines], None)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:174, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    171     lines = tuple(lines)
    173 if vertices or rays or lines:
--> 174     self._init_from_Vrepresentation(vertices, rays, lines, **kwds)
    175 else:
    176     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:99, in Polyhedron_ppl._init_from_Vrepresentation(self, vertices, rays, lines, minimize, verbose)
     72 def _init_from_Vrepresentation(self, vertices, rays, lines, minimize=True, verbose=False):
     73     """
     74     Construct polyhedron from V-representation data.
     75 
   (...)
     97         sage: Polyhedron_ppl._init_from_Vrepresentation(p, [], [], [])
     98     """
---> 99     gs = self._convert_generators_to_ppl(vertices, rays, lines)
    100     if gs.empty():
    101         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'empty')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:473, in Polyhedron_ppl._convert_generators_to_ppl(vertices, rays, lines)
    471     vertices = []
    472 for v in vertices:
--> 473     gs.insert(Polyhedron_ppl._convert_generator_to_ppl(v, VERTEX))
    474 if rays is None:
    475     rays = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:442, in Polyhedron_ppl._convert_generator_to_ppl(v, typ)
    440 d = LCM_list([denominator(v_i) for v_i in v])
    441 if d.is_one():
--> 442     return ob(Linear_Expression(v, 0))
    443 else:
    444     dv = [ d*v_i for v_i in v ]

File ppl/linear_algebra.pyx:653, in ppl.linear_algebra.Linear_Expression.__init__()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/representation.py:81, in PolyhedronRepresentation.__getitem__(self, i)
     69     """
     70     Return the length of the representation data.
     71 
   (...)
     77         3
     78     """
     79     return self._vector.degree()
---> 81 def __getitem__(self, i):
     82     """
     83     Supports indexing.
     84 
   (...)
     90         2
     91     """
     92     return self._vector[i]

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['B',6])
....: c=[0,1,2,3,4,5]
....: coxnum=12
....: n=0
....: for v in sortables(A,c):
....:     n+=1
....:     if p_lambda_int(B(A,c),lam(A,v),Kc_even(c,coxnum)).dimension()==0:
....:         print(n,v,'yes')
....:     else:
....:         print(v,"FAILURE!")
....:         break
....: 
1 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5] yes
2 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4] yes
3 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3] yes
4 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2] yes
5 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1] yes
6 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0] yes
7 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5] yes
8 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3] yes
9 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2] yes
10 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1] yes
11 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0] yes
12 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4] yes
13 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2] yes
14 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1] yes
15 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0] yes
16 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3] yes
17 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 0, 1] yes
18 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 0] yes
19 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2] yes
20 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 0] yes
21 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1] yes
22 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0] yes
23 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5] yes
24 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4] yes
25 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3] yes
26 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2] yes
27 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1] yes
28 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5] yes
29 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2] yes
30 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1] yes
31 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0] yes
32 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3] yes
33 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1] yes
34 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 0] yes
35 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2] yes
36 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 0] yes
37 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1] yes
38 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0] yes
39 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3] yes
40 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2] yes
41 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1] yes
42 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4] yes
43 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 0, 1] yes
44 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 0] yes
45 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2] yes
46 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 0] yes
47 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1] yes
48 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0] yes
49 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 1, 2] yes
50 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 1] yes
51 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3] yes
52 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 0, 1, 0] yes
53 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 0, 1] yes
54 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 0] yes
55 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 1] yes
56 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2] yes
57 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 0] yes
58 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1] yes
59 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5] yes
60 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 2, 3, 4] yes
61 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 2, 3] yes
62 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 2] yes
63 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0] yes
64 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5] yes
65 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4] yes
66 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3] yes
67 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2] yes
68 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1] yes
69 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5] yes
70 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] yes
71 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] yes
72 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1] yes
73 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4] yes
74 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2] yes
75 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 1] yes
76 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3] yes
77 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 1] yes
78 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2] yes
79 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1] yes
80 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 2, 3, 4, 5] yes
81 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 2, 3, 4] yes
82 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 2, 3] yes
83 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 2] yes
84 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5] yes
85 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1] yes
86 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0] yes
87 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2] yes
88 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0] yes
89 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1] yes
90 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0] yes
91 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2] yes
92 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1] yes
93 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3] yes
94 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0] yes
95 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1] yes
96 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 0] yes
97 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 1] yes
98 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2] yes
99 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 0] yes
100 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1] yes
101 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 2, 3] yes
102 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 2] yes
103 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0] yes
104 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3, 1, 2] yes
105 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3, 1] yes
106 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3] yes
107 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 1] yes
108 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2] yes
109 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1] yes
110 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 2, 3] yes
111 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 2] yes
112 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4] yes
113 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0] yes
114 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 0, 1] yes
115 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 0] yes
116 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 1] yes
117 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2] yes
118 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 0] yes
119 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1] yes
120 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 2] yes
121 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0] yes
122 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 1, 2, 1] yes
123 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 1, 2] yes
124 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 1] yes
125 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 2] yes
126 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3] yes
127 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 0, 1, 0] yes
128 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 0, 1] yes
129 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 0] yes
130 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 1] yes
131 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2] yes
132 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 5, 0] yes
133 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 5] yes
134 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 0] yes
135 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 3, 4] yes
136 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 3, 0] yes
137 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 3] yes
138 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 0] yes
139 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1] yes
140 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 2, 3, 4, 5] yes
141 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 2, 3, 4] yes
142 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 2, 3] yes
143 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 2] yes
144 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5] yes
145 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 2, 3] yes
146 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 2] yes
147 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 2, 3, 4] yes
148 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 2, 3, 2] yes
149 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 2, 3] yes
150 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 2] yes
151 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 3, 4, 5] yes
152 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 3, 4] yes
153 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 3] yes
154 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0] yes
155 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5] yes
156 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4] yes
157 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3] yes
158 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2] yes
159 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1] yes
160 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5] yes
161 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] yes
162 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] yes
163 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1] yes
164 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4] yes
165 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2] yes
166 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1] yes
167 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3] yes
168 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 1] yes
169 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2] yes
170 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1] yes
171 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5] yes
172 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4] yes
173 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3] yes
174 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2] yes
175 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5] yes
176 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2] yes
177 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1] yes
178 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] yes
179 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1] yes
180 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] yes
181 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1] yes
182 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3] yes
183 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2] yes
184 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4] yes
185 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1] yes
186 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2] yes
187 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 1] yes
188 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 2] yes
189 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3] yes
190 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 1] yes
191 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2] yes
192 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 3, 4, 5] yes
193 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 3, 4] yes
194 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 3] yes
195 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1] yes
196 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5] yes
197 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4] yes
198 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3] yes
199 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2] yes
200 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 2, 3, 4, 5] yes
201 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 2, 3, 4, 2, 3] yes
202 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 2, 3, 4, 2] yes
203 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 2, 3, 4] yes
204 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 2, 3, 2] yes
205 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 2, 3] yes
206 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 2] yes
207 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 3, 4, 5] yes
208 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 3, 4] yes
209 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 3] yes
210 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5] yes
211 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0] yes
212 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1] yes
213 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0] yes
214 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 1] yes
215 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2] yes
216 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0] yes
217 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1] yes
218 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 2] yes
219 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0] yes
220 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2, 1] yes
221 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2] yes
222 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 1] yes
223 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 2] yes
224 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3] yes
225 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0] yes
226 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 0, 1] yes
227 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 0] yes
228 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 1] yes
229 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2] yes
230 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 3, 0] yes
231 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 3] yes
232 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 0] yes
233 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1] yes
234 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 2, 3, 2] yes
235 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 2, 3] yes
236 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 2] yes
237 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 3] yes
238 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0] yes
239 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] yes
240 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3, 1, 2] yes
241 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3, 1] yes
242 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3, 2] yes
243 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3] yes
244 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 1] yes
245 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2] yes
246 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 3] yes
247 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1] yes
248 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 2, 3, 2] yes
249 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 2, 3] yes
250 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 2] yes
251 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 3] yes
252 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4] yes
253 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0] yes
254 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 0, 1] yes
255 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 0] yes
256 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 1] yes
257 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2] yes
258 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 0] yes
259 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1] yes
260 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 2] yes
261 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0] yes
262 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 1, 2, 1] yes
263 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 1, 2] yes
264 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 1] yes
265 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 2] yes
266 [0, 1, 2, 3, 4, 5, 0, 1, 2, 3] yes
267 [0, 1, 2, 3, 4, 5, 0, 1, 2, 4, 5, 0, 1, 0] yes
268 [0, 1, 2, 3, 4, 5, 0, 1, 2, 4, 5, 0, 1] yes
269 [0, 1, 2, 3, 4, 5, 0, 1, 2, 4, 5, 0] yes
270 [0, 1, 2, 3, 4, 5, 0, 1, 2, 4, 5, 1] yes
271 [0, 1, 2, 3, 4, 5, 0, 1, 2, 4, 5] yes
272 [0, 1, 2, 3, 4, 5, 0, 1, 2, 4, 0, 1, 0] yes
273 [0, 1, 2, 3, 4, 5, 0, 1, 2, 4, 0, 1] yes
274 [0, 1, 2, 3, 4, 5, 0, 1, 2, 4, 0] yes
275 [0, 1, 2, 3, 4, 5, 0, 1, 2, 4, 1] yes
276 [0, 1, 2, 3, 4, 5, 0, 1, 2, 4] yes
277 [0, 1, 2, 3, 4, 5, 0, 1, 2, 0, 1, 0] yes
278 [0, 1, 2, 3, 4, 5, 0, 1, 2, 0, 1] yes
279 [0, 1, 2, 3, 4, 5, 0, 1, 2, 0] yes
280 [0, 1, 2, 3, 4, 5, 0, 1, 2, 1] yes
281 [0, 1, 2, 3, 4, 5, 0, 1, 2] yes
282 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 5, 0, 3, 4, 5] yes
283 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 5, 0, 3, 4] yes
284 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 5, 0, 3] yes
285 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 5, 0] yes
286 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 5, 3, 4, 5] yes
287 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 5, 3, 4] yes
288 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 5, 3] yes
289 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 5] yes
290 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 0, 3] yes
291 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 0] yes
292 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4, 3] yes
293 [0, 1, 2, 3, 4, 5, 0, 1, 3, 4] yes
294 [0, 1, 2, 3, 4, 5, 0, 1, 3, 0] yes
295 [0, 1, 2, 3, 4, 5, 0, 1, 3] yes
296 [0, 1, 2, 3, 4, 5, 0, 1, 4, 5, 0] yes
297 [0, 1, 2, 3, 4, 5, 0, 1, 4, 5] yes
298 [0, 1, 2, 3, 4, 5, 0, 1, 4, 0] yes
299 [0, 1, 2, 3, 4, 5, 0, 1, 4] yes
300 [0, 1, 2, 3, 4, 5, 0, 1, 0] yes
301 [0, 1, 2, 3, 4, 5, 0, 1] yes
302 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5] yes
303 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4] yes
304 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3] yes
305 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 2, 3, 4, 5, 2] yes
306 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 2, 3, 4, 5] yes
307 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 2, 3, 4, 2, 3] yes
308 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 2, 3, 4, 2] yes
309 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 2, 3, 4] yes
310 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 2, 3, 2] yes
311 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 2, 3] yes
312 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 2] yes
313 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 3, 4, 5] yes
314 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 3, 4] yes
315 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 3] yes
316 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5] yes
317 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 2, 3, 2] yes
318 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 2, 3] yes
319 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 2] yes
320 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4, 3] yes
321 [0, 1, 2, 3, 4, 5, 0, 2, 3, 4] yes
322 [0, 1, 2, 3, 4, 5, 0, 2, 3, 2] yes
323 [0, 1, 2, 3, 4, 5, 0, 2, 3] yes
324 [0, 1, 2, 3, 4, 5, 0, 2, 4, 5] yes
325 [0, 1, 2, 3, 4, 5, 0, 2, 4] yes
326 [0, 1, 2, 3, 4, 5, 0, 2] yes
327 [0, 1, 2, 3, 4, 5, 0, 3, 4, 5, 3, 4, 5] yes
328 [0, 1, 2, 3, 4, 5, 0, 3, 4, 5, 3, 4] yes
329 [0, 1, 2, 3, 4, 5, 0, 3, 4, 5, 3] yes
330 [0, 1, 2, 3, 4, 5, 0, 3, 4, 5] yes
331 [0, 1, 2, 3, 4, 5, 0, 3, 4, 3] yes
332 [0, 1, 2, 3, 4, 5, 0, 3, 4] yes
333 [0, 1, 2, 3, 4, 5, 0, 3] yes
334 [0, 1, 2, 3, 4, 5, 0, 4, 5] yes
335 [0, 1, 2, 3, 4, 5, 0, 4] yes
336 [0, 1, 2, 3, 4, 5, 0] yes
337 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5] yes
338 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4] yes
339 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3] yes
340 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2] yes
341 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1] yes
342 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5] yes
343 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] yes
344 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] yes
345 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1] yes
346 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4] yes
347 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2] yes
348 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1] yes
349 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3] yes
350 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 1] yes
351 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2] yes
352 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1] yes
353 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5] yes
354 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4] yes
355 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3] yes
356 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2] yes
357 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5] yes
358 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2] yes
359 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1] yes
360 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] yes
361 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1] yes
362 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] yes
363 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1] yes
364 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3] yes
365 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2] yes
366 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4] yes
367 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1] yes
368 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2] yes
369 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1] yes
370 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 2] yes
371 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3] yes
372 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 1] yes
373 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2] yes
374 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 3, 4, 5] yes
375 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 3, 4] yes
376 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 3] yes
377 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1] yes
378 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5] yes
379 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4] yes
380 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3] yes
381 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2] yes
382 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5] yes
383 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 2, 3] yes
384 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 2] yes
385 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4] yes
386 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 2] yes
387 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3] yes
388 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2] yes
389 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 3, 4, 5] yes
390 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 3, 4] yes
391 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 3] yes
392 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5] yes
393 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] yes
394 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2] yes
395 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1] yes
396 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 2] yes
397 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] yes
398 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1] yes
399 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] yes
400 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 3] yes
401 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1] yes
402 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3, 2] yes
403 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3] yes
404 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2] yes
405 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 3] yes
406 [0, 1, 2, 3, 4, 5, 1, 2, 3, 4] yes
407 [0, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1] yes
408 [0, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2] yes
409 [0, 1, 2, 3, 4, 5, 1, 2, 3, 1] yes
410 [0, 1, 2, 3, 4, 5, 1, 2, 3, 2] yes
411 [0, 1, 2, 3, 4, 5, 1, 2, 3] yes
412 [0, 1, 2, 3, 4, 5, 1, 2, 4, 5, 1] yes
413 [0, 1, 2, 3, 4, 5, 1, 2, 4, 5] yes
414 [0, 1, 2, 3, 4, 5, 1, 2, 4, 1] yes
415 [0, 1, 2, 3, 4, 5, 1, 2, 4] yes
416 [0, 1, 2, 3, 4, 5, 1, 2, 1] yes
417 [0, 1, 2, 3, 4, 5, 1, 2] yes
418 [0, 1, 2, 3, 4, 5, 1, 3, 4, 5, 3, 4, 5] yes
419 [0, 1, 2, 3, 4, 5, 1, 3, 4, 5, 3, 4] yes
420 [0, 1, 2, 3, 4, 5, 1, 3, 4, 5, 3] yes
421 [0, 1, 2, 3, 4, 5, 1, 3, 4, 5] yes
422 [0, 1, 2, 3, 4, 5, 1, 3, 4, 3] yes
423 [0, 1, 2, 3, 4, 5, 1, 3, 4] yes
424 [0, 1, 2, 3, 4, 5, 1, 3] yes
425 [0, 1, 2, 3, 4, 5, 1, 4, 5] yes
426 [0, 1, 2, 3, 4, 5, 1, 4] yes
427 [0, 1, 2, 3, 4, 5, 1] yes
428 [0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5] yes
429 [0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4] yes
430 [0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3] yes
431 [0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2] yes
432 [0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5] yes
433 [0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 2, 3] yes
434 [0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 2] yes
435 [0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4] yes
436 [0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 2] yes
437 [0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3] yes
438 [0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2] yes
439 [0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 3, 4, 5] yes
440 [0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 3, 4] yes
441 [0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 3] yes
442 [0, 1, 2, 3, 4, 5, 2, 3, 4, 5] yes
443 [0, 1, 2, 3, 4, 5, 2, 3, 4, 2, 3, 2] yes
444 [0, 1, 2, 3, 4, 5, 2, 3, 4, 2, 3] yes
445 [0, 1, 2, 3, 4, 5, 2, 3, 4, 2] yes
446 [0, 1, 2, 3, 4, 5, 2, 3, 4, 3] yes
447 [0, 1, 2, 3, 4, 5, 2, 3, 4] yes
448 [0, 1, 2, 3, 4, 5, 2, 3, 2] yes
449 [0, 1, 2, 3, 4, 5, 2, 3] yes
450 [0, 1, 2, 3, 4, 5, 2, 4, 5] yes
451 [0, 1, 2, 3, 4, 5, 2, 4] yes
452 [0, 1, 2, 3, 4, 5, 2] yes
453 [0, 1, 2, 3, 4, 5, 3, 4, 5, 3, 4, 5] yes
454 [0, 1, 2, 3, 4, 5, 3, 4, 5, 3, 4] yes
455 [0, 1, 2, 3, 4, 5, 3, 4, 5, 3] yes
456 [0, 1, 2, 3, 4, 5, 3, 4, 5] yes
457 [0, 1, 2, 3, 4, 5, 3, 4, 3] yes
458 [0, 1, 2, 3, 4, 5, 3, 4] yes
459 [0, 1, 2, 3, 4, 5, 3] yes
460 [0, 1, 2, 3, 4, 5, 4, 5] yes
461 [0, 1, 2, 3, 4, 5, 4] yes
462 [0, 1, 2, 3, 4, 5] yes
463 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0] yes
464 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1] yes
465 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0] yes
466 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 1] yes
467 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2] yes
468 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0] yes
469 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1] yes
470 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 2] yes
471 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0] yes
472 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2, 1] yes
473 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2] yes
474 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1] yes
475 [0, 1, 2, 3, 4, 0, 1, 2, 3, 2] yes
476 [0, 1, 2, 3, 4, 0, 1, 2, 3] yes
477 [0, 1, 2, 3, 4, 0, 1, 2, 0, 1, 0] yes
478 [0, 1, 2, 3, 4, 0, 1, 2, 0, 1] yes
479 [0, 1, 2, 3, 4, 0, 1, 2, 0] yes
480 [0, 1, 2, 3, 4, 0, 1, 2, 1] yes
481 [0, 1, 2, 3, 4, 0, 1, 2] yes
482 [0, 1, 2, 3, 4, 0, 1, 3, 0] yes
483 [0, 1, 2, 3, 4, 0, 1, 3] yes
484 [0, 1, 2, 3, 4, 0, 1, 0] yes
485 [0, 1, 2, 3, 4, 0, 1] yes
486 [0, 1, 2, 3, 4, 0, 2, 3, 2] yes
487 [0, 1, 2, 3, 4, 0, 2, 3] yes
488 [0, 1, 2, 3, 4, 0, 2] yes
489 [0, 1, 2, 3, 4, 0, 3] yes
490 [0, 1, 2, 3, 4, 0] yes
491 [0, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] yes
492 [0, 1, 2, 3, 4, 1, 2, 3, 1, 2] yes
493 [0, 1, 2, 3, 4, 1, 2, 3, 1] yes
494 [0, 1, 2, 3, 4, 1, 2, 3, 2] yes
495 [0, 1, 2, 3, 4, 1, 2, 3] yes
496 [0, 1, 2, 3, 4, 1, 2, 1] yes
497 [0, 1, 2, 3, 4, 1, 2] yes
498 [0, 1, 2, 3, 4, 1, 3] yes
499 [0, 1, 2, 3, 4, 1] yes
500 [0, 1, 2, 3, 4, 2, 3, 2] yes
501 [0, 1, 2, 3, 4, 2, 3] yes
502 [0, 1, 2, 3, 4, 2] yes
503 [0, 1, 2, 3, 4, 3] yes
504 [0, 1, 2, 3, 4] yes
505 [0, 1, 2, 3, 5, 0, 1, 2, 0, 1, 0] yes
506 [0, 1, 2, 3, 5, 0, 1, 2, 0, 1] yes
507 [0, 1, 2, 3, 5, 0, 1, 2, 0] yes
508 [0, 1, 2, 3, 5, 0, 1, 2, 1] yes
509 [0, 1, 2, 3, 5, 0, 1, 2] yes
510 [0, 1, 2, 3, 5, 0, 1, 0] yes
511 [0, 1, 2, 3, 5, 0, 1] yes
512 [0, 1, 2, 3, 5, 0, 2] yes
513 [0, 1, 2, 3, 5, 0] yes
514 [0, 1, 2, 3, 5, 1, 2, 1] yes
515 [0, 1, 2, 3, 5, 1, 2] yes
516 [0, 1, 2, 3, 5, 1] yes
517 [0, 1, 2, 3, 5, 2] yes
518 [0, 1, 2, 3, 5] yes
519 [0, 1, 2, 3, 0, 1, 2, 0, 1, 0] yes
520 [0, 1, 2, 3, 0, 1, 2, 0, 1] yes
521 [0, 1, 2, 3, 0, 1, 2, 0] yes
522 [0, 1, 2, 3, 0, 1, 2, 1] yes
523 [0, 1, 2, 3, 0, 1, 2] yes
524 [0, 1, 2, 3, 0, 1, 0] yes
525 [0, 1, 2, 3, 0, 1] yes
526 [0, 1, 2, 3, 0, 2] yes
527 [0, 1, 2, 3, 0] yes
528 [0, 1, 2, 3, 1, 2, 1] yes
529 [0, 1, 2, 3, 1, 2] yes
530 [0, 1, 2, 3, 1] yes
531 [0, 1, 2, 3, 2] yes
532 [0, 1, 2, 3] yes
533 [0, 1, 2, 4, 5, 0, 1, 4, 5, 0] yes
534 [0, 1, 2, 4, 5, 0, 1, 4, 5] yes
535 [0, 1, 2, 4, 5, 0, 1, 4, 0] yes
536 [0, 1, 2, 4, 5, 0, 1, 4] yes
537 [0, 1, 2, 4, 5, 0, 1, 0] yes
538 [0, 1, 2, 4, 5, 0, 1] yes
539 [0, 1, 2, 4, 5, 0, 4, 5] yes
540 [0, 1, 2, 4, 5, 0, 4] yes
541 [0, 1, 2, 4, 5, 0] yes
542 [0, 1, 2, 4, 5, 1, 4, 5] yes
543 [0, 1, 2, 4, 5, 1, 4] yes
544 [0, 1, 2, 4, 5, 1] yes
545 [0, 1, 2, 4, 5, 4, 5] yes
546 [0, 1, 2, 4, 5, 4] yes
547 [0, 1, 2, 4, 5] yes
548 [0, 1, 2, 4, 0, 1, 0] yes
549 [0, 1, 2, 4, 0, 1] yes
550 [0, 1, 2, 4, 0] yes
551 [0, 1, 2, 4, 1] yes
552 [0, 1, 2, 4] yes
553 [0, 1, 2, 5, 0, 1, 0] yes
554 [0, 1, 2, 5, 0, 1] yes
555 [0, 1, 2, 5, 0] yes
556 [0, 1, 2, 5, 1] yes
557 [0, 1, 2, 5] yes
558 [0, 1, 2, 0, 1, 0] yes
559 [0, 1, 2, 0, 1] yes
560 [0, 1, 2, 0] yes
561 [0, 1, 2, 1] yes
562 [0, 1, 2] yes
563 [0, 1, 3, 4, 5, 0, 3, 4, 5, 3, 4, 5] yes
564 [0, 1, 3, 4, 5, 0, 3, 4, 5, 3, 4] yes
565 [0, 1, 3, 4, 5, 0, 3, 4, 5, 3] yes
566 [0, 1, 3, 4, 5, 0, 3, 4, 5] yes
567 [0, 1, 3, 4, 5, 0, 3, 4, 3] yes
568 [0, 1, 3, 4, 5, 0, 3, 4] yes
569 [0, 1, 3, 4, 5, 0, 3] yes
570 [0, 1, 3, 4, 5, 0, 4, 5] yes
571 [0, 1, 3, 4, 5, 0, 4] yes
572 [0, 1, 3, 4, 5, 0] yes
573 [0, 1, 3, 4, 5, 3, 4, 5, 3, 4, 5] yes
574 [0, 1, 3, 4, 5, 3, 4, 5, 3, 4] yes
575 [0, 1, 3, 4, 5, 3, 4, 5, 3] yes
576 [0, 1, 3, 4, 5, 3, 4, 5] yes
577 [0, 1, 3, 4, 5, 3, 4, 3] yes
578 [0, 1, 3, 4, 5, 3, 4] yes
579 [0, 1, 3, 4, 5, 3] yes
580 [0, 1, 3, 4, 5, 4, 5] yes
581 [0, 1, 3, 4, 5, 4] yes
582 [0, 1, 3, 4, 5] yes
583 [0, 1, 3, 4, 0, 3] yes
584 [0, 1, 3, 4, 0] yes
585 [0, 1, 3, 4, 3] yes
586 [0, 1, 3, 4] yes
587 [0, 1, 3, 5, 0] yes
588 [0, 1, 3, 5] yes
589 [0, 1, 3, 0] yes
590 [0, 1, 3] yes
591 [0, 1, 4, 5, 0, 4, 5] yes
592 [0, 1, 4, 5, 0, 4] yes
593 [0, 1, 4, 5, 0] yes
594 [0, 1, 4, 5, 4, 5] yes
595 [0, 1, 4, 5, 4] yes
596 [0, 1, 4, 5] yes
597 [0, 1, 4, 0] yes
598 [0, 1, 4] yes
599 [0, 1, 5, 0] yes
600 [0, 1, 5] yes
601 [0, 1, 0] yes
602 [0, 1] yes
603 [0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5] yes
604 [0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4] yes
605 [0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3] yes
606 [0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2] yes
607 [0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5] yes
608 [0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 2, 3] yes
609 [0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 2] yes
610 [0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4] yes
611 [0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 2] yes
612 [0, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3] yes
613 [0, 2, 3, 4, 5, 2, 3, 4, 5, 2] yes
614 [0, 2, 3, 4, 5, 2, 3, 4, 5, 3, 4, 5] yes
615 [0, 2, 3, 4, 5, 2, 3, 4, 5, 3, 4] yes
616 [0, 2, 3, 4, 5, 2, 3, 4, 5, 3] yes
617 [0, 2, 3, 4, 5, 2, 3, 4, 5] yes
618 [0, 2, 3, 4, 5, 2, 3, 4, 2, 3, 2] yes
619 [0, 2, 3, 4, 5, 2, 3, 4, 2, 3] yes
620 [0, 2, 3, 4, 5, 2, 3, 4, 2] yes
621 [0, 2, 3, 4, 5, 2, 3, 4, 3] yes
622 [0, 2, 3, 4, 5, 2, 3, 4] yes
623 [0, 2, 3, 4, 5, 2, 3, 2] yes
624 [0, 2, 3, 4, 5, 2, 3] yes
625 [0, 2, 3, 4, 5, 2, 4, 5] yes
626 [0, 2, 3, 4, 5, 2, 4] yes
627 [0, 2, 3, 4, 5, 2] yes
628 [0, 2, 3, 4, 5, 3, 4, 5, 3, 4, 5] yes
629 [0, 2, 3, 4, 5, 3, 4, 5, 3, 4] yes
630 [0, 2, 3, 4, 5, 3, 4, 5, 3] yes
631 [0, 2, 3, 4, 5, 3, 4, 5] yes
632 [0, 2, 3, 4, 5, 3, 4, 3] yes
633 [0, 2, 3, 4, 5, 3, 4] yes
634 [0, 2, 3, 4, 5, 3] yes
635 [0, 2, 3, 4, 5, 4, 5] yes
636 [0, 2, 3, 4, 5, 4] yes
637 [0, 2, 3, 4, 5] yes
638 [0, 2, 3, 4, 2, 3, 2] yes
639 [0, 2, 3, 4, 2, 3] yes
640 [0, 2, 3, 4, 2] yes
641 [0, 2, 3, 4, 3] yes
642 [0, 2, 3, 4] yes
643 [0, 2, 3, 5, 2] yes
644 [0, 2, 3, 5] yes
645 [0, 2, 3, 2] yes
646 [0, 2, 3] yes
647 [0, 2, 4, 5, 4, 5] yes
648 [0, 2, 4, 5, 4] yes
649 [0, 2, 4, 5] yes
650 [0, 2, 4] yes
651 [0, 2, 5] yes
652 [0, 2] yes
653 [0, 3, 4, 5, 3, 4, 5, 3, 4, 5] yes
654 [0, 3, 4, 5, 3, 4, 5, 3, 4] yes
655 [0, 3, 4, 5, 3, 4, 5, 3] yes
656 [0, 3, 4, 5, 3, 4, 5] yes
657 [0, 3, 4, 5, 3, 4, 3] yes
658 [0, 3, 4, 5, 3, 4] yes
659 [0, 3, 4, 5, 3] yes
660 [0, 3, 4, 5, 4, 5] yes
661 [0, 3, 4, 5, 4] yes
662 [0, 3, 4, 5] yes
663 [0, 3, 4, 3] yes
664 [0, 3, 4] yes
665 [0, 3, 5] yes
666 [0, 3] yes
667 [0, 4, 5, 4, 5] yes
668 [0, 4, 5, 4] yes
669 [0, 4, 5] yes
670 [0, 4] yes
671 [0, 5] yes
672 [0] yes
673 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5] yes
674 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4] yes
675 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3] yes
676 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2] yes
677 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1] yes
678 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5] yes
679 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] yes
680 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] yes
681 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1] yes
682 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4] yes
683 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2] yes
684 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1] yes
685 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3] yes
686 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 1] yes
687 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2] yes
688 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1] yes
689 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5] yes
690 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4] yes
691 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3] yes
692 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2] yes
693 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5] yes
694 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2] yes
695 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1] yes
696 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] yes
697 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1] yes
698 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] yes
699 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1] yes
700 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3] yes
701 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2] yes
702 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4] yes
703 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1] yes
704 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2] yes
705 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1] yes
706 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 2] yes
707 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3] yes
708 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 1] yes
709 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2] yes
710 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 3, 4, 5] yes
711 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 3, 4] yes
712 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 3] yes
713 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1] yes
714 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5] yes
715 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4] yes
716 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3] yes
717 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2] yes
718 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5] yes
719 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 2, 3] yes
720 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 2] yes
721 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4] yes
722 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 2] yes
723 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3] yes
724 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2] yes
725 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 3, 4, 5] yes
726 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 3, 4] yes
727 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 3] yes
728 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5] yes
729 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] yes
730 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2] yes
731 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1] yes
732 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 2] yes
733 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] yes
734 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1] yes
735 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] yes
736 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 3] yes
737 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1] yes
738 [1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3, 2] yes
739 [1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3] yes
740 [1, 2, 3, 4, 5, 1, 2, 3, 4, 2] yes
741 [1, 2, 3, 4, 5, 1, 2, 3, 4, 3] yes
742 [1, 2, 3, 4, 5, 1, 2, 3, 4] yes
743 [1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1] yes
744 [1, 2, 3, 4, 5, 1, 2, 3, 1, 2] yes
745 [1, 2, 3, 4, 5, 1, 2, 3, 1] yes
746 [1, 2, 3, 4, 5, 1, 2, 3, 2] yes
747 [1, 2, 3, 4, 5, 1, 2, 3] yes
748 [1, 2, 3, 4, 5, 1, 2, 4, 5, 1] yes
749 [1, 2, 3, 4, 5, 1, 2, 4, 5] yes
750 [1, 2, 3, 4, 5, 1, 2, 4, 1] yes
751 [1, 2, 3, 4, 5, 1, 2, 4] yes
752 [1, 2, 3, 4, 5, 1, 2, 1] yes
753 [1, 2, 3, 4, 5, 1, 2] yes
754 [1, 2, 3, 4, 5, 1, 3, 4, 5, 3, 4, 5] yes
755 [1, 2, 3, 4, 5, 1, 3, 4, 5, 3, 4] yes
756 [1, 2, 3, 4, 5, 1, 3, 4, 5, 3] yes
757 [1, 2, 3, 4, 5, 1, 3, 4, 5] yes
758 [1, 2, 3, 4, 5, 1, 3, 4, 3] yes
759 [1, 2, 3, 4, 5, 1, 3, 4] yes
760 [1, 2, 3, 4, 5, 1, 3] yes
761 [1, 2, 3, 4, 5, 1, 4, 5] yes
762 [1, 2, 3, 4, 5, 1, 4] yes
763 [1, 2, 3, 4, 5, 1] yes
764 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5] yes
765 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4] yes
766 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3] yes
767 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2] yes
768 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5] yes
769 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 2, 3] yes
770 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 2] yes
771 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4] yes
772 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 2] yes
773 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3] yes
774 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2] yes
775 [1, 2, 3, 4, 5, 2, 3, 4, 5, 3, 4, 5] yes
776 [1, 2, 3, 4, 5, 2, 3, 4, 5, 3, 4] yes
777 [1, 2, 3, 4, 5, 2, 3, 4, 5, 3] yes
778 [1, 2, 3, 4, 5, 2, 3, 4, 5] yes
779 [1, 2, 3, 4, 5, 2, 3, 4, 2, 3, 2] yes
780 [1, 2, 3, 4, 5, 2, 3, 4, 2, 3] yes
781 [1, 2, 3, 4, 5, 2, 3, 4, 2] yes
782 [1, 2, 3, 4, 5, 2, 3, 4, 3] yes
783 [1, 2, 3, 4, 5, 2, 3, 4] yes
784 [1, 2, 3, 4, 5, 2, 3, 2] yes
785 [1, 2, 3, 4, 5, 2, 3] yes
786 [1, 2, 3, 4, 5, 2, 4, 5] yes
787 [1, 2, 3, 4, 5, 2, 4] yes
788 [1, 2, 3, 4, 5, 2] yes
789 [1, 2, 3, 4, 5, 3, 4, 5, 3, 4, 5] yes
790 [1, 2, 3, 4, 5, 3, 4, 5, 3, 4] yes
791 [1, 2, 3, 4, 5, 3, 4, 5, 3] yes
792 [1, 2, 3, 4, 5, 3, 4, 5] yes
793 [1, 2, 3, 4, 5, 3, 4, 3] yes
794 [1, 2, 3, 4, 5, 3, 4] yes
795 [1, 2, 3, 4, 5, 3] yes
796 [1, 2, 3, 4, 5, 4, 5] yes
797 [1, 2, 3, 4, 5, 4] yes
798 [1, 2, 3, 4, 5] yes
799 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1] yes
800 [1, 2, 3, 4, 1, 2, 3, 1, 2] yes
801 [1, 2, 3, 4, 1, 2, 3, 1] yes
802 [1, 2, 3, 4, 1, 2, 3, 2] yes
803 [1, 2, 3, 4, 1, 2, 3] yes
804 [1, 2, 3, 4, 1, 2, 1] yes
805 [1, 2, 3, 4, 1, 2] yes
806 [1, 2, 3, 4, 1, 3] yes
807 [1, 2, 3, 4, 1] yes
808 [1, 2, 3, 4, 2, 3, 2] yes
809 [1, 2, 3, 4, 2, 3] yes
810 [1, 2, 3, 4, 2] yes
811 [1, 2, 3, 4, 3] yes
812 [1, 2, 3, 4] yes
813 [1, 2, 3, 5, 1, 2, 1] yes
814 [1, 2, 3, 5, 1, 2] yes
815 [1, 2, 3, 5, 1] yes
816 [1, 2, 3, 5, 2] yes
817 [1, 2, 3, 5] yes
818 [1, 2, 3, 1, 2, 1] yes
819 [1, 2, 3, 1, 2] yes
820 [1, 2, 3, 1] yes
821 [1, 2, 3, 2] yes
822 [1, 2, 3] yes
823 [1, 2, 4, 5, 1, 4, 5] yes
824 [1, 2, 4, 5, 1, 4] yes
825 [1, 2, 4, 5, 1] yes
826 [1, 2, 4, 5, 4, 5] yes
827 [1, 2, 4, 5, 4] yes
828 [1, 2, 4, 5] yes
829 [1, 2, 4, 1] yes
830 [1, 2, 4] yes
831 [1, 2, 5, 1] yes
832 [1, 2, 5] yes
833 [1, 2, 1] yes
834 [1, 2] yes
835 [1, 3, 4, 5, 3, 4, 5, 3, 4, 5] yes
836 [1, 3, 4, 5, 3, 4, 5, 3, 4] yes
837 [1, 3, 4, 5, 3, 4, 5, 3] yes
838 [1, 3, 4, 5, 3, 4, 5] yes
839 [1, 3, 4, 5, 3, 4, 3] yes
840 [1, 3, 4, 5, 3, 4] yes
841 [1, 3, 4, 5, 3] yes
842 [1, 3, 4, 5, 4, 5] yes
843 [1, 3, 4, 5, 4] yes
844 [1, 3, 4, 5] yes
845 [1, 3, 4, 3] yes
846 [1, 3, 4] yes
847 [1, 3, 5] yes
848 [1, 3] yes
849 [1, 4, 5, 4, 5] yes
850 [1, 4, 5, 4] yes
851 [1, 4, 5] yes
852 [1, 4] yes
853 [1, 5] yes
854 [1] yes
855 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5] yes
856 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4] yes
857 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3] yes
858 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2] yes
859 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5] yes
860 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 2, 3] yes
861 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 2] yes
862 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4] yes
863 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 2] yes
864 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3] yes
865 [2, 3, 4, 5, 2, 3, 4, 5, 2] yes
866 [2, 3, 4, 5, 2, 3, 4, 5, 3, 4, 5] yes
867 [2, 3, 4, 5, 2, 3, 4, 5, 3, 4] yes
868 [2, 3, 4, 5, 2, 3, 4, 5, 3] yes
869 [2, 3, 4, 5, 2, 3, 4, 5] yes
870 [2, 3, 4, 5, 2, 3, 4, 2, 3, 2] yes
871 [2, 3, 4, 5, 2, 3, 4, 2, 3] yes
872 [2, 3, 4, 5, 2, 3, 4, 2] yes
873 [2, 3, 4, 5, 2, 3, 4, 3] yes
874 [2, 3, 4, 5, 2, 3, 4] yes
875 [2, 3, 4, 5, 2, 3, 2] yes
876 [2, 3, 4, 5, 2, 3] yes
877 [2, 3, 4, 5, 2, 4, 5] yes
878 [2, 3, 4, 5, 2, 4] yes
879 [2, 3, 4, 5, 2] yes
880 [2, 3, 4, 5, 3, 4, 5, 3, 4, 5] yes
881 [2, 3, 4, 5, 3, 4, 5, 3, 4] yes
882 [2, 3, 4, 5, 3, 4, 5, 3] yes
883 [2, 3, 4, 5, 3, 4, 5] yes
884 [2, 3, 4, 5, 3, 4, 3] yes
885 [2, 3, 4, 5, 3, 4] yes
886 [2, 3, 4, 5, 3] yes
887 [2, 3, 4, 5, 4, 5] yes
888 [2, 3, 4, 5, 4] yes
889 [2, 3, 4, 5] yes
890 [2, 3, 4, 2, 3, 2] yes
891 [2, 3, 4, 2, 3] yes
892 [2, 3, 4, 2] yes
893 [2, 3, 4, 3] yes
894 [2, 3, 4] yes
895 [2, 3, 5, 2] yes
896 [2, 3, 5] yes
897 [2, 3, 2] yes
898 [2, 3] yes
899 [2, 4, 5, 4, 5] yes
900 [2, 4, 5, 4] yes
901 [2, 4, 5] yes
902 [2, 4] yes
903 [2, 5] yes
904 [2] yes
905 [3, 4, 5, 3, 4, 5, 3, 4, 5] yes
906 [3, 4, 5, 3, 4, 5, 3, 4] yes
907 [3, 4, 5, 3, 4, 5, 3] yes
908 [3, 4, 5, 3, 4, 5] yes
909 [3, 4, 5, 3, 4, 3] yes
910 [3, 4, 5, 3, 4] yes
911 [3, 4, 5, 3] yes
912 [3, 4, 5, 4, 5] yes
913 [3, 4, 5, 4] yes
914 [3, 4, 5] yes
915 [3, 4, 3] yes
916 [3, 4] yes
917 [3, 5] yes
918 [3] yes
919 [4, 5, 4, 5] yes
920 [4, 5, 4] yes
921 [4, 5] yes
922 [4] yes
923 [5] yes
924 [] yes
### reloading attached file domination4.py modified at 20:17:02 ###
### reloading attached file domination4.py modified at 21:14:53 ###
### reloading attached file domination4.py modified at 21:15:21 ###
### reloading attached file domination4.py modified at 00:21:26 ###
### reloading attached file domination4.py modified at 01:04:45 ###
### reloading attached file domination4.py modified at 17:32:05 ###
### reloading attached file domination4.py modified at 17:37:36 ###
sage: A=CartanMatrix(['C',3])
....: c=[2,0,1]
....: seqs=[]
....: for u in sortables(A,c[1:]):
....:     seqs=seqs+[u,u+[0]]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     print(num,v,p_lambda_int(B(A,c),lam(A,v),seqs).dimension())
....: 
1 [0, 1, 0] 1
2 [0, 1] 2
3 [0] 2
4 [1] 1
5 [] 2
sage: A=CartanMatrix(['C',3])
....: c=[1,0,2]
....: seqs=[]
....: for u in sortables(A,c[1:]):
....:     seqs=seqs+[u,u+[0]]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     print(num,v,p_lambda_int(B(A,c),lam(A,v),seqs).dimension())
1 [0, 2] 1
2 [0] 2
3 [2] 2
4 [] 2
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: seqs=[]
....: for u in sortables(A,c[1:]):
....:     seqs=seqs+[u,u+[0]]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     print(num,v,p_lambda_int(B(A,c),lam(A,v),seqs).dimension())
1 [1, 2, 1, 2] 0
2 [1, 2, 1] 0
3 [1, 2] 0
4 [1] 0
5 [2] 0
6 [] 0
sage: A=CartanMatrix(['C',3])
....: c=[2,1,0]
....: seqs=[]
....: for u in sortables(A,c[1:]):
....:     seqs=seqs+[u,u+[0]]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     print(num,v,p_lambda_int(B(A,c),lam(A,v),seqs).dimension())
1 [1, 0, 1] 1
2 [1, 0] 1
3 [1] 2
4 [0] 2
5 [] 2
sage: B(A,c)
[ 0 -1  0]
[ 1  0 -2]
[ 0  1  0]
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: seqs=[]
....: for u in sortables(A,c[1:]):
....:     seqs=seqs+[u,u+[0]]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     print(num,v,p_lambda_int(B(A,c),lam(A,v),seqs).dimension())
1 [1, 2, 1, 2] 0
2 [1, 2, 1] 0
3 [1, 2] 0
4 [1] 0
5 [2] 0
6 [] 0
sage: B(A,c)
[ 0  1  0]
[-1  0  2]
[ 0 -1  0]
sage: A=CartanMatrix(['A',3])
....: c=[0,1,2]
....: seqs=[]
....: for u in sortables(A,c[1:]):
....:     seqs=seqs+[u,u+[0]]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     print(num,v,p_lambda_int(B(A,c),lam(A,v),seqs).dimension())
1 [1, 2, 1] 0
2 [1, 2] 0
3 [1] 0
4 [2] 0
5 [] 0
sage: A=CartanMatrix(['A',4])
....: c=[0,1,2,3]
....: seqs=[]
....: for u in sortables(A,c[1:]):
....:     seqs=seqs+[u,u+[0]]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     print(num,v,p_lambda_int(B(A,c),lam(A,v),seqs).dimension())
1 [1, 2, 3, 1, 2, 1] 0
2 [1, 2, 3, 1, 2] 0
3 [1, 2, 3, 1] 0
4 [1, 2, 3, 2] 0
5 [1, 2, 3] 0
6 [1, 2, 1] 0
7 [1, 2] 0
8 [1, 3] 0
9 [1] 0
10 [2, 3, 2] 0
11 [2, 3] 0
12 [2] 0
13 [3] 0
14 [] 0
sage: A=CartanMatrix(['D',4])
....: c=[0,1,2,3]
....: seqs=[]
....: for u in sortables(A,c[1:]):
....:     seqs=seqs+[u,u+[0]]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     print(num,v,p_lambda_int(B(A,c),lam(A,v),seqs).dimension())
1 [1, 2, 3, 1, 2, 3] 0
2 [1, 2, 3, 1, 2] 0
3 [1, 2, 3, 1, 3] 0
4 [1, 2, 3, 1] 0
5 [1, 2, 3] 0
6 [1, 2, 1] 0
7 [1, 2] 0
8 [1, 3, 1] 0
9 [1, 3] 0
10 [1] 0
11 [2, 3] 0
12 [2] 0
13 [3] 0
14 [] 0
sage: A=CartanMatrix(['D',5])
....: c=[0,1,2,3,4]
....: seqs=[]
....: for u in sortables(A,c[1:]):
....:     seqs=seqs+[u,u+[0]]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     print(num,v,p_lambda_int(B(A,c),lam(A,v),seqs).dimension())
1 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
2 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
3 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 4] 0
4 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
5 [1, 2, 3, 4, 1, 2, 3, 4, 1] 0
6 [1, 2, 3, 4, 1, 2, 3, 4] 0
7 [1, 2, 3, 4, 1, 2, 3, 1, 2] 0
8 [1, 2, 3, 4, 1, 2, 3, 1] 0
9 [1, 2, 3, 4, 1, 2, 3] 0
10 [1, 2, 3, 4, 1, 2, 4, 1, 2] 0
11 [1, 2, 3, 4, 1, 2, 4, 1] 0
12 [1, 2, 3, 4, 1, 2, 4] 0
13 [1, 2, 3, 4, 1, 2, 1] 0
14 [1, 2, 3, 4, 1, 2] 0
15 [1, 2, 3, 4, 1] 0
16 [1, 2, 3, 4, 2, 3, 4] 0
17 [1, 2, 3, 4, 2, 3] 0
18 [1, 2, 3, 4, 2, 4] 0
19 [1, 2, 3, 4, 2] 0
20 [1, 2, 3, 4] 0
21 [1, 2, 3, 1, 2, 1] 0
22 [1, 2, 3, 1, 2] 0
23 [1, 2, 3, 1] 0
24 [1, 2, 3, 2] 0
25 [1, 2, 3] 0
26 [1, 2, 4, 1, 2, 1] 0
27 [1, 2, 4, 1, 2] 0
28 [1, 2, 4, 1] 0
29 [1, 2, 4, 2] 0
30 [1, 2, 4] 0
31 [1, 2, 1] 0
32 [1, 2] 0
33 [1, 3, 4] 0
34 [1, 3] 0
35 [1, 4] 0
36 [1] 0
37 [2, 3, 4, 2, 3, 4] 0
38 [2, 3, 4, 2, 3] 0
39 [2, 3, 4, 2, 4] 0
40 [2, 3, 4, 2] 0
41 [2, 3, 4] 0
42 [2, 3, 2] 0
43 [2, 3] 0
44 [2, 4, 2] 0
45 [2, 4] 0
46 [2] 0
47 [3, 4] 0
48 [3] 0
49 [4] 0
50 [] 0
sage: A=CartanMatrix(['D',6])
....: c=[0,1,2,3,4,5]
....: seqs=[]
....: for u in sortables(A,c[1:]):
....:     seqs=seqs+[u,u+[0]]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     print(num,v,p_lambda_int(B(A,c),lam(A,v),seqs).dimension())
1 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5] 0
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [89], line 9
      7 for v in sortables(A,c[Integer(1):]):
      8     num+=Integer(1)
----> 9     print(num,v,p_lambda_int(B(A,c),lam(A,v),seqs).dimension())

File ~/git/affine_dominance/software/domination4.py:127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_faster(B, la, seqs[0])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_faster(B, la, s))
    128     if P.dimension()==0:
    129         break

File ~/git/affine_dominance/software/domination4.py:159, in p_lambda_faster(B, la, seq)
    155         P=Ep*Pp
    156     else:
    157         #print("Pp:   ",Pp,Pp.vertices(),Pp.rays(),Pp.lines(),"\n")
    158         #print("Pm:   ",Pm,Pm.vertices(),Pm.rays(),Pm.lines(),"\n\n")
--> 159         P=(Ep*Pp).convex_hull(Em*Pm)
    160     B.mutate(k)
    161 return P

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4099, in sage.structure.element.Matrix.__mul__ (build/cythonized/sage/structure/element.c:35219)()
   4097 
   4098         if BOTH_ARE_ELEMENT(cl):
-> 4099             return coercion_model.bin_op(left, right, mul)
   4100 
   4101         cdef long value

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1222, in sage.structure.coerce.CoercionModel.bin_op (build/cythonized/sage/structure/coerce.c:15809)()
   1220 if action is not None:
   1221     if (<Action>action)._is_left:
-> 1222         return (<Action>action)._act_(x, y)
   1223     else:
   1224         return (<Action>action)._act_(y, x)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_actions.pyx:157, in sage.structure.coerce_actions.ActedUponAction._act_ (build/cythonized/sage/structure/coerce_actions.c:8579)()
    155     <... 'sage.structure.coerce_actions.ActedUponAction'>
    156 """
--> 157 return (<Element>x)._acted_upon_(g, not self._is_left)
    158 
    159 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:949, in sage.structure.element.Element._acted_upon_ (build/cythonized/sage/structure/element.c:16495)()
    947     return None
    948 
--> 949 cpdef _acted_upon_(self, x, bint self_on_left) noexcept:
    950     """
    951     Use this method to implement ``self`` acted on by x.

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1450, in Polyhedron_base5._acted_upon_(self, actor, self_on_left)
   1448         raise ValueError("matrices should act on the left")
   1449     else:
-> 1450         return self.linear_transformation(actor)
   1451 else:
   1452     return self.dilation(actor)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1879, in Polyhedron_base5.linear_transformation(self, linear_transf, new_base_ring)
   1873     pref_rep = 'Vrep' if self.n_vertices() <= self.n_inequalities() else 'Hrep'
   1875     return new_parent.element_class(new_parent, [new_vertices, new_rays, new_lines],
   1876                                     [new_inequalities, new_equations],
   1877                                     Vrep_minimal=True, Hrep_minimal=True, pref_rep=pref_rep)
-> 1879 return new_parent.element_class(new_parent, [tuple(new_vertices), tuple(new_rays), tuple(new_lines)], None)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:174, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    171     lines = tuple(lines)
    173 if vertices or rays or lines:
--> 174     self._init_from_Vrepresentation(vertices, rays, lines, **kwds)
    175 else:
    176     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:99, in Polyhedron_ppl._init_from_Vrepresentation(self, vertices, rays, lines, minimize, verbose)
     72 def _init_from_Vrepresentation(self, vertices, rays, lines, minimize=True, verbose=False):
     73     """
     74     Construct polyhedron from V-representation data.
     75 
   (...)
     97         sage: Polyhedron_ppl._init_from_Vrepresentation(p, [], [], [])
     98     """
---> 99     gs = self._convert_generators_to_ppl(vertices, rays, lines)
    100     if gs.empty():
    101         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'empty')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:477, in Polyhedron_ppl._convert_generators_to_ppl(vertices, rays, lines)
    475     rays = []
    476 for r in rays:
--> 477     gs.insert(Polyhedron_ppl._convert_generator_to_ppl(r, RAY))
    478 if lines is None:
    479     lines = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:442, in Polyhedron_ppl._convert_generator_to_ppl(v, typ)
    440 d = LCM_list([denominator(v_i) for v_i in v])
    441 if d.is_one():
--> 442     return ob(Linear_Expression(v, 0))
    443 else:
    444     dv = [ d*v_i for v_i in v ]

File ppl/linear_algebra.pyx:654, in ppl.linear_algebra.Linear_Expression.__init__()

File ppl/linear_algebra.pyx:49, in ppl.linear_algebra.PPL_Coefficient_from_pyobject()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:1107, in sage.structure.element.Element.__richcmp__ (build/cythonized/sage/structure/element.c:18121)()
   1105         return (<Element>self)._richcmp_(other, op)
   1106     else:
-> 1107         return coercion_model.richcmp(self, other, op)
   1108 
   1109 cpdef _richcmp_(left, right, int op) noexcept:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:2021, in sage.structure.coerce.CoercionModel.richcmp (build/cythonized/sage/structure/coerce.c:26173)()
   2019 # Coerce to a common parent
   2020 try:
-> 2021     x, y = self.canonical_coercion(x, y)
   2022 except (TypeError, NotImplementedError):
   2023     pass

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1422, in sage.structure.coerce.CoercionModel.canonical_coercion (build/cythonized/sage/structure/coerce.c:18956)()
   1420             self._record_exception()
   1421 
-> 1422     raise TypeError("no common canonical parent for objects with parents: '%s' and '%s'"%(xp, yp))
   1423 
   1424 cpdef coercion_maps(self, R, S) noexcept:

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: B(A,c)
[ 0  1  0  0  0  0]
[-1  0  1  0  0  0]
[ 0 -1  0  1  0  0]
[ 0  0 -1  0  1  1]
[ 0  0  0 -1  0  0]
[ 0  0  0 -1  0  0]
sage: A=CartanMatrix(['D',5])
....: c=[0,1,2,3,4]
....: seqs=[]
....: for u in sortables(A,c[1:]):
....:     seqs=seqs+[u,u+[0]]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     print(num,v,p_lambda_int(B(A,c),lam(A,v),seqs).dimension())
....: 
1 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 0
2 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3] 0
3 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 4] 0
4 [1, 2, 3, 4, 1, 2, 3, 4, 1, 2] 0
5 [1, 2, 3, 4, 1, 2, 3, 4, 1] 0
6 [1, 2, 3, 4, 1, 2, 3, 4] 0
7 [1, 2, 3, 4, 1, 2, 3, 1, 2] 0
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [91], line 9
      7 for v in sortables(A,c[Integer(1):]):
      8     num+=Integer(1)
----> 9     print(num,v,p_lambda_int(B(A,c),lam(A,v),seqs).dimension())

File ~/git/affine_dominance/software/domination4.py:127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_faster(B, la, seqs[0])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_faster(B, la, s))
    128     if P.dimension()==0:
    129         break

File ~/git/affine_dominance/software/domination4.py:159, in p_lambda_faster(B, la, seq)
    155         P=Ep*Pp
    156     else:
    157         #print("Pp:   ",Pp,Pp.vertices(),Pp.rays(),Pp.lines(),"\n")
    158         #print("Pm:   ",Pm,Pm.vertices(),Pm.rays(),Pm.lines(),"\n\n")
--> 159         P=(Ep*Pp).convex_hull(Em*Pm)
    160     B.mutate(k)
    161 return P

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4099, in sage.structure.element.Matrix.__mul__ (build/cythonized/sage/structure/element.c:35219)()
   4097 
   4098         if BOTH_ARE_ELEMENT(cl):
-> 4099             return coercion_model.bin_op(left, right, mul)
   4100 
   4101         cdef long value

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1222, in sage.structure.coerce.CoercionModel.bin_op (build/cythonized/sage/structure/coerce.c:15809)()
   1220 if action is not None:
   1221     if (<Action>action)._is_left:
-> 1222         return (<Action>action)._act_(x, y)
   1223     else:
   1224         return (<Action>action)._act_(y, x)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_actions.pyx:157, in sage.structure.coerce_actions.ActedUponAction._act_ (build/cythonized/sage/structure/coerce_actions.c:8579)()
    155     <... 'sage.structure.coerce_actions.ActedUponAction'>
    156 """
--> 157 return (<Element>x)._acted_upon_(g, not self._is_left)
    158 
    159 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:949, in sage.structure.element.Element._acted_upon_ (build/cythonized/sage/structure/element.c:16495)()
    947     return None
    948 
--> 949 cpdef _acted_upon_(self, x, bint self_on_left) noexcept:
    950     """
    951     Use this method to implement ``self`` acted on by x.

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1450, in Polyhedron_base5._acted_upon_(self, actor, self_on_left)
   1448         raise ValueError("matrices should act on the left")
   1449     else:
-> 1450         return self.linear_transformation(actor)
   1451 else:
   1452     return self.dilation(actor)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1879, in Polyhedron_base5.linear_transformation(self, linear_transf, new_base_ring)
   1873     pref_rep = 'Vrep' if self.n_vertices() <= self.n_inequalities() else 'Hrep'
   1875     return new_parent.element_class(new_parent, [new_vertices, new_rays, new_lines],
   1876                                     [new_inequalities, new_equations],
   1877                                     Vrep_minimal=True, Hrep_minimal=True, pref_rep=pref_rep)
-> 1879 return new_parent.element_class(new_parent, [tuple(new_vertices), tuple(new_rays), tuple(new_lines)], None)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:174, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    171     lines = tuple(lines)
    173 if vertices or rays or lines:
--> 174     self._init_from_Vrepresentation(vertices, rays, lines, **kwds)
    175 else:
    176     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:99, in Polyhedron_ppl._init_from_Vrepresentation(self, vertices, rays, lines, minimize, verbose)
     72 def _init_from_Vrepresentation(self, vertices, rays, lines, minimize=True, verbose=False):
     73     """
     74     Construct polyhedron from V-representation data.
     75 
   (...)
     97         sage: Polyhedron_ppl._init_from_Vrepresentation(p, [], [], [])
     98     """
---> 99     gs = self._convert_generators_to_ppl(vertices, rays, lines)
    100     if gs.empty():
    101         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'empty')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:473, in Polyhedron_ppl._convert_generators_to_ppl(vertices, rays, lines)
    471     vertices = []
    472 for v in vertices:
--> 473     gs.insert(Polyhedron_ppl._convert_generator_to_ppl(v, VERTEX))
    474 if rays is None:
    475     rays = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:442, in Polyhedron_ppl._convert_generator_to_ppl(v, typ)
    440 d = LCM_list([denominator(v_i) for v_i in v])
    441 if d.is_one():
--> 442     return ob(Linear_Expression(v, 0))
    443 else:
    444     dv = [ d*v_i for v_i in v ]

File ppl/linear_algebra.pyx:654, in ppl.linear_algebra.Linear_Expression.__init__()

File ppl/linear_algebra.pyx:49, in ppl.linear_algebra.PPL_Coefficient_from_pyobject()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:1107, in sage.structure.element.Element.__richcmp__ (build/cythonized/sage/structure/element.c:18121)()
   1105         return (<Element>self)._richcmp_(other, op)
   1106     else:
-> 1107         return coercion_model.richcmp(self, other, op)
   1108 
   1109 cpdef _richcmp_(left, right, int op) noexcept:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:2021, in sage.structure.coerce.CoercionModel.richcmp (build/cythonized/sage/structure/coerce.c:26173)()
   2019 # Coerce to a common parent
   2020 try:
-> 2021     x, y = self.canonical_coercion(x, y)
   2022 except (TypeError, NotImplementedError):
   2023     pass

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1422, in sage.structure.coerce.CoercionModel.canonical_coercion (build/cythonized/sage/structure/coerce.c:18956)()
   1420             self._record_exception()
   1421 
-> 1422     raise TypeError("no common canonical parent for objects with parents: '%s' and '%s'"%(xp, yp))
   1423 
   1424 cpdef coercion_maps(self, R, S) noexcept:

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: B(A,c)
[ 0  1  0  0  0]
[-1  0  1  0  0]
[ 0 -1  0  1  1]
[ 0  0 -1  0  0]
[ 0  0 -1  0  0]
sage: A=CartanMatrix(['A',5])
....: c=[0,1,2,3,4]
....: seqs=[]
....: for u in sortables(A,c[1:]):
....:     seqs=seqs+[u,u+[0]]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     print(num,v,p_lambda_int(B(A,c),lam(A,v),seqs).dimension())
1 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
2 [1, 2, 3, 4, 1, 2, 3, 1, 2] 0
3 [1, 2, 3, 4, 1, 2, 3, 1] 0
4 [1, 2, 3, 4, 1, 2, 3, 2] 0
5 [1, 2, 3, 4, 1, 2, 3] 0
6 [1, 2, 3, 4, 1, 2, 1] 0
7 [1, 2, 3, 4, 1, 2] 0
8 [1, 2, 3, 4, 1, 3] 0
9 [1, 2, 3, 4, 1] 0
10 [1, 2, 3, 4, 2, 3, 2] 0
11 [1, 2, 3, 4, 2, 3] 0
12 [1, 2, 3, 4, 2] 0
13 [1, 2, 3, 4, 3] 0
14 [1, 2, 3, 4] 0
15 [1, 2, 3, 1, 2, 1] 0
16 [1, 2, 3, 1, 2] 0
17 [1, 2, 3, 1] 0
18 [1, 2, 3, 2] 0
19 [1, 2, 3] 0
20 [1, 2, 4, 1] 0
21 [1, 2, 4] 0
22 [1, 2, 1] 0
23 [1, 2] 0
24 [1, 3, 4, 3] 0
25 [1, 3, 4] 0
26 [1, 3] 0
27 [1, 4] 0
28 [1] 0
29 [2, 3, 4, 2, 3, 2] 0
30 [2, 3, 4, 2, 3] 0
31 [2, 3, 4, 2] 0
32 [2, 3, 4, 3] 0
33 [2, 3, 4] 0
34 [2, 3, 2] 0
35 [2, 3] 0
36 [2, 4] 0
37 [2] 0
38 [3, 4, 3] 0
39 [3, 4] 0
40 [3] 0
41 [4] 0
42 [] 0
sage: A=CartanMatrix(['A',6])
....: c=[0,1,2,3,4,5]
....: seqs=[]
....: for u in sortables(A,c[1:]):
....:     seqs=seqs+[u,u+[0]]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     print(num,v,p_lambda_int(B(A,c),lam(A,v),seqs).dimension())
1 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
2 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
3 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1] 0
4 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 2] 0
5 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] 0
6 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1] 0
7 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] 0
8 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 3] 0
9 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1] 0
10 [1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3, 2] 0
11 [1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3] 0
12 [1, 2, 3, 4, 5, 1, 2, 3, 4, 2] 0
13 [1, 2, 3, 4, 5, 1, 2, 3, 4, 3] 0
14 [1, 2, 3, 4, 5, 1, 2, 3, 4] 0
15 [1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1] 0
16 [1, 2, 3, 4, 5, 1, 2, 3, 1, 2] 0
17 [1, 2, 3, 4, 5, 1, 2, 3, 1] 0
18 [1, 2, 3, 4, 5, 1, 2, 3, 2] 0
19 [1, 2, 3, 4, 5, 1, 2, 3] 0
20 [1, 2, 3, 4, 5, 1, 2, 4, 1] 0
21 [1, 2, 3, 4, 5, 1, 2, 4] 0
22 [1, 2, 3, 4, 5, 1, 2, 1] 0
23 [1, 2, 3, 4, 5, 1, 2] 0
24 [1, 2, 3, 4, 5, 1, 3, 4, 3] 0
25 [1, 2, 3, 4, 5, 1, 3, 4] 0
26 [1, 2, 3, 4, 5, 1, 3] 0
27 [1, 2, 3, 4, 5, 1, 4] 0
28 [1, 2, 3, 4, 5, 1] 0
29 [1, 2, 3, 4, 5, 2, 3, 4, 2, 3, 2] 0
30 [1, 2, 3, 4, 5, 2, 3, 4, 2, 3] 0
31 [1, 2, 3, 4, 5, 2, 3, 4, 2] 0
32 [1, 2, 3, 4, 5, 2, 3, 4, 3] 0
33 [1, 2, 3, 4, 5, 2, 3, 4] 0
34 [1, 2, 3, 4, 5, 2, 3, 2] 0
35 [1, 2, 3, 4, 5, 2, 3] 0
36 [1, 2, 3, 4, 5, 2, 4] 0
37 [1, 2, 3, 4, 5, 2] 0
38 [1, 2, 3, 4, 5, 3, 4, 3] 0
39 [1, 2, 3, 4, 5, 3, 4] 0
40 [1, 2, 3, 4, 5, 3] 0
41 [1, 2, 3, 4, 5, 4] 0
42 [1, 2, 3, 4, 5] 0
43 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
44 [1, 2, 3, 4, 1, 2, 3, 1, 2] 0
45 [1, 2, 3, 4, 1, 2, 3, 1] 0
46 [1, 2, 3, 4, 1, 2, 3, 2] 0
47 [1, 2, 3, 4, 1, 2, 3] 0
48 [1, 2, 3, 4, 1, 2, 1] 0
49 [1, 2, 3, 4, 1, 2] 0
50 [1, 2, 3, 4, 1, 3] 0
51 [1, 2, 3, 4, 1] 0
52 [1, 2, 3, 4, 2, 3, 2] 0
53 [1, 2, 3, 4, 2, 3] 0
54 [1, 2, 3, 4, 2] 0
55 [1, 2, 3, 4, 3] 0
56 [1, 2, 3, 4] 0
57 [1, 2, 3, 5, 1, 2, 1] 0
58 [1, 2, 3, 5, 1, 2] 0
59 [1, 2, 3, 5, 1] 0
60 [1, 2, 3, 5, 2] 0
61 [1, 2, 3, 5] 0
62 [1, 2, 3, 1, 2, 1] 0
63 [1, 2, 3, 1, 2] 0
64 [1, 2, 3, 1] 0
65 [1, 2, 3, 2] 0
66 [1, 2, 3] 0
67 [1, 2, 4, 5, 1, 4] 0
68 [1, 2, 4, 5, 1] 0
69 [1, 2, 4, 5, 4] 0
70 [1, 2, 4, 5] 0
71 [1, 2, 4, 1] 0
72 [1, 2, 4] 0
73 [1, 2, 5, 1] 0
74 [1, 2, 5] 0
75 [1, 2, 1] 0
76 [1, 2] 0
77 [1, 3, 4, 5, 3, 4, 3] 0
78 [1, 3, 4, 5, 3, 4] 0
79 [1, 3, 4, 5, 3] 0
80 [1, 3, 4, 5, 4] 0
81 [1, 3, 4, 5] 0
82 [1, 3, 4, 3] 0
83 [1, 3, 4] 0
84 [1, 3, 5] 0
85 [1, 3] 0
86 [1, 4, 5, 4] 0
87 [1, 4, 5] 0
88 [1, 4] 0
89 [1, 5] 0
90 [1] 0
91 [2, 3, 4, 5, 2, 3, 4, 2, 3, 2] 0
92 [2, 3, 4, 5, 2, 3, 4, 2, 3] 0
93 [2, 3, 4, 5, 2, 3, 4, 2] 0
94 [2, 3, 4, 5, 2, 3, 4, 3] 0
95 [2, 3, 4, 5, 2, 3, 4] 0
96 [2, 3, 4, 5, 2, 3, 2] 0
97 [2, 3, 4, 5, 2, 3] 0
98 [2, 3, 4, 5, 2, 4] 0
99 [2, 3, 4, 5, 2] 0
100 [2, 3, 4, 5, 3, 4, 3] 0
101 [2, 3, 4, 5, 3, 4] 0
102 [2, 3, 4, 5, 3] 0
103 [2, 3, 4, 5, 4] 0
104 [2, 3, 4, 5] 0
105 [2, 3, 4, 2, 3, 2] 0
106 [2, 3, 4, 2, 3] 0
107 [2, 3, 4, 2] 0
108 [2, 3, 4, 3] 0
109 [2, 3, 4] 0
110 [2, 3, 5, 2] 0
111 [2, 3, 5] 0
112 [2, 3, 2] 0
113 [2, 3] 0
114 [2, 4, 5, 4] 0
115 [2, 4, 5] 0
116 [2, 4] 0
117 [2, 5] 0
118 [2] 0
119 [3, 4, 5, 3, 4, 3] 0
120 [3, 4, 5, 3, 4] 0
121 [3, 4, 5, 3] 0
122 [3, 4, 5, 4] 0
123 [3, 4, 5] 0
124 [3, 4, 3] 0
125 [3, 4] 0
126 [3, 5] 0
127 [3] 0
128 [4, 5, 4] 0
129 [4, 5] 0
130 [4] 0
131 [5] 0
132 [] 0
sage: sage: A=CartanMatrix(['A',6])
....: ....: c=[5,0,1,2,3,4]
....: ....: seqs=[]
....: ....: for u in sortables(A,c[1:]):
....: ....:     seqs=seqs+[u,u+[c[0]]]
....: ....: num=0
....: ....: for v in sortables(A,c[1:]):
....: ....:     num+=1
....: ....:     print(num,v,p_lambda_int(B(A,c),lam(A,v),seqs).dimension())
....: 
1 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0] 0
2 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1] 0
3 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0] 0
4 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 1] 0
5 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2] 0
6 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 0] 0
7 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1] 0
8 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 2] 0
9 [0, 1, 2, 3, 4, 0, 1, 2, 3, 0] 0
10 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2, 1] 0
11 [0, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2] 0
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [95], line 9
      7 for v in sortables(A,c[Integer(1):]):
      8     num+=Integer(1)
----> 9     print(num,v,p_lambda_int(B(A,c),lam(A,v),seqs).dimension())

File ~/git/affine_dominance/software/domination4.py:127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_faster(B, la, seqs[0])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_faster(B, la, s))
    128     if P.dimension()==0:
    129         break

File ~/git/affine_dominance/software/domination4.py:159, in p_lambda_faster(B, la, seq)
    155         P=Ep*Pp
    156     else:
    157         #print("Pp:   ",Pp,Pp.vertices(),Pp.rays(),Pp.lines(),"\n")
    158         #print("Pm:   ",Pm,Pm.vertices(),Pm.rays(),Pm.lines(),"\n\n")
--> 159         P=(Ep*Pp).convex_hull(Em*Pm)
    160     B.mutate(k)
    161 return P

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1312, in Polyhedron_base5.convex_hull(self, other)
   1310 hull_rays = self.rays() + other.rays()
   1311 hull_lines = self.lines() + other.lines()
-> 1312 return self.parent().element_class(self.parent(), [hull_vertices, hull_rays, hull_lines], None)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:174, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    171     lines = tuple(lines)
    173 if vertices or rays or lines:
--> 174     self._init_from_Vrepresentation(vertices, rays, lines, **kwds)
    175 else:
    176     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:99, in Polyhedron_ppl._init_from_Vrepresentation(self, vertices, rays, lines, minimize, verbose)
     72 def _init_from_Vrepresentation(self, vertices, rays, lines, minimize=True, verbose=False):
     73     """
     74     Construct polyhedron from V-representation data.
     75 
   (...)
     97         sage: Polyhedron_ppl._init_from_Vrepresentation(p, [], [], [])
     98     """
---> 99     gs = self._convert_generators_to_ppl(vertices, rays, lines)
    100     if gs.empty():
    101         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'empty')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:477, in Polyhedron_ppl._convert_generators_to_ppl(vertices, rays, lines)
    475     rays = []
    476 for r in rays:
--> 477     gs.insert(Polyhedron_ppl._convert_generator_to_ppl(r, RAY))
    478 if lines is None:
    479     lines = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:442, in Polyhedron_ppl._convert_generator_to_ppl(v, typ)
    440 d = LCM_list([denominator(v_i) for v_i in v])
    441 if d.is_one():
--> 442     return ob(Linear_Expression(v, 0))
    443 else:
    444     dv = [ d*v_i for v_i in v ]

File ppl/linear_algebra.pyx:653, in ppl.linear_algebra.Linear_Expression.__init__()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/representation.py:81, in PolyhedronRepresentation.__getitem__(self, i)
     69     """
     70     Return the length of the representation data.
     71 
   (...)
     77         3
     78     """
     79     return self._vector.degree()
---> 81 def __getitem__(self, i):
     82     """
     83     Supports indexing.
     84 
   (...)
     90         2
     91     """
     92     return self._vector[i]

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: sage: A=CartanMatrix(['B',3])
....: ....: c=[2,0,1]
....: ....: seqs=[]
....: ....: for u in sortables(A,c[1:]):
....: ....:     seqs=seqs+[u,u+[c[0]]]
....: ....: num=0
....: ....: for v in sortables(A,c[1:]):
....: ....:     num+=1
....: ....:     print(num,v,p_lambda_int(B(A,c),lam(A,v),seqs).dimension())
1 [0, 1, 0] 0
2 [0, 1] 0
3 [0] 0
4 [1] 0
5 [] 0
sage: sage: A=CartanMatrix(['C',3])
....: ....: c=[0,1,2]
....: ....: seqs=[]
....: ....: for u in sortables(A,c[1:]):
....: ....:     seqs=seqs+[u,u+[c[0]]]
....: ....: num=0
....: ....: for v in sortables(A,c[1:]):
....: ....:     num+=1
....: ....:     print(num,v,p_lambda_int(B(A,c),lam(A,v),seqs).dimension())
1 [1, 2, 1, 2] 0
2 [1, 2, 1] 0
3 [1, 2] 0
4 [1] 0
5 [2] 0
6 [] 0
sage: sage: A=CartanMatrix(['C',3])
....: ....: c=[2,0,1]
....: ....: seqs=[]
....: ....: for u in sortables(A,c[1:]):
....: ....:     seqs=seqs+[u,u+[c[0]]]
....: ....: num=0
....: ....: for v in sortables(A,c[1:]):
....: ....:     num+=1
....: ....:     print(num,v,p_lambda_int(B(A,c),lam(A,v),seqs).dimension())
1 [0, 1, 0] 0
2 [0, 1] 0
3 [0] 0
4 [1] 0
5 [] 0
sage: sage: A=CartanMatrix(['C',3])
....: ....: c=[2,1,0]
....: ....: seqs=[]
....: ....: for u in sortables(A,c[1:]):
....: ....:     seqs=seqs+[u,u+[c[0]]]
....: ....: num=0
....: ....: for v in sortables(A,c[1:]):
....: ....:     num+=1
....: ....:     print(num,v,p_lambda_int(B(A,c),lam(A,v),seqs).dimension())
1 [1, 0, 1] 0
2 [1, 0] 0
3 [1] 0
4 [0] 0
5 [] 0
sage: sage: A=CartanMatrix(['C',3])
....: ....: c=[0,2,1]
....: ....: seqs=[]
....: ....: for u in sortables(A,c[1:]):
....: ....:     seqs=seqs+[u,u+[c[0]]]
....: ....: num=0
....: ....: for v in sortables(A,c[1:]):
....: ....:     num+=1
....: ....:     print(num,v,p_lambda_int(B(A,c),lam(A,v),seqs).dimension())
1 [2, 1, 2, 1] 0
2 [2, 1, 2] 0
3 [2, 1] 0
4 [2] 0
5 [1] 0
6 [] 0
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: seqs=[]
....: for u in sortables(A,c[1:]):
....:     seqs=seqs+[u,u+[0]]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),seqs).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
....: 
1 [1, 2, 1, 2] 0
2 [1, 2, 1] 0
3 [1, 2] 0
4 [1] 0
5 [2] 0
6 [] 0
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: seqs=[]
....: for u in sortables(A,c[1:]):
....:     seqs=seqs+[u,u+[0]]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),seqs).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [102], line 9
      7 for v in sortables(A,c[Integer(1):]):
      8     num+=Integer(1)
----> 9     d=p_lambda_int(B(A,c),lam(A,v),seqs).dimension()
     10     print(num,v,d)
     11     if d!=Integer(0):

File ~/git/affine_dominance/software/domination4.py:127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_faster(B, la, seqs[0])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_faster(B, la, s))
    128     if P.dimension()==0:
    129         break

File ~/git/affine_dominance/software/domination4.py:159, in p_lambda_faster(B, la, seq)
    155         P=Ep*Pp
    156     else:
    157         #print("Pp:   ",Pp,Pp.vertices(),Pp.rays(),Pp.lines(),"\n")
    158         #print("Pm:   ",Pm,Pm.vertices(),Pm.rays(),Pm.lines(),"\n\n")
--> 159         P=(Ep*Pp).convex_hull(Em*Pm)
    160     B.mutate(k)
    161 return P

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1312, in Polyhedron_base5.convex_hull(self, other)
   1310 hull_rays = self.rays() + other.rays()
   1311 hull_lines = self.lines() + other.lines()
-> 1312 return self.parent().element_class(self.parent(), [hull_vertices, hull_rays, hull_lines], None)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:174, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    171     lines = tuple(lines)
    173 if vertices or rays or lines:
--> 174     self._init_from_Vrepresentation(vertices, rays, lines, **kwds)
    175 else:
    176     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:99, in Polyhedron_ppl._init_from_Vrepresentation(self, vertices, rays, lines, minimize, verbose)
     72 def _init_from_Vrepresentation(self, vertices, rays, lines, minimize=True, verbose=False):
     73     """
     74     Construct polyhedron from V-representation data.
     75 
   (...)
     97         sage: Polyhedron_ppl._init_from_Vrepresentation(p, [], [], [])
     98     """
---> 99     gs = self._convert_generators_to_ppl(vertices, rays, lines)
    100     if gs.empty():
    101         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'empty')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:477, in Polyhedron_ppl._convert_generators_to_ppl(vertices, rays, lines)
    475     rays = []
    476 for r in rays:
--> 477     gs.insert(Polyhedron_ppl._convert_generator_to_ppl(r, RAY))
    478 if lines is None:
    479     lines = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:442, in Polyhedron_ppl._convert_generator_to_ppl(v, typ)
    440 d = LCM_list([denominator(v_i) for v_i in v])
    441 if d.is_one():
--> 442     return ob(Linear_Expression(v, 0))
    443 else:
    444     dv = [ d*v_i for v_i in v ]

File ppl/linear_algebra.pyx:654, in ppl.linear_algebra.Linear_Expression.__init__()

File ppl/linear_algebra.pyx:49, in ppl.linear_algebra.PPL_Coefficient_from_pyobject()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:1107, in sage.structure.element.Element.__richcmp__ (build/cythonized/sage/structure/element.c:18121)()
   1105         return (<Element>self)._richcmp_(other, op)
   1106     else:
-> 1107         return coercion_model.richcmp(self, other, op)
   1108 
   1109 cpdef _richcmp_(left, right, int op) noexcept:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:2021, in sage.structure.coerce.CoercionModel.richcmp (build/cythonized/sage/structure/coerce.c:26173)()
   2019 # Coerce to a common parent
   2020 try:
-> 2021     x, y = self.canonical_coercion(x, y)
   2022 except (TypeError, NotImplementedError):
   2023     pass

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1422, in sage.structure.coerce.CoercionModel.canonical_coercion (build/cythonized/sage/structure/coerce.c:18956)()
   1420             self._record_exception()
   1421 
-> 1422     raise TypeError("no common canonical parent for objects with parents: '%s' and '%s'"%(xp, yp))
   1423 
   1424 cpdef coercion_maps(self, R, S) noexcept:

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: seqs=[]
....: for u in sortables(A,c[1:]):
....:     seqs=seqs+[u,u+[c[0]]]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),seqs).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
....: 
1 [1, 2, 1, 2] 0
2 [1, 2, 1] 0
3 [1, 2] 0
4 [1] 0
5 [2] 0
6 [] 0
sage: A=CartanMatrix(['C',7])
....: c=[0,1,2,3,4,5,6]
....: seqs=[]
....: for u in sortables(A,c[1:]):
....:     seqs=seqs+[u,u+[c[0]]]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),seqs).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [104], line 9
      7 for v in sortables(A,c[Integer(1):]):
      8     num+=Integer(1)
----> 9     d=p_lambda_int(B(A,c),lam(A,v),seqs).dimension()
     10     print(num,v,d)
     11     if d!=Integer(0):

File ~/git/affine_dominance/software/domination4.py:127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_faster(B, la, seqs[0])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_faster(B, la, s))
    128     if P.dimension()==0:
    129         break

File ~/git/affine_dominance/software/domination4.py:159, in p_lambda_faster(B, la, seq)
    155         P=Ep*Pp
    156     else:
    157         #print("Pp:   ",Pp,Pp.vertices(),Pp.rays(),Pp.lines(),"\n")
    158         #print("Pm:   ",Pm,Pm.vertices(),Pm.rays(),Pm.lines(),"\n\n")
--> 159         P=(Ep*Pp).convex_hull(Em*Pm)
    160     B.mutate(k)
    161 return P

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4099, in sage.structure.element.Matrix.__mul__ (build/cythonized/sage/structure/element.c:35219)()
   4097 
   4098         if BOTH_ARE_ELEMENT(cl):
-> 4099             return coercion_model.bin_op(left, right, mul)
   4100 
   4101         cdef long value

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1222, in sage.structure.coerce.CoercionModel.bin_op (build/cythonized/sage/structure/coerce.c:15809)()
   1220 if action is not None:
   1221     if (<Action>action)._is_left:
-> 1222         return (<Action>action)._act_(x, y)
   1223     else:
   1224         return (<Action>action)._act_(y, x)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce_actions.pyx:157, in sage.structure.coerce_actions.ActedUponAction._act_ (build/cythonized/sage/structure/coerce_actions.c:8579)()
    155     <... 'sage.structure.coerce_actions.ActedUponAction'>
    156 """
--> 157 return (<Element>x)._acted_upon_(g, not self._is_left)
    158 
    159 

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:949, in sage.structure.element.Element._acted_upon_ (build/cythonized/sage/structure/element.c:16495)()
    947     return None
    948 
--> 949 cpdef _acted_upon_(self, x, bint self_on_left) noexcept:
    950     """
    951     Use this method to implement ``self`` acted on by x.

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1450, in Polyhedron_base5._acted_upon_(self, actor, self_on_left)
   1448         raise ValueError("matrices should act on the left")
   1449     else:
-> 1450         return self.linear_transformation(actor)
   1451 else:
   1452     return self.dilation(actor)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1879, in Polyhedron_base5.linear_transformation(self, linear_transf, new_base_ring)
   1873     pref_rep = 'Vrep' if self.n_vertices() <= self.n_inequalities() else 'Hrep'
   1875     return new_parent.element_class(new_parent, [new_vertices, new_rays, new_lines],
   1876                                     [new_inequalities, new_equations],
   1877                                     Vrep_minimal=True, Hrep_minimal=True, pref_rep=pref_rep)
-> 1879 return new_parent.element_class(new_parent, [tuple(new_vertices), tuple(new_rays), tuple(new_lines)], None)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:174, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    171     lines = tuple(lines)
    173 if vertices or rays or lines:
--> 174     self._init_from_Vrepresentation(vertices, rays, lines, **kwds)
    175 else:
    176     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:99, in Polyhedron_ppl._init_from_Vrepresentation(self, vertices, rays, lines, minimize, verbose)
     72 def _init_from_Vrepresentation(self, vertices, rays, lines, minimize=True, verbose=False):
     73     """
     74     Construct polyhedron from V-representation data.
     75 
   (...)
     97         sage: Polyhedron_ppl._init_from_Vrepresentation(p, [], [], [])
     98     """
---> 99     gs = self._convert_generators_to_ppl(vertices, rays, lines)
    100     if gs.empty():
    101         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'empty')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:473, in Polyhedron_ppl._convert_generators_to_ppl(vertices, rays, lines)
    471     vertices = []
    472 for v in vertices:
--> 473     gs.insert(Polyhedron_ppl._convert_generator_to_ppl(v, VERTEX))
    474 if rays is None:
    475     rays = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:442, in Polyhedron_ppl._convert_generator_to_ppl(v, typ)
    440 d = LCM_list([denominator(v_i) for v_i in v])
    441 if d.is_one():
--> 442     return ob(Linear_Expression(v, 0))
    443 else:
    444     dv = [ d*v_i for v_i in v ]

File ppl/linear_algebra.pyx:654, in ppl.linear_algebra.Linear_Expression.__init__()

File ppl/linear_algebra.pyx:49, in ppl.linear_algebra.PPL_Coefficient_from_pyobject()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:1107, in sage.structure.element.Element.__richcmp__ (build/cythonized/sage/structure/element.c:18121)()
   1105         return (<Element>self)._richcmp_(other, op)
   1106     else:
-> 1107         return coercion_model.richcmp(self, other, op)
   1108 
   1109 cpdef _richcmp_(left, right, int op) noexcept:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:2021, in sage.structure.coerce.CoercionModel.richcmp (build/cythonized/sage/structure/coerce.c:26173)()
   2019 # Coerce to a common parent
   2020 try:
-> 2021     x, y = self.canonical_coercion(x, y)
   2022 except (TypeError, NotImplementedError):
   2023     pass

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1422, in sage.structure.coerce.CoercionModel.canonical_coercion (build/cythonized/sage/structure/coerce.c:18956)()
   1420             self._record_exception()
   1421 
-> 1422     raise TypeError("no common canonical parent for objects with parents: '%s' and '%s'"%(xp, yp))
   1423 
   1424 cpdef coercion_maps(self, R, S) noexcept:

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['A',7])
....: c=[0,1,2,3,4,5,6]
....: seqs=[]
....: for u in sortables(A,c[1:]):
....:     seqs=seqs+[u,u+[c[0]]]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),seqs).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Cell In [105], line 9
      7 for v in sortables(A,c[Integer(1):]):
      8     num+=Integer(1)
----> 9     d=p_lambda_int(B(A,c),lam(A,v),seqs).dimension()
     10     print(num,v,d)
     11     if d!=Integer(0):

File ~/git/affine_dominance/software/domination4.py:127, in p_lambda_int(B, la, seqs)
    125 P = p_lambda_faster(B, la, seqs[0])
    126 for s in seqs:
--> 127     P = P.intersection(p_lambda_faster(B, la, s))
    128     if P.dimension()==0:
    129         break

File ~/git/affine_dominance/software/domination4.py:151, in p_lambda_faster(B, la, seq)
    148 #print("Hp:   ",Hp,Hp.vertices(),Hp.rays(),Hp.lines(),"\n")
    149 #print("Hm:   ",Hm,Hm.vertices(),Hm.rays(),Hm.lines(),"\n\n")
    150 Pp = P.intersection(Hp)
--> 151 Pm = P.intersection(Hm)
    152 if Pp.dimension() < rk:
    153     P=Em*Pm

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/element.pyx:4689, in sage.structure.element.coerce_binop.new_method (build/cythonized/sage/structure/element.c:41124)()
   4687 def new_method(self, other, *args, **kwargs):
   4688     if have_same_parent(self, other):
-> 4689         return method(self, other, *args, **kwargs)
   4690     else:
   4691         a, b = coercion_model.canonical_coercion(self, other)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base5.py:1371, in Polyhedron_base5.intersection(self, other)
   1369 parent = self.parent()
   1370 try:
-> 1371     intersection = parent.element_class(parent, None, [new_ieqs, new_eqns])
   1373     # Force calculation of the vertices.
   1374     _ = intersection.n_vertices()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:68, in Polyhedron_ppl.__init__(self, parent, Vrep, Hrep, ppl_polyhedron, mutable, **kwds)
     66     self._init_from_ppl_polyhedron(ppl_polyhedron, minimize)
     67 else:
---> 68     Polyhedron_mutable.__init__(self, parent, Vrep, Hrep, **kwds)
     69 if not mutable:
     70     self.set_immutable()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/base0.py:179, in Polyhedron_base0.__init__(self, parent, Vrep, Hrep, Vrep_minimal, Hrep_minimal, pref_rep, mutable, **kwds)
    177 elif Hrep is not None:
    178     ieqs, eqns = Hrep
--> 179     self._init_from_Hrepresentation(ieqs, eqns, **kwds)
    180 else:
    181     self._init_empty_polyhedron()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:129, in Polyhedron_ppl._init_from_Hrepresentation(self, ieqs, eqns, minimize, verbose)
    106 def _init_from_Hrepresentation(self, ieqs, eqns, minimize=True, verbose=False):
    107     """
    108     Construct polyhedron from H-representation data.
    109 
   (...)
    127         sage: Polyhedron_ppl._init_from_Hrepresentation(p, [], [])
    128     """
--> 129     cs = self._convert_constraints_to_ppl(ieqs, eqns)
    130     if cs.empty():
    131         ppl_polyhedron = C_Polyhedron(self.ambient_dim(), 'universe')

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:534, in Polyhedron_ppl._convert_constraints_to_ppl(ieqs, eqns)
    532     ieqs = []
    533 for ieq in ieqs:
--> 534     cs.insert(Polyhedron_ppl._convert_constraint_to_ppl(ieq, INEQUALITY))
    535 if eqns is None:
    536     eqns = []

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/geometry/polyhedron/backend_ppl.py:509, in Polyhedron_ppl._convert_constraint_to_ppl(c, typ)
    507 A = dc[1:]
    508 if typ == INEQUALITY:
--> 509     return Linear_Expression(A, b) >= 0
    510 else:
    511     return Linear_Expression(A, b) == 0

File ppl/linear_algebra.pyx:654, in ppl.linear_algebra.Linear_Expression.__init__()

File ppl/linear_algebra.pyx:49, in ppl.linear_algebra.PPL_Coefficient_from_pyobject()

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/rings/integer.pyx:914, in sage.rings.integer.Integer.__richcmp__ (build/cythonized/sage/rings/integer.c:16498)()
    912     c = mpz_cmp_d((<Integer>left).value, d)
    913 else:
--> 914     return coercion_model.richcmp(left, right, op)
    915 
    916 return rich_to_bool_sgn(op, c)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:2021, in sage.structure.coerce.CoercionModel.richcmp (build/cythonized/sage/structure/coerce.c:26173)()
   2019 # Coerce to a common parent
   2020 try:
-> 2021     x, y = self.canonical_coercion(x, y)
   2022 except (TypeError, NotImplementedError):
   2023     pass

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1422, in sage.structure.coerce.CoercionModel.canonical_coercion (build/cythonized/sage/structure/coerce.c:18956)()
   1420             self._record_exception()
   1421 
-> 1422     raise TypeError("no common canonical parent for objects with parents: '%s' and '%s'"%(xp, yp))
   1423 
   1424 cpdef coercion_maps(self, R, S) noexcept:

File src/cysignals/signals.pyx:341, in cysignals.signals.python_check_interrupt()

KeyboardInterrupt: 
sage: A=CartanMatrix(['C',4])
....: c=[2,3,0,1]
....: seqs=[]
....: for u in sortables(A,c[1:]):
....:     seqs=seqs+[u,u+[c[0]]]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),seqs).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [3, 0, 1, 0] 0
2 [3, 0, 1] 0
3 [3, 0] 0
4 [3, 1] 0
5 [3] 0
6 [0, 1, 0] 0
7 [0, 1] 0
8 [0] 0
9 [1] 0
10 [] 0
sage: A=CartanMatrix(['C',4])
....: c=[3,0,1,2]
....: seqs=[]
....: for u in sortables(A,c[1:]):
....:     seqs=seqs+[u,u+[c[0]]]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),seqs).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [0, 1, 2, 0, 1, 0] 0
2 [0, 1, 2, 0, 1] 0
3 [0, 1, 2, 0] 0
4 [0, 1, 2, 1] 0
5 [0, 1, 2] 0
6 [0, 1, 0] 0
7 [0, 1] 0
8 [0, 2] 0
9 [0] 0
10 [1, 2, 1] 0
11 [1, 2] 0
12 [1] 0
13 [2] 0
14 [] 0
sage: A=CartanMatrix(['C',4])
....: c=[1,3,0,2]
....: seqs=[]
....: for u in sortables(A,c[1:]):
....:     seqs=seqs+[u,u+[c[0]]]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),seqs).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [3, 0, 2, 3, 2] 0
2 [3, 0, 2, 3] 0
3 [3, 0, 2] 0
4 [3, 0] 0
5 [3, 2, 3, 2] 0
6 [3, 2, 3] 0
7 [3, 2] 0
8 [3] 0
9 [0, 2] 0
10 [0] 0
11 [2] 0
12 [] 0
### reloading attached file domination4.py modified at 00:55:38 ###
sage: A=CartanMatrix(['C',4])
....: c=[1,3,0,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),K(c,v)).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
....: 
1 [3, 0, 2, 3, 2] 0
2 [3, 0, 2, 3] 0
3 [3, 0, 2] 0
4 [3, 0] 0
5 [3, 2, 3, 2] 0
6 [3, 2, 3] 0
7 [3, 2] 0
8 [3] 0
9 [0, 2] 0
10 [0] 0
11 [2] 0
12 [] 0
sage: A=CartanMatrix(['C',4])
....: c=[1,3,0,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),K(c,v)).dimension()
....:     print(num,v,d,"\n",K(c,v),"\n\n")
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [3, 0, 2, 3, 2] 0 
 [[3, 0, 2, 3, 2], [3, 0, 2, 3], [3, 0, 2, 3, 2, 3], [3, 0, 2], [3, 0, 2, 3, 2, 0], [3, 0, 2, 3, 0], [3, 0, 2, 3, 2, 3, 0], [3, 0, 2, 0], [3, 0, 2, 3, 2, 1], [3, 0, 2, 3, 1], [3, 0, 2, 3, 2, 3, 1], [3, 0, 2, 1], [3, 0, 2, 3, 2, 0, 1], [3, 0, 2, 3, 0, 1], [3, 0, 2, 3, 2, 3, 0, 1], [3, 0, 2, 0, 1]] 


2 [3, 0, 2, 3] 0 
 [[3, 0, 2, 3], [3, 0, 2], [3, 0, 2, 3, 2], [3, 0], [3, 0, 2, 3, 0], [3, 0, 2, 0], [3, 0, 2, 3, 2, 0], [3], [3, 0, 2, 3, 1], [3, 0, 2, 1], [3, 0, 2, 3, 2, 1], [3, 0, 1], [3, 0, 2, 3, 0, 1], [3, 0, 2, 0, 1], [3, 0, 2, 3, 2, 0, 1], [3, 1]] 


3 [3, 0, 2] 0 
 [[3, 0, 2], [3, 0], [3, 0, 2, 0], [3], [3, 0, 2, 3], [3, 0, 3], [3, 0, 2, 0, 3], [], [3, 0, 2, 1], [3, 0, 1], [3, 0, 2, 0, 1], [3, 1], [3, 0, 2, 3, 1], [3, 0, 3, 1], [3, 0, 2, 0, 3, 1], [1]] 


4 [3, 0] 0 
 [[3, 0], [3], [3, 0, 3], [], [3, 0, 2], [3, 2], [3, 0, 3, 2], [2], [3, 0, 1], [3, 1], [3, 0, 3, 1], [1], [3, 0, 2, 1], [3, 2, 1], [3, 0, 3, 2, 1], [2, 1]] 


5 [3, 2, 3, 2] 0 
 [[3, 2, 3, 2], [3, 2, 3], [3, 2, 3, 2, 3], [3, 2], [3, 2, 3, 2, 0], [3, 2, 3, 0], [3, 2, 3, 2, 3, 0], [3, 2, 0], [3, 2, 3, 2, 1], [3, 2, 3, 1], [3, 2, 3, 2, 3, 1], [3, 2, 1], [3, 2, 3, 2, 0, 1], [3, 2, 3, 0, 1], [3, 2, 3, 2, 3, 0, 1], [3, 2, 0, 1]] 


6 [3, 2, 3] 0 
 [[3, 2, 3], [3, 2], [3, 2, 3, 2], [3], [3, 2, 3, 0], [3, 2, 0], [3, 2, 3, 2, 0], [3, 0], [3, 2, 3, 1], [3, 2, 1], [3, 2, 3, 2, 1], [3, 1], [3, 2, 3, 0, 1], [3, 2, 0, 1], [3, 2, 3, 2, 0, 1], [3, 0, 1]] 


7 [3, 2] 0 
 [[3, 2], [3], [3, 2, 3], [], [3, 2, 0], [3, 0], [3, 2, 3, 0], [0], [3, 2, 1], [3, 1], [3, 2, 3, 1], [1], [3, 2, 0, 1], [3, 0, 1], [3, 2, 3, 0, 1], [0, 1]] 


8 [3] 0 
 [[3], [], [3, 2], [2], [3, 0], [0], [3, 2, 0], [2, 0], [3, 1], [1], [3, 2, 1], [2, 1], [3, 0, 1], [0, 1], [3, 2, 0, 1], [2, 0, 1]] 


9 [0, 2] 0 
 [[0, 2], [0], [0, 2, 0], [], [0, 2, 3], [0, 3], [0, 2, 0, 3], [3], [0, 2, 1], [0, 1], [0, 2, 0, 1], [1], [0, 2, 3, 1], [0, 3, 1], [0, 2, 0, 3, 1], [3, 1]] 


10 [0] 0 
 [[0], [], [0, 2], [2], [0, 3], [3], [0, 2, 3], [2, 3], [0, 1], [1], [0, 2, 1], [2, 1], [0, 3, 1], [3, 1], [0, 2, 3, 1], [2, 3, 1]] 


11 [2] 0 
 [[2], [], [2, 0], [0], [2, 3], [3], [2, 0, 3], [0, 3], [2, 1], [1], [2, 0, 1], [0, 1], [2, 3, 1], [3, 1], [2, 0, 3, 1], [0, 3, 1]] 


12 [] 0 
 [[], [2], [0], [2, 0], [3], [2, 3], [0, 3], [2, 0, 3], [1], [2, 1], [0, 1], [2, 0, 1], [3, 1], [2, 3, 1], [0, 3, 1], [2, 0, 3, 1]] 


sage: A=CartanMatrix(['C',4])
....: c=[1,3,0,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),K(c,v)).dimension()
....:     print(num,v,len(K(c,v)),d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [3, 0, 2, 3, 2] 16 0
2 [3, 0, 2, 3] 16 0
3 [3, 0, 2] 16 0
4 [3, 0] 16 0
5 [3, 2, 3, 2] 16 0
6 [3, 2, 3] 16 0
7 [3, 2] 16 0
8 [3] 16 0
9 [0, 2] 16 0
10 [0] 16 0
11 [2] 16 0
12 [] 16 0
sage: A=CartanMatrix(['C',5])
....: c=[1,3,5,0,2]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),K(c,v)).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
....: 
---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
Cell In [112], line 4
      2 c=[Integer(1),Integer(3),Integer(5),Integer(0),Integer(2)]
      3 num=Integer(0)
----> 4 for v in sortables(A,c[Integer(1):]):
      5     num+=Integer(1)
      6     d=p_lambda_int(B(A,c),lam(A,v),K(c,v)).dimension()

File ~/git/affine_dominance/software/domination4.py:272, in sortables(A, c)
    271 def sortables(A,c):
--> 272     yield from sortables_remaining(A,c,[],vector([1]*A.nrows()))

File ~/git/affine_dominance/software/domination4.py:279, in sortables_remaining(A, c, sort, vec)
    277 else:
    278     if vec[c[0]]>0:
--> 279         yield from sortables_remaining(A,c[1:]+[c[0]],sort+[c[0]],reflect(A,vec,c[0]))
    280     yield from sortables_remaining(A,c[1:],sort,vec)

File ~/git/affine_dominance/software/domination4.py:278, in sortables_remaining(A, c, sort, vec)
    276     yield sort
    277 else:
--> 278     if vec[c[0]]>0:
    279         yield from sortables_remaining(A,c[1:]+[c[0]],sort+[c[0]],reflect(A,vec,c[0]))
    280     yield from sortables_remaining(A,c[1:],sort,vec)

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/modules/free_module_element.pyx:1842, in sage.modules.free_module_element.FreeModuleElement.__getitem__ (build/cythonized/sage/modules/free_module_element.c:19571)()
   1840     n += d
   1841 if n < 0 or n >= d:
-> 1842     raise IndexError("vector index out of range")
   1843 return self.get_unsafe(n)
   1844 

IndexError: vector index out of range
sage: A=CartanMatrix(['C',5])
....: c=[1,3,0,2,4]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),K(c,v)).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break

1 [3, 0, 2, 4, 3, 2, 4, 3, 2, 4] 0
2 [3, 0, 2, 4, 3, 2, 4, 3, 2] 0
3 [3, 0, 2, 4, 3, 2, 4, 3, 4] 0
4 [3, 0, 2, 4, 3, 2, 4, 3] 0
5 [3, 0, 2, 4, 3, 2, 4] 0
6 [3, 0, 2, 4, 3, 2] 0
7 [3, 0, 2, 4, 3, 4, 3] 0
8 [3, 0, 2, 4, 3, 4] 0
9 [3, 0, 2, 4, 3] 0
10 [3, 0, 2, 4] 0
11 [3, 0, 2, 3] 0
12 [3, 0, 2] 0
13 [3, 0, 4, 3, 4] 0
14 [3, 0, 4, 3] 0
15 [3, 0, 4] 0
16 [3, 0] 0
17 [3, 2, 4, 3, 2, 4, 3, 2, 4] 0
18 [3, 2, 4, 3, 2, 4, 3, 2] 0
19 [3, 2, 4, 3, 2, 4, 3, 4] 0
20 [3, 2, 4, 3, 2, 4, 3] 0
21 [3, 2, 4, 3, 2, 4] 0
22 [3, 2, 4, 3, 2] 0
23 [3, 2, 4, 3, 4, 3] 0
24 [3, 2, 4, 3, 4] 0
25 [3, 2, 4, 3] 0
26 [3, 2, 4] 0
27 [3, 2, 3] 0
28 [3, 2] 0
29 [3, 4, 3, 4] 0
30 [3, 4, 3] 0
31 [3, 4] 0
32 [3] 0
33 [0, 2, 4] 0
34 [0, 2] 0
35 [0, 4] 0
36 [0] 0
37 [2, 4] 0
38 [2] 0
39 [4] 0
40 [] 0
sage: 
sage: A=CartanMatrix(['C',6])
....: c=[1,3,0,2,4,5]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),K(c,v)).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
....: 
1 [3, 0, 2, 4, 5, 3, 2, 4, 5, 3, 2, 4, 5, 3, 2, 4, 5] 0
2 [3, 0, 2, 4, 5, 3, 2, 4, 5, 3, 2, 4, 5, 3, 2, 4] 0
3 [3, 0, 2, 4, 5, 3, 2, 4, 5, 3, 2, 4, 5, 3, 2] 0
4 [3, 0, 2, 4, 5, 3, 2, 4, 5, 3, 2, 4, 5, 3, 4, 5] 0
5 [3, 0, 2, 4, 5, 3, 2, 4, 5, 3, 2, 4, 5, 3, 4] 0
6 [3, 0, 2, 4, 5, 3, 2, 4, 5, 3, 2, 4, 5, 3] 0
7 [3, 0, 2, 4, 5, 3, 2, 4, 5, 3, 2, 4, 5] 0
8 [3, 0, 2, 4, 5, 3, 2, 4, 5, 3, 2, 4, 3, 2] 0
9 [3, 0, 2, 4, 5, 3, 2, 4, 5, 3, 2, 4, 3] 0
10 [3, 0, 2, 4, 5, 3, 2, 4, 5, 3, 2, 4] 0
11 [3, 0, 2, 4, 5, 3, 2, 4, 5, 3, 2] 0
12 [3, 0, 2, 4, 5, 3, 2, 4, 5, 3, 4, 5, 3] 0
13 [3, 0, 2, 4, 5, 3, 2, 4, 5, 3, 4, 5] 0
14 [3, 0, 2, 4, 5, 3, 2, 4, 5, 3, 4, 3] 0
15 [3, 0, 2, 4, 5, 3, 2, 4, 5, 3, 4] 0
16 [3, 0, 2, 4, 5, 3, 2, 4, 5, 3] 0
17 [3, 0, 2, 4, 5, 3, 2, 4, 5, 4] 0
18 [3, 0, 2, 4, 5, 3, 2, 4, 5] 0
19 [3, 0, 2, 4, 5, 3, 2, 4, 3, 2] 0
20 [3, 0, 2, 4, 5, 3, 2, 4, 3] 0
21 [3, 0, 2, 4, 5, 3, 2, 4] 0
22 [3, 0, 2, 4, 5, 3, 2] 0
23 [3, 0, 2, 4, 5, 3, 4, 5, 3, 4, 5, 3] 0
24 [3, 0, 2, 4, 5, 3, 4, 5, 3, 4, 5] 0
25 [3, 0, 2, 4, 5, 3, 4, 5, 3, 4, 3] 0
26 [3, 0, 2, 4, 5, 3, 4, 5, 3, 4] 0
27 [3, 0, 2, 4, 5, 3, 4, 5, 3] 0
28 [3, 0, 2, 4, 5, 3, 4, 5, 4] 0
29 [3, 0, 2, 4, 5, 3, 4, 5] 0
30 [3, 0, 2, 4, 5, 3, 4, 3] 0
31 [3, 0, 2, 4, 5, 3, 4] 0
32 [3, 0, 2, 4, 5, 3] 0
33 [3, 0, 2, 4, 5, 4, 5] 0
34 [3, 0, 2, 4, 5, 4] 0
35 [3, 0, 2, 4, 5] 0
36 [3, 0, 2, 4, 3, 2, 4] 0
37 [3, 0, 2, 4, 3, 2] 0
38 [3, 0, 2, 4, 3, 4] 0
39 [3, 0, 2, 4, 3] 0
40 [3, 0, 2, 4] 0
41 [3, 0, 2, 5, 3] 0
42 [3, 0, 2, 5] 0
43 [3, 0, 2, 3] 0
44 [3, 0, 2] 0
45 [3, 0, 4, 5, 3, 4, 5, 3, 4, 5] 0
46 [3, 0, 4, 5, 3, 4, 5, 3, 4] 0
47 [3, 0, 4, 5, 3, 4, 5, 3] 0
48 [3, 0, 4, 5, 3, 4, 5] 0
49 [3, 0, 4, 5, 3, 4, 3] 0
50 [3, 0, 4, 5, 3, 4] 0
51 [3, 0, 4, 5, 3] 0
52 [3, 0, 4, 5, 4, 5] 0
53 [3, 0, 4, 5, 4] 0
54 [3, 0, 4, 5] 0
55 [3, 0, 4, 3] 0
56 [3, 0, 4] 0
57 [3, 0, 5] 0
58 [3, 0] 0
59 [3, 2, 4, 5, 3, 2, 4, 5, 3, 2, 4, 5, 3, 2, 4, 5] 0
60 [3, 2, 4, 5, 3, 2, 4, 5, 3, 2, 4, 5, 3, 2, 4] 0
61 [3, 2, 4, 5, 3, 2, 4, 5, 3, 2, 4, 5, 3, 2] 0
62 [3, 2, 4, 5, 3, 2, 4, 5, 3, 2, 4, 5, 3, 4, 5] 0
63 [3, 2, 4, 5, 3, 2, 4, 5, 3, 2, 4, 5, 3, 4] 0
64 [3, 2, 4, 5, 3, 2, 4, 5, 3, 2, 4, 5, 3] 0
65 [3, 2, 4, 5, 3, 2, 4, 5, 3, 2, 4, 5] 0
66 [3, 2, 4, 5, 3, 2, 4, 5, 3, 2, 4, 3, 2] 0
67 [3, 2, 4, 5, 3, 2, 4, 5, 3, 2, 4, 3] 0
68 [3, 2, 4, 5, 3, 2, 4, 5, 3, 2, 4] 0
69 [3, 2, 4, 5, 3, 2, 4, 5, 3, 2] 0
70 [3, 2, 4, 5, 3, 2, 4, 5, 3, 4, 5, 3] 0
71 [3, 2, 4, 5, 3, 2, 4, 5, 3, 4, 5] 0
72 [3, 2, 4, 5, 3, 2, 4, 5, 3, 4, 3] 0
73 [3, 2, 4, 5, 3, 2, 4, 5, 3, 4] 0
74 [3, 2, 4, 5, 3, 2, 4, 5, 3] 0
75 [3, 2, 4, 5, 3, 2, 4, 5, 4] 0
76 [3, 2, 4, 5, 3, 2, 4, 5] 0
77 [3, 2, 4, 5, 3, 2, 4, 3, 2] 0
78 [3, 2, 4, 5, 3, 2, 4, 3] 0
79 [3, 2, 4, 5, 3, 2, 4] 0
80 [3, 2, 4, 5, 3, 2] 0
81 [3, 2, 4, 5, 3, 4, 5, 3, 4, 5, 3] 0
82 [3, 2, 4, 5, 3, 4, 5, 3, 4, 5] 0
83 [3, 2, 4, 5, 3, 4, 5, 3, 4, 3] 0
84 [3, 2, 4, 5, 3, 4, 5, 3, 4] 0
85 [3, 2, 4, 5, 3, 4, 5, 3] 0
86 [3, 2, 4, 5, 3, 4, 5, 4] 0
87 [3, 2, 4, 5, 3, 4, 5] 0
88 [3, 2, 4, 5, 3, 4, 3] 0
89 [3, 2, 4, 5, 3, 4] 0
90 [3, 2, 4, 5, 3] 0
91 [3, 2, 4, 5, 4, 5] 0
92 [3, 2, 4, 5, 4] 0
93 [3, 2, 4, 5] 0
94 [3, 2, 4, 3, 2, 4] 0
95 [3, 2, 4, 3, 2] 0
96 [3, 2, 4, 3, 4] 0
97 [3, 2, 4, 3] 0
98 [3, 2, 4] 0
99 [3, 2, 5, 3] 0
100 [3, 2, 5] 0
101 [3, 2, 3] 0
102 [3, 2] 0
103 [3, 4, 5, 3, 4, 5, 3, 4, 5] 0
104 [3, 4, 5, 3, 4, 5, 3, 4] 0
105 [3, 4, 5, 3, 4, 5, 3] 0
106 [3, 4, 5, 3, 4, 5] 0
107 [3, 4, 5, 3, 4, 3] 0
108 [3, 4, 5, 3, 4] 0
109 [3, 4, 5, 3] 0
110 [3, 4, 5, 4, 5] 0
111 [3, 4, 5, 4] 0
112 [3, 4, 5] 0
113 [3, 4, 3] 0
114 [3, 4] 0
115 [3, 5] 0
116 [3] 0
117 [0, 2, 4, 5, 4, 5] 0
118 [0, 2, 4, 5, 4] 0
119 [0, 2, 4, 5] 0
120 [0, 2, 4] 0
121 [0, 2, 5] 0
122 [0, 2] 0
123 [0, 4, 5, 4, 5] 0
124 [0, 4, 5, 4] 0
125 [0, 4, 5] 0
126 [0, 4] 0
127 [0, 5] 0
128 [0] 0
129 [2, 4, 5, 4, 5] 0
130 [2, 4, 5, 4] 0
131 [2, 4, 5] 0
132 [2, 4] 0
133 [2, 5] 0
134 [2] 0
135 [4, 5, 4, 5] 0
136 [4, 5, 4] 0
137 [4, 5] 0
138 [4] 0
139 [5] 0
140 [] 0
sage: A=CartanMatrix(['C',6])
....: c=[0,1,2,3,4,5]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),K(c,v)).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5] 0
2 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4] 0
3 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3] 0
4 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2] 0
5 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1] 0
6 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5] 0
7 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] 0
8 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] 0
9 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1] 0
10 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4] 0
11 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2] 0
12 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1] 0
13 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3] 0
14 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 1] 0
15 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2] 0
16 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1] 0
17 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5] 0
18 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4] 0
19 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3] 0
20 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2] 0
21 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5] 0
22 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
23 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1] 0
24 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] 0
25 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1] 0
26 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] 0
27 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1] 0
28 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3] 0
29 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2] 0
30 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4] 0
31 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1] 0
32 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2] 0
33 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1] 0
34 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 2] 0
35 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3] 0
36 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 1] 0
37 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2] 0
38 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 3, 4, 5] 0
39 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 3, 4] 0
40 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 3] 0
41 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1] 0
42 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5] 0
43 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4] 0
44 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3] 0
45 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2] 0
46 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5] 0
47 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 2, 3] 0
48 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 2] 0
49 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4] 0
50 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 2] 0
51 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3] 0
52 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2] 0
53 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 3, 4, 5] 0
54 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 3, 4] 0
55 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 3] 0
56 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5] 0
57 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
58 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
59 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1] 0
60 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 2] 0
61 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] 0
62 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1] 0
63 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] 0
64 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 3] 0
65 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1] 0
66 [1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3, 2] 0
67 [1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3] 0
68 [1, 2, 3, 4, 5, 1, 2, 3, 4, 2] 0
69 [1, 2, 3, 4, 5, 1, 2, 3, 4, 3] 0
70 [1, 2, 3, 4, 5, 1, 2, 3, 4] 0
71 [1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1] 0
72 [1, 2, 3, 4, 5, 1, 2, 3, 1, 2] 0
73 [1, 2, 3, 4, 5, 1, 2, 3, 1] 0
74 [1, 2, 3, 4, 5, 1, 2, 3, 2] 0
75 [1, 2, 3, 4, 5, 1, 2, 3] 0
76 [1, 2, 3, 4, 5, 1, 2, 4, 5, 1] 0
77 [1, 2, 3, 4, 5, 1, 2, 4, 5] 0
78 [1, 2, 3, 4, 5, 1, 2, 4, 1] 0
79 [1, 2, 3, 4, 5, 1, 2, 4] 0
80 [1, 2, 3, 4, 5, 1, 2, 1] 0
81 [1, 2, 3, 4, 5, 1, 2] 0
82 [1, 2, 3, 4, 5, 1, 3, 4, 5, 3, 4, 5] 0
83 [1, 2, 3, 4, 5, 1, 3, 4, 5, 3, 4] 0
84 [1, 2, 3, 4, 5, 1, 3, 4, 5, 3] 0
85 [1, 2, 3, 4, 5, 1, 3, 4, 5] 0
86 [1, 2, 3, 4, 5, 1, 3, 4, 3] 0
87 [1, 2, 3, 4, 5, 1, 3, 4] 0
88 [1, 2, 3, 4, 5, 1, 3] 0
89 [1, 2, 3, 4, 5, 1, 4, 5] 0
90 [1, 2, 3, 4, 5, 1, 4] 0
91 [1, 2, 3, 4, 5, 1] 0
92 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5] 0
93 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4] 0
94 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3] 0
95 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2] 0
96 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5] 0
97 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 2, 3] 0
98 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 2] 0
99 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4] 0
100 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 2] 0
101 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3] 0
102 [1, 2, 3, 4, 5, 2, 3, 4, 5, 2] 0
103 [1, 2, 3, 4, 5, 2, 3, 4, 5, 3, 4, 5] 0
104 [1, 2, 3, 4, 5, 2, 3, 4, 5, 3, 4] 0
105 [1, 2, 3, 4, 5, 2, 3, 4, 5, 3] 0
106 [1, 2, 3, 4, 5, 2, 3, 4, 5] 0
107 [1, 2, 3, 4, 5, 2, 3, 4, 2, 3, 2] 0
108 [1, 2, 3, 4, 5, 2, 3, 4, 2, 3] 0
109 [1, 2, 3, 4, 5, 2, 3, 4, 2] 0
110 [1, 2, 3, 4, 5, 2, 3, 4, 3] 0
111 [1, 2, 3, 4, 5, 2, 3, 4] 0
112 [1, 2, 3, 4, 5, 2, 3, 2] 0
113 [1, 2, 3, 4, 5, 2, 3] 0
114 [1, 2, 3, 4, 5, 2, 4, 5] 0
115 [1, 2, 3, 4, 5, 2, 4] 0
116 [1, 2, 3, 4, 5, 2] 0
117 [1, 2, 3, 4, 5, 3, 4, 5, 3, 4, 5] 0
118 [1, 2, 3, 4, 5, 3, 4, 5, 3, 4] 0
119 [1, 2, 3, 4, 5, 3, 4, 5, 3] 0
120 [1, 2, 3, 4, 5, 3, 4, 5] 0
121 [1, 2, 3, 4, 5, 3, 4, 3] 0
122 [1, 2, 3, 4, 5, 3, 4] 0
123 [1, 2, 3, 4, 5, 3] 0
124 [1, 2, 3, 4, 5, 4, 5] 0
125 [1, 2, 3, 4, 5, 4] 0
126 [1, 2, 3, 4, 5] 0
127 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
128 [1, 2, 3, 4, 1, 2, 3, 1, 2] 0
129 [1, 2, 3, 4, 1, 2, 3, 1] 0
130 [1, 2, 3, 4, 1, 2, 3, 2] 0
131 [1, 2, 3, 4, 1, 2, 3] 0
132 [1, 2, 3, 4, 1, 2, 1] 0
133 [1, 2, 3, 4, 1, 2] 0
134 [1, 2, 3, 4, 1, 3] 0
135 [1, 2, 3, 4, 1] 0
136 [1, 2, 3, 4, 2, 3, 2] 0
137 [1, 2, 3, 4, 2, 3] 0
138 [1, 2, 3, 4, 2] 0
139 [1, 2, 3, 4, 3] 0
140 [1, 2, 3, 4] 0
141 [1, 2, 3, 5, 1, 2, 1] 0
142 [1, 2, 3, 5, 1, 2] 0
143 [1, 2, 3, 5, 1] 0
144 [1, 2, 3, 5, 2] 0
145 [1, 2, 3, 5] 0
146 [1, 2, 3, 1, 2, 1] 0
147 [1, 2, 3, 1, 2] 0
148 [1, 2, 3, 1] 0
149 [1, 2, 3, 2] 0
150 [1, 2, 3] 0
151 [1, 2, 4, 5, 1, 4, 5] 0
152 [1, 2, 4, 5, 1, 4] 0
153 [1, 2, 4, 5, 1] 0
154 [1, 2, 4, 5, 4, 5] 0
155 [1, 2, 4, 5, 4] 0
156 [1, 2, 4, 5] 0
157 [1, 2, 4, 1] 0
158 [1, 2, 4] 0
159 [1, 2, 5, 1] 0
160 [1, 2, 5] 0
161 [1, 2, 1] 0
162 [1, 2] 0
163 [1, 3, 4, 5, 3, 4, 5, 3, 4, 5] 0
164 [1, 3, 4, 5, 3, 4, 5, 3, 4] 0
165 [1, 3, 4, 5, 3, 4, 5, 3] 0
166 [1, 3, 4, 5, 3, 4, 5] 0
167 [1, 3, 4, 5, 3, 4, 3] 0
168 [1, 3, 4, 5, 3, 4] 0
169 [1, 3, 4, 5, 3] 0
170 [1, 3, 4, 5, 4, 5] 0
171 [1, 3, 4, 5, 4] 0
172 [1, 3, 4, 5] 0
173 [1, 3, 4, 3] 0
174 [1, 3, 4] 0
175 [1, 3, 5] 0
176 [1, 3] 0
177 [1, 4, 5, 4, 5] 0
178 [1, 4, 5, 4] 0
179 [1, 4, 5] 0
180 [1, 4] 0
181 [1, 5] 0
182 [1] 0
183 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5] 0
184 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4] 0
185 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3] 0
186 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2] 0
187 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5] 0
188 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 2, 3] 0
189 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 2] 0
190 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4] 0
191 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 2] 0
192 [2, 3, 4, 5, 2, 3, 4, 5, 2, 3] 0
193 [2, 3, 4, 5, 2, 3, 4, 5, 2] 0
194 [2, 3, 4, 5, 2, 3, 4, 5, 3, 4, 5] 0
195 [2, 3, 4, 5, 2, 3, 4, 5, 3, 4] 0
196 [2, 3, 4, 5, 2, 3, 4, 5, 3] 0
197 [2, 3, 4, 5, 2, 3, 4, 5] 0
198 [2, 3, 4, 5, 2, 3, 4, 2, 3, 2] 0
199 [2, 3, 4, 5, 2, 3, 4, 2, 3] 0
200 [2, 3, 4, 5, 2, 3, 4, 2] 0
201 [2, 3, 4, 5, 2, 3, 4, 3] 0
202 [2, 3, 4, 5, 2, 3, 4] 0
203 [2, 3, 4, 5, 2, 3, 2] 0
204 [2, 3, 4, 5, 2, 3] 0
205 [2, 3, 4, 5, 2, 4, 5] 0
206 [2, 3, 4, 5, 2, 4] 0
207 [2, 3, 4, 5, 2] 0
208 [2, 3, 4, 5, 3, 4, 5, 3, 4, 5] 0
209 [2, 3, 4, 5, 3, 4, 5, 3, 4] 0
210 [2, 3, 4, 5, 3, 4, 5, 3] 0
211 [2, 3, 4, 5, 3, 4, 5] 0
212 [2, 3, 4, 5, 3, 4, 3] 0
213 [2, 3, 4, 5, 3, 4] 0
214 [2, 3, 4, 5, 3] 0
215 [2, 3, 4, 5, 4, 5] 0
216 [2, 3, 4, 5, 4] 0
217 [2, 3, 4, 5] 0
218 [2, 3, 4, 2, 3, 2] 0
219 [2, 3, 4, 2, 3] 0
220 [2, 3, 4, 2] 0
221 [2, 3, 4, 3] 0
222 [2, 3, 4] 0
223 [2, 3, 5, 2] 0
224 [2, 3, 5] 0
225 [2, 3, 2] 0
226 [2, 3] 0
227 [2, 4, 5, 4, 5] 0
228 [2, 4, 5, 4] 0
229 [2, 4, 5] 0
230 [2, 4] 0
231 [2, 5] 0
232 [2] 0
233 [3, 4, 5, 3, 4, 5, 3, 4, 5] 0
234 [3, 4, 5, 3, 4, 5, 3, 4] 0
235 [3, 4, 5, 3, 4, 5, 3] 0
236 [3, 4, 5, 3, 4, 5] 0
237 [3, 4, 5, 3, 4, 3] 0
238 [3, 4, 5, 3, 4] 0
239 [3, 4, 5, 3] 0
240 [3, 4, 5, 4, 5] 0
241 [3, 4, 5, 4] 0
242 [3, 4, 5] 0
243 [3, 4, 3] 0
244 [3, 4] 0
245 [3, 5] 0
246 [3] 0
247 [4, 5, 4, 5] 0
248 [4, 5, 4] 0
249 [4, 5] 0
250 [4] 0
251 [5] 0
252 [] 0
sage: A=CartanMatrix(['C',7])
....: c=[0,1,2,3,4,5,6]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),K(c,v)).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
1 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6] 0
2 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5] 0
3 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4] 0
4 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3] 0
5 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2] 0
6 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1] 0
7 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6] 0
8 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4] 0
9 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3] 0
10 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2] 0
11 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1] 0
12 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5] 0
13 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3] 0
14 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2] 0
15 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1] 0
16 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4] 0
17 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 1, 2] 0
18 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 1] 0
19 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3] 0
20 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 1] 0
21 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2] 0
22 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1] 0
23 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6] 0
24 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5] 0
25 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4] 0
26 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3] 0
27 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2] 0
28 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6] 0
29 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] 0
30 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] 0
31 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1] 0
32 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4] 0
33 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2] 0
34 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1] 0
35 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3] 0
36 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 1] 0
37 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2] 0
38 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1] 0
39 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 4] 0
40 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3] 0
41 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2] 0
42 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5] 0
43 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
44 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 1] 0
45 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3] 0
46 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 1] 0
47 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2] 0
48 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1] 0
49 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 2, 3] 0
50 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 2] 0
51 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4] 0
52 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 1, 2, 1] 0
53 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 1, 2] 0
54 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 1] 0
55 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 2] 0
56 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3] 0
57 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 1] 0
58 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2] 0
59 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6] 0
60 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5] 0
61 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3, 4] 0
62 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3] 0
63 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1] 0
64 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6] 0
65 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5] 0
66 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4] 0
67 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3] 0
68 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2] 0
69 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6] 0
70 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4] 0
71 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3] 0
72 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2] 0
73 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5] 0
74 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3] 0
75 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 2] 0
76 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4] 0
77 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 2] 0
78 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3] 0
79 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2] 0
80 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3, 4, 5, 6] 0
81 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3, 4, 5] 0
82 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3, 4] 0
83 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3] 0
84 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6] 0
85 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
86 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1] 0
87 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] 0
88 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1] 0
89 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] 0
90 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1] 0
91 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3] 0
92 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2] 0
93 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4] 0
94 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1] 0
95 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2] 0
96 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1] 0
97 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 2] 0
98 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3] 0
99 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 1] 0
100 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2] 0
101 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 3, 4] 0
102 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 3] 0
103 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1] 0
104 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 4, 2, 3] 0
105 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 4, 2] 0
106 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 4] 0
107 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 2] 0
108 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3] 0
109 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2] 0
110 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 3, 4] 0
111 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 3] 0
112 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5] 0
113 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
114 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
115 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 1] 0
116 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 2] 0
117 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3] 0
118 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 1] 0
119 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2] 0
120 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 3] 0
121 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1] 0
122 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 2, 3, 2] 0
123 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 2, 3] 0
124 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 2] 0
125 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 3] 0
126 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4] 0
127 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 1, 2, 1] 0
128 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 1, 2] 0
129 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 1] 0
130 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 2] 0
131 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3] 0
132 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 4, 5, 6, 1] 0
133 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 4, 5, 6] 0
134 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 4, 5, 1] 0
135 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 4, 5] 0
136 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 4, 1] 0
137 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 4] 0
138 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 1] 0
139 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2] 0
140 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 3, 4, 5, 6] 0
141 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 3, 4, 5] 0
142 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 3, 4] 0
143 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 3] 0
144 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6] 0
145 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 3, 4] 0
146 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 3] 0
147 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3, 4, 5] 0
148 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3, 4, 3] 0
149 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3, 4] 0
150 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 3] 0
151 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 4, 5, 6] 0
152 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 4, 5] 0
153 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 4] 0
154 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1] 0
155 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6] 0
156 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5] 0
157 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4] 0
158 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3] 0
159 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2] 0
160 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6] 0
161 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4] 0
162 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3] 0
163 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2] 0
164 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5] 0
165 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3] 0
166 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 2] 0
167 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4] 0
168 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 2] 0
169 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3] 0
170 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2] 0
171 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5, 6] 0
172 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5] 0
173 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4] 0
174 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3] 0
175 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6] 0
176 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2, 3] 0
177 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2] 0
178 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4] 0
179 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 2] 0
180 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3] 0
181 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2] 0
182 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 3, 4] 0
183 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 3] 0
184 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5] 0
185 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3, 2] 0
186 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3] 0
187 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 2] 0
188 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 3] 0
189 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4] 0
190 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 2] 0
191 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3] 0
192 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 4, 5, 6] 0
193 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 4, 5] 0
194 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 4] 0
195 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2] 0
196 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6] 0
197 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5] 0
198 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4] 0
199 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3] 0
200 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3, 4, 5, 6] 0
201 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3, 4, 5, 3, 4] 0
202 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3, 4, 5, 3] 0
203 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3, 4, 5] 0
204 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3, 4, 3] 0
205 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3, 4] 0
206 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 3] 0
207 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 4, 5, 6] 0
208 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 4, 5] 0
209 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 4] 0
210 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6] 0
211 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
212 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
213 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1] 0
214 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 2] 0
215 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] 0
216 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1] 0
217 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] 0
218 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 3] 0
219 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1] 0
220 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3, 2] 0
221 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3] 0
222 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 2] 0
223 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 3] 0
224 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4] 0
225 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1] 0
226 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2] 0
227 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 1] 0
228 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 2] 0
229 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3] 0
230 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 4, 1] 0
231 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 4] 0
232 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 1] 0
233 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2] 0
234 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 3, 4, 3] 0
235 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 3, 4] 0
236 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 3] 0
237 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 4] 0
238 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1] 0
239 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 4, 2, 3, 2] 0
240 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 4, 2, 3] 0
241 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 4, 2] 0
242 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 4, 3] 0
243 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 4] 0
244 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 2] 0
245 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3] 0
246 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 4] 0
247 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2] 0
248 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 3, 4, 3] 0
249 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 3, 4] 0
250 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 3] 0
251 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 4] 0
252 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5] 0
253 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
254 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
255 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 1] 0
256 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 2] 0
257 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3] 0
258 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 1] 0
259 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2] 0
260 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 3] 0
261 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1] 0
262 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 2, 3, 2] 0
263 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 2, 3] 0
264 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 2] 0
265 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 3] 0
266 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4] 0
267 [1, 2, 3, 4, 5, 6, 1, 2, 3, 5, 6, 1, 2, 1] 0
268 [1, 2, 3, 4, 5, 6, 1, 2, 3, 5, 6, 1, 2] 0
269 [1, 2, 3, 4, 5, 6, 1, 2, 3, 5, 6, 1] 0
270 [1, 2, 3, 4, 5, 6, 1, 2, 3, 5, 6, 2] 0
271 [1, 2, 3, 4, 5, 6, 1, 2, 3, 5, 6] 0
272 [1, 2, 3, 4, 5, 6, 1, 2, 3, 5, 1, 2, 1] 0
273 [1, 2, 3, 4, 5, 6, 1, 2, 3, 5, 1, 2] 0
274 [1, 2, 3, 4, 5, 6, 1, 2, 3, 5, 1] 0
275 [1, 2, 3, 4, 5, 6, 1, 2, 3, 5, 2] 0
276 [1, 2, 3, 4, 5, 6, 1, 2, 3, 5] 0
277 [1, 2, 3, 4, 5, 6, 1, 2, 3, 1, 2, 1] 0
278 [1, 2, 3, 4, 5, 6, 1, 2, 3, 1, 2] 0
279 [1, 2, 3, 4, 5, 6, 1, 2, 3, 1] 0
280 [1, 2, 3, 4, 5, 6, 1, 2, 3, 2] 0
281 [1, 2, 3, 4, 5, 6, 1, 2, 3] 0
282 [1, 2, 3, 4, 5, 6, 1, 2, 4, 5, 6, 1, 4, 5, 6] 0
283 [1, 2, 3, 4, 5, 6, 1, 2, 4, 5, 6, 1, 4, 5] 0
284 [1, 2, 3, 4, 5, 6, 1, 2, 4, 5, 6, 1, 4] 0
285 [1, 2, 3, 4, 5, 6, 1, 2, 4, 5, 6, 1] 0
286 [1, 2, 3, 4, 5, 6, 1, 2, 4, 5, 6, 4, 5, 6] 0
287 [1, 2, 3, 4, 5, 6, 1, 2, 4, 5, 6, 4, 5] 0
288 [1, 2, 3, 4, 5, 6, 1, 2, 4, 5, 6, 4] 0
289 [1, 2, 3, 4, 5, 6, 1, 2, 4, 5, 6] 0
290 [1, 2, 3, 4, 5, 6, 1, 2, 4, 5, 1, 4] 0
291 [1, 2, 3, 4, 5, 6, 1, 2, 4, 5, 1] 0
292 [1, 2, 3, 4, 5, 6, 1, 2, 4, 5, 4] 0
293 [1, 2, 3, 4, 5, 6, 1, 2, 4, 5] 0
294 [1, 2, 3, 4, 5, 6, 1, 2, 4, 1] 0
295 [1, 2, 3, 4, 5, 6, 1, 2, 4] 0
296 [1, 2, 3, 4, 5, 6, 1, 2, 5, 6, 1] 0
297 [1, 2, 3, 4, 5, 6, 1, 2, 5, 6] 0
298 [1, 2, 3, 4, 5, 6, 1, 2, 5, 1] 0
299 [1, 2, 3, 4, 5, 6, 1, 2, 5] 0
300 [1, 2, 3, 4, 5, 6, 1, 2, 1] 0
301 [1, 2, 3, 4, 5, 6, 1, 2] 0
302 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6] 0
303 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5] 0
304 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4] 0
305 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 3, 4, 5, 6, 3] 0
306 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 3, 4, 5, 6] 0
307 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 3, 4, 5, 3, 4] 0
308 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 3, 4, 5, 3] 0
309 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 3, 4, 5] 0
310 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 3, 4, 3] 0
311 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 3, 4] 0
312 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 3] 0
313 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 4, 5, 6] 0
314 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 4, 5] 0
315 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6, 4] 0
316 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 6] 0
317 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 3, 4, 3] 0
318 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 3, 4] 0
319 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 3] 0
320 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5, 4] 0
321 [1, 2, 3, 4, 5, 6, 1, 3, 4, 5] 0
322 [1, 2, 3, 4, 5, 6, 1, 3, 4, 3] 0
323 [1, 2, 3, 4, 5, 6, 1, 3, 4] 0
324 [1, 2, 3, 4, 5, 6, 1, 3, 5, 6] 0
325 [1, 2, 3, 4, 5, 6, 1, 3, 5] 0
326 [1, 2, 3, 4, 5, 6, 1, 3] 0
327 [1, 2, 3, 4, 5, 6, 1, 4, 5, 6, 4, 5, 6] 0
328 [1, 2, 3, 4, 5, 6, 1, 4, 5, 6, 4, 5] 0
329 [1, 2, 3, 4, 5, 6, 1, 4, 5, 6, 4] 0
330 [1, 2, 3, 4, 5, 6, 1, 4, 5, 6] 0
331 [1, 2, 3, 4, 5, 6, 1, 4, 5, 4] 0
332 [1, 2, 3, 4, 5, 6, 1, 4, 5] 0
333 [1, 2, 3, 4, 5, 6, 1, 4] 0
334 [1, 2, 3, 4, 5, 6, 1, 5, 6] 0
335 [1, 2, 3, 4, 5, 6, 1, 5] 0
336 [1, 2, 3, 4, 5, 6, 1] 0
337 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6] 0
338 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5] 0
339 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4] 0
340 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3] 0
341 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2] 0
342 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6] 0
343 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4] 0
344 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3] 0
345 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2] 0
346 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5] 0
347 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3] 0
348 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 2] 0
349 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4] 0
350 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 2] 0
351 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3] 0
352 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2] 0
353 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5, 6] 0
354 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5] 0
355 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4] 0
356 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3] 0
357 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6] 0
358 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2, 3] 0
359 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2] 0
360 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4] 0
361 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 2] 0
362 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3] 0
363 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2] 0
364 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 3, 4] 0
365 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 3] 0
366 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5] 0
367 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3, 2] 0
368 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3] 0
369 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 2] 0
370 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 3] 0
371 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4] 0
372 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 2] 0
373 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3] 0
374 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 4, 5, 6] 0
375 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 4, 5] 0
376 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 4] 0
377 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2] 0
378 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6] 0
379 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5] 0
380 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4] 0
381 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3] 0
382 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5, 6] 0
383 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5, 3, 4] 0
384 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5, 3] 0
385 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5] 0
386 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 3] 0
387 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4] 0
388 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3] 0
389 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 4, 5, 6] 0
390 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 4, 5] 0
391 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 4] 0
392 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6] 0
393 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2, 3, 2] 0
394 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2, 3] 0
395 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2] 0
396 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 3] 0
397 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4] 0
398 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 2] 0
399 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3] 0
400 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 4] 0
401 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2] 0
402 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 3, 4, 3] 0
403 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 3, 4] 0
404 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 3] 0
405 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 4] 0
406 [1, 2, 3, 4, 5, 6, 2, 3, 4, 5] 0
407 [1, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3, 2] 0
408 [1, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3] 0
409 [1, 2, 3, 4, 5, 6, 2, 3, 4, 2] 0
410 [1, 2, 3, 4, 5, 6, 2, 3, 4, 3] 0
411 [1, 2, 3, 4, 5, 6, 2, 3, 4] 0
412 [1, 2, 3, 4, 5, 6, 2, 3, 5, 6, 2] 0
413 [1, 2, 3, 4, 5, 6, 2, 3, 5, 6] 0
414 [1, 2, 3, 4, 5, 6, 2, 3, 5, 2] 0
415 [1, 2, 3, 4, 5, 6, 2, 3, 5] 0
416 [1, 2, 3, 4, 5, 6, 2, 3, 2] 0
417 [1, 2, 3, 4, 5, 6, 2, 3] 0
418 [1, 2, 3, 4, 5, 6, 2, 4, 5, 6, 4, 5, 6] 0
419 [1, 2, 3, 4, 5, 6, 2, 4, 5, 6, 4, 5] 0
420 [1, 2, 3, 4, 5, 6, 2, 4, 5, 6, 4] 0
421 [1, 2, 3, 4, 5, 6, 2, 4, 5, 6] 0
422 [1, 2, 3, 4, 5, 6, 2, 4, 5, 4] 0
423 [1, 2, 3, 4, 5, 6, 2, 4, 5] 0
424 [1, 2, 3, 4, 5, 6, 2, 4] 0
425 [1, 2, 3, 4, 5, 6, 2, 5, 6] 0
426 [1, 2, 3, 4, 5, 6, 2, 5] 0
427 [1, 2, 3, 4, 5, 6, 2] 0
428 [1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6] 0
429 [1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5] 0
430 [1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4] 0
431 [1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3] 0
432 [1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6] 0
433 [1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 3, 4] 0
434 [1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 3] 0
435 [1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5] 0
436 [1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 3] 0
437 [1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4] 0
438 [1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3] 0
439 [1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 4, 5, 6] 0
440 [1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 4, 5] 0
441 [1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 4] 0
442 [1, 2, 3, 4, 5, 6, 3, 4, 5, 6] 0
443 [1, 2, 3, 4, 5, 6, 3, 4, 5, 3, 4, 3] 0
444 [1, 2, 3, 4, 5, 6, 3, 4, 5, 3, 4] 0
445 [1, 2, 3, 4, 5, 6, 3, 4, 5, 3] 0
446 [1, 2, 3, 4, 5, 6, 3, 4, 5, 4] 0
447 [1, 2, 3, 4, 5, 6, 3, 4, 5] 0
448 [1, 2, 3, 4, 5, 6, 3, 4, 3] 0
449 [1, 2, 3, 4, 5, 6, 3, 4] 0
450 [1, 2, 3, 4, 5, 6, 3, 5, 6] 0
451 [1, 2, 3, 4, 5, 6, 3, 5] 0
452 [1, 2, 3, 4, 5, 6, 3] 0
453 [1, 2, 3, 4, 5, 6, 4, 5, 6, 4, 5, 6] 0
454 [1, 2, 3, 4, 5, 6, 4, 5, 6, 4, 5] 0
455 [1, 2, 3, 4, 5, 6, 4, 5, 6, 4] 0
456 [1, 2, 3, 4, 5, 6, 4, 5, 6] 0
457 [1, 2, 3, 4, 5, 6, 4, 5, 4] 0
458 [1, 2, 3, 4, 5, 6, 4, 5] 0
459 [1, 2, 3, 4, 5, 6, 4] 0
460 [1, 2, 3, 4, 5, 6, 5, 6] 0
461 [1, 2, 3, 4, 5, 6, 5] 0
462 [1, 2, 3, 4, 5, 6] 0
463 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
464 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2] 0
465 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1] 0
466 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 2] 0
467 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3] 0
468 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 1] 0
469 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2] 0
470 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 3] 0
471 [1, 2, 3, 4, 5, 1, 2, 3, 4, 1] 0
472 [1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3, 2] 0
473 [1, 2, 3, 4, 5, 1, 2, 3, 4, 2, 3] 0
474 [1, 2, 3, 4, 5, 1, 2, 3, 4, 2] 0
475 [1, 2, 3, 4, 5, 1, 2, 3, 4, 3] 0
476 [1, 2, 3, 4, 5, 1, 2, 3, 4] 0
477 [1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1] 0
478 [1, 2, 3, 4, 5, 1, 2, 3, 1, 2] 0
479 [1, 2, 3, 4, 5, 1, 2, 3, 1] 0
480 [1, 2, 3, 4, 5, 1, 2, 3, 2] 0
481 [1, 2, 3, 4, 5, 1, 2, 3] 0
482 [1, 2, 3, 4, 5, 1, 2, 4, 1] 0
483 [1, 2, 3, 4, 5, 1, 2, 4] 0
484 [1, 2, 3, 4, 5, 1, 2, 1] 0
485 [1, 2, 3, 4, 5, 1, 2] 0
486 [1, 2, 3, 4, 5, 1, 3, 4, 3] 0
487 [1, 2, 3, 4, 5, 1, 3, 4] 0
488 [1, 2, 3, 4, 5, 1, 3] 0
489 [1, 2, 3, 4, 5, 1, 4] 0
490 [1, 2, 3, 4, 5, 1] 0
491 [1, 2, 3, 4, 5, 2, 3, 4, 2, 3, 2] 0
492 [1, 2, 3, 4, 5, 2, 3, 4, 2, 3] 0
493 [1, 2, 3, 4, 5, 2, 3, 4, 2] 0
494 [1, 2, 3, 4, 5, 2, 3, 4, 3] 0
495 [1, 2, 3, 4, 5, 2, 3, 4] 0
496 [1, 2, 3, 4, 5, 2, 3, 2] 0
497 [1, 2, 3, 4, 5, 2, 3] 0
498 [1, 2, 3, 4, 5, 2, 4] 0
499 [1, 2, 3, 4, 5, 2] 0
500 [1, 2, 3, 4, 5, 3, 4, 3] 0
501 [1, 2, 3, 4, 5, 3, 4] 0
502 [1, 2, 3, 4, 5, 3] 0
503 [1, 2, 3, 4, 5, 4] 0
504 [1, 2, 3, 4, 5] 0
505 [1, 2, 3, 4, 6, 1, 2, 3, 1, 2, 1] 0
506 [1, 2, 3, 4, 6, 1, 2, 3, 1, 2] 0
507 [1, 2, 3, 4, 6, 1, 2, 3, 1] 0
508 [1, 2, 3, 4, 6, 1, 2, 3, 2] 0
509 [1, 2, 3, 4, 6, 1, 2, 3] 0
510 [1, 2, 3, 4, 6, 1, 2, 1] 0
511 [1, 2, 3, 4, 6, 1, 2] 0
512 [1, 2, 3, 4, 6, 1, 3] 0
513 [1, 2, 3, 4, 6, 1] 0
514 [1, 2, 3, 4, 6, 2, 3, 2] 0
515 [1, 2, 3, 4, 6, 2, 3] 0
516 [1, 2, 3, 4, 6, 2] 0
517 [1, 2, 3, 4, 6, 3] 0
518 [1, 2, 3, 4, 6] 0
519 [1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 0
520 [1, 2, 3, 4, 1, 2, 3, 1, 2] 0
521 [1, 2, 3, 4, 1, 2, 3, 1] 0
522 [1, 2, 3, 4, 1, 2, 3, 2] 0
523 [1, 2, 3, 4, 1, 2, 3] 0
524 [1, 2, 3, 4, 1, 2, 1] 0
525 [1, 2, 3, 4, 1, 2] 0
526 [1, 2, 3, 4, 1, 3] 0
527 [1, 2, 3, 4, 1] 0
528 [1, 2, 3, 4, 2, 3, 2] 0
529 [1, 2, 3, 4, 2, 3] 0
530 [1, 2, 3, 4, 2] 0
531 [1, 2, 3, 4, 3] 0
532 [1, 2, 3, 4] 0
533 [1, 2, 3, 5, 6, 1, 2, 5, 6, 1] 0
534 [1, 2, 3, 5, 6, 1, 2, 5, 6] 0
535 [1, 2, 3, 5, 6, 1, 2, 5, 1] 0
536 [1, 2, 3, 5, 6, 1, 2, 5] 0
537 [1, 2, 3, 5, 6, 1, 2, 1] 0
538 [1, 2, 3, 5, 6, 1, 2] 0
539 [1, 2, 3, 5, 6, 1, 5, 6] 0
540 [1, 2, 3, 5, 6, 1, 5] 0
541 [1, 2, 3, 5, 6, 1] 0
542 [1, 2, 3, 5, 6, 2, 5, 6] 0
543 [1, 2, 3, 5, 6, 2, 5] 0
544 [1, 2, 3, 5, 6, 2] 0
545 [1, 2, 3, 5, 6, 5, 6] 0
546 [1, 2, 3, 5, 6, 5] 0
547 [1, 2, 3, 5, 6] 0
548 [1, 2, 3, 5, 1, 2, 1] 0
549 [1, 2, 3, 5, 1, 2] 0
550 [1, 2, 3, 5, 1] 0
551 [1, 2, 3, 5, 2] 0
552 [1, 2, 3, 5] 0
553 [1, 2, 3, 6, 1, 2, 1] 0
554 [1, 2, 3, 6, 1, 2] 0
555 [1, 2, 3, 6, 1] 0
556 [1, 2, 3, 6, 2] 0
557 [1, 2, 3, 6] 0
558 [1, 2, 3, 1, 2, 1] 0
559 [1, 2, 3, 1, 2] 0
560 [1, 2, 3, 1] 0
561 [1, 2, 3, 2] 0
562 [1, 2, 3] 0
563 [1, 2, 4, 5, 6, 1, 4, 5, 6, 4, 5, 6] 0
564 [1, 2, 4, 5, 6, 1, 4, 5, 6, 4, 5] 0
565 [1, 2, 4, 5, 6, 1, 4, 5, 6, 4] 0
566 [1, 2, 4, 5, 6, 1, 4, 5, 6] 0
567 [1, 2, 4, 5, 6, 1, 4, 5, 4] 0
568 [1, 2, 4, 5, 6, 1, 4, 5] 0
569 [1, 2, 4, 5, 6, 1, 4] 0
570 [1, 2, 4, 5, 6, 1, 5, 6] 0
571 [1, 2, 4, 5, 6, 1, 5] 0
572 [1, 2, 4, 5, 6, 1] 0
573 [1, 2, 4, 5, 6, 4, 5, 6, 4, 5, 6] 0
574 [1, 2, 4, 5, 6, 4, 5, 6, 4, 5] 0
575 [1, 2, 4, 5, 6, 4, 5, 6, 4] 0
576 [1, 2, 4, 5, 6, 4, 5, 6] 0
577 [1, 2, 4, 5, 6, 4, 5, 4] 0
578 [1, 2, 4, 5, 6, 4, 5] 0
579 [1, 2, 4, 5, 6, 4] 0
580 [1, 2, 4, 5, 6, 5, 6] 0
581 [1, 2, 4, 5, 6, 5] 0
582 [1, 2, 4, 5, 6] 0
583 [1, 2, 4, 5, 1, 4] 0
584 [1, 2, 4, 5, 1] 0
585 [1, 2, 4, 5, 4] 0
586 [1, 2, 4, 5] 0
587 [1, 2, 4, 6, 1] 0
588 [1, 2, 4, 6] 0
589 [1, 2, 4, 1] 0
590 [1, 2, 4] 0
591 [1, 2, 5, 6, 1, 5, 6] 0
592 [1, 2, 5, 6, 1, 5] 0
593 [1, 2, 5, 6, 1] 0
594 [1, 2, 5, 6, 5, 6] 0
595 [1, 2, 5, 6, 5] 0
596 [1, 2, 5, 6] 0
597 [1, 2, 5, 1] 0
598 [1, 2, 5] 0
599 [1, 2, 6, 1] 0
600 [1, 2, 6] 0
601 [1, 2, 1] 0
602 [1, 2] 0
603 [1, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6] 0
604 [1, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5] 0
605 [1, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4] 0
606 [1, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3] 0
607 [1, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6] 0
608 [1, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 3, 4] 0
609 [1, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 3] 0
610 [1, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5] 0
611 [1, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 3] 0
612 [1, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4] 0
613 [1, 3, 4, 5, 6, 3, 4, 5, 6, 3] 0
614 [1, 3, 4, 5, 6, 3, 4, 5, 6, 4, 5, 6] 0
615 [1, 3, 4, 5, 6, 3, 4, 5, 6, 4, 5] 0
616 [1, 3, 4, 5, 6, 3, 4, 5, 6, 4] 0
617 [1, 3, 4, 5, 6, 3, 4, 5, 6] 0
618 [1, 3, 4, 5, 6, 3, 4, 5, 3, 4, 3] 0
619 [1, 3, 4, 5, 6, 3, 4, 5, 3, 4] 0
620 [1, 3, 4, 5, 6, 3, 4, 5, 3] 0
621 [1, 3, 4, 5, 6, 3, 4, 5, 4] 0
622 [1, 3, 4, 5, 6, 3, 4, 5] 0
623 [1, 3, 4, 5, 6, 3, 4, 3] 0
624 [1, 3, 4, 5, 6, 3, 4] 0
625 [1, 3, 4, 5, 6, 3, 5, 6] 0
626 [1, 3, 4, 5, 6, 3, 5] 0
627 [1, 3, 4, 5, 6, 3] 0
628 [1, 3, 4, 5, 6, 4, 5, 6, 4, 5, 6] 0
629 [1, 3, 4, 5, 6, 4, 5, 6, 4, 5] 0
630 [1, 3, 4, 5, 6, 4, 5, 6, 4] 0
631 [1, 3, 4, 5, 6, 4, 5, 6] 0
632 [1, 3, 4, 5, 6, 4, 5, 4] 0
633 [1, 3, 4, 5, 6, 4, 5] 0
634 [1, 3, 4, 5, 6, 4] 0
635 [1, 3, 4, 5, 6, 5, 6] 0
636 [1, 3, 4, 5, 6, 5] 0
637 [1, 3, 4, 5, 6] 0
638 [1, 3, 4, 5, 3, 4, 3] 0
639 [1, 3, 4, 5, 3, 4] 0
640 [1, 3, 4, 5, 3] 0
641 [1, 3, 4, 5, 4] 0
642 [1, 3, 4, 5] 0
643 [1, 3, 4, 6, 3] 0
644 [1, 3, 4, 6] 0
645 [1, 3, 4, 3] 0
646 [1, 3, 4] 0
647 [1, 3, 5, 6, 5, 6] 0
648 [1, 3, 5, 6, 5] 0
649 [1, 3, 5, 6] 0
650 [1, 3, 5] 0
651 [1, 3, 6] 0
652 [1, 3] 0
653 [1, 4, 5, 6, 4, 5, 6, 4, 5, 6] 0
654 [1, 4, 5, 6, 4, 5, 6, 4, 5] 0
655 [1, 4, 5, 6, 4, 5, 6, 4] 0
656 [1, 4, 5, 6, 4, 5, 6] 0
657 [1, 4, 5, 6, 4, 5, 4] 0
658 [1, 4, 5, 6, 4, 5] 0
659 [1, 4, 5, 6, 4] 0
660 [1, 4, 5, 6, 5, 6] 0
661 [1, 4, 5, 6, 5] 0
662 [1, 4, 5, 6] 0
663 [1, 4, 5, 4] 0
664 [1, 4, 5] 0
665 [1, 4, 6] 0
666 [1, 4] 0
667 [1, 5, 6, 5, 6] 0
668 [1, 5, 6, 5] 0
669 [1, 5, 6] 0
670 [1, 5] 0
671 [1, 6] 0
672 [1] 0
673 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6] 0
674 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5] 0
675 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4] 0
676 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3] 0
677 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2] 0
678 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6] 0
679 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4] 0
680 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3] 0
681 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2] 0
682 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5] 0
683 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3] 0
684 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 2] 0
685 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4] 0
686 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 2] 0
687 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3] 0
688 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2] 0
689 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5, 6] 0
690 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5] 0
691 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4] 0
692 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3] 0
693 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6] 0
694 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2, 3] 0
695 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2] 0
696 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4] 0
697 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 2] 0
698 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3] 0
699 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 2] 0
700 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 3, 4] 0
701 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 3] 0
702 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5] 0
703 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3, 2] 0
704 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 2, 3] 0
705 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 2] 0
706 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 3] 0
707 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4] 0
708 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 2] 0
709 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3] 0
710 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 4, 5, 6] 0
711 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 4, 5] 0
712 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 4] 0
713 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2] 0
714 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6] 0
715 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5] 0
716 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4] 0
717 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3] 0
718 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5, 6] 0
719 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5, 3, 4] 0
720 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5, 3] 0
721 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5] 0
722 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 3] 0
723 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4] 0
724 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3] 0
725 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 4, 5, 6] 0
726 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 4, 5] 0
727 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 4] 0
728 [2, 3, 4, 5, 6, 2, 3, 4, 5, 6] 0
729 [2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2, 3, 2] 0
730 [2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2, 3] 0
731 [2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 2] 0
732 [2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 3] 0
733 [2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4] 0
734 [2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 2] 0
735 [2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3] 0
736 [2, 3, 4, 5, 6, 2, 3, 4, 5, 2, 4] 0
737 [2, 3, 4, 5, 6, 2, 3, 4, 5, 2] 0
738 [2, 3, 4, 5, 6, 2, 3, 4, 5, 3, 4, 3] 0
739 [2, 3, 4, 5, 6, 2, 3, 4, 5, 3, 4] 0
740 [2, 3, 4, 5, 6, 2, 3, 4, 5, 3] 0
741 [2, 3, 4, 5, 6, 2, 3, 4, 5, 4] 0
742 [2, 3, 4, 5, 6, 2, 3, 4, 5] 0
743 [2, 3, 4, 5, 6, 2, 3, 4, 2, 3, 2] 0
744 [2, 3, 4, 5, 6, 2, 3, 4, 2, 3] 0
745 [2, 3, 4, 5, 6, 2, 3, 4, 2] 0
746 [2, 3, 4, 5, 6, 2, 3, 4, 3] 0
747 [2, 3, 4, 5, 6, 2, 3, 4] 0
748 [2, 3, 4, 5, 6, 2, 3, 5, 6, 2] 0
749 [2, 3, 4, 5, 6, 2, 3, 5, 6] 0
750 [2, 3, 4, 5, 6, 2, 3, 5, 2] 0
751 [2, 3, 4, 5, 6, 2, 3, 5] 0
752 [2, 3, 4, 5, 6, 2, 3, 2] 0
753 [2, 3, 4, 5, 6, 2, 3] 0
754 [2, 3, 4, 5, 6, 2, 4, 5, 6, 4, 5, 6] 0
755 [2, 3, 4, 5, 6, 2, 4, 5, 6, 4, 5] 0
756 [2, 3, 4, 5, 6, 2, 4, 5, 6, 4] 0
757 [2, 3, 4, 5, 6, 2, 4, 5, 6] 0
758 [2, 3, 4, 5, 6, 2, 4, 5, 4] 0
759 [2, 3, 4, 5, 6, 2, 4, 5] 0
760 [2, 3, 4, 5, 6, 2, 4] 0
761 [2, 3, 4, 5, 6, 2, 5, 6] 0
762 [2, 3, 4, 5, 6, 2, 5] 0
763 [2, 3, 4, 5, 6, 2] 0
764 [2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6] 0
765 [2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5] 0
766 [2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4] 0
767 [2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3] 0
768 [2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6] 0
769 [2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 3, 4] 0
770 [2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 3] 0
771 [2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5] 0
772 [2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 3] 0
773 [2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4] 0
774 [2, 3, 4, 5, 6, 3, 4, 5, 6, 3] 0
775 [2, 3, 4, 5, 6, 3, 4, 5, 6, 4, 5, 6] 0
776 [2, 3, 4, 5, 6, 3, 4, 5, 6, 4, 5] 0
777 [2, 3, 4, 5, 6, 3, 4, 5, 6, 4] 0
778 [2, 3, 4, 5, 6, 3, 4, 5, 6] 0
779 [2, 3, 4, 5, 6, 3, 4, 5, 3, 4, 3] 0
780 [2, 3, 4, 5, 6, 3, 4, 5, 3, 4] 0
781 [2, 3, 4, 5, 6, 3, 4, 5, 3] 0
782 [2, 3, 4, 5, 6, 3, 4, 5, 4] 0
783 [2, 3, 4, 5, 6, 3, 4, 5] 0
784 [2, 3, 4, 5, 6, 3, 4, 3] 0
785 [2, 3, 4, 5, 6, 3, 4] 0
786 [2, 3, 4, 5, 6, 3, 5, 6] 0
787 [2, 3, 4, 5, 6, 3, 5] 0
788 [2, 3, 4, 5, 6, 3] 0
789 [2, 3, 4, 5, 6, 4, 5, 6, 4, 5, 6] 0
790 [2, 3, 4, 5, 6, 4, 5, 6, 4, 5] 0
791 [2, 3, 4, 5, 6, 4, 5, 6, 4] 0
792 [2, 3, 4, 5, 6, 4, 5, 6] 0
793 [2, 3, 4, 5, 6, 4, 5, 4] 0
794 [2, 3, 4, 5, 6, 4, 5] 0
795 [2, 3, 4, 5, 6, 4] 0
796 [2, 3, 4, 5, 6, 5, 6] 0
797 [2, 3, 4, 5, 6, 5] 0
798 [2, 3, 4, 5, 6] 0
799 [2, 3, 4, 5, 2, 3, 4, 2, 3, 2] 0
800 [2, 3, 4, 5, 2, 3, 4, 2, 3] 0
801 [2, 3, 4, 5, 2, 3, 4, 2] 0
802 [2, 3, 4, 5, 2, 3, 4, 3] 0
803 [2, 3, 4, 5, 2, 3, 4] 0
804 [2, 3, 4, 5, 2, 3, 2] 0
805 [2, 3, 4, 5, 2, 3] 0
806 [2, 3, 4, 5, 2, 4] 0
807 [2, 3, 4, 5, 2] 0
808 [2, 3, 4, 5, 3, 4, 3] 0
809 [2, 3, 4, 5, 3, 4] 0
810 [2, 3, 4, 5, 3] 0
811 [2, 3, 4, 5, 4] 0
812 [2, 3, 4, 5] 0
813 [2, 3, 4, 6, 2, 3, 2] 0
814 [2, 3, 4, 6, 2, 3] 0
815 [2, 3, 4, 6, 2] 0
816 [2, 3, 4, 6, 3] 0
817 [2, 3, 4, 6] 0
818 [2, 3, 4, 2, 3, 2] 0
819 [2, 3, 4, 2, 3] 0
820 [2, 3, 4, 2] 0
821 [2, 3, 4, 3] 0
822 [2, 3, 4] 0
823 [2, 3, 5, 6, 2, 5, 6] 0
824 [2, 3, 5, 6, 2, 5] 0
825 [2, 3, 5, 6, 2] 0
826 [2, 3, 5, 6, 5, 6] 0
827 [2, 3, 5, 6, 5] 0
828 [2, 3, 5, 6] 0
829 [2, 3, 5, 2] 0
830 [2, 3, 5] 0
831 [2, 3, 6, 2] 0
832 [2, 3, 6] 0
833 [2, 3, 2] 0
834 [2, 3] 0
835 [2, 4, 5, 6, 4, 5, 6, 4, 5, 6] 0
836 [2, 4, 5, 6, 4, 5, 6, 4, 5] 0
837 [2, 4, 5, 6, 4, 5, 6, 4] 0
838 [2, 4, 5, 6, 4, 5, 6] 0
839 [2, 4, 5, 6, 4, 5, 4] 0
840 [2, 4, 5, 6, 4, 5] 0
841 [2, 4, 5, 6, 4] 0
842 [2, 4, 5, 6, 5, 6] 0
843 [2, 4, 5, 6, 5] 0
844 [2, 4, 5, 6] 0
845 [2, 4, 5, 4] 0
846 [2, 4, 5] 0
847 [2, 4, 6] 0
848 [2, 4] 0
849 [2, 5, 6, 5, 6] 0
850 [2, 5, 6, 5] 0
851 [2, 5, 6] 0
852 [2, 5] 0
853 [2, 6] 0
854 [2] 0
855 [3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6] 0
856 [3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5] 0
857 [3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4] 0
858 [3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3] 0
859 [3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6] 0
860 [3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 3, 4] 0
861 [3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 3] 0
862 [3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5] 0
863 [3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 3] 0
864 [3, 4, 5, 6, 3, 4, 5, 6, 3, 4] 0
865 [3, 4, 5, 6, 3, 4, 5, 6, 3] 0
866 [3, 4, 5, 6, 3, 4, 5, 6, 4, 5, 6] 0
867 [3, 4, 5, 6, 3, 4, 5, 6, 4, 5] 0
868 [3, 4, 5, 6, 3, 4, 5, 6, 4] 0
869 [3, 4, 5, 6, 3, 4, 5, 6] 0
870 [3, 4, 5, 6, 3, 4, 5, 3, 4, 3] 0
871 [3, 4, 5, 6, 3, 4, 5, 3, 4] 0
872 [3, 4, 5, 6, 3, 4, 5, 3] 0
873 [3, 4, 5, 6, 3, 4, 5, 4] 0
874 [3, 4, 5, 6, 3, 4, 5] 0
875 [3, 4, 5, 6, 3, 4, 3] 0
876 [3, 4, 5, 6, 3, 4] 0
877 [3, 4, 5, 6, 3, 5, 6] 0
878 [3, 4, 5, 6, 3, 5] 0
879 [3, 4, 5, 6, 3] 0
880 [3, 4, 5, 6, 4, 5, 6, 4, 5, 6] 0
881 [3, 4, 5, 6, 4, 5, 6, 4, 5] 0
882 [3, 4, 5, 6, 4, 5, 6, 4] 0
883 [3, 4, 5, 6, 4, 5, 6] 0
884 [3, 4, 5, 6, 4, 5, 4] 0
885 [3, 4, 5, 6, 4, 5] 0
886 [3, 4, 5, 6, 4] 0
887 [3, 4, 5, 6, 5, 6] 0
888 [3, 4, 5, 6, 5] 0
889 [3, 4, 5, 6] 0
890 [3, 4, 5, 3, 4, 3] 0
891 [3, 4, 5, 3, 4] 0
892 [3, 4, 5, 3] 0
893 [3, 4, 5, 4] 0
894 [3, 4, 5] 0
895 [3, 4, 6, 3] 0
896 [3, 4, 6] 0
897 [3, 4, 3] 0
898 [3, 4] 0
899 [3, 5, 6, 5, 6] 0
900 [3, 5, 6, 5] 0
901 [3, 5, 6] 0
902 [3, 5] 0
903 [3, 6] 0
904 [3] 0
905 [4, 5, 6, 4, 5, 6, 4, 5, 6] 0
906 [4, 5, 6, 4, 5, 6, 4, 5] 0
907 [4, 5, 6, 4, 5, 6, 4] 0
908 [4, 5, 6, 4, 5, 6] 0
909 [4, 5, 6, 4, 5, 4] 0
910 [4, 5, 6, 4, 5] 0
911 [4, 5, 6, 4] 0
912 [4, 5, 6, 5, 6] 0
913 [4, 5, 6, 5] 0
914 [4, 5, 6] 0
915 [4, 5, 4] 0
916 [4, 5] 0
917 [4, 6] 0
918 [4] 0
919 [5, 6, 5, 6] 0
920 [5, 6, 5] 0
921 [5, 6] 0
922 [5] 0
923 [6] 0
924 [] 0
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: seqs=[]
....: for u in sortables(A,c[1:]):
....:     seqs=seqs+[u,u+[c[0]]]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),seqs).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
....: 
1 [1, 2, 1, 2] 0
2 [1, 2, 1] 0
3 [1, 2] 0
4 [1] 0
5 [2] 0
6 [] 0
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: seqs=[]
....: for u in sortables(A,c[1:]):
....:     seqs=seqs+[u,[c[0]]+u]
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),seqs).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
....: 
1 [1, 2, 1, 2] 0
2 [1, 2, 1] 0
3 [1, 2] 1
Failure!
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: seqs=[]
....: for u in sortables(A,c[1:]):
....:     seqs=seqs+[u,[c[0]]+u]
....: print(seqs)
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),seqs).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
[[1, 2, 1, 2], [0, 1, 2, 1, 2], [1, 2, 1], [0, 1, 2, 1], [1, 2], [0, 1, 2], [1], [0, 1], [2], [0, 2], [], [0]]
1 [1, 2, 1, 2] 0
2 [1, 2, 1] 0
3 [1, 2] 1
Failure!
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: seqs=[]
....: for u in sortables(A,c[1:]):
....:     seqs=seqs+[u,[c[0]]+u]
....: print(seqs)
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),seqs).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
....: 
[[1, 2, 1, 2], [0, 1, 2, 1, 2], [1, 2, 1], [0, 1, 2, 1], [1, 2], [0, 1, 2], [1], [0, 1], [2], [0, 2], [], [0]]
1 [1, 2, 1, 2] 0
2 [1, 2, 1] 0
3 [1, 2] 1
Failure!
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: seqs=[]
....: for u in sortables(A,c[1:]):
....:     seqs=seqs+[u,u+[c[0]]]
....: print(seqs)
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),seqs).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
[[1, 2, 1, 2], [1, 2, 1, 2, 0], [1, 2, 1], [1, 2, 1, 0], [1, 2], [1, 2, 0], [1], [1, 0], [2], [2, 0], [], [0]]
1 [1, 2, 1, 2] 0
2 [1, 2, 1] 0
3 [1, 2] 0
4 [1] 0
5 [2] 0
6 [] 0
sage: A=CartanMatrix(['B',3])
....: c=[0,1,2]
....: seqs=[]
....: for u in sortables(A,c[1:]):
....:     seqs=seqs+[u,u+[c[0]]]
....: print(seqs)
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),seqs).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
....: 
[[1, 2, 1, 2], [1, 2, 1, 2, 0], [1, 2, 1], [1, 2, 1, 0], [1, 2], [1, 2, 0], [1], [1, 0], [2], [2, 0], [], [0]]
1 [1, 2, 1, 2] 0
2 [1, 2, 1] 0
3 [1, 2] 0
4 [1] 0
5 [2] 0
6 [] 0
sage: A=CartanMatrix(['B',3])
....: c=[0,1,2]
....: seqs=[]
....: for u in sortables(A,c[1:]):
....:     seqs=seqs+[u,[c[0]]+u]
....: print(seqs)
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),seqs).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
....: 
[[1, 2, 1, 2], [0, 1, 2, 1, 2], [1, 2, 1], [0, 1, 2, 1], [1, 2], [0, 1, 2], [1], [0, 1], [2], [0, 2], [], [0]]
1 [1, 2, 1, 2] 0
2 [1, 2, 1] 0
3 [1, 2] 1
Failure!
sage: A=CartanMatrix(['B',3])
....: c=[2,1,0]
....: seqs=[]
....: for u in sortables(A,c[1:]):
....:     seqs=seqs+[u,[c[0]]+u]
....: print(seqs)
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),seqs).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
[[1, 0, 1], [2, 1, 0, 1], [1, 0], [2, 1, 0], [1], [2, 1], [0], [2, 0], [], [2]]
1 [1, 0, 1] 0
2 [1, 0] 0
3 [1] 0
4 [0] 0
5 [] 0
sage: B(A,c)
[ 0 -1  0]
[ 1  0 -1]
[ 0  2  0]
sage: A=CartanMatrix(['C',3])
....: c=[2,1,0]
....: seqs=[]
....: for u in sortables(A,c[1:]):
....:     seqs=seqs+[u,[c[0]]+u]
....: print(seqs)
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),seqs).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
....: 
[[1, 0, 1], [2, 1, 0, 1], [1, 0], [2, 1, 0], [1], [2, 1], [0], [2, 0], [], [2]]
1 [1, 0, 1] 0
2 [1, 0] 0
3 [1] 0
4 [0] 0
5 [] 0
sage: B(A,c)
[ 0 -1  0]
[ 1  0 -2]
[ 0  1  0]
sage: A=CartanMatrix(['C',3])
....: c=[2,1,0]
....: seqs=[]
....: for u in sortables(A,c[1:]):
....:     seqs=seqs+[u,[c[0]]+u]
....: print(seqs)
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),seqs).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....: 
[[1, 0, 1], [2, 1, 0, 1], [1, 0], [2, 1, 0], [1], [2, 1], [0], [2, 0], [], [2]]
1 [1, 0, 1] 0
2 [1, 0] 0
3 [1] 0
4 [0] 0
5 [] 0
sage: A=CartanMatrix(['C',3])
....: c=[2,1,0]
....: seqs=[]
....: for u in sortables(A,c[1:]):
....:     seqs=seqs+[u,[c[0]]+u]
....: print(seqs)
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),seqs).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
....: 
[[1, 0, 1], [2, 1, 0, 1], [1, 0], [2, 1, 0], [1], [2, 1], [0], [2, 0], [], [2]]
1 [1, 0, 1] 0
2 [1, 0] 0
3 [1] 0
4 [0] 0
5 [] 0
sage: A=CartanMatrix(['C',3])
....: c=[2,1,0]
....: seqs=[]
....: for u in sortables(A,c[1:]):
....:     seqs=seqs+[u,u+[c[0]]]
....: print(seqs)
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),seqs).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
[[1, 0, 1], [1, 0, 1, 2], [1, 0], [1, 0, 2], [1], [1, 2], [0], [0, 2], [], [2]]
1 [1, 0, 1] 0
2 [1, 0] 0
3 [1] 0
4 [0] 0
5 [] 0
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: seqs=[]
....: for u in sortables(A,c[1:]):
....:     seqs=seqs+[u,u+[c[0]]]
....: print(seqs)
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),seqs).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
[[1, 2, 1, 2], [1, 2, 1, 2, 0], [1, 2, 1], [1, 2, 1, 0], [1, 2], [1, 2, 0], [1], [1, 0], [2], [2, 0], [], [0]]
1 [1, 2, 1, 2] 0
2 [1, 2, 1] 0
3 [1, 2] 0
4 [1] 0
5 [2] 0
6 [] 0
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: seqs=[]
....: for u in sortables(A,c[1:]):
....:     seqs=seqs+[u,[c[0]]+u]
....: print(seqs)
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),seqs).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
[[1, 2, 1, 2], [0, 1, 2, 1, 2], [1, 2, 1], [0, 1, 2, 1], [1, 2], [0, 1, 2], [1], [0, 1], [2], [0, 2], [], [0]]
1 [1, 2, 1, 2] 0
2 [1, 2, 1] 0
3 [1, 2] 1
Failure!
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: seqs=[]
....: for u in sortables(A,c[1:]):
....:     seqs=seqs+[u,u+[c[0]]]
....: print(seqs)
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),seqs).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
....: 
[[1, 2, 1, 2], [1, 2, 1, 2, 0], [1, 2, 1], [1, 2, 1, 0], [1, 2], [1, 2, 0], [1], [1, 0], [2], [2, 0], [], [0]]
1 [1, 2, 1, 2] 0
2 [1, 2, 1] 0
3 [1, 2] 0
4 [1] 0
5 [2] 0
6 [] 0
sage: A=CartanMatrix(['C',3])
....: c=[2,1,0]
....: seqs=[]
....: for u in sortables(A,c[1:]):
....:     seqs=seqs+[u,u+[c[0]]]
....: print(seqs)
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),seqs).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
[[1, 0, 1], [1, 0, 1, 2], [1, 0], [1, 0, 2], [1], [1, 2], [0], [0, 2], [], [2]]
1 [1, 0, 1] 0
2 [1, 0] 0
3 [1] 0
4 [0] 0
5 [] 0
sage: A=CartanMatrix(['C',3])
....: c=[2,0,1]
....: seqs=[]
....: for u in sortables(A,c[1:]):
....:     seqs=seqs+[u,u+[c[0]]]
....: print(seqs)
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),seqs).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
[[0, 1, 0], [0, 1, 0, 2], [0, 1], [0, 1, 2], [0], [0, 2], [1], [1, 2], [], [2]]
1 [0, 1, 0] 0
2 [0, 1] 0
3 [0] 0
4 [1] 0
5 [] 0
sage: A=CartanMatrix(['C',3])
....: c=[1,2,0]
....: seqs=[]
....: for u in sortables(A,c[1:]):
....:     seqs=seqs+[u,u+[c[0]]]
....: print(seqs)
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),seqs).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
[[2, 0], [2, 0, 1], [2], [2, 1], [0], [0, 1], [], [1]]
1 [2, 0] 0
2 [2] 0
3 [0] 0
4 [] 0
sage: A=CartanMatrix(['C',3])
....: c=[1,2,0]
....: seqs=[]
....: for u in sortables(A,c[1:]):
....:     seqs=seqs+[u,u+[c[0]]]
....: print(seqs)
....: num=0
....: for v in sortables(A,c[1:]):
....:     num+=1
....:     d=p_lambda_int(B(A,c),lam(A,v),seqs).dimension()
....:     print(num,v,d)
....:     if d!=0:
....:         print('Failure!')
....:         break
....: 
[[2, 0], [2, 0, 1], [2], [2, 1], [0], [0, 1], [], [1]]
1 [2, 0] 0
2 [2] 0
3 [0] 0
4 [] 0
sage: A=CartanMatrix(['C',3])
....: c=[1,2,0]
....: for v in sortables(A,c[1:]):
....:     K(c,v)
....: 
[[2, 0], [2], [2, 0, 2], [], [2, 0, 1], [2, 1], [2, 0, 2, 1], [1]]
[[2], [], [2, 0], [0], [2, 1], [1], [2, 0, 1], [0, 1]]
[[0], [], [0, 2], [2], [0, 1], [1], [0, 2, 1], [2, 1]]
[[], [0], [2], [0, 2], [1], [0, 1], [2, 1], [0, 2, 1]]
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: for v in sortables(A,c[1:]):
....:     K(c,v)
[[1, 2, 1, 2],
 [1, 2, 1],
 [1, 2, 1, 2, 1],
 [1, 2],
 [1, 2, 1, 2, 0],
 [1, 2, 1, 0],
 [1, 2, 1, 2, 1, 0],
 [1, 2, 0]]
[[1, 2, 1],
 [1, 2],
 [1, 2, 1, 2],
 [1],
 [1, 2, 1, 0],
 [1, 2, 0],
 [1, 2, 1, 2, 0],
 [1, 0]]
[[1, 2], [1], [1, 2, 1], [], [1, 2, 0], [1, 0], [1, 2, 1, 0], [0]]
[[1], [], [1, 2], [2], [1, 0], [0], [1, 2, 0], [2, 0]]
[[2], [], [2, 1], [1], [2, 0], [0], [2, 1, 0], [1, 0]]
[[], [2], [1], [2, 1], [0], [2, 0], [1, 0], [2, 1, 0]]
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: for v in sortables(A,c[1:]):
....:     print(v,"\n",K(c,v),"\n\n:)
  Cell In [140], line 4
    print(v,"\n",K(c,v),"\n\n:)
                        ^
SyntaxError: unterminated string literal (detected at line 4)

sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: for v in sortables(A,c[1:]):
....:     print(v,"\n",K(c,v),"\n\n")
....: 
[1, 2, 1, 2] 
 [[1, 2, 1, 2], [1, 2, 1], [1, 2, 1, 2, 1], [1, 2], [1, 2, 1, 2, 0], [1, 2, 1, 0], [1, 2, 1, 2, 1, 0], [1, 2, 0]] 


[1, 2, 1] 
 [[1, 2, 1], [1, 2], [1, 2, 1, 2], [1], [1, 2, 1, 0], [1, 2, 0], [1, 2, 1, 2, 0], [1, 0]] 


[1, 2] 
 [[1, 2], [1], [1, 2, 1], [], [1, 2, 0], [1, 0], [1, 2, 1, 0], [0]] 


[1] 
 [[1], [], [1, 2], [2], [1, 0], [0], [1, 2, 0], [2, 0]] 


[2] 
 [[2], [], [2, 1], [1], [2, 0], [0], [2, 1, 0], [1, 0]] 


[] 
 [[], [2], [1], [2, 1], [0], [2, 0], [1, 0], [2, 1, 0]] 


sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: for v in sortables(A,c[1:]):
....:     p_lambda_int(B(A,c),lam(A,v),list(sortables(A,c[1:])))
....: 
A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray
A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 1 ray
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 1 ray
### reloading attached file domination4.py modified at 17:03:06 ###
Traceback (most recent call last):

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/IPython/core/interactiveshell.py:3433 in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)

  Cell In [143], line 1
    sage.repl.load.load(sage.repl.load.base64.b64decode("L1VzZXJzL3JlYWRpbmcvZ2l0L2FmZmluZV9kb21pbmFuY2Uvc29mdHdhcmUvZG9taW5hdGlvbjQucHk="),globals(),True)

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/repl/load.py:252 in load
    code = compile(f.read(), fpath, 'exec')

  File ~/git/affine_dominance/software/domination4.py:184
    ) )           out=out+[k+[c[0]]]
    ^
SyntaxError: unmatched ')'

### reloading attached file domination4.py modified at 17:03:37 ###
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: for v in sortables(A,c[1:]):
....:     p_lambda_int(B(A,c),lam(A,v),K(c[1:],v))
....: 
A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 1 ray
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: for v in sortables(A,c[1:]):
....:     p_lambda_int(B(A,c),lam(A,v),K(c,v))
....: 
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: for v in sortables(A,c[1:]):
....:     p_lambda_int(B(A,c),lam(A,v),list(seq+c[0] for seq in K(c[1:],v)))
....: 
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In [145], line 4
      2 c=[Integer(0),Integer(1),Integer(2)]
      3 for v in sortables(A,c[Integer(1):]):
----> 4     p_lambda_int(B(A,c),lam(A,v),list(seq+c[Integer(0)] for seq in K(c[Integer(1):],v)))

Cell In [145], line 4, in <genexpr>(.0)
      2 c=[Integer(0),Integer(1),Integer(2)]
      3 for v in sortables(A,c[Integer(1):]):
----> 4     p_lambda_int(B(A,c),lam(A,v),list(seq+c[Integer(0)] for seq in K(c[Integer(1):],v)))

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/rings/integer.pyx:1764, in sage.rings.integer.Integer.__add__ (build/cythonized/sage/rings/integer.c:21739)()
   1762         return y
   1763 
-> 1764     return coercion_model.bin_op(left, right, operator.add)
   1765 
   1766 cpdef _add_(self, right) noexcept:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1276, in sage.structure.coerce.CoercionModel.bin_op (build/cythonized/sage/structure/coerce.c:16830)()
   1274     # We should really include the underlying error.
   1275     # This causes so much headache.
-> 1276     raise bin_op_exception(op, x, y)
   1277 
   1278 cpdef canonical_coercion(self, x, y) noexcept:

TypeError: unsupported operand parent(s) for +: '<class 'list'>' and 'Integer Ring'
sage: list(seq+c[0] for seq in K(c[1:],v))
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In [146], line 1
----> 1 list(seq+c[Integer(0)] for seq in K(c[Integer(1):],v))

Cell In [146], line 1, in <genexpr>(.0)
----> 1 list(seq+c[Integer(0)] for seq in K(c[Integer(1):],v))

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/rings/integer.pyx:1764, in sage.rings.integer.Integer.__add__ (build/cythonized/sage/rings/integer.c:21739)()
   1762         return y
   1763 
-> 1764     return coercion_model.bin_op(left, right, operator.add)
   1765 
   1766 cpdef _add_(self, right) noexcept:

File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/structure/coerce.pyx:1276, in sage.structure.coerce.CoercionModel.bin_op (build/cythonized/sage/structure/coerce.c:16830)()
   1274     # We should really include the underlying error.
   1275     # This causes so much headache.
-> 1276     raise bin_op_exception(op, x, y)
   1277 
   1278 cpdef canonical_coercion(self, x, y) noexcept:

TypeError: unsupported operand parent(s) for +: '<class 'list'>' and 'Integer Ring'
sage: list(seq+[c[0]] for seq in K(c[1:],v))
[[1, 2, 1, 2, 0], [1, 2, 1, 0], [1, 2, 1, 2, 1, 0], [1, 2, 0]]
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: for v in sortables(A,c[1:]):
....:     p_lambda_int(B(A,c),lam(A,v),list(seq+[c[0]] for seq in K(c[1:],v)))
A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices
A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 4 vertices
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: for v in sortables(A,c[1:]):
....:     print(v,p_lambda_int(B(A,c),lam(A,v),list(seq+[c[0]] for seq in K(c[1:
....: ],v))))
....: 
[1, 2, 1, 2] A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices
[1, 2, 1] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 4 vertices
[1, 2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[1] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: for v in sortables(A,c[1:]):
....:     print(v,p_lambda_int(B(A,c),lam(A,v),K(c[1:],v)))
....: 
[1, 2, 1, 2] A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray
[1, 2, 1] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
[1, 2] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray
[1] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
[2] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray
[] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 1 ray
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: for v in sortables(A,c[1:]):
....:     print(v,p_lambda_int(B(A,c),lam(A,v),K(c[1:],v)).intersection(p_lambda
....: _int(B(A,c),lam(A,v),list(seq+[c[0]] for seq in K(c[1:
....: ....: ],v)))))
  Cell In [151], line 5
    Ellipsis.: ],v)))))
             ^
SyntaxError: invalid syntax

sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: for v in sortables(A,c[1:]):
....:     print(v,p_lambda_int(B(A,c),lam(A,v),K(c[1:],v)).intersection(p_lambda
....: _int(B(A,c),lam(A,v),list(seq+[c[0]] for seq in K(c[1:],v)))))
....: 
[1, 2, 1, 2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[1, 2, 1] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[1, 2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[1] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[2] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
[] A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: for v in sortables(A,c[1:]):
....:     for seq in K(c[1:]):
....:         print(v,seq,p_lambda_int(B(A,c),lam(A,v),[seq,seq+[c[0]]))
  Cell In [153], line 5
    print(v,seq,p_lambda_int(B(A,c),lam(A,v),[seq,seq+[c[Integer(0)]]))
                                                                     ^
SyntaxError: closing parenthesis ')' does not match opening parenthesis '['

sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: for v in sortables(A,c[1:]):
....:     for seq in K(c[1:]):
....:         print(v,seq,p_lambda_int(B(A,c),lam(A,v),[seq,seq+[c[0]]]))
....: 
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In [154], line 4
      2 c=[Integer(0),Integer(1),Integer(2)]
      3 for v in sortables(A,c[Integer(1):]):
----> 4     for seq in K(c[Integer(1):]):
      5         print(v,seq,p_lambda_int(B(A,c),lam(A,v),[seq,seq+[c[Integer(0)]]]))

TypeError: K() missing 1 required positional argument: 'v'
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: for v in sortables(A,c[1:]):
....:     for seq in K(c[1:],v):
....:         print(v,seq,p_lambda_int(B(A,c),lam(A,v),[seq,seq+[c[0]]]))
[1, 2, 1, 2] [1, 2, 1, 2] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
[1, 2, 1, 2] [1, 2, 1] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 4 vertices and 2 rays
[1, 2, 1, 2] [1, 2, 1, 2, 1] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
[1, 2, 1, 2] [1, 2] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays
[1, 2, 1] [1, 2, 1] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays
[1, 2, 1] [1, 2] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays
[1, 2, 1] [1, 2, 1, 2] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
[1, 2, 1] [1] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
[1, 2] [1, 2] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
[1, 2] [1] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
[1, 2] [1, 2, 1] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays
[1, 2] [] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
[1] [1] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
[1] [] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
[1] [1, 2] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
[1] [2] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
[2] [2] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
[2] [] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
[2] [2, 1] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays
[2] [1] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
[] [] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
[] [2] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
[] [1] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
[] [2, 1] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: for v in sortables(A,c[1:]):
....:     for seq in K(c[1:],v):
....:         print(v,seq,p_lambda_int(B(A,c),lam(A,v),[seq,seq+[c[0]]]))
....:     input()
....: 
[1, 2, 1, 2] [1, 2, 1, 2] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
[1, 2, 1, 2] [1, 2, 1] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 4 vertices and 2 rays
[1, 2, 1, 2] [1, 2, 1, 2, 1] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
[1, 2, 1, 2] [1, 2] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays

''
[1, 2, 1] [1, 2, 1] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays
[1, 2, 1] [1, 2] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays
[1, 2, 1] [1, 2, 1, 2] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
[1, 2, 1] [1] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays

''
[1, 2] [1, 2] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
[1, 2] [1] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
[1, 2] [1, 2, 1] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays
[1, 2] [] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays

''
[1] [1] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
[1] [] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
[1] [1, 2] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
[1] [2] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays

''
[2] [2] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
[2] [] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
[2] [2, 1] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays
[2] [1] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays

''
[] [] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
[] [2] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
[] [1] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
[] [2, 1] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays

''
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: for v in sortables(A,c[1:]):
....:     for seq in K(c[1:],v):
....:         print(v,seq,p_lambda_int(B(A,c),lam(A,v),[seq,seq+[c[0]]]).rays())
....: 
....:     input()
[1, 2, 1, 2] [1, 2, 1, 2] (A ray in the direction (0, -1, 0), A ray in the direction (-1, -2, 1))
[1, 2, 1, 2] [1, 2, 1] (A ray in the direction (-1, -2, 1), A ray in the direction (-1, -1, 1))
[1, 2, 1, 2] [1, 2, 1, 2, 1] (A ray in the direction (1, 0, -1), A ray in the direction (0, -1, 0))
[1, 2, 1, 2] [1, 2] (A ray in the direction (-1, 0, 1), A ray in the direction (-1, -1, 1))

''
[1, 2, 1] [1, 2, 1] (A ray in the direction (-1, -2, 1), A ray in the direction (-1, -1, 1))
[1, 2, 1] [1, 2] (A ray in the direction (-1, 0, 1), A ray in the direction (-1, -1, 1))
[1, 2, 1] [1, 2, 1, 2] (A ray in the direction (0, -1, 0), A ray in the direction (-1, -2, 1))
[1, 2, 1] [1] (A ray in the direction (0, 1, 0), A ray in the direction (-1, 0, 1))

''
[1, 2] [1, 2] (A ray in the direction (-1, 0, 1), A ray in the direction (-1, -1, 1))
[1, 2] [1] (A ray in the direction (0, 1, 0), A ray in the direction (-1, 0, 1))
[1, 2] [1, 2, 1] (A ray in the direction (-1, -2, 1), A ray in the direction (-1, -1, 1))
[1, 2] [] (A ray in the direction (1, 0, -1), A ray in the direction (0, 1, 0))

''
[1] [1] (A ray in the direction (0, 1, 0), A ray in the direction (-1, 0, 1))
[1] [] (A ray in the direction (1, 0, -1), A ray in the direction (0, 1, 0))
[1] [1, 2] (A ray in the direction (-1, 0, 1), A ray in the direction (-1, -1, 1))
[1] [2] (A ray in the direction (1, 0, -1), A ray in the direction (0, -1, 0))

''
[2] [2] (A ray in the direction (1, 0, -1), A ray in the direction (0, -1, 0))
[2] [] (A ray in the direction (1, 0, -1), A ray in the direction (0, 1, 0))
[2] [2, 1] (A ray in the direction (0, -1, 0), A ray in the direction (-1, -2, 1))
[2] [1] (A ray in the direction (0, 1, 0), A ray in the direction (-1, 0, 1))

''
[] [] (A ray in the direction (1, 0, -1), A ray in the direction (0, 1, 0))
[] [2] (A ray in the direction (1, 0, -1), A ray in the direction (0, -1, 0))
[] [1] (A ray in the direction (0, 1, 0), A ray in the direction (-1, 0, 1))
[] [2, 1] (A ray in the direction (0, -1, 0), A ray in the direction (-1, -2, 1))

''
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: for v in sortables(A,c[1:]):
....:     for seq in K(c[1:],v):
....:         print(v,seq,p_lambda_int(B(A,c),lam(A,v),[[],seq,seq+[c[0]]]).rays
....: ())
....:     input()
[1, 2, 1, 2] [1, 2, 1, 2] (A ray in the direction (0, -1, 0),)
[1, 2, 1, 2] [1, 2, 1] ()
[1, 2, 1, 2] [1, 2, 1, 2, 1] (A ray in the direction (1, 0, -1), A ray in the direction (0, -1, 0))
[1, 2, 1, 2] [1, 2] ()
^[[A^[[A^[[A^[[B^[[B
'\x1b[A\x1b[A\x1b[A\x1b[B\x1b[B'
[1, 2, 1] [1, 2, 1] ()
[1, 2, 1] [1, 2] ()
[1, 2, 1] [1, 2, 1, 2] (A ray in the direction (0, -1, 0),)
[1, 2, 1] [1] (A ray in the direction (0, 1, 0),)

''
[1, 2] [1, 2] ()
[1, 2] [1] (A ray in the direction (0, 1, 0),)
[1, 2] [1, 2, 1] ()
[1, 2] [] (A ray in the direction (1, 0, -1), A ray in the direction (0, 1, 0))

''
[1] [1] (A ray in the direction (0, 1, 0),)
[1] [] (A ray in the direction (1, 0, -1), A ray in the direction (0, 1, 0))
[1] [1, 2] ()
[1] [2] (A ray in the direction (1, 0, -1), A ray in the direction (0, -1, 0))

''
[2] [2] (A ray in the direction (1, 0, -1), A ray in the direction (0, -1, 0))
[2] [] (A ray in the direction (1, 0, -1), A ray in the direction (0, 1, 0))
[2] [2, 1] (A ray in the direction (0, -1, 0),)
[2] [1] (A ray in the direction (0, 1, 0),)

''
[] [] (A ray in the direction (1, 0, -1), A ray in the direction (0, 1, 0))
[] [2] (A ray in the direction (1, 0, -1), A ray in the direction (0, -1, 0))
[] [1] (A ray in the direction (0, 1, 0),)
[] [2, 1] (A ray in the direction (0, -1, 0),)

''
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: for v in sortables(A,c[1:]):
....:     for seq in K(c[1:],v):
....:         print(v,seq,p_lambda_int(B(A,c),lam(A,v),[[],seq,seq+[c[0]]]))
....:     input()
[1, 2, 1, 2] [1, 2, 1, 2] A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray
[1, 2, 1, 2] [1, 2, 1] A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices
[1, 2, 1, 2] [1, 2, 1, 2, 1] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
[1, 2, 1, 2] [1, 2] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices

''
[1, 2, 1] [1, 2, 1] A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices
[1, 2, 1] [1, 2] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 4 vertices
[1, 2, 1] [1, 2, 1, 2] A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray
[1, 2, 1] [1] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray

''
[1, 2] [1, 2] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices
[1, 2] [1] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray
[1, 2] [1, 2, 1] A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices
[1, 2] [] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays

''
[1] [1] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray
[1] [] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
[1] [1, 2] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices
[1] [2] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays

''
[2] [2] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
[2] [] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
[2] [2, 1] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray
[2] [1] A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray

''
[] [] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
[] [2] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
[] [1] A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray
[] [2, 1] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 1 ray

''
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: for v in sortables(A,c[1:]):
....:     for seq in K(c[1:],v):
....:         print(v,seq,p_lambda_int(B(A,c),lam(A,v),[seq,seq+[c[0]]]))
....:     input()
[1, 2, 1, 2] [1, 2, 1, 2] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
[1, 2, 1, 2] [1, 2, 1] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 4 vertices and 2 rays
[1, 2, 1, 2] [1, 2, 1, 2, 1] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
[1, 2, 1, 2] [1, 2] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays

''
[1, 2, 1] [1, 2, 1] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays
[1, 2, 1] [1, 2] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays
[1, 2, 1] [1, 2, 1, 2] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
[1, 2, 1] [1] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays

''
[1, 2] [1, 2] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
[1, 2] [1] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
[1, 2] [1, 2, 1] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays
[1, 2] [] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays

''
[1] [1] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
[1] [] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
[1] [1, 2] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
[1] [2] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays

''
[2] [2] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
[2] [] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
[2] [2, 1] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays
[2] [1] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays

''
[] [] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays
[] [2] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
[] [1] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays
[] [2, 1] A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays

''
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: for v in sortables(A,c[1:]):
....:     print(v,"\n",K(c,v),"\n\n")
....: 
[1, 2, 1, 2] 
 [[1, 2, 1, 2], [1, 2, 1], [1, 2, 1, 2, 1], [1, 2], [1, 2, 1, 2, 0], [1, 2, 1, 0], [1, 2, 1, 2, 1, 0], [1, 2, 0]] 


[1, 2, 1] 
 [[1, 2, 1], [1, 2], [1, 2, 1, 2], [1], [1, 2, 1, 0], [1, 2, 0], [1, 2, 1, 2, 0], [1, 0]] 


[1, 2] 
 [[1, 2], [1], [1, 2, 1], [], [1, 2, 0], [1, 0], [1, 2, 1, 0], [0]] 


[1] 
 [[1], [], [1, 2], [2], [1, 0], [0], [1, 2, 0], [2, 0]] 


[2] 
 [[2], [], [2, 1], [1], [2, 0], [0], [2, 1, 0], [1, 0]] 


[] 
 [[], [2], [1], [2, 1], [0], [2, 0], [1, 0], [2, 1, 0]] 


sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: for v in sortables(A,c[1:]):
....:     for seq in K(c[1:],v):
....:         P=p_lambda_int(B(A,c),lam(A,v),[seq,seq+[c[0]]])
....:         Q=p_lambda_int(B(A,c),lam(A,v),[[],seq,seq+[c[0]]])
....:         print(v,seq,"\n",P,P.vertices(),P.rays(),P.lines(),,"\n",Q,Q.verti
....: ces(),Q.rays(),Q.lines())
....:     input()
....: 
....: 
....: 
  Cell In [162], line 7
    print(v,seq,"\n",P,P.vertices(),P.rays(),P.lines(),,"\n",Q,Q.vertices(),Q.rays(),Q.lines())
                                                       ^
SyntaxError: invalid syntax

sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: for v in sortables(A,c[1:]):
....:     for seq in K(c[1:],v):
....:         P=p_lambda_int(B(A,c),lam(A,v),[seq,seq+[c[0]]])
....:         Q=p_lambda_int(B(A,c),lam(A,v),[[],seq,seq+[c[0]]])
....:         print(v,seq,"\n",P,P.vertices(),P.rays(),P.lines(),"\n",Q,Q.vertic
....: es(),Q.rays(),Q.lines())
....:     input()
[1, 2, 1, 2] [1, 2, 1, 2] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays (A vertex at (5, -1, -1), A vertex at (4, -1, 0)) (A ray in the direction (0, -1, 0), A ray in the direction (-1, -2, 1)) () 
 A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray (A vertex at (5, -1, -1),) (A ray in the direction (0, -1, 0),) ()
[1, 2, 1, 2] [1, 2, 1] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 4 vertices and 2 rays (A vertex at (0, -16, 4), A vertex at (5, -1, -1), A vertex at (5, 0, -1), A vertex at (4, 1, 0)) (A ray in the direction (-1, -2, 1), A ray in the direction (-1, -1, 1)) () 
 A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices (A vertex at (5, 0, -1), A vertex at (5, -1, -1)) () ()
[1, 2, 1, 2] [1, 2, 1, 2, 1] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays (A vertex at (5, -1, -1),) (A ray in the direction (1, 0, -1), A ray in the direction (0, -1, 0)) () 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays (A vertex at (5, -1, -1),) (A ray in the direction (1, 0, -1), A ray in the direction (0, -1, 0)) ()
[1, 2, 1, 2] [1, 2] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays (A vertex at (11/2, 0, -3/2), A vertex at (0, -11, 4), A vertex at (4, 3, 0)) (A ray in the direction (-1, 0, 1), A ray in the direction (-1, -1, 1)) () 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices (A vertex at (11/2, 0, -3/2), A vertex at (5, -1, -1), A vertex at (5, 1, -1)) () ()
    
''
[1, 2, 1] [1, 2, 1] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays (A vertex at (0, -18, 6), A vertex at (5, -3, 1), A vertex at (5, -2, 1)) (A ray in the direction (-1, -2, 1), A ray in the direction (-1, -1, 1)) () 
 A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices (A vertex at (5, -2, 1), A vertex at (5, -3, 1)) () ()
[1, 2, 1] [1, 2] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays (A vertex at (13/2, 0, -1/2), A vertex at (0, -13, 6), A vertex at (6, 1, 0)) (A ray in the direction (-1, 0, 1), A ray in the direction (-1, -1, 1)) () 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 4 vertices (A vertex at (13/2, 0, -1/2), A vertex at (6, 1, 0), A vertex at (5, 1, 1), A vertex at (5, -3, 1)) () ()
[1, 2, 1] [1, 2, 1, 2] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays (A vertex at (5, -3, 1),) (A ray in the direction (0, -1, 0), A ray in the direction (-1, -2, 1)) () 
 A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray (A vertex at (5, -3, 1),) (A ray in the direction (0, -1, 0),) ()
[1, 2, 1] [1] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays (A vertex at (8, 0, -2), A vertex at (0, -8, 6)) (A ray in the direction (0, 1, 0), A ray in the direction (-1, 0, 1)) () 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray (A vertex at (8, 0, -2), A vertex at (5, -3, 1)) (A ray in the direction (0, 1, 0),) ()

''
[1, 2] [1, 2] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays (A vertex at (0, -11, 6), A vertex at (5, -1, 1)) (A ray in the direction (-1, 0, 1), A ray in the direction (-1, -1, 1)) () 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices (A vertex at (5, -1, 1), A vertex at (4, -3, 2), A vertex at (4, -1, 2)) () ()
[1, 2] [1] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays (A vertex at (7, 0, -1), A vertex at (0, -7, 6)) (A ray in the direction (0, 1, 0), A ray in the direction (-1, 0, 1)) () 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray (A vertex at (7, 0, -1), A vertex at (4, -3, 2)) (A ray in the direction (0, 1, 0),) ()
[1, 2] [1, 2, 1] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays (A vertex at (4, -4, 2), A vertex at (0, -16, 6), A vertex at (4, -3, 2)) (A ray in the direction (-1, -2, 1), A ray in the direction (-1, -1, 1)) () 
 A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices (A vertex at (4, -3, 2), A vertex at (4, -4, 2)) () ()
[1, 2] [] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays (A vertex at (4, -3, 2),) (A ray in the direction (1, 0, -1), A ray in the direction (0, 1, 0)) () 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays (A vertex at (4, -3, 2),) (A ray in the direction (1, 0, -1), A ray in the direction (0, 1, 0)) ()

''
[1] [1] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays (A vertex at (3, 0, 1), A vertex at (0, -3, 4)) (A ray in the direction (0, 1, 0), A ray in the direction (-1, 0, 1)) () 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray (A vertex at (3, 0, 1), A vertex at (2, -1, 2)) (A ray in the direction (0, 1, 0),) ()
[1] [] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays (A vertex at (2, -1, 2),) (A ray in the direction (1, 0, -1), A ray in the direction (0, 1, 0)) () 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays (A vertex at (2, -1, 2),) (A ray in the direction (1, 0, -1), A ray in the direction (0, 1, 0)) ()
[1] [1, 2] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays (A vertex at (0, -7, 4), A vertex at (3, -1, 1)) (A ray in the direction (-1, 0, 1), A ray in the direction (-1, -1, 1)) () 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices (A vertex at (3, -1, 1), A vertex at (2, -3, 2), A vertex at (2, -1, 2)) () ()
[1] [2] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays (A vertex at (2, -1, 2), A vertex at (4, 3, 0)) (A ray in the direction (1, 0, -1), A ray in the direction (0, -1, 0)) () 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays (A vertex at (2, -1, 2), A vertex at (4, 3, 0)) (A ray in the direction (1, 0, -1), A ray in the direction (0, -1, 0)) ()

''
[2] [2] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays (A vertex at (1, 3, -1),) (A ray in the direction (1, 0, -1), A ray in the direction (0, -1, 0)) () 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays (A vertex at (1, 3, -1),) (A ray in the direction (1, 0, -1), A ray in the direction (0, -1, 0)) ()
[2] [] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays (A vertex at (1, 3, -1),) (A ray in the direction (1, 0, -1), A ray in the direction (0, 1, 0)) () 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays (A vertex at (1, 3, -1),) (A ray in the direction (1, 0, -1), A ray in the direction (0, 1, 0)) ()
[2] [2, 1] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays (A vertex at (4, 0, -4), A vertex at (1, 3, -1), A vertex at (0, 3, 0)) (A ray in the direction (0, -1, 0), A ray in the direction (-1, -2, 1)) () 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray (A vertex at (4, 0, -4), A vertex at (1, 3, -1)) (A ray in the direction (0, -1, 0),) ()
[2] [1] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays (A vertex at (1, 0, -1), A vertex at (0, -1, 0)) (A ray in the direction (0, 1, 0), A ray in the direction (-1, 0, 1)) () 
 A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray (A vertex at (1, 0, -1),) (A ray in the direction (0, 1, 0),) ()

''
[] [] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays (A vertex at (1, 1, 1),) (A ray in the direction (1, 0, -1), A ray in the direction (0, 1, 0)) () 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays (A vertex at (1, 1, 1),) (A ray in the direction (1, 0, -1), A ray in the direction (0, 1, 0)) ()
[] [2] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays (A vertex at (1, 1, 1), A vertex at (2, 3, 0)) (A ray in the direction (1, 0, -1), A ray in the direction (0, -1, 0)) () 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays (A vertex at (1, 1, 1), A vertex at (2, 3, 0)) (A ray in the direction (1, 0, -1), A ray in the direction (0, -1, 0)) ()
[] [1] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays (A vertex at (1, 0, 1), A vertex at (0, -1, 2)) (A ray in the direction (0, 1, 0), A ray in the direction (-1, 0, 1)) () 
 A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray (A vertex at (1, 0, 1),) (A ray in the direction (0, 1, 0),) ()
[] [2, 1] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays (A vertex at (4, 0, -2), A vertex at (2, 2, 0), A vertex at (1, 1, 1)) (A ray in the direction (0, -1, 0), A ray in the direction (-1, -2, 1)) () 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 1 ray (A vertex at (4, 0, -2), A vertex at (2, 2, 0), A vertex at (1, 1, 1)) (A ray in the direction (0, -1, 0),) ()

''
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: for v in sortables(A,c[1:]):
....:     for seq in K(c[1:],v):
....:         P=p_lambda_int(B(A,c),lam(A,v),[seq,seq+[c[0]]])
....:         Q=p_lambda_int(B(A,c),lam(A,v),[[],seq,seq+[c[0]]])
....:         print(v,seq,"\n",P,P.vertices(),P.rays(),P.lines(),"\n\n",Q,Q.vert
....: ices(),Q.rays(),Q.lines(),"\n\n")
....:     input()
[1, 2, 1, 2] [1, 2, 1, 2] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays (A vertex at (5, -1, -1), A vertex at (4, -1, 0)) (A ray in the direction (0, -1, 0), A ray in the direction (-1, -2, 1)) () 

 A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray (A vertex at (5, -1, -1),) (A ray in the direction (0, -1, 0),) () 


[1, 2, 1, 2] [1, 2, 1] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 4 vertices and 2 rays (A vertex at (0, -16, 4), A vertex at (5, -1, -1), A vertex at (5, 0, -1), A vertex at (4, 1, 0)) (A ray in the direction (-1, -2, 1), A ray in the direction (-1, -1, 1)) () 

 A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices (A vertex at (5, 0, -1), A vertex at (5, -1, -1)) () () 


[1, 2, 1, 2] [1, 2, 1, 2, 1] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays (A vertex at (5, -1, -1),) (A ray in the direction (1, 0, -1), A ray in the direction (0, -1, 0)) () 

 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays (A vertex at (5, -1, -1),) (A ray in the direction (1, 0, -1), A ray in the direction (0, -1, 0)) () 


[1, 2, 1, 2] [1, 2] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays (A vertex at (11/2, 0, -3/2), A vertex at (0, -11, 4), A vertex at (4, 3, 0)) (A ray in the direction (-1, 0, 1), A ray in the direction (-1, -1, 1)) () 

 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices (A vertex at (11/2, 0, -3/2), A vertex at (5, -1, -1), A vertex at (5, 1, -1)) () () 


        
''
[1, 2, 1] [1, 2, 1] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays (A vertex at (0, -18, 6), A vertex at (5, -3, 1), A vertex at (5, -2, 1)) (A ray in the direction (-1, -2, 1), A ray in the direction (-1, -1, 1)) () 

 A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices (A vertex at (5, -2, 1), A vertex at (5, -3, 1)) () () 


[1, 2, 1] [1, 2] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays (A vertex at (13/2, 0, -1/2), A vertex at (0, -13, 6), A vertex at (6, 1, 0)) (A ray in the direction (-1, 0, 1), A ray in the direction (-1, -1, 1)) () 

 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 4 vertices (A vertex at (13/2, 0, -1/2), A vertex at (6, 1, 0), A vertex at (5, 1, 1), A vertex at (5, -3, 1)) () () 


[1, 2, 1] [1, 2, 1, 2] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays (A vertex at (5, -3, 1),) (A ray in the direction (0, -1, 0), A ray in the direction (-1, -2, 1)) () 

 A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray (A vertex at (5, -3, 1),) (A ray in the direction (0, -1, 0),) () 


[1, 2, 1] [1] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays (A vertex at (8, 0, -2), A vertex at (0, -8, 6)) (A ray in the direction (0, 1, 0), A ray in the direction (-1, 0, 1)) () 

 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray (A vertex at (8, 0, -2), A vertex at (5, -3, 1)) (A ray in the direction (0, 1, 0),) () 



''
[1, 2] [1, 2] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays (A vertex at (0, -11, 6), A vertex at (5, -1, 1)) (A ray in the direction (-1, 0, 1), A ray in the direction (-1, -1, 1)) () 

 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices (A vertex at (5, -1, 1), A vertex at (4, -3, 2), A vertex at (4, -1, 2)) () () 


[1, 2] [1] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays (A vertex at (7, 0, -1), A vertex at (0, -7, 6)) (A ray in the direction (0, 1, 0), A ray in the direction (-1, 0, 1)) () 

 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray (A vertex at (7, 0, -1), A vertex at (4, -3, 2)) (A ray in the direction (0, 1, 0),) () 


[1, 2] [1, 2, 1] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays (A vertex at (4, -4, 2), A vertex at (0, -16, 6), A vertex at (4, -3, 2)) (A ray in the direction (-1, -2, 1), A ray in the direction (-1, -1, 1)) () 

 A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices (A vertex at (4, -3, 2), A vertex at (4, -4, 2)) () () 


[1, 2] [] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays (A vertex at (4, -3, 2),) (A ray in the direction (1, 0, -1), A ray in the direction (0, 1, 0)) () 

 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays (A vertex at (4, -3, 2),) (A ray in the direction (1, 0, -1), A ray in the direction (0, 1, 0)) () 



''
[1] [1] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays (A vertex at (3, 0, 1), A vertex at (0, -3, 4)) (A ray in the direction (0, 1, 0), A ray in the direction (-1, 0, 1)) () 

 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray (A vertex at (3, 0, 1), A vertex at (2, -1, 2)) (A ray in the direction (0, 1, 0),) () 


[1] [] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays (A vertex at (2, -1, 2),) (A ray in the direction (1, 0, -1), A ray in the direction (0, 1, 0)) () 

 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays (A vertex at (2, -1, 2),) (A ray in the direction (1, 0, -1), A ray in the direction (0, 1, 0)) () 


[1] [1, 2] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays (A vertex at (0, -7, 4), A vertex at (3, -1, 1)) (A ray in the direction (-1, 0, 1), A ray in the direction (-1, -1, 1)) () 

 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices (A vertex at (3, -1, 1), A vertex at (2, -3, 2), A vertex at (2, -1, 2)) () () 


[1] [2] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays (A vertex at (2, -1, 2), A vertex at (4, 3, 0)) (A ray in the direction (1, 0, -1), A ray in the direction (0, -1, 0)) () 

 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays (A vertex at (2, -1, 2), A vertex at (4, 3, 0)) (A ray in the direction (1, 0, -1), A ray in the direction (0, -1, 0)) () 



''
[2] [2] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays (A vertex at (1, 3, -1),) (A ray in the direction (1, 0, -1), A ray in the direction (0, -1, 0)) () 

 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays (A vertex at (1, 3, -1),) (A ray in the direction (1, 0, -1), A ray in the direction (0, -1, 0)) () 


[2] [] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays (A vertex at (1, 3, -1),) (A ray in the direction (1, 0, -1), A ray in the direction (0, 1, 0)) () 

 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays (A vertex at (1, 3, -1),) (A ray in the direction (1, 0, -1), A ray in the direction (0, 1, 0)) () 


[2] [2, 1] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays (A vertex at (4, 0, -4), A vertex at (1, 3, -1), A vertex at (0, 3, 0)) (A ray in the direction (0, -1, 0), A ray in the direction (-1, -2, 1)) () 

 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray (A vertex at (4, 0, -4), A vertex at (1, 3, -1)) (A ray in the direction (0, -1, 0),) () 


[2] [1] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays (A vertex at (1, 0, -1), A vertex at (0, -1, 0)) (A ray in the direction (0, 1, 0), A ray in the direction (-1, 0, 1)) () 

 A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray (A vertex at (1, 0, -1),) (A ray in the direction (0, 1, 0),) () 



''
[] [] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays (A vertex at (1, 1, 1),) (A ray in the direction (1, 0, -1), A ray in the direction (0, 1, 0)) () 

 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays (A vertex at (1, 1, 1),) (A ray in the direction (1, 0, -1), A ray in the direction (0, 1, 0)) () 


[] [2] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays (A vertex at (1, 1, 1), A vertex at (2, 3, 0)) (A ray in the direction (1, 0, -1), A ray in the direction (0, -1, 0)) () 

 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays (A vertex at (1, 1, 1), A vertex at (2, 3, 0)) (A ray in the direction (1, 0, -1), A ray in the direction (0, -1, 0)) () 


[] [1] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays (A vertex at (1, 0, 1), A vertex at (0, -1, 2)) (A ray in the direction (0, 1, 0), A ray in the direction (-1, 0, 1)) () 

 A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray (A vertex at (1, 0, 1),) (A ray in the direction (0, 1, 0),) () 


[] [2, 1] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays (A vertex at (4, 0, -2), A vertex at (2, 2, 0), A vertex at (1, 1, 1)) (A ray in the direction (0, -1, 0), A ray in the direction (-1, -2, 1)) () 

 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 1 ray (A vertex at (4, 0, -2), A vertex at (2, 2, 0), A vertex at (1, 1, 1)) (A ray in the direction (0, -1, 0),) () 



''
sage: A=CartanMatrix(['C',3])
....: c=[0,1,2]
....: for v in sortables(A,c[1:]):
....:     for seq in K(c[1:],v):
....:         P=p_lambda_int(B(A,c),lam(A,v),[seq,seq+[c[0]]])
....:         Q=p_lambda_int(B(A,c),lam(A,v),[[],seq,seq+[c[0]]])
....:         print(v,lam(A,v),seq,"\n",P,P.vertices(),P.rays(),P.lines(),"\n\n"
....: ,Q,Q.vertices(),Q.rays(),Q.lines(),"\n\n")
....:     input()
[1, 2, 1, 2] (5, -1, -1) [1, 2, 1, 2] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays (A vertex at (5, -1, -1), A vertex at (4, -1, 0)) (A ray in the direction (0, -1, 0), A ray in the direction (-1, -2, 1)) () 

 A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray (A vertex at (5, -1, -1),) (A ray in the direction (0, -1, 0),) () 


[1, 2, 1, 2] (5, -1, -1) [1, 2, 1] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 4 vertices and 2 rays (A vertex at (0, -16, 4), A vertex at (5, -1, -1), A vertex at (5, 0, -1), A vertex at (4, 1, 0)) (A ray in the direction (-1, -2, 1), A ray in the direction (-1, -1, 1)) () 

 A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices (A vertex at (5, 0, -1), A vertex at (5, -1, -1)) () () 


[1, 2, 1, 2] (5, -1, -1) [1, 2, 1, 2, 1] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays (A vertex at (5, -1, -1),) (A ray in the direction (1, 0, -1), A ray in the direction (0, -1, 0)) () 

 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays (A vertex at (5, -1, -1),) (A ray in the direction (1, 0, -1), A ray in the direction (0, -1, 0)) () 


[1, 2, 1, 2] (5, -1, -1) [1, 2] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays (A vertex at (11/2, 0, -3/2), A vertex at (0, -11, 4), A vertex at (4, 3, 0)) (A ray in the direction (-1, 0, 1), A ray in the direction (-1, -1, 1)) () 

 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices (A vertex at (11/2, 0, -3/2), A vertex at (5, -1, -1), A vertex at (5, 1, -1)) () () 



''
[1, 2, 1] (5, -3, 1) [1, 2, 1] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays (A vertex at (0, -18, 6), A vertex at (5, -3, 1), A vertex at (5, -2, 1)) (A ray in the direction (-1, -2, 1), A ray in the direction (-1, -1, 1)) () 

 A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices (A vertex at (5, -2, 1), A vertex at (5, -3, 1)) () () 


[1, 2, 1] (5, -3, 1) [1, 2] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays (A vertex at (13/2, 0, -1/2), A vertex at (0, -13, 6), A vertex at (6, 1, 0)) (A ray in the direction (-1, 0, 1), A ray in the direction (-1, -1, 1)) () 

 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 4 vertices (A vertex at (13/2, 0, -1/2), A vertex at (6, 1, 0), A vertex at (5, 1, 1), A vertex at (5, -3, 1)) () () 


[1, 2, 1] (5, -3, 1) [1, 2, 1, 2] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays (A vertex at (5, -3, 1),) (A ray in the direction (0, -1, 0), A ray in the direction (-1, -2, 1)) () 

 A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray (A vertex at (5, -3, 1),) (A ray in the direction (0, -1, 0),) () 


[1, 2, 1] (5, -3, 1) [1] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays (A vertex at (8, 0, -2), A vertex at (0, -8, 6)) (A ray in the direction (0, 1, 0), A ray in the direction (-1, 0, 1)) () 

 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray (A vertex at (8, 0, -2), A vertex at (5, -3, 1)) (A ray in the direction (0, 1, 0),) () 



''
[1, 2] (4, -3, 2) [1, 2] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays (A vertex at (0, -11, 6), A vertex at (5, -1, 1)) (A ray in the direction (-1, 0, 1), A ray in the direction (-1, -1, 1)) () 

 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices (A vertex at (5, -1, 1), A vertex at (4, -3, 2), A vertex at (4, -1, 2)) () () 


[1, 2] (4, -3, 2) [1] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays (A vertex at (7, 0, -1), A vertex at (0, -7, 6)) (A ray in the direction (0, 1, 0), A ray in the direction (-1, 0, 1)) () 

 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray (A vertex at (7, 0, -1), A vertex at (4, -3, 2)) (A ray in the direction (0, 1, 0),) () 


[1, 2] (4, -3, 2) [1, 2, 1] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays (A vertex at (4, -4, 2), A vertex at (0, -16, 6), A vertex at (4, -3, 2)) (A ray in the direction (-1, -2, 1), A ray in the direction (-1, -1, 1)) () 

 A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices (A vertex at (4, -3, 2), A vertex at (4, -4, 2)) () () 


[1, 2] (4, -3, 2) [] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays (A vertex at (4, -3, 2),) (A ray in the direction (1, 0, -1), A ray in the direction (0, 1, 0)) () 

 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays (A vertex at (4, -3, 2),) (A ray in the direction (1, 0, -1), A ray in the direction (0, 1, 0)) () 



''
[1] (2, -1, 2) [1] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays (A vertex at (3, 0, 1), A vertex at (0, -3, 4)) (A ray in the direction (0, 1, 0), A ray in the direction (-1, 0, 1)) () 

 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray (A vertex at (3, 0, 1), A vertex at (2, -1, 2)) (A ray in the direction (0, 1, 0),) () 


[1] (2, -1, 2) [] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays (A vertex at (2, -1, 2),) (A ray in the direction (1, 0, -1), A ray in the direction (0, 1, 0)) () 

 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays (A vertex at (2, -1, 2),) (A ray in the direction (1, 0, -1), A ray in the direction (0, 1, 0)) () 


[1] (2, -1, 2) [1, 2] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays (A vertex at (0, -7, 4), A vertex at (3, -1, 1)) (A ray in the direction (-1, 0, 1), A ray in the direction (-1, -1, 1)) () 

 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices (A vertex at (3, -1, 1), A vertex at (2, -3, 2), A vertex at (2, -1, 2)) () () 


[1] (2, -1, 2) [2] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays (A vertex at (2, -1, 2), A vertex at (4, 3, 0)) (A ray in the direction (1, 0, -1), A ray in the direction (0, -1, 0)) () 

 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays (A vertex at (2, -1, 2), A vertex at (4, 3, 0)) (A ray in the direction (1, 0, -1), A ray in the direction (0, -1, 0)) () 



''
[2] (1, 3, -1) [2] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays (A vertex at (1, 3, -1),) (A ray in the direction (1, 0, -1), A ray in the direction (0, -1, 0)) () 

 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays (A vertex at (1, 3, -1),) (A ray in the direction (1, 0, -1), A ray in the direction (0, -1, 0)) () 


[2] (1, 3, -1) [] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays (A vertex at (1, 3, -1),) (A ray in the direction (1, 0, -1), A ray in the direction (0, 1, 0)) () 

 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays (A vertex at (1, 3, -1),) (A ray in the direction (1, 0, -1), A ray in the direction (0, 1, 0)) () 


[2] (1, 3, -1) [2, 1] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays (A vertex at (4, 0, -4), A vertex at (1, 3, -1), A vertex at (0, 3, 0)) (A ray in the direction (0, -1, 0), A ray in the direction (-1, -2, 1)) () 

 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray (A vertex at (4, 0, -4), A vertex at (1, 3, -1)) (A ray in the direction (0, -1, 0),) () 


[2] (1, 3, -1) [1] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays (A vertex at (1, 0, -1), A vertex at (0, -1, 0)) (A ray in the direction (0, 1, 0), A ray in the direction (-1, 0, 1)) () 

 A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray (A vertex at (1, 0, -1),) (A ray in the direction (0, 1, 0),) () 



''
[] (1, 1, 1) [] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays (A vertex at (1, 1, 1),) (A ray in the direction (1, 0, -1), A ray in the direction (0, 1, 0)) () 

 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays (A vertex at (1, 1, 1),) (A ray in the direction (1, 0, -1), A ray in the direction (0, 1, 0)) () 


[] (1, 1, 1) [2] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays (A vertex at (1, 1, 1), A vertex at (2, 3, 0)) (A ray in the direction (1, 0, -1), A ray in the direction (0, -1, 0)) () 

 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays (A vertex at (1, 1, 1), A vertex at (2, 3, 0)) (A ray in the direction (1, 0, -1), A ray in the direction (0, -1, 0)) () 


[] (1, 1, 1) [1] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 2 rays (A vertex at (1, 0, 1), A vertex at (0, -1, 2)) (A ray in the direction (0, 1, 0), A ray in the direction (-1, 0, 1)) () 

 A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray (A vertex at (1, 0, 1),) (A ray in the direction (0, 1, 0),) () 


[] (1, 1, 1) [2, 1] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 2 rays (A vertex at (4, 0, -2), A vertex at (2, 2, 0), A vertex at (1, 1, 1)) (A ray in the direction (0, -1, 0), A ray in the direction (-1, -2, 1)) () 

 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 1 ray (A vertex at (4, 0, -2), A vertex at (2, 2, 0), A vertex at (1, 1, 1)) (A ray in the direction (0, -1, 0),) () 



''
sage: B(A,c)
[ 0  1  0]
[-1  0  2]
[ 0 -1  0]
### reloading attached file domination4.py modified at 20:23:09 ###
### reloading attached file domination4.py modified at 20:26:16 ###
Traceback (most recent call last):

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/IPython/core/interactiveshell.py:3433 in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)

  Cell In [167], line 1
    sage.repl.load.load(sage.repl.load.base64.b64decode("L1VzZXJzL3JlYWRpbmcvZ2l0L2FmZmluZV9kb21pbmFuY2Uvc29mdHdhcmUvZG9taW5hdGlvbjQucHk="),globals(),True)

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/repl/load.py:252 in load
    code = compile(f.read(), fpath, 'exec')

  File ~/git/affine_dominance/software/domination4.py:206
    elif
         ^
SyntaxError: invalid syntax

### reloading attached file domination4.py modified at 20:28:18 ###
Traceback (most recent call last):

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/IPython/core/interactiveshell.py:3433 in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)

  Cell In [167], line 1
    sage.repl.load.load(sage.repl.load.base64.b64decode("L1VzZXJzL3JlYWRpbmcvZ2l0L2FmZmluZV9kb21pbmFuY2Uvc29mdHdhcmUvZG9taW5hdGlvbjQucHk="),globals(),True)

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/repl/load.py:252 in load
    code = compile(f.read(), fpath, 'exec')

  File ~/git/affine_dominance/software/domination4.py:212
    out=out+[k+[c[0]]]
    ^
IndentationError: unexpected indent

### reloading attached file domination4.py modified at 23:35:46 ###
### reloading attached file domination4.py modified at 23:38:40 ###
Traceback (most recent call last):

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/IPython/core/interactiveshell.py:3433 in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)

  Cell In [167], line 1
    sage.repl.load.load(sage.repl.load.base64.b64decode("L1VzZXJzL3JlYWRpbmcvZ2l0L2FmZmluZV9kb21pbmFuY2Uvc29mdHdhcmUvZG9taW5hdGlvbjQucHk="),globals(),True)

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/repl/load.py:252 in load
    code = compile(f.read(), fpath, 'exec')

  File ~/git/affine_dominance/software/domination4.py:226
    def Kc(c,coxnum):  # powers of c
    ^
IndentationError: expected an indented block after function definition on line 220

### reloading attached file domination4.py modified at 23:43:19 ###
Traceback (most recent call last):

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/IPython/core/interactiveshell.py:3433 in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)

  Cell In [167], line 1
    sage.repl.load.load(sage.repl.load.base64.b64decode("L1VzZXJzL3JlYWRpbmcvZ2l0L2FmZmluZV9kb21pbmFuY2Uvc29mdHdhcmUvZG9taW5hdGlvbjQucHk="),globals(),True)

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/repl/load.py:252 in load
    code = compile(f.read(), fpath, 'exec')

  File ~/git/affine_dominance/software/domination4.py:218
    if k=[]:
       ^
SyntaxError: invalid syntax. Maybe you meant '==' or ':=' instead of '='?

### reloading attached file domination4.py modified at 23:44:11 ###
Traceback (most recent call last):

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/IPython/core/interactiveshell.py:3433 in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)

  Cell In [167], line 1
    sage.repl.load.load(sage.repl.load.base64.b64decode("L1VzZXJzL3JlYWRpbmcvZ2l0L2FmZmluZV9kb21pbmFuY2Uvc29mdHdhcmUvZG9taW5hdGlvbjQucHk="),globals(),True)

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/repl/load.py:252 in load
    code = compile(f.read(), fpath, 'exec')

  File ~/git/affine_dominance/software/domination4.py:218
    if k=[]:
       ^
SyntaxError: invalid syntax. Maybe you meant '==' or ':=' instead of '='?

### reloading attached file domination4.py modified at 23:44:27 ###
### reloading attached file domination4.py modified at 23:46:06 ###
### reloading attached file domination4.py modified at 23:53:36 ###
### reloading attached file domination4.py modified at 23:54:08 ###
### reloading attached file domination4.py modified at 23:54:13 ###
### reloading attached file domination4.py modified at 00:16:25 ###
### reloading attached file domination4.py modified at 00:16:37 ###
### reloading attached file domination4.py modified at 13:26:39 ###
### reloading attached file domination4.py modified at 13:28:01 ###
### reloading attached file domination4.py modified at 13:32:33 ###
Traceback (most recent call last):

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/IPython/core/interactiveshell.py:3433 in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)

  Cell In [167], line 1
    sage.repl.load.load(sage.repl.load.base64.b64decode("L1VzZXJzL3JlYWRpbmcvZ2l0L2FmZmluZV9kb21pbmFuY2Uvc29mdHdhcmUvZG9taW5hdGlvbjQucHk="),globals(),True)

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/repl/load.py:252 in load
    code = compile(f.read(), fpath, 'exec')

  File ~/git/affine_dominance/software/domination4.py:176
    def B(A,c):  # Cartan matrix (assumes nonpositive off-diagonal entries) and Coxeter element (a list)
    ^
IndentationError: expected an indented block after function definition on line 171

### reloading attached file domination4.py modified at 13:32:52 ###
### reloading attached file domination4.py modified at 14:06:57 ###
Traceback (most recent call last):

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/IPython/core/interactiveshell.py:3433 in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)

  Cell In [167], line 1
    sage.repl.load.load(sage.repl.load.base64.b64decode("L1VzZXJzL3JlYWRpbmcvZ2l0L2FmZmluZV9kb21pbmFuY2Uvc29mdHdhcmUvZG9taW5hdGlvbjQucHk="),globals(),True)

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/repl/load.py:252 in load
    code = compile(f.read(), fpath, 'exec')

  File ~/git/affine_dominance/software/domination4.py:172
    rays=list(r.vector() for r in P.rays();
                                          ^
SyntaxError: invalid syntax

### reloading attached file domination4.py modified at 14:07:04 ###
### reloading attached file domination4.py modified at 14:14:27 ###
Traceback (most recent call last):

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/IPython/core/interactiveshell.py:3433 in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)

  Cell In [167], line 1
    sage.repl.load.load(sage.repl.load.base64.b64decode("L1VzZXJzL3JlYWRpbmcvZ2l0L2FmZmluZV9kb21pbmFuY2Uvc29mdHdhcmUvZG9taW5hdGlvbjQucHk="),globals(),True)

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/repl/load.py:252 in load
    code = compile(f.read(), fpath, 'exec')

  File ~/git/affine_dominance/software/domination4.py:177
    rays=rays+[vertvec-
              ^
SyntaxError: '[' was never closed

### reloading attached file domination4.py modified at 14:16:43 ###
### reloading attached file domination4.py modified at 14:22:47 ###
### reloading attached file domination4.py modified at 14:33:09 ###
### reloading attached file domination4.py modified at 15:29:51 ###
### reloading attached file domination4.py modified at 15:31:02 ###
### reloading attached file domination4.py modified at 16:14:48 ###
### reloading attached file domination4.py modified at 16:15:23 ###
### reloading attached file domination4.py modified at 19:00:21 ###
### reloading attached file domination4.py modified at 19:02:11 ###
### reloading attached file domination4.py modified at 14:24:50 ###
### reloading attached file domination4.py modified at 14:25:52 ###
### reloading attached file domination4.py modified at 14:27:40 ###
### reloading attached file domination4.py modified at 13:55:22 ###
### reloading attached file domination4.py modified at 13:22:15 ###
### reloading attached file domination4.py modified at 13:29:07 ###
### reloading attached file domination4.py modified at 17:59:28 ###
sage: B(A,c)
[ 0  1  0]
[-1  0  2]
[ 0 -1  0]
sage: A=CartanMatrix(['C',3])
....: c=[1,0,2]
....: for v in sortables(A,c[1:]):
....:     for seq in K(c[1:],v):
....:         P=p_lambda_int(B(A,c),lam(A,v),[seq,seq+[c[0]]])
....:         Q=p_lambda_int(B(A,c),lam(A,v),[[],seq,seq+[c[0]]])
....:         print(v,lam(A,v),seq,"\n",P,P.vertices(),P.rays(),P.lines(),"\n\n"
....: ,Q,Q.vertices(),Q.rays(),Q.lines(),"\n\n")
....:     input()
[0, 2] (-1, 4, -1) [0, 2] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices and 1 ray (A vertex at (-1, 4, -1), A vertex at (-5, 0, -5)) (A ray in the direction (0, -1, 0),) () 

 A 0-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex (A vertex at (-1, 4, -1),) () () 


[0, 2] (-1, 4, -1) [0] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex, 1 ray, 1 line (A vertex at (-1, 0, -1),) (A ray in the direction (-1, 0, -1),) (A line in the direction (0, 1, 0),) 

 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays (A vertex at (-1, 4, -1),) (A ray in the direction (0, 1, 0), A ray in the direction (-1, 0, -1)) () 


[0, 2] (-1, 4, -1) [0, 2, 0] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex, 1 ray, 1 line (A vertex at (-1, 0, -1),) (A ray in the direction (-1, 0, -1),) (A line in the direction (0, 1, 0),) 

 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays (A vertex at (-1, 4, -1),) (A ray in the direction (0, 1, 0), A ray in the direction (-1, 0, -1)) () 


[0, 2] (-1, 4, -1) [] 
 A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray (A vertex at (-1, 4, -1),) (A ray in the direction (0, 1, 0),) () 

 A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray (A vertex at (-1, 4, -1),) (A ray in the direction (0, 1, 0),) () 


q               
'q'
[0] (-1, 2, 1) [0] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex, 1 ray, 1 line (A vertex at (-1, 0, 1),) (A ray in the direction (-1, 0, -1),) (A line in the direction (0, 1, 0),) 

 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays (A vertex at (-1, 2, 1),) (A ray in the direction (0, 1, 0), A ray in the direction (-1, 0, -1)) () 


[0] (-1, 2, 1) [] 
 A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray (A vertex at (-1, 2, 1),) (A ray in the direction (0, 1, 0),) () 

 A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray (A vertex at (-1, 2, 1),) (A ray in the direction (0, 1, 0),) () 


[0] (-1, 2, 1) [0, 2] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 1 ray (A vertex at (-1, 2, 1), A vertex at (-2, 3, 0), A vertex at (-5, 0, -3)) (A ray in the direction (0, -1, 0),) () 

 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices (A vertex at (-1, 2, 1), A vertex at (-2, 3, 0), A vertex at (-3, 2, -1)) () () 


[0] (-1, 2, 1) [2] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex, 1 ray, 1 line (A vertex at (-1, 0, 1),) (A ray in the direction (-1, 0, -1),) (A line in the direction (0, 1, 0),) 

 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays (A vertex at (-1, 2, 1),) (A ray in the direction (0, 1, 0), A ray in the direction (-1, 0, -1)) () 



''
[2] (1, 3, -1) [2] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex, 1 ray, 1 line (A vertex at (1, 0, -1),) (A ray in the direction (-1, 0, -1),) (A line in the direction (0, 1, 0),) 

 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays (A vertex at (1, 3, -1),) (A ray in the direction (0, 1, 0), A ray in the direction (-1, 0, -1)) () 


[2] (1, 3, -1) [] 
 A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray (A vertex at (1, 3, -1),) (A ray in the direction (0, 1, 0),) () 

 A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray (A vertex at (1, 3, -1),) (A ray in the direction (0, 1, 0),) () 


[2] (1, 3, -1) [2, 0] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 1 ray (A vertex at (0, 3, -2), A vertex at (1, 3, -1), A vertex at (-3, 0, -5)) (A ray in the direction (0, -1, 0),) () 

 A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 2 vertices (A vertex at (0, 3, -2), A vertex at (1, 3, -1)) () () 


[2] (1, 3, -1) [0] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex, 1 ray, 1 line (A vertex at (1, 0, -1),) (A ray in the direction (-1, 0, -1),) (A line in the direction (0, 1, 0),) 

 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays (A vertex at (1, 3, -1),) (A ray in the direction (0, 1, 0), A ray in the direction (-1, 0, -1)) () 



''
[] (1, 1, 1) [] 
 A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray (A vertex at (1, 1, 1),) (A ray in the direction (0, 1, 0),) () 

 A 1-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 1 ray (A vertex at (1, 1, 1),) (A ray in the direction (0, 1, 0),) () 


[] (1, 1, 1) [2] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex, 1 ray, 1 line (A vertex at (1, 0, 1),) (A ray in the direction (-1, 0, -1),) (A line in the direction (0, 1, 0),) 

 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays (A vertex at (1, 1, 1),) (A ray in the direction (0, 1, 0), A ray in the direction (-1, 0, -1)) () 


[] (1, 1, 1) [0] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex, 1 ray, 1 line (A vertex at (1, 0, 1),) (A ray in the direction (-1, 0, -1),) (A line in the direction (0, 1, 0),) 

 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 1 vertex and 2 rays (A vertex at (1, 1, 1),) (A ray in the direction (0, 1, 0), A ray in the direction (-1, 0, -1)) () 


[] (1, 1, 1) [2, 0] 
 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices and 1 ray (A vertex at (1, 1, 1), A vertex at (0, 3, 0), A vertex at (-3, 0, -3)) (A ray in the direction (0, -1, 0),) () 

 A 2-dimensional polyhedron in QQ^3 defined as the convex hull of 3 vertices (A vertex at (1, 1, 1), A vertex at (0, 3, 0), A vertex at (-2, 1, -2)) () () 



''
sage: B(A,c)
[ 0 -1  0]
[ 1  0  2]
[ 0 -1  0]
### reloading attached file domination4.py modified at 12:49:13 ###
sage: attach('/Users/reading/git/affine_dominance/software/domination5.py')
### reloading attached file domination5.py modified at 13:28:05 ###
### reloading attached file domination5.py modified at 13:28:39 ###
### reloading attached file domination5.py modified at 13:29:35 ###
### reloading attached file domination5.py modified at 13:34:46 ###
### reloading attached file domination5.py modified at 13:35:55 ###
Traceback (most recent call last):

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/IPython/core/interactiveshell.py:3433 in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)

  Cell In [171], line 1
    sage.repl.load.load(sage.repl.load.base64.b64decode("L1VzZXJzL3JlYWRpbmcvZ2l0L2FmZmluZV9kb21pbmFuY2Uvc29mdHdhcmUvZG9taW5hdGlvbjUucHk="),globals(),True)

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/repl/load.py:252 in load
    code = compile(f.read(), fpath, 'exec')

  File ~/git/affine_dominance/software/domination5.py:241
    def lam(A,v):
    ^
IndentationError: expected an indented block after function definition on line 235

### reloading attached file domination5.py modified at 13:36:59 ###
Traceback (most recent call last):

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/IPython/core/interactiveshell.py:3433 in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)

  Cell In [171], line 1
    sage.repl.load.load(sage.repl.load.base64.b64decode("L1VzZXJzL3JlYWRpbmcvZ2l0L2FmZmluZV9kb21pbmFuY2Uvc29mdHdhcmUvZG9taW5hdGlvbjUucHk="),globals(),True)

  File /private/var/tmp/sage-10.2-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/repl/load.py:252 in load
    code = compile(f.read(), fpath, 'exec')

  File ~/git/affine_dominance/software/domination5.py:241
    def lam(A,v):
    ^
IndentationError: expected an indented block after function definition on line 235

### reloading attached file domination5.py modified at 13:42:29 ###
### reloading attached file domination5.py modified at 13:44:24 ###
### reloading attached file domination5.py modified at 15:24:51 ###
### reloading attached file domination5.py modified at 18:31:13 ###
### reloading attached file domination5.py modified at 13:18:45 ###
### reloading attached file domination5.py modified at 13:19:09 ###
sage: 
